#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _992;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    float _376 = (_352 > 0.0) ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_357 + (-0.5)) + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_358 + (-0.5)) + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _434 = 0.5 - (_286 * 0.5);
    float _441 = ((((_416 - (_416 * _286)) * cbMtdParam._m0[9u].x) - _299) * _434) + _299;
    float _442 = ((((_417 - (_417 * _286)) * cbMtdParam._m0[9u].y) - _301) * _434) + _301;
    float _443 = (((cbMtdParam._m0[9u].z * (_418 - (_418 * _286))) - _303) * _434) + _303;
    vec4 _455 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _457 = _455.x;
    vec4 _469 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _477 = (_469.x * 2.0) + (-1.0);
    float _479 = (_469.y * 2.0) + (-1.0);
    float _480 = dot(vec2(_477, _479), vec2(_477, _479));
    float _3098 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _485 = sqrt(1.0 - (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))));
    float _486 = _469.z * _286;
    float _489 = fma(_485, _195, fma(_479, _202, _477 * _188));
    float _492 = fma(_485, _196, fma(_479, _203, _477 * _189));
    float _495 = fma(_485, _197, fma(_479, _204, _477 * _190));
    float _499 = inversesqrt(dot(vec3(_489, _492, _495), vec3(_489, _492, _495)));
    float _500 = _499 * _489;
    float _501 = _499 * _492;
    float _502 = _499 * _495;
    float _3109 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _503 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
    float _3120 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3131 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3142 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3153 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _507 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _523 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _527 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _528 = _259 * _527;
    float _529 = _260 * _527;
    float _530 = _261 * _527;
    float _536 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _537 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _558 = fma(_502, cbSceneParam._m0[5u].z, fma(_501, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _500));
    float _561 = fma(_502, cbSceneParam._m0[6u].z, fma(_501, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _500));
    float _564 = fma(_502, cbSceneParam._m0[7u].z, fma(_501, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _500));
    uint _577 = uint(roundEven(NORMAL.w)) * 13u;
    uint _580 = (_577 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _586 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0)))) * cbInstanceData._m0[_580].x;
    float _587 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_580].y;
    float _588 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_580].z;
    float _3164 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _3175 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _590 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    float _3186 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _592 = 1.0 - _507;
    float _593 = _589 * _592;
    float _594 = _590 * _592;
    float _595 = _591 * _592;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _507;
    float _601 = (_590 + (-0.039999999105930328369140625)) * _507;
    float _602 = (_591 + (-0.039999999105930328369140625)) * _507;
    float _603 = _600 + 0.039999999105930328369140625;
    float _605 = _601 + 0.039999999105930328369140625;
    float _606 = _602 + 0.039999999105930328369140625;
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _536, cbSceneParam._m0[86u].y * _537));
    float _618 = _615.x * TEXCOORD.z;
    float _619 = dot(vec3(_500, _501, _502), vec3(_528, _529, _530));
    float _622 = _619 * 2.0;
    float _626 = (_622 * _500) - _528;
    float _627 = (_622 * _501) - _529;
    float _628 = (_622 * _502) - _530;
    float _632 = abs(dot(vec3(_528, _529, _530), vec3(_500, _501, _502)));
    float _3197 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _634 = sqrt(_503);
    float _647 = exp2((_634 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_634 * 3.0));
    float _653 = (1.0 - _647) * ((_634 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _654 = _647 * _634;
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _991;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = fma(_690, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _682));
        float _722 = fma(_690, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _682));
        float _726 = fma(_690, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _682));
        float _749 = _682 + _500;
        float _750 = _686 + _501;
        float _751 = _690 + _502;
        float _761 = fma(_751, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _749)) - _718;
        float _762 = fma(_751, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _749)) - _722;
        float _763 = fma(_751, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _749)) - _726;
        float _767 = inversesqrt(dot(vec3(_761, _762, _763), vec3(_761, _762, _763)));
        float _780 = ((_767 * _761) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_718 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _781 = ((_767 * _762) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_722 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _782 = ((_767 * _763) / cbModelParam._m0[34u].z) + ((((((_726 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_780, _781, _782), 0.0);
        float _819 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _820 = _819 * (_785.x + (-0.5));
        float _821 = _819 * (_785.y + (-0.5));
        float _822 = _819 * (_785.z + (-0.5));
        float _829 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _830 = _829 * (_792.x + (-0.5));
        float _831 = _829 * (_792.y + (-0.5));
        float _832 = _829 * (_792.z + (-0.5));
        float _839 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _840 = _839 * (_799.x + (-0.5));
        float _841 = _839 * (_799.y + (-0.5));
        float _842 = _839 * (_799.z + (-0.5));
        float _849 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _850 = _849 * (_806.x + (-0.5));
        float _851 = _849 * (_806.y + (-0.5));
        float _852 = _849 * (_806.z + (-0.5));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = _820 * 0.5;
        float _857 = _830 * 0.5;
        float _858 = _840 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _873 = (dot(vec3(_500, _501, _502), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3223 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _883 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3234 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3245 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0))) * (_885 + 1.0))) + _890) * _853;
        float _900 = _821 * 0.5;
        float _901 = _831 * 0.5;
        float _902 = _841 * 0.5;
        float _903 = dot(vec3(_900, _901, _902), vec3(_900, _901, _902));
        float _908 = (_903 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_903);
        float _916 = (dot(vec3(_500, _501, _502), vec3(_908 * _900, _908 * _901, _908 * _902)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _925 = sqrt(((_901 * _901) + (_900 * _900)) + (_902 * _902)) / (_854 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _927 = _926 * 2.0;
        float _931 = (1.0 - _926) / (_926 + 1.0);
        float _3278 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _941 = ((((1.0 - _932) * (_927 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_927 + 1.0))) + _932) * _854;
        float _942 = _822 * 0.5;
        float _943 = _832 * 0.5;
        float _944 = _842 * 0.5;
        float _945 = dot(vec3(_942, _943, _944), vec3(_942, _943, _944));
        float _950 = (_945 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_945);
        float _958 = (dot(vec3(_500, _501, _502), vec3(_950 * _942, _950 * _943, _950 * _944)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _967 = sqrt(((_943 * _943) + (_942 * _942)) + (_944 * _944)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _969 = _968 * 2.0;
        float _973 = (1.0 - _968) / (_968 + 1.0);
        float _3311 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _983 = ((((1.0 - _974) * (_969 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_969 + 1.0))) + _974) * _855;
        _991 = _822;
        _993 = _821;
        _994 = _820;
        _995 = _832;
        _996 = _831;
        _997 = _830;
        _998 = _842;
        _999 = _841;
        _1000 = _840;
        _1001 = _855;
        _1002 = _854;
        _1003 = _853;
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
        _1005 = cbModelParam._m0[36u].z * (isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0)));
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0)));
    }
    else
    {
        _991 = _992;
        _993 = _992;
        _994 = _992;
        _995 = _992;
        _996 = _992;
        _997 = _992;
        _998 = _992;
        _999 = _992;
        _1000 = _992;
        _1001 = _992;
        _1002 = _992;
        _1003 = _992;
        _1004 = 0.0;
        _1005 = 0.0;
        _1006 = 0.0;
    }
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1032 = fma(_690, cbModelParam._m0[30u].z, fma(_686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _682));
        float _1036 = fma(_690, cbModelParam._m0[31u].z, fma(_686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _682));
        float _1040 = fma(_690, cbModelParam._m0[32u].z, fma(_686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _682));
        float _1063 = _682 + _500;
        float _1064 = _686 + _501;
        float _1065 = _690 + _502;
        float _1075 = fma(_1065, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1063)) - _1032;
        float _1076 = fma(_1065, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1063)) - _1036;
        float _1077 = fma(_1065, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1063)) - _1040;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1032 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1036 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[35u].z) + ((((((_1040 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1131 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1098.x + (-0.5));
        float _1133 = _1131 * (_1098.y + (-0.5));
        float _1134 = _1131 * (_1098.z + (-0.5));
        float _1141 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1105.x + (-0.5));
        float _1143 = _1141 * (_1105.y + (-0.5));
        float _1144 = _1141 * (_1105.z + (-0.5));
        float _1151 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1112.x + (-0.5));
        float _1153 = _1151 * (_1112.y + (-0.5));
        float _1154 = _1151 * (_1112.z + (-0.5));
        float _1161 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1119.x + (-0.5));
        float _1163 = _1161 * (_1119.y + (-0.5));
        float _1164 = _1161 * (_1119.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_500, _501, _502), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3374 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_1195 + 1.0))) + _1200) * _1165;
        float _1210 = _1133 * 0.5;
        float _1211 = _1143 * 0.5;
        float _1212 = _1153 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_500, _501, _502), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3407 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_1237 + 1.0))) + _1242) * _1166;
        float _1252 = _1134 * 0.5;
        float _1253 = _1144 * 0.5;
        float _1254 = _1154 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_500, _501, _502), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3440 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1279 + 1.0))) + _1284) * _1167;
        _1301 = _1134;
        _1302 = _1133;
        _1303 = _1132;
        _1304 = _1144;
        _1305 = _1143;
        _1306 = _1142;
        _1307 = _1154;
        _1308 = _1153;
        _1309 = _1152;
        _1310 = _1167;
        _1311 = _1166;
        _1312 = _1165;
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1314 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _992;
        _1302 = _992;
        _1303 = _992;
        _1304 = _992;
        _1305 = _992;
        _1306 = _992;
        _1307 = _992;
        _1308 = _992;
        _1309 = _992;
        _1310 = _992;
        _1311 = _992;
        _1312 = _992;
        _1313 = 0.0;
        _1314 = 0.0;
        _1315 = 0.0;
    }
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1326 = (cbModelParam._m0[1u].x * (_1314 - _1005)) + _1005;
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1348 = fma(_1327, cbSceneParam._m0[89u].z, fma(_1326, cbSceneParam._m0[89u].y, _1325 * cbSceneParam._m0[89u].x));
    float _1351 = fma(_1327, cbSceneParam._m0[90u].z, fma(_1326, cbSceneParam._m0[90u].y, _1325 * cbSceneParam._m0[90u].x));
    float _1354 = fma(_1327, cbSceneParam._m0[91u].z, fma(_1326, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1325));
    float _1369 = _626 * 0.5;
    float _1370 = _627 * 0.5;
    float _1371 = _628 * 0.5;
    float _1372 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1375 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1302, _1305, _1308, _1311));
    float _1378 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1412;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1385 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_991, _995, _998, _1001));
        float _1389 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_993, _996, _999, _1002));
        float _1393 = dot(vec4(_1369, _1370, _1371, 1.0), vec4(_994, _997, _1000, _1003));
        float _1400 = dot(vec4(cbModelParam._m0[39u]), vec4(_1369, _1370, _1371, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1423;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1414 = dot(vec4(cbModelParam._m0[40u]), vec4(_1369, _1370, _1371, 1.0));
        _1423 = dot(vec3(isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1414) ? 0.0 : (isnan(0.0) ? _1414 : max(0.0, _1414))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1423 = 1.0;
    }
    float _1427 = (_1423 * cbModelParam._m0[1u].x) + (_1412 * (1.0 - cbModelParam._m0[1u].x));
    float _1437 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _503);
    float _1438 = isnan(_1437) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1437 : min(cbModelParam._m0[25u].z, _1437));
    float _1519;
    float _1521;
    float _1523;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1486 = fma(_690, cbModelParam._m0[13u].z, fma(_686, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _682)) + cbModelParam._m0[13u].w;
        float _1490 = fma(_690, cbModelParam._m0[14u].z, fma(_686, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _682)) + cbModelParam._m0[14u].w;
        float _1494 = fma(_690, cbModelParam._m0[15u].z, fma(_686, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _682)) + cbModelParam._m0[15u].w;
        float _1497 = fma(_628, cbModelParam._m0[13u].z, fma(_627, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626));
        float _1500 = fma(_628, cbModelParam._m0[14u].z, fma(_627, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626));
        float _1503 = fma(_628, cbModelParam._m0[15u].z, fma(_627, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626));
        float _1531;
        if (_1497 > 0.0)
        {
            _1531 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1531 = frontier_phi_22_20_ladder;
        }
        float _1914;
        if (_1500 > 0.0)
        {
            _1914 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1914 = frontier_phi_31_27_ladder;
        }
        float _2214;
        if (_1503 > 0.0)
        {
            _2214 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2214 = frontier_phi_45_38_ladder;
        }
        float _2216 = isnan(_1914) ? _1531 : (isnan(_1531) ? _1914 : min(_1531, _1914));
        float _2217 = isnan(_2214) ? _2216 : (isnan(_2216) ? _2214 : min(_2216, _2214));
        float _2221 = (_2217 * _1497) + _1486;
        float _2222 = (_2217 * _1500) + _1490;
        float _2223 = (_2217 * _1503) + _1494;
        float _2224 = _2217 * 9.9999997473787516355514526367188e-05;
        float _2225 = (-1.0) - _2224;
        float _2227 = _2224 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2223 > _2227) || ((_2223 < _2225) || ((_2222 > _2227) || ((_2222 < _2225) || ((_2221 < _2225) || (_2221 > _2227))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2349 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2223, cbModelParam._m0[9u].z, fma(_2222, cbModelParam._m0[9u].y, _2221 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2223, cbModelParam._m0[10u].z, fma(_2222, cbModelParam._m0[10u].y, _2221 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2223, cbModelParam._m0[11u].z, fma(_2222, cbModelParam._m0[11u].y, _2221 * cbModelParam._m0[11u].x))), _1438);
            frontier_phi_21_45_ladder = _2349.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2349.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2349.x * cbModelParam._m0[1u].y;
        }
        _1519 = frontier_phi_21_45_ladder_2;
        _1521 = frontier_phi_21_45_ladder_1;
        _1523 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_626, _627, _628), _1438);
        _1519 = _1507.x * cbModelParam._m0[1u].y;
        _1521 = _1507.y * cbModelParam._m0[1u].y;
        _1523 = _1507.z * cbModelParam._m0[1u].y;
    }
    float _1527 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _503);
    float _1528 = isnan(_1527) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1527 : min(cbModelParam._m0[25u].w, _1527));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1581 = fma(_690, cbModelParam._m0[21u].z, fma(_686, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _682)) + cbModelParam._m0[21u].w;
        float _1585 = fma(_690, cbModelParam._m0[22u].z, fma(_686, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _682)) + cbModelParam._m0[22u].w;
        float _1589 = fma(_690, cbModelParam._m0[23u].z, fma(_686, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _682)) + cbModelParam._m0[23u].w;
        float _1592 = fma(_628, cbModelParam._m0[21u].z, fma(_627, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626));
        float _1595 = fma(_628, cbModelParam._m0[22u].z, fma(_627, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626));
        float _1598 = fma(_628, cbModelParam._m0[23u].z, fma(_627, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626));
        float _1919;
        if (_1592 > 0.0)
        {
            _1919 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1919 = frontier_phi_33_29_ladder;
        }
        float _2240;
        if (_1595 > 0.0)
        {
            _2240 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2240 = frontier_phi_47_40_ladder;
        }
        float _2409;
        if (_1598 > 0.0)
        {
            _2409 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2409 = frontier_phi_61_56_ladder;
        }
        float _2411 = isnan(_2240) ? _1919 : (isnan(_1919) ? _2240 : min(_1919, _2240));
        float _2412 = isnan(_2409) ? _2411 : (isnan(_2411) ? _2409 : min(_2411, _2409));
        float _2416 = (_2412 * _1592) + _1581;
        float _2417 = (_2412 * _1595) + _1585;
        float _2418 = (_2412 * _1598) + _1589;
        float _2419 = _2412 * 9.9999997473787516355514526367188e-05;
        float _2420 = (-1.0) - _2419;
        float _2422 = _2419 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2418 > _2422) || ((_2418 < _2420) || ((_2417 > _2422) || ((_2417 < _2420) || ((_2416 < _2420) || (_2416 > _2422))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2418, cbModelParam._m0[17u].z, fma(_2417, cbModelParam._m0[17u].y, _2416 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2418, cbModelParam._m0[18u].z, fma(_2417, cbModelParam._m0[18u].y, _2416 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2418, cbModelParam._m0[19u].z, fma(_2417, cbModelParam._m0[19u].y, _2416 * cbModelParam._m0[19u].x))), _1528);
            frontier_phi_30_61_ladder = _2651.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2651.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2651.x * cbModelParam._m0[1u].z;
        }
        _1617 = frontier_phi_30_61_ladder_2;
        _1619 = frontier_phi_30_61_ladder_1;
        _1621 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_626, _627, _628), _1528);
        _1617 = _1601.x * cbModelParam._m0[1u].z;
        _1619 = _1601.y * cbModelParam._m0[1u].z;
        _1621 = _1601.z * cbModelParam._m0[1u].z;
    }
    float _1634 = (((_653 * _603) + _654) * _618) * ((cbModelParam._m0[1u].w * (_1617 - _1519)) + _1519);
    float _1636 = (((_653 * _605) + _654) * _618) * ((cbModelParam._m0[1u].w * (_1619 - _1521)) + _1521);
    float _1638 = (((_653 * _606) + _654) * _618) * ((cbModelParam._m0[1u].w * (_1621 - _1523)) + _1523);
    float _1641 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1636, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1644 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1636, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1647 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1636, cbSceneParam._m0[91u].y, _1634 * cbSceneParam._m0[91u].x));
    vec4 _1655 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_536, _537));
    float _1657 = _1655.w;
    float _1669 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1657);
    float _1670 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1657);
    float _1671 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1657);
    uvec4 _1675 = floatBitsToUint(cbInstanceData._m0[_577 + 5u]);
    uint _1677 = _1675.x * 14u;
    uint _1678 = _1677 + 13u;
    float _1683 = _618 + (-1.0);
    float _1686 = (cbLight._m0[_1678].x * _1683) + 1.0;
    float _1687 = (cbLight._m0[_1678].y * _1683) + 1.0;
    uint _1688 = _1677 + 5u;
    float _1694 = isnan(1.0) ? _1687 : (isnan(_1687) ? 1.0 : min(_1687, 1.0));
    uint _1698 = _1677 + 4u;
    float _1707 = isnan(1.0) ? _1686 : (isnan(_1686) ? 1.0 : min(_1686, 1.0));
    uint _1711 = _1677 | 1u;
    float _1722 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_500, _501, _502));
    float _1725 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_500, _501, _502));
    float _3576 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _3587 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1730 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.3183098733425140380859375;
    float _1732 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1739 = ((cbLight._m0[_1688].x * _1694) * _1732) + (((cbLight._m0[_1698].x * _1669) * _1707) * _1730);
    float _1740 = ((_1694 * cbLight._m0[_1688].y) * _1732) + (((cbLight._m0[_1698].y * _1670) * _1707) * _1730);
    float _1741 = ((_1694 * cbLight._m0[_1688].z) * _1732) + (((cbLight._m0[_1698].z * _1671) * _1707) * _1730);
    uint _1743 = _1677 + 8u;
    float _1756 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _503) * 0.949999988079071044921875);
    float _1757 = _1756 * _1756;
    float _1758 = cbLight._m0[_1677].x + _528;
    float _1759 = cbLight._m0[_1677].y + _529;
    float _1760 = cbLight._m0[_1677].z + _530;
    float _1764 = inversesqrt(dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760)));
    float _1765 = _1764 * _1758;
    float _1766 = _1764 * _1759;
    float _1767 = _1764 * _1760;
    float _1768 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1677].xyz));
    float _3598 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _3609 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _1772 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1773 = dot(vec3(_500, _501, _502), vec3(_1765, _1766, _1767));
    float _3620 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1776 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _1777 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1765, _1766, _1767));
    float _3631 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1781 = _1757 * _1757;
    float _1785 = ((_1776 * _1776) * (_1781 + (-1.0))) + 1.0;
    float _1793 = exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * 5.0);
    float _1794 = 0.959999978542327880859375 - _600;
    float _1796 = 0.959999978542327880859375 - _601;
    float _1797 = 0.959999978542327880859375 - _602;
    float _1804 = 1.0 - _1757;
    float _1815 = (0.5 / (((_1772 * ((_1771 * _1804) + _1757)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1804) + _1757) * _1771))) * _1771;
    float _3642 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1781 / ((_1785 * _1785) * 3.141590118408203125));
    uint _1831 = _1677 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1711].w)) * _503) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1711].x + _528;
    float _1845 = cbLight._m0[_1711].y + _529;
    float _1846 = cbLight._m0[_1711].z + _530;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_500, _501, _502), vec3(cbLight._m0[_1711].xyz));
    float _3653 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _1858 = dot(vec3(_500, _501, _502), vec3(_1851, _1852, _1853));
    float _3664 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1711].xyz), vec3(_1851, _1852, _1853));
    float _3675 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0)))) * 5.0);
    float _1884 = 1.0 - _1843;
    float _1894 = (0.5 / (((_1772 * ((_1857 * _1884) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1772 * _1884) + _1843) * _1857))) * _1857;
    float _3686 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1906 = (((((_1877 * _1794) + _603) * cbLight._m0[_1831].x) * _1896) * _1694) + ((((cbLight._m0[_1743].x * _1669) * ((_1793 * _1794) + _603)) * _1817) * _1707);
    float _1907 = (((((_1877 * _1796) + _605) * cbLight._m0[_1831].y) * _1896) * _1694) + ((((cbLight._m0[_1743].y * _1670) * ((_1793 * _1796) + _605)) * _1817) * _1707);
    float _1908 = (((((_1877 * _1797) + _606) * cbLight._m0[_1831].z) * _1896) * _1694) + ((((cbLight._m0[_1743].z * _1671) * ((_1793 * _1797) + _606)) * _1817) * _1707);
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1675.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _537) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _536) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
            _2109 = 0.0;
            _2111 = 0.0;
        }
        else
        {
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2110;
            float _2112;
            float _2277 = 0.0;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            uint _2283 = 0u;
            uint _2292;
            bool _2293;
            for (;;)
            {
                _2292 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2283 << 2u)) >> 2u)).x;
                _2293 = _2292 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2293)
                {
                    frontier_phi_58_pred = _2278;
                    frontier_phi_58_pred_1 = _2282;
                    frontier_phi_58_pred_2 = _2281;
                    frontier_phi_58_pred_3 = _2280;
                    frontier_phi_58_pred_4 = _2279;
                    frontier_phi_58_pred_5 = _2277;
                }
                else
                {
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    uint _2458;
                    _2452 = _2277;
                    _2453 = _2278;
                    _2454 = _2279;
                    _2455 = _2280;
                    _2456 = _2281;
                    _2457 = _2282;
                    _2458 = _2292;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    for (;;)
                    {
                        uint _2462 = uint(findLSB(_2458)) + (_2283 << 5u);
                        uint _2459 = (_2458 + 4294967295u) & _2458;
                        uint _2464 = _2462 * 48u;
                        vec4 _2478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2464)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2464 + 3u)).x));
                        uint _2484 = (_2462 * 48u) + 4u;
                        vec4 _2497 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2484)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2484 + 3u)).x));
                        uint _2503 = (_2462 * 48u) + 8u;
                        vec3 _2514 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2503)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2503 + 2u)).x));
                        float _2518 = _2478.x - _1964;
                        float _2519 = _2478.y - _1965;
                        float _2520 = _2478.z - _1966;
                        float _2521 = dot(vec3(_2518, _2519, _2520), vec3(_2518, _2519, _2520));
                        float _2524 = inversesqrt(_2521);
                        float _2525 = _2524 * _2518;
                        float _2526 = _2524 * _2519;
                        float _2527 = _2524 * _2520;
                        float _2528 = dot(vec3(_558, _561, _564), vec3(_2525, _2526, _2527));
                        float _2533 = 1.0 - (_2521 * _2478.w);
                        float _3707 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
                        float _2534 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2535 = sqrt(_2521) * _2497.w;
                        float _2538 = 1.39999997615814208984375 / (_2535 + 1.39999997615814208984375);
                        float _2539 = _2538 * _2538;
                        float _2542 = ((1.0 - _2539) * _2528) + _2539;
                        float _2545 = _2535 * _2535;
                        float _2549 = ((isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0))) * _2534) / ((_2545 * 0.699999988079071044921875) + 1.0);
                        float _2553 = (-0.0) - _1964;
                        float _2554 = (-0.0) - _1965;
                        float _2555 = (-0.0) - _1966;
                        float _2559 = inversesqrt(dot(vec3(_2553, _2554, _2555), vec3(_2553, _2554, _2555)));
                        float _2560 = _2559 * _2553;
                        float _2561 = _2559 * _2554;
                        float _2562 = _2559 * _2555;
                        float _2570 = exp2(log2(1.0 / ((_2545 * 3.5) + 5.0)) * 0.25);
                        float _2571 = 1.0 - _634;
                        float _2578 = sqrt(1.0 - ((1.0 - (_2571 * _2571)) * (1.0 - (_2570 * _2570))));
                        float _2579 = _2578 * _2578;
                        float _2580 = _2579 * _2579;
                        float _2581 = _2560 + _2525;
                        float _2582 = _2561 + _2526;
                        float _2583 = _2562 + _2527;
                        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
                        float _2591 = dot(vec3(_558, _561, _564), vec3(_2560, _2561, _2562));
                        float _3723 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2594 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2595 = dot(vec3(_558, _561, _564), vec3(_2587 * _2581, _2587 * _2582, _2587 * _2583));
                        float _3734 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                        float _2598 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
                        float _2602 = ((_2598 * _2598) * (_2580 + (-1.0))) + 1.0;
                        float _2603 = _2538 * _2579;
                        float _2604 = _2603 * _2603;
                        float _2607 = ((1.0 - _2604) * _2528) + _2604;
                        float _3745 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                        float _2608 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                        float _2609 = 1.0 - _2579;
                        float _2619 = (0.5 / (((_2608 * ((_2594 * _2609) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2608 * _2609) + _2579) * _2594))) * _2608;
                        float _3756 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                        float _2630 = (((_2580 * 3.1415927410125732421875) * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) / ((_2602 * _2602) * ((_2545 * 2.1991131305694580078125) + 3.141590118408203125))) * _2534;
                        _2361 = (_2549 * _2497.x) + _2455;
                        _2362 = (_2549 * _2497.y) + _2456;
                        _2363 = (_2549 * _2497.z) + _2457;
                        _2358 = (_2630 * _2514.x) + _2452;
                        _2359 = (_2630 * _2514.y) + _2453;
                        _2360 = (_2630 * _2514.z) + _2454;
                        if (_2459 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2452 = _2358;
                            _2453 = _2359;
                            _2454 = _2360;
                            _2455 = _2361;
                            _2456 = _2362;
                            _2457 = _2363;
                            _2458 = _2459;
                        }
                    }
                    frontier_phi_58_pred = _2359;
                    frontier_phi_58_pred_1 = _2363;
                    frontier_phi_58_pred_2 = _2362;
                    frontier_phi_58_pred_3 = _2361;
                    frontier_phi_58_pred_4 = _2360;
                    frontier_phi_58_pred_5 = _2358;
                }
                _2104 = frontier_phi_58_pred;
                _2112 = frontier_phi_58_pred_1;
                _2110 = frontier_phi_58_pred_2;
                _2108 = frontier_phi_58_pred_3;
                _2106 = frontier_phi_58_pred_4;
                _2102 = frontier_phi_58_pred_5;
                uint _2284 = _2283 + 1u;
                if (_2284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2277 = _2102;
                    _2278 = _2104;
                    _2279 = _2106;
                    _2280 = _2108;
                    _2281 = _2110;
                    _2282 = _2112;
                    _2283 = _2284;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
            _2109 = _2110;
            _2111 = _2112;
        }
        uvec4 _2115 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2116 = _2115.z;
        uint _2118 = (_2116 >> 8u) & 15u;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        if (((4294967295u << _2118) & _2010) == 0u)
        {
            _2245 = _2101;
            _2247 = _2103;
            _2249 = _2105;
            _2251 = _2107;
            _2253 = _2109;
            _2255 = _2111;
        }
        else
        {
            float _2270 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _2271 = _2270 * _1964;
            float _2272 = _2270 * _1965;
            float _2273 = _2270 * _1966;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2118 < ((_2116 >> 12u) & 15u))
            {
                float _2246;
                float _2248;
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2435 = _2101;
                float _2436 = _2103;
                float _2437 = _2105;
                float _2438 = _2107;
                float _2439 = _2109;
                float _2440 = _2111;
                uint _2441 = _2118;
                uint _2450;
                bool _2451;
                for (;;)
                {
                    _2450 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2441 << 2u)) >> 2u)).x;
                    _2451 = _2450 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2451)
                    {
                        frontier_phi_67_pred = _2440;
                        frontier_phi_67_pred_1 = _2439;
                        frontier_phi_67_pred_2 = _2438;
                        frontier_phi_67_pred_3 = _2437;
                        frontier_phi_67_pred_4 = _2436;
                        frontier_phi_67_pred_5 = _2435;
                    }
                    else
                    {
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2661;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2669 = _2435;
                        float _2670 = _2436;
                        float _2671 = _2437;
                        float _2672 = _2438;
                        float _2673 = _2439;
                        float _2674 = _2440;
                        uint _2675 = _2450;
                        uint _2676;
                        vec4 _2701;
                        float _2702;
                        vec4 _2717;
                        vec3 _2729;
                        vec4 _2744;
                        vec4 _2760;
                        float _2806;
                        bool _2807;
                        for (;;)
                        {
                            uint _2686 = ((_2441 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2675));
                            _2676 = (_2675 + 4294967295u) & _2675;
                            uint _2688 = _2686 * 40u;
                            _2701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2688 + 3u)).x));
                            _2702 = _2701.w;
                            uint _2704 = (_2686 * 40u) + 4u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            uint _2719 = (_2686 * 40u) + 8u;
                            _2729 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2719 + 2u)).x));
                            uint _2731 = (_2686 * 40u) + 16u;
                            _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            uint _2747 = (_2686 * 40u) + 20u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2686 * 40u) + 24u;
                            vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2781 = (_2686 * 40u) + 28u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2806 = fma(_1966, _2794.z, fma(_1965, _2794.y, _2794.x * _1964)) + _2794.w;
                            _2807 = !((fma(_1966, _2775.z, fma(_1965, _2775.y, _2775.x * _1964)) + _2775.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2807)
                            {
                                float _2834 = _2701.x - _1964;
                                float _2835 = _2701.y - _1965;
                                float _2836 = _2701.z - _1966;
                                float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                                float _2840 = inversesqrt(_2837);
                                float _2841 = _2840 * _2834;
                                float _2842 = _2840 * _2835;
                                float _2843 = _2840 * _2836;
                                float _2847 = 1.0 - (_2837 / (_2702 * _2702));
                                float _3767 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2848 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2852 = sqrt(_2837) * _2717.w;
                                float _2854 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                                float _2855 = _2854 * _2854;
                                float _2858 = ((1.0 - _2855) * dot(vec3(_2841, _2842, _2843), vec3(_558, _561, _564))) + _2855;
                                float _2861 = _2852 * _2852;
                                float _2865 = (fma(_1966, _2744.z, fma(_1965, _2744.y, _2744.x * _1964)) + _2744.w) / _2806;
                                float _2866 = (fma(_1966, _2760.z, fma(_1965, _2760.y, _2760.x * _1964)) + _2760.w) / _2806;
                                float _2870 = 1.0 - dot(vec2(_2865, _2866), vec2(_2865, _2866));
                                float _3783 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2871 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2872 = _2871 * (((isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))) * _2848) / ((_2861 * 0.699999988079071044921875) + 1.0));
                                float _2884 = exp2(log2(1.0 / ((_2861 * 3.5) + 5.0)) * 0.25);
                                float _2885 = 1.0 - _634;
                                float _2892 = sqrt(1.0 - ((1.0 - (_2885 * _2885)) * (1.0 - (_2884 * _2884))));
                                float _2893 = _2892 * _2892;
                                float _2894 = _2893 * _2893;
                                float _2895 = _2841 - _2271;
                                float _2896 = _2842 - _2272;
                                float _2897 = _2843 - _2273;
                                float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                                float _2905 = dot(vec3(_558, _561, _564), vec3((-0.0) - _2271, (-0.0) - _2272, (-0.0) - _2273));
                                float _3794 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2908 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                                float _2909 = dot(vec3(_558, _561, _564), vec3(_2901 * _2895, _2901 * _2896, _2901 * _2897));
                                float _3805 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2912 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2916 = ((_2912 * _2912) * (_2894 + (-1.0))) + 1.0;
                                float _2917 = _2854 * _2893;
                                float _2918 = _2917 * _2917;
                                float _2924 = ((1.0 - _2918) * dot(vec3(_558, _561, _564), vec3(_2841, _2842, _2843))) + _2918;
                                float _3816 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                                float _2926 = 1.0 - _2893;
                                float _2936 = (0.5 / (((_2925 * ((_2908 * _2926) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2893) * _2908))) * _2925;
                                float _3827 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2946 = (_2871 * _2848) * (((_2894 * 3.1415927410125732421875) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) / ((_2916 * _2916) * ((_2861 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2872 * _2717.z;
                                frontier_phi_73_pred_1 = _2872 * _2717.y;
                                frontier_phi_73_pred_2 = _2872 * _2717.x;
                                frontier_phi_73_pred_3 = _2946 * _2729.z;
                                frontier_phi_73_pred_4 = _2946 * _2729.y;
                                frontier_phi_73_pred_5 = _2946 * _2729.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2955 = frontier_phi_73_pred;
                            _2954 = frontier_phi_73_pred_1;
                            _2953 = frontier_phi_73_pred_2;
                            _2952 = frontier_phi_73_pred_3;
                            _2951 = frontier_phi_73_pred_4;
                            _2950 = frontier_phi_73_pred_5;
                            _2659 = _2953 + _2672;
                            _2660 = _2954 + _2673;
                            _2661 = _2955 + _2674;
                            _2656 = _2950 + _2669;
                            _2657 = _2951 + _2670;
                            _2658 = _2952 + _2671;
                            if (_2676 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2669 = _2656;
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2661;
                                _2675 = _2676;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2661;
                        frontier_phi_67_pred_1 = _2660;
                        frontier_phi_67_pred_2 = _2659;
                        frontier_phi_67_pred_3 = _2658;
                        frontier_phi_67_pred_4 = _2657;
                        frontier_phi_67_pred_5 = _2656;
                    }
                    _2256 = frontier_phi_67_pred;
                    _2254 = frontier_phi_67_pred_1;
                    _2252 = frontier_phi_67_pred_2;
                    _2250 = frontier_phi_67_pred_3;
                    _2248 = frontier_phi_67_pred_4;
                    _2246 = frontier_phi_67_pred_5;
                    uint _2442 = _2441 + 1u;
                    if (_2442 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2435 = _2246;
                        _2436 = _2248;
                        _2437 = _2250;
                        _2438 = _2252;
                        _2439 = _2254;
                        _2440 = _2256;
                        _2441 = _2442;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2252;
                frontier_phi_49_50_ladder_1 = _2256;
                frontier_phi_49_50_ladder_2 = _2254;
                frontier_phi_49_50_ladder_3 = _2250;
                frontier_phi_49_50_ladder_4 = _2248;
                frontier_phi_49_50_ladder_5 = _2246;
            }
            else
            {
                frontier_phi_49_50_ladder = _2107;
                frontier_phi_49_50_ladder_1 = _2111;
                frontier_phi_49_50_ladder_2 = _2109;
                frontier_phi_49_50_ladder_3 = _2105;
                frontier_phi_49_50_ladder_4 = _2103;
                frontier_phi_49_50_ladder_5 = _2101;
            }
            _2245 = frontier_phi_49_50_ladder_5;
            _2247 = frontier_phi_49_50_ladder_4;
            _2249 = frontier_phi_49_50_ladder_3;
            _2251 = frontier_phi_49_50_ladder;
            _2253 = frontier_phi_49_50_ladder_2;
            _2255 = frontier_phi_49_50_ladder_1;
        }
        float _2260 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2023 = (_2260 * _2251) + _1739;
        _2025 = (_2260 * _2253) + _1740;
        _2027 = (_2260 * _2255) + _1741;
        _2029 = ((_2245 * _603) * _2260) + _1906;
        _2031 = ((_2247 * _605) * _2260) + _1907;
        _2033 = ((_2249 * _606) * _2260) + _1908;
    }
    else
    {
        _2023 = _1739;
        _2025 = _1740;
        _2027 = _1741;
        _2029 = _1906;
        _2031 = _1907;
        _2033 = _1908;
    }
    float _3843 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3854 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3865 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _2050 = ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2023 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _618))) + ((_2029 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    float _2051 = ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2025 + ((isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0))) * _618))) + ((_2031 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    float _2052 = ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_2027 + ((isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0))) * _618))) + ((_2033 + ((isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))) * _1427)) * cbPerFrame._m0[3u].x);
    uint _2056 = _577 + 6u;
    float _2064 = _536 / cbSceneParam._m0[86u].x;
    float _2065 = _537 / cbSceneParam._m0[86u].y;
    vec4 _2079 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, (log2((isnan(cbSceneParam._m0[77u].w) ? _523 : (isnan(_523) ? cbSceneParam._m0[77u].w : min(_523, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2081 = _2079.x;
    float _2082 = _2079.y;
    float _2083 = _2079.z;
    float _2084 = _2079.w;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    if (_523 > cbSceneParam._m0[78u].w)
    {
        float _2126 = isnan(_523) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _523 : min(cbSceneParam._m0[80u].w, _523));
        float _2127 = _2126 / _523;
        float _2138 = _2127 * _259;
        float _2139 = _260 * _2127;
        float _2140 = (-0.0) - _2139;
        float _2141 = _2127 * _261;
        float _2143 = (cbSceneParam._m0[77u].w * _2140) / _2126;
        float _2144 = _2143 + cbSceneParam._m0[79u].w;
        float _2145 = cbSceneParam._m0[79u].w - _2139;
        float _2151 = sqrt(((_2138 * _2138) + (_2139 * _2139)) + (_2141 * _2141));
        float _2154 = (1.0 - (cbSceneParam._m0[77u].w / _2126)) * _2151;
        float _2160 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2162 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2371;
        if (abs((_2140 - _2143) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2371 = ((((_2144 > 0.0) ? exp2(_2160 * _2144) : (2.0 - exp2(_2162 * _2144))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2154;
        }
        else
        {
            float _2306 = 1.0 / cbSceneParam._m0[80u].x;
            float _2307 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : max(_2144, _2145));
            float _2308 = isnan(_2145) ? _2144 : (isnan(_2144) ? _2145 : min(_2144, _2145));
            float _2317 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : min(_2307, 0.0));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            _2371 = ((abs(_2151 / _2140) * cbSceneParam._m0[80u].y) * ((((_2317 - _2318) * 2.0) - ((exp2(_2160 * (isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0)))) - exp2(_2160 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0))))) * _2306)) - ((exp2(_2162 * _2317) - exp2(_2162 * _2318)) * _2306))) + (_2154 * cbSceneParam._m0[80u].z);
        }
        vec4 _2373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2064, _2065, 1.0), 0.0);
        float _2382 = exp2((_2371 * (-1.44269502162933349609375)) * (1.0 - _2373.w));
        float _2383 = log2(_2382);
        float _2399 = log2(_2084);
        _2164 = (exp2(_2399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].x)) * _2373.x) / cbSceneParam._m0[78u].x)) + _2081;
        _2166 = (exp2(_2399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].y)) * _2373.y) / cbSceneParam._m0[78u].y)) + _2082;
        _2168 = (exp2(_2399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2383 * cbSceneParam._m0[78u].z)) * _2373.z) / cbSceneParam._m0[78u].z)) + _2083;
        _2170 = _2382 * _2084;
    }
    else
    {
        _2164 = _2081;
        _2166 = _2082;
        _2168 = _2083;
        _2170 = _2084;
    }
    float _2182 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2183 = _2182 == 3.0;
    float _2184 = log2(_2170);
    float _2191 = exp2(_2184 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)));
    float _2192 = exp2(_2184 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2193 = exp2(_2184 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)));
    float _2202 = (_2182 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2202 * (_2183 ? _2191 : (_2191 + (cbSceneParam._m0[72u].w * _2164)));
    SV_Target.y = _2202 * (_2183 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2166)));
    SV_Target.z = _2202 * (_2183 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2168)));
    SV_Target.w = cbInstanceData._m0[_2056].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2056].w;
}


