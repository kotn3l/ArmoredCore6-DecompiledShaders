#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1302;
float _3497;
float _3498;
float _3499;
float _3500;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    float _337 = cbMtdParam._m0[22u].y + _267;
    float _338 = cbMtdParam._m0[22u].z + _268;
    float _339 = cbMtdParam._m0[22u].w + _269;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_196, _197, _198));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_210, _211, _212));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _362 = (cbMtdParam._m0[19u].x * _353) * _359;
    float _364 = (cbMtdParam._m0[18u].w * _354) * _359;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_362 > 0.0)
    {
        _372 = (1.0 - _365) / _362;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _362;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    bool _382 = _360 > 0.0;
    float _384 = _382 ? (cbMtdParam._m0[15u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = _365 + (-0.5);
    float _394 = _366 + (-0.5);
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_391 + (_386 * _362)) / _397) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_394 + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _438 = (_424 - (_424 * _294)) * cbMtdParam._m0[9u].x;
    float _439 = (_425 - (_425 * _294)) * cbMtdParam._m0[9u].y;
    float _440 = cbMtdParam._m0[9u].z * (_426 - (_426 * _294));
    float _462 = (cbMtdParam._m0[21u].x * _353) * _359;
    float _464 = (cbMtdParam._m0[20u].w * _354) * _359;
    bool _465 = _462 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _470 = frontier_phi_11_10_ladder;
    }
    bool _472 = _464 > 0.0;
    float _477;
    if (_472)
    {
        _477 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _477 = frontier_phi_15_14_ladder;
    }
    float _480 = _382 ? (cbMtdParam._m0[16u].z / _360) : 5000.0;
    float _481 = isnan(_477) ? _470 : (isnan(_470) ? _477 : min(_470, _477));
    float _482 = isnan(_480) ? _481 : (isnan(_481) ? _480 : min(_481, _480));
    float _486 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _490 = ((_482 * _360) + _486) / _486;
    float _495 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _497 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _513 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_482 * _462)) / _490) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_482 * _464)) / _490) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518 = _513.x * cbMtdParam._m0[10u].x;
    float _519 = _513.y * cbMtdParam._m0[10u].y;
    float _520 = _513.z * cbMtdParam._m0[10u].z;
    float _528;
    if (_465)
    {
        _528 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _528 = frontier_phi_19_18_ladder;
    }
    float _534;
    if (_472)
    {
        _534 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _534 = frontier_phi_23_22_ladder;
    }
    float _536 = isnan(_534) ? _528 : (isnan(_528) ? _534 : min(_528, _534));
    float _537 = isnan(_480) ? _536 : (isnan(_536) ? _480 : min(_536, _480));
    float _544 = ((_537 * _360) + _486) / _486;
    vec4 _558 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_537 * _462)) / _544) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_537 * _464)) / _544) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _560 = _558.w;
    float _562 = _560 - (_560 * _294);
    float _572 = (_562 * ((_518 - _438) - (_518 * _294))) + _438;
    float _573 = (_562 * ((_519 - _439) - (_519 * _294))) + _439;
    float _574 = (_562 * ((_520 - _440) - (_520 * _294))) + _440;
    float _589 = (cbMtdParam._m0[21u].z * _353) * _359;
    float _591 = (cbMtdParam._m0[21u].y * _354) * _359;
    bool _592 = _589 > 0.0;
    float _597;
    if (_592)
    {
        _597 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _597 = frontier_phi_27_26_ladder;
    }
    bool _599 = _591 > 0.0;
    float _604;
    if (_599)
    {
        _604 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _604 = frontier_phi_31_30_ladder;
    }
    float _607 = _382 ? (cbMtdParam._m0[18u].x / _360) : 5000.0;
    float _608 = isnan(_604) ? _597 : (isnan(_597) ? _604 : min(_597, _604));
    float _609 = isnan(_607) ? _608 : (isnan(_608) ? _607 : min(_608, _607));
    float _613 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _617 = ((_609 * _360) + _613) / _613;
    float _622 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _624 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _641 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_609 * _589)) / _617) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_609 * _591)) / _617) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _646 = _641.x * cbMtdParam._m0[14u].x;
    float _647 = _641.y * cbMtdParam._m0[14u].y;
    float _648 = _641.z * cbMtdParam._m0[14u].z;
    float _656;
    if (_592)
    {
        _656 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _656 = frontier_phi_35_34_ladder;
    }
    float _662;
    if (_599)
    {
        _662 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _662 = frontier_phi_39_38_ladder;
    }
    float _664 = isnan(_662) ? _656 : (isnan(_656) ? _662 : min(_656, _662));
    float _665 = isnan(_607) ? _664 : (isnan(_664) ? _607 : min(_664, _607));
    float _672 = ((_665 * _360) + _613) / _613;
    vec4 _686 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_665 * _589)) / _672) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_665 * _591)) / _672) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _688 = _686.w;
    float _690 = _688 - (_688 * _294);
    float _701 = 0.5 - (_294 * 0.5);
    float _711 = (((_572 - _307) + (_690 * ((_646 - _572) - (_646 * _294)))) * _701) + _307;
    float _712 = (((_573 - _309) + (_690 * ((_647 - _573) - (_647 * _294)))) * _701) + _309;
    float _713 = (((_574 - _311) + (_690 * ((_648 - _574) - (_648 * _294)))) * _701) + _311;
    vec4 _725 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _727 = _725.x;
    vec4 _739 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _747 = (_739.x * 2.0) + (-1.0);
    float _749 = (_739.y * 2.0) + (-1.0);
    float _750 = dot(vec2(_747, _749), vec2(_747, _749));
    float _3559 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _755 = sqrt(1.0 - (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))));
    float _756 = _739.z * _294;
    float _759 = fma(_755, _203, fma(_749, _210, _747 * _196));
    float _762 = fma(_755, _204, fma(_749, _211, _747 * _197));
    float _765 = fma(_755, _205, fma(_749, _212, _747 * _198));
    float _769 = inversesqrt(dot(vec3(_759, _762, _765), vec3(_759, _762, _765)));
    float _770 = _769 * _759;
    float _771 = _769 * _762;
    float _772 = _769 * _765;
    float _3570 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _773 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
    float _3581 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3592 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _3603 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3614 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _777 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _797 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _798 = _267 * _797;
    float _799 = _268 * _797;
    float _800 = _269 * _797;
    vec4 _805 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _807 = _805.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _983 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _989 = (cbMatDynParam._m0[5u].x * _983) + cbMatDynParam._m0[5u].y;
        float _3625 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _994 = (cbMatDynParam._m0[5u].z * _983) + cbMatDynParam._m0[5u].w;
        float _3636 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) - _990)) + _990) < ((_807 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _820 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _821 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _840 = fma(_772, cbSceneParam._m0[5u].z, fma(_771, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _770));
    float _843 = fma(_772, cbSceneParam._m0[6u].z, fma(_771, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _770));
    float _846 = fma(_772, cbSceneParam._m0[7u].z, fma(_771, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _770));
    uint _859 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = _859 + 9u;
    uint _862 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_862].z;
    float _3647 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _3658 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _3669 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _874 = 1.0 - _777;
    float _875 = _871 * _874;
    float _876 = _872 * _874;
    float _877 = _873 * _874;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _777;
    float _883 = (_872 + (-0.039999999105930328369140625)) * _777;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _777;
    float _885 = _882 + 0.039999999105930328369140625;
    float _887 = _883 + 0.039999999105930328369140625;
    float _888 = _884 + 0.039999999105930328369140625;
    vec4 _897 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _820, cbSceneParam._m0[86u].y * _821));
    float _900 = _897.x * TEXCOORD.z;
    float _901 = dot(vec3(_770, _771, _772), vec3(_798, _799, _800));
    float _904 = _901 * 2.0;
    float _908 = (_904 * _770) - _798;
    float _909 = (_904 * _771) - _799;
    float _910 = (_904 * _772) - _800;
    float _914 = abs(dot(vec3(_798, _799, _800), vec3(_770, _771, _772)));
    float _3680 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _916 = sqrt(_773);
    float _929 = exp2((_916 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_916 * 3.0));
    float _935 = (1.0 - _929) * ((_916 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _936 = _929 * _916;
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1301;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1028 = fma(_972, cbModelParam._m0[26u].z, fma(_968, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _964));
        float _1032 = fma(_972, cbModelParam._m0[27u].z, fma(_968, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _964));
        float _1036 = fma(_972, cbModelParam._m0[28u].z, fma(_968, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _964));
        float _1059 = _964 + _770;
        float _1060 = _968 + _771;
        float _1061 = _972 + _772;
        float _1071 = fma(_1061, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1028 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1032 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[34u].z) + ((((((_1036 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1095 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1102 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1109 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1129 = exp2((_1095.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1095.x + (-0.5));
        float _1131 = _1129 * (_1095.y + (-0.5));
        float _1132 = _1129 * (_1095.z + (-0.5));
        float _1139 = exp2((_1102.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1102.x + (-0.5));
        float _1141 = _1139 * (_1102.y + (-0.5));
        float _1142 = _1139 * (_1102.z + (-0.5));
        float _1149 = exp2((_1109.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1109.x + (-0.5));
        float _1151 = _1149 * (_1109.y + (-0.5));
        float _1152 = _1149 * (_1109.z + (-0.5));
        float _1159 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1116.x + (-0.5));
        float _1161 = _1159 * (_1116.y + (-0.5));
        float _1162 = _1159 * (_1116.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1183 = (dot(vec3(_770, _771, _772), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1193 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3728 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1195 + 1.0))) + _1200) * _1163;
        float _1210 = _1131 * 0.5;
        float _1211 = _1141 * 0.5;
        float _1212 = _1151 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_770, _771, _772), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3761 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1237 + 1.0))) + _1242) * _1164;
        float _1252 = _1132 * 0.5;
        float _1253 = _1142 * 0.5;
        float _1254 = _1152 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_770, _771, _772), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3794 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1279 + 1.0))) + _1284) * _1165;
        _1301 = _1132;
        _1303 = _1131;
        _1304 = _1130;
        _1305 = _1142;
        _1306 = _1141;
        _1307 = _1140;
        _1308 = _1152;
        _1309 = _1151;
        _1310 = _1150;
        _1311 = _1165;
        _1312 = _1164;
        _1313 = _1163;
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1315 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
    }
    else
    {
        _1301 = _1302;
        _1303 = _1302;
        _1304 = _1302;
        _1305 = _1302;
        _1306 = _1302;
        _1307 = _1302;
        _1308 = _1302;
        _1309 = _1302;
        _1310 = _1302;
        _1311 = _1302;
        _1312 = _1302;
        _1313 = _1302;
        _1314 = 0.0;
        _1315 = 0.0;
        _1316 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_972, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _964));
        float _1349 = fma(_972, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _964));
        float _1353 = fma(_972, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _964));
        float _1376 = _964 + _770;
        float _1377 = _968 + _771;
        float _1378 = _972 + _772;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_770, _771, _772), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3857 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_770, _771, _772), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _3890 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_770, _771, _772), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _3923 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1302;
        _1615 = _1302;
        _1616 = _1302;
        _1617 = _1302;
        _1618 = _1302;
        _1619 = _1302;
        _1620 = _1302;
        _1621 = _1302;
        _1622 = _1302;
        _1623 = _1302;
        _1624 = _1302;
        _1625 = _1302;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1315)) + _1315;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1316)) + _1316;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _908 * 0.5;
    float _1683 = _909 * 0.5;
    float _1684 = _910 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1301, _1305, _1308, _1311));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1303, _1306, _1309, _1312));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1304, _1307, _1310, _1313));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _773);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1798 = fma(_972, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _964)) + cbModelParam._m0[13u].w;
        float _1802 = fma(_972, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _964)) + cbModelParam._m0[14u].w;
        float _1806 = fma(_972, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _964)) + cbModelParam._m0[15u].w;
        float _1809 = fma(_910, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908));
        float _1812 = fma(_910, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908));
        float _1815 = fma(_910, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908));
        float _1843;
        if (_1809 > 0.0)
        {
            _1843 = abs((1.0 - _1798) / _1809);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1798 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1843 = frontier_phi_57_55_ladder;
        }
        float _2225;
        if (_1812 > 0.0)
        {
            _2225 = abs((1.0 - _1802) / _1812);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1802 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2225 = frontier_phi_66_62_ladder;
        }
        float _2533;
        if (_1815 > 0.0)
        {
            _2533 = abs((1.0 - _1806) / _1815);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1806 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2533 = frontier_phi_80_73_ladder;
        }
        float _2535 = isnan(_2225) ? _1843 : (isnan(_1843) ? _2225 : min(_1843, _2225));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1809) + _1798;
        float _2541 = (_2536 * _1812) + _1802;
        float _2542 = (_2536 * _1815) + _1806;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2684 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_56_80_ladder = _2684.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2684.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2684.x * cbModelParam._m0[1u].y;
        }
        _1831 = frontier_phi_56_80_ladder_2;
        _1833 = frontier_phi_56_80_ladder_1;
        _1835 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1819 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_908, _909, _910), _1751);
        _1831 = _1819.x * cbModelParam._m0[1u].y;
        _1833 = _1819.y * cbModelParam._m0[1u].y;
        _1835 = _1819.z * cbModelParam._m0[1u].y;
    }
    float _1839 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _773);
    float _1840 = isnan(_1839) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1839 : min(cbModelParam._m0[25u].w, _1839));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1892 = fma(_972, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _964)) + cbModelParam._m0[21u].w;
        float _1896 = fma(_972, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _964)) + cbModelParam._m0[22u].w;
        float _1900 = fma(_972, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _964)) + cbModelParam._m0[23u].w;
        float _1903 = fma(_910, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908));
        float _1906 = fma(_910, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908));
        float _1909 = fma(_910, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908));
        float _2230;
        if (_1903 > 0.0)
        {
            _2230 = abs((1.0 - _1892) / _1903);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1892 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2230 = frontier_phi_68_64_ladder;
        }
        float _2559;
        if (_1906 > 0.0)
        {
            _2559 = abs((1.0 - _1896) / _1906);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1896 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2559 = frontier_phi_82_75_ladder;
        }
        float _2749;
        if (_1909 > 0.0)
        {
            _2749 = abs((1.0 - _1900) / _1909);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1900 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2749 = frontier_phi_100_93_ladder;
        }
        float _2751 = isnan(_2559) ? _2230 : (isnan(_2230) ? _2559 : min(_2230, _2559));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1903) + _1892;
        float _2757 = (_2752 * _1906) + _1896;
        float _2758 = (_2752 * _1909) + _1900;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3000 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1840);
            frontier_phi_65_100_ladder = _3000.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3000.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3000.z * cbModelParam._m0[1u].z;
        }
        _1928 = frontier_phi_65_100_ladder_1;
        _1930 = frontier_phi_65_100_ladder;
        _1932 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1912 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_908, _909, _910), _1840);
        _1928 = _1912.x * cbModelParam._m0[1u].z;
        _1930 = _1912.y * cbModelParam._m0[1u].z;
        _1932 = _1912.z * cbModelParam._m0[1u].z;
    }
    float _1945 = (((_935 * _885) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1928 - _1831)) + _1831);
    float _1947 = (((_935 * _887) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1949 = (((_935 * _888) + _936) * _900) * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1952 = fma(_1949, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1945 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1949, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1945 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1949, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, _1945 * cbSceneParam._m0[91u].x));
    vec4 _1966 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_820, _821));
    float _1968 = _1966.w;
    float _1980 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1968);
    float _1981 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1968);
    float _1982 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1968);
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_859 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1994 = _900 + (-1.0);
    float _1997 = (cbLight._m0[_1989].x * _1994) + 1.0;
    float _1998 = (cbLight._m0[_1989].y * _1994) + 1.0;
    uint _1999 = _1988 + 5u;
    float _2005 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2009 = _1988 + 4u;
    float _2018 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2022 = _1988 | 1u;
    float _2033 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_770, _771, _772));
    float _2036 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_770, _771, _772));
    float _4059 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _4070 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2041 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _2043 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _2050 = ((cbLight._m0[_1999].x * _2005) * _2043) + (((cbLight._m0[_2009].x * _1980) * _2018) * _2041);
    float _2051 = ((_2005 * cbLight._m0[_1999].y) * _2043) + (((cbLight._m0[_2009].y * _1981) * _2018) * _2041);
    float _2052 = ((_2005 * cbLight._m0[_1999].z) * _2043) + (((cbLight._m0[_2009].z * _1982) * _2018) * _2041);
    uint _2054 = _1988 + 8u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _773) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1988].x + _798;
    float _2070 = cbLight._m0[_1988].y + _799;
    float _2071 = cbLight._m0[_1988].z + _800;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_1988].xyz));
    float _4081 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _2083 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _2084 = dot(vec3(_770, _771, _772), vec3(_2076, _2077, _2078));
    float _4103 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2076, _2077, _2078));
    float _4114 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2068 * _2068;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2104 = exp2(log2(1.0 - (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) * 5.0);
    float _2105 = 0.959999978542327880859375 - _882;
    float _2107 = 0.959999978542327880859375 - _883;
    float _2108 = 0.959999978542327880859375 - _884;
    float _2115 = 1.0 - _2068;
    float _2126 = (0.5 / (((_2083 * ((_2082 * _2115) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2115) + _2068) * _2082))) * _2082;
    float _4125 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    float _2128 = (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    uint _2142 = _1988 + 9u;
    float _2153 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2022].w)) * _773) * 0.949999988079071044921875);
    float _2154 = _2153 * _2153;
    float _2155 = cbLight._m0[_2022].x + _798;
    float _2156 = cbLight._m0[_2022].y + _799;
    float _2157 = cbLight._m0[_2022].z + _800;
    float _2161 = inversesqrt(dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157)));
    float _2162 = _2161 * _2155;
    float _2163 = _2161 * _2156;
    float _2164 = _2161 * _2157;
    float _2165 = dot(vec3(_770, _771, _772), vec3(cbLight._m0[_2022].xyz));
    float _4136 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _2169 = dot(vec3(_770, _771, _772), vec3(_2162, _2163, _2164));
    float _4147 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2172 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _2173 = dot(vec3(cbLight._m0[_2022].xyz), vec3(_2162, _2163, _2164));
    float _4158 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2177 = _2154 * _2154;
    float _2181 = ((_2172 * _2172) * (_2177 + (-1.0))) + 1.0;
    float _2188 = exp2(log2(1.0 - (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0)))) * 5.0);
    float _2195 = 1.0 - _2154;
    float _2205 = (0.5 / (((_2083 * ((_2168 * _2195) + _2154)) + 9.9999999392252902907785028219223e-09) + (((_2083 * _2195) + _2154) * _2168))) * _2168;
    float _4169 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2207 = (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2177 / ((_2181 * _2181) * 3.141590118408203125));
    float _2217 = (((((_2188 * _2105) + _885) * cbLight._m0[_2142].x) * _2207) * _2005) + ((((cbLight._m0[_2054].x * _1980) * ((_2104 * _2105) + _885)) * _2128) * _2018);
    float _2218 = (((((_2188 * _2107) + _887) * cbLight._m0[_2142].y) * _2207) * _2005) + ((((cbLight._m0[_2054].y * _1981) * ((_2104 * _2107) + _887)) * _2128) * _2018);
    float _2219 = (((((_2188 * _2108) + _888) * cbLight._m0[_2142].z) * _2207) * _2005) + ((((cbLight._m0[_2054].z * _1982) * ((_2104 * _2108) + _888)) * _2128) * _2018);
    float _2334;
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    if (_1986.y == 0u)
    {
        float _2274 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2275 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2274;
        float _2276 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2274;
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2274;
        uvec4 _2289 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2290 = _2289.x;
        uint _2301 = uint((float(_2289.y) * floor(float(uint(cbSceneParam._m0[85u].y * _821) / _2290))) + floor(float(uint(cbSceneParam._m0[85u].x * _820) / _2290)));
        float _2311 = (log2(_2277 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2312 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        uint _2315 = uint(isnan(14.0) ? _2312 : (isnan(_2312) ? 14.0 : min(_2312, 14.0)));
        uvec4 _2320 = texelFetch(g_lightClusterGridBuffer, int(((_2315 << 2u) + (_2301 << 6u)) >> 2u));
        uint _2321 = _2320.x;
        uint _2322 = _2289.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2322 >> 4u) & 15u)) + 4294967295u) & _2321) == 0u) || ((_2322 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            uint _2602 = 0u;
            uint _2611;
            bool _2612;
            for (;;)
            {
                _2611 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2602 << 2u)) >> 2u)).x;
                _2612 = _2611 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2612)
                {
                    frontier_phi_95_pred = _2597;
                    frontier_phi_95_pred_1 = _2596;
                    frontier_phi_95_pred_2 = _2598;
                    frontier_phi_95_pred_3 = _2601;
                    frontier_phi_95_pred_4 = _2600;
                    frontier_phi_95_pred_5 = _2599;
                }
                else
                {
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    uint _2798;
                    _2792 = _2596;
                    _2793 = _2597;
                    _2794 = _2598;
                    _2795 = _2599;
                    _2796 = _2600;
                    _2797 = _2601;
                    _2798 = _2611;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    for (;;)
                    {
                        uint _2802 = uint(findLSB(_2798)) + (_2602 << 5u);
                        uint _2799 = (_2798 + 4294967295u) & _2798;
                        uint _2804 = _2802 * 48u;
                        vec4 _2818 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2804)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2804 + 3u)).x));
                        uint _2824 = (_2802 * 48u) + 4u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2824)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2824 + 3u)).x));
                        uint _2843 = (_2802 * 48u) + 8u;
                        vec3 _2854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x));
                        float _2858 = _2818.x - _2275;
                        float _2859 = _2818.y - _2276;
                        float _2860 = _2818.z - _2277;
                        float _2861 = dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860));
                        float _2864 = inversesqrt(_2861);
                        float _2865 = _2864 * _2858;
                        float _2866 = _2864 * _2859;
                        float _2867 = _2864 * _2860;
                        float _2868 = dot(vec3(_840, _843, _846), vec3(_2865, _2866, _2867));
                        float _2873 = 1.0 - (_2861 * _2818.w);
                        float _4190 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2875 = sqrt(_2861) * _2837.w;
                        float _2878 = 1.39999997615814208984375 / (_2875 + 1.39999997615814208984375);
                        float _2879 = _2878 * _2878;
                        float _2882 = ((1.0 - _2879) * _2868) + _2879;
                        float _2885 = _2875 * _2875;
                        float _2889 = ((isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0))) * _2874) / ((_2885 * 0.699999988079071044921875) + 1.0);
                        float _2893 = (-0.0) - _2275;
                        float _2894 = (-0.0) - _2276;
                        float _2895 = (-0.0) - _2277;
                        float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
                        float _2900 = _2899 * _2893;
                        float _2901 = _2899 * _2894;
                        float _2902 = _2899 * _2895;
                        float _2910 = exp2(log2(1.0 / ((_2885 * 3.5) + 5.0)) * 0.25);
                        float _2911 = 1.0 - _916;
                        float _2918 = sqrt(1.0 - ((1.0 - (_2911 * _2911)) * (1.0 - (_2910 * _2910))));
                        float _2919 = _2918 * _2918;
                        float _2920 = _2919 * _2919;
                        float _2921 = _2900 + _2865;
                        float _2922 = _2901 + _2866;
                        float _2923 = _2902 + _2867;
                        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
                        float _2931 = dot(vec3(_840, _843, _846), vec3(_2900, _2901, _2902));
                        float _4206 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                        float _2935 = dot(vec3(_840, _843, _846), vec3(_2927 * _2921, _2927 * _2922, _2927 * _2923));
                        float _4217 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                        float _2938 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2942 = ((_2938 * _2938) * (_2920 + (-1.0))) + 1.0;
                        float _2943 = _2878 * _2919;
                        float _2944 = _2943 * _2943;
                        float _2947 = ((1.0 - _2944) * _2868) + _2944;
                        float _4228 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                        float _2949 = 1.0 - _2919;
                        float _2959 = (0.5 / (((_2948 * ((_2934 * _2949) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2949) + _2919) * _2934))) * _2948;
                        float _4239 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
                        float _2970 = (((_2920 * 3.1415927410125732421875) * (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0)))) / ((_2942 * _2942) * ((_2885 * 2.1991131305694580078125) + 3.141590118408203125))) * _2874;
                        _2696 = (_2889 * _2837.x) + _2795;
                        _2697 = (_2889 * _2837.y) + _2796;
                        _2698 = (_2889 * _2837.z) + _2797;
                        _2693 = (_2970 * _2854.x) + _2792;
                        _2694 = (_2970 * _2854.y) + _2793;
                        _2695 = (_2970 * _2854.z) + _2794;
                        if (_2799 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2792 = _2693;
                            _2793 = _2694;
                            _2794 = _2695;
                            _2795 = _2696;
                            _2796 = _2697;
                            _2797 = _2698;
                            _2798 = _2799;
                        }
                    }
                    frontier_phi_95_pred = _2694;
                    frontier_phi_95_pred_1 = _2693;
                    frontier_phi_95_pred_2 = _2695;
                    frontier_phi_95_pred_3 = _2698;
                    frontier_phi_95_pred_4 = _2697;
                    frontier_phi_95_pred_5 = _2696;
                }
                _2415 = frontier_phi_95_pred;
                _2413 = frontier_phi_95_pred_1;
                _2417 = frontier_phi_95_pred_2;
                _2423 = frontier_phi_95_pred_3;
                _2421 = frontier_phi_95_pred_4;
                _2419 = frontier_phi_95_pred_5;
                uint _2603 = _2602 + 1u;
                if (_2603 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2596 = _2413;
                    _2597 = _2415;
                    _2598 = _2417;
                    _2599 = _2419;
                    _2600 = _2421;
                    _2601 = _2423;
                    _2602 = _2603;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((4294967295u << _2429) & _2321) == 0u)
        {
            _2564 = _2412;
            _2566 = _2414;
            _2568 = _2416;
            _2570 = _2418;
            _2572 = _2420;
            _2574 = _2422;
        }
        else
        {
            float _2589 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
            float _2590 = _2589 * _2275;
            float _2591 = _2589 * _2276;
            float _2592 = _2589 * _2277;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2775 = _2412;
                float _2776 = _2414;
                float _2777 = _2416;
                float _2778 = _2418;
                float _2779 = _2420;
                float _2780 = _2422;
                uint _2781 = _2429;
                uint _2790;
                bool _2791;
                for (;;)
                {
                    _2790 = texelFetch(g_lightClassification, int((((_2315 << 5u) + (_2301 << 9u)) + (_2781 << 2u)) >> 2u)).x;
                    _2791 = _2790 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2791)
                    {
                        frontier_phi_109_pred = _2776;
                        frontier_phi_109_pred_1 = _2775;
                        frontier_phi_109_pred_2 = _2780;
                        frontier_phi_109_pred_3 = _2779;
                        frontier_phi_109_pred_4 = _2778;
                        frontier_phi_109_pred_5 = _2777;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3018 = _2775;
                        float _3019 = _2776;
                        float _3020 = _2777;
                        float _3021 = _2778;
                        float _3022 = _2779;
                        float _3023 = _2780;
                        uint _3024 = _2790;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3093;
                        vec4 _3108;
                        float _3154;
                        bool _3155;
                        for (;;)
                        {
                            uint _3035 = ((_2781 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3035 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3035 * 40u) + 20u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3110 = (_3035 * 40u) + 24u;
                            vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            uint _3129 = (_3035 * 40u) + 28u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            _3154 = fma(_2277, _3142.z, fma(_2276, _3142.y, _3142.x * _2275)) + _3142.w;
                            _3155 = !((fma(_2277, _3123.z, fma(_2276, _3123.y, _3123.x * _2275)) + _3123.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3155)
                            {
                                float _3182 = _3050.x - _2275;
                                float _3183 = _3050.y - _2276;
                                float _3184 = _3050.z - _2277;
                                float _3185 = dot(vec3(_3182, _3183, _3184), vec3(_3182, _3183, _3184));
                                float _3188 = inversesqrt(_3185);
                                float _3189 = _3188 * _3182;
                                float _3190 = _3188 * _3183;
                                float _3191 = _3188 * _3184;
                                float _3195 = 1.0 - (_3185 / (_3051 * _3051));
                                float _4250 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3200 = sqrt(_3185) * _3066.w;
                                float _3202 = 1.39999997615814208984375 / (_3200 + 1.39999997615814208984375);
                                float _3203 = _3202 * _3202;
                                float _3206 = ((1.0 - _3203) * dot(vec3(_3189, _3190, _3191), vec3(_840, _843, _846))) + _3203;
                                float _3209 = _3200 * _3200;
                                float _3213 = (fma(_2277, _3093.z, fma(_2276, _3093.y, _3093.x * _2275)) + _3093.w) / _3154;
                                float _3214 = (fma(_2277, _3108.z, fma(_2276, _3108.y, _3108.x * _2275)) + _3108.w) / _3154;
                                float _3218 = 1.0 - dot(vec2(_3213, _3214), vec2(_3213, _3214));
                                float _4266 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                                float _3219 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
                                float _3220 = _3219 * (((isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0))) * _3196) / ((_3209 * 0.699999988079071044921875) + 1.0));
                                float _3232 = exp2(log2(1.0 / ((_3209 * 3.5) + 5.0)) * 0.25);
                                float _3233 = 1.0 - _916;
                                float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                                float _3241 = _3240 * _3240;
                                float _3242 = _3241 * _3241;
                                float _3243 = _3189 - _2590;
                                float _3244 = _3190 - _2591;
                                float _3245 = _3191 - _2592;
                                float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                                float _3253 = dot(vec3(_840, _843, _846), vec3((-0.0) - _2590, (-0.0) - _2591, (-0.0) - _2592));
                                float _4277 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3256 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3257 = dot(vec3(_840, _843, _846), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                                float _4288 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3260 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                                float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                                float _3265 = _3202 * _3241;
                                float _3266 = _3265 * _3265;
                                float _3272 = ((1.0 - _3266) * dot(vec3(_840, _843, _846), vec3(_3189, _3190, _3191))) + _3266;
                                float _4299 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3273 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3274 = 1.0 - _3241;
                                float _3284 = (0.5 / (((_3273 * ((_3256 * _3274) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3241) * _3256))) * _3273;
                                float _4310 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                                float _3294 = (_3219 * _3196) * (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_3264 * _3264) * ((_3209 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3220 * _3066.y;
                                frontier_phi_115_pred_1 = _3220 * _3066.x;
                                frontier_phi_115_pred_2 = _3294 * _3078.z;
                                frontier_phi_115_pred_3 = _3294 * _3078.y;
                                frontier_phi_115_pred_4 = _3294 * _3078.x;
                                frontier_phi_115_pred_5 = _3220 * _3066.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3302 = frontier_phi_115_pred;
                            _3301 = frontier_phi_115_pred_1;
                            _3300 = frontier_phi_115_pred_2;
                            _3299 = frontier_phi_115_pred_3;
                            _3298 = frontier_phi_115_pred_4;
                            _3303 = frontier_phi_115_pred_5;
                            _3008 = _3301 + _3021;
                            _3009 = _3302 + _3022;
                            _3010 = _3303 + _3023;
                            _3005 = _3298 + _3018;
                            _3006 = _3299 + _3019;
                            _3007 = _3300 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3006;
                        frontier_phi_109_pred_1 = _3005;
                        frontier_phi_109_pred_2 = _3010;
                        frontier_phi_109_pred_3 = _3009;
                        frontier_phi_109_pred_4 = _3008;
                        frontier_phi_109_pred_5 = _3007;
                    }
                    _2567 = frontier_phi_109_pred;
                    _2565 = frontier_phi_109_pred_1;
                    _2575 = frontier_phi_109_pred_2;
                    _2573 = frontier_phi_109_pred_3;
                    _2571 = frontier_phi_109_pred_4;
                    _2569 = frontier_phi_109_pred_5;
                    uint _2782 = _2781 + 1u;
                    if (_2782 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2775 = _2565;
                        _2776 = _2567;
                        _2777 = _2569;
                        _2778 = _2571;
                        _2779 = _2573;
                        _2780 = _2575;
                        _2781 = _2782;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2565;
                frontier_phi_84_85_ladder_1 = _2569;
                frontier_phi_84_85_ladder_2 = _2575;
                frontier_phi_84_85_ladder_3 = _2573;
                frontier_phi_84_85_ladder_4 = _2571;
                frontier_phi_84_85_ladder_5 = _2567;
            }
            else
            {
                frontier_phi_84_85_ladder = _2412;
                frontier_phi_84_85_ladder_1 = _2416;
                frontier_phi_84_85_ladder_2 = _2422;
                frontier_phi_84_85_ladder_3 = _2420;
                frontier_phi_84_85_ladder_4 = _2418;
                frontier_phi_84_85_ladder_5 = _2414;
            }
            _2564 = frontier_phi_84_85_ladder;
            _2566 = frontier_phi_84_85_ladder_5;
            _2568 = frontier_phi_84_85_ladder_1;
            _2570 = frontier_phi_84_85_ladder_4;
            _2572 = frontier_phi_84_85_ladder_3;
            _2574 = frontier_phi_84_85_ladder_2;
        }
        float _2579 = isnan(1.0) ? _900 : (isnan(_900) ? 1.0 : min(_900, 1.0));
        _2334 = (_2579 * _2570) + _2050;
        _2336 = (_2579 * _2572) + _2051;
        _2338 = (_2579 * _2574) + _2052;
        _2340 = ((_2564 * _885) * _2579) + _2217;
        _2342 = ((_2566 * _887) * _2579) + _2218;
        _2344 = ((_2568 * _888) * _2579) + _2219;
    }
    else
    {
        _2334 = _2050;
        _2336 = _2051;
        _2338 = _2052;
        _2340 = _2217;
        _2342 = _2218;
        _2344 = _2219;
    }
    float _4326 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4337 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4348 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2361 = ((isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2334 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _900))) + ((_2340 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    float _2362 = ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2336 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _900))) + ((_2342 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    float _2363 = ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_2338 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _900))) + ((_2344 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1740)) * cbPerFrame._m0[3u].x);
    float _2364 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2365 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    uint _2367 = _859 + 6u;
    float _2375 = _820 / cbSceneParam._m0[86u].x;
    float _2376 = _821 / cbSceneParam._m0[86u].y;
    vec4 _2390 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2392 = _2390.x;
    float _2393 = _2390.y;
    float _2394 = _2390.z;
    float _2395 = _2390.w;
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2438 = _2437 / _793;
        float _2449 = _2438 * _267;
        float _2450 = _268 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _269;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2471 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2473 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2706;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2706 = ((((_2455 > 0.0) ? exp2(_2471 * _2455) : (2.0 - exp2(_2473 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2625 = 1.0 / cbSceneParam._m0[80u].x;
            float _2626 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2627 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2636 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : min(_2626, 0.0));
            float _2637 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : min(_2627, 0.0));
            _2706 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2636 - _2637) * 2.0) - ((exp2(_2471 * (isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0)))) - exp2(_2471 * (isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))))) * _2625)) - ((exp2(_2473 * _2636) - exp2(_2473 * _2637)) * _2625))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2708 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2375, _2376, 1.0), 0.0);
        float _2717 = exp2((_2706 * (-1.44269502162933349609375)) * (1.0 - _2708.w));
        float _2718 = log2(_2717);
        float _2734 = log2(_2395);
        _2475 = (exp2(_2734 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].x)) * _2708.x) / cbSceneParam._m0[78u].x)) + _2392;
        _2477 = (exp2(_2734 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].y)) * _2708.y) / cbSceneParam._m0[78u].y)) + _2393;
        _2479 = (exp2(_2734 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2718 * cbSceneParam._m0[78u].z)) * _2708.z) / cbSceneParam._m0[78u].z)) + _2394;
        _2481 = _2717 * _2395;
    }
    else
    {
        _2475 = _2392;
        _2477 = _2393;
        _2479 = _2394;
        _2481 = _2395;
    }
    bool _2744;
    vec4 _2491;
    vec4 _2513;
    float _2515;
    float _2519;
    float _2520;
    float _2521;
    float _2522;
    bool _2532;
    for (;;)
    {
        _2491 = cbMatDynParam._m0[0u];
        float _2493 = roundEven(_2491.y);
        bool _2494 = _2493 == 3.0;
        float _2495 = log2(_2481);
        float _2502 = exp2(_2495 * cbSceneParam._m0[78u].x) * _2364;
        float _2503 = exp2(_2495 * cbSceneParam._m0[78u].y) * _2365;
        float _2504 = exp2(_2495 * cbSceneParam._m0[78u].z) * _2366;
        float _2511 = _807 + (-0.5);
        _2513 = cbMtdParam._m0[1u];
        _2515 = _2513.y * _2511;
        float _2518 = (_2493 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2519 = _2518 * (_2494 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2475)));
        _2520 = _2518 * (_2494 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2477)));
        _2521 = _2518 * (_2494 ? _2504 : (_2504 + (cbSceneParam._m0[72u].w * _2479)));
        _2522 = _2511 * 0.999000012874603271484375;
        _2532 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2532)
        {
            if ((cbInstanceData._m0[_859 + 7u].x + _2522) < 0.5)
            {
                _2744 = true;
                break;
            }
        }
        uint _2660 = _861 + uint(_2491.w);
        if ((cbInstanceData._m0[_2660].w < 1.0) && ((cbInstanceData._m0[_2660].w + _2522) < 0.5))
        {
            _2744 = true;
            break;
        }
        if ((_2515 + 1.0) < _2513.x)
        {
            _2744 = true;
            break;
        }
        _2744 = false;
        break;
    }
    float _2975;
    if (_2744)
    {
        discard_state = true;
        _2975 = 0.0;
    }
    else
    {
        _2975 = cbInstanceData._m0[_2367].w;
    }
    SV_Target.x = _2519;
    SV_Target.y = _2520;
    SV_Target.z = _2521;
    SV_Target.w = _2975;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2367].w;
    discard_exit();
}


