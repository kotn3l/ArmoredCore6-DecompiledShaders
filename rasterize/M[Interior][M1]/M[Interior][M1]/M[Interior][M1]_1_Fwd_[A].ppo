#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _633;
uint _1809;
uint _1810;
uint _1811;
uint _2055;
uint _2056;
uint _2057;
float _2280;
float _2281;
float _2282;
float _2283;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    float _278 = cbMtdParam._m0[22u].y + _250;
    float _279 = cbMtdParam._m0[22u].z + _251;
    float _280 = cbMtdParam._m0[22u].w + _252;
    float _297 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_192 * TANGENT.x, _192 * TANGENT.y, _192 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_278, _279, _280), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    float _328 = (_304 > 0.0) ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_309 + (-0.5)) + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_310 + (-0.5)) + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _401 = _250 * _400;
    float _402 = _251 * _400;
    float _403 = _252 * _400;
    vec4 _408 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _410 = _408.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _480 = sqrt(((_250 * _250) + (_251 * _251)) + (_252 * _252));
        float _487 = (cbMatDynParam._m0[5u].x * _480) + cbMatDynParam._m0[5u].y;
        float _2302 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
        float _488 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        float _492 = (cbMatDynParam._m0[5u].z * _480) + cbMatDynParam._m0[5u].w;
        float _2313 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0))) - _488)) + _488) < ((_410 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _433 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_423 * cbSceneParam._m0[86u].x, _424 * cbSceneParam._m0[86u].y));
    float _436 = _433.x * TEXCOORD.z;
    float _437 = (-0.0) - _401;
    float _438 = (-0.0) - _402;
    float _439 = (-0.0) - _403;
    float _461 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _465 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _469 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _632;
    float _634;
    float _635;
    float _636;
    float _637;
    float _638;
    float _639;
    float _640;
    float _641;
    float _642;
    float _643;
    float _644;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _554 = (cbModelParam._m0[37u].x * ((((fma(_469, cbModelParam._m0[26u].z, fma(_465, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _461)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _556 = (cbModelParam._m0[37u].y * ((((fma(_469, cbModelParam._m0[27u].z, fma(_465, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _461)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _557 = (((((fma(_469, cbModelParam._m0[28u].z, fma(_465, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _461)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _560 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_554, _556, _557), 0.0);
        vec4 _567 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_554, _556, _557), 0.0);
        vec4 _574 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_554, _556, _557), 0.0);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_554, _556, _557), 0.0);
        float _594 = exp2((_560.w + (-0.5)) * 20.0) * 2.0;
        float _605 = exp2((_567.w + (-0.5)) * 20.0) * 2.0;
        float _615 = exp2((_574.w + (-0.5)) * 20.0) * 2.0;
        float _625 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_581.x + (-0.5));
        float _627 = _625 * (_581.y + (-0.5));
        float _628 = _625 * (_581.z + (-0.5));
        _632 = _594 * (_560.z + (-0.5));
        _634 = _594 * (_560.y + (-0.5));
        _635 = _594 * (_560.x + (-0.5));
        _636 = _605 * (_567.z + (-0.5));
        _637 = _605 * (_567.y + (-0.5));
        _638 = _605 * (_567.x + (-0.5));
        _639 = _615 * (_574.z + (-0.5));
        _640 = _615 * (_574.y + (-0.5));
        _641 = _615 * (_574.x + (-0.5));
        _642 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
        _643 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        _644 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    }
    else
    {
        _632 = _633;
        _634 = _633;
        _635 = _633;
        _636 = _633;
        _637 = _633;
        _638 = _633;
        _639 = _633;
        _640 = _633;
        _641 = _633;
        _642 = _633;
        _643 = _633;
        _644 = _633;
    }
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _701 = (cbModelParam._m0[38u].x * ((((fma(_469, cbModelParam._m0[30u].z, fma(_465, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _461)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _702 = (cbModelParam._m0[38u].y * ((((fma(_469, cbModelParam._m0[31u].z, fma(_465, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _461)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _703 = (((((fma(_469, cbModelParam._m0[32u].z, fma(_465, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _461)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_701, _702, _703), 0.0);
        float _738 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _748 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _758 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _768 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _769 = _768 * (_726.x + (-0.5));
        float _770 = _768 * (_726.y + (-0.5));
        float _771 = _768 * (_726.z + (-0.5));
        _775 = _738 * (_705.z + (-0.5));
        _776 = _738 * (_705.y + (-0.5));
        _777 = _738 * (_705.x + (-0.5));
        _778 = _748 * (_712.z + (-0.5));
        _779 = _748 * (_712.y + (-0.5));
        _780 = _748 * (_712.x + (-0.5));
        _781 = _758 * (_719.z + (-0.5));
        _782 = _758 * (_719.y + (-0.5));
        _783 = _758 * (_719.x + (-0.5));
        _784 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        _785 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        _786 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    }
    else
    {
        _775 = _633;
        _776 = _633;
        _777 = _633;
        _778 = _633;
        _779 = _633;
        _780 = _633;
        _781 = _633;
        _782 = _633;
        _783 = _633;
        _784 = _633;
        _785 = _633;
        _786 = _633;
    }
    float _801 = _401 * (-0.5);
    float _802 = _402 * (-0.5);
    float _803 = _403 * (-0.5);
    float _804 = dot(vec4(_801, _802, _803, 1.0), vec4(_777, _780, _783, _786));
    float _807 = dot(vec4(_801, _802, _803, 1.0), vec4(_776, _779, _782, _785));
    float _810 = dot(vec4(_801, _802, _803, 1.0), vec4(_775, _778, _781, _784));
    float _845;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _817 = dot(vec4(_801, _802, _803, 1.0), vec4(_632, _636, _639, _642));
        float _821 = dot(vec4(_801, _802, _803, 1.0), vec4(_634, _637, _640, _643));
        float _825 = dot(vec4(_801, _802, _803, 1.0), vec4(_635, _638, _641, _644));
        float _832 = dot(vec4(cbModelParam._m0[39u]), vec4(_801, _802, _803, 1.0));
        _845 = dot(vec3(isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0)), isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0)), isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_832) ? 0.0 : (isnan(0.0) ? _832 : max(0.0, _832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _845 = 1.0;
    }
    float _856;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _847 = dot(vec4(cbModelParam._m0[40u]), vec4(_801, _802, _803, 1.0));
        _856 = dot(vec3(isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)), isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)), isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_847) ? 0.0 : (isnan(0.0) ? _847 : max(0.0, _847))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _856 = 1.0;
    }
    float _860 = (_856 * cbModelParam._m0[1u].x) + (_845 * (1.0 - cbModelParam._m0[1u].x));
    float _866 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _949;
    float _951;
    float _953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _916 = fma(_469, cbModelParam._m0[13u].z, fma(_465, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _461)) + cbModelParam._m0[13u].w;
        float _920 = fma(_469, cbModelParam._m0[14u].z, fma(_465, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _461)) + cbModelParam._m0[14u].w;
        float _924 = fma(_469, cbModelParam._m0[15u].z, fma(_465, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _461)) + cbModelParam._m0[15u].w;
        float _927 = fma(_439, cbModelParam._m0[13u].z, fma(_438, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _437));
        float _930 = fma(_439, cbModelParam._m0[14u].z, fma(_438, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _437));
        float _933 = fma(_439, cbModelParam._m0[15u].z, fma(_438, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _437));
        float _959;
        if (_927 > 0.0)
        {
            _959 = abs((1.0 - _916) / _927);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_927 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_916 + 1.0) / _927);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _959 = frontier_phi_25_23_ladder;
        }
        float _1237;
        if (_930 > 0.0)
        {
            _1237 = abs((1.0 - _920) / _930);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_930 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_920 + 1.0) / _930);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1237 = frontier_phi_34_30_ladder;
        }
        float _1541;
        if (_933 > 0.0)
        {
            _1541 = abs((1.0 - _924) / _933);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_933 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_924 + 1.0) / _933);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1541 = frontier_phi_48_41_ladder;
        }
        float _1543 = isnan(_1237) ? _959 : (isnan(_959) ? _1237 : min(_959, _1237));
        float _1544 = isnan(_1541) ? _1543 : (isnan(_1543) ? _1541 : min(_1543, _1541));
        float _1548 = (_1544 * _927) + _916;
        float _1549 = (_1544 * _930) + _920;
        float _1550 = (_1544 * _933) + _924;
        float _1551 = _1544 * 9.9999997473787516355514526367188e-05;
        float _1552 = (-1.0) - _1551;
        float _1554 = _1551 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1550 > _1554) || ((_1550 < _1552) || ((_1549 > _1554) || ((_1549 < _1552) || ((_1548 < _1552) || (_1548 > _1554))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1550, cbModelParam._m0[9u].z, fma(_1549, cbModelParam._m0[9u].y, _1548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1550, cbModelParam._m0[10u].z, fma(_1549, cbModelParam._m0[10u].y, _1548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1550, cbModelParam._m0[11u].z, fma(_1549, cbModelParam._m0[11u].y, _1548 * cbModelParam._m0[11u].x))), _866);
            frontier_phi_24_48_ladder = _1677.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1677.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1677.x * cbModelParam._m0[1u].y;
        }
        _949 = frontier_phi_24_48_ladder_2;
        _951 = frontier_phi_24_48_ladder_1;
        _953 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_437, _438, _439), _866);
        _949 = _937.x * cbModelParam._m0[1u].y;
        _951 = _937.y * cbModelParam._m0[1u].y;
        _953 = _937.z * cbModelParam._m0[1u].y;
    }
    float _956 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1045;
    float _1047;
    float _1049;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1009 = fma(_469, cbModelParam._m0[21u].z, fma(_465, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _461)) + cbModelParam._m0[21u].w;
        float _1013 = fma(_469, cbModelParam._m0[22u].z, fma(_465, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _461)) + cbModelParam._m0[22u].w;
        float _1017 = fma(_469, cbModelParam._m0[23u].z, fma(_465, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _461)) + cbModelParam._m0[23u].w;
        float _1020 = fma(_439, cbModelParam._m0[21u].z, fma(_438, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _437));
        float _1023 = fma(_439, cbModelParam._m0[22u].z, fma(_438, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _437));
        float _1026 = fma(_439, cbModelParam._m0[23u].z, fma(_438, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _437));
        float _1242;
        if (_1020 > 0.0)
        {
            _1242 = abs((1.0 - _1009) / _1020);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1020 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1009 + 1.0) / _1020);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1242 = frontier_phi_36_32_ladder;
        }
        float _1567;
        if (_1023 > 0.0)
        {
            _1567 = abs((1.0 - _1013) / _1023);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1023 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1013 + 1.0) / _1023);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1567 = frontier_phi_50_43_ladder;
        }
        float _1739;
        if (_1026 > 0.0)
        {
            _1739 = abs((1.0 - _1017) / _1026);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1026 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1017 + 1.0) / _1026);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1739 = frontier_phi_68_61_ladder;
        }
        float _1741 = isnan(_1567) ? _1242 : (isnan(_1242) ? _1567 : min(_1242, _1567));
        float _1742 = isnan(_1739) ? _1741 : (isnan(_1741) ? _1739 : min(_1741, _1739));
        float _1746 = (_1742 * _1020) + _1009;
        float _1747 = (_1742 * _1023) + _1013;
        float _1748 = (_1742 * _1026) + _1017;
        float _1749 = _1742 * 9.9999997473787516355514526367188e-05;
        float _1750 = (-1.0) - _1749;
        float _1752 = _1749 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1748 > _1752) || ((_1748 < _1750) || ((_1747 > _1752) || ((_1747 < _1750) || ((_1746 < _1750) || (_1746 > _1752))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1748, cbModelParam._m0[17u].z, fma(_1747, cbModelParam._m0[17u].y, _1746 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1748, cbModelParam._m0[18u].z, fma(_1747, cbModelParam._m0[18u].y, _1746 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1748, cbModelParam._m0[19u].z, fma(_1747, cbModelParam._m0[19u].y, _1746 * cbModelParam._m0[19u].x))), _956);
            frontier_phi_33_68_ladder = _1917.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1917.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1917.x * cbModelParam._m0[1u].z;
        }
        _1045 = frontier_phi_33_68_ladder_2;
        _1047 = frontier_phi_33_68_ladder_1;
        _1049 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_437, _438, _439), _956);
        _1045 = _1029.x * cbModelParam._m0[1u].z;
        _1047 = _1029.y * cbModelParam._m0[1u].z;
        _1049 = _1029.z * cbModelParam._m0[1u].z;
    }
    float _1061 = _436 * 0.01200000010430812835693359375;
    float _1063 = _1061 * ((cbModelParam._m0[1u].w * (_1045 - _949)) + _949);
    float _1064 = _1061 * ((cbModelParam._m0[1u].w * (_1047 - _951)) + _951);
    float _1065 = _1061 * ((cbModelParam._m0[1u].w * (_1049 - _953)) + _953);
    float _1086 = fma(_1065, cbSceneParam._m0[89u].z, fma(_1064, cbSceneParam._m0[89u].y, _1063 * cbSceneParam._m0[89u].x));
    float _1089 = fma(_1065, cbSceneParam._m0[90u].z, fma(_1064, cbSceneParam._m0[90u].y, _1063 * cbSceneParam._m0[90u].x));
    float _1092 = fma(_1065, cbSceneParam._m0[91u].z, fma(_1064, cbSceneParam._m0[91u].y, _1063 * cbSceneParam._m0[91u].x));
    uint _1099 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1103 = floatBitsToUint(cbInstanceData._m0[_1099 + 5u]);
    uint _1105 = _1103.x * 14u;
    uint _1106 = _1105 + 13u;
    float _1111 = _436 + (-1.0);
    float _1115 = (cbLight._m0[_1106].x * _1111) + 1.0;
    float _1116 = (cbLight._m0[_1106].y * _1111) + 1.0;
    uint _1117 = _1105 + 8u;
    float _1128 = cbLight._m0[_1105].x + _401;
    float _1129 = cbLight._m0[_1105].y + _402;
    float _1130 = cbLight._m0[_1105].z + _403;
    float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
    float _1138 = dot(vec3(0.0), vec3(cbLight._m0[_1105].xyz));
    float _2439 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
    float _1141 = isnan(1.0) ? _2439 : (isnan(_2439) ? 1.0 : min(_2439, 1.0));
    float _1142 = dot(vec3(0.0), vec3(_401, _402, _403));
    float _2450 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
    float _1146 = dot(vec3(cbLight._m0[_1105].xyz), vec3(_1128 * _1134, _1129 * _1134, _1130 * _1134));
    float _2461 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1157 = (exp2(log2(1.0 - (isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1163 = (0.5 / ((_1141 + 9.9999999392252902907785028219223e-09) + _1145)) * _1141;
    float _2472 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1165 = (isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0))) * 0.31831014156341552734375;
    float _1167 = isnan(1.0) ? _1115 : (isnan(_1115) ? 1.0 : min(_1115, 1.0));
    uint _1177 = _1105 + 9u;
    uint _1183 = _1105 | 1u;
    float _1189 = cbLight._m0[_1183].x + _401;
    float _1190 = cbLight._m0[_1183].y + _402;
    float _1191 = cbLight._m0[_1183].z + _403;
    float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
    float _1199 = dot(vec3(0.0), vec3(cbLight._m0[_1183].xyz));
    float _2488 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1202 = isnan(1.0) ? _2488 : (isnan(_2488) ? 1.0 : min(_2488, 1.0));
    float _1203 = dot(vec3(cbLight._m0[_1183].xyz), vec3(_1189 * _1195, _1190 * _1195, _1191 * _1195));
    float _2499 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1212 = (exp2(log2(1.0 - (isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1216 = (0.5 / ((_1202 + 9.9999999392252902907785028219223e-09) + _1145)) * _1202;
    float _2510 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = (isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0))) * 0.31831014156341552734375;
    float _1219 = isnan(1.0) ? _1116 : (isnan(_1116) ? 1.0 : min(_1116, 1.0));
    float _1229 = (((_1212 * cbLight._m0[_1177].x) * _1218) * _1219) + (((_1157 * cbLight._m0[_1117].x) * _1165) * _1167);
    float _1230 = (((_1212 * cbLight._m0[_1177].y) * _1218) * _1219) + (((_1157 * cbLight._m0[_1117].y) * _1165) * _1167);
    float _1231 = (((_1212 * cbLight._m0[_1177].z) * _1218) * _1219) + (((_1157 * cbLight._m0[_1117].z) * _1165) * _1167);
    float _1347;
    float _1349;
    float _1351;
    if (_1103.y == 0u)
    {
        float _1287 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1288 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1287;
        float _1289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1287;
        float _1290 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1287;
        uvec4 _1302 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1303 = _1302.x;
        uint _1314 = uint((float(_1302.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _1303))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _1303)));
        float _1324 = (log2(_1290 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1325 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        uint _1328 = uint(isnan(14.0) ? _1325 : (isnan(_1325) ? 14.0 : min(_1325, 14.0)));
        uvec4 _1333 = texelFetch(g_lightClusterGridBuffer, int(((_1328 << 2u) + (_1314 << 6u)) >> 2u));
        uint _1334 = _1333.x;
        uint _1335 = _1302.z;
        float _1424;
        float _1426;
        float _1428;
        if (((((1u << ((_1335 >> 4u) & 15u)) + 4294967295u) & _1334) == 0u) || ((_1335 & 240u) == 0u))
        {
            _1424 = 0.0;
            _1426 = 0.0;
            _1428 = 0.0;
        }
        else
        {
            float _1425;
            float _1427;
            float _1429;
            float _1592 = 0.0;
            float _1593 = 0.0;
            float _1594 = 0.0;
            uint _1595 = 0u;
            uint _1604;
            bool _1605;
            for (;;)
            {
                _1604 = texelFetch(g_lightClassification, int((((_1328 << 5u) + (_1314 << 9u)) + (_1595 << 2u)) >> 2u)).x;
                _1605 = _1604 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1605)
                {
                    frontier_phi_63_pred = _1594;
                    frontier_phi_63_pred_1 = _1593;
                    frontier_phi_63_pred_2 = _1592;
                }
                else
                {
                    float _1779;
                    float _1780;
                    float _1781;
                    uint _1782;
                    _1779 = _1592;
                    _1780 = _1593;
                    _1781 = _1594;
                    _1782 = _1604;
                    float _1686;
                    float _1687;
                    float _1688;
                    for (;;)
                    {
                        uint _1786 = uint(findLSB(_1782)) + (_1595 << 5u);
                        uint _1783 = (_1782 + 4294967295u) & _1782;
                        uint _1788 = _1786 * 48u;
                        vec4 _1802 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1788)).x, texelFetch(g_PointLightRenderingBuffer, int(_1788 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1788 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1788 + 3u)).x));
                        uint _1819 = (_1786 * 48u) + 8u;
                        vec3 _1830 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1819)).x, texelFetch(g_PointLightRenderingBuffer, int(_1819 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1819 + 2u)).x));
                        float _1834 = _1802.x - _1288;
                        float _1835 = _1802.y - _1289;
                        float _1836 = _1802.z - _1290;
                        float _1837 = dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836));
                        float _1840 = inversesqrt(_1837);
                        float _1849 = 1.0 - (_1837 * _1802.w);
                        float _2536 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
                        float _1851 = sqrt(_1837) * uintBitsToFloat(uvec4(_1809, _1810, _1811, texelFetch(g_PointLightRenderingBuffer, int(((_1786 * 48u) + 4u) + 3u)).x)).w;
                        float _1854 = 1.39999997615814208984375 / (_1851 + 1.39999997615814208984375);
                        float _1855 = _1854 * _1854;
                        float _1858 = ((1.0 - _1855) * dot(vec3(0.0), vec3(_1840 * _1834, _1840 * _1835, _1840 * _1836))) + _1855;
                        float _1860 = (-0.0) - _1288;
                        float _1861 = (-0.0) - _1289;
                        float _1862 = (-0.0) - _1290;
                        float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
                        float _1870 = dot(vec3(0.0), vec3(_1866 * _1860, _1866 * _1861, _1866 * _1862));
                        float _2547 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
                        float _2558 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
                        float _1874 = isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0));
                        float _1878 = (0.5 / (((isnan(1.0) ? _2547 : (isnan(_2547) ? 1.0 : min(_2547, 1.0))) + 9.9999999392252902907785028219223e-09) + _1874)) * _1874;
                        float _2569 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
                        float _1887 = (((isnan(1.0) ? _2569 : (isnan(_2569) ? 1.0 : min(_2569, 1.0))) * 3.1415927410125732421875) / (((_1851 * _1851) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2536 : (isnan(_2536) ? 1.0 : min(_2536, 1.0)));
                        _1686 = (_1887 * _1830.x) + _1779;
                        _1687 = (_1887 * _1830.y) + _1780;
                        _1688 = (_1887 * _1830.z) + _1781;
                        if (_1783 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1779 = _1686;
                            _1780 = _1687;
                            _1781 = _1688;
                            _1782 = _1783;
                        }
                    }
                    frontier_phi_63_pred = _1688;
                    frontier_phi_63_pred_1 = _1687;
                    frontier_phi_63_pred_2 = _1686;
                }
                _1429 = frontier_phi_63_pred;
                _1427 = frontier_phi_63_pred_1;
                _1425 = frontier_phi_63_pred_2;
                uint _1596 = _1595 + 1u;
                if (_1596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1592 = _1425;
                    _1593 = _1427;
                    _1594 = _1429;
                    _1595 = _1596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1424 = _1425;
            _1426 = _1427;
            _1428 = _1429;
        }
        uvec4 _1432 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1433 = _1432.z;
        uint _1435 = (_1433 >> 8u) & 15u;
        float _1572;
        float _1574;
        float _1576;
        if (((4294967295u << _1435) & _1334) == 0u)
        {
            _1572 = _1424;
            _1574 = _1426;
            _1576 = _1428;
        }
        else
        {
            float _1588 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1435 < ((_1433 >> 12u) & 15u))
            {
                float _1573;
                float _1575;
                float _1577;
                float _1765 = _1424;
                float _1766 = _1426;
                float _1767 = _1428;
                uint _1768 = _1435;
                uint _1777;
                bool _1778;
                for (;;)
                {
                    _1777 = texelFetch(g_lightClassification, int((((_1328 << 5u) + (_1314 << 9u)) + (_1768 << 2u)) >> 2u)).x;
                    _1778 = _1777 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1778)
                    {
                        frontier_phi_77_pred = _1766;
                        frontier_phi_77_pred_1 = _1765;
                        frontier_phi_77_pred_2 = _1767;
                    }
                    else
                    {
                        float _1922;
                        float _1923;
                        float _1924;
                        float _2144;
                        float _2145;
                        float _2146;
                        float _1932 = _1765;
                        float _1933 = _1766;
                        float _1934 = _1767;
                        uint _1935 = _1777;
                        uint _1936;
                        uint _1946;
                        vec4 _1961;
                        float _1962;
                        vec3 _1974;
                        vec4 _1989;
                        vec4 _2005;
                        float _2051;
                        bool _2052;
                        for (;;)
                        {
                            _1946 = ((_1768 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1935));
                            _1936 = (_1935 + 4294967295u) & _1935;
                            uint _1948 = _1946 * 40u;
                            _1961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1948 + 3u)).x));
                            _1962 = _1961.w;
                            uint _1964 = (_1946 * 40u) + 8u;
                            _1974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1964 + 2u)).x));
                            uint _1976 = (_1946 * 40u) + 16u;
                            _1989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 3u)).x));
                            uint _1992 = (_1946 * 40u) + 20u;
                            _2005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1992 + 3u)).x));
                            uint _2007 = (_1946 * 40u) + 24u;
                            vec4 _2020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2007 + 3u)).x));
                            uint _2026 = (_1946 * 40u) + 28u;
                            vec4 _2039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2026 + 3u)).x));
                            _2051 = fma(_1290, _2039.z, fma(_1289, _2039.y, _2039.x * _1288)) + _2039.w;
                            _2052 = !((fma(_1290, _2020.z, fma(_1289, _2020.y, _2020.x * _1288)) + _2020.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2052)
                            {
                                float _2086 = _1961.x - _1288;
                                float _2087 = _1961.y - _1289;
                                float _2088 = _1961.z - _1290;
                                float _2089 = dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088));
                                float _2092 = inversesqrt(_2089);
                                float _2099 = 1.0 - (_2089 / (_1962 * _1962));
                                float _2580 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
                                float _2101 = sqrt(_2089) * uintBitsToFloat(uvec4(_2055, _2056, _2057, texelFetch(g_SpotLightRenderingBuffer, int(((_1946 * 40u) + 4u) + 3u)).x)).w;
                                float _2103 = 1.39999997615814208984375 / (_2101 + 1.39999997615814208984375);
                                float _2104 = _2103 * _2103;
                                float _2107 = (fma(_1290, _1989.z, fma(_1289, _1989.y, _1989.x * _1288)) + _1989.w) / _2051;
                                float _2108 = (fma(_1290, _2005.z, fma(_1289, _2005.y, _2005.x * _1288)) + _2005.w) / _2051;
                                float _2112 = 1.0 - dot(vec2(_2107, _2108), vec2(_2107, _2108));
                                float _2591 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
                                float _2120 = dot(vec3(0.0), vec3((-0.0) - (_1288 * _1588), (-0.0) - (_1289 * _1588), (-0.0) - (_1290 * _1588)));
                                float _2602 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
                                float _2128 = ((1.0 - _2104) * dot(vec3(0.0), vec3(_2092 * _2086, _2092 * _2087, _2092 * _2088))) + _2104;
                                float _2613 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
                                float _2129 = isnan(1.0) ? _2613 : (isnan(_2613) ? 1.0 : min(_2613, 1.0));
                                float _2133 = (0.5 / (((isnan(1.0) ? _2602 : (isnan(_2602) ? 1.0 : min(_2602, 1.0))) + 9.9999999392252902907785028219223e-09) + _2129)) * _2129;
                                float _2624 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
                                float _2140 = ((isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0))) * (isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0)))) * (((isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0))) * 3.1415927410125732421875) / (((_2101 * _2101) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2140 * _1974.z;
                                frontier_phi_83_pred_1 = _2140 * _1974.y;
                                frontier_phi_83_pred_2 = _2140 * _1974.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2146 = frontier_phi_83_pred;
                            _2145 = frontier_phi_83_pred_1;
                            _2144 = frontier_phi_83_pred_2;
                            _1922 = _2144 + _1932;
                            _1923 = _2145 + _1933;
                            _1924 = _2146 + _1934;
                            if (_1936 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1932 = _1922;
                                _1933 = _1923;
                                _1934 = _1924;
                                _1935 = _1936;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1923;
                        frontier_phi_77_pred_1 = _1922;
                        frontier_phi_77_pred_2 = _1924;
                    }
                    _1575 = frontier_phi_77_pred;
                    _1573 = frontier_phi_77_pred_1;
                    _1577 = frontier_phi_77_pred_2;
                    uint _1769 = _1768 + 1u;
                    if (_1769 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1765 = _1573;
                        _1766 = _1575;
                        _1767 = _1577;
                        _1768 = _1769;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1577;
                frontier_phi_52_53_ladder_1 = _1575;
                frontier_phi_52_53_ladder_2 = _1573;
            }
            else
            {
                frontier_phi_52_53_ladder = _1428;
                frontier_phi_52_53_ladder_1 = _1426;
                frontier_phi_52_53_ladder_2 = _1424;
            }
            _1572 = frontier_phi_52_53_ladder_2;
            _1574 = frontier_phi_52_53_ladder_1;
            _1576 = frontier_phi_52_53_ladder;
        }
        float _1581 = isnan(1.0) ? _436 : (isnan(_436) ? 1.0 : min(_436, 1.0));
        _1347 = ((_1572 * 0.039999999105930328369140625) * _1581) + _1229;
        _1349 = ((_1574 * 0.039999999105930328369140625) * _1581) + _1230;
        _1351 = ((_1576 * 0.039999999105930328369140625) * _1581) + _1231;
    }
    else
    {
        _1347 = _1229;
        _1349 = _1230;
        _1351 = _1231;
    }
    uint _1357 = _1099 + 9u;
    uint _1358 = _1357 + uint(cbMatDynParam._m0[0u].w);
    float _1373 = ((cbMtdParam._m0[9u].x * _367.x) * cbInstanceData._m0[_1358].x) + ((_1347 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _860)) * cbPerFrame._m0[3u].x);
    float _1374 = ((cbMtdParam._m0[9u].y * _367.y) * cbInstanceData._m0[_1358].y) + ((_1349 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _860)) * cbPerFrame._m0[3u].x);
    float _1375 = ((cbMtdParam._m0[9u].z * _367.z) * cbInstanceData._m0[_1358].z) + ((_1351 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _860)) * cbPerFrame._m0[3u].x);
    float _1376 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1377 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
    float _1378 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
    uint _1379 = _1099 + 6u;
    float _1387 = _423 / cbSceneParam._m0[86u].x;
    float _1388 = _424 / cbSceneParam._m0[86u].y;
    vec4 _1402 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1387, _1388, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1404 = _1402.x;
    float _1405 = _1402.y;
    float _1406 = _1402.z;
    float _1407 = _1402.w;
    float _1481;
    float _1483;
    float _1485;
    float _1487;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _1443 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _1444 = _1443 / _396;
        float _1455 = _1444 * _250;
        float _1456 = _251 * _1444;
        float _1457 = (-0.0) - _1456;
        float _1458 = _1444 * _252;
        float _1460 = (cbSceneParam._m0[77u].w * _1457) / _1443;
        float _1461 = _1460 + cbSceneParam._m0[79u].w;
        float _1462 = cbSceneParam._m0[79u].w - _1456;
        float _1468 = sqrt(((_1455 * _1455) + (_1456 * _1456)) + (_1458 * _1458));
        float _1471 = (1.0 - (cbSceneParam._m0[77u].w / _1443)) * _1468;
        float _1477 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1479 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1696;
        if (abs((_1457 - _1460) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1696 = ((((_1461 > 0.0) ? exp2(_1477 * _1461) : (2.0 - exp2(_1479 * _1461))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1471;
        }
        else
        {
            float _1618 = 1.0 / cbSceneParam._m0[80u].x;
            float _1619 = isnan(_1462) ? _1461 : (isnan(_1461) ? _1462 : max(_1461, _1462));
            float _1620 = isnan(_1462) ? _1461 : (isnan(_1461) ? _1462 : min(_1461, _1462));
            float _1629 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : min(_1619, 0.0));
            float _1630 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : min(_1620, 0.0));
            _1696 = ((abs(_1468 / _1457) * cbSceneParam._m0[80u].y) * ((((_1629 - _1630) * 2.0) - ((exp2(_1477 * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)))) - exp2(_1477 * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))))) * _1618)) - ((exp2(_1479 * _1629) - exp2(_1479 * _1630)) * _1618))) + (_1471 * cbSceneParam._m0[80u].z);
        }
        vec4 _1698 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1387, _1388, 1.0), 0.0);
        float _1707 = exp2((_1696 * (-1.44269502162933349609375)) * (1.0 - _1698.w));
        float _1708 = log2(_1707);
        float _1724 = log2(_1407);
        _1481 = (exp2(_1724 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1708 * cbSceneParam._m0[78u].x)) * _1698.x) / cbSceneParam._m0[78u].x)) + _1404;
        _1483 = (exp2(_1724 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1708 * cbSceneParam._m0[78u].y)) * _1698.y) / cbSceneParam._m0[78u].y)) + _1405;
        _1485 = (exp2(_1724 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1708 * cbSceneParam._m0[78u].z)) * _1698.z) / cbSceneParam._m0[78u].z)) + _1406;
        _1487 = _1707 * _1407;
    }
    else
    {
        _1481 = _1404;
        _1483 = _1405;
        _1485 = _1406;
        _1487 = _1407;
    }
    bool _1734;
    vec4 _1497;
    vec4 _1520;
    float _1522;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    bool _1540;
    for (;;)
    {
        _1497 = cbMatDynParam._m0[0u];
        float _1499 = roundEven(_1497.y);
        bool _1500 = _1499 == 3.0;
        float _1502 = log2(_1487);
        float _1509 = exp2(_1502 * cbSceneParam._m0[78u].x) * _1376;
        float _1510 = exp2(_1502 * cbSceneParam._m0[78u].y) * _1377;
        float _1511 = exp2(_1502 * cbSceneParam._m0[78u].z) * _1378;
        float _1518 = _410 + (-0.5);
        _1520 = cbMtdParam._m0[1u];
        _1522 = _1520.y * _1518;
        float _1525 = (_1499 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1526 = _1525 * (_1500 ? _1509 : (_1509 + (cbSceneParam._m0[72u].w * _1481)));
        _1527 = _1525 * (_1500 ? _1510 : (_1510 + (cbSceneParam._m0[72u].w * _1483)));
        _1528 = _1525 * (_1500 ? _1511 : (_1511 + (cbSceneParam._m0[72u].w * _1485)));
        _1529 = _1518 * 0.999000012874603271484375;
        _1540 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1540)
        {
            if ((cbInstanceData._m0[_1099 + 7u].x + _1529) < 0.5)
            {
                _1734 = true;
                break;
            }
        }
        uint _1653 = _1357 + uint(_1497.w);
        if ((cbInstanceData._m0[_1653].w < 1.0) && ((cbInstanceData._m0[_1653].w + _1529) < 0.5))
        {
            _1734 = true;
            break;
        }
        if ((_1522 + 1.0) < _1520.x)
        {
            _1734 = true;
            break;
        }
        _1734 = false;
        break;
    }
    float _1892;
    if (_1734)
    {
        discard_state = true;
        _1892 = 0.0;
    }
    else
    {
        _1892 = cbInstanceData._m0[_1379].w;
    }
    SV_Target.x = _1526;
    SV_Target.y = _1527;
    SV_Target.z = _1528;
    SV_Target.w = _1892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1379].w;
    discard_exit();
}


