#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3502;
float _3503;
float _3504;
float _3505;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    float _337 = cbMtdParam._m0[22u].y + _267;
    float _338 = cbMtdParam._m0[22u].z + _268;
    float _339 = cbMtdParam._m0[22u].w + _269;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_196, _197, _198));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_210, _211, _212));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _362 = (cbMtdParam._m0[19u].x * _353) * _359;
    float _364 = (cbMtdParam._m0[18u].w * _354) * _359;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_362 > 0.0)
    {
        _372 = (1.0 - _365) / _362;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _362;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    bool _382 = _360 > 0.0;
    float _384 = _382 ? (cbMtdParam._m0[15u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = _365 + (-0.5);
    float _394 = _366 + (-0.5);
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_391 + (_386 * _362)) / _397) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_394 + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _438 = (_424 - (_424 * _294)) * cbMtdParam._m0[9u].x;
    float _439 = (_425 - (_425 * _294)) * cbMtdParam._m0[9u].y;
    float _440 = cbMtdParam._m0[9u].z * (_426 - (_426 * _294));
    float _462 = (cbMtdParam._m0[21u].x * _353) * _359;
    float _464 = (cbMtdParam._m0[20u].w * _354) * _359;
    bool _465 = _462 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _470 = frontier_phi_11_10_ladder;
    }
    bool _472 = _464 > 0.0;
    float _477;
    if (_472)
    {
        _477 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _477 = frontier_phi_15_14_ladder;
    }
    float _480 = _382 ? (cbMtdParam._m0[16u].z / _360) : 5000.0;
    float _481 = isnan(_477) ? _470 : (isnan(_470) ? _477 : min(_470, _477));
    float _482 = isnan(_480) ? _481 : (isnan(_481) ? _480 : min(_481, _480));
    float _486 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _490 = ((_482 * _360) + _486) / _486;
    float _495 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _497 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _513 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_482 * _462)) / _490) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_482 * _464)) / _490) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518 = _513.x * cbMtdParam._m0[10u].x;
    float _519 = _513.y * cbMtdParam._m0[10u].y;
    float _520 = _513.z * cbMtdParam._m0[10u].z;
    float _528;
    if (_465)
    {
        _528 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _528 = frontier_phi_19_18_ladder;
    }
    float _534;
    if (_472)
    {
        _534 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _534 = frontier_phi_23_22_ladder;
    }
    float _536 = isnan(_534) ? _528 : (isnan(_528) ? _534 : min(_528, _534));
    float _537 = isnan(_480) ? _536 : (isnan(_536) ? _480 : min(_536, _480));
    float _544 = ((_537 * _360) + _486) / _486;
    vec4 _558 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_537 * _462)) / _544) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_537 * _464)) / _544) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _560 = _558.w;
    float _562 = _560 - (_560 * _294);
    float _572 = (_562 * ((_518 - _438) - (_518 * _294))) + _438;
    float _573 = (_562 * ((_519 - _439) - (_519 * _294))) + _439;
    float _574 = (_562 * ((_520 - _440) - (_520 * _294))) + _440;
    float _589 = (cbMtdParam._m0[21u].z * _353) * _359;
    float _591 = (cbMtdParam._m0[21u].y * _354) * _359;
    bool _592 = _589 > 0.0;
    float _597;
    if (_592)
    {
        _597 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _597 = frontier_phi_27_26_ladder;
    }
    bool _599 = _591 > 0.0;
    float _604;
    if (_599)
    {
        _604 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _604 = frontier_phi_31_30_ladder;
    }
    float _607 = _382 ? (cbMtdParam._m0[18u].x / _360) : 5000.0;
    float _608 = isnan(_604) ? _597 : (isnan(_597) ? _604 : min(_597, _604));
    float _609 = isnan(_607) ? _608 : (isnan(_608) ? _607 : min(_608, _607));
    float _613 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _617 = ((_609 * _360) + _613) / _613;
    float _622 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _624 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _641 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_609 * _589)) / _617) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_609 * _591)) / _617) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _646 = _641.x * cbMtdParam._m0[14u].x;
    float _647 = _641.y * cbMtdParam._m0[14u].y;
    float _648 = _641.z * cbMtdParam._m0[14u].z;
    float _656;
    if (_592)
    {
        _656 = (1.0 - _365) / _589;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _365) / _589;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _656 = frontier_phi_35_34_ladder;
    }
    float _662;
    if (_599)
    {
        _662 = (1.0 - _366) / _591;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _366) / _591;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _662 = frontier_phi_39_38_ladder;
    }
    float _664 = isnan(_662) ? _656 : (isnan(_656) ? _662 : min(_656, _662));
    float _665 = isnan(_607) ? _664 : (isnan(_664) ? _607 : min(_664, _607));
    float _672 = ((_665 * _360) + _613) / _613;
    vec4 _686 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_391 + (_665 * _589)) / _672) + 0.5) + _622) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_394 + (_665 * _591)) / _672) + 0.5) + _624) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _688 = _686.w;
    float _690 = _688 - (_688 * _294);
    vec4 _714 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _716 = _714.x;
    vec4 _728 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _736 = (_728.x * 2.0) + (-1.0);
    float _738 = (_728.y * 2.0) + (-1.0);
    float _739 = dot(vec2(_736, _738), vec2(_736, _738));
    float _3564 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _744 = sqrt(1.0 - (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))));
    float _745 = _728.z * _294;
    float _748 = fma(_744, _203, fma(_738, _210, _736 * _196));
    float _751 = fma(_744, _204, fma(_738, _211, _736 * _197));
    float _754 = fma(_744, _205, fma(_738, _212, _736 * _198));
    float _758 = inversesqrt(dot(vec3(_748, _751, _754), vec3(_748, _751, _754)));
    float _759 = _758 * _748;
    float _760 = _758 * _751;
    float _761 = _758 * _754;
    float _3575 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _762 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
    float _3586 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3597 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3608 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3619 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _766 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _782 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _786 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _787 = _267 * _786;
    float _788 = _268 * _786;
    float _789 = _269 * _786;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _972 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _978 = (cbMatDynParam._m0[5u].x * _972) + cbMatDynParam._m0[5u].y;
        float _3630 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _983 = (cbMatDynParam._m0[5u].z * _972) + cbMatDynParam._m0[5u].w;
        float _3641 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) - _979)) + _979) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _809 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _810 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_761, cbSceneParam._m0[5u].z, fma(_760, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _759));
    float _832 = fma(_761, cbSceneParam._m0[6u].z, fma(_760, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _759));
    float _835 = fma(_761, cbSceneParam._m0[7u].z, fma(_760, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _759));
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _850 = _848 + 9u;
    uint _851 = _850 + uint(cbMatDynParam._m0[0u].w);
    float _857 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_851].x;
    float _858 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0)))) * cbInstanceData._m0[_851].y;
    float _859 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0)))) * cbInstanceData._m0[_851].z;
    float _3652 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
    float _3663 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _3674 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _863 = 1.0 - _766;
    float _864 = _860 * _863;
    float _865 = _861 * _863;
    float _866 = _862 * _863;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _766;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _766;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _766;
    float _874 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    float _877 = _873 + 0.039999999105930328369140625;
    vec4 _886 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _809, cbSceneParam._m0[86u].y * _810));
    float _889 = _886.x * TEXCOORD.z;
    float _890 = dot(vec3(_759, _760, _761), vec3(_787, _788, _789));
    float _893 = _890 * 2.0;
    float _897 = (_893 * _759) - _787;
    float _898 = (_893 * _760) - _788;
    float _899 = (_893 * _761) - _789;
    float _903 = abs(dot(vec3(_787, _788, _789), vec3(_759, _760, _761)));
    float _3685 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _905 = sqrt(_762);
    float _918 = exp2((_905 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_905 * 3.0));
    float _924 = (1.0 - _918) * ((_905 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _925 = _918 * _905;
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _1021 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _1025 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1048 = _953 + _759;
        float _1049 = _957 + _760;
        float _1050 = _961 + _761;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1017;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1021;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1025;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_759, _760, _761), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3711 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3722 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3733 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_759, _760, _761), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3744 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3755 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3766 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_759, _760, _761), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3799 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1338 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1342 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1365 = _953 + _759;
        float _1366 = _957 + _760;
        float _1367 = _961 + _761;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_759, _760, _761), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3840 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _3851 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3862 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_759, _760, _761), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3873 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _3884 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _3895 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_759, _760, _761), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _3906 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _3917 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _3928 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = _1291;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _897 * 0.5;
    float _1672 = _898 * 0.5;
    float _1673 = _899 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_899, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _897));
        float _1801 = fma(_899, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _897));
        float _1804 = fma(_899, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _897));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1832 = frontier_phi_57_55_ladder;
        }
        float _2214;
        if (_1801 > 0.0)
        {
            _2214 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2214 = frontier_phi_66_62_ladder;
        }
        float _2538;
        if (_1804 > 0.0)
        {
            _2538 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2538 = frontier_phi_80_73_ladder;
        }
        float _2540 = isnan(_2214) ? _1832 : (isnan(_1832) ? _2214 : min(_1832, _2214));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1798) + _1787;
        float _2546 = (_2541 * _1801) + _1791;
        float _2547 = (_2541 * _1804) + _1795;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2547, cbModelParam._m0[9u].z, fma(_2546, cbModelParam._m0[9u].y, _2545 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2547, cbModelParam._m0[10u].z, fma(_2546, cbModelParam._m0[10u].y, _2545 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2547, cbModelParam._m0[11u].z, fma(_2546, cbModelParam._m0[11u].y, _2545 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_56_80_ladder = _2689.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2689.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2689.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_56_80_ladder_2;
        _1822 = frontier_phi_56_80_ladder_1;
        _1824 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_897, _898, _899), _1740);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1917;
    float _1919;
    float _1921;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1881 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1885 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1889 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1892 = fma(_899, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _897));
        float _1895 = fma(_899, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _897));
        float _1898 = fma(_899, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _897));
        float _2219;
        if (_1892 > 0.0)
        {
            _2219 = abs((1.0 - _1881) / _1892);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1881 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2219 = frontier_phi_68_64_ladder;
        }
        float _2564;
        if (_1895 > 0.0)
        {
            _2564 = abs((1.0 - _1885) / _1895);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1885 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2564 = frontier_phi_82_75_ladder;
        }
        float _2754;
        if (_1898 > 0.0)
        {
            _2754 = abs((1.0 - _1889) / _1898);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1889 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2754 = frontier_phi_100_93_ladder;
        }
        float _2756 = isnan(_2564) ? _2219 : (isnan(_2219) ? _2564 : min(_2219, _2564));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1892) + _1881;
        float _2762 = (_2757 * _1895) + _1885;
        float _2763 = (_2757 * _1898) + _1889;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_65_100_ladder = _3005.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3005.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3005.z * cbModelParam._m0[1u].z;
        }
        _1917 = frontier_phi_65_100_ladder_1;
        _1919 = frontier_phi_65_100_ladder;
        _1921 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1901 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_897, _898, _899), _1829);
        _1917 = _1901.x * cbModelParam._m0[1u].z;
        _1919 = _1901.y * cbModelParam._m0[1u].z;
        _1921 = _1901.z * cbModelParam._m0[1u].z;
    }
    float _1934 = (((_924 * _874) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1917 - _1820)) + _1820);
    float _1936 = (((_924 * _876) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1919 - _1822)) + _1822);
    float _1938 = (((_924 * _877) + _925) * _889) * ((cbModelParam._m0[1u].w * (_1921 - _1824)) + _1824);
    float _1941 = fma(_1938, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1934 * cbSceneParam._m0[89u].x));
    float _1944 = fma(_1938, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1934 * cbSceneParam._m0[90u].x));
    float _1947 = fma(_1938, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1934 * cbSceneParam._m0[91u].x));
    vec4 _1955 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_809, _810));
    float _1957 = _1955.w;
    float _1969 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1957);
    float _1970 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1957);
    float _1971 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1957);
    uvec4 _1975 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _1977 = _1975.x * 14u;
    uint _1978 = _1977 + 13u;
    float _1983 = _889 + (-1.0);
    float _1986 = (cbLight._m0[_1978].x * _1983) + 1.0;
    float _1987 = (cbLight._m0[_1978].y * _1983) + 1.0;
    uint _1988 = _1977 + 5u;
    float _1994 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _1998 = _1977 + 4u;
    float _2007 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2011 = _1977 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_759, _760, _761));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_759, _760, _761));
    float _4064 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4075 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1969) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1970) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1971) * _2007) * _2030);
    uint _2043 = _1977 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _762) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1977].x + _787;
    float _2059 = cbLight._m0[_1977].y + _788;
    float _2060 = cbLight._m0[_1977].z + _789;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_1977].xyz));
    float _4086 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _2072 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _2073 = dot(vec3(_759, _760, _761), vec3(_2065, _2066, _2067));
    float _4108 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2065, _2066, _2067));
    float _4119 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * 5.0);
    float _2094 = 0.959999978542327880859375 - _871;
    float _2096 = 0.959999978542327880859375 - _872;
    float _2097 = 0.959999978542327880859375 - _873;
    float _2104 = 1.0 - _2057;
    float _2115 = (0.5 / (((_2072 * ((_2071 * _2104) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2104) + _2057) * _2071))) * _2071;
    float _4130 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2131 = _1977 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _762) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_2011].x + _787;
    float _2145 = cbLight._m0[_2011].y + _788;
    float _2146 = cbLight._m0[_2011].z + _789;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_759, _760, _761), vec3(cbLight._m0[_2011].xyz));
    float _4141 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _2158 = dot(vec3(_759, _760, _761), vec3(_2151, _2152, _2153));
    float _4152 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2151, _2152, _2153));
    float _4163 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0)))) * 5.0);
    float _2184 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2072 * ((_2157 * _2184) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2184) + _2143) * _2157))) * _2157;
    float _4174 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2206 = (((((_2177 * _2094) + _874) * cbLight._m0[_2131].x) * _2196) * _1994) + ((((cbLight._m0[_2043].x * _1969) * ((_2093 * _2094) + _874)) * _2117) * _2007);
    float _2207 = (((((_2177 * _2096) + _876) * cbLight._m0[_2131].y) * _2196) * _1994) + ((((cbLight._m0[_2043].y * _1970) * ((_2093 * _2096) + _876)) * _2117) * _2007);
    float _2208 = (((((_2177 * _2097) + _877) * cbLight._m0[_2131].z) * _2196) * _1994) + ((((cbLight._m0[_2043].z * _1971) * ((_2093 * _2097) + _877)) * _2117) * _2007);
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    float _2333;
    if (_1975.y == 0u)
    {
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2264 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2263;
        float _2265 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2263;
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2263;
        uvec4 _2278 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2279 = _2278.x;
        uint _2290 = uint((float(_2278.y) * floor(float(uint(cbSceneParam._m0[85u].y * _810) / _2279))) + floor(float(uint(cbSceneParam._m0[85u].x * _809) / _2279)));
        float _2300 = (log2(_2266 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2301 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        uint _2304 = uint(isnan(14.0) ? _2301 : (isnan(_2301) ? 14.0 : min(_2301, 14.0)));
        uvec4 _2309 = texelFetch(g_lightClusterGridBuffer, int(((_2304 << 2u) + (_2290 << 6u)) >> 2u));
        uint _2310 = _2309.x;
        uint _2311 = _2278.z;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        if (((((1u << ((_2311 >> 4u) & 15u)) + 4294967295u) & _2310) == 0u) || ((_2311 & 240u) == 0u))
        {
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
            _2427 = 0.0;
        }
        else
        {
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2428;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            uint _2607 = 0u;
            uint _2616;
            bool _2617;
            for (;;)
            {
                _2616 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2607 << 2u)) >> 2u)).x;
                _2617 = _2616 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2617)
                {
                    frontier_phi_95_pred = _2602;
                    frontier_phi_95_pred_1 = _2601;
                    frontier_phi_95_pred_2 = _2603;
                    frontier_phi_95_pred_3 = _2606;
                    frontier_phi_95_pred_4 = _2605;
                    frontier_phi_95_pred_5 = _2604;
                }
                else
                {
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    uint _2803;
                    _2797 = _2601;
                    _2798 = _2602;
                    _2799 = _2603;
                    _2800 = _2604;
                    _2801 = _2605;
                    _2802 = _2606;
                    _2803 = _2616;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    float _2703;
                    for (;;)
                    {
                        uint _2807 = uint(findLSB(_2803)) + (_2607 << 5u);
                        uint _2804 = (_2803 + 4294967295u) & _2803;
                        uint _2809 = _2807 * 48u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2809)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2809 + 3u)).x));
                        uint _2829 = (_2807 * 48u) + 4u;
                        vec4 _2842 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 3u)).x));
                        uint _2848 = (_2807 * 48u) + 8u;
                        vec3 _2859 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2848)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2848 + 2u)).x));
                        float _2863 = _2823.x - _2264;
                        float _2864 = _2823.y - _2265;
                        float _2865 = _2823.z - _2266;
                        float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                        float _2869 = inversesqrt(_2866);
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2873 = dot(vec3(_829, _832, _835), vec3(_2870, _2871, _2872));
                        float _2878 = 1.0 - (_2866 * _2823.w);
                        float _4195 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2879 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                        float _2880 = sqrt(_2866) * _2842.w;
                        float _2883 = 1.39999997615814208984375 / (_2880 + 1.39999997615814208984375);
                        float _2884 = _2883 * _2883;
                        float _2887 = ((1.0 - _2884) * _2873) + _2884;
                        float _2890 = _2880 * _2880;
                        float _2894 = ((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2879) / ((_2890 * 0.699999988079071044921875) + 1.0);
                        float _2898 = (-0.0) - _2264;
                        float _2899 = (-0.0) - _2265;
                        float _2900 = (-0.0) - _2266;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2905 = _2904 * _2898;
                        float _2906 = _2904 * _2899;
                        float _2907 = _2904 * _2900;
                        float _2915 = exp2(log2(1.0 / ((_2890 * 3.5) + 5.0)) * 0.25);
                        float _2916 = 1.0 - _905;
                        float _2923 = sqrt(1.0 - ((1.0 - (_2916 * _2916)) * (1.0 - (_2915 * _2915))));
                        float _2924 = _2923 * _2923;
                        float _2925 = _2924 * _2924;
                        float _2926 = _2905 + _2870;
                        float _2927 = _2906 + _2871;
                        float _2928 = _2907 + _2872;
                        float _2932 = inversesqrt(dot(vec3(_2926, _2927, _2928), vec3(_2926, _2927, _2928)));
                        float _2936 = dot(vec3(_829, _832, _835), vec3(_2905, _2906, _2907));
                        float _4211 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2939 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2940 = dot(vec3(_829, _832, _835), vec3(_2932 * _2926, _2932 * _2927, _2932 * _2928));
                        float _4222 = isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0));
                        float _2943 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2947 = ((_2943 * _2943) * (_2925 + (-1.0))) + 1.0;
                        float _2948 = _2883 * _2924;
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2873) + _2949;
                        float _4233 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2953 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2954 = 1.0 - _2924;
                        float _2964 = (0.5 / (((_2953 * ((_2939 * _2954) + _2924)) + 9.9999999392252902907785028219223e-09) + (((_2953 * _2954) + _2924) * _2939))) * _2953;
                        float _4244 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2975 = (((_2925 * 3.1415927410125732421875) * (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) / ((_2947 * _2947) * ((_2890 * 2.1991131305694580078125) + 3.141590118408203125))) * _2879;
                        _2701 = (_2894 * _2842.x) + _2800;
                        _2702 = (_2894 * _2842.y) + _2801;
                        _2703 = (_2894 * _2842.z) + _2802;
                        _2698 = (_2975 * _2859.x) + _2797;
                        _2699 = (_2975 * _2859.y) + _2798;
                        _2700 = (_2975 * _2859.z) + _2799;
                        if (_2804 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2797 = _2698;
                            _2798 = _2699;
                            _2799 = _2700;
                            _2800 = _2701;
                            _2801 = _2702;
                            _2802 = _2703;
                            _2803 = _2804;
                        }
                    }
                    frontier_phi_95_pred = _2699;
                    frontier_phi_95_pred_1 = _2698;
                    frontier_phi_95_pred_2 = _2700;
                    frontier_phi_95_pred_3 = _2703;
                    frontier_phi_95_pred_4 = _2702;
                    frontier_phi_95_pred_5 = _2701;
                }
                _2420 = frontier_phi_95_pred;
                _2418 = frontier_phi_95_pred_1;
                _2422 = frontier_phi_95_pred_2;
                _2428 = frontier_phi_95_pred_3;
                _2426 = frontier_phi_95_pred_4;
                _2424 = frontier_phi_95_pred_5;
                uint _2608 = _2607 + 1u;
                if (_2608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2601 = _2418;
                    _2602 = _2420;
                    _2603 = _2422;
                    _2604 = _2424;
                    _2605 = _2426;
                    _2606 = _2428;
                    _2607 = _2608;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
            _2427 = _2428;
        }
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.z;
        uint _2434 = (_2432 >> 8u) & 15u;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((4294967295u << _2434) & _2310) == 0u)
        {
            _2569 = _2417;
            _2571 = _2419;
            _2573 = _2421;
            _2575 = _2423;
            _2577 = _2425;
            _2579 = _2427;
        }
        else
        {
            float _2594 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
            float _2595 = _2594 * _2264;
            float _2596 = _2594 * _2265;
            float _2597 = _2594 * _2266;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2434 < ((_2432 >> 12u) & 15u))
            {
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2580;
                float _2780 = _2417;
                float _2781 = _2419;
                float _2782 = _2421;
                float _2783 = _2423;
                float _2784 = _2425;
                float _2785 = _2427;
                uint _2786 = _2434;
                uint _2795;
                bool _2796;
                for (;;)
                {
                    _2795 = texelFetch(g_lightClassification, int((((_2304 << 5u) + (_2290 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                    _2796 = _2795 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2796)
                    {
                        frontier_phi_109_pred = _2781;
                        frontier_phi_109_pred_1 = _2780;
                        frontier_phi_109_pred_2 = _2785;
                        frontier_phi_109_pred_3 = _2784;
                        frontier_phi_109_pred_4 = _2783;
                        frontier_phi_109_pred_5 = _2782;
                    }
                    else
                    {
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3023 = _2780;
                        float _3024 = _2781;
                        float _3025 = _2782;
                        float _3026 = _2783;
                        float _3027 = _2784;
                        float _3028 = _2785;
                        uint _3029 = _2795;
                        uint _3030;
                        vec4 _3055;
                        float _3056;
                        vec4 _3071;
                        vec3 _3083;
                        vec4 _3098;
                        vec4 _3113;
                        float _3159;
                        bool _3160;
                        for (;;)
                        {
                            uint _3040 = ((_2786 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3029));
                            _3030 = (_3029 + 4294967295u) & _3029;
                            uint _3042 = _3040 * 40u;
                            _3055 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 3u)).x));
                            _3056 = _3055.w;
                            uint _3058 = (_3040 * 40u) + 4u;
                            _3071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 3u)).x));
                            uint _3073 = (_3040 * 40u) + 8u;
                            _3083 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x));
                            uint _3085 = (_3040 * 40u) + 16u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3040 * 40u) + 20u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3115 = (_3040 * 40u) + 24u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3134 = (_3040 * 40u) + 28u;
                            vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3159 = fma(_2266, _3147.z, fma(_2265, _3147.y, _3147.x * _2264)) + _3147.w;
                            _3160 = !((fma(_2266, _3128.z, fma(_2265, _3128.y, _3128.x * _2264)) + _3128.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3160)
                            {
                                float _3187 = _3055.x - _2264;
                                float _3188 = _3055.y - _2265;
                                float _3189 = _3055.z - _2266;
                                float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                                float _3193 = inversesqrt(_3190);
                                float _3194 = _3193 * _3187;
                                float _3195 = _3193 * _3188;
                                float _3196 = _3193 * _3189;
                                float _3200 = 1.0 - (_3190 / (_3056 * _3056));
                                float _4255 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3201 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                                float _3205 = sqrt(_3190) * _3071.w;
                                float _3207 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                                float _3208 = _3207 * _3207;
                                float _3211 = ((1.0 - _3208) * dot(vec3(_3194, _3195, _3196), vec3(_829, _832, _835))) + _3208;
                                float _3214 = _3205 * _3205;
                                float _3218 = (fma(_2266, _3098.z, fma(_2265, _3098.y, _3098.x * _2264)) + _3098.w) / _3159;
                                float _3219 = (fma(_2266, _3113.z, fma(_2265, _3113.y, _3113.x * _2264)) + _3113.w) / _3159;
                                float _3223 = 1.0 - dot(vec2(_3218, _3219), vec2(_3218, _3219));
                                float _4271 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3225 = _3224 * (((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3201) / ((_3214 * 0.699999988079071044921875) + 1.0));
                                float _3237 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                                float _3238 = 1.0 - _905;
                                float _3245 = sqrt(1.0 - ((1.0 - (_3238 * _3238)) * (1.0 - (_3237 * _3237))));
                                float _3246 = _3245 * _3245;
                                float _3247 = _3246 * _3246;
                                float _3248 = _3194 - _2595;
                                float _3249 = _3195 - _2596;
                                float _3250 = _3196 - _2597;
                                float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                                float _3258 = dot(vec3(_829, _832, _835), vec3((-0.0) - _2595, (-0.0) - _2596, (-0.0) - _2597));
                                float _4282 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3261 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3262 = dot(vec3(_829, _832, _835), vec3(_3254 * _3248, _3254 * _3249, _3254 * _3250));
                                float _4293 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3265 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3269 = ((_3265 * _3265) * (_3247 + (-1.0))) + 1.0;
                                float _3270 = _3207 * _3246;
                                float _3271 = _3270 * _3270;
                                float _3277 = ((1.0 - _3271) * dot(vec3(_829, _832, _835), vec3(_3194, _3195, _3196))) + _3271;
                                float _4304 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                                float _3278 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3279 = 1.0 - _3246;
                                float _3289 = (0.5 / (((_3278 * ((_3261 * _3279) + _3246)) + 9.9999999392252902907785028219223e-09) + (((_3278 * _3279) + _3246) * _3261))) * _3278;
                                float _4315 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3299 = (_3224 * _3201) * (((_3247 * 3.1415927410125732421875) * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) / ((_3269 * _3269) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3225 * _3071.y;
                                frontier_phi_115_pred_1 = _3225 * _3071.x;
                                frontier_phi_115_pred_2 = _3299 * _3083.z;
                                frontier_phi_115_pred_3 = _3299 * _3083.y;
                                frontier_phi_115_pred_4 = _3299 * _3083.x;
                                frontier_phi_115_pred_5 = _3225 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3307 = frontier_phi_115_pred;
                            _3306 = frontier_phi_115_pred_1;
                            _3305 = frontier_phi_115_pred_2;
                            _3304 = frontier_phi_115_pred_3;
                            _3303 = frontier_phi_115_pred_4;
                            _3308 = frontier_phi_115_pred_5;
                            _3013 = _3306 + _3026;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            _3010 = _3303 + _3023;
                            _3011 = _3304 + _3024;
                            _3012 = _3305 + _3025;
                            if (_3030 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3030;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3011;
                        frontier_phi_109_pred_1 = _3010;
                        frontier_phi_109_pred_2 = _3015;
                        frontier_phi_109_pred_3 = _3014;
                        frontier_phi_109_pred_4 = _3013;
                        frontier_phi_109_pred_5 = _3012;
                    }
                    _2572 = frontier_phi_109_pred;
                    _2570 = frontier_phi_109_pred_1;
                    _2580 = frontier_phi_109_pred_2;
                    _2578 = frontier_phi_109_pred_3;
                    _2576 = frontier_phi_109_pred_4;
                    _2574 = frontier_phi_109_pred_5;
                    uint _2787 = _2786 + 1u;
                    if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2780 = _2570;
                        _2781 = _2572;
                        _2782 = _2574;
                        _2783 = _2576;
                        _2784 = _2578;
                        _2785 = _2580;
                        _2786 = _2787;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2570;
                frontier_phi_84_85_ladder_1 = _2574;
                frontier_phi_84_85_ladder_2 = _2580;
                frontier_phi_84_85_ladder_3 = _2578;
                frontier_phi_84_85_ladder_4 = _2576;
                frontier_phi_84_85_ladder_5 = _2572;
            }
            else
            {
                frontier_phi_84_85_ladder = _2417;
                frontier_phi_84_85_ladder_1 = _2421;
                frontier_phi_84_85_ladder_2 = _2427;
                frontier_phi_84_85_ladder_3 = _2425;
                frontier_phi_84_85_ladder_4 = _2423;
                frontier_phi_84_85_ladder_5 = _2419;
            }
            _2569 = frontier_phi_84_85_ladder;
            _2571 = frontier_phi_84_85_ladder_5;
            _2573 = frontier_phi_84_85_ladder_1;
            _2575 = frontier_phi_84_85_ladder_4;
            _2577 = frontier_phi_84_85_ladder_3;
            _2579 = frontier_phi_84_85_ladder_2;
        }
        float _2584 = isnan(1.0) ? _889 : (isnan(_889) ? 1.0 : min(_889, 1.0));
        _2323 = (_2584 * _2575) + _2039;
        _2325 = (_2584 * _2577) + _2040;
        _2327 = (_2584 * _2579) + _2041;
        _2329 = ((_2569 * _874) * _2584) + _2206;
        _2331 = ((_2571 * _876) * _2584) + _2207;
        _2333 = ((_2573 * _877) * _2584) + _2208;
    }
    else
    {
        _2323 = _2039;
        _2325 = _2040;
        _2327 = _2041;
        _2329 = _2206;
        _2331 = _2207;
        _2333 = _2208;
    }
    uint _2339 = _850 + uint(cbMatDynParam._m0[0u].w);
    float _4331 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4342 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4353 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2364 = (((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2323 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _889))) + ((_2329 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2339].x * ((_690 * ((_646 - _572) - (_646 * _294))) + _572));
    float _2366 = ((cbInstanceData._m0[_2339].y * ((_690 * ((_647 - _573) - (_647 * _294))) + _573)) + ((_2331 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2325 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _889)));
    float _2368 = ((cbInstanceData._m0[_2339].z * ((_690 * ((_648 - _574) - (_648 * _294))) + _574)) + ((_2333 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2327 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _889)));
    float _2369 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2370 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    uint _2372 = _848 + 6u;
    float _2380 = _809 / cbSceneParam._m0[86u].x;
    float _2381 = _810 / cbSceneParam._m0[86u].y;
    vec4 _2395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, (log2((isnan(cbSceneParam._m0[77u].w) ? _782 : (isnan(_782) ? cbSceneParam._m0[77u].w : min(_782, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2397 = _2395.x;
    float _2398 = _2395.y;
    float _2399 = _2395.z;
    float _2400 = _2395.w;
    float _2480;
    float _2482;
    float _2484;
    float _2486;
    if (_782 > cbSceneParam._m0[78u].w)
    {
        float _2442 = isnan(_782) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _782 : min(cbSceneParam._m0[80u].w, _782));
        float _2443 = _2442 / _782;
        float _2454 = _2443 * _267;
        float _2455 = _268 * _2443;
        float _2456 = (-0.0) - _2455;
        float _2457 = _2443 * _269;
        float _2459 = (cbSceneParam._m0[77u].w * _2456) / _2442;
        float _2460 = _2459 + cbSceneParam._m0[79u].w;
        float _2461 = cbSceneParam._m0[79u].w - _2455;
        float _2467 = sqrt(((_2454 * _2454) + (_2455 * _2455)) + (_2457 * _2457));
        float _2470 = (1.0 - (cbSceneParam._m0[77u].w / _2442)) * _2467;
        float _2476 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2478 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2711;
        if (abs((_2456 - _2459) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2711 = ((((_2460 > 0.0) ? exp2(_2476 * _2460) : (2.0 - exp2(_2478 * _2460))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2470;
        }
        else
        {
            float _2630 = 1.0 / cbSceneParam._m0[80u].x;
            float _2631 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : max(_2460, _2461));
            float _2632 = isnan(_2461) ? _2460 : (isnan(_2460) ? _2461 : min(_2460, _2461));
            float _2641 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : min(_2631, 0.0));
            float _2642 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : min(_2632, 0.0));
            _2711 = ((abs(_2467 / _2456) * cbSceneParam._m0[80u].y) * ((((_2641 - _2642) * 2.0) - ((exp2(_2476 * (isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0)))) - exp2(_2476 * (isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0))))) * _2630)) - ((exp2(_2478 * _2641) - exp2(_2478 * _2642)) * _2630))) + (_2470 * cbSceneParam._m0[80u].z);
        }
        vec4 _2713 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2380, _2381, 1.0), 0.0);
        float _2722 = exp2((_2711 * (-1.44269502162933349609375)) * (1.0 - _2713.w));
        float _2723 = log2(_2722);
        float _2739 = log2(_2400);
        _2480 = (exp2(_2739 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].x)) * _2713.x) / cbSceneParam._m0[78u].x)) + _2397;
        _2482 = (exp2(_2739 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].y)) * _2713.y) / cbSceneParam._m0[78u].y)) + _2398;
        _2484 = (exp2(_2739 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2723 * cbSceneParam._m0[78u].z)) * _2713.z) / cbSceneParam._m0[78u].z)) + _2399;
        _2486 = _2722 * _2400;
    }
    else
    {
        _2480 = _2397;
        _2482 = _2398;
        _2484 = _2399;
        _2486 = _2400;
    }
    bool _2749;
    vec4 _2496;
    vec4 _2518;
    float _2520;
    float _2524;
    float _2525;
    float _2526;
    float _2527;
    bool _2537;
    for (;;)
    {
        _2496 = cbMatDynParam._m0[0u];
        float _2498 = roundEven(_2496.y);
        bool _2499 = _2498 == 3.0;
        float _2500 = log2(_2486);
        float _2507 = exp2(_2500 * cbSceneParam._m0[78u].x) * _2369;
        float _2508 = exp2(_2500 * cbSceneParam._m0[78u].y) * _2370;
        float _2509 = exp2(_2500 * cbSceneParam._m0[78u].z) * _2371;
        float _2516 = _796 + (-0.5);
        _2518 = cbMtdParam._m0[1u];
        _2520 = _2518.y * _2516;
        float _2523 = (_2498 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2524 = _2523 * (_2499 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2480)));
        _2525 = _2523 * (_2499 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2482)));
        _2526 = _2523 * (_2499 ? _2509 : (_2509 + (cbSceneParam._m0[72u].w * _2484)));
        _2527 = _2516 * 0.999000012874603271484375;
        _2537 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2537)
        {
            if ((cbInstanceData._m0[_848 + 7u].x + _2527) < 0.5)
            {
                _2749 = true;
                break;
            }
        }
        uint _2665 = _850 + uint(_2496.w);
        if ((cbInstanceData._m0[_2665].w < 1.0) && ((cbInstanceData._m0[_2665].w + _2527) < 0.5))
        {
            _2749 = true;
            break;
        }
        if ((_2520 + 1.0) < _2518.x)
        {
            _2749 = true;
            break;
        }
        _2749 = false;
        break;
    }
    float _2980;
    if (_2749)
    {
        discard_state = true;
        _2980 = 0.0;
    }
    else
    {
        _2980 = cbInstanceData._m0[_2372].w;
    }
    SV_Target.x = _2524;
    SV_Target.y = _2525;
    SV_Target.z = _2526;
    SV_Target.w = _2980;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2372].w;
    discard_exit();
}


