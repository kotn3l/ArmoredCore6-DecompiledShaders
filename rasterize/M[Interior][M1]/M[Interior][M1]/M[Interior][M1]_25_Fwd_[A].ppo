#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1213;
float _3361;
float _3362;
float _3363;
float _3364;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _395 = (_391 * _385) + (_359 * cbMtdParam._m0[20u].y);
    float _396 = (_391 * _386) + (_360 * cbMtdParam._m0[20u].z);
    float _397 = _395 * cbMtdParam._m0[19u].x;
    float _398 = _396 * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    bool _416 = _394 > 0.0;
    float _418 = _416 ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = _399 + (-0.5);
    float _428 = _400 + (-0.5);
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_425 + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_428 + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _472 = (_458 - (_458 * _292)) * cbMtdParam._m0[9u].x;
    float _473 = (_459 - (_459 * _292)) * cbMtdParam._m0[9u].y;
    float _474 = cbMtdParam._m0[9u].z * (_460 - (_460 * _292));
    float _492 = _395 * cbMtdParam._m0[21u].x;
    float _493 = _396 * cbMtdParam._m0[20u].w;
    bool _494 = _492 > 0.0;
    float _499;
    if (_494)
    {
        _499 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _499 = frontier_phi_11_10_ladder;
    }
    bool _501 = _493 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _506 = frontier_phi_15_14_ladder;
    }
    float _509 = _416 ? (cbMtdParam._m0[16u].z / _394) : 5000.0;
    float _510 = isnan(_506) ? _499 : (isnan(_499) ? _506 : min(_499, _506));
    float _511 = isnan(_509) ? _510 : (isnan(_510) ? _509 : min(_510, _509));
    float _515 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _519 = ((_511 * _394) + _515) / _515;
    float _524 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _526 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _542 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_511 * _492)) / _519) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_511 * _493)) / _519) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _547 = _542.x * cbMtdParam._m0[10u].x;
    float _548 = _542.y * cbMtdParam._m0[10u].y;
    float _549 = _542.z * cbMtdParam._m0[10u].z;
    float _557;
    if (_494)
    {
        _557 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _557 = frontier_phi_19_18_ladder;
    }
    float _563;
    if (_501)
    {
        _563 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _563 = frontier_phi_23_22_ladder;
    }
    float _565 = isnan(_563) ? _557 : (isnan(_557) ? _563 : min(_557, _563));
    float _566 = isnan(_509) ? _565 : (isnan(_565) ? _509 : min(_565, _509));
    float _573 = ((_566 * _394) + _515) / _515;
    vec4 _587 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_566 * _492)) / _573) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_566 * _493)) / _573) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _589 = _587.w;
    float _591 = _589 - (_589 * _292);
    float _602 = 0.5 - (_292 * 0.5);
    float _612 = (((_472 - _305) + (_591 * ((_547 - _472) - (_547 * _292)))) * _602) + _305;
    float _613 = (((_473 - _307) + (_591 * ((_548 - _473) - (_548 * _292)))) * _602) + _307;
    float _614 = (((_474 - _309) + (_591 * ((_549 - _474) - (_549 * _292)))) * _602) + _309;
    vec4 _626 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _628 = _626.x;
    vec4 _640 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _644 = _640.z;
    float _647 = (_640.x * 2.0) + (-1.0);
    float _648 = (_640.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3403 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))));
    float _655 = _644 * _292;
    float _662 = (cbMtdParam._m0[15u].w * ((_331 - _655) + ((_644 - _331) * _292))) + _655;
    float _666 = (cbMtdParam._m0[16u].x * _359) + _647;
    float _667 = (cbMtdParam._m0[16u].x * _360) + _648;
    float _670 = fma(_654, _201, fma(_667, _208, _666 * _194));
    float _673 = fma(_654, _202, fma(_667, _209, _666 * _195));
    float _676 = fma(_654, _203, fma(_667, _210, _666 * _196));
    float _680 = inversesqrt(dot(vec3(_670, _673, _676), vec3(_670, _673, _676)));
    float _681 = _680 * _670;
    float _682 = _680 * _673;
    float _683 = _680 * _676;
    float _3414 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _684 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3436 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3447 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3458 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _688 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _704 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _708 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _709 = _265 * _708;
    float _710 = _266 * _708;
    float _711 = _267 * _708;
    vec4 _716 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _718 = _716.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _894 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _900 = (cbMatDynParam._m0[5u].x * _894) + cbMatDynParam._m0[5u].y;
        float _3469 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _905 = (cbMatDynParam._m0[5u].z * _894) + cbMatDynParam._m0[5u].w;
        float _3480 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) - _901)) + _901) < ((_718 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _731 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _732 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _751 = fma(_683, cbSceneParam._m0[5u].z, fma(_682, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _681));
    float _754 = fma(_683, cbSceneParam._m0[6u].z, fma(_682, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _681));
    float _757 = fma(_683, cbSceneParam._m0[7u].z, fma(_682, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _681));
    uint _770 = uint(roundEven(NORMAL.w)) * 13u;
    uint _772 = _770 + 9u;
    uint _773 = _772 + uint(cbMatDynParam._m0[0u].w);
    float _779 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_773].x;
    float _780 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_773].y;
    float _781 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_773].z;
    float _3491 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _3513 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _785 = 1.0 - _688;
    float _786 = _782 * _785;
    float _787 = _783 * _785;
    float _788 = _784 * _785;
    float _793 = (_782 + (-0.039999999105930328369140625)) * _688;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _688;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _688;
    float _796 = _793 + 0.039999999105930328369140625;
    float _798 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _731, cbSceneParam._m0[86u].y * _732));
    float _811 = _808.x * TEXCOORD.z;
    float _812 = dot(vec3(_681, _682, _683), vec3(_709, _710, _711));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _681) - _709;
    float _820 = (_815 * _682) - _710;
    float _821 = (_815 * _683) - _711;
    float _825 = abs(dot(vec3(_709, _710, _711), vec3(_681, _682, _683)));
    float _3524 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _827 = sqrt(_684);
    float _840 = exp2((_827 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_827 * 3.0));
    float _846 = (1.0 - _840) * ((_827 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _847 = _840 * _827;
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1212;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _939 = fma(_883, cbModelParam._m0[26u].z, fma(_879, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875));
        float _943 = fma(_883, cbModelParam._m0[27u].z, fma(_879, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875));
        float _947 = fma(_883, cbModelParam._m0[28u].z, fma(_879, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875));
        float _970 = _875 + _681;
        float _971 = _879 + _682;
        float _972 = _883 + _683;
        float _982 = fma(_972, cbModelParam._m0[26u].z, fma(_971, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970)) - _939;
        float _983 = fma(_972, cbModelParam._m0[27u].z, fma(_971, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970)) - _943;
        float _984 = fma(_972, cbModelParam._m0[28u].z, fma(_971, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970)) - _947;
        float _988 = inversesqrt(dot(vec3(_982, _983, _984), vec3(_982, _983, _984)));
        float _1001 = ((_988 * _982) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_939 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1002 = ((_988 * _983) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_943 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_988 * _984) / cbModelParam._m0[34u].z) + ((((((_947 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1020 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1001, _1002, _1003), 0.0);
        float _1040 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_1006.x + (-0.5));
        float _1042 = _1040 * (_1006.y + (-0.5));
        float _1043 = _1040 * (_1006.z + (-0.5));
        float _1050 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1013.x + (-0.5));
        float _1052 = _1050 * (_1013.y + (-0.5));
        float _1053 = _1050 * (_1013.z + (-0.5));
        float _1060 = exp2((_1020.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1020.x + (-0.5));
        float _1062 = _1060 * (_1020.y + (-0.5));
        float _1063 = _1060 * (_1020.z + (-0.5));
        float _1070 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1027.x + (-0.5));
        float _1072 = _1070 * (_1027.y + (-0.5));
        float _1073 = _1070 * (_1027.z + (-0.5));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = _1041 * 0.5;
        float _1078 = _1051 * 0.5;
        float _1079 = _1061 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1094 = (dot(vec3(_681, _682, _683), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1104 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3572 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_1106 + 1.0))) + _1111) * _1074;
        float _1121 = _1042 * 0.5;
        float _1122 = _1052 * 0.5;
        float _1123 = _1062 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_681, _682, _683), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3605 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1148 + 1.0))) + _1153) * _1075;
        float _1163 = _1043 * 0.5;
        float _1164 = _1053 * 0.5;
        float _1165 = _1063 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_681, _682, _683), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3638 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1190 + 1.0))) + _1195) * _1076;
        _1212 = _1043;
        _1214 = _1042;
        _1215 = _1041;
        _1216 = _1053;
        _1217 = _1052;
        _1218 = _1051;
        _1219 = _1063;
        _1220 = _1062;
        _1221 = _1061;
        _1222 = _1076;
        _1223 = _1075;
        _1224 = _1074;
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
    }
    else
    {
        _1212 = _1213;
        _1214 = _1213;
        _1215 = _1213;
        _1216 = _1213;
        _1217 = _1213;
        _1218 = _1213;
        _1219 = _1213;
        _1220 = _1213;
        _1221 = _1213;
        _1222 = _1213;
        _1223 = _1213;
        _1224 = _1213;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_883, cbModelParam._m0[30u].z, fma(_879, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _875));
        float _1260 = fma(_883, cbModelParam._m0[31u].z, fma(_879, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _875));
        float _1264 = fma(_883, cbModelParam._m0[32u].z, fma(_879, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _875));
        float _1287 = _875 + _681;
        float _1288 = _879 + _682;
        float _1289 = _883 + _683;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_681, _682, _683), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3701 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_681, _682, _683), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3734 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_681, _682, _683), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _3767 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1213;
        _1526 = _1213;
        _1527 = _1213;
        _1528 = _1213;
        _1529 = _1213;
        _1530 = _1213;
        _1531 = _1213;
        _1532 = _1213;
        _1533 = _1213;
        _1534 = _1213;
        _1535 = _1213;
        _1536 = _1213;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1225)) + _1225;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1226)) + _1226;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _819 * 0.5;
    float _1594 = _820 * 0.5;
    float _1595 = _821 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1212, _1216, _1219, _1222));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1214, _1217, _1220, _1223));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _684);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1710 = fma(_883, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _875)) + cbModelParam._m0[13u].w;
        float _1714 = fma(_883, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _875)) + cbModelParam._m0[14u].w;
        float _1718 = fma(_883, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _875)) + cbModelParam._m0[15u].w;
        float _1721 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1724 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1727 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1755;
        if (_1721 > 0.0)
        {
            _1755 = abs((1.0 - _1710) / _1721);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1710 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1755 = frontier_phi_41_39_ladder;
        }
        float _2113;
        if (_1724 > 0.0)
        {
            _2113 = abs((1.0 - _1714) / _1724);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1714 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2113 = frontier_phi_50_46_ladder;
        }
        float _2421;
        if (_1727 > 0.0)
        {
            _2421 = abs((1.0 - _1718) / _1727);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1718 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2421 = frontier_phi_64_57_ladder;
        }
        float _2423 = isnan(_2113) ? _1755 : (isnan(_1755) ? _2113 : min(_1755, _2113));
        float _2424 = isnan(_2421) ? _2423 : (isnan(_2423) ? _2421 : min(_2423, _2421));
        float _2428 = (_2424 * _1721) + _1710;
        float _2429 = (_2424 * _1724) + _1714;
        float _2430 = (_2424 * _1727) + _1718;
        float _2431 = _2424 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2431;
        float _2434 = _2431 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2430 > _2434) || ((_2430 < _2432) || ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 < _2432) || (_2428 > _2434))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2572 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2430, cbModelParam._m0[9u].z, fma(_2429, cbModelParam._m0[9u].y, _2428 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2430, cbModelParam._m0[10u].z, fma(_2429, cbModelParam._m0[10u].y, _2428 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2430, cbModelParam._m0[11u].z, fma(_2429, cbModelParam._m0[11u].y, _2428 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_40_64_ladder = _2572.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2572.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2572.x * cbModelParam._m0[1u].y;
        }
        _1743 = frontier_phi_40_64_ladder_2;
        _1745 = frontier_phi_40_64_ladder_1;
        _1747 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1662);
        _1743 = _1731.x * cbModelParam._m0[1u].y;
        _1745 = _1731.y * cbModelParam._m0[1u].y;
        _1747 = _1731.z * cbModelParam._m0[1u].y;
    }
    float _1751 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _684);
    float _1752 = isnan(_1751) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1751 : min(cbModelParam._m0[25u].w, _1751));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1804 = fma(_883, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _875)) + cbModelParam._m0[21u].w;
        float _1808 = fma(_883, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _875)) + cbModelParam._m0[22u].w;
        float _1812 = fma(_883, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _875)) + cbModelParam._m0[23u].w;
        float _1815 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1818 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1821 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _2118;
        if (_1815 > 0.0)
        {
            _2118 = abs((1.0 - _1804) / _1815);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1804 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2118 = frontier_phi_52_48_ladder;
        }
        float _2447;
        if (_1818 > 0.0)
        {
            _2447 = abs((1.0 - _1808) / _1818);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1808 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2447 = frontier_phi_66_59_ladder;
        }
        float _2637;
        if (_1821 > 0.0)
        {
            _2637 = abs((1.0 - _1812) / _1821);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1812 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2637 = frontier_phi_84_77_ladder;
        }
        float _2639 = isnan(_2447) ? _2118 : (isnan(_2118) ? _2447 : min(_2118, _2447));
        float _2640 = isnan(_2637) ? _2639 : (isnan(_2639) ? _2637 : min(_2639, _2637));
        float _2644 = (_2640 * _1815) + _1804;
        float _2645 = (_2640 * _1818) + _1808;
        float _2646 = (_2640 * _1821) + _1812;
        float _2647 = _2640 * 9.9999997473787516355514526367188e-05;
        float _2648 = (-1.0) - _2647;
        float _2650 = _2647 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2646 > _2650) || ((_2646 < _2648) || ((_2645 > _2650) || ((_2645 < _2648) || ((_2644 < _2648) || (_2644 > _2650))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2646, cbModelParam._m0[17u].z, fma(_2645, cbModelParam._m0[17u].y, _2644 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2646, cbModelParam._m0[18u].z, fma(_2645, cbModelParam._m0[18u].y, _2644 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2646, cbModelParam._m0[19u].z, fma(_2645, cbModelParam._m0[19u].y, _2644 * cbModelParam._m0[19u].x))), _1752);
            frontier_phi_49_84_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _1840 = frontier_phi_49_84_ladder_2;
        _1842 = frontier_phi_49_84_ladder_1;
        _1844 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1752);
        _1840 = _1824.x * cbModelParam._m0[1u].z;
        _1842 = _1824.y * cbModelParam._m0[1u].z;
        _1844 = _1824.z * cbModelParam._m0[1u].z;
    }
    float _1857 = (((_846 * _796) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1840 - _1743)) + _1743);
    float _1859 = (((_846 * _798) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1842 - _1745)) + _1745);
    float _1861 = (((_846 * _799) + _847) * _811) * ((cbModelParam._m0[1u].w * (_1844 - _1747)) + _1747);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1859, cbSceneParam._m0[89u].y, _1857 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1859, cbSceneParam._m0[90u].y, _1857 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1859, cbSceneParam._m0[91u].y, _1857 * cbSceneParam._m0[91u].x));
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_770 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1888 = _811 + (-1.0);
    float _1891 = (cbLight._m0[_1883].x * _1888) + 1.0;
    float _1892 = (cbLight._m0[_1883].y * _1888) + 1.0;
    uint _1893 = _1882 + 5u;
    float _1899 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1903 = _1882 + 4u;
    float _1909 = isnan(1.0) ? _1891 : (isnan(_1891) ? 1.0 : min(_1891, 1.0));
    uint _1913 = _1882 | 1u;
    float _1924 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_681, _682, _683));
    float _1927 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_681, _682, _683));
    float _3903 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _3914 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1932 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1934 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * 0.3183098733425140380859375;
    float _1941 = ((cbLight._m0[_1893].x * _1899) * _1934) + ((cbLight._m0[_1903].x * _1909) * _1932);
    float _1942 = ((_1899 * cbLight._m0[_1893].y) * _1934) + ((_1909 * cbLight._m0[_1903].y) * _1932);
    float _1943 = ((_1899 * cbLight._m0[_1893].z) * _1934) + ((_1909 * cbLight._m0[_1903].z) * _1932);
    uint _1945 = _1882 + 8u;
    float _1958 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _684) * 0.949999988079071044921875);
    float _1959 = _1958 * _1958;
    float _1960 = cbLight._m0[_1882].x + _709;
    float _1961 = cbLight._m0[_1882].y + _710;
    float _1962 = cbLight._m0[_1882].z + _711;
    float _1966 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
    float _1967 = _1966 * _1960;
    float _1968 = _1966 * _1961;
    float _1969 = _1966 * _1962;
    float _1970 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1882].xyz));
    float _3925 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _1974 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1975 = dot(vec3(_681, _682, _683), vec3(_1967, _1968, _1969));
    float _3947 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_1967, _1968, _1969));
    float _3958 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1959 * _1959;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1995 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
    float _1996 = 0.959999978542327880859375 - _793;
    float _1998 = 0.959999978542327880859375 - _794;
    float _1999 = 0.959999978542327880859375 - _795;
    float _2006 = 1.0 - _1959;
    float _2017 = (0.5 / (((_1974 * ((_1973 * _2006) + _1959)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2006) + _1959) * _1973))) * _1973;
    float _3969 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    uint _2030 = _1882 + 9u;
    float _2041 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1913].w)) * _684) * 0.949999988079071044921875);
    float _2042 = _2041 * _2041;
    float _2043 = cbLight._m0[_1913].x + _709;
    float _2044 = cbLight._m0[_1913].y + _710;
    float _2045 = cbLight._m0[_1913].z + _711;
    float _2049 = inversesqrt(dot(vec3(_2043, _2044, _2045), vec3(_2043, _2044, _2045)));
    float _2050 = _2049 * _2043;
    float _2051 = _2049 * _2044;
    float _2052 = _2049 * _2045;
    float _2053 = dot(vec3(_681, _682, _683), vec3(cbLight._m0[_1913].xyz));
    float _3980 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2056 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _2057 = dot(vec3(_681, _682, _683), vec3(_2050, _2051, _2052));
    float _3991 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _2061 = dot(vec3(cbLight._m0[_1913].xyz), vec3(_2050, _2051, _2052));
    float _4002 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2065 = _2042 * _2042;
    float _2069 = ((_2060 * _2060) * (_2065 + (-1.0))) + 1.0;
    float _2076 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
    float _2083 = 1.0 - _2042;
    float _2093 = (0.5 / (((_1974 * ((_2056 * _2083) + _2042)) + 9.9999999392252902907785028219223e-09) + (((_1974 * _2083) + _2042) * _2056))) * _2056;
    float _4013 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2095 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2065 / ((_2069 * _2069) * 3.141590118408203125));
    float _2105 = (((((_2076 * _1996) + _796) * cbLight._m0[_2030].x) * _2095) * _1899) + (((((_1995 * _1996) + _796) * cbLight._m0[_1945].x) * _2019) * _1909);
    float _2106 = (((((_2076 * _1998) + _798) * cbLight._m0[_2030].y) * _2095) * _1899) + (((((_1995 * _1998) + _798) * cbLight._m0[_1945].y) * _2019) * _1909);
    float _2107 = (((((_2076 * _1999) + _799) * cbLight._m0[_2030].z) * _2095) * _1899) + (((((_1995 * _1999) + _799) * cbLight._m0[_1945].z) * _2019) * _1909);
    float _2222;
    float _2224;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    if (_1880.y == 0u)
    {
        float _2162 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2163 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2162;
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2162;
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2162;
        uvec4 _2177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2178 = _2177.x;
        uint _2189 = uint((float(_2177.y) * floor(float(uint(cbSceneParam._m0[85u].y * _732) / _2178))) + floor(float(uint(cbSceneParam._m0[85u].x * _731) / _2178)));
        float _2199 = (log2(_2165 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2200 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        uint _2203 = uint(isnan(14.0) ? _2200 : (isnan(_2200) ? 14.0 : min(_2200, 14.0)));
        uvec4 _2208 = texelFetch(g_lightClusterGridBuffer, int(((_2203 << 2u) + (_2189 << 6u)) >> 2u));
        uint _2209 = _2208.x;
        uint _2210 = _2177.z;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((((1u << ((_2210 >> 4u) & 15u)) + 4294967295u) & _2209) == 0u) || ((_2210 & 240u) == 0u))
        {
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
        }
        else
        {
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            uint _2490 = 0u;
            uint _2499;
            bool _2500;
            for (;;)
            {
                _2499 = texelFetch(g_lightClassification, int((((_2203 << 5u) + (_2189 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                _2500 = _2499 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2500)
                {
                    frontier_phi_79_pred = _2489;
                    frontier_phi_79_pred_1 = _2488;
                    frontier_phi_79_pred_2 = _2487;
                    frontier_phi_79_pred_3 = _2486;
                    frontier_phi_79_pred_4 = _2485;
                    frontier_phi_79_pred_5 = _2484;
                }
                else
                {
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    uint _2686;
                    _2680 = _2484;
                    _2681 = _2485;
                    _2682 = _2486;
                    _2683 = _2487;
                    _2684 = _2488;
                    _2685 = _2489;
                    _2686 = _2499;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2690 = uint(findLSB(_2686)) + (_2490 << 5u);
                        uint _2687 = (_2686 + 4294967295u) & _2686;
                        uint _2692 = _2690 * 48u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2692)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2692 + 3u)).x));
                        uint _2712 = (_2690 * 48u) + 4u;
                        vec4 _2725 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 3u)).x));
                        uint _2731 = (_2690 * 48u) + 8u;
                        vec3 _2742 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2731)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2731 + 2u)).x));
                        float _2746 = _2706.x - _2163;
                        float _2747 = _2706.y - _2164;
                        float _2748 = _2706.z - _2165;
                        float _2749 = dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748));
                        float _2752 = inversesqrt(_2749);
                        float _2753 = _2752 * _2746;
                        float _2754 = _2752 * _2747;
                        float _2755 = _2752 * _2748;
                        float _2756 = dot(vec3(_751, _754, _757), vec3(_2753, _2754, _2755));
                        float _2761 = 1.0 - (_2749 * _2706.w);
                        float _4034 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2762 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2763 = sqrt(_2749) * _2725.w;
                        float _2766 = 1.39999997615814208984375 / (_2763 + 1.39999997615814208984375);
                        float _2767 = _2766 * _2766;
                        float _2770 = ((1.0 - _2767) * _2756) + _2767;
                        float _2773 = _2763 * _2763;
                        float _2777 = ((isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0))) * _2762) / ((_2773 * 0.699999988079071044921875) + 1.0);
                        float _2781 = (-0.0) - _2163;
                        float _2782 = (-0.0) - _2164;
                        float _2783 = (-0.0) - _2165;
                        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2798 = exp2(log2(1.0 / ((_2773 * 3.5) + 5.0)) * 0.25);
                        float _2799 = 1.0 - _827;
                        float _2806 = sqrt(1.0 - ((1.0 - (_2799 * _2799)) * (1.0 - (_2798 * _2798))));
                        float _2807 = _2806 * _2806;
                        float _2808 = _2807 * _2807;
                        float _2809 = _2788 + _2753;
                        float _2810 = _2789 + _2754;
                        float _2811 = _2790 + _2755;
                        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
                        float _2819 = dot(vec3(_751, _754, _757), vec3(_2788, _2789, _2790));
                        float _4050 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2822 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2823 = dot(vec3(_751, _754, _757), vec3(_2815 * _2809, _2815 * _2810, _2815 * _2811));
                        float _4061 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2826 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2830 = ((_2826 * _2826) * (_2808 + (-1.0))) + 1.0;
                        float _2831 = _2766 * _2807;
                        float _2832 = _2831 * _2831;
                        float _2835 = ((1.0 - _2832) * _2756) + _2832;
                        float _4072 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2836 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2837 = 1.0 - _2807;
                        float _2847 = (0.5 / (((_2836 * ((_2822 * _2837) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2836 * _2837) + _2807) * _2822))) * _2836;
                        float _4083 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2858 = (((_2808 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_2830 * _2830) * ((_2773 * 2.1991131305694580078125) + 3.141590118408203125))) * _2762;
                        _2584 = (_2777 * _2725.x) + _2683;
                        _2585 = (_2777 * _2725.y) + _2684;
                        _2586 = (_2777 * _2725.z) + _2685;
                        _2581 = (_2858 * _2742.x) + _2680;
                        _2582 = (_2858 * _2742.y) + _2681;
                        _2583 = (_2858 * _2742.z) + _2682;
                        if (_2687 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2680 = _2581;
                            _2681 = _2582;
                            _2682 = _2583;
                            _2683 = _2584;
                            _2684 = _2585;
                            _2685 = _2586;
                            _2686 = _2687;
                        }
                    }
                    frontier_phi_79_pred = _2586;
                    frontier_phi_79_pred_1 = _2585;
                    frontier_phi_79_pred_2 = _2584;
                    frontier_phi_79_pred_3 = _2583;
                    frontier_phi_79_pred_4 = _2582;
                    frontier_phi_79_pred_5 = _2581;
                }
                _2311 = frontier_phi_79_pred;
                _2309 = frontier_phi_79_pred_1;
                _2307 = frontier_phi_79_pred_2;
                _2305 = frontier_phi_79_pred_3;
                _2303 = frontier_phi_79_pred_4;
                _2301 = frontier_phi_79_pred_5;
                uint _2491 = _2490 + 1u;
                if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2484 = _2301;
                    _2485 = _2303;
                    _2486 = _2305;
                    _2487 = _2307;
                    _2488 = _2309;
                    _2489 = _2311;
                    _2490 = _2491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
        }
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.z;
        uint _2317 = (_2315 >> 8u) & 15u;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        if (((4294967295u << _2317) & _2209) == 0u)
        {
            _2452 = _2300;
            _2454 = _2302;
            _2456 = _2304;
            _2458 = _2306;
            _2460 = _2308;
            _2462 = _2310;
        }
        else
        {
            float _2477 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
            float _2478 = _2477 * _2163;
            float _2479 = _2477 * _2164;
            float _2480 = _2477 * _2165;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2317 < ((_2315 >> 12u) & 15u))
            {
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2663 = _2300;
                float _2664 = _2302;
                float _2665 = _2304;
                float _2666 = _2306;
                float _2667 = _2308;
                float _2668 = _2310;
                uint _2669 = _2317;
                uint _2678;
                bool _2679;
                for (;;)
                {
                    _2678 = texelFetch(g_lightClassification, int((((_2203 << 5u) + (_2189 << 9u)) + (_2669 << 2u)) >> 2u)).x;
                    _2679 = _2678 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2679)
                    {
                        frontier_phi_93_pred = _2667;
                        frontier_phi_93_pred_1 = _2666;
                        frontier_phi_93_pred_2 = _2665;
                        frontier_phi_93_pred_3 = _2664;
                        frontier_phi_93_pred_4 = _2663;
                        frontier_phi_93_pred_5 = _2668;
                    }
                    else
                    {
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2906 = _2663;
                        float _2907 = _2664;
                        float _2908 = _2665;
                        float _2909 = _2666;
                        float _2910 = _2667;
                        float _2911 = _2668;
                        uint _2912 = _2678;
                        uint _2913;
                        vec4 _2938;
                        float _2939;
                        vec4 _2954;
                        vec3 _2966;
                        vec4 _2981;
                        vec4 _2996;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2923 = ((_2669 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2912));
                            _2913 = (_2912 + 4294967295u) & _2912;
                            uint _2925 = _2923 * 40u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.w;
                            uint _2941 = (_2923 * 40u) + 4u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2923 * 40u) + 8u;
                            _2966 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x));
                            uint _2968 = (_2923 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2923 * 40u) + 20u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2923 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2923 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_2165, _3030.z, fma(_2164, _3030.y, _3030.x * _2163)) + _3030.w;
                            _3043 = !((fma(_2165, _3011.z, fma(_2164, _3011.y, _3011.x * _2163)) + _3011.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2938.x - _2163;
                                float _3071 = _2938.y - _2164;
                                float _3072 = _2938.z - _2165;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2939 * _2939));
                                float _4094 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3088 = sqrt(_3073) * _2954.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_751, _754, _757))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_2165, _2981.z, fma(_2164, _2981.y, _2981.x * _2163)) + _2981.w) / _3042;
                                float _3102 = (fma(_2165, _2996.z, fma(_2164, _2996.y, _2996.x * _2163)) + _2996.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4110 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _827;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2478;
                                float _3132 = _3078 - _2479;
                                float _3133 = _3079 - _2480;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_751, _754, _757), vec3((-0.0) - _2478, (-0.0) - _2479, (-0.0) - _2480));
                                float _4121 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3145 = dot(vec3(_751, _754, _757), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4132 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_751, _754, _757), vec3(_3077, _3078, _3079))) + _3154;
                                float _4143 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4154 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3108 * _2954.z;
                                frontier_phi_99_pred_1 = _3108 * _2954.y;
                                frontier_phi_99_pred_2 = _3108 * _2954.x;
                                frontier_phi_99_pred_3 = _3182 * _2966.z;
                                frontier_phi_99_pred_4 = _3182 * _2966.y;
                                frontier_phi_99_pred_5 = _3182 * _2966.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_99_pred;
                            _3190 = frontier_phi_99_pred_1;
                            _3189 = frontier_phi_99_pred_2;
                            _3188 = frontier_phi_99_pred_3;
                            _3187 = frontier_phi_99_pred_4;
                            _3186 = frontier_phi_99_pred_5;
                            _2896 = _3189 + _2909;
                            _2897 = _3190 + _2910;
                            _2898 = _3191 + _2911;
                            _2893 = _3186 + _2906;
                            _2894 = _3187 + _2907;
                            _2895 = _3188 + _2908;
                            if (_2913 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2913;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2897;
                        frontier_phi_93_pred_1 = _2896;
                        frontier_phi_93_pred_2 = _2895;
                        frontier_phi_93_pred_3 = _2894;
                        frontier_phi_93_pred_4 = _2893;
                        frontier_phi_93_pred_5 = _2898;
                    }
                    _2461 = frontier_phi_93_pred;
                    _2459 = frontier_phi_93_pred_1;
                    _2457 = frontier_phi_93_pred_2;
                    _2455 = frontier_phi_93_pred_3;
                    _2453 = frontier_phi_93_pred_4;
                    _2463 = frontier_phi_93_pred_5;
                    uint _2670 = _2669 + 1u;
                    if (_2670 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2663 = _2453;
                        _2664 = _2455;
                        _2665 = _2457;
                        _2666 = _2459;
                        _2667 = _2461;
                        _2668 = _2463;
                        _2669 = _2670;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2463;
                frontier_phi_68_69_ladder_1 = _2461;
                frontier_phi_68_69_ladder_2 = _2459;
                frontier_phi_68_69_ladder_3 = _2457;
                frontier_phi_68_69_ladder_4 = _2453;
                frontier_phi_68_69_ladder_5 = _2455;
            }
            else
            {
                frontier_phi_68_69_ladder = _2310;
                frontier_phi_68_69_ladder_1 = _2308;
                frontier_phi_68_69_ladder_2 = _2306;
                frontier_phi_68_69_ladder_3 = _2304;
                frontier_phi_68_69_ladder_4 = _2300;
                frontier_phi_68_69_ladder_5 = _2302;
            }
            _2452 = frontier_phi_68_69_ladder_4;
            _2454 = frontier_phi_68_69_ladder_5;
            _2456 = frontier_phi_68_69_ladder_3;
            _2458 = frontier_phi_68_69_ladder_2;
            _2460 = frontier_phi_68_69_ladder_1;
            _2462 = frontier_phi_68_69_ladder;
        }
        float _2467 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2222 = (_2467 * _2458) + _1941;
        _2224 = (_2467 * _2460) + _1942;
        _2226 = (_2467 * _2462) + _1943;
        _2228 = ((_2452 * _796) * _2467) + _2105;
        _2230 = ((_2454 * _798) * _2467) + _2106;
        _2232 = ((_2456 * _799) * _2467) + _2107;
    }
    else
    {
        _2222 = _1941;
        _2224 = _1942;
        _2226 = _1943;
        _2228 = _2105;
        _2230 = _2106;
        _2232 = _2107;
    }
    float _4170 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4181 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4192 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _2249 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2222 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _811))) + ((_2228 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2250 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2224 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _811))) + ((_2230 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2251 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2226 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _811))) + ((_2232 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1651)) * cbPerFrame._m0[3u].x);
    float _2252 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2253 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2254 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    uint _2255 = _770 + 6u;
    float _2263 = _731 / cbSceneParam._m0[86u].x;
    float _2264 = _732 / cbSceneParam._m0[86u].y;
    vec4 _2278 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2263, _2264, (log2((isnan(cbSceneParam._m0[77u].w) ? _704 : (isnan(_704) ? cbSceneParam._m0[77u].w : min(_704, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2280 = _2278.x;
    float _2281 = _2278.y;
    float _2282 = _2278.z;
    float _2283 = _2278.w;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_704 > cbSceneParam._m0[78u].w)
    {
        float _2325 = isnan(_704) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _704 : min(cbSceneParam._m0[80u].w, _704));
        float _2326 = _2325 / _704;
        float _2337 = _2326 * _265;
        float _2338 = _266 * _2326;
        float _2339 = (-0.0) - _2338;
        float _2340 = _2326 * _267;
        float _2342 = (cbSceneParam._m0[77u].w * _2339) / _2325;
        float _2343 = _2342 + cbSceneParam._m0[79u].w;
        float _2344 = cbSceneParam._m0[79u].w - _2338;
        float _2350 = sqrt(((_2337 * _2337) + (_2338 * _2338)) + (_2340 * _2340));
        float _2353 = (1.0 - (cbSceneParam._m0[77u].w / _2325)) * _2350;
        float _2359 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2361 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2339 - _2342) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2343 > 0.0) ? exp2(_2359 * _2343) : (2.0 - exp2(_2361 * _2343))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2353;
        }
        else
        {
            float _2513 = 1.0 / cbSceneParam._m0[80u].x;
            float _2514 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : max(_2343, _2344));
            float _2515 = isnan(_2344) ? _2343 : (isnan(_2343) ? _2344 : min(_2343, _2344));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            _2594 = ((abs(_2350 / _2339) * cbSceneParam._m0[80u].y) * ((((_2524 - _2525) * 2.0) - ((exp2(_2359 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0)))) - exp2(_2359 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))))) * _2513)) - ((exp2(_2361 * _2524) - exp2(_2361 * _2525)) * _2513))) + (_2353 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2263, _2264, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2283);
        _2363 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2280;
        _2365 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2281;
        _2367 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2282;
        _2369 = _2605 * _2283;
    }
    else
    {
        _2363 = _2280;
        _2365 = _2281;
        _2367 = _2282;
        _2369 = _2283;
    }
    bool _2632;
    vec4 _2379;
    vec4 _2401;
    float _2403;
    float _2407;
    float _2408;
    float _2409;
    float _2410;
    bool _2420;
    for (;;)
    {
        _2379 = cbMatDynParam._m0[0u];
        float _2381 = roundEven(_2379.y);
        bool _2382 = _2381 == 3.0;
        float _2383 = log2(_2369);
        float _2390 = exp2(_2383 * cbSceneParam._m0[78u].x) * _2252;
        float _2391 = exp2(_2383 * cbSceneParam._m0[78u].y) * _2253;
        float _2392 = exp2(_2383 * cbSceneParam._m0[78u].z) * _2254;
        float _2399 = _718 + (-0.5);
        _2401 = cbMtdParam._m0[1u];
        _2403 = _2401.y * _2399;
        float _2406 = (_2381 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2407 = _2406 * (_2382 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2363)));
        _2408 = _2406 * (_2382 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2365)));
        _2409 = _2406 * (_2382 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2367)));
        _2410 = _2399 * 0.999000012874603271484375;
        _2420 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2420)
        {
            if ((cbInstanceData._m0[_770 + 7u].x + _2410) < 0.5)
            {
                _2632 = true;
                break;
            }
        }
        uint _2548 = _772 + uint(_2379.w);
        if ((cbInstanceData._m0[_2548].w < 1.0) && ((cbInstanceData._m0[_2548].w + _2410) < 0.5))
        {
            _2632 = true;
            break;
        }
        if ((_2403 + 1.0) < _2401.x)
        {
            _2632 = true;
            break;
        }
        _2632 = false;
        break;
    }
    float _2863;
    if (_2632)
    {
        discard_state = true;
        _2863 = 0.0;
    }
    else
    {
        _2863 = cbInstanceData._m0[_2255].w;
    }
    SV_Target.x = _2407;
    SV_Target.y = _2408;
    SV_Target.z = _2409;
    SV_Target.w = _2863;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2255].w;
    discard_exit();
}


