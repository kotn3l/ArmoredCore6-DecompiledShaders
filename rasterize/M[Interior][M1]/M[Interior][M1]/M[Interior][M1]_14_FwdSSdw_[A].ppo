#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1037;
float _3187;
float _3188;
float _3189;
float _3190;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_361 + (-0.5)) + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _438 = 0.5 - (_290 * 0.5);
    float _445 = ((((_420 - (_420 * _290)) * cbMtdParam._m0[9u].x) - _303) * _438) + _303;
    float _446 = ((((_421 - (_421 * _290)) * cbMtdParam._m0[9u].y) - _305) * _438) + _305;
    float _447 = (((cbMtdParam._m0[9u].z * (_422 - (_422 * _290))) - _307) * _438) + _307;
    vec4 _459 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _461 = _459.x;
    vec4 _473 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _481 = (_473.x * 2.0) + (-1.0);
    float _483 = (_473.y * 2.0) + (-1.0);
    float _484 = dot(vec2(_481, _483), vec2(_481, _483));
    float _3209 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _489 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    float _490 = _473.z * _290;
    float _493 = fma(_489, _199, fma(_483, _206, _481 * _192));
    float _496 = fma(_489, _200, fma(_483, _207, _481 * _193));
    float _499 = fma(_489, _201, fma(_483, _208, _481 * _194));
    float _503 = inversesqrt(dot(vec3(_493, _496, _499), vec3(_493, _496, _499)));
    float _504 = _503 * _493;
    float _505 = _503 * _496;
    float _506 = _503 * _499;
    float _3220 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _507 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3242 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3253 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3264 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _511 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
    float _527 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _531 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _532 = _263 * _531;
    float _533 = _264 * _531;
    float _534 = _265 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _718 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _724 = (cbMatDynParam._m0[5u].x * _718) + cbMatDynParam._m0[5u].y;
        float _3275 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _729 = (cbMatDynParam._m0[5u].z * _718) + cbMatDynParam._m0[5u].w;
        float _3286 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) - _725)) + _725) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _575 = fma(_506, cbSceneParam._m0[5u].z, fma(_505, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _504));
    float _578 = fma(_506, cbSceneParam._m0[6u].z, fma(_505, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _504));
    float _581 = fma(_506, cbSceneParam._m0[7u].z, fma(_505, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _504));
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _594 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3297 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
    float _609 = 1.0 - _511;
    float _610 = _606 * _609;
    float _611 = _607 * _609;
    float _612 = _608 * _609;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _511;
    float _618 = (_607 + (-0.039999999105930328369140625)) * _511;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _511;
    float _620 = _617 + 0.039999999105930328369140625;
    float _622 = _618 + 0.039999999105930328369140625;
    float _623 = _619 + 0.039999999105930328369140625;
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = dot(vec3(_504, _505, _506), vec3(_532, _533, _534));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _504) - _532;
    float _644 = (_639 * _505) - _533;
    float _645 = (_639 * _506) - _534;
    float _649 = abs(dot(vec3(_532, _533, _534), vec3(_504, _505, _506)));
    float _3330 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_507);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _670 = (1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _671 = _664 * _651;
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _767 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _771 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _794 = _699 + _504;
        float _795 = _703 + _505;
        float _796 = _707 + _506;
        float _806 = fma(_796, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794)) - _763;
        float _807 = fma(_796, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794)) - _767;
        float _808 = fma(_796, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794)) - _771;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _864 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_830.x + (-0.5));
        float _866 = _864 * (_830.y + (-0.5));
        float _867 = _864 * (_830.z + (-0.5));
        float _874 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_837.x + (-0.5));
        float _876 = _874 * (_837.y + (-0.5));
        float _877 = _874 * (_837.z + (-0.5));
        float _884 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_844.x + (-0.5));
        float _886 = _884 * (_844.y + (-0.5));
        float _887 = _884 * (_844.z + (-0.5));
        float _894 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_851.x + (-0.5));
        float _896 = _894 * (_851.y + (-0.5));
        float _897 = _894 * (_851.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _918 = (dot(vec3(_504, _505, _506), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _928 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3378 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_930 + 1.0))) + _935) * _898;
        float _945 = _866 * 0.5;
        float _946 = _876 * 0.5;
        float _947 = _886 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_504, _505, _506), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3411 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_972 + 1.0))) + _977) * _899;
        float _987 = _867 * 0.5;
        float _988 = _877 * 0.5;
        float _989 = _887 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_504, _505, _506), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3444 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1014 + 1.0))) + _1019) * _900;
        _1036 = _867;
        _1038 = _866;
        _1039 = _865;
        _1040 = _877;
        _1041 = _876;
        _1042 = _875;
        _1043 = _887;
        _1044 = _886;
        _1045 = _885;
        _1046 = _900;
        _1047 = _899;
        _1048 = _898;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1080 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1084 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1088 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1111 = _699 + _504;
        float _1112 = _703 + _505;
        float _1113 = _707 + _506;
        float _1123 = fma(_1113, cbModelParam._m0[30u].z, fma(_1112, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1111)) - _1080;
        float _1124 = fma(_1113, cbModelParam._m0[31u].z, fma(_1112, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1111)) - _1084;
        float _1125 = fma(_1113, cbModelParam._m0[32u].z, fma(_1112, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1111)) - _1088;
        float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
        float _1142 = ((_1129 * _1123) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1080 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1129 * _1124) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1084 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1129 * _1125) / cbModelParam._m0[35u].z) + ((((((_1088 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1142, _1143, _1144), 0.0);
        float _1179 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1146.x + (-0.5));
        float _1181 = _1179 * (_1146.y + (-0.5));
        float _1182 = _1179 * (_1146.z + (-0.5));
        float _1189 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1153.x + (-0.5));
        float _1191 = _1189 * (_1153.y + (-0.5));
        float _1192 = _1189 * (_1153.z + (-0.5));
        float _1199 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1160.x + (-0.5));
        float _1201 = _1199 * (_1160.y + (-0.5));
        float _1202 = _1199 * (_1160.z + (-0.5));
        float _1209 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1167.x + (-0.5));
        float _1211 = _1209 * (_1167.y + (-0.5));
        float _1212 = _1209 * (_1167.z + (-0.5));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = _1180 * 0.5;
        float _1217 = _1190 * 0.5;
        float _1218 = _1200 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_504, _505, _506), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3507 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1243 + 1.0))) + _1248) * _1213;
        float _1258 = _1181 * 0.5;
        float _1259 = _1191 * 0.5;
        float _1260 = _1201 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_504, _505, _506), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3540 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1285 + 1.0))) + _1290) * _1214;
        float _1300 = _1182 * 0.5;
        float _1301 = _1192 * 0.5;
        float _1302 = _1202 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_504, _505, _506), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3573 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1327 + 1.0))) + _1332) * _1215;
        _1349 = _1182;
        _1350 = _1181;
        _1351 = _1180;
        _1352 = _1192;
        _1353 = _1191;
        _1354 = _1190;
        _1355 = _1202;
        _1356 = _1201;
        _1357 = _1200;
        _1358 = _1215;
        _1359 = _1214;
        _1360 = _1213;
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
        _1363 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
    }
    else
    {
        _1349 = _1037;
        _1350 = _1037;
        _1351 = _1037;
        _1352 = _1037;
        _1353 = _1037;
        _1354 = _1037;
        _1355 = _1037;
        _1356 = _1037;
        _1357 = _1037;
        _1358 = _1037;
        _1359 = _1037;
        _1360 = _1037;
        _1361 = 0.0;
        _1362 = 0.0;
        _1363 = 0.0;
    }
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1050)) + _1050;
    float _1375 = (cbModelParam._m0[1u].x * (_1363 - _1051)) + _1051;
    float _1396 = fma(_1375, cbSceneParam._m0[89u].z, fma(_1374, cbSceneParam._m0[89u].y, _1373 * cbSceneParam._m0[89u].x));
    float _1399 = fma(_1375, cbSceneParam._m0[90u].z, fma(_1374, cbSceneParam._m0[90u].y, _1373 * cbSceneParam._m0[90u].x));
    float _1402 = fma(_1375, cbSceneParam._m0[91u].z, fma(_1374, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1373));
    float _1417 = _643 * 0.5;
    float _1418 = _644 * 0.5;
    float _1419 = _645 * 0.5;
    float _1420 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1351, _1354, _1357, _1360));
    float _1423 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1426 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1460;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1433 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1437 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1441 = dot(vec4(_1417, _1418, _1419, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1448 = dot(vec4(cbModelParam._m0[39u]), vec4(_1417, _1418, _1419, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1471;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1462 = dot(vec4(cbModelParam._m0[40u]), vec4(_1417, _1418, _1419, 1.0));
        _1471 = dot(vec3(isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1462) ? 0.0 : (isnan(0.0) ? _1462 : max(0.0, _1462))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1471 = 1.0;
    }
    float _1475 = (_1471 * cbModelParam._m0[1u].x) + (_1460 * (1.0 - cbModelParam._m0[1u].x));
    float _1485 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _507);
    float _1486 = isnan(_1485) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1485 : min(cbModelParam._m0[25u].z, _1485));
    float _1567;
    float _1569;
    float _1571;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1534 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1538 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1542 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1545 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1548 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1551 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1579;
        if (_1545 > 0.0)
        {
            _1579 = abs((1.0 - _1534) / _1545);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1534 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1579 = frontier_phi_25_23_ladder;
        }
        float _1962;
        if (_1548 > 0.0)
        {
            _1962 = abs((1.0 - _1538) / _1548);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1538 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1962 = frontier_phi_34_30_ladder;
        }
        float _2270;
        if (_1551 > 0.0)
        {
            _2270 = abs((1.0 - _1542) / _1551);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1542 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2270 = frontier_phi_48_41_ladder;
        }
        float _2272 = isnan(_1962) ? _1579 : (isnan(_1579) ? _1962 : min(_1579, _1962));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1545) + _1534;
        float _2278 = (_2273 * _1548) + _1538;
        float _2279 = (_2273 * _1551) + _1542;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2281 = (-1.0) - _2280;
        float _2283 = _2280 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2279 > _2283) || ((_2279 < _2281) || ((_2278 > _2283) || ((_2278 < _2281) || ((_2277 < _2281) || (_2277 > _2283))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2421 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1486);
            frontier_phi_24_48_ladder = _2421.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2421.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2421.x * cbModelParam._m0[1u].y;
        }
        _1567 = frontier_phi_24_48_ladder_2;
        _1569 = frontier_phi_24_48_ladder_1;
        _1571 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1555 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1486);
        _1567 = _1555.x * cbModelParam._m0[1u].y;
        _1569 = _1555.y * cbModelParam._m0[1u].y;
        _1571 = _1555.z * cbModelParam._m0[1u].y;
    }
    float _1575 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _507);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1575 : min(cbModelParam._m0[25u].w, _1575));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1643 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1646 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1967;
        if (_1640 > 0.0)
        {
            _1967 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1967 = frontier_phi_36_32_ladder;
        }
        float _2296;
        if (_1643 > 0.0)
        {
            _2296 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2296 = frontier_phi_50_43_ladder;
        }
        float _2486;
        if (_1646 > 0.0)
        {
            _2486 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2486 = frontier_phi_68_61_ladder;
        }
        float _2488 = isnan(_2296) ? _1967 : (isnan(_1967) ? _2296 : min(_1967, _2296));
        float _2489 = isnan(_2486) ? _2488 : (isnan(_2488) ? _2486 : min(_2488, _2486));
        float _2493 = (_2489 * _1640) + _1629;
        float _2494 = (_2489 * _1643) + _1633;
        float _2495 = (_2489 * _1646) + _1637;
        float _2496 = _2489 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2496;
        float _2499 = _2496 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2495 > _2499) || ((_2495 < _2497) || ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 < _2497) || (_2493 > _2499))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2495, cbModelParam._m0[17u].z, fma(_2494, cbModelParam._m0[17u].y, _2493 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2495, cbModelParam._m0[18u].z, fma(_2494, cbModelParam._m0[18u].y, _2493 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2495, cbModelParam._m0[19u].z, fma(_2494, cbModelParam._m0[19u].y, _2493 * cbModelParam._m0[19u].x))), _1576);
            frontier_phi_33_68_ladder = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_33_68_ladder_2;
        _1667 = frontier_phi_33_68_ladder;
        _1669 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1576);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1682 = (((_670 * _620) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1665 - _1567)) + _1567);
    float _1684 = (((_670 * _622) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1667 - _1569)) + _1569);
    float _1686 = (((_670 * _623) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1669 - _1571)) + _1571);
    float _1689 = fma(_1686, cbSceneParam._m0[89u].z, fma(_1684, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1686, cbSceneParam._m0[90u].z, fma(_1684, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1686, cbSceneParam._m0[91u].z, fma(_1684, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    vec4 _1703 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_554, _555));
    float _1705 = _1703.w;
    float _1717 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1705);
    float _1718 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1705);
    float _1719 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1705);
    uvec4 _1723 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1725 = _1723.x * 14u;
    uint _1726 = _1725 + 13u;
    float _1731 = _635 + (-1.0);
    float _1734 = (cbLight._m0[_1726].x * _1731) + 1.0;
    float _1735 = (cbLight._m0[_1726].y * _1731) + 1.0;
    uint _1736 = _1725 + 5u;
    float _1742 = isnan(1.0) ? _1735 : (isnan(_1735) ? 1.0 : min(_1735, 1.0));
    uint _1746 = _1725 + 4u;
    float _1755 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1759 = _1725 | 1u;
    float _1770 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_504, _505, _506));
    float _1773 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_504, _505, _506));
    float _3709 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _3720 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1778 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1780 = (isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * 0.3183098733425140380859375;
    float _1787 = ((cbLight._m0[_1736].x * _1742) * _1780) + (((cbLight._m0[_1746].x * _1717) * _1755) * _1778);
    float _1788 = ((_1742 * cbLight._m0[_1736].y) * _1780) + (((cbLight._m0[_1746].y * _1718) * _1755) * _1778);
    float _1789 = ((_1742 * cbLight._m0[_1736].z) * _1780) + (((cbLight._m0[_1746].z * _1719) * _1755) * _1778);
    uint _1791 = _1725 + 8u;
    float _1804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _507) * 0.949999988079071044921875);
    float _1805 = _1804 * _1804;
    float _1806 = cbLight._m0[_1725].x + _532;
    float _1807 = cbLight._m0[_1725].y + _533;
    float _1808 = cbLight._m0[_1725].z + _534;
    float _1812 = inversesqrt(dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808)));
    float _1813 = _1812 * _1806;
    float _1814 = _1812 * _1807;
    float _1815 = _1812 * _1808;
    float _1816 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1725].xyz));
    float _3731 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _3742 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1820 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1821 = dot(vec3(_504, _505, _506), vec3(_1813, _1814, _1815));
    float _3753 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1813, _1814, _1815));
    float _3764 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1805 * _1805;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1841 = exp2(log2(1.0 - (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0)))) * 5.0);
    float _1842 = 0.959999978542327880859375 - _617;
    float _1844 = 0.959999978542327880859375 - _618;
    float _1845 = 0.959999978542327880859375 - _619;
    float _1852 = 1.0 - _1805;
    float _1863 = (0.5 / (((_1820 * ((_1819 * _1852) + _1805)) + 9.9999999392252902907785028219223e-09) + (((_1820 * _1852) + _1805) * _1819))) * _1819;
    float _3775 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    uint _1879 = _1725 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _507) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1759].x + _532;
    float _1893 = cbLight._m0[_1759].y + _533;
    float _1894 = cbLight._m0[_1759].z + _534;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_504, _505, _506), vec3(cbLight._m0[_1759].xyz));
    float _3786 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1906 = dot(vec3(_504, _505, _506), vec3(_1899, _1900, _1901));
    float _3797 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1899, _1900, _1901));
    float _3808 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0)))) * 5.0);
    float _1932 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1820 * ((_1905 * _1932) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1820 * _1932) + _1891) * _1905))) * _1905;
    float _3819 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1954 = (((((_1925 * _1842) + _620) * cbLight._m0[_1879].x) * _1944) * _1742) + ((((cbLight._m0[_1791].x * _1717) * ((_1841 * _1842) + _620)) * _1865) * _1755);
    float _1955 = (((((_1925 * _1844) + _622) * cbLight._m0[_1879].y) * _1944) * _1742) + ((((cbLight._m0[_1791].y * _1718) * ((_1841 * _1844) + _622)) * _1865) * _1755);
    float _1956 = (((((_1925 * _1845) + _623) * cbLight._m0[_1879].z) * _1944) * _1742) + ((((cbLight._m0[_1791].z * _1719) * ((_1841 * _1845) + _623)) * _1865) * _1755);
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    if (_1723.y == 0u)
    {
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2011;
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2011;
        float _2014 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2011;
        uvec4 _2026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2027 = _2026.x;
        uint _2038 = uint((float(_2026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2027))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2027)));
        float _2048 = (log2(_2014 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2049 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        uint _2052 = uint(isnan(14.0) ? _2049 : (isnan(_2049) ? 14.0 : min(_2049, 14.0)));
        uvec4 _2057 = texelFetch(g_lightClusterGridBuffer, int(((_2052 << 2u) + (_2038 << 6u)) >> 2u));
        uint _2058 = _2057.x;
        uint _2059 = _2026.z;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        if (((((1u << ((_2059 >> 4u) & 15u)) + 4294967295u) & _2058) == 0u) || ((_2059 & 240u) == 0u))
        {
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
        }
        else
        {
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2333 = 0.0;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            uint _2339 = 0u;
            uint _2348;
            bool _2349;
            for (;;)
            {
                _2348 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2339 << 2u)) >> 2u)).x;
                _2349 = _2348 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2349)
                {
                    frontier_phi_63_pred = _2335;
                    frontier_phi_63_pred_1 = _2338;
                    frontier_phi_63_pred_2 = _2337;
                    frontier_phi_63_pred_3 = _2336;
                    frontier_phi_63_pred_4 = _2334;
                    frontier_phi_63_pred_5 = _2333;
                }
                else
                {
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    uint _2535;
                    _2529 = _2333;
                    _2530 = _2334;
                    _2531 = _2335;
                    _2532 = _2336;
                    _2533 = _2337;
                    _2534 = _2338;
                    _2535 = _2348;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    for (;;)
                    {
                        uint _2539 = uint(findLSB(_2535)) + (_2339 << 5u);
                        uint _2536 = (_2535 + 4294967295u) & _2535;
                        uint _2541 = _2539 * 48u;
                        vec4 _2555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2541)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 3u)).x));
                        uint _2561 = (_2539 * 48u) + 4u;
                        vec4 _2574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2561)).x, texelFetch(g_PointLightRenderingBuffer, int(_2561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2561 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2561 + 3u)).x));
                        uint _2580 = (_2539 * 48u) + 8u;
                        vec3 _2591 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2580)).x, texelFetch(g_PointLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2580 + 2u)).x));
                        float _2595 = _2555.x - _2012;
                        float _2596 = _2555.y - _2013;
                        float _2597 = _2555.z - _2014;
                        float _2598 = dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597));
                        float _2601 = inversesqrt(_2598);
                        float _2602 = _2601 * _2595;
                        float _2603 = _2601 * _2596;
                        float _2604 = _2601 * _2597;
                        float _2605 = dot(vec3(_575, _578, _581), vec3(_2602, _2603, _2604));
                        float _2610 = 1.0 - (_2598 * _2555.w);
                        float _3840 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                        float _2611 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2612 = sqrt(_2598) * _2574.w;
                        float _2615 = 1.39999997615814208984375 / (_2612 + 1.39999997615814208984375);
                        float _2616 = _2615 * _2615;
                        float _2619 = ((1.0 - _2616) * _2605) + _2616;
                        float _2622 = _2612 * _2612;
                        float _2626 = ((isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0))) * _2611) / ((_2622 * 0.699999988079071044921875) + 1.0);
                        float _2630 = (-0.0) - _2012;
                        float _2631 = (-0.0) - _2013;
                        float _2632 = (-0.0) - _2014;
                        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
                        float _2637 = _2636 * _2630;
                        float _2638 = _2636 * _2631;
                        float _2639 = _2636 * _2632;
                        float _2647 = exp2(log2(1.0 / ((_2622 * 3.5) + 5.0)) * 0.25);
                        float _2648 = 1.0 - _651;
                        float _2655 = sqrt(1.0 - ((1.0 - (_2648 * _2648)) * (1.0 - (_2647 * _2647))));
                        float _2656 = _2655 * _2655;
                        float _2657 = _2656 * _2656;
                        float _2658 = _2637 + _2602;
                        float _2659 = _2638 + _2603;
                        float _2660 = _2639 + _2604;
                        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
                        float _2668 = dot(vec3(_575, _578, _581), vec3(_2637, _2638, _2639));
                        float _3856 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2671 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2672 = dot(vec3(_575, _578, _581), vec3(_2664 * _2658, _2664 * _2659, _2664 * _2660));
                        float _3867 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2675 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2679 = ((_2675 * _2675) * (_2657 + (-1.0))) + 1.0;
                        float _2680 = _2615 * _2656;
                        float _2681 = _2680 * _2680;
                        float _2684 = ((1.0 - _2681) * _2605) + _2681;
                        float _3878 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2685 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                        float _2686 = 1.0 - _2656;
                        float _2696 = (0.5 / (((_2685 * ((_2671 * _2686) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2685 * _2686) + _2656) * _2671))) * _2685;
                        float _3889 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2707 = (((_2657 * 3.1415927410125732421875) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) / ((_2679 * _2679) * ((_2622 * 2.1991131305694580078125) + 3.141590118408203125))) * _2611;
                        _2433 = (_2626 * _2574.x) + _2532;
                        _2434 = (_2626 * _2574.y) + _2533;
                        _2435 = (_2626 * _2574.z) + _2534;
                        _2430 = (_2707 * _2591.x) + _2529;
                        _2431 = (_2707 * _2591.y) + _2530;
                        _2432 = (_2707 * _2591.z) + _2531;
                        if (_2536 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2529 = _2430;
                            _2530 = _2431;
                            _2531 = _2432;
                            _2532 = _2433;
                            _2533 = _2434;
                            _2534 = _2435;
                            _2535 = _2536;
                        }
                    }
                    frontier_phi_63_pred = _2432;
                    frontier_phi_63_pred_1 = _2435;
                    frontier_phi_63_pred_2 = _2434;
                    frontier_phi_63_pred_3 = _2433;
                    frontier_phi_63_pred_4 = _2431;
                    frontier_phi_63_pred_5 = _2430;
                }
                _2154 = frontier_phi_63_pred;
                _2160 = frontier_phi_63_pred_1;
                _2158 = frontier_phi_63_pred_2;
                _2156 = frontier_phi_63_pred_3;
                _2152 = frontier_phi_63_pred_4;
                _2150 = frontier_phi_63_pred_5;
                uint _2340 = _2339 + 1u;
                if (_2340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2333 = _2150;
                    _2334 = _2152;
                    _2335 = _2154;
                    _2336 = _2156;
                    _2337 = _2158;
                    _2338 = _2160;
                    _2339 = _2340;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
        }
        uvec4 _2163 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2164 = _2163.z;
        uint _2166 = (_2164 >> 8u) & 15u;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((4294967295u << _2166) & _2058) == 0u)
        {
            _2301 = _2149;
            _2303 = _2151;
            _2305 = _2153;
            _2307 = _2155;
            _2309 = _2157;
            _2311 = _2159;
        }
        else
        {
            float _2326 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
            float _2327 = _2326 * _2012;
            float _2328 = _2326 * _2013;
            float _2329 = _2326 * _2014;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2166 < ((_2164 >> 12u) & 15u))
            {
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2310;
                float _2312;
                float _2512 = _2149;
                float _2513 = _2151;
                float _2514 = _2153;
                float _2515 = _2155;
                float _2516 = _2157;
                float _2517 = _2159;
                uint _2518 = _2166;
                uint _2527;
                bool _2528;
                for (;;)
                {
                    _2527 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2518 << 2u)) >> 2u)).x;
                    _2528 = _2527 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2528)
                    {
                        frontier_phi_77_pred = _2517;
                        frontier_phi_77_pred_1 = _2516;
                        frontier_phi_77_pred_2 = _2515;
                        frontier_phi_77_pred_3 = _2514;
                        frontier_phi_77_pred_4 = _2513;
                        frontier_phi_77_pred_5 = _2512;
                    }
                    else
                    {
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2755 = _2512;
                        float _2756 = _2513;
                        float _2757 = _2514;
                        float _2758 = _2515;
                        float _2759 = _2516;
                        float _2760 = _2517;
                        uint _2761 = _2527;
                        uint _2762;
                        vec4 _2787;
                        float _2788;
                        vec4 _2803;
                        vec3 _2815;
                        vec4 _2830;
                        vec4 _2846;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2772 = ((_2518 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2761));
                            _2762 = (_2761 + 4294967295u) & _2761;
                            uint _2774 = _2772 * 40u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            _2788 = _2787.w;
                            uint _2790 = (_2772 * 40u) + 4u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2805 = (_2772 * 40u) + 8u;
                            _2815 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x));
                            uint _2817 = (_2772 * 40u) + 16u;
                            _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2833 = (_2772 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2772 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2772 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_2014, _2880.z, fma(_2013, _2880.y, _2880.x * _2012)) + _2880.w;
                            _2893 = !((fma(_2014, _2861.z, fma(_2013, _2861.y, _2861.x * _2012)) + _2861.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2787.x - _2012;
                                float _2921 = _2787.y - _2013;
                                float _2922 = _2787.z - _2014;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2788 * _2788));
                                float _3900 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2938 = sqrt(_2923) * _2803.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_575, _578, _581))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_2014, _2830.z, fma(_2013, _2830.y, _2830.x * _2012)) + _2830.w) / _2892;
                                float _2952 = (fma(_2014, _2846.z, fma(_2013, _2846.y, _2846.x * _2012)) + _2846.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3916 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _651;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2327;
                                float _2982 = _2928 - _2328;
                                float _2983 = _2929 - _2329;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_575, _578, _581), vec3((-0.0) - _2327, (-0.0) - _2328, (-0.0) - _2329));
                                float _3927 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _2995 = dot(vec3(_575, _578, _581), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _3938 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_575, _578, _581), vec3(_2927, _2928, _2929))) + _3004;
                                float _3949 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _3960 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2958 * _2803.x;
                                frontier_phi_83_pred_1 = _2958 * _2803.z;
                                frontier_phi_83_pred_2 = _2958 * _2803.y;
                                frontier_phi_83_pred_3 = _3032 * _2815.z;
                                frontier_phi_83_pred_4 = _3032 * _2815.y;
                                frontier_phi_83_pred_5 = _3032 * _2815.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_83_pred;
                            _3041 = frontier_phi_83_pred_1;
                            _3040 = frontier_phi_83_pred_2;
                            _3038 = frontier_phi_83_pred_3;
                            _3037 = frontier_phi_83_pred_4;
                            _3036 = frontier_phi_83_pred_5;
                            _2745 = _3039 + _2758;
                            _2746 = _3040 + _2759;
                            _2747 = _3041 + _2760;
                            _2742 = _3036 + _2755;
                            _2743 = _3037 + _2756;
                            _2744 = _3038 + _2757;
                            if (_2762 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2762;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2747;
                        frontier_phi_77_pred_1 = _2746;
                        frontier_phi_77_pred_2 = _2745;
                        frontier_phi_77_pred_3 = _2744;
                        frontier_phi_77_pred_4 = _2743;
                        frontier_phi_77_pred_5 = _2742;
                    }
                    _2312 = frontier_phi_77_pred;
                    _2310 = frontier_phi_77_pred_1;
                    _2308 = frontier_phi_77_pred_2;
                    _2306 = frontier_phi_77_pred_3;
                    _2304 = frontier_phi_77_pred_4;
                    _2302 = frontier_phi_77_pred_5;
                    uint _2519 = _2518 + 1u;
                    if (_2519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2512 = _2302;
                        _2513 = _2304;
                        _2514 = _2306;
                        _2515 = _2308;
                        _2516 = _2310;
                        _2517 = _2312;
                        _2518 = _2519;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2304;
                frontier_phi_52_53_ladder_1 = _2312;
                frontier_phi_52_53_ladder_2 = _2310;
                frontier_phi_52_53_ladder_3 = _2308;
                frontier_phi_52_53_ladder_4 = _2306;
                frontier_phi_52_53_ladder_5 = _2302;
            }
            else
            {
                frontier_phi_52_53_ladder = _2151;
                frontier_phi_52_53_ladder_1 = _2159;
                frontier_phi_52_53_ladder_2 = _2157;
                frontier_phi_52_53_ladder_3 = _2155;
                frontier_phi_52_53_ladder_4 = _2153;
                frontier_phi_52_53_ladder_5 = _2149;
            }
            _2301 = frontier_phi_52_53_ladder_5;
            _2303 = frontier_phi_52_53_ladder;
            _2305 = frontier_phi_52_53_ladder_4;
            _2307 = frontier_phi_52_53_ladder_3;
            _2309 = frontier_phi_52_53_ladder_2;
            _2311 = frontier_phi_52_53_ladder_1;
        }
        float _2316 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2071 = (_2316 * _2307) + _1787;
        _2073 = (_2316 * _2309) + _1788;
        _2075 = (_2316 * _2311) + _1789;
        _2077 = ((_2301 * _620) * _2316) + _1954;
        _2079 = ((_2303 * _622) * _2316) + _1955;
        _2081 = ((_2305 * _623) * _2316) + _1956;
    }
    else
    {
        _2071 = _1787;
        _2073 = _1788;
        _2075 = _1789;
        _2077 = _1954;
        _2079 = _1955;
        _2081 = _1956;
    }
    float _3976 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3987 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3998 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2098 = ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2071 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _635))) + ((_2077 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2099 = ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2073 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _635))) + ((_2079 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2100 = ((isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_2075 + ((isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0))) * _635))) + ((_2081 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _1475)) * cbPerFrame._m0[3u].x);
    float _2101 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2102 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    uint _2104 = _594 + 6u;
    float _2112 = _554 / cbSceneParam._m0[86u].x;
    float _2113 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2127 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2112, _2113, (log2((isnan(cbSceneParam._m0[77u].w) ? _527 : (isnan(_527) ? cbSceneParam._m0[77u].w : min(_527, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2129 = _2127.x;
    float _2130 = _2127.y;
    float _2131 = _2127.z;
    float _2132 = _2127.w;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    if (_527 > cbSceneParam._m0[78u].w)
    {
        float _2174 = isnan(_527) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _527 : min(cbSceneParam._m0[80u].w, _527));
        float _2175 = _2174 / _527;
        float _2186 = _2175 * _263;
        float _2187 = _264 * _2175;
        float _2188 = (-0.0) - _2187;
        float _2189 = _2175 * _265;
        float _2191 = (cbSceneParam._m0[77u].w * _2188) / _2174;
        float _2192 = _2191 + cbSceneParam._m0[79u].w;
        float _2193 = cbSceneParam._m0[79u].w - _2187;
        float _2199 = sqrt(((_2186 * _2186) + (_2187 * _2187)) + (_2189 * _2189));
        float _2202 = (1.0 - (cbSceneParam._m0[77u].w / _2174)) * _2199;
        float _2208 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2210 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2443;
        if (abs((_2188 - _2191) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2443 = ((((_2192 > 0.0) ? exp2(_2208 * _2192) : (2.0 - exp2(_2210 * _2192))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2202;
        }
        else
        {
            float _2362 = 1.0 / cbSceneParam._m0[80u].x;
            float _2363 = isnan(_2193) ? _2192 : (isnan(_2192) ? _2193 : max(_2192, _2193));
            float _2364 = isnan(_2193) ? _2192 : (isnan(_2192) ? _2193 : min(_2192, _2193));
            float _2373 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : min(_2363, 0.0));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            _2443 = ((abs(_2199 / _2188) * cbSceneParam._m0[80u].y) * ((((_2373 - _2374) * 2.0) - ((exp2(_2208 * (isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0)))) - exp2(_2208 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0))))) * _2362)) - ((exp2(_2210 * _2373) - exp2(_2210 * _2374)) * _2362))) + (_2202 * cbSceneParam._m0[80u].z);
        }
        vec4 _2445 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2112, _2113, 1.0), 0.0);
        float _2454 = exp2((_2443 * (-1.44269502162933349609375)) * (1.0 - _2445.w));
        float _2455 = log2(_2454);
        float _2471 = log2(_2132);
        _2212 = (exp2(_2471 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2455 * cbSceneParam._m0[78u].x)) * _2445.x) / cbSceneParam._m0[78u].x)) + _2129;
        _2214 = (exp2(_2471 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2455 * cbSceneParam._m0[78u].y)) * _2445.y) / cbSceneParam._m0[78u].y)) + _2130;
        _2216 = (exp2(_2471 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2455 * cbSceneParam._m0[78u].z)) * _2445.z) / cbSceneParam._m0[78u].z)) + _2131;
        _2218 = _2454 * _2132;
    }
    else
    {
        _2212 = _2129;
        _2214 = _2130;
        _2216 = _2131;
        _2218 = _2132;
    }
    bool _2481;
    vec4 _2228;
    vec4 _2250;
    float _2252;
    float _2256;
    float _2257;
    float _2258;
    float _2259;
    bool _2269;
    for (;;)
    {
        _2228 = cbMatDynParam._m0[0u];
        float _2230 = roundEven(_2228.y);
        bool _2231 = _2230 == 3.0;
        float _2232 = log2(_2218);
        float _2239 = exp2(_2232 * cbSceneParam._m0[78u].x) * _2101;
        float _2240 = exp2(_2232 * cbSceneParam._m0[78u].y) * _2102;
        float _2241 = exp2(_2232 * cbSceneParam._m0[78u].z) * _2103;
        float _2248 = _541 + (-0.5);
        _2250 = cbMtdParam._m0[1u];
        _2252 = _2250.y * _2248;
        float _2255 = (_2230 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2256 = _2255 * (_2231 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2212)));
        _2257 = _2255 * (_2231 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2214)));
        _2258 = _2255 * (_2231 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2216)));
        _2259 = _2248 * 0.999000012874603271484375;
        _2269 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2269)
        {
            if ((cbInstanceData._m0[_594 + 7u].x + _2259) < 0.5)
            {
                _2481 = true;
                break;
            }
        }
        uint _2397 = _596 + uint(_2228.w);
        if ((cbInstanceData._m0[_2397].w < 1.0) && ((cbInstanceData._m0[_2397].w + _2259) < 0.5))
        {
            _2481 = true;
            break;
        }
        if ((_2252 + 1.0) < _2250.x)
        {
            _2481 = true;
            break;
        }
        _2481 = false;
        break;
    }
    float _2712;
    if (_2481)
    {
        discard_state = true;
        _2712 = 0.0;
    }
    else
    {
        _2712 = cbInstanceData._m0[_2104].w;
    }
    SV_Target.x = _2256;
    SV_Target.y = _2257;
    SV_Target.z = _2258;
    SV_Target.w = _2712;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2104].w;
    discard_exit();
}


