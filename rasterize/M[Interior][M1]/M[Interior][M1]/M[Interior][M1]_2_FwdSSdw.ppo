#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _716;
uint _1882;
uint _1883;
uint _1884;
uint _2118;
uint _2119;
uint _2120;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _253 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _243);
    float _254 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _243);
    float _255 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _243);
    float _281 = cbMtdParam._m0[22u].y + _253;
    float _282 = cbMtdParam._m0[22u].z + _254;
    float _283 = cbMtdParam._m0[22u].w + _255;
    float _297 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_195 * TANGENT.x, _195 * TANGENT.y, _195 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_281, _282, _283), vec3((-0.0) - (_188 * NORMAL.x), (-0.0) - (_188 * NORMAL.y), (-0.0) - (_188 * NORMAL.z)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    bool _326 = _304 > 0.0;
    float _328 = _326 ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _335 = _309 + (-0.5);
    float _338 = _310 + (-0.5);
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_335 + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_338 + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _402 = (cbMtdParam._m0[21u].x * _297) * _303;
    float _404 = (cbMtdParam._m0[20u].w * _298) * _303;
    bool _405 = _402 > 0.0;
    float _410;
    if (_405)
    {
        _410 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _410 = frontier_phi_11_10_ladder;
    }
    bool _412 = _404 > 0.0;
    float _417;
    if (_412)
    {
        _417 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _417 = frontier_phi_15_14_ladder;
    }
    float _420 = _326 ? (cbMtdParam._m0[16u].z / _304) : 5000.0;
    float _421 = isnan(_417) ? _410 : (isnan(_410) ? _417 : min(_410, _417));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _430 = ((_422 * _304) + _426) / _426;
    float _435 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _437 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _453 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_422 * _402)) / _430) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_422 * _404)) / _430) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _465;
    if (_405)
    {
        _465 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _465 = frontier_phi_19_18_ladder;
    }
    float _471;
    if (_412)
    {
        _471 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _471 = frontier_phi_23_22_ladder;
    }
    float _473 = isnan(_471) ? _465 : (isnan(_465) ? _471 : min(_465, _471));
    float _474 = isnan(_420) ? _473 : (isnan(_473) ? _420 : min(_473, _420));
    float _481 = ((_474 * _304) + _426) / _426;
    vec4 _495 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_474 * _402)) / _481) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_474 * _404)) / _481) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _497 = _495.w;
    float _522 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _526 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _527 = _253 * _526;
    float _528 = _254 * _526;
    float _529 = _255 * _526;
    float _535 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _536 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _545 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_535 * cbSceneParam._m0[86u].x, _536 * cbSceneParam._m0[86u].y));
    float _548 = _545.x * TEXCOORD.z;
    float _549 = (-0.0) - _527;
    float _550 = (-0.0) - _528;
    float _551 = (-0.0) - _529;
    float _573 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _577 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _581 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _715;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    float _726;
    float _727;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _637 = (cbModelParam._m0[37u].x * ((((fma(_581, cbModelParam._m0[26u].z, fma(_577, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _573)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _639 = (cbModelParam._m0[37u].y * ((((fma(_581, cbModelParam._m0[27u].z, fma(_577, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _573)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _640 = (((((fma(_581, cbModelParam._m0[28u].z, fma(_577, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _573)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_637, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_637, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_637, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_637, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _688 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _698 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _708 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_664.x + (-0.5));
        float _710 = _708 * (_664.y + (-0.5));
        float _711 = _708 * (_664.z + (-0.5));
        _715 = _677 * (_643.z + (-0.5));
        _717 = _677 * (_643.y + (-0.5));
        _718 = _677 * (_643.x + (-0.5));
        _719 = _688 * (_650.z + (-0.5));
        _720 = _688 * (_650.y + (-0.5));
        _721 = _688 * (_650.x + (-0.5));
        _722 = _698 * (_657.z + (-0.5));
        _723 = _698 * (_657.y + (-0.5));
        _724 = _698 * (_657.x + (-0.5));
        _725 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        _726 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        _727 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    }
    else
    {
        _715 = _716;
        _717 = _716;
        _718 = _716;
        _719 = _716;
        _720 = _716;
        _721 = _716;
        _722 = _716;
        _723 = _716;
        _724 = _716;
        _725 = _716;
        _726 = _716;
        _727 = _716;
    }
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _781 = (cbModelParam._m0[38u].x * ((((fma(_581, cbModelParam._m0[30u].z, fma(_577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _573)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _782 = (cbModelParam._m0[38u].y * ((((fma(_581, cbModelParam._m0[31u].z, fma(_577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _573)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _783 = (((((fma(_581, cbModelParam._m0[32u].z, fma(_577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _573)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _785 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_781, _782, _783), 0.0);
        float _818 = exp2((_785.w + (-0.5)) * 20.0) * 2.0;
        float _828 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _838 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _848 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_806.x + (-0.5));
        float _850 = _848 * (_806.y + (-0.5));
        float _851 = _848 * (_806.z + (-0.5));
        _855 = _818 * (_785.z + (-0.5));
        _856 = _818 * (_785.y + (-0.5));
        _857 = _818 * (_785.x + (-0.5));
        _858 = _828 * (_792.z + (-0.5));
        _859 = _828 * (_792.y + (-0.5));
        _860 = _828 * (_792.x + (-0.5));
        _861 = _838 * (_799.z + (-0.5));
        _862 = _838 * (_799.y + (-0.5));
        _863 = _838 * (_799.x + (-0.5));
        _864 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
        _865 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        _866 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    }
    else
    {
        _855 = _716;
        _856 = _716;
        _857 = _716;
        _858 = _716;
        _859 = _716;
        _860 = _716;
        _861 = _716;
        _862 = _716;
        _863 = _716;
        _864 = _716;
        _865 = _716;
        _866 = _716;
    }
    float _881 = _527 * (-0.5);
    float _882 = _528 * (-0.5);
    float _883 = _529 * (-0.5);
    float _884 = dot(vec4(_881, _882, _883, 1.0), vec4(_857, _860, _863, _866));
    float _887 = dot(vec4(_881, _882, _883, 1.0), vec4(_856, _859, _862, _865));
    float _890 = dot(vec4(_881, _882, _883, 1.0), vec4(_855, _858, _861, _864));
    float _925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _897 = dot(vec4(_881, _882, _883, 1.0), vec4(_715, _719, _722, _725));
        float _901 = dot(vec4(_881, _882, _883, 1.0), vec4(_717, _720, _723, _726));
        float _905 = dot(vec4(_881, _882, _883, 1.0), vec4(_718, _721, _724, _727));
        float _912 = dot(vec4(cbModelParam._m0[39u]), vec4(_881, _882, _883, 1.0));
        _925 = dot(vec3(isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0)), isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)), isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_912) ? 0.0 : (isnan(0.0) ? _912 : max(0.0, _912))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _925 = 1.0;
    }
    float _936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _927 = dot(vec4(cbModelParam._m0[40u]), vec4(_881, _882, _883, 1.0));
        _936 = dot(vec3(isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)), isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0)), isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_927) ? 0.0 : (isnan(0.0) ? _927 : max(0.0, _927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _936 = 1.0;
    }
    float _940 = (_936 * cbModelParam._m0[1u].x) + (_925 * (1.0 - cbModelParam._m0[1u].x));
    float _946 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1029;
    float _1031;
    float _1033;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _996 = fma(_581, cbModelParam._m0[13u].z, fma(_577, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _573)) + cbModelParam._m0[13u].w;
        float _1000 = fma(_581, cbModelParam._m0[14u].z, fma(_577, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _573)) + cbModelParam._m0[14u].w;
        float _1004 = fma(_581, cbModelParam._m0[15u].z, fma(_577, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _573)) + cbModelParam._m0[15u].w;
        float _1007 = fma(_551, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549));
        float _1010 = fma(_551, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549));
        float _1013 = fma(_551, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549));
        float _1039;
        if (_1007 > 0.0)
        {
            _1039 = abs((1.0 - _996) / _1007);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1007 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_996 + 1.0) / _1007);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1039 = frontier_phi_38_36_ladder;
        }
        float _1339;
        if (_1010 > 0.0)
        {
            _1339 = abs((1.0 - _1000) / _1010);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1010 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1000 + 1.0) / _1010);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1339 = frontier_phi_47_43_ladder;
        }
        float _1635;
        if (_1013 > 0.0)
        {
            _1635 = abs((1.0 - _1004) / _1013);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1013 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1004 + 1.0) / _1013);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1635 = frontier_phi_61_54_ladder;
        }
        float _1637 = isnan(_1339) ? _1039 : (isnan(_1039) ? _1339 : min(_1039, _1339));
        float _1638 = isnan(_1635) ? _1637 : (isnan(_1637) ? _1635 : min(_1637, _1635));
        float _1642 = (_1638 * _1007) + _996;
        float _1643 = (_1638 * _1010) + _1000;
        float _1644 = (_1638 * _1013) + _1004;
        float _1645 = _1638 * 9.9999997473787516355514526367188e-05;
        float _1646 = (-1.0) - _1645;
        float _1648 = _1645 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1644 > _1648) || ((_1644 < _1646) || ((_1643 > _1648) || ((_1643 < _1646) || ((_1642 < _1646) || (_1642 > _1648))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1644, cbModelParam._m0[9u].z, fma(_1643, cbModelParam._m0[9u].y, _1642 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1644, cbModelParam._m0[10u].z, fma(_1643, cbModelParam._m0[10u].y, _1642 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1644, cbModelParam._m0[11u].z, fma(_1643, cbModelParam._m0[11u].y, _1642 * cbModelParam._m0[11u].x))), _946);
            frontier_phi_37_61_ladder = _1755.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _1755.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _1755.x * cbModelParam._m0[1u].y;
        }
        _1029 = frontier_phi_37_61_ladder_2;
        _1031 = frontier_phi_37_61_ladder_1;
        _1033 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_549, _550, _551), _946);
        _1029 = _1017.x * cbModelParam._m0[1u].y;
        _1031 = _1017.y * cbModelParam._m0[1u].y;
        _1033 = _1017.z * cbModelParam._m0[1u].y;
    }
    float _1036 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1124;
    float _1126;
    float _1128;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1088 = fma(_581, cbModelParam._m0[21u].z, fma(_577, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _573)) + cbModelParam._m0[21u].w;
        float _1092 = fma(_581, cbModelParam._m0[22u].z, fma(_577, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _573)) + cbModelParam._m0[22u].w;
        float _1096 = fma(_581, cbModelParam._m0[23u].z, fma(_577, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _573)) + cbModelParam._m0[23u].w;
        float _1099 = fma(_551, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549));
        float _1102 = fma(_551, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549));
        float _1105 = fma(_551, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549));
        float _1344;
        if (_1099 > 0.0)
        {
            _1344 = abs((1.0 - _1088) / _1099);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1099 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1088 + 1.0) / _1099);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1344 = frontier_phi_49_45_ladder;
        }
        float _1661;
        if (_1102 > 0.0)
        {
            _1661 = abs((1.0 - _1092) / _1102);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1102 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1092 + 1.0) / _1102);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1661 = frontier_phi_63_56_ladder;
        }
        float _1812;
        if (_1105 > 0.0)
        {
            _1812 = abs((1.0 - _1096) / _1105);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1105 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1096 + 1.0) / _1105);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1812 = frontier_phi_77_72_ladder;
        }
        float _1814 = isnan(_1661) ? _1344 : (isnan(_1344) ? _1661 : min(_1344, _1661));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1099) + _1088;
        float _1820 = (_1815 * _1102) + _1092;
        float _1821 = (_1815 * _1105) + _1096;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1822;
        float _1825 = _1822 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_1821 > _1825) || ((_1821 < _1823) || ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 < _1823) || (_1819 > _1825))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1821, cbModelParam._m0[17u].z, fma(_1820, cbModelParam._m0[17u].y, _1819 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1821, cbModelParam._m0[18u].z, fma(_1820, cbModelParam._m0[18u].y, _1819 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1821, cbModelParam._m0[19u].z, fma(_1820, cbModelParam._m0[19u].y, _1819 * cbModelParam._m0[19u].x))), _1036);
            frontier_phi_46_77_ladder = _1981.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _1981.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _1981.y * cbModelParam._m0[1u].z;
        }
        _1124 = frontier_phi_46_77_ladder_1;
        _1126 = frontier_phi_46_77_ladder_2;
        _1128 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1108 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_549, _550, _551), _1036);
        _1124 = _1108.x * cbModelParam._m0[1u].z;
        _1126 = _1108.y * cbModelParam._m0[1u].z;
        _1128 = _1108.z * cbModelParam._m0[1u].z;
    }
    float _1140 = _548 * 0.01200000010430812835693359375;
    float _1142 = _1140 * ((cbModelParam._m0[1u].w * (_1124 - _1029)) + _1029);
    float _1143 = _1140 * ((cbModelParam._m0[1u].w * (_1126 - _1031)) + _1031);
    float _1144 = _1140 * ((cbModelParam._m0[1u].w * (_1128 - _1033)) + _1033);
    float _1165 = fma(_1144, cbSceneParam._m0[89u].z, fma(_1143, cbSceneParam._m0[89u].y, _1142 * cbSceneParam._m0[89u].x));
    float _1168 = fma(_1144, cbSceneParam._m0[90u].z, fma(_1143, cbSceneParam._m0[90u].y, _1142 * cbSceneParam._m0[90u].x));
    float _1171 = fma(_1144, cbSceneParam._m0[91u].z, fma(_1143, cbSceneParam._m0[91u].y, _1142 * cbSceneParam._m0[91u].x));
    vec4 _1179 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_535, _536));
    float _1181 = _1179.w;
    uint _1197 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1202 = floatBitsToUint(cbInstanceData._m0[_1197 + 5u]);
    uint _1204 = _1202.x * 14u;
    uint _1205 = _1204 + 13u;
    float _1210 = _548 + (-1.0);
    float _1214 = (cbLight._m0[_1205].x * _1210) + 1.0;
    float _1215 = (cbLight._m0[_1205].y * _1210) + 1.0;
    uint _1216 = _1204 + 8u;
    float _1227 = cbLight._m0[_1204].x + _527;
    float _1228 = cbLight._m0[_1204].y + _528;
    float _1229 = cbLight._m0[_1204].z + _529;
    float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
    float _1237 = dot(vec3(0.0), vec3(cbLight._m0[_1204].xyz));
    float _2499 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _1240 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
    float _1241 = dot(vec3(0.0), vec3(_527, _528, _529));
    float _2510 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1244 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
    float _1245 = dot(vec3(cbLight._m0[_1204].xyz), vec3(_1227 * _1233, _1228 * _1233, _1229 * _1233));
    float _2521 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1256 = (exp2(log2(1.0 - (isnan(1.0) ? _2521 : (isnan(_2521) ? 1.0 : min(_2521, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1262 = (0.5 / ((_1240 + 9.9999999392252902907785028219223e-09) + _1244)) * _1240;
    float _2532 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1264 = (isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0))) * 0.31831014156341552734375;
    float _1266 = isnan(1.0) ? _1214 : (isnan(_1214) ? 1.0 : min(_1214, 1.0));
    uint _1279 = _1204 + 9u;
    uint _1285 = _1204 | 1u;
    float _1291 = cbLight._m0[_1285].x + _527;
    float _1292 = cbLight._m0[_1285].y + _528;
    float _1293 = cbLight._m0[_1285].z + _529;
    float _1297 = inversesqrt(dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293)));
    float _1301 = dot(vec3(0.0), vec3(cbLight._m0[_1285].xyz));
    float _2548 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
    float _1304 = isnan(1.0) ? _2548 : (isnan(_2548) ? 1.0 : min(_2548, 1.0));
    float _1305 = dot(vec3(cbLight._m0[_1285].xyz), vec3(_1291 * _1297, _1292 * _1297, _1293 * _1297));
    float _2559 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
    float _1314 = (exp2(log2(1.0 - (isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1318 = (0.5 / ((_1304 + 9.9999999392252902907785028219223e-09) + _1244)) * _1304;
    float _2570 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _1320 = (isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0))) * 0.31831014156341552734375;
    float _1321 = isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0));
    float _1331 = (((_1314 * cbLight._m0[_1279].x) * _1320) * _1321) + ((((cbLight._m0[_1216].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1181))) * _1256) * _1264) * _1266);
    float _1332 = (((_1314 * cbLight._m0[_1279].y) * _1320) * _1321) + ((((cbLight._m0[_1216].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1181))) * _1256) * _1264) * _1266);
    float _1333 = (((_1314 * cbLight._m0[_1279].z) * _1320) * _1321) + ((((cbLight._m0[_1216].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1181))) * _1256) * _1264) * _1266);
    float _1450;
    float _1452;
    float _1454;
    if (_1202.y == 0u)
    {
        float _1389 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1390 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1389;
        float _1391 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1389;
        float _1392 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1389;
        uvec4 _1404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1405 = _1404.x;
        uint _1416 = uint((float(_1404.y) * floor(float(uint(cbSceneParam._m0[85u].y * _536) / _1405))) + floor(float(uint(cbSceneParam._m0[85u].x * _535) / _1405)));
        float _1426 = (log2(_1392 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1427 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        uint _1430 = uint(isnan(14.0) ? _1427 : (isnan(_1427) ? 14.0 : min(_1427, 14.0)));
        uvec4 _1436 = texelFetch(g_lightClusterGridBuffer, int(((_1430 << 2u) + (_1416 << 6u)) >> 2u));
        uint _1437 = _1436.x;
        uint _1438 = _1404.z;
        float _1527;
        float _1529;
        float _1531;
        if (((((1u << ((_1438 >> 4u) & 15u)) + 4294967295u) & _1437) == 0u) || ((_1438 & 240u) == 0u))
        {
            _1527 = 0.0;
            _1529 = 0.0;
            _1531 = 0.0;
        }
        else
        {
            float _1528;
            float _1530;
            float _1532;
            float _1686 = 0.0;
            float _1687 = 0.0;
            float _1688 = 0.0;
            uint _1689 = 0u;
            uint _1698;
            bool _1699;
            for (;;)
            {
                _1698 = texelFetch(g_lightClassification, int((((_1430 << 5u) + (_1416 << 9u)) + (_1689 << 2u)) >> 2u)).x;
                _1699 = _1698 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1699)
                {
                    frontier_phi_74_pred = _1688;
                    frontier_phi_74_pred_1 = _1687;
                    frontier_phi_74_pred_2 = _1686;
                }
                else
                {
                    float _1852;
                    float _1853;
                    float _1854;
                    uint _1855;
                    _1852 = _1686;
                    _1853 = _1687;
                    _1854 = _1688;
                    _1855 = _1698;
                    float _1764;
                    float _1765;
                    float _1766;
                    for (;;)
                    {
                        uint _1859 = uint(findLSB(_1855)) + (_1689 << 5u);
                        uint _1856 = (_1855 + 4294967295u) & _1855;
                        uint _1861 = _1859 * 48u;
                        vec4 _1875 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1861)).x, texelFetch(g_PointLightRenderingBuffer, int(_1861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1861 + 3u)).x));
                        uint _1892 = (_1859 * 48u) + 8u;
                        vec3 _1903 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1892)).x, texelFetch(g_PointLightRenderingBuffer, int(_1892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1892 + 2u)).x));
                        float _1907 = _1875.x - _1390;
                        float _1908 = _1875.y - _1391;
                        float _1909 = _1875.z - _1392;
                        float _1910 = dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909));
                        float _1913 = inversesqrt(_1910);
                        float _1922 = 1.0 - (_1910 * _1875.w);
                        float _2596 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
                        float _1924 = sqrt(_1910) * uintBitsToFloat(uvec4(_1882, _1883, _1884, texelFetch(g_PointLightRenderingBuffer, int(((_1859 * 48u) + 4u) + 3u)).x)).w;
                        float _1927 = 1.39999997615814208984375 / (_1924 + 1.39999997615814208984375);
                        float _1928 = _1927 * _1927;
                        float _1931 = ((1.0 - _1928) * dot(vec3(0.0), vec3(_1913 * _1907, _1913 * _1908, _1913 * _1909))) + _1928;
                        float _1933 = (-0.0) - _1390;
                        float _1934 = (-0.0) - _1391;
                        float _1935 = (-0.0) - _1392;
                        float _1939 = inversesqrt(dot(vec3(_1933, _1934, _1935), vec3(_1933, _1934, _1935)));
                        float _1943 = dot(vec3(0.0), vec3(_1939 * _1933, _1939 * _1934, _1939 * _1935));
                        float _2607 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
                        float _2618 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
                        float _1947 = isnan(1.0) ? _2618 : (isnan(_2618) ? 1.0 : min(_2618, 1.0));
                        float _1951 = (0.5 / (((isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0))) + 9.9999999392252902907785028219223e-09) + _1947)) * _1947;
                        float _2629 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
                        float _1960 = (((isnan(1.0) ? _2629 : (isnan(_2629) ? 1.0 : min(_2629, 1.0))) * 3.1415927410125732421875) / (((_1924 * _1924) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2596 : (isnan(_2596) ? 1.0 : min(_2596, 1.0)));
                        _1764 = (_1960 * _1903.x) + _1852;
                        _1765 = (_1960 * _1903.y) + _1853;
                        _1766 = (_1960 * _1903.z) + _1854;
                        if (_1856 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1852 = _1764;
                            _1853 = _1765;
                            _1854 = _1766;
                            _1855 = _1856;
                        }
                    }
                    frontier_phi_74_pred = _1766;
                    frontier_phi_74_pred_1 = _1765;
                    frontier_phi_74_pred_2 = _1764;
                }
                _1532 = frontier_phi_74_pred;
                _1530 = frontier_phi_74_pred_1;
                _1528 = frontier_phi_74_pred_2;
                uint _1690 = _1689 + 1u;
                if (_1690 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1686 = _1528;
                    _1687 = _1530;
                    _1688 = _1532;
                    _1689 = _1690;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1527 = _1528;
            _1529 = _1530;
            _1531 = _1532;
        }
        uvec4 _1535 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1536 = _1535.z;
        uint _1538 = (_1536 >> 8u) & 15u;
        float _1666;
        float _1668;
        float _1670;
        if (((4294967295u << _1538) & _1437) == 0u)
        {
            _1666 = _1527;
            _1668 = _1529;
            _1670 = _1531;
        }
        else
        {
            float _1682 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1538 < ((_1536 >> 12u) & 15u))
            {
                float _1667;
                float _1669;
                float _1671;
                float _1838 = _1527;
                float _1839 = _1529;
                float _1840 = _1531;
                uint _1841 = _1538;
                uint _1850;
                bool _1851;
                for (;;)
                {
                    _1850 = texelFetch(g_lightClassification, int((((_1430 << 5u) + (_1416 << 9u)) + (_1841 << 2u)) >> 2u)).x;
                    _1851 = _1850 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_1851)
                    {
                        frontier_phi_83_pred = _1840;
                        frontier_phi_83_pred_1 = _1839;
                        frontier_phi_83_pred_2 = _1838;
                    }
                    else
                    {
                        float _1986;
                        float _1987;
                        float _1988;
                        float _2207;
                        float _2208;
                        float _2209;
                        float _1996 = _1838;
                        float _1997 = _1839;
                        float _1998 = _1840;
                        uint _1999 = _1850;
                        uint _2000;
                        uint _2010;
                        vec4 _2025;
                        float _2026;
                        vec3 _2038;
                        vec4 _2053;
                        vec4 _2068;
                        float _2114;
                        bool _2115;
                        for (;;)
                        {
                            _2010 = ((_1841 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1999));
                            _2000 = (_1999 + 4294967295u) & _1999;
                            uint _2012 = _2010 * 40u;
                            _2025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2012 + 3u)).x));
                            _2026 = _2025.w;
                            uint _2028 = (_2010 * 40u) + 8u;
                            _2038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2028 + 2u)).x));
                            uint _2040 = (_2010 * 40u) + 16u;
                            _2053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2040 + 3u)).x));
                            uint _2055 = (_2010 * 40u) + 20u;
                            _2068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2055 + 3u)).x));
                            uint _2070 = (_2010 * 40u) + 24u;
                            vec4 _2083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2070 + 3u)).x));
                            uint _2089 = (_2010 * 40u) + 28u;
                            vec4 _2102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2089 + 3u)).x));
                            _2114 = fma(_1392, _2102.z, fma(_1391, _2102.y, _2102.x * _1390)) + _2102.w;
                            _2115 = !((fma(_1392, _2083.z, fma(_1391, _2083.y, _2083.x * _1390)) + _2083.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2115)
                            {
                                float _2149 = _2025.x - _1390;
                                float _2150 = _2025.y - _1391;
                                float _2151 = _2025.z - _1392;
                                float _2152 = dot(vec3(_2149, _2150, _2151), vec3(_2149, _2150, _2151));
                                float _2155 = inversesqrt(_2152);
                                float _2162 = 1.0 - (_2152 / (_2026 * _2026));
                                float _2640 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
                                float _2164 = sqrt(_2152) * uintBitsToFloat(uvec4(_2118, _2119, _2120, texelFetch(g_SpotLightRenderingBuffer, int(((_2010 * 40u) + 4u) + 3u)).x)).w;
                                float _2166 = 1.39999997615814208984375 / (_2164 + 1.39999997615814208984375);
                                float _2167 = _2166 * _2166;
                                float _2170 = (fma(_1392, _2053.z, fma(_1391, _2053.y, _2053.x * _1390)) + _2053.w) / _2114;
                                float _2171 = (fma(_1392, _2068.z, fma(_1391, _2068.y, _2068.x * _1390)) + _2068.w) / _2114;
                                float _2175 = 1.0 - dot(vec2(_2170, _2171), vec2(_2170, _2171));
                                float _2651 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
                                float _2183 = dot(vec3(0.0), vec3((-0.0) - (_1390 * _1682), (-0.0) - (_1391 * _1682), (-0.0) - (_1392 * _1682)));
                                float _2662 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
                                float _2191 = ((1.0 - _2167) * dot(vec3(0.0), vec3(_2155 * _2149, _2155 * _2150, _2155 * _2151))) + _2167;
                                float _2673 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
                                float _2192 = isnan(1.0) ? _2673 : (isnan(_2673) ? 1.0 : min(_2673, 1.0));
                                float _2196 = (0.5 / (((isnan(1.0) ? _2662 : (isnan(_2662) ? 1.0 : min(_2662, 1.0))) + 9.9999999392252902907785028219223e-09) + _2192)) * _2192;
                                float _2684 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
                                float _2203 = ((isnan(1.0) ? _2651 : (isnan(_2651) ? 1.0 : min(_2651, 1.0))) * (isnan(1.0) ? _2640 : (isnan(_2640) ? 1.0 : min(_2640, 1.0)))) * (((isnan(1.0) ? _2684 : (isnan(_2684) ? 1.0 : min(_2684, 1.0))) * 3.1415927410125732421875) / (((_2164 * _2164) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2203 * _2038.x;
                                frontier_phi_89_pred_1 = _2203 * _2038.z;
                                frontier_phi_89_pred_2 = _2203 * _2038.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2207 = frontier_phi_89_pred;
                            _2209 = frontier_phi_89_pred_1;
                            _2208 = frontier_phi_89_pred_2;
                            _1986 = _2207 + _1996;
                            _1987 = _2208 + _1997;
                            _1988 = _2209 + _1998;
                            if (_2000 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1996 = _1986;
                                _1997 = _1987;
                                _1998 = _1988;
                                _1999 = _2000;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _1988;
                        frontier_phi_83_pred_1 = _1987;
                        frontier_phi_83_pred_2 = _1986;
                    }
                    _1671 = frontier_phi_83_pred;
                    _1669 = frontier_phi_83_pred_1;
                    _1667 = frontier_phi_83_pred_2;
                    uint _1842 = _1841 + 1u;
                    if (_1842 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1838 = _1667;
                        _1839 = _1669;
                        _1840 = _1671;
                        _1841 = _1842;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1669;
                frontier_phi_65_66_ladder_1 = _1667;
                frontier_phi_65_66_ladder_2 = _1671;
            }
            else
            {
                frontier_phi_65_66_ladder = _1529;
                frontier_phi_65_66_ladder_1 = _1527;
                frontier_phi_65_66_ladder_2 = _1531;
            }
            _1666 = frontier_phi_65_66_ladder_1;
            _1668 = frontier_phi_65_66_ladder;
            _1670 = frontier_phi_65_66_ladder_2;
        }
        float _1675 = isnan(1.0) ? _548 : (isnan(_548) ? 1.0 : min(_548, 1.0));
        _1450 = ((_1666 * 0.039999999105930328369140625) * _1675) + _1331;
        _1452 = ((_1668 * 0.039999999105930328369140625) * _1675) + _1332;
        _1454 = ((_1670 * 0.039999999105930328369140625) * _1675) + _1333;
    }
    else
    {
        _1450 = _1331;
        _1452 = _1332;
        _1454 = _1333;
    }
    uint _1461 = (_1197 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1476 = (cbInstanceData._m0[_1461].x * ((_497 * ((_453.x * cbMtdParam._m0[10u].x) - _378)) + _378)) + ((_1450 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _940)) * cbPerFrame._m0[3u].x);
    float _1477 = (cbInstanceData._m0[_1461].y * ((_497 * ((_453.y * cbMtdParam._m0[10u].y) - _379)) + _379)) + ((_1452 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _940)) * cbPerFrame._m0[3u].x);
    float _1478 = (cbInstanceData._m0[_1461].z * ((_497 * ((_453.z * cbMtdParam._m0[10u].z) - _380)) + _380)) + ((_1454 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _940)) * cbPerFrame._m0[3u].x);
    uint _1482 = _1197 + 6u;
    float _1490 = _535 / cbSceneParam._m0[86u].x;
    float _1491 = _536 / cbSceneParam._m0[86u].y;
    vec4 _1505 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1490, _1491, (log2((isnan(cbSceneParam._m0[77u].w) ? _522 : (isnan(_522) ? cbSceneParam._m0[77u].w : min(_522, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1507 = _1505.x;
    float _1508 = _1505.y;
    float _1509 = _1505.z;
    float _1510 = _1505.w;
    float _1584;
    float _1586;
    float _1588;
    float _1590;
    if (_522 > cbSceneParam._m0[78u].w)
    {
        float _1546 = isnan(_522) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _522 : min(cbSceneParam._m0[80u].w, _522));
        float _1547 = _1546 / _522;
        float _1558 = _1547 * _253;
        float _1559 = _254 * _1547;
        float _1560 = (-0.0) - _1559;
        float _1561 = _1547 * _255;
        float _1563 = (cbSceneParam._m0[77u].w * _1560) / _1546;
        float _1564 = _1563 + cbSceneParam._m0[79u].w;
        float _1565 = cbSceneParam._m0[79u].w - _1559;
        float _1571 = sqrt(((_1558 * _1558) + (_1559 * _1559)) + (_1561 * _1561));
        float _1574 = (1.0 - (cbSceneParam._m0[77u].w / _1546)) * _1571;
        float _1580 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1582 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1774;
        if (abs((_1560 - _1563) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1774 = ((((_1564 > 0.0) ? exp2(_1580 * _1564) : (2.0 - exp2(_1582 * _1564))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1574;
        }
        else
        {
            float _1712 = 1.0 / cbSceneParam._m0[80u].x;
            float _1713 = isnan(_1565) ? _1564 : (isnan(_1564) ? _1565 : max(_1564, _1565));
            float _1714 = isnan(_1565) ? _1564 : (isnan(_1564) ? _1565 : min(_1564, _1565));
            float _1723 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : min(_1713, 0.0));
            float _1724 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : min(_1714, 0.0));
            _1774 = ((abs(_1571 / _1560) * cbSceneParam._m0[80u].y) * ((((_1723 - _1724) * 2.0) - ((exp2(_1580 * (isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)))) - exp2(_1580 * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))))) * _1712)) - ((exp2(_1582 * _1723) - exp2(_1582 * _1724)) * _1712))) + (_1574 * cbSceneParam._m0[80u].z);
        }
        vec4 _1776 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1490, _1491, 1.0), 0.0);
        float _1785 = exp2((_1774 * (-1.44269502162933349609375)) * (1.0 - _1776.w));
        float _1786 = log2(_1785);
        float _1802 = log2(_1510);
        _1584 = (exp2(_1802 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1786 * cbSceneParam._m0[78u].x)) * _1776.x) / cbSceneParam._m0[78u].x)) + _1507;
        _1586 = (exp2(_1802 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1786 * cbSceneParam._m0[78u].y)) * _1776.y) / cbSceneParam._m0[78u].y)) + _1508;
        _1588 = (exp2(_1802 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1786 * cbSceneParam._m0[78u].z)) * _1776.z) / cbSceneParam._m0[78u].z)) + _1509;
        _1590 = _1785 * _1510;
    }
    else
    {
        _1584 = _1507;
        _1586 = _1508;
        _1588 = _1509;
        _1590 = _1510;
    }
    float _1602 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1603 = _1602 == 3.0;
    float _1605 = log2(_1590);
    float _1612 = exp2(_1605 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    float _1613 = exp2(_1605 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    float _1614 = exp2(_1605 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    float _1623 = (_1602 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1623 * (_1603 ? _1612 : (_1612 + (cbSceneParam._m0[72u].w * _1584)));
    SV_Target.y = _1623 * (_1603 ? _1613 : (_1613 + (cbSceneParam._m0[72u].w * _1586)));
    SV_Target.z = _1623 * (_1603 ? _1614 : (_1614 + (cbSceneParam._m0[72u].w * _1588)));
    SV_Target.w = cbInstanceData._m0[_1482].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1482].w;
}


