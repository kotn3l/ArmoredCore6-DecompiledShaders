#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1293;
float _3763;
float _3764;
float _3765;
float _3766;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.w;
    float _309 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _296) + cbMtdParam._m0[11u].x) * _290.x;
    float _311 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _296) + cbMtdParam._m0[11u].y) * _290.y;
    float _313 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _296) + cbMtdParam._m0[11u].z) * _290.z;
    float _339 = cbMtdParam._m0[22u].y + _269;
    float _340 = cbMtdParam._m0[22u].z + _270;
    float _341 = cbMtdParam._m0[22u].w + _271;
    float _355 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_198, _199, _200));
    float _356 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_212, _213, _214));
    float _357 = (-0.0) - dot(vec3(_339, _340, _341), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _364 = (cbMtdParam._m0[19u].x * _355) * _361;
    float _366 = (cbMtdParam._m0[18u].w * _356) * _361;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_364 > 0.0)
    {
        _374 = (1.0 - _367) / _364;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _364;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[15u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_393 + (_388 * _364)) / _399) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _440 = (_426 - (_426 * _296)) * cbMtdParam._m0[9u].x;
    float _441 = (_427 - (_427 * _296)) * cbMtdParam._m0[9u].y;
    float _442 = cbMtdParam._m0[9u].z * (_428 - (_428 * _296));
    float _464 = (cbMtdParam._m0[21u].x * _355) * _361;
    float _466 = (cbMtdParam._m0[20u].w * _356) * _361;
    bool _467 = _464 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _367) / _464;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _464;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _472 = frontier_phi_11_10_ladder;
    }
    bool _474 = _466 > 0.0;
    float _479;
    if (_474)
    {
        _479 = (1.0 - _368) / _466;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_466 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _466;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _479 = frontier_phi_15_14_ladder;
    }
    float _482 = _384 ? (cbMtdParam._m0[16u].z / _362) : 5000.0;
    float _483 = isnan(_479) ? _472 : (isnan(_472) ? _479 : min(_472, _479));
    float _484 = isnan(_482) ? _483 : (isnan(_483) ? _482 : min(_483, _482));
    float _488 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _492 = ((_484 * _362) + _488) / _488;
    float _497 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _499 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _515 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_484 * _464)) / _492) + 0.5) + _497) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_484 * _466)) / _492) + 0.5) + _499) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520 = _515.x * cbMtdParam._m0[10u].x;
    float _521 = _515.y * cbMtdParam._m0[10u].y;
    float _522 = _515.z * cbMtdParam._m0[10u].z;
    float _530;
    if (_467)
    {
        _530 = (1.0 - _367) / _464;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _464;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _530 = frontier_phi_19_18_ladder;
    }
    float _536;
    if (_474)
    {
        _536 = (1.0 - _368) / _466;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_466 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _466;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _536 = frontier_phi_23_22_ladder;
    }
    float _538 = isnan(_536) ? _530 : (isnan(_530) ? _536 : min(_530, _536));
    float _539 = isnan(_482) ? _538 : (isnan(_538) ? _482 : min(_538, _482));
    float _546 = ((_539 * _362) + _488) / _488;
    vec4 _560 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_539 * _464)) / _546) + 0.5) + _497) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_539 * _466)) / _546) + 0.5) + _499) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _562 = _560.w;
    float _564 = _562 - (_562 * _296);
    float _574 = (_564 * ((_520 - _440) - (_520 * _296))) + _440;
    float _575 = (_564 * ((_521 - _441) - (_521 * _296))) + _441;
    float _576 = (_564 * ((_522 - _442) - (_522 * _296))) + _442;
    float _591 = (cbMtdParam._m0[21u].z * _355) * _361;
    float _593 = (cbMtdParam._m0[21u].y * _356) * _361;
    bool _594 = _591 > 0.0;
    float _599;
    if (_594)
    {
        _599 = (1.0 - _367) / _591;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _367) / _591;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _599 = frontier_phi_27_26_ladder;
    }
    bool _601 = _593 > 0.0;
    float _606;
    if (_601)
    {
        _606 = (1.0 - _368) / _593;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_593 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _368) / _593;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _606 = frontier_phi_31_30_ladder;
    }
    float _609 = _384 ? (cbMtdParam._m0[18u].x / _362) : 5000.0;
    float _610 = isnan(_606) ? _599 : (isnan(_599) ? _606 : min(_599, _606));
    float _611 = isnan(_609) ? _610 : (isnan(_610) ? _609 : min(_610, _609));
    float _615 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _619 = ((_611 * _362) + _615) / _615;
    float _624 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _626 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _643 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_611 * _591)) / _619) + 0.5) + _624) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_611 * _593)) / _619) + 0.5) + _626) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _648 = _643.x * cbMtdParam._m0[14u].x;
    float _649 = _643.y * cbMtdParam._m0[14u].y;
    float _650 = _643.z * cbMtdParam._m0[14u].z;
    float _658;
    if (_594)
    {
        _658 = (1.0 - _367) / _591;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _367) / _591;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _658 = frontier_phi_35_34_ladder;
    }
    float _664;
    if (_601)
    {
        _664 = (1.0 - _368) / _593;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_593 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _368) / _593;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _664 = frontier_phi_39_38_ladder;
    }
    float _666 = isnan(_664) ? _658 : (isnan(_658) ? _664 : min(_658, _664));
    float _667 = isnan(_609) ? _666 : (isnan(_666) ? _609 : min(_666, _609));
    float _674 = ((_667 * _362) + _615) / _615;
    vec4 _688 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_667 * _591)) / _674) + 0.5) + _624) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_667 * _593)) / _674) + 0.5) + _626) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _690 = _688.w;
    float _692 = _690 - (_690 * _296);
    vec4 _716 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _718 = _716.x;
    vec4 _730 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _738 = (_730.x * 2.0) + (-1.0);
    float _740 = (_730.y * 2.0) + (-1.0);
    float _741 = dot(vec2(_738, _740), vec2(_738, _740));
    float _3825 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _746 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    float _747 = _730.z * _296;
    float _750 = fma(_746, _205, fma(_740, _212, _738 * _198));
    float _753 = fma(_746, _206, fma(_740, _213, _738 * _199));
    float _756 = fma(_746, _207, fma(_740, _214, _738 * _200));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _3836 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _764 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _3847 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3858 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3869 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3880 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _768 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _784 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _788 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _789 = _269 * _788;
    float _790 = _270 * _788;
    float _791 = _271 * _788;
    vec4 _796 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _798 = _796.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _974 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _980 = (cbMatDynParam._m0[5u].x * _974) + cbMatDynParam._m0[5u].y;
        float _3891 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _985 = (cbMatDynParam._m0[5u].z * _974) + cbMatDynParam._m0[5u].w;
        float _3902 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) - _981)) + _981) < ((_798 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _811 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _812 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _831 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _834 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _837 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _850 = uint(roundEven(NORMAL.w)) * 13u;
    uint _852 = _850 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3913 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _3924 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _865 = 1.0 - _768;
    float _866 = _862 * _865;
    float _867 = _863 * _865;
    float _868 = _864 * _865;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _768;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _768;
    float _875 = (_864 + (-0.039999999105930328369140625)) * _768;
    float _876 = _873 + 0.039999999105930328369140625;
    float _878 = _874 + 0.039999999105930328369140625;
    float _879 = _875 + 0.039999999105930328369140625;
    vec4 _888 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _811, cbSceneParam._m0[86u].y * _812));
    float _891 = _888.x * TEXCOORD.z;
    float _892 = dot(vec3(_761, _762, _763), vec3(_789, _790, _791));
    float _895 = _892 * 2.0;
    float _899 = (_895 * _761) - _789;
    float _900 = (_895 * _762) - _790;
    float _901 = (_895 * _763) - _791;
    float _905 = abs(dot(vec3(_789, _790, _791), vec3(_761, _762, _763)));
    float _3946 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _907 = sqrt(_764);
    float _920 = exp2((_907 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_907 * 3.0));
    float _926 = (1.0 - _920) * ((_907 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _927 = _920 * _907;
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1019 = fma(_963, cbModelParam._m0[26u].z, fma(_959, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _955));
        float _1023 = fma(_963, cbModelParam._m0[27u].z, fma(_959, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _955));
        float _1027 = fma(_963, cbModelParam._m0[28u].z, fma(_959, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _955));
        float _1050 = _955 + _761;
        float _1051 = _959 + _762;
        float _1052 = _963 + _763;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1019;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1023;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1027;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1019 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1023 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1027 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_761, _762, _763), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3972 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3983 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3994 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_761, _762, _763), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4005 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4016 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4027 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_761, _762, _763), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4038 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4049 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4060 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_963, cbModelParam._m0[30u].z, fma(_959, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _955));
        float _1340 = fma(_963, cbModelParam._m0[31u].z, fma(_959, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _955));
        float _1344 = fma(_963, cbModelParam._m0[32u].z, fma(_959, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _955));
        float _1367 = _955 + _761;
        float _1368 = _959 + _762;
        float _1369 = _963 + _763;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_761, _762, _763), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4123 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_761, _762, _763), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4134 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4145 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4156 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_761, _762, _763), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4167 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4178 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4189 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = _1293;
        _1614 = _1293;
        _1615 = _1293;
        _1616 = _1293;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _899 * 0.5;
    float _1674 = _900 * 0.5;
    float _1675 = _901 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_963, cbModelParam._m0[13u].z, fma(_959, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _955)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_963, cbModelParam._m0[14u].z, fma(_959, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _955)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_963, cbModelParam._m0[15u].z, fma(_959, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _955)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_901, cbModelParam._m0[13u].z, fma(_900, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _899));
        float _1803 = fma(_901, cbModelParam._m0[14u].z, fma(_900, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _899));
        float _1806 = fma(_901, cbModelParam._m0[15u].z, fma(_900, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _899));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1834 = frontier_phi_57_55_ladder;
        }
        float _2004;
        if (_1803 > 0.0)
        {
            _2004 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2004 = frontier_phi_66_62_ladder;
        }
        float _2459;
        if (_1806 > 0.0)
        {
            _2459 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2459 = frontier_phi_78_73_ladder;
        }
        float _2461 = isnan(_2004) ? _1834 : (isnan(_1834) ? _2004 : min(_1834, _2004));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1800) + _1789;
        float _2467 = (_2462 * _1803) + _1793;
        float _2468 = (_2462 * _1806) + _1797;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2469;
        float _2473 = _2469 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 > _2473) || ((_2467 < _2471) || ((_2466 < _2471) || (_2466 > _2473))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2718 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_56_78_ladder = _2718.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2718.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2718.x * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_56_78_ladder_2;
        _1824 = frontier_phi_56_78_ladder_1;
        _1826 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_899, _900, _901), _1742);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_963, cbModelParam._m0[21u].z, fma(_959, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _955)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_963, cbModelParam._m0[22u].z, fma(_959, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _955)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_963, cbModelParam._m0[23u].z, fma(_959, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _955)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_901, cbModelParam._m0[21u].z, fma(_900, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _899));
        float _1897 = fma(_901, cbModelParam._m0[22u].z, fma(_900, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _899));
        float _1900 = fma(_901, cbModelParam._m0[23u].z, fma(_900, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _899));
        float _2009;
        if (_1894 > 0.0)
        {
            _2009 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2009 = frontier_phi_68_64_ladder;
        }
        float _2486;
        if (_1897 > 0.0)
        {
            _2486 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2486 = frontier_phi_80_75_ladder;
        }
        float _2847;
        if (_1900 > 0.0)
        {
            _2847 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2847 = frontier_phi_92_87_ladder;
        }
        float _2849 = isnan(_2486) ? _2009 : (isnan(_2009) ? _2486 : min(_2009, _2486));
        float _2850 = isnan(_2847) ? _2849 : (isnan(_2849) ? _2847 : min(_2849, _2847));
        float _2854 = (_2850 * _1894) + _1883;
        float _2855 = (_2850 * _1897) + _1887;
        float _2856 = (_2850 * _1900) + _1891;
        float _2857 = _2850 * 9.9999997473787516355514526367188e-05;
        float _2858 = (-1.0) - _2857;
        float _2860 = _2857 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2856 > _2860) || ((_2856 < _2858) || ((_2855 > _2860) || ((_2855 < _2858) || ((_2854 < _2858) || (_2854 > _2860))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2856, cbModelParam._m0[17u].z, fma(_2855, cbModelParam._m0[17u].y, _2854 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2856, cbModelParam._m0[18u].z, fma(_2855, cbModelParam._m0[18u].y, _2854 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2856, cbModelParam._m0[19u].z, fma(_2855, cbModelParam._m0[19u].y, _2854 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_65_92_ladder = _2993.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2993.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2993.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_65_92_ladder_2;
        _1921 = frontier_phi_65_92_ladder_1;
        _1923 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_899, _900, _901), _1831);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_926 * _876) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1919 - _1822)) + _1822);
    float _1938 = (((_926 * _878) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1921 - _1824)) + _1824);
    float _1940 = (((_926 * _879) + _927) * _891) * ((cbModelParam._m0[1u].w * (_1923 - _1826)) + _1826);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1996 = _1983 / _1995;
    float _1997 = _1987 / _1995;
    float _1998 = _1991 / _1995;
    float _2145;
    float _2146;
    float _2147;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2025 = ((uint(_1998 > cbSceneParam._m0[59u].y) + uint(_1998 > cbSceneParam._m0[59u].x)) + uint(_1998 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2026 = _2025 + 43u;
        uint _2034 = _2025 + 44u;
        uint _2042 = _2025 + 45u;
        uint _2050 = _2025 + 46u;
        float _2061 = fma(_1995, cbSceneParam._m0[_2026].w, fma(_1991, cbSceneParam._m0[_2026].z, fma(_1987, cbSceneParam._m0[_2026].y, _1983 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1995, cbSceneParam._m0[_2034].w, fma(_1991, cbSceneParam._m0[_2034].z, fma(_1987, cbSceneParam._m0[_2034].y, _1983 * cbSceneParam._m0[_2034].x)));
        float _2073 = fma(_1995, cbSceneParam._m0[_2050].w, fma(_1991, cbSceneParam._m0[_2050].z, fma(_1987, cbSceneParam._m0[_2050].y, _1983 * cbSceneParam._m0[_2050].x)));
        float _2078 = cbSceneParam._m0[33u].z * _2073;
        float _2080 = cbSceneParam._m0[33u].w * _2073;
        float _2083 = fma(_1995, cbSceneParam._m0[_2042].w, fma(_1991, cbSceneParam._m0[_2042].z, fma(_1987, cbSceneParam._m0[_2042].y, _1983 * cbSceneParam._m0[_2042].x))) / _2073;
        float _2131 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
        float _4315 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2138 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2078 + _2061) / _2073, (_2080 + _2065) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 + _2061) / _2073, (_2065 - _2078) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2078) / _2073, (_2065 - _2080) / _2073), _2083), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2061 - _2080) / _2073, (_2078 + _2065) / _2073), _2083), 0.0)).x), vec4(0.25)));
        _2145 = 1.0 - (_2138 * cbSceneParam._m0[34u].x);
        _2146 = 1.0 - (_2138 * cbSceneParam._m0[34u].y);
        _2147 = 1.0 - (_2138 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2145 = 1.0;
        _2146 = 1.0;
        _2147 = 1.0;
    }
    float _2211;
    float _2213;
    float _2215;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2199 = fma(_1995, cbSceneParam._m0[63u].w, fma(_1991, cbSceneParam._m0[63u].z, fma(_1987, cbSceneParam._m0[63u].y, _1983 * cbSceneParam._m0[63u].x)));
        float _2200 = fma(_1995, cbSceneParam._m0[60u].w, fma(_1991, cbSceneParam._m0[60u].z, fma(_1987, cbSceneParam._m0[60u].y, _1983 * cbSceneParam._m0[60u].x))) / _2199;
        float _2201 = fma(_1995, cbSceneParam._m0[61u].w, fma(_1991, cbSceneParam._m0[61u].z, fma(_1987, cbSceneParam._m0[61u].y, _1983 * cbSceneParam._m0[61u].x))) / _2199;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2200 >= cbSceneParam._m0[64u].x) && (_2201 >= cbSceneParam._m0[64u].y)) && (_2200 <= cbSceneParam._m0[64u].z)) && (_2201 <= cbSceneParam._m0[64u].w))
        {
            float _2499 = fma(_1995, cbSceneParam._m0[62u].w, fma(_1991, cbSceneParam._m0[62u].z, fma(_1987, cbSceneParam._m0[62u].y, _1983 * cbSceneParam._m0[62u].x))) / _2199;
            float _2503 = isnan(cbSceneParam._m0[41u].w) ? _2499 : (isnan(_2499) ? cbSceneParam._m0[41u].w : max(_2499, cbSceneParam._m0[41u].w));
            float _2546 = (cbSceneParam._m0[33u].x - sqrt(((_1997 * _1997) + (_1996 * _1996)) + (_1998 * _1998))) * cbSceneParam._m0[33u].y;
            float _4331 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
            float _2553 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2200, cbSceneParam._m0[33u].w + _2201), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2200, _2201 - cbSceneParam._m0[33u].z), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].z, _2201 - cbSceneParam._m0[33u].w), _2503), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2200 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2201), _2503), 0.0)).x), vec4(0.25)));
            float _2557 = 1.0 - (_2553 * cbSceneParam._m0[34u].x);
            float _2558 = 1.0 - (_2553 * cbSceneParam._m0[34u].y);
            float _2559 = 1.0 - (_2553 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2559) ? _2147 : (isnan(_2147) ? _2559 : min(_2147, _2559));
            frontier_phi_77_76_ladder_1 = isnan(_2558) ? _2146 : (isnan(_2146) ? _2558 : min(_2146, _2558));
            frontier_phi_77_76_ladder_2 = isnan(_2557) ? _2145 : (isnan(_2145) ? _2557 : min(_2145, _2557));
        }
        else
        {
            frontier_phi_77_76_ladder = _2147;
            frontier_phi_77_76_ladder_1 = _2146;
            frontier_phi_77_76_ladder_2 = _2145;
        }
        _2211 = frontier_phi_77_76_ladder_2;
        _2213 = frontier_phi_77_76_ladder_1;
        _2215 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2211 = _2145;
        _2213 = _2146;
        _2215 = _2147;
    }
    uvec4 _2220 = floatBitsToUint(cbInstanceData._m0[_850 + 5u]);
    uint _2222 = _2220.x * 14u;
    uint _2223 = _2222 + 13u;
    float _2228 = _891 + (-1.0);
    float _2231 = (cbLight._m0[_2223].x * _2228) + 1.0;
    float _2232 = (cbLight._m0[_2223].y * _2228) + 1.0;
    uint _2233 = _2222 + 5u;
    float _2239 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
    uint _2243 = _2222 + 4u;
    float _2252 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2256 = _2222 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_761, _762, _763));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_761, _762, _763));
    float _4367 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4378 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2211) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2213) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2215) * _2252) * _2275);
    uint _2288 = _2222 + 8u;
    float _2301 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _764) * 0.949999988079071044921875);
    float _2302 = _2301 * _2301;
    float _2303 = cbLight._m0[_2222].x + _789;
    float _2304 = cbLight._m0[_2222].y + _790;
    float _2305 = cbLight._m0[_2222].z + _791;
    float _2309 = inversesqrt(dot(vec3(_2303, _2304, _2305), vec3(_2303, _2304, _2305)));
    float _2310 = _2309 * _2303;
    float _2311 = _2309 * _2304;
    float _2312 = _2309 * _2305;
    float _2313 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2222].xyz));
    float _4389 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2316 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _2317 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2318 = dot(vec3(_761, _762, _763), vec3(_2310, _2311, _2312));
    float _4411 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2322 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2310, _2311, _2312));
    float _4422 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2326 = _2302 * _2302;
    float _2330 = ((_2321 * _2321) * (_2326 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2339 = 0.959999978542327880859375 - _873;
    float _2341 = 0.959999978542327880859375 - _874;
    float _2342 = 0.959999978542327880859375 - _875;
    float _2349 = 1.0 - _2302;
    float _2360 = (0.5 / (((_2317 * ((_2316 * _2349) + _2302)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2349) + _2302) * _2316))) * _2316;
    float _4433 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2362 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2326 / ((_2330 * _2330) * 3.141590118408203125));
    uint _2376 = _2222 + 9u;
    float _2387 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _764) * 0.949999988079071044921875);
    float _2388 = _2387 * _2387;
    float _2389 = cbLight._m0[_2256].x + _789;
    float _2390 = cbLight._m0[_2256].y + _790;
    float _2391 = cbLight._m0[_2256].z + _791;
    float _2395 = inversesqrt(dot(vec3(_2389, _2390, _2391), vec3(_2389, _2390, _2391)));
    float _2396 = _2395 * _2389;
    float _2397 = _2395 * _2390;
    float _2398 = _2395 * _2391;
    float _2399 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2256].xyz));
    float _4444 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2403 = dot(vec3(_761, _762, _763), vec3(_2396, _2397, _2398));
    float _4455 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2406 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2407 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2396, _2397, _2398));
    float _4466 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2411 = _2388 * _2388;
    float _2415 = ((_2406 * _2406) * (_2411 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2429 = 1.0 - _2388;
    float _2439 = (0.5 / (((_2317 * ((_2402 * _2429) + _2388)) + 9.9999999392252902907785028219223e-09) + (((_2317 * _2429) + _2388) * _2402))) * _2402;
    float _4477 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2441 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2411 / ((_2415 * _2415) * 3.141590118408203125));
    float _2451 = (((((_2422 * _2339) + _876) * cbLight._m0[_2376].x) * _2441) * _2239) + ((((cbLight._m0[_2288].x * _2211) * ((_2338 * _2339) + _876)) * _2362) * _2252);
    float _2452 = (((((_2422 * _2341) + _878) * cbLight._m0[_2376].y) * _2441) * _2239) + ((((cbLight._m0[_2288].y * _2213) * ((_2338 * _2341) + _878)) * _2362) * _2252);
    float _2453 = (((((_2422 * _2342) + _879) * cbLight._m0[_2376].z) * _2441) * _2239) + ((((cbLight._m0[_2288].z * _2215) * ((_2338 * _2342) + _879)) * _2362) * _2252);
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    float _2624;
    float _2626;
    if (_2220.y == 0u)
    {
        uvec4 _2571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2572 = _2571.x;
        uint _2583 = uint((float(_2571.y) * floor(float(uint(cbSceneParam._m0[85u].y * _812) / _2572))) + floor(float(uint(cbSceneParam._m0[85u].x * _811) / _2572)));
        float _2593 = (log2(_1998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2594 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        uint _2597 = uint(isnan(14.0) ? _2594 : (isnan(_2594) ? 14.0 : min(_2594, 14.0)));
        uvec4 _2602 = texelFetch(g_lightClusterGridBuffer, int(((_2597 << 2u) + (_2583 << 6u)) >> 2u));
        uint _2603 = _2602.x;
        uint _2604 = _2571.z;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        float _2737;
        if (((((1u << ((_2604 >> 4u) & 15u)) + 4294967295u) & _2603) == 0u) || ((_2604 & 240u) == 0u))
        {
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
            _2737 = 0.0;
        }
        else
        {
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2738;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            uint _2911 = 0u;
            uint _2920;
            bool _2921;
            for (;;)
            {
                _2920 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_2911 << 2u)) >> 2u)).x;
                _2921 = _2920 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2921)
                {
                    frontier_phi_103_pred = _2906;
                    frontier_phi_103_pred_1 = _2910;
                    frontier_phi_103_pred_2 = _2909;
                    frontier_phi_103_pred_3 = _2908;
                    frontier_phi_103_pred_4 = _2907;
                    frontier_phi_103_pred_5 = _2905;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2905;
                    _3072 = _2906;
                    _3073 = _2907;
                    _3074 = _2908;
                    _3075 = _2909;
                    _3076 = _2910;
                    _3077 = _2920;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2911 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _1996;
                        float _3138 = _3097.y - _1997;
                        float _3139 = _3097.z - _1998;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_831, _834, _837), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4498 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _1996;
                        float _3173 = (-0.0) - _1997;
                        float _3174 = (-0.0) - _1998;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3188 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _907;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3179 + _3144;
                        float _3200 = _3180 + _3145;
                        float _3201 = _3181 + _3146;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_831, _834, _837), vec3(_3179, _3180, _3181));
                        float _4514 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3213 = dot(vec3(_831, _834, _837), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4525 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3157 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3147) + _3222;
                        float _4536 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4547 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3248 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) / ((_3220 * _3220) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3001 = (_3168 * _3116.x) + _3074;
                        _3002 = (_3168 * _3116.y) + _3075;
                        _3003 = (_3168 * _3116.z) + _3076;
                        _2998 = (_3248 * _3133.x) + _3071;
                        _2999 = (_3248 * _3133.y) + _3072;
                        _3000 = (_3248 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_103_pred = _2999;
                    frontier_phi_103_pred_1 = _3003;
                    frontier_phi_103_pred_2 = _3002;
                    frontier_phi_103_pred_3 = _3001;
                    frontier_phi_103_pred_4 = _3000;
                    frontier_phi_103_pred_5 = _2998;
                }
                _2730 = frontier_phi_103_pred;
                _2738 = frontier_phi_103_pred_1;
                _2736 = frontier_phi_103_pred_2;
                _2734 = frontier_phi_103_pred_3;
                _2732 = frontier_phi_103_pred_4;
                _2728 = frontier_phi_103_pred_5;
                uint _2912 = _2911 + 1u;
                if (_2912 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2905 = _2728;
                    _2906 = _2730;
                    _2907 = _2732;
                    _2908 = _2734;
                    _2909 = _2736;
                    _2910 = _2738;
                    _2911 = _2912;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
            _2737 = _2738;
        }
        uvec4 _2741 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2742 = _2741.z;
        uint _2744 = (_2742 >> 8u) & 15u;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((4294967295u << _2744) & _2603) == 0u)
        {
            _2873 = _2727;
            _2875 = _2729;
            _2877 = _2731;
            _2879 = _2733;
            _2881 = _2735;
            _2883 = _2737;
        }
        else
        {
            float _2898 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
            float _2899 = _2898 * _1996;
            float _2900 = _2898 * _1997;
            float _2901 = _2898 * _1998;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2744 < ((_2742 >> 12u) & 15u))
            {
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _2884;
                float _3054 = _2727;
                float _3055 = _2729;
                float _3056 = _2731;
                float _3057 = _2733;
                float _3058 = _2735;
                float _3059 = _2737;
                uint _3060 = _2744;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2597 << 5u) + (_2583 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3070)
                    {
                        frontier_phi_114_pred = _3059;
                        frontier_phi_114_pred_1 = _3058;
                        frontier_phi_114_pred_2 = _3057;
                        frontier_phi_114_pred_3 = _3056;
                        frontier_phi_114_pred_4 = _3055;
                        frontier_phi_114_pred_5 = _3054;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        uint _3281 = _3069;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3350;
                        vec4 _3365;
                        float _3411;
                        bool _3412;
                        for (;;)
                        {
                            uint _3292 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3337 = (_3292 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3292 * 40u) + 20u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3367 = (_3292 * 40u) + 24u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3386 = (_3292 * 40u) + 28u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3411 = fma(_1998, _3399.z, fma(_1997, _3399.y, _3399.x * _1996)) + _3399.w;
                            _3412 = !((fma(_1998, _3380.z, fma(_1997, _3380.y, _3380.x * _1996)) + _3380.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3412)
                            {
                                float _3439 = _3307.x - _1996;
                                float _3440 = _3307.y - _1997;
                                float _3441 = _3307.z - _1998;
                                float _3442 = dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441));
                                float _3445 = inversesqrt(_3442);
                                float _3446 = _3445 * _3439;
                                float _3447 = _3445 * _3440;
                                float _3448 = _3445 * _3441;
                                float _3452 = 1.0 - (_3442 / (_3308 * _3308));
                                float _4558 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3457 = sqrt(_3442) * _3323.w;
                                float _3459 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                                float _3460 = _3459 * _3459;
                                float _3463 = ((1.0 - _3460) * dot(vec3(_3446, _3447, _3448), vec3(_831, _834, _837))) + _3460;
                                float _3466 = _3457 * _3457;
                                float _3470 = (fma(_1998, _3350.z, fma(_1997, _3350.y, _3350.x * _1996)) + _3350.w) / _3411;
                                float _3471 = (fma(_1998, _3365.z, fma(_1997, _3365.y, _3365.x * _1996)) + _3365.w) / _3411;
                                float _3475 = 1.0 - dot(vec2(_3470, _3471), vec2(_3470, _3471));
                                float _4574 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3477 = _3476 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3453) / ((_3466 * 0.699999988079071044921875) + 1.0));
                                float _3489 = exp2(log2(1.0 / ((_3466 * 3.5) + 5.0)) * 0.25);
                                float _3490 = 1.0 - _907;
                                float _3497 = sqrt(1.0 - ((1.0 - (_3490 * _3490)) * (1.0 - (_3489 * _3489))));
                                float _3498 = _3497 * _3497;
                                float _3499 = _3498 * _3498;
                                float _3500 = _3446 - _2899;
                                float _3501 = _3447 - _2900;
                                float _3502 = _3448 - _2901;
                                float _3506 = inversesqrt(dot(vec3(_3500, _3501, _3502), vec3(_3500, _3501, _3502)));
                                float _3510 = dot(vec3(_831, _834, _837), vec3((-0.0) - _2899, (-0.0) - _2900, (-0.0) - _2901));
                                float _4585 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3514 = dot(vec3(_831, _834, _837), vec3(_3506 * _3500, _3506 * _3501, _3506 * _3502));
                                float _4596 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3521 = ((_3517 * _3517) * (_3499 + (-1.0))) + 1.0;
                                float _3522 = _3459 * _3498;
                                float _3523 = _3522 * _3522;
                                float _3529 = ((1.0 - _3523) * dot(vec3(_831, _834, _837), vec3(_3446, _3447, _3448))) + _3523;
                                float _4607 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3531 = 1.0 - _3498;
                                float _3541 = (0.5 / (((_3530 * ((_3513 * _3531) + _3498)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3498) * _3513))) * _3530;
                                float _4618 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3551 = (_3476 * _3453) * (((_3499 * 3.1415927410125732421875) * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) / ((_3521 * _3521) * ((_3466 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3477 * _3323.z;
                                frontier_phi_120_pred_1 = _3477 * _3323.y;
                                frontier_phi_120_pred_2 = _3477 * _3323.x;
                                frontier_phi_120_pred_3 = _3551 * _3335.z;
                                frontier_phi_120_pred_4 = _3551 * _3335.y;
                                frontier_phi_120_pred_5 = _3551 * _3335.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3560 = frontier_phi_120_pred;
                            _3559 = frontier_phi_120_pred_1;
                            _3558 = frontier_phi_120_pred_2;
                            _3557 = frontier_phi_120_pred_3;
                            _3556 = frontier_phi_120_pred_4;
                            _3555 = frontier_phi_120_pred_5;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3267;
                        frontier_phi_114_pred_1 = _3266;
                        frontier_phi_114_pred_2 = _3265;
                        frontier_phi_114_pred_3 = _3264;
                        frontier_phi_114_pred_4 = _3263;
                        frontier_phi_114_pred_5 = _3262;
                    }
                    _2884 = frontier_phi_114_pred;
                    _2882 = frontier_phi_114_pred_1;
                    _2880 = frontier_phi_114_pred_2;
                    _2878 = frontier_phi_114_pred_3;
                    _2876 = frontier_phi_114_pred_4;
                    _2874 = frontier_phi_114_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2874;
                        _3055 = _2876;
                        _3056 = _2878;
                        _3057 = _2880;
                        _3058 = _2882;
                        _3059 = _2884;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2880;
                frontier_phi_94_95_ladder_1 = _2884;
                frontier_phi_94_95_ladder_2 = _2882;
                frontier_phi_94_95_ladder_3 = _2878;
                frontier_phi_94_95_ladder_4 = _2876;
                frontier_phi_94_95_ladder_5 = _2874;
            }
            else
            {
                frontier_phi_94_95_ladder = _2733;
                frontier_phi_94_95_ladder_1 = _2737;
                frontier_phi_94_95_ladder_2 = _2735;
                frontier_phi_94_95_ladder_3 = _2731;
                frontier_phi_94_95_ladder_4 = _2729;
                frontier_phi_94_95_ladder_5 = _2727;
            }
            _2873 = frontier_phi_94_95_ladder_5;
            _2875 = frontier_phi_94_95_ladder_4;
            _2877 = frontier_phi_94_95_ladder_3;
            _2879 = frontier_phi_94_95_ladder;
            _2881 = frontier_phi_94_95_ladder_2;
            _2883 = frontier_phi_94_95_ladder_1;
        }
        float _2888 = isnan(1.0) ? _891 : (isnan(_891) ? 1.0 : min(_891, 1.0));
        _2616 = (_2888 * _2879) + _2284;
        _2618 = (_2888 * _2881) + _2285;
        _2620 = (_2888 * _2883) + _2286;
        _2622 = ((_2873 * _876) * _2888) + _2451;
        _2624 = ((_2875 * _878) * _2888) + _2452;
        _2626 = ((_2877 * _879) * _2888) + _2453;
    }
    else
    {
        _2616 = _2284;
        _2618 = _2285;
        _2620 = _2286;
        _2622 = _2451;
        _2624 = _2452;
        _2626 = _2453;
    }
    uint _2632 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _4634 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4645 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4656 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _2657 = (((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2616 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _891))) + ((_2622 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2632].x * ((_692 * ((_648 - _574) - (_648 * _296))) + _574));
    float _2659 = ((cbInstanceData._m0[_2632].y * ((_692 * ((_649 - _575) - (_649 * _296))) + _575)) + ((_2624 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2618 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _891)));
    float _2661 = ((cbInstanceData._m0[_2632].z * ((_692 * ((_650 - _576) - (_650 * _296))) + _576)) + ((_2626 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2620 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _891)));
    float _2662 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2663 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2664 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    uint _2665 = _850 + 6u;
    float _2673 = _811 / cbSceneParam._m0[86u].x;
    float _2674 = _812 / cbSceneParam._m0[86u].y;
    vec4 _2688 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, (log2((isnan(cbSceneParam._m0[77u].w) ? _784 : (isnan(_784) ? cbSceneParam._m0[77u].w : min(_784, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2690 = _2688.x;
    float _2691 = _2688.y;
    float _2692 = _2688.z;
    float _2693 = _2688.w;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_784 > cbSceneParam._m0[78u].w)
    {
        float _2752 = isnan(_784) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _784 : min(cbSceneParam._m0[80u].w, _784));
        float _2753 = _2752 / _784;
        float _2764 = _2753 * _269;
        float _2765 = _270 * _2753;
        float _2766 = (-0.0) - _2765;
        float _2767 = _2753 * _271;
        float _2769 = (cbSceneParam._m0[77u].w * _2766) / _2752;
        float _2770 = _2769 + cbSceneParam._m0[79u].w;
        float _2771 = cbSceneParam._m0[79u].w - _2765;
        float _2777 = sqrt(((_2764 * _2764) + (_2765 * _2765)) + (_2767 * _2767));
        float _2780 = (1.0 - (cbSceneParam._m0[77u].w / _2752)) * _2777;
        float _2785 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2787 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3011;
        if (abs((_2766 - _2769) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3011 = ((((_2770 > 0.0) ? exp2(_2785 * _2770) : (2.0 - exp2(_2787 * _2770))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2780;
        }
        else
        {
            float _2934 = 1.0 / cbSceneParam._m0[80u].x;
            float _2935 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : max(_2770, _2771));
            float _2936 = isnan(_2771) ? _2770 : (isnan(_2770) ? _2771 : min(_2770, _2771));
            float _2945 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : min(_2935, 0.0));
            float _2946 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : min(_2936, 0.0));
            _3011 = ((abs(_2777 / _2766) * cbSceneParam._m0[80u].y) * ((((_2945 - _2946) * 2.0) - ((exp2(_2785 * (isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0)))) - exp2(_2785 * (isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))))) * _2934)) - ((exp2(_2787 * _2945) - exp2(_2787 * _2946)) * _2934))) + (_2780 * cbSceneParam._m0[80u].z);
        }
        vec4 _3013 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2673, _2674, 1.0), 0.0);
        float _3022 = exp2((_3011 * (-1.44269502162933349609375)) * (1.0 - _3013.w));
        float _3023 = log2(_3022);
        float _3039 = log2(_2693);
        _2789 = (exp2(_3039 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].x)) * _3013.x) / cbSceneParam._m0[78u].x)) + _2690;
        _2791 = (exp2(_3039 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].y)) * _3013.y) / cbSceneParam._m0[78u].y)) + _2691;
        _2793 = (exp2(_3039 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3023 * cbSceneParam._m0[78u].z)) * _3013.z) / cbSceneParam._m0[78u].z)) + _2692;
        _2795 = _3022 * _2693;
    }
    else
    {
        _2789 = _2690;
        _2791 = _2691;
        _2793 = _2692;
        _2795 = _2693;
    }
    bool _3049;
    vec4 _2805;
    vec4 _2827;
    float _2829;
    float _2833;
    float _2834;
    float _2835;
    float _2836;
    bool _2846;
    for (;;)
    {
        _2805 = cbMatDynParam._m0[0u];
        float _2807 = roundEven(_2805.y);
        bool _2808 = _2807 == 3.0;
        float _2809 = log2(_2795);
        float _2816 = exp2(_2809 * cbSceneParam._m0[78u].x) * _2662;
        float _2817 = exp2(_2809 * cbSceneParam._m0[78u].y) * _2663;
        float _2818 = exp2(_2809 * cbSceneParam._m0[78u].z) * _2664;
        float _2825 = _798 + (-0.5);
        _2827 = cbMtdParam._m0[1u];
        _2829 = _2827.y * _2825;
        float _2832 = (_2807 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2833 = _2832 * (_2808 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2789)));
        _2834 = _2832 * (_2808 ? _2817 : (_2817 + (cbSceneParam._m0[72u].w * _2791)));
        _2835 = _2832 * (_2808 ? _2818 : (_2818 + (cbSceneParam._m0[72u].w * _2793)));
        _2836 = _2825 * 0.999000012874603271484375;
        _2846 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2846)
        {
            if ((cbInstanceData._m0[_850 + 7u].x + _2836) < 0.5)
            {
                _3049 = true;
                break;
            }
        }
        uint _2969 = _852 + uint(_2805.w);
        if ((cbInstanceData._m0[_2969].w < 1.0) && ((cbInstanceData._m0[_2969].w + _2836) < 0.5))
        {
            _3049 = true;
            break;
        }
        if ((_2829 + 1.0) < _2827.x)
        {
            _3049 = true;
            break;
        }
        _3049 = false;
        break;
    }
    float _3253;
    if (_3049)
    {
        discard_state = true;
        _3253 = 0.0;
    }
    else
    {
        _3253 = cbInstanceData._m0[_2665].w;
    }
    SV_Target.x = _2833;
    SV_Target.y = _2834;
    SV_Target.z = _2835;
    SV_Target.w = _3253;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2665].w;
    discard_exit();
}


