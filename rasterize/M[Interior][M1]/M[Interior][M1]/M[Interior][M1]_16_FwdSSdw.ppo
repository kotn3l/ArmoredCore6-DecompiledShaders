#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1257;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    float _568 = (_558 * ((_514 - _434) - (_514 * _290))) + _434;
    float _569 = (_558 * ((_515 - _435) - (_515 * _290))) + _435;
    float _570 = (_558 * ((_516 - _436) - (_516 * _290))) + _436;
    float _585 = (cbMtdParam._m0[21u].z * _349) * _355;
    float _587 = (cbMtdParam._m0[21u].y * _350) * _355;
    bool _588 = _585 > 0.0;
    float _593;
    if (_588)
    {
        _593 = (1.0 - _361) / _585;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _361) / _585;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _593 = frontier_phi_27_26_ladder;
    }
    bool _595 = _587 > 0.0;
    float _600;
    if (_595)
    {
        _600 = (1.0 - _362) / _587;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _362) / _587;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _600 = frontier_phi_31_30_ladder;
    }
    float _603 = _378 ? (cbMtdParam._m0[18u].x / _356) : 5000.0;
    float _604 = isnan(_600) ? _593 : (isnan(_593) ? _600 : min(_593, _600));
    float _605 = isnan(_603) ? _604 : (isnan(_604) ? _603 : min(_604, _603));
    float _609 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _613 = ((_605 * _356) + _609) / _609;
    float _618 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _620 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _637 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_387 + (_605 * _585)) / _613) + 0.5) + _618) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_390 + (_605 * _587)) / _613) + 0.5) + _620) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _642 = _637.x * cbMtdParam._m0[14u].x;
    float _643 = _637.y * cbMtdParam._m0[14u].y;
    float _644 = _637.z * cbMtdParam._m0[14u].z;
    float _652;
    if (_588)
    {
        _652 = (1.0 - _361) / _585;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _361) / _585;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _652 = frontier_phi_35_34_ladder;
    }
    float _658;
    if (_595)
    {
        _658 = (1.0 - _362) / _587;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _362) / _587;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _658 = frontier_phi_39_38_ladder;
    }
    float _660 = isnan(_658) ? _652 : (isnan(_652) ? _658 : min(_652, _658));
    float _661 = isnan(_603) ? _660 : (isnan(_660) ? _603 : min(_660, _603));
    float _668 = ((_661 * _356) + _609) / _609;
    vec4 _682 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_387 + (_661 * _585)) / _668) + 0.5) + _618) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_390 + (_661 * _587)) / _668) + 0.5) + _620) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _684 = _682.w;
    float _686 = _684 - (_684 * _290);
    float _697 = 0.5 - (_290 * 0.5);
    float _707 = (((_568 - _303) + (_686 * ((_642 - _568) - (_642 * _290)))) * _697) + _303;
    float _708 = (((_569 - _305) + (_686 * ((_643 - _569) - (_643 * _290)))) * _697) + _305;
    float _709 = (((_570 - _307) + (_686 * ((_644 - _570) - (_644 * _290)))) * _697) + _307;
    vec4 _721 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _723 = _721.x;
    vec4 _735 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _743 = (_735.x * 2.0) + (-1.0);
    float _745 = (_735.y * 2.0) + (-1.0);
    float _746 = dot(vec2(_743, _745), vec2(_743, _745));
    float _3448 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _751 = sqrt(1.0 - (isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))));
    float _752 = _735.z * _290;
    float _755 = fma(_751, _199, fma(_745, _206, _743 * _192));
    float _758 = fma(_751, _200, fma(_745, _207, _743 * _193));
    float _761 = fma(_751, _201, fma(_745, _208, _743 * _194));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    float _766 = _765 * _755;
    float _767 = _765 * _758;
    float _768 = _765 * _761;
    float _3459 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _769 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
    float _3470 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3481 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _3492 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3503 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _773 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _794 = _263 * _793;
    float _795 = _264 * _793;
    float _796 = _265 * _793;
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_768, cbSceneParam._m0[5u].z, fma(_767, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _766));
    float _826 = fma(_768, cbSceneParam._m0[6u].z, fma(_767, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _766));
    float _829 = fma(_768, cbSceneParam._m0[7u].z, fma(_767, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _766));
    uint _842 = uint(roundEven(NORMAL.w)) * 13u;
    uint _845 = (_842 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_845].z;
    float _3514 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
    float _3525 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    float _3536 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    float _857 = 1.0 - _773;
    float _858 = _854 * _857;
    float _859 = _855 * _857;
    float _860 = _856 * _857;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _773;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _773;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _773;
    float _868 = _865 + 0.039999999105930328369140625;
    float _870 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    vec4 _880 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _883 = _880.x * TEXCOORD.z;
    float _884 = dot(vec3(_766, _767, _768), vec3(_794, _795, _796));
    float _887 = _884 * 2.0;
    float _891 = (_887 * _766) - _794;
    float _892 = (_887 * _767) - _795;
    float _893 = (_887 * _768) - _796;
    float _897 = abs(dot(vec3(_794, _795, _796), vec3(_766, _767, _768)));
    float _3547 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _899 = sqrt(_769);
    float _912 = exp2((_899 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_899 * 3.0));
    float _918 = (1.0 - _912) * ((_899 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _919 = _912 * _899;
    float _947 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _951 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _955 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1256;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _983 = fma(_955, cbModelParam._m0[26u].z, fma(_951, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _947));
        float _987 = fma(_955, cbModelParam._m0[27u].z, fma(_951, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _947));
        float _991 = fma(_955, cbModelParam._m0[28u].z, fma(_951, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _947));
        float _1014 = _947 + _766;
        float _1015 = _951 + _767;
        float _1016 = _955 + _768;
        float _1026 = fma(_1016, cbModelParam._m0[26u].z, fma(_1015, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1014)) - _983;
        float _1027 = fma(_1016, cbModelParam._m0[27u].z, fma(_1015, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1014)) - _987;
        float _1028 = fma(_1016, cbModelParam._m0[28u].z, fma(_1015, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1014)) - _991;
        float _1032 = inversesqrt(dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028)));
        float _1045 = ((_1032 * _1026) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_983 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1032 * _1027) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_987 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1032 * _1028) / cbModelParam._m0[34u].z) + ((((((_991 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1064 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        vec4 _1071 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1045, _1046, _1047), 0.0);
        float _1084 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1050.x + (-0.5));
        float _1086 = _1084 * (_1050.y + (-0.5));
        float _1087 = _1084 * (_1050.z + (-0.5));
        float _1094 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1057.x + (-0.5));
        float _1096 = _1094 * (_1057.y + (-0.5));
        float _1097 = _1094 * (_1057.z + (-0.5));
        float _1104 = exp2((_1064.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1064.x + (-0.5));
        float _1106 = _1104 * (_1064.y + (-0.5));
        float _1107 = _1104 * (_1064.z + (-0.5));
        float _1114 = exp2((_1071.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1071.x + (-0.5));
        float _1116 = _1114 * (_1071.y + (-0.5));
        float _1117 = _1114 * (_1071.z + (-0.5));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = _1085 * 0.5;
        float _1122 = _1095 * 0.5;
        float _1123 = _1105 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1138 = (dot(vec3(_766, _767, _768), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1148 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3595 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1150 + 1.0))) + _1155) * _1118;
        float _1165 = _1086 * 0.5;
        float _1166 = _1096 * 0.5;
        float _1167 = _1106 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_766, _767, _768), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3628 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1192 + 1.0))) + _1197) * _1119;
        float _1207 = _1087 * 0.5;
        float _1208 = _1097 * 0.5;
        float _1209 = _1107 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_766, _767, _768), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3661 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1234 + 1.0))) + _1239) * _1120;
        _1256 = _1087;
        _1258 = _1086;
        _1259 = _1085;
        _1260 = _1097;
        _1261 = _1096;
        _1262 = _1095;
        _1263 = _1107;
        _1264 = _1106;
        _1265 = _1105;
        _1266 = _1120;
        _1267 = _1119;
        _1268 = _1118;
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
    }
    else
    {
        _1256 = _1257;
        _1258 = _1257;
        _1259 = _1257;
        _1260 = _1257;
        _1261 = _1257;
        _1262 = _1257;
        _1263 = _1257;
        _1264 = _1257;
        _1265 = _1257;
        _1266 = _1257;
        _1267 = _1257;
        _1268 = _1257;
        _1269 = 0.0;
        _1270 = 0.0;
        _1271 = 0.0;
    }
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1297 = fma(_955, cbModelParam._m0[30u].z, fma(_951, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _947));
        float _1301 = fma(_955, cbModelParam._m0[31u].z, fma(_951, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _947));
        float _1305 = fma(_955, cbModelParam._m0[32u].z, fma(_951, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _947));
        float _1328 = _947 + _766;
        float _1329 = _951 + _767;
        float _1330 = _955 + _768;
        float _1340 = fma(_1330, cbModelParam._m0[30u].z, fma(_1329, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1328)) - _1297;
        float _1341 = fma(_1330, cbModelParam._m0[31u].z, fma(_1329, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1328)) - _1301;
        float _1342 = fma(_1330, cbModelParam._m0[32u].z, fma(_1329, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1328)) - _1305;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1359 = ((_1346 * _1340) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1297 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1341) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1301 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1361 = ((_1346 * _1342) / cbModelParam._m0[35u].z) + ((((((_1305 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1359, _1360, _1361), 0.0);
        float _1396 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1363.x + (-0.5));
        float _1398 = _1396 * (_1363.y + (-0.5));
        float _1399 = _1396 * (_1363.z + (-0.5));
        float _1406 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1370.x + (-0.5));
        float _1408 = _1406 * (_1370.y + (-0.5));
        float _1409 = _1406 * (_1370.z + (-0.5));
        float _1416 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1377.x + (-0.5));
        float _1418 = _1416 * (_1377.y + (-0.5));
        float _1419 = _1416 * (_1377.z + (-0.5));
        float _1426 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1384.x + (-0.5));
        float _1428 = _1426 * (_1384.y + (-0.5));
        float _1429 = _1426 * (_1384.z + (-0.5));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = _1397 * 0.5;
        float _1434 = _1407 * 0.5;
        float _1435 = _1417 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_766, _767, _768), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3724 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1460 + 1.0))) + _1465) * _1430;
        float _1475 = _1398 * 0.5;
        float _1476 = _1408 * 0.5;
        float _1477 = _1418 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_766, _767, _768), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _3757 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1502 + 1.0))) + _1507) * _1431;
        float _1517 = _1399 * 0.5;
        float _1518 = _1409 * 0.5;
        float _1519 = _1419 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_766, _767, _768), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _3790 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1544 + 1.0))) + _1549) * _1432;
        _1566 = _1399;
        _1567 = _1398;
        _1568 = _1397;
        _1569 = _1409;
        _1570 = _1408;
        _1571 = _1407;
        _1572 = _1419;
        _1573 = _1418;
        _1574 = _1417;
        _1575 = _1432;
        _1576 = _1431;
        _1577 = _1430;
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
    }
    else
    {
        _1566 = _1257;
        _1567 = _1257;
        _1568 = _1257;
        _1569 = _1257;
        _1570 = _1257;
        _1571 = _1257;
        _1572 = _1257;
        _1573 = _1257;
        _1574 = _1257;
        _1575 = _1257;
        _1576 = _1257;
        _1577 = _1257;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1613 = fma(_1592, cbSceneParam._m0[89u].z, fma(_1591, cbSceneParam._m0[89u].y, _1590 * cbSceneParam._m0[89u].x));
    float _1616 = fma(_1592, cbSceneParam._m0[90u].z, fma(_1591, cbSceneParam._m0[90u].y, _1590 * cbSceneParam._m0[90u].x));
    float _1619 = fma(_1592, cbSceneParam._m0[91u].z, fma(_1591, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1590));
    float _1634 = _891 * 0.5;
    float _1635 = _892 * 0.5;
    float _1636 = _893 * 0.5;
    float _1637 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1640 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1643 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1677;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1650 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1256, _1260, _1263, _1266));
        float _1654 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1658 = dot(vec4(_1634, _1635, _1636, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1665 = dot(vec4(cbModelParam._m0[39u]), vec4(_1634, _1635, _1636, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1665) ? 0.0 : (isnan(0.0) ? _1665 : max(0.0, _1665))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1688;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1679 = dot(vec4(cbModelParam._m0[40u]), vec4(_1634, _1635, _1636, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1692 = (_1688 * cbModelParam._m0[1u].x) + (_1677 * (1.0 - cbModelParam._m0[1u].x));
    float _1702 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _769);
    float _1703 = isnan(_1702) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1702 : min(cbModelParam._m0[25u].z, _1702));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1750 = fma(_955, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _947)) + cbModelParam._m0[13u].w;
        float _1754 = fma(_955, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _947)) + cbModelParam._m0[14u].w;
        float _1758 = fma(_955, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _947)) + cbModelParam._m0[15u].w;
        float _1761 = fma(_893, cbModelParam._m0[13u].z, fma(_892, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _891));
        float _1764 = fma(_893, cbModelParam._m0[14u].z, fma(_892, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _891));
        float _1767 = fma(_893, cbModelParam._m0[15u].z, fma(_892, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _891));
        float _1795;
        if (_1761 > 0.0)
        {
            _1795 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1795 = frontier_phi_54_52_ladder;
        }
        float _2177;
        if (_1764 > 0.0)
        {
            _2177 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2177 = frontier_phi_63_59_ladder;
        }
        float _2477;
        if (_1767 > 0.0)
        {
            _2477 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2477 = frontier_phi_77_70_ladder;
        }
        float _2479 = isnan(_2177) ? _1795 : (isnan(_1795) ? _2177 : min(_1795, _2177));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1761) + _1750;
        float _2485 = (_2480 * _1764) + _1754;
        float _2486 = (_2480 * _1767) + _1758;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1703);
            frontier_phi_53_77_ladder = _2612.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2612.z * cbModelParam._m0[1u].y;
        }
        _1783 = frontier_phi_53_77_ladder;
        _1785 = frontier_phi_53_77_ladder_1;
        _1787 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_891, _892, _893), _1703);
        _1783 = _1771.x * cbModelParam._m0[1u].y;
        _1785 = _1771.y * cbModelParam._m0[1u].y;
        _1787 = _1771.z * cbModelParam._m0[1u].y;
    }
    float _1791 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _769);
    float _1792 = isnan(_1791) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1791 : min(cbModelParam._m0[25u].w, _1791));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_955, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _947)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_955, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _947)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_955, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _947)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_893, cbModelParam._m0[21u].z, fma(_892, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _891));
        float _1858 = fma(_893, cbModelParam._m0[22u].z, fma(_892, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _891));
        float _1861 = fma(_893, cbModelParam._m0[23u].z, fma(_892, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _891));
        float _2182;
        if (_1855 > 0.0)
        {
            _2182 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2182 = frontier_phi_65_61_ladder;
        }
        float _2503;
        if (_1858 > 0.0)
        {
            _2503 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2503 = frontier_phi_79_72_ladder;
        }
        float _2672;
        if (_1861 > 0.0)
        {
            _2672 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2672 = frontier_phi_93_88_ladder;
        }
        float _2674 = isnan(_2503) ? _2182 : (isnan(_2182) ? _2503 : min(_2182, _2503));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1855) + _1844;
        float _2680 = (_2675 * _1858) + _1848;
        float _2681 = (_2675 * _1861) + _1852;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1792);
            frontier_phi_62_93_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_62_93_ladder_2;
        _1882 = frontier_phi_62_93_ladder_1;
        _1884 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_891, _892, _893), _1792);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1897 = (((_918 * _868) + _919) * _883) * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1899 = (((_918 * _870) + _919) * _883) * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1901 = (((_918 * _871) + _919) * _883) * ((cbModelParam._m0[1u].w * (_1884 - _1787)) + _1787);
    float _1904 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1899, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1907 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1899, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1910 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1899, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    vec4 _1918 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_802, _803));
    float _1920 = _1918.w;
    float _1932 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1920);
    float _1933 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1920);
    float _1934 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1920);
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_842 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1946 = _883 + (-1.0);
    float _1949 = (cbLight._m0[_1941].x * _1946) + 1.0;
    float _1950 = (cbLight._m0[_1941].y * _1946) + 1.0;
    uint _1951 = _1940 + 5u;
    float _1957 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1961 = _1940 + 4u;
    float _1970 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1974 = _1940 | 1u;
    float _1985 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_766, _767, _768));
    float _1988 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_766, _767, _768));
    float _3926 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _3937 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1993 = (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0))) * 0.3183098733425140380859375;
    float _1995 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * 0.3183098733425140380859375;
    float _2002 = ((cbLight._m0[_1951].x * _1957) * _1995) + (((cbLight._m0[_1961].x * _1932) * _1970) * _1993);
    float _2003 = ((_1957 * cbLight._m0[_1951].y) * _1995) + (((cbLight._m0[_1961].y * _1933) * _1970) * _1993);
    float _2004 = ((_1957 * cbLight._m0[_1951].z) * _1995) + (((cbLight._m0[_1961].z * _1934) * _1970) * _1993);
    uint _2006 = _1940 + 8u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _769) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1940].x + _794;
    float _2022 = cbLight._m0[_1940].y + _795;
    float _2023 = cbLight._m0[_1940].z + _796;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_1940].xyz));
    float _3948 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _2035 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _2036 = dot(vec3(_766, _767, _768), vec3(_2028, _2029, _2030));
    float _3970 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _2039 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _2040 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2028, _2029, _2030));
    float _3981 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2044 = _2020 * _2020;
    float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
    float _2056 = exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0);
    float _2057 = 0.959999978542327880859375 - _865;
    float _2059 = 0.959999978542327880859375 - _866;
    float _2060 = 0.959999978542327880859375 - _867;
    float _2067 = 1.0 - _2020;
    float _2078 = (0.5 / (((_2035 * ((_2034 * _2067) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2067) + _2020) * _2034))) * _2034;
    float _3992 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
    uint _2094 = _1940 + 9u;
    float _2105 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _769) * 0.949999988079071044921875);
    float _2106 = _2105 * _2105;
    float _2107 = cbLight._m0[_1974].x + _794;
    float _2108 = cbLight._m0[_1974].y + _795;
    float _2109 = cbLight._m0[_1974].z + _796;
    float _2113 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
    float _2114 = _2113 * _2107;
    float _2115 = _2113 * _2108;
    float _2116 = _2113 * _2109;
    float _2117 = dot(vec3(_766, _767, _768), vec3(cbLight._m0[_1974].xyz));
    float _4003 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _2121 = dot(vec3(_766, _767, _768), vec3(_2114, _2115, _2116));
    float _4014 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2114, _2115, _2116));
    float _4025 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2106 * _2106;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2140 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
    float _2147 = 1.0 - _2106;
    float _2157 = (0.5 / (((_2035 * ((_2120 * _2147) + _2106)) + 9.9999999392252902907785028219223e-09) + (((_2035 * _2147) + _2106) * _2120))) * _2120;
    float _4036 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    float _2169 = (((((_2140 * _2057) + _868) * cbLight._m0[_2094].x) * _2159) * _1957) + ((((cbLight._m0[_2006].x * _1932) * ((_2056 * _2057) + _868)) * _2080) * _1970);
    float _2170 = (((((_2140 * _2059) + _870) * cbLight._m0[_2094].y) * _2159) * _1957) + ((((cbLight._m0[_2006].y * _1933) * ((_2056 * _2059) + _870)) * _2080) * _1970);
    float _2171 = (((((_2140 * _2060) + _871) * cbLight._m0[_2094].z) * _2159) * _1957) + ((((cbLight._m0[_2006].z * _1934) * ((_2056 * _2060) + _871)) * _2080) * _1970);
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    float _2296;
    if (_1938.y == 0u)
    {
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2226;
        float _2228 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2226;
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2226;
        uvec4 _2241 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2242 = _2241.x;
        uint _2253 = uint((float(_2241.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2242))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2242)));
        float _2263 = (log2(_2229 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2264 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        uint _2267 = uint(isnan(14.0) ? _2264 : (isnan(_2264) ? 14.0 : min(_2264, 14.0)));
        uvec4 _2272 = texelFetch(g_lightClusterGridBuffer, int(((_2267 << 2u) + (_2253 << 6u)) >> 2u));
        uint _2273 = _2272.x;
        uint _2274 = _2241.z;
        float _2364;
        float _2366;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        if (((((1u << ((_2274 >> 4u) & 15u)) + 4294967295u) & _2273) == 0u) || ((_2274 & 240u) == 0u))
        {
            _2364 = 0.0;
            _2366 = 0.0;
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
        }
        else
        {
            float _2365;
            float _2367;
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2540 = 0.0;
            float _2541 = 0.0;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            uint _2546 = 0u;
            uint _2555;
            bool _2556;
            for (;;)
            {
                _2555 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                _2556 = _2555 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2556)
                {
                    frontier_phi_90_pred = _2545;
                    frontier_phi_90_pred_1 = _2540;
                    frontier_phi_90_pred_2 = _2541;
                    frontier_phi_90_pred_3 = _2542;
                    frontier_phi_90_pred_4 = _2543;
                    frontier_phi_90_pred_5 = _2544;
                }
                else
                {
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    uint _2721;
                    _2715 = _2540;
                    _2716 = _2541;
                    _2717 = _2542;
                    _2718 = _2543;
                    _2719 = _2544;
                    _2720 = _2545;
                    _2721 = _2555;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    float _2625;
                    float _2626;
                    for (;;)
                    {
                        uint _2725 = uint(findLSB(_2721)) + (_2546 << 5u);
                        uint _2722 = (_2721 + 4294967295u) & _2721;
                        uint _2727 = _2725 * 48u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 3u)).x));
                        uint _2747 = (_2725 * 48u) + 4u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2766 = (_2725 * 48u) + 8u;
                        vec3 _2777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x));
                        float _2781 = _2741.x - _2227;
                        float _2782 = _2741.y - _2228;
                        float _2783 = _2741.z - _2229;
                        float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                        float _2787 = inversesqrt(_2784);
                        float _2788 = _2787 * _2781;
                        float _2789 = _2787 * _2782;
                        float _2790 = _2787 * _2783;
                        float _2791 = dot(vec3(_823, _826, _829), vec3(_2788, _2789, _2790));
                        float _2796 = 1.0 - (_2784 * _2741.w);
                        float _4057 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                        float _2798 = sqrt(_2784) * _2760.w;
                        float _2801 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * _2791) + _2802;
                        float _2808 = _2798 * _2798;
                        float _2812 = ((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2797) / ((_2808 * 0.699999988079071044921875) + 1.0);
                        float _2816 = (-0.0) - _2227;
                        float _2817 = (-0.0) - _2228;
                        float _2818 = (-0.0) - _2229;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2823 = _2822 * _2816;
                        float _2824 = _2822 * _2817;
                        float _2825 = _2822 * _2818;
                        float _2833 = exp2(log2(1.0 / ((_2808 * 3.5) + 5.0)) * 0.25);
                        float _2834 = 1.0 - _899;
                        float _2841 = sqrt(1.0 - ((1.0 - (_2834 * _2834)) * (1.0 - (_2833 * _2833))));
                        float _2842 = _2841 * _2841;
                        float _2843 = _2842 * _2842;
                        float _2844 = _2823 + _2788;
                        float _2845 = _2824 + _2789;
                        float _2846 = _2825 + _2790;
                        float _2850 = inversesqrt(dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846)));
                        float _2854 = dot(vec3(_823, _826, _829), vec3(_2823, _2824, _2825));
                        float _4073 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                        float _2858 = dot(vec3(_823, _826, _829), vec3(_2850 * _2844, _2850 * _2845, _2850 * _2846));
                        float _4084 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
                        float _2861 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2865 = ((_2861 * _2861) * (_2843 + (-1.0))) + 1.0;
                        float _2866 = _2801 * _2842;
                        float _2867 = _2866 * _2866;
                        float _2870 = ((1.0 - _2867) * _2791) + _2867;
                        float _4095 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2871 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                        float _2872 = 1.0 - _2842;
                        float _2882 = (0.5 / (((_2871 * ((_2857 * _2872) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2871 * _2872) + _2842) * _2857))) * _2871;
                        float _4106 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
                        float _2893 = (((_2843 * 3.1415927410125732421875) * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) / ((_2865 * _2865) * ((_2808 * 2.1991131305694580078125) + 3.141590118408203125))) * _2797;
                        _2624 = (_2812 * _2760.x) + _2718;
                        _2625 = (_2812 * _2760.y) + _2719;
                        _2626 = (_2812 * _2760.z) + _2720;
                        _2621 = (_2893 * _2777.x) + _2715;
                        _2622 = (_2893 * _2777.y) + _2716;
                        _2623 = (_2893 * _2777.z) + _2717;
                        if (_2722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2715 = _2621;
                            _2716 = _2622;
                            _2717 = _2623;
                            _2718 = _2624;
                            _2719 = _2625;
                            _2720 = _2626;
                            _2721 = _2722;
                        }
                    }
                    frontier_phi_90_pred = _2626;
                    frontier_phi_90_pred_1 = _2621;
                    frontier_phi_90_pred_2 = _2622;
                    frontier_phi_90_pred_3 = _2623;
                    frontier_phi_90_pred_4 = _2624;
                    frontier_phi_90_pred_5 = _2625;
                }
                _2375 = frontier_phi_90_pred;
                _2365 = frontier_phi_90_pred_1;
                _2367 = frontier_phi_90_pred_2;
                _2369 = frontier_phi_90_pred_3;
                _2371 = frontier_phi_90_pred_4;
                _2373 = frontier_phi_90_pred_5;
                uint _2547 = _2546 + 1u;
                if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2540 = _2365;
                    _2541 = _2367;
                    _2542 = _2369;
                    _2543 = _2371;
                    _2544 = _2373;
                    _2545 = _2375;
                    _2546 = _2547;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2364 = _2365;
            _2366 = _2367;
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
        }
        uvec4 _2378 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2379 = _2378.z;
        uint _2381 = (_2379 >> 8u) & 15u;
        float _2508;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        if (((4294967295u << _2381) & _2273) == 0u)
        {
            _2508 = _2364;
            _2510 = _2366;
            _2512 = _2368;
            _2514 = _2370;
            _2516 = _2372;
            _2518 = _2374;
        }
        else
        {
            float _2533 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
            float _2534 = _2533 * _2227;
            float _2535 = _2533 * _2228;
            float _2536 = _2533 * _2229;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2381 < ((_2379 >> 12u) & 15u))
            {
                float _2509;
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2698 = _2364;
                float _2699 = _2366;
                float _2700 = _2368;
                float _2701 = _2370;
                float _2702 = _2372;
                float _2703 = _2374;
                uint _2704 = _2381;
                uint _2713;
                bool _2714;
                for (;;)
                {
                    _2713 = texelFetch(g_lightClassification, int((((_2267 << 5u) + (_2253 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                    _2714 = _2713 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2714)
                    {
                        frontier_phi_99_pred = _2701;
                        frontier_phi_99_pred_1 = _2700;
                        frontier_phi_99_pred_2 = _2699;
                        frontier_phi_99_pred_3 = _2698;
                        frontier_phi_99_pred_4 = _2703;
                        frontier_phi_99_pred_5 = _2702;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2932 = _2698;
                        float _2933 = _2699;
                        float _2934 = _2700;
                        float _2935 = _2701;
                        float _2936 = _2702;
                        float _2937 = _2703;
                        uint _2938 = _2713;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3007;
                        vec4 _3022;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2949 = ((_2704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2994 = (_2949 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2949 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2949 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2949 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2229, _3056.z, fma(_2228, _3056.y, _3056.x * _2227)) + _3056.w;
                            _3069 = !((fma(_2229, _3037.z, fma(_2228, _3037.y, _3037.x * _2227)) + _3037.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2964.x - _2227;
                                float _3097 = _2964.y - _2228;
                                float _3098 = _2964.z - _2229;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2965 * _2965));
                                float _4117 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
                                float _3114 = sqrt(_3099) * _2980.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_823, _826, _829))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2229, _3007.z, fma(_2228, _3007.y, _3007.x * _2227)) + _3007.w) / _3068;
                                float _3128 = (fma(_2229, _3022.z, fma(_2228, _3022.y, _3022.x * _2227)) + _3022.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4133 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _899;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2534;
                                float _3158 = _3104 - _2535;
                                float _3159 = _3105 - _2536;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_823, _826, _829), vec3((-0.0) - _2534, (-0.0) - _2535, (-0.0) - _2536));
                                float _4144 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3171 = dot(vec3(_823, _826, _829), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4155 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_823, _826, _829), vec3(_3103, _3104, _3105))) + _3180;
                                float _4166 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4177 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3134 * _2980.z;
                                frontier_phi_105_pred_1 = _3208 * _2992.x;
                                frontier_phi_105_pred_2 = _3208 * _2992.y;
                                frontier_phi_105_pred_3 = _3208 * _2992.z;
                                frontier_phi_105_pred_4 = _3134 * _2980.x;
                                frontier_phi_105_pred_5 = _3134 * _2980.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3217 = frontier_phi_105_pred;
                            _3212 = frontier_phi_105_pred_1;
                            _3213 = frontier_phi_105_pred_2;
                            _3214 = frontier_phi_105_pred_3;
                            _3215 = frontier_phi_105_pred_4;
                            _3216 = frontier_phi_105_pred_5;
                            _2922 = _3215 + _2935;
                            _2923 = _3216 + _2936;
                            _2924 = _3217 + _2937;
                            _2919 = _3212 + _2932;
                            _2920 = _3213 + _2933;
                            _2921 = _3214 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2922;
                        frontier_phi_99_pred_1 = _2921;
                        frontier_phi_99_pred_2 = _2920;
                        frontier_phi_99_pred_3 = _2919;
                        frontier_phi_99_pred_4 = _2924;
                        frontier_phi_99_pred_5 = _2923;
                    }
                    _2515 = frontier_phi_99_pred;
                    _2513 = frontier_phi_99_pred_1;
                    _2511 = frontier_phi_99_pred_2;
                    _2509 = frontier_phi_99_pred_3;
                    _2519 = frontier_phi_99_pred_4;
                    _2517 = frontier_phi_99_pred_5;
                    uint _2705 = _2704 + 1u;
                    if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2698 = _2509;
                        _2699 = _2511;
                        _2700 = _2513;
                        _2701 = _2515;
                        _2702 = _2517;
                        _2703 = _2519;
                        _2704 = _2705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2519;
                frontier_phi_81_82_ladder_1 = _2515;
                frontier_phi_81_82_ladder_2 = _2513;
                frontier_phi_81_82_ladder_3 = _2511;
                frontier_phi_81_82_ladder_4 = _2509;
                frontier_phi_81_82_ladder_5 = _2517;
            }
            else
            {
                frontier_phi_81_82_ladder = _2374;
                frontier_phi_81_82_ladder_1 = _2370;
                frontier_phi_81_82_ladder_2 = _2368;
                frontier_phi_81_82_ladder_3 = _2366;
                frontier_phi_81_82_ladder_4 = _2364;
                frontier_phi_81_82_ladder_5 = _2372;
            }
            _2508 = frontier_phi_81_82_ladder_4;
            _2510 = frontier_phi_81_82_ladder_3;
            _2512 = frontier_phi_81_82_ladder_2;
            _2514 = frontier_phi_81_82_ladder_1;
            _2516 = frontier_phi_81_82_ladder_5;
            _2518 = frontier_phi_81_82_ladder;
        }
        float _2523 = isnan(1.0) ? _883 : (isnan(_883) ? 1.0 : min(_883, 1.0));
        _2286 = (_2523 * _2514) + _2002;
        _2288 = (_2523 * _2516) + _2003;
        _2290 = (_2523 * _2518) + _2004;
        _2292 = ((_2508 * _868) * _2523) + _2169;
        _2294 = ((_2510 * _870) * _2523) + _2170;
        _2296 = ((_2512 * _871) * _2523) + _2171;
    }
    else
    {
        _2286 = _2002;
        _2288 = _2003;
        _2290 = _2004;
        _2292 = _2169;
        _2294 = _2170;
        _2296 = _2171;
    }
    float _4193 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4204 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4215 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _2313 = ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2286 + ((isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))) * _883))) + ((_2292 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2314 = ((isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_2288 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _883))) + ((_2294 + ((isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    float _2315 = ((isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2290 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _883))) + ((_2296 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1692)) * cbPerFrame._m0[3u].x);
    uint _2319 = _842 + 6u;
    float _2327 = _802 / cbSceneParam._m0[86u].x;
    float _2328 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2342 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2344 = _2342.x;
    float _2345 = _2342.y;
    float _2346 = _2342.z;
    float _2347 = _2342.w;
    float _2427;
    float _2429;
    float _2431;
    float _2433;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2389 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2390 = _2389 / _789;
        float _2401 = _2390 * _263;
        float _2402 = _264 * _2390;
        float _2403 = (-0.0) - _2402;
        float _2404 = _2390 * _265;
        float _2406 = (cbSceneParam._m0[77u].w * _2403) / _2389;
        float _2407 = _2406 + cbSceneParam._m0[79u].w;
        float _2408 = cbSceneParam._m0[79u].w - _2402;
        float _2414 = sqrt(((_2401 * _2401) + (_2402 * _2402)) + (_2404 * _2404));
        float _2417 = (1.0 - (cbSceneParam._m0[77u].w / _2389)) * _2414;
        float _2423 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2425 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2634;
        if (abs((_2403 - _2406) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2634 = ((((_2407 > 0.0) ? exp2(_2423 * _2407) : (2.0 - exp2(_2425 * _2407))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2417;
        }
        else
        {
            float _2569 = 1.0 / cbSceneParam._m0[80u].x;
            float _2570 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : max(_2407, _2408));
            float _2571 = isnan(_2408) ? _2407 : (isnan(_2407) ? _2408 : min(_2407, _2408));
            float _2580 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : min(_2570, 0.0));
            float _2581 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : min(_2571, 0.0));
            _2634 = ((abs(_2414 / _2403) * cbSceneParam._m0[80u].y) * ((((_2580 - _2581) * 2.0) - ((exp2(_2423 * (isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0)))) - exp2(_2423 * (isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0))))) * _2569)) - ((exp2(_2425 * _2580) - exp2(_2425 * _2581)) * _2569))) + (_2417 * cbSceneParam._m0[80u].z);
        }
        vec4 _2636 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2327, _2328, 1.0), 0.0);
        float _2645 = exp2((_2634 * (-1.44269502162933349609375)) * (1.0 - _2636.w));
        float _2646 = log2(_2645);
        float _2662 = log2(_2347);
        _2427 = (exp2(_2662 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].x)) * _2636.x) / cbSceneParam._m0[78u].x)) + _2344;
        _2429 = (exp2(_2662 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].y)) * _2636.y) / cbSceneParam._m0[78u].y)) + _2345;
        _2431 = (exp2(_2662 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2646 * cbSceneParam._m0[78u].z)) * _2636.z) / cbSceneParam._m0[78u].z)) + _2346;
        _2433 = _2645 * _2347;
    }
    else
    {
        _2427 = _2344;
        _2429 = _2345;
        _2431 = _2346;
        _2433 = _2347;
    }
    float _2445 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2446 = _2445 == 3.0;
    float _2447 = log2(_2433);
    float _2454 = exp2(_2447 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0)));
    float _2455 = exp2(_2447 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0)));
    float _2456 = exp2(_2447 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0)));
    float _2465 = (_2445 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2465 * (_2446 ? _2454 : (_2454 + (cbSceneParam._m0[72u].w * _2427)));
    SV_Target.y = _2465 * (_2446 ? _2455 : (_2455 + (cbSceneParam._m0[72u].w * _2429)));
    SV_Target.z = _2465 * (_2446 ? _2456 : (_2456 + (cbSceneParam._m0[72u].w * _2431)));
    SV_Target.w = cbInstanceData._m0[_2319].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2319].w;
}


