#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1028;
float _3453;
float _3454;
float _3455;
float _3456;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    float _382 = (_358 > 0.0) ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_363 + (-0.5)) + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_364 + (-0.5)) + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    vec4 _450 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = _450.x;
    vec4 _464 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _472 = (_464.x * 2.0) + (-1.0);
    float _474 = (_464.y * 2.0) + (-1.0);
    float _475 = dot(vec2(_472, _474), vec2(_472, _474));
    float _3475 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _480 = sqrt(1.0 - (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))));
    float _481 = _464.z * _292;
    float _484 = fma(_480, _201, fma(_474, _208, _472 * _194));
    float _487 = fma(_480, _202, fma(_474, _209, _472 * _195));
    float _490 = fma(_480, _203, fma(_474, _210, _472 * _196));
    float _494 = inversesqrt(dot(vec3(_484, _487, _490), vec3(_484, _487, _490)));
    float _495 = _494 * _484;
    float _496 = _494 * _487;
    float _497 = _494 * _490;
    float _3486 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _498 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3508 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3519 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3530 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _502 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _518 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _522 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _523 = _265 * _522;
    float _524 = _266 * _522;
    float _525 = _267 * _522;
    vec4 _530 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _532 = _530.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _709 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _715 = (cbMatDynParam._m0[5u].x * _709) + cbMatDynParam._m0[5u].y;
        float _3541 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _720 = (cbMatDynParam._m0[5u].z * _709) + cbMatDynParam._m0[5u].w;
        float _3552 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) - _716)) + _716) < ((_532 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _545 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _546 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _566 = fma(_497, cbSceneParam._m0[5u].z, fma(_496, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _495));
    float _569 = fma(_497, cbSceneParam._m0[6u].z, fma(_496, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _495));
    float _572 = fma(_497, cbSceneParam._m0[7u].z, fma(_496, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _495));
    uint _585 = uint(roundEven(NORMAL.w)) * 13u;
    uint _587 = _585 + 9u;
    uint _588 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _594 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_588].x;
    float _595 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0)))) * cbInstanceData._m0[_588].y;
    float _596 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_588].z;
    float _3563 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _598 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    float _3585 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _599 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _600 = 1.0 - _502;
    float _601 = _597 * _600;
    float _602 = _598 * _600;
    float _603 = _599 * _600;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _502;
    float _609 = (_598 + (-0.039999999105930328369140625)) * _502;
    float _610 = (_599 + (-0.039999999105930328369140625)) * _502;
    float _611 = _608 + 0.039999999105930328369140625;
    float _613 = _609 + 0.039999999105930328369140625;
    float _614 = _610 + 0.039999999105930328369140625;
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _545, cbSceneParam._m0[86u].y * _546));
    float _626 = _623.x * TEXCOORD.z;
    float _627 = dot(vec3(_495, _496, _497), vec3(_523, _524, _525));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _495) - _523;
    float _635 = (_630 * _496) - _524;
    float _636 = (_630 * _497) - _525;
    float _640 = abs(dot(vec3(_523, _524, _525), vec3(_495, _496, _497)));
    float _3596 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_498);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _661 = (1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _662 = _655 * _642;
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_698, cbModelParam._m0[26u].z, fma(_694, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _690));
        float _758 = fma(_698, cbModelParam._m0[27u].z, fma(_694, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _690));
        float _762 = fma(_698, cbModelParam._m0[28u].z, fma(_694, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _690));
        float _785 = _690 + _495;
        float _786 = _694 + _496;
        float _787 = _698 + _497;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _754;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _758;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _762;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_495, _496, _497), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3644 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_495, _496, _497), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3677 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_495, _496, _497), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3710 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1071 = fma(_698, cbModelParam._m0[30u].z, fma(_694, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _690));
        float _1075 = fma(_698, cbModelParam._m0[31u].z, fma(_694, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _690));
        float _1079 = fma(_698, cbModelParam._m0[32u].z, fma(_694, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _690));
        float _1102 = _690 + _495;
        float _1103 = _694 + _496;
        float _1104 = _698 + _497;
        float _1114 = fma(_1104, cbModelParam._m0[30u].z, fma(_1103, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1102)) - _1071;
        float _1115 = fma(_1104, cbModelParam._m0[31u].z, fma(_1103, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1102)) - _1075;
        float _1116 = fma(_1104, cbModelParam._m0[32u].z, fma(_1103, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1102)) - _1079;
        float _1120 = inversesqrt(dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116)));
        float _1133 = ((_1120 * _1114) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1071 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1120 * _1115) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1075 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1135 = ((_1120 * _1116) / cbModelParam._m0[35u].z) + ((((((_1079 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1133, _1134, _1135), 0.0);
        float _1170 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1137.x + (-0.5));
        float _1172 = _1170 * (_1137.y + (-0.5));
        float _1173 = _1170 * (_1137.z + (-0.5));
        float _1180 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1144.x + (-0.5));
        float _1182 = _1180 * (_1144.y + (-0.5));
        float _1183 = _1180 * (_1144.z + (-0.5));
        float _1190 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1151.x + (-0.5));
        float _1192 = _1190 * (_1151.y + (-0.5));
        float _1193 = _1190 * (_1151.z + (-0.5));
        float _1200 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1158.x + (-0.5));
        float _1202 = _1200 * (_1158.y + (-0.5));
        float _1203 = _1200 * (_1158.z + (-0.5));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = _1171 * 0.5;
        float _1208 = _1181 * 0.5;
        float _1209 = _1191 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_495, _496, _497), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3773 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1234 + 1.0))) + _1239) * _1204;
        float _1249 = _1172 * 0.5;
        float _1250 = _1182 * 0.5;
        float _1251 = _1192 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_495, _496, _497), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3806 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1276 + 1.0))) + _1281) * _1205;
        float _1291 = _1173 * 0.5;
        float _1292 = _1183 * 0.5;
        float _1293 = _1193 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_495, _496, _497), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3839 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1318 + 1.0))) + _1323) * _1206;
        _1340 = _1173;
        _1341 = _1172;
        _1342 = _1171;
        _1343 = _1183;
        _1344 = _1182;
        _1345 = _1181;
        _1346 = _1193;
        _1347 = _1192;
        _1348 = _1191;
        _1349 = _1206;
        _1350 = _1205;
        _1351 = _1204;
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1354 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = _1028;
        _1350 = _1028;
        _1351 = _1028;
        _1352 = 0.0;
        _1353 = 0.0;
        _1354 = 0.0;
    }
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1041)) + _1041;
    float _1366 = (cbModelParam._m0[1u].x * (_1354 - _1042)) + _1042;
    float _1387 = fma(_1366, cbSceneParam._m0[89u].z, fma(_1365, cbSceneParam._m0[89u].y, _1364 * cbSceneParam._m0[89u].x));
    float _1390 = fma(_1366, cbSceneParam._m0[90u].z, fma(_1365, cbSceneParam._m0[90u].y, _1364 * cbSceneParam._m0[90u].x));
    float _1393 = fma(_1366, cbSceneParam._m0[91u].z, fma(_1365, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1364));
    float _1408 = _634 * 0.5;
    float _1409 = _635 * 0.5;
    float _1410 = _636 * 0.5;
    float _1411 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1342, _1345, _1348, _1351));
    float _1414 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1417 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1451;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1424 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1428 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1432 = dot(vec4(_1408, _1409, _1410, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1439 = dot(vec4(cbModelParam._m0[39u]), vec4(_1408, _1409, _1410, 1.0));
        _1451 = dot(vec3(isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1451 = 1.0;
    }
    float _1462;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1453 = dot(vec4(cbModelParam._m0[40u]), vec4(_1408, _1409, _1410, 1.0));
        _1462 = dot(vec3(isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1462 = 1.0;
    }
    float _1466 = (_1462 * cbModelParam._m0[1u].x) + (_1451 * (1.0 - cbModelParam._m0[1u].x));
    float _1476 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _498);
    float _1477 = isnan(_1476) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1476 : min(cbModelParam._m0[25u].z, _1476));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1525 = fma(_698, cbModelParam._m0[13u].z, fma(_694, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690)) + cbModelParam._m0[13u].w;
        float _1529 = fma(_698, cbModelParam._m0[14u].z, fma(_694, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690)) + cbModelParam._m0[14u].w;
        float _1533 = fma(_698, cbModelParam._m0[15u].z, fma(_694, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690)) + cbModelParam._m0[15u].w;
        float _1536 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1539 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1542 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1570;
        if (_1536 > 0.0)
        {
            _1570 = abs((1.0 - _1525) / _1536);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1525 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1570 = frontier_phi_25_23_ladder;
        }
        float _1741;
        if (_1539 > 0.0)
        {
            _1741 = abs((1.0 - _1529) / _1539);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1529 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1741 = frontier_phi_34_30_ladder;
        }
        float _2196;
        if (_1542 > 0.0)
        {
            _2196 = abs((1.0 - _1533) / _1542);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1533 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2196 = frontier_phi_46_41_ladder;
        }
        float _2198 = isnan(_1741) ? _1570 : (isnan(_1570) ? _1741 : min(_1570, _1741));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1536) + _1525;
        float _2204 = (_2199 * _1539) + _1529;
        float _2205 = (_2199 * _1542) + _1533;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1477);
            frontier_phi_24_46_ladder = _2455.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2455.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2455.x * cbModelParam._m0[1u].y;
        }
        _1558 = frontier_phi_24_46_ladder_2;
        _1560 = frontier_phi_24_46_ladder_1;
        _1562 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1477);
        _1558 = _1546.x * cbModelParam._m0[1u].y;
        _1560 = _1546.y * cbModelParam._m0[1u].y;
        _1562 = _1546.z * cbModelParam._m0[1u].y;
    }
    float _1566 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _498);
    float _1567 = isnan(_1566) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1566 : min(cbModelParam._m0[25u].w, _1566));
    float _1656;
    float _1658;
    float _1660;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1620 = fma(_698, cbModelParam._m0[21u].z, fma(_694, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690)) + cbModelParam._m0[21u].w;
        float _1624 = fma(_698, cbModelParam._m0[22u].z, fma(_694, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690)) + cbModelParam._m0[22u].w;
        float _1628 = fma(_698, cbModelParam._m0[23u].z, fma(_694, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690)) + cbModelParam._m0[23u].w;
        float _1631 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1634 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1637 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1746;
        if (_1631 > 0.0)
        {
            _1746 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1746 = frontier_phi_36_32_ladder;
        }
        float _2223;
        if (_1634 > 0.0)
        {
            _2223 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2223 = frontier_phi_48_43_ladder;
        }
        float _2584;
        if (_1637 > 0.0)
        {
            _2584 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2584 = frontier_phi_60_55_ladder;
        }
        float _2586 = isnan(_2223) ? _1746 : (isnan(_1746) ? _2223 : min(_1746, _2223));
        float _2587 = isnan(_2584) ? _2586 : (isnan(_2586) ? _2584 : min(_2586, _2584));
        float _2591 = (_2587 * _1631) + _1620;
        float _2592 = (_2587 * _1634) + _1624;
        float _2593 = (_2587 * _1637) + _1628;
        float _2594 = _2587 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2594;
        float _2597 = _2594 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2593 > _2597) || ((_2593 < _2595) || ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 < _2595) || (_2591 > _2597))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2593, cbModelParam._m0[17u].z, fma(_2592, cbModelParam._m0[17u].y, _2591 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2593, cbModelParam._m0[18u].z, fma(_2592, cbModelParam._m0[18u].y, _2591 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2593, cbModelParam._m0[19u].z, fma(_2592, cbModelParam._m0[19u].y, _2591 * cbModelParam._m0[19u].x))), _1567);
            frontier_phi_33_60_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1656 = frontier_phi_33_60_ladder_2;
        _1658 = frontier_phi_33_60_ladder_1;
        _1660 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1567);
        _1656 = _1640.x * cbModelParam._m0[1u].z;
        _1658 = _1640.y * cbModelParam._m0[1u].z;
        _1660 = _1640.z * cbModelParam._m0[1u].z;
    }
    float _1673 = (((_661 * _611) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1675 = (((_661 * _613) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1658 - _1560)) + _1560);
    float _1677 = (((_661 * _614) + _662) * _626) * ((cbModelParam._m0[1u].w * (_1660 - _1562)) + _1562);
    float _1680 = fma(_1677, cbSceneParam._m0[89u].z, fma(_1675, cbSceneParam._m0[89u].y, _1673 * cbSceneParam._m0[89u].x));
    float _1683 = fma(_1677, cbSceneParam._m0[90u].z, fma(_1675, cbSceneParam._m0[90u].y, _1673 * cbSceneParam._m0[90u].x));
    float _1686 = fma(_1677, cbSceneParam._m0[91u].z, fma(_1675, cbSceneParam._m0[91u].y, _1673 * cbSceneParam._m0[91u].x));
    float _1720 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1724 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1732 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1733 = _1720 / _1732;
    float _1734 = _1724 / _1732;
    float _1735 = _1728 / _1732;
    float _1882;
    float _1883;
    float _1884;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1762 = ((uint(_1735 > cbSceneParam._m0[59u].y) + uint(_1735 > cbSceneParam._m0[59u].x)) + uint(_1735 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1763 = _1762 + 43u;
        uint _1771 = _1762 + 44u;
        uint _1779 = _1762 + 45u;
        uint _1787 = _1762 + 46u;
        float _1798 = fma(_1732, cbSceneParam._m0[_1763].w, fma(_1728, cbSceneParam._m0[_1763].z, fma(_1724, cbSceneParam._m0[_1763].y, _1720 * cbSceneParam._m0[_1763].x)));
        float _1802 = fma(_1732, cbSceneParam._m0[_1771].w, fma(_1728, cbSceneParam._m0[_1771].z, fma(_1724, cbSceneParam._m0[_1771].y, _1720 * cbSceneParam._m0[_1771].x)));
        float _1810 = fma(_1732, cbSceneParam._m0[_1787].w, fma(_1728, cbSceneParam._m0[_1787].z, fma(_1724, cbSceneParam._m0[_1787].y, _1720 * cbSceneParam._m0[_1787].x)));
        float _1815 = cbSceneParam._m0[33u].z * _1810;
        float _1817 = cbSceneParam._m0[33u].w * _1810;
        float _1820 = fma(_1732, cbSceneParam._m0[_1779].w, fma(_1728, cbSceneParam._m0[_1779].z, fma(_1724, cbSceneParam._m0[_1779].y, _1720 * cbSceneParam._m0[_1779].x))) / _1810;
        float _1868 = (cbSceneParam._m0[33u].x - sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735))) * cbSceneParam._m0[33u].y;
        float _3965 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1875 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1815 + _1798) / _1810, (_1817 + _1802) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1817 + _1798) / _1810, (_1802 - _1815) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 - _1815) / _1810, (_1802 - _1817) / _1810), _1820), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1798 - _1817) / _1810, (_1815 + _1802) / _1810), _1820), 0.0)).x), vec4(0.25)));
        _1882 = 1.0 - (_1875 * cbSceneParam._m0[34u].x);
        _1883 = 1.0 - (_1875 * cbSceneParam._m0[34u].y);
        _1884 = 1.0 - (_1875 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1882 = 1.0;
        _1883 = 1.0;
        _1884 = 1.0;
    }
    float _1948;
    float _1950;
    float _1952;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1936 = fma(_1732, cbSceneParam._m0[63u].w, fma(_1728, cbSceneParam._m0[63u].z, fma(_1724, cbSceneParam._m0[63u].y, _1720 * cbSceneParam._m0[63u].x)));
        float _1937 = fma(_1732, cbSceneParam._m0[60u].w, fma(_1728, cbSceneParam._m0[60u].z, fma(_1724, cbSceneParam._m0[60u].y, _1720 * cbSceneParam._m0[60u].x))) / _1936;
        float _1938 = fma(_1732, cbSceneParam._m0[61u].w, fma(_1728, cbSceneParam._m0[61u].z, fma(_1724, cbSceneParam._m0[61u].y, _1720 * cbSceneParam._m0[61u].x))) / _1936;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1937 >= cbSceneParam._m0[64u].x) && (_1938 >= cbSceneParam._m0[64u].y)) && (_1937 <= cbSceneParam._m0[64u].z)) && (_1938 <= cbSceneParam._m0[64u].w))
        {
            float _2236 = fma(_1732, cbSceneParam._m0[62u].w, fma(_1728, cbSceneParam._m0[62u].z, fma(_1724, cbSceneParam._m0[62u].y, _1720 * cbSceneParam._m0[62u].x))) / _1936;
            float _2240 = isnan(cbSceneParam._m0[41u].w) ? _2236 : (isnan(_2236) ? cbSceneParam._m0[41u].w : max(_2236, cbSceneParam._m0[41u].w));
            float _2283 = (cbSceneParam._m0[33u].x - sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735))) * cbSceneParam._m0[33u].y;
            float _3981 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
            float _2290 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1937, cbSceneParam._m0[33u].w + _1938), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1937, _1938 - cbSceneParam._m0[33u].z), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1937 - cbSceneParam._m0[33u].z, _1938 - cbSceneParam._m0[33u].w), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1937 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1938), _2240), 0.0)).x), vec4(0.25)));
            float _2294 = 1.0 - (_2290 * cbSceneParam._m0[34u].x);
            float _2295 = 1.0 - (_2290 * cbSceneParam._m0[34u].y);
            float _2296 = 1.0 - (_2290 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2296) ? _1884 : (isnan(_1884) ? _2296 : min(_1884, _2296));
            frontier_phi_45_44_ladder_1 = isnan(_2295) ? _1883 : (isnan(_1883) ? _2295 : min(_1883, _2295));
            frontier_phi_45_44_ladder_2 = isnan(_2294) ? _1882 : (isnan(_1882) ? _2294 : min(_1882, _2294));
        }
        else
        {
            frontier_phi_45_44_ladder = _1884;
            frontier_phi_45_44_ladder_1 = _1883;
            frontier_phi_45_44_ladder_2 = _1882;
        }
        _1948 = frontier_phi_45_44_ladder_2;
        _1950 = frontier_phi_45_44_ladder_1;
        _1952 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1948 = _1882;
        _1950 = _1883;
        _1952 = _1884;
    }
    uvec4 _1957 = floatBitsToUint(cbInstanceData._m0[_585 + 5u]);
    uint _1959 = _1957.x * 14u;
    uint _1960 = _1959 + 13u;
    float _1965 = _626 + (-1.0);
    float _1968 = (cbLight._m0[_1960].x * _1965) + 1.0;
    float _1969 = (cbLight._m0[_1960].y * _1965) + 1.0;
    uint _1970 = _1959 + 5u;
    float _1976 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1980 = _1959 + 4u;
    float _1989 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1993 = _1959 | 1u;
    float _2004 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_495, _496, _497));
    float _2007 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_495, _496, _497));
    float _4017 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _4028 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2012 = (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * 0.3183098733425140380859375;
    float _2014 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * 0.3183098733425140380859375;
    float _2021 = ((cbLight._m0[_1970].x * _1976) * _2014) + (((cbLight._m0[_1980].x * _1948) * _1989) * _2012);
    float _2022 = ((_1976 * cbLight._m0[_1970].y) * _2014) + (((cbLight._m0[_1980].y * _1950) * _1989) * _2012);
    float _2023 = ((_1976 * cbLight._m0[_1970].z) * _2014) + (((cbLight._m0[_1980].z * _1952) * _1989) * _2012);
    uint _2025 = _1959 + 8u;
    float _2038 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1959].w)) * _498) * 0.949999988079071044921875);
    float _2039 = _2038 * _2038;
    float _2040 = cbLight._m0[_1959].x + _523;
    float _2041 = cbLight._m0[_1959].y + _524;
    float _2042 = cbLight._m0[_1959].z + _525;
    float _2046 = inversesqrt(dot(vec3(_2040, _2041, _2042), vec3(_2040, _2041, _2042)));
    float _2047 = _2046 * _2040;
    float _2048 = _2046 * _2041;
    float _2049 = _2046 * _2042;
    float _2050 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1959].xyz));
    float _4039 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _4050 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _2054 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _2055 = dot(vec3(_495, _496, _497), vec3(_2047, _2048, _2049));
    float _4061 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _2059 = dot(vec3(cbLight._m0[_1959].xyz), vec3(_2047, _2048, _2049));
    float _4072 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2063 = _2039 * _2039;
    float _2067 = ((_2058 * _2058) * (_2063 + (-1.0))) + 1.0;
    float _2075 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
    float _2076 = 0.959999978542327880859375 - _608;
    float _2078 = 0.959999978542327880859375 - _609;
    float _2079 = 0.959999978542327880859375 - _610;
    float _2086 = 1.0 - _2039;
    float _2097 = (0.5 / (((_2054 * ((_2053 * _2086) + _2039)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2086) + _2039) * _2053))) * _2053;
    float _4083 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2063 / ((_2067 * _2067) * 3.141590118408203125));
    uint _2113 = _1959 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _498) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_1993].x + _523;
    float _2127 = cbLight._m0[_1993].y + _524;
    float _2128 = cbLight._m0[_1993].z + _525;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_495, _496, _497), vec3(cbLight._m0[_1993].xyz));
    float _4094 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _2140 = dot(vec3(_495, _496, _497), vec3(_2133, _2134, _2135));
    float _4105 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2133, _2134, _2135));
    float _4116 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) * 5.0);
    float _2166 = 1.0 - _2125;
    float _2176 = (0.5 / (((_2054 * ((_2139 * _2166) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2054 * _2166) + _2125) * _2139))) * _2139;
    float _4127 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2178 = (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2188 = (((((_2159 * _2076) + _611) * cbLight._m0[_2113].x) * _2178) * _1976) + ((((cbLight._m0[_2025].x * _1948) * ((_2075 * _2076) + _611)) * _2099) * _1989);
    float _2189 = (((((_2159 * _2078) + _613) * cbLight._m0[_2113].y) * _2178) * _1976) + ((((cbLight._m0[_2025].y * _1950) * ((_2075 * _2078) + _613)) * _2099) * _1989);
    float _2190 = (((((_2159 * _2079) + _614) * cbLight._m0[_2113].z) * _2178) * _1976) + ((((cbLight._m0[_2025].z * _1952) * ((_2075 * _2079) + _614)) * _2099) * _1989);
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    float _2361;
    float _2363;
    if (_1957.y == 0u)
    {
        uvec4 _2308 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2309 = _2308.x;
        uint _2320 = uint((float(_2308.y) * floor(float(uint(cbSceneParam._m0[85u].y * _546) / _2309))) + floor(float(uint(cbSceneParam._m0[85u].x * _545) / _2309)));
        float _2330 = (log2(_1735 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2331 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        uint _2334 = uint(isnan(14.0) ? _2331 : (isnan(_2331) ? 14.0 : min(_2331, 14.0)));
        uvec4 _2339 = texelFetch(g_lightClusterGridBuffer, int(((_2334 << 2u) + (_2320 << 6u)) >> 2u));
        uint _2340 = _2339.x;
        uint _2341 = _2308.z;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        float _2472;
        float _2474;
        if (((((1u << ((_2341 >> 4u) & 15u)) + 4294967295u) & _2340) == 0u) || ((_2341 & 240u) == 0u))
        {
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
            _2472 = 0.0;
            _2474 = 0.0;
        }
        else
        {
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2473;
            float _2475;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            float _2647 = 0.0;
            uint _2648 = 0u;
            uint _2657;
            bool _2658;
            for (;;)
            {
                _2657 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2648 << 2u)) >> 2u)).x;
                _2658 = _2657 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2658)
                {
                    frontier_phi_71_pred = _2645;
                    frontier_phi_71_pred_1 = _2644;
                    frontier_phi_71_pred_2 = _2643;
                    frontier_phi_71_pred_3 = _2642;
                    frontier_phi_71_pred_4 = _2646;
                    frontier_phi_71_pred_5 = _2647;
                }
                else
                {
                    float _2808;
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    uint _2814;
                    _2808 = _2642;
                    _2809 = _2643;
                    _2810 = _2644;
                    _2811 = _2645;
                    _2812 = _2646;
                    _2813 = _2647;
                    _2814 = _2657;
                    float _2735;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    for (;;)
                    {
                        uint _2818 = uint(findLSB(_2814)) + (_2648 << 5u);
                        uint _2815 = (_2814 + 4294967295u) & _2814;
                        uint _2820 = _2818 * 48u;
                        vec4 _2834 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2840 = (_2818 * 48u) + 4u;
                        vec4 _2853 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2840)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2840 + 3u)).x));
                        uint _2859 = (_2818 * 48u) + 8u;
                        vec3 _2870 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2859)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2859 + 2u)).x));
                        float _2874 = _2834.x - _1733;
                        float _2875 = _2834.y - _1734;
                        float _2876 = _2834.z - _1735;
                        float _2877 = dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876));
                        float _2880 = inversesqrt(_2877);
                        float _2881 = _2880 * _2874;
                        float _2882 = _2880 * _2875;
                        float _2883 = _2880 * _2876;
                        float _2884 = dot(vec3(_566, _569, _572), vec3(_2881, _2882, _2883));
                        float _2889 = 1.0 - (_2877 * _2834.w);
                        float _4148 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2890 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2891 = sqrt(_2877) * _2853.w;
                        float _2894 = 1.39999997615814208984375 / (_2891 + 1.39999997615814208984375);
                        float _2895 = _2894 * _2894;
                        float _2898 = ((1.0 - _2895) * _2884) + _2895;
                        float _2901 = _2891 * _2891;
                        float _2905 = ((isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0))) * _2890) / ((_2901 * 0.699999988079071044921875) + 1.0);
                        float _2909 = (-0.0) - _1733;
                        float _2910 = (-0.0) - _1734;
                        float _2911 = (-0.0) - _1735;
                        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
                        float _2916 = _2915 * _2909;
                        float _2917 = _2915 * _2910;
                        float _2918 = _2915 * _2911;
                        float _2925 = exp2(log2(1.0 / ((_2901 * 3.5) + 5.0)) * 0.25);
                        float _2926 = 1.0 - _642;
                        float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                        float _2934 = _2933 * _2933;
                        float _2935 = _2934 * _2934;
                        float _2936 = _2916 + _2881;
                        float _2937 = _2917 + _2882;
                        float _2938 = _2918 + _2883;
                        float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                        float _2946 = dot(vec3(_566, _569, _572), vec3(_2916, _2917, _2918));
                        float _4164 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2950 = dot(vec3(_566, _569, _572), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                        float _4175 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
                        float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                        float _2958 = _2894 * _2934;
                        float _2959 = _2958 * _2958;
                        float _2962 = ((1.0 - _2959) * _2884) + _2959;
                        float _4186 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2963 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
                        float _2964 = 1.0 - _2934;
                        float _2974 = (0.5 / (((_2963 * ((_2949 * _2964) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2934) * _2949))) * _2963;
                        float _4197 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                        float _2985 = (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) / ((_2957 * _2957) * ((_2901 * 2.1991131305694580078125) + 3.141590118408203125))) * _2890;
                        _2738 = (_2905 * _2853.x) + _2811;
                        _2739 = (_2905 * _2853.y) + _2812;
                        _2740 = (_2905 * _2853.z) + _2813;
                        _2735 = (_2985 * _2870.x) + _2808;
                        _2736 = (_2985 * _2870.y) + _2809;
                        _2737 = (_2985 * _2870.z) + _2810;
                        if (_2815 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2737;
                            _2811 = _2738;
                            _2812 = _2739;
                            _2813 = _2740;
                            _2814 = _2815;
                        }
                    }
                    frontier_phi_71_pred = _2738;
                    frontier_phi_71_pred_1 = _2737;
                    frontier_phi_71_pred_2 = _2736;
                    frontier_phi_71_pred_3 = _2735;
                    frontier_phi_71_pred_4 = _2739;
                    frontier_phi_71_pred_5 = _2740;
                }
                _2471 = frontier_phi_71_pred;
                _2469 = frontier_phi_71_pred_1;
                _2467 = frontier_phi_71_pred_2;
                _2465 = frontier_phi_71_pred_3;
                _2473 = frontier_phi_71_pred_4;
                _2475 = frontier_phi_71_pred_5;
                uint _2649 = _2648 + 1u;
                if (_2649 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2642 = _2465;
                    _2643 = _2467;
                    _2644 = _2469;
                    _2645 = _2471;
                    _2646 = _2473;
                    _2647 = _2475;
                    _2648 = _2649;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
            _2472 = _2473;
            _2474 = _2475;
        }
        uvec4 _2478 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2479 = _2478.z;
        uint _2481 = (_2479 >> 8u) & 15u;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        float _2618;
        float _2620;
        if (((4294967295u << _2481) & _2340) == 0u)
        {
            _2610 = _2464;
            _2612 = _2466;
            _2614 = _2468;
            _2616 = _2470;
            _2618 = _2472;
            _2620 = _2474;
        }
        else
        {
            float _2635 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
            float _2636 = _2635 * _1733;
            float _2637 = _2635 * _1734;
            float _2638 = _2635 * _1735;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2481 < ((_2479 >> 12u) & 15u))
            {
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2619;
                float _2621;
                float _2791 = _2464;
                float _2792 = _2466;
                float _2793 = _2468;
                float _2794 = _2470;
                float _2795 = _2472;
                float _2796 = _2474;
                uint _2797 = _2481;
                uint _2806;
                bool _2807;
                for (;;)
                {
                    _2806 = texelFetch(g_lightClassification, int((((_2334 << 5u) + (_2320 << 9u)) + (_2797 << 2u)) >> 2u)).x;
                    _2807 = _2806 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2807)
                    {
                        frontier_phi_82_pred = _2794;
                        frontier_phi_82_pred_1 = _2793;
                        frontier_phi_82_pred_2 = _2792;
                        frontier_phi_82_pred_3 = _2791;
                        frontier_phi_82_pred_4 = _2796;
                        frontier_phi_82_pred_5 = _2795;
                    }
                    else
                    {
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3012 = _2791;
                        float _3013 = _2792;
                        float _3014 = _2793;
                        float _3015 = _2794;
                        float _3016 = _2795;
                        float _3017 = _2796;
                        uint _3018 = _2806;
                        uint _3019;
                        vec4 _3044;
                        float _3045;
                        vec4 _3060;
                        vec3 _3072;
                        vec4 _3087;
                        vec4 _3103;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3029 = ((_2797 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3018));
                            _3019 = (_3018 + 4294967295u) & _3018;
                            uint _3031 = _3029 * 40u;
                            _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            _3045 = _3044.w;
                            uint _3047 = (_3029 * 40u) + 4u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3062 = (_3029 * 40u) + 8u;
                            _3072 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x));
                            uint _3074 = (_3029 * 40u) + 16u;
                            _3087 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3074)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3074 + 3u)).x));
                            uint _3090 = (_3029 * 40u) + 20u;
                            _3103 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3090)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3090 + 3u)).x));
                            uint _3105 = (_3029 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3029 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_1735, _3137.z, fma(_1734, _3137.y, _3137.x * _1733)) + _3137.w;
                            _3150 = !((fma(_1735, _3118.z, fma(_1734, _3118.y, _3118.x * _1733)) + _3118.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3044.x - _1733;
                                float _3178 = _3044.y - _1734;
                                float _3179 = _3044.z - _1735;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3045 * _3045));
                                float _4208 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3195 = sqrt(_3180) * _3060.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_566, _569, _572))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_1735, _3087.z, fma(_1734, _3087.y, _3087.x * _1733)) + _3087.w) / _3149;
                                float _3209 = (fma(_1735, _3103.z, fma(_1734, _3103.y, _3103.x * _1733)) + _3103.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4224 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _642;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2636;
                                float _3239 = _3185 - _2637;
                                float _3240 = _3186 - _2638;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_566, _569, _572), vec3((-0.0) - _2636, (-0.0) - _2637, (-0.0) - _2638));
                                float _4235 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                                float _3252 = dot(vec3(_566, _569, _572), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4246 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_566, _569, _572), vec3(_3184, _3185, _3186))) + _3261;
                                float _4257 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4268 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3215 * _3060.x;
                                frontier_phi_88_pred_1 = _3289 * _3072.z;
                                frontier_phi_88_pred_2 = _3289 * _3072.y;
                                frontier_phi_88_pred_3 = _3289 * _3072.x;
                                frontier_phi_88_pred_4 = _3215 * _3060.z;
                                frontier_phi_88_pred_5 = _3215 * _3060.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3296 = frontier_phi_88_pred;
                            _3295 = frontier_phi_88_pred_1;
                            _3294 = frontier_phi_88_pred_2;
                            _3293 = frontier_phi_88_pred_3;
                            _3298 = frontier_phi_88_pred_4;
                            _3297 = frontier_phi_88_pred_5;
                            _3002 = _3296 + _3015;
                            _3003 = _3297 + _3016;
                            _3004 = _3298 + _3017;
                            _2999 = _3293 + _3012;
                            _3000 = _3294 + _3013;
                            _3001 = _3295 + _3014;
                            if (_3019 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3004;
                                _3018 = _3019;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3002;
                        frontier_phi_82_pred_1 = _3001;
                        frontier_phi_82_pred_2 = _3000;
                        frontier_phi_82_pred_3 = _2999;
                        frontier_phi_82_pred_4 = _3004;
                        frontier_phi_82_pred_5 = _3003;
                    }
                    _2617 = frontier_phi_82_pred;
                    _2615 = frontier_phi_82_pred_1;
                    _2613 = frontier_phi_82_pred_2;
                    _2611 = frontier_phi_82_pred_3;
                    _2621 = frontier_phi_82_pred_4;
                    _2619 = frontier_phi_82_pred_5;
                    uint _2798 = _2797 + 1u;
                    if (_2798 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2791 = _2611;
                        _2792 = _2613;
                        _2793 = _2615;
                        _2794 = _2617;
                        _2795 = _2619;
                        _2796 = _2621;
                        _2797 = _2798;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2621;
                frontier_phi_62_63_ladder_1 = _2619;
                frontier_phi_62_63_ladder_2 = _2617;
                frontier_phi_62_63_ladder_3 = _2613;
                frontier_phi_62_63_ladder_4 = _2611;
                frontier_phi_62_63_ladder_5 = _2615;
            }
            else
            {
                frontier_phi_62_63_ladder = _2474;
                frontier_phi_62_63_ladder_1 = _2472;
                frontier_phi_62_63_ladder_2 = _2470;
                frontier_phi_62_63_ladder_3 = _2466;
                frontier_phi_62_63_ladder_4 = _2464;
                frontier_phi_62_63_ladder_5 = _2468;
            }
            _2610 = frontier_phi_62_63_ladder_4;
            _2612 = frontier_phi_62_63_ladder_3;
            _2614 = frontier_phi_62_63_ladder_5;
            _2616 = frontier_phi_62_63_ladder_2;
            _2618 = frontier_phi_62_63_ladder_1;
            _2620 = frontier_phi_62_63_ladder;
        }
        float _2625 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _2353 = (_2625 * _2616) + _2021;
        _2355 = (_2625 * _2618) + _2022;
        _2357 = (_2625 * _2620) + _2023;
        _2359 = ((_2610 * _611) * _2625) + _2188;
        _2361 = ((_2612 * _613) * _2625) + _2189;
        _2363 = ((_2614 * _614) * _2625) + _2190;
    }
    else
    {
        _2353 = _2021;
        _2355 = _2022;
        _2357 = _2023;
        _2359 = _2188;
        _2361 = _2189;
        _2363 = _2190;
    }
    uint _2369 = _587 + uint(cbMatDynParam._m0[0u].w);
    float _4284 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4295 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4306 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2394 = (((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_2353 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _626))) + ((_2359 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + (((_422 - (_422 * _292)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2369].x);
    float _2396 = ((((_423 - (_423 * _292)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2369].y) + ((_2361 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2355 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _626)));
    float _2398 = (((cbMtdParam._m0[9u].z * (_424 - (_424 * _292))) * cbInstanceData._m0[_2369].z) + ((_2363 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1466)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2357 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _626)));
    float _2399 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2400 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2401 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    uint _2402 = _585 + 6u;
    float _2410 = _545 / cbSceneParam._m0[86u].x;
    float _2411 = _546 / cbSceneParam._m0[86u].y;
    vec4 _2425 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, (log2((isnan(cbSceneParam._m0[77u].w) ? _518 : (isnan(_518) ? cbSceneParam._m0[77u].w : min(_518, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2427 = _2425.x;
    float _2428 = _2425.y;
    float _2429 = _2425.z;
    float _2430 = _2425.w;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_518 > cbSceneParam._m0[78u].w)
    {
        float _2489 = isnan(_518) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _518 : min(cbSceneParam._m0[80u].w, _518));
        float _2490 = _2489 / _518;
        float _2501 = _2490 * _265;
        float _2502 = _266 * _2490;
        float _2503 = (-0.0) - _2502;
        float _2504 = _2490 * _267;
        float _2506 = (cbSceneParam._m0[77u].w * _2503) / _2489;
        float _2507 = _2506 + cbSceneParam._m0[79u].w;
        float _2508 = cbSceneParam._m0[79u].w - _2502;
        float _2514 = sqrt(((_2501 * _2501) + (_2502 * _2502)) + (_2504 * _2504));
        float _2517 = (1.0 - (cbSceneParam._m0[77u].w / _2489)) * _2514;
        float _2522 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2524 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2748;
        if (abs((_2503 - _2506) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2748 = ((((_2507 > 0.0) ? exp2(_2522 * _2507) : (2.0 - exp2(_2524 * _2507))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2517;
        }
        else
        {
            float _2671 = 1.0 / cbSceneParam._m0[80u].x;
            float _2672 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : max(_2507, _2508));
            float _2673 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : min(_2507, _2508));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            float _2683 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : min(_2673, 0.0));
            _2748 = ((abs(_2514 / _2503) * cbSceneParam._m0[80u].y) * ((((_2682 - _2683) * 2.0) - ((exp2(_2522 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0)))) - exp2(_2522 * (isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0))))) * _2671)) - ((exp2(_2524 * _2682) - exp2(_2524 * _2683)) * _2671))) + (_2517 * cbSceneParam._m0[80u].z);
        }
        vec4 _2750 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2410, _2411, 1.0), 0.0);
        float _2759 = exp2((_2748 * (-1.44269502162933349609375)) * (1.0 - _2750.w));
        float _2760 = log2(_2759);
        float _2776 = log2(_2430);
        _2526 = (exp2(_2776 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].x)) * _2750.x) / cbSceneParam._m0[78u].x)) + _2427;
        _2528 = (exp2(_2776 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].y)) * _2750.y) / cbSceneParam._m0[78u].y)) + _2428;
        _2530 = (exp2(_2776 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2760 * cbSceneParam._m0[78u].z)) * _2750.z) / cbSceneParam._m0[78u].z)) + _2429;
        _2532 = _2759 * _2430;
    }
    else
    {
        _2526 = _2427;
        _2528 = _2428;
        _2530 = _2429;
        _2532 = _2430;
    }
    bool _2786;
    vec4 _2542;
    vec4 _2564;
    float _2566;
    float _2570;
    float _2571;
    float _2572;
    float _2573;
    bool _2583;
    for (;;)
    {
        _2542 = cbMatDynParam._m0[0u];
        float _2544 = roundEven(_2542.y);
        bool _2545 = _2544 == 3.0;
        float _2546 = log2(_2532);
        float _2553 = exp2(_2546 * cbSceneParam._m0[78u].x) * _2399;
        float _2554 = exp2(_2546 * cbSceneParam._m0[78u].y) * _2400;
        float _2555 = exp2(_2546 * cbSceneParam._m0[78u].z) * _2401;
        float _2562 = _532 + (-0.5);
        _2564 = cbMtdParam._m0[1u];
        _2566 = _2564.y * _2562;
        float _2569 = (_2544 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2570 = _2569 * (_2545 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2526)));
        _2571 = _2569 * (_2545 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2528)));
        _2572 = _2569 * (_2545 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2530)));
        _2573 = _2562 * 0.999000012874603271484375;
        _2583 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2583)
        {
            if ((cbInstanceData._m0[_585 + 7u].x + _2573) < 0.5)
            {
                _2786 = true;
                break;
            }
        }
        uint _2706 = _587 + uint(_2542.w);
        if ((cbInstanceData._m0[_2706].w < 1.0) && ((cbInstanceData._m0[_2706].w + _2573) < 0.5))
        {
            _2786 = true;
            break;
        }
        if ((_2566 + 1.0) < _2564.x)
        {
            _2786 = true;
            break;
        }
        _2786 = false;
        break;
    }
    float _2990;
    if (_2786)
    {
        discard_state = true;
        _2990 = 0.0;
    }
    else
    {
        _2990 = cbInstanceData._m0[_2402].w;
    }
    SV_Target.x = _2570;
    SV_Target.y = _2571;
    SV_Target.z = _2572;
    SV_Target.w = _2990;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2402].w;
    discard_exit();
}


