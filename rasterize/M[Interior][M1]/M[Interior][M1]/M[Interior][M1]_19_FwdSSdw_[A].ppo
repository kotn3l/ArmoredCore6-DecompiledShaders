#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _399;
float _3239;
float _3240;
float _3241;
float _3242;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _332 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _339 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _348 = cbMtdParam._m0[23u].x + _263;
    float _349 = cbMtdParam._m0[23u].y + _264;
    float _350 = cbMtdParam._m0[23u].z + _265;
    float _364 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_332 * _192, _332 * _193, _332 * _194));
    float _365 = (-0.0) - dot(vec3(_348, _349, _350), vec3(_339 * _206, _339 * _207, _339 * _208));
    float _366 = (-0.0) - dot(vec3(_348, _349, _350), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _370 * _366;
    float _373 = (cbMtdParam._m0[19u].w * _364) * _370;
    float _375 = (cbMtdParam._m0[20u].x * _365) * _370;
    float _378 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _379 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _397;
    float _400;
    float _402;
    if (_373 > 0.0)
    {
        float _383 = (1.0 - _378) / _373;
        _397 = _383;
        _400 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_383 * _371)) * 0.16666667163372039794921875;
        _402 = (fract((_383 * _375) + _379) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_373 < 0.0)
        {
            float _398 = ((-0.0) - _378) / _373;
            frontier_phi_3_2_ladder = _398;
            frontier_phi_3_2_ladder_1 = (fract((_398 * _375) + _379) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_398 * _371) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _399;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _397 = frontier_phi_3_2_ladder;
        _400 = frontier_phi_3_2_ladder_2;
        _402 = frontier_phi_3_2_ladder_1;
    }
    float _428;
    float _430;
    float _432;
    if (_375 > 0.0)
    {
        float _415 = (1.0 - _379) / _375;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_415 < _397)
        {
            frontier_phi_8_5_ladder = (fract(_415 * _371) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_415 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _415;
        }
        else
        {
            frontier_phi_8_5_ladder = _402;
            frontier_phi_8_5_ladder_1 = _400;
            frontier_phi_8_5_ladder_2 = _397;
        }
        _428 = frontier_phi_8_5_ladder_2;
        _430 = frontier_phi_8_5_ladder_1;
        _432 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_375 < 0.0)
        {
            float _429 = ((-0.0) - _379) / _375;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_429 < _397)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_429 * _371) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_429 * _373) + _378) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _402;
                frontier_phi_8_6_ladder_9_ladder_1 = _400;
                frontier_phi_8_6_ladder_9_ladder_2 = _397;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _402;
            frontier_phi_8_6_ladder_1 = _400;
            frontier_phi_8_6_ladder_2 = _397;
        }
        _428 = frontier_phi_8_6_ladder_2;
        _430 = frontier_phi_8_6_ladder_1;
        _432 = frontier_phi_8_6_ladder;
    }
    float _436 = (_371 > 0.0) ? (cbMtdParam._m0[16u].w / _371) : 5000.0;
    float _449;
    float _450;
    if (_436 < _428)
    {
        _449 = ((_378 + cbMtdParam._m0[17u].x) + (_436 * _373)) * 0.16666667163372039794921875;
        _450 = (((_436 * _375) + _379) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _449 = _430;
        _450 = _432;
    }
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_449, _450));
    float _457 = _452.x * cbMtdParam._m0[13u].x;
    float _458 = _452.y * cbMtdParam._m0[13u].y;
    float _459 = _452.z * cbMtdParam._m0[13u].z;
    float _464 = 0.5 - (_290 * 0.5);
    float _474 = (((_457 - _303) - (_457 * _290)) * _464) + _303;
    float _475 = (((_458 - _305) - (_458 * _290)) * _464) + _305;
    float _476 = (((_459 - _307) - (_459 * _290)) * _464) + _307;
    vec4 _488 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _490 = _488.x;
    vec4 _502 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _510 = (_502.x * 2.0) + (-1.0);
    float _512 = (_502.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_510, _512), vec2(_510, _512));
    float _3251 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))));
    float _519 = _502.z * _290;
    float _522 = fma(_518, _199, fma(_512, _206, _510 * _192));
    float _525 = fma(_518, _200, fma(_512, _207, _510 * _193));
    float _528 = fma(_518, _201, fma(_512, _208, _510 * _194));
    float _532 = inversesqrt(dot(vec3(_522, _525, _528), vec3(_522, _525, _528)));
    float _533 = _532 * _522;
    float _534 = _532 * _525;
    float _535 = _532 * _528;
    float _3262 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _536 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
    float _3273 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3284 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3295 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3306 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _540 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _561 = _263 * _560;
    float _562 = _264 * _560;
    float _563 = _265 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _751 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _757 = (cbMatDynParam._m0[5u].x * _751) + cbMatDynParam._m0[5u].y;
        float _3317 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _762 = (cbMatDynParam._m0[5u].z * _751) + cbMatDynParam._m0[5u].w;
        float _3328 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0))) - _758)) + _758) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_535, cbSceneParam._m0[5u].z, fma(_534, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _533));
    float _612 = fma(_535, cbSceneParam._m0[6u].z, fma(_534, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _533));
    float _615 = fma(_535, cbSceneParam._m0[7u].z, fma(_534, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _533));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _629 = _628 + 9u;
    uint _630 = _629 + uint(cbMatDynParam._m0[0u].w);
    float _636 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_630].x;
    float _637 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * cbInstanceData._m0[_630].y;
    float _638 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_630].z;
    float _3339 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _3361 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
    float _642 = 1.0 - _540;
    float _643 = _639 * _642;
    float _644 = _640 * _642;
    float _645 = _641 * _642;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _540;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _540;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _540;
    float _653 = _650 + 0.039999999105930328369140625;
    float _655 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    vec4 _665 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _588, cbSceneParam._m0[86u].y * _589));
    float _668 = _665.x * TEXCOORD.z;
    float _669 = dot(vec3(_533, _534, _535), vec3(_561, _562, _563));
    float _672 = _669 * 2.0;
    float _676 = (_672 * _533) - _561;
    float _677 = (_672 * _534) - _562;
    float _678 = (_672 * _535) - _563;
    float _682 = abs(dot(vec3(_561, _562, _563), vec3(_533, _534, _535)));
    float _3372 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _684 = sqrt(_536);
    float _697 = exp2((_684 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_684 * 3.0));
    float _703 = (1.0 - _697) * ((_684 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _704 = _697 * _684;
    float _732 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _736 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _796 = fma(_740, cbModelParam._m0[26u].z, fma(_736, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732));
        float _800 = fma(_740, cbModelParam._m0[27u].z, fma(_736, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732));
        float _804 = fma(_740, cbModelParam._m0[28u].z, fma(_736, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732));
        float _828 = _732 + _533;
        float _829 = _736 + _534;
        float _830 = _740 + _535;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _796;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _800;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _804;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_796 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_800 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_804 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_533, _534, _535), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3420 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_533, _534, _535), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3453 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_533, _534, _535), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3486 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1071 = _900;
        _1072 = _899;
        _1073 = _911;
        _1074 = _910;
        _1075 = _909;
        _1076 = _921;
        _1077 = _920;
        _1078 = _919;
        _1079 = _934;
        _1080 = _933;
        _1081 = _932;
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _399;
        _1071 = _399;
        _1072 = _399;
        _1073 = _399;
        _1074 = _399;
        _1075 = _399;
        _1076 = _399;
        _1077 = _399;
        _1078 = _399;
        _1079 = _399;
        _1080 = _399;
        _1081 = _399;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = fma(_740, cbModelParam._m0[30u].z, fma(_736, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _732));
        float _1117 = fma(_740, cbModelParam._m0[31u].z, fma(_736, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _732));
        float _1121 = fma(_740, cbModelParam._m0[32u].z, fma(_736, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _732));
        float _1144 = _732 + _533;
        float _1145 = _736 + _534;
        float _1146 = _740 + _535;
        float _1156 = fma(_1146, cbModelParam._m0[30u].z, fma(_1145, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144)) - _1113;
        float _1157 = fma(_1146, cbModelParam._m0[31u].z, fma(_1145, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144)) - _1117;
        float _1158 = fma(_1146, cbModelParam._m0[32u].z, fma(_1145, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144)) - _1121;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1113 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1117 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[35u].z) + ((((((_1121 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1212 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1179.x + (-0.5));
        float _1214 = _1212 * (_1179.y + (-0.5));
        float _1215 = _1212 * (_1179.z + (-0.5));
        float _1222 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1186.x + (-0.5));
        float _1224 = _1222 * (_1186.y + (-0.5));
        float _1225 = _1222 * (_1186.z + (-0.5));
        float _1232 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1193.x + (-0.5));
        float _1234 = _1232 * (_1193.y + (-0.5));
        float _1235 = _1232 * (_1193.z + (-0.5));
        float _1242 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1243 = _1242 * (_1200.x + (-0.5));
        float _1244 = _1242 * (_1200.y + (-0.5));
        float _1245 = _1242 * (_1200.z + (-0.5));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = _1213 * 0.5;
        float _1250 = _1223 * 0.5;
        float _1251 = _1233 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_533, _534, _535), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3549 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1276 + 1.0))) + _1281) * _1246;
        float _1291 = _1214 * 0.5;
        float _1292 = _1224 * 0.5;
        float _1293 = _1234 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_533, _534, _535), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3582 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1318 + 1.0))) + _1323) * _1247;
        float _1333 = _1215 * 0.5;
        float _1334 = _1225 * 0.5;
        float _1335 = _1235 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_533, _534, _535), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3593 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3604 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3615 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * (_1360 + 1.0))) + _1365) * _1248;
        _1382 = _1215;
        _1383 = _1214;
        _1384 = _1213;
        _1385 = _1225;
        _1386 = _1224;
        _1387 = _1223;
        _1388 = _1235;
        _1389 = _1234;
        _1390 = _1233;
        _1391 = _1248;
        _1392 = _1247;
        _1393 = _1246;
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
    }
    else
    {
        _1382 = _399;
        _1383 = _399;
        _1384 = _399;
        _1385 = _399;
        _1386 = _399;
        _1387 = _399;
        _1388 = _399;
        _1389 = _399;
        _1390 = _399;
        _1391 = _399;
        _1392 = _399;
        _1393 = _399;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1429 = fma(_1408, cbSceneParam._m0[89u].z, fma(_1407, cbSceneParam._m0[89u].y, _1406 * cbSceneParam._m0[89u].x));
    float _1432 = fma(_1408, cbSceneParam._m0[90u].z, fma(_1407, cbSceneParam._m0[90u].y, _1406 * cbSceneParam._m0[90u].x));
    float _1435 = fma(_1408, cbSceneParam._m0[91u].z, fma(_1407, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1406));
    float _1450 = _676 * 0.5;
    float _1451 = _677 * 0.5;
    float _1452 = _678 * 0.5;
    float _1453 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1456 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1459 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1493;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1466 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1470 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1474 = dot(vec4(_1450, _1451, _1452, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1481 = dot(vec4(cbModelParam._m0[39u]), vec4(_1450, _1451, _1452, 1.0));
        _1493 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1493 = 1.0;
    }
    float _1504;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1495 = dot(vec4(cbModelParam._m0[40u]), vec4(_1450, _1451, _1452, 1.0));
        _1504 = dot(vec3(isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1504 = 1.0;
    }
    float _1508 = (_1504 * cbModelParam._m0[1u].x) + (_1493 * (1.0 - cbModelParam._m0[1u].x));
    float _1518 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _536);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1518 : min(cbModelParam._m0[25u].z, _1518));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_740, cbModelParam._m0[13u].z, fma(_736, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _732)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_740, cbModelParam._m0[14u].z, fma(_736, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _732)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_740, cbModelParam._m0[15u].z, fma(_736, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _732)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_678, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676));
        float _1582 = fma(_678, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676));
        float _1585 = fma(_678, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1613 = frontier_phi_29_27_ladder;
        }
        float _1999;
        if (_1582 > 0.0)
        {
            _1999 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1999 = frontier_phi_38_34_ladder;
        }
        float _2307;
        if (_1585 > 0.0)
        {
            _2307 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2307 = frontier_phi_52_45_ladder;
        }
        float _2309 = isnan(_1999) ? _1613 : (isnan(_1613) ? _1999 : min(_1613, _1999));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1579) + _1568;
        float _2315 = (_2310 * _1582) + _1572;
        float _2316 = (_2310 * _1585) + _1576;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2317;
        float _2320 = _2317 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2316 > _2320) || ((_2316 < _2318) || ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 < _2318) || (_2314 > _2320))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1519);
            frontier_phi_28_52_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_28_52_ladder_2;
        _1603 = frontier_phi_28_52_ladder_1;
        _1605 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_676, _677, _678), _1519);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _536);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_740, cbModelParam._m0[21u].z, fma(_736, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _732)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_740, cbModelParam._m0[22u].z, fma(_736, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _732)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_740, cbModelParam._m0[23u].z, fma(_736, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _732)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_678, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676));
        float _1679 = fma(_678, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676));
        float _1682 = fma(_678, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676));
        float _2004;
        if (_1676 > 0.0)
        {
            _2004 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2004 = frontier_phi_40_36_ladder;
        }
        float _2333;
        if (_1679 > 0.0)
        {
            _2333 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2333 = frontier_phi_54_47_ladder;
        }
        float _2523;
        if (_1682 > 0.0)
        {
            _2523 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2523 = frontier_phi_72_65_ladder;
        }
        float _2525 = isnan(_2333) ? _2004 : (isnan(_2004) ? _2333 : min(_2004, _2333));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1676) + _1665;
        float _2531 = (_2526 * _1679) + _1669;
        float _2532 = (_2526 * _1682) + _1673;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2774 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_37_72_ladder = _2774.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2774.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2774.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_37_72_ladder_2;
        _1703 = frontier_phi_37_72_ladder_1;
        _1705 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_676, _677, _678), _1610);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1718 = (((_703 * _653) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_703 * _655) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1722 = (((_703 * _656) + _704) * _668) * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1739 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_588, _589));
    float _1741 = _1739.w;
    float _1753 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1741);
    float _1754 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1741);
    float _1755 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1741);
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1767 = _668 + (-1.0);
    float _1770 = (cbLight._m0[_1762].x * _1767) + 1.0;
    float _1771 = (cbLight._m0[_1762].y * _1767) + 1.0;
    uint _1772 = _1761 + 5u;
    float _1778 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1782 = _1761 + 4u;
    float _1792 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1796 = _1761 | 1u;
    float _1807 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_533, _534, _535));
    float _1810 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_533, _534, _535));
    float _3751 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
    float _3762 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1815 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1817 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * 0.3183098733425140380859375;
    float _1824 = ((cbLight._m0[_1772].x * _1778) * _1817) + (((cbLight._m0[_1782].x * _1753) * _1792) * _1815);
    float _1825 = ((_1778 * cbLight._m0[_1772].y) * _1817) + (((cbLight._m0[_1782].y * _1754) * _1792) * _1815);
    float _1826 = ((_1778 * cbLight._m0[_1772].z) * _1817) + (((cbLight._m0[_1782].z * _1755) * _1792) * _1815);
    uint _1828 = _1761 + 8u;
    float _1841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _536) * 0.949999988079071044921875);
    float _1842 = _1841 * _1841;
    float _1843 = cbLight._m0[_1761].x + _561;
    float _1844 = cbLight._m0[_1761].y + _562;
    float _1845 = cbLight._m0[_1761].z + _563;
    float _1849 = inversesqrt(dot(vec3(_1843, _1844, _1845), vec3(_1843, _1844, _1845)));
    float _1850 = _1849 * _1843;
    float _1851 = _1849 * _1844;
    float _1852 = _1849 * _1845;
    float _1853 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1761].xyz));
    float _3773 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1856 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _1857 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1858 = dot(vec3(_533, _534, _535), vec3(_1850, _1851, _1852));
    float _3795 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1850, _1851, _1852));
    float _3806 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1842 * _1842;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1878 = exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0);
    float _1879 = 0.959999978542327880859375 - _650;
    float _1881 = 0.959999978542327880859375 - _651;
    float _1882 = 0.959999978542327880859375 - _652;
    float _1889 = 1.0 - _1842;
    float _1900 = (0.5 / (((_1857 * ((_1856 * _1889) + _1842)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1889) + _1842) * _1856))) * _1856;
    float _3817 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1902 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    uint _1916 = _1761 + 9u;
    float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _536) * 0.949999988079071044921875);
    float _1928 = _1927 * _1927;
    float _1929 = cbLight._m0[_1796].x + _561;
    float _1930 = cbLight._m0[_1796].y + _562;
    float _1931 = cbLight._m0[_1796].z + _563;
    float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
    float _1936 = _1935 * _1929;
    float _1937 = _1935 * _1930;
    float _1938 = _1935 * _1931;
    float _1939 = dot(vec3(_533, _534, _535), vec3(cbLight._m0[_1796].xyz));
    float _3828 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1943 = dot(vec3(_533, _534, _535), vec3(_1936, _1937, _1938));
    float _3839 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1946 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1947 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1936, _1937, _1938));
    float _3850 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _1951 = _1928 * _1928;
    float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
    float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * 5.0);
    float _1969 = 1.0 - _1928;
    float _1979 = (0.5 / (((_1857 * ((_1942 * _1969) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1857 * _1969) + _1928) * _1942))) * _1942;
    float _3861 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1981 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
    float _1991 = (((((_1962 * _1879) + _653) * cbLight._m0[_1916].x) * _1981) * _1778) + ((((cbLight._m0[_1828].x * _1753) * ((_1878 * _1879) + _653)) * _1902) * _1792);
    float _1992 = (((((_1962 * _1881) + _655) * cbLight._m0[_1916].y) * _1981) * _1778) + ((((cbLight._m0[_1828].y * _1754) * ((_1878 * _1881) + _655)) * _1902) * _1792);
    float _1993 = (((((_1962 * _1882) + _656) * cbLight._m0[_1916].z) * _1981) * _1778) + ((((cbLight._m0[_1828].z * _1755) * ((_1878 * _1882) + _656)) * _1902) * _1792);
    float _2108;
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    float _2118;
    if (_1759.y == 0u)
    {
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2048;
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2048;
        float _2051 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2048;
        uvec4 _2063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2064 = _2063.x;
        uint _2075 = uint((float(_2063.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _2064))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _2064)));
        float _2085 = (log2(_2051 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2086 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        uint _2089 = uint(isnan(14.0) ? _2086 : (isnan(_2086) ? 14.0 : min(_2086, 14.0)));
        uvec4 _2094 = texelFetch(g_lightClusterGridBuffer, int(((_2089 << 2u) + (_2075 << 6u)) >> 2u));
        uint _2095 = _2094.x;
        uint _2096 = _2063.z;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        if (((((1u << ((_2096 >> 4u) & 15u)) + 4294967295u) & _2095) == 0u) || ((_2096 & 240u) == 0u))
        {
            _2186 = 0.0;
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
            _2196 = 0.0;
        }
        else
        {
            float _2187;
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2197;
            float _2370 = 0.0;
            float _2371 = 0.0;
            float _2372 = 0.0;
            float _2373 = 0.0;
            float _2374 = 0.0;
            float _2375 = 0.0;
            uint _2376 = 0u;
            uint _2385;
            bool _2386;
            for (;;)
            {
                _2385 = texelFetch(g_lightClassification, int((((_2089 << 5u) + (_2075 << 9u)) + (_2376 << 2u)) >> 2u)).x;
                _2386 = _2385 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2386)
                {
                    frontier_phi_67_pred = _2373;
                    frontier_phi_67_pred_1 = _2372;
                    frontier_phi_67_pred_2 = _2371;
                    frontier_phi_67_pred_3 = _2370;
                    frontier_phi_67_pred_4 = _2374;
                    frontier_phi_67_pred_5 = _2375;
                }
                else
                {
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    uint _2572;
                    _2566 = _2370;
                    _2567 = _2371;
                    _2568 = _2372;
                    _2569 = _2373;
                    _2570 = _2374;
                    _2571 = _2375;
                    _2572 = _2385;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    for (;;)
                    {
                        uint _2576 = uint(findLSB(_2572)) + (_2376 << 5u);
                        uint _2573 = (_2572 + 4294967295u) & _2572;
                        uint _2578 = _2576 * 48u;
                        vec4 _2592 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2578)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2578 + 3u)).x));
                        uint _2598 = (_2576 * 48u) + 4u;
                        vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2598)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2598 + 3u)).x));
                        uint _2617 = (_2576 * 48u) + 8u;
                        vec3 _2628 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2617)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2617 + 2u)).x));
                        float _2632 = _2592.x - _2049;
                        float _2633 = _2592.y - _2050;
                        float _2634 = _2592.z - _2051;
                        float _2635 = dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634));
                        float _2638 = inversesqrt(_2635);
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2642 = dot(vec3(_609, _612, _615), vec3(_2639, _2640, _2641));
                        float _2647 = 1.0 - (_2635 * _2592.w);
                        float _3882 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2648 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2649 = sqrt(_2635) * _2611.w;
                        float _2652 = 1.39999997615814208984375 / (_2649 + 1.39999997615814208984375);
                        float _2653 = _2652 * _2652;
                        float _2656 = ((1.0 - _2653) * _2642) + _2653;
                        float _2659 = _2649 * _2649;
                        float _2663 = ((isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))) * _2648) / ((_2659 * 0.699999988079071044921875) + 1.0);
                        float _2667 = (-0.0) - _2049;
                        float _2668 = (-0.0) - _2050;
                        float _2669 = (-0.0) - _2051;
                        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
                        float _2674 = _2673 * _2667;
                        float _2675 = _2673 * _2668;
                        float _2676 = _2673 * _2669;
                        float _2684 = exp2(log2(1.0 / ((_2659 * 3.5) + 5.0)) * 0.25);
                        float _2685 = 1.0 - _684;
                        float _2692 = sqrt(1.0 - ((1.0 - (_2685 * _2685)) * (1.0 - (_2684 * _2684))));
                        float _2693 = _2692 * _2692;
                        float _2694 = _2693 * _2693;
                        float _2695 = _2674 + _2639;
                        float _2696 = _2675 + _2640;
                        float _2697 = _2676 + _2641;
                        float _2701 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
                        float _2705 = dot(vec3(_609, _612, _615), vec3(_2674, _2675, _2676));
                        float _3898 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2708 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2709 = dot(vec3(_609, _612, _615), vec3(_2701 * _2695, _2701 * _2696, _2701 * _2697));
                        float _3909 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2712 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                        float _2716 = ((_2712 * _2712) * (_2694 + (-1.0))) + 1.0;
                        float _2717 = _2652 * _2693;
                        float _2718 = _2717 * _2717;
                        float _2721 = ((1.0 - _2718) * _2642) + _2718;
                        float _3920 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                        float _2723 = 1.0 - _2693;
                        float _2733 = (0.5 / (((_2722 * ((_2708 * _2723) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2722 * _2723) + _2693) * _2708))) * _2722;
                        float _3931 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                        float _2744 = (((_2694 * 3.1415927410125732421875) * (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0)))) / ((_2716 * _2716) * ((_2659 * 2.1991131305694580078125) + 3.141590118408203125))) * _2648;
                        _2470 = (_2663 * _2611.x) + _2569;
                        _2471 = (_2663 * _2611.y) + _2570;
                        _2472 = (_2663 * _2611.z) + _2571;
                        _2467 = (_2744 * _2628.x) + _2566;
                        _2468 = (_2744 * _2628.y) + _2567;
                        _2469 = (_2744 * _2628.z) + _2568;
                        if (_2573 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2566 = _2467;
                            _2567 = _2468;
                            _2568 = _2469;
                            _2569 = _2470;
                            _2570 = _2471;
                            _2571 = _2472;
                            _2572 = _2573;
                        }
                    }
                    frontier_phi_67_pred = _2470;
                    frontier_phi_67_pred_1 = _2469;
                    frontier_phi_67_pred_2 = _2468;
                    frontier_phi_67_pred_3 = _2467;
                    frontier_phi_67_pred_4 = _2471;
                    frontier_phi_67_pred_5 = _2472;
                }
                _2193 = frontier_phi_67_pred;
                _2191 = frontier_phi_67_pred_1;
                _2189 = frontier_phi_67_pred_2;
                _2187 = frontier_phi_67_pred_3;
                _2195 = frontier_phi_67_pred_4;
                _2197 = frontier_phi_67_pred_5;
                uint _2377 = _2376 + 1u;
                if (_2377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2370 = _2187;
                    _2371 = _2189;
                    _2372 = _2191;
                    _2373 = _2193;
                    _2374 = _2195;
                    _2375 = _2197;
                    _2376 = _2377;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2186 = _2187;
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
            _2196 = _2197;
        }
        uvec4 _2200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2201 = _2200.z;
        uint _2203 = (_2201 >> 8u) & 15u;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((4294967295u << _2203) & _2095) == 0u)
        {
            _2338 = _2186;
            _2340 = _2188;
            _2342 = _2190;
            _2344 = _2192;
            _2346 = _2194;
            _2348 = _2196;
        }
        else
        {
            float _2363 = inversesqrt(dot(vec3(_2049, _2050, _2051), vec3(_2049, _2050, _2051)));
            float _2364 = _2363 * _2049;
            float _2365 = _2363 * _2050;
            float _2366 = _2363 * _2051;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2203 < ((_2201 >> 12u) & 15u))
            {
                float _2339;
                float _2341;
                float _2343;
                float _2345;
                float _2347;
                float _2349;
                float _2549 = _2186;
                float _2550 = _2188;
                float _2551 = _2190;
                float _2552 = _2192;
                float _2553 = _2194;
                float _2554 = _2196;
                uint _2555 = _2203;
                uint _2564;
                bool _2565;
                for (;;)
                {
                    _2564 = texelFetch(g_lightClassification, int((((_2089 << 5u) + (_2075 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                    _2565 = _2564 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2565)
                    {
                        frontier_phi_81_pred = _2552;
                        frontier_phi_81_pred_1 = _2551;
                        frontier_phi_81_pred_2 = _2550;
                        frontier_phi_81_pred_3 = _2549;
                        frontier_phi_81_pred_4 = _2554;
                        frontier_phi_81_pred_5 = _2553;
                    }
                    else
                    {
                        float _2779;
                        float _2780;
                        float _2781;
                        float _2782;
                        float _2783;
                        float _2784;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2792 = _2549;
                        float _2793 = _2550;
                        float _2794 = _2551;
                        float _2795 = _2552;
                        float _2796 = _2553;
                        float _2797 = _2554;
                        uint _2798 = _2564;
                        uint _2799;
                        vec4 _2824;
                        float _2825;
                        vec4 _2840;
                        vec3 _2852;
                        vec4 _2867;
                        vec4 _2882;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2809 = ((_2555 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2798));
                            _2799 = (_2798 + 4294967295u) & _2798;
                            uint _2811 = _2809 * 40u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            _2825 = _2824.w;
                            uint _2827 = (_2809 * 40u) + 4u;
                            _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2842 = (_2809 * 40u) + 8u;
                            _2852 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x));
                            uint _2854 = (_2809 * 40u) + 16u;
                            _2867 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 3u)).x));
                            uint _2869 = (_2809 * 40u) + 20u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2884 = (_2809 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2809 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2051, _2916.z, fma(_2050, _2916.y, _2916.x * _2049)) + _2916.w;
                            _2929 = !((fma(_2051, _2897.z, fma(_2050, _2897.y, _2897.x * _2049)) + _2897.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2824.x - _2049;
                                float _2957 = _2824.y - _2050;
                                float _2958 = _2824.z - _2051;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2825 * _2825));
                                float _3942 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _2974 = sqrt(_2959) * _2840.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_609, _612, _615))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2051, _2867.z, fma(_2050, _2867.y, _2867.x * _2049)) + _2867.w) / _2928;
                                float _2988 = (fma(_2051, _2882.z, fma(_2050, _2882.y, _2882.x * _2049)) + _2882.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _3958 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _684;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2364;
                                float _3018 = _2964 - _2365;
                                float _3019 = _2965 - _2366;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2364, (-0.0) - _2365, (-0.0) - _2366));
                                float _3969 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _3031 = dot(vec3(_609, _612, _615), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _3980 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_609, _612, _615), vec3(_2963, _2964, _2965))) + _3040;
                                float _3991 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4002 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2994 * _2840.x;
                                frontier_phi_87_pred_1 = _3068 * _2852.z;
                                frontier_phi_87_pred_2 = _3068 * _2852.y;
                                frontier_phi_87_pred_3 = _3068 * _2852.x;
                                frontier_phi_87_pred_4 = _2994 * _2840.z;
                                frontier_phi_87_pred_5 = _2994 * _2840.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3075 = frontier_phi_87_pred;
                            _3074 = frontier_phi_87_pred_1;
                            _3073 = frontier_phi_87_pred_2;
                            _3072 = frontier_phi_87_pred_3;
                            _3077 = frontier_phi_87_pred_4;
                            _3076 = frontier_phi_87_pred_5;
                            _2782 = _3075 + _2795;
                            _2783 = _3076 + _2796;
                            _2784 = _3077 + _2797;
                            _2779 = _3072 + _2792;
                            _2780 = _3073 + _2793;
                            _2781 = _3074 + _2794;
                            if (_2799 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2782;
                                _2796 = _2783;
                                _2797 = _2784;
                                _2798 = _2799;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2782;
                        frontier_phi_81_pred_1 = _2781;
                        frontier_phi_81_pred_2 = _2780;
                        frontier_phi_81_pred_3 = _2779;
                        frontier_phi_81_pred_4 = _2784;
                        frontier_phi_81_pred_5 = _2783;
                    }
                    _2345 = frontier_phi_81_pred;
                    _2343 = frontier_phi_81_pred_1;
                    _2341 = frontier_phi_81_pred_2;
                    _2339 = frontier_phi_81_pred_3;
                    _2349 = frontier_phi_81_pred_4;
                    _2347 = frontier_phi_81_pred_5;
                    uint _2556 = _2555 + 1u;
                    if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2549 = _2339;
                        _2550 = _2341;
                        _2551 = _2343;
                        _2552 = _2345;
                        _2553 = _2347;
                        _2554 = _2349;
                        _2555 = _2556;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2349;
                frontier_phi_56_57_ladder_1 = _2347;
                frontier_phi_56_57_ladder_2 = _2345;
                frontier_phi_56_57_ladder_3 = _2341;
                frontier_phi_56_57_ladder_4 = _2339;
                frontier_phi_56_57_ladder_5 = _2343;
            }
            else
            {
                frontier_phi_56_57_ladder = _2196;
                frontier_phi_56_57_ladder_1 = _2194;
                frontier_phi_56_57_ladder_2 = _2192;
                frontier_phi_56_57_ladder_3 = _2188;
                frontier_phi_56_57_ladder_4 = _2186;
                frontier_phi_56_57_ladder_5 = _2190;
            }
            _2338 = frontier_phi_56_57_ladder_4;
            _2340 = frontier_phi_56_57_ladder_3;
            _2342 = frontier_phi_56_57_ladder_5;
            _2344 = frontier_phi_56_57_ladder_2;
            _2346 = frontier_phi_56_57_ladder_1;
            _2348 = frontier_phi_56_57_ladder;
        }
        float _2353 = isnan(1.0) ? _668 : (isnan(_668) ? 1.0 : min(_668, 1.0));
        _2108 = (_2353 * _2344) + _1824;
        _2110 = (_2353 * _2346) + _1825;
        _2112 = (_2353 * _2348) + _1826;
        _2114 = ((_2338 * _653) * _2353) + _1991;
        _2116 = ((_2340 * _655) * _2353) + _1992;
        _2118 = ((_2342 * _656) * _2353) + _1993;
    }
    else
    {
        _2108 = _1824;
        _2110 = _1825;
        _2112 = _1826;
        _2114 = _1991;
        _2116 = _1992;
        _2118 = _1993;
    }
    float _4018 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4029 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4040 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _2135 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2108 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _668))) + ((_2114 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2136 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2110 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _668))) + ((_2116 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2137 = ((isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2112 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _668))) + ((_2118 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1508)) * cbPerFrame._m0[3u].x);
    float _2138 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2139 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2140 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    uint _2141 = _628 + 6u;
    float _2149 = _588 / cbSceneParam._m0[86u].x;
    float _2150 = _589 / cbSceneParam._m0[86u].y;
    vec4 _2164 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2149, _2150, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2166 = _2164.x;
    float _2167 = _2164.y;
    float _2168 = _2164.z;
    float _2169 = _2164.w;
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2211 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2212 = _2211 / _556;
        float _2223 = _2212 * _263;
        float _2224 = _264 * _2212;
        float _2225 = (-0.0) - _2224;
        float _2226 = _2212 * _265;
        float _2228 = (cbSceneParam._m0[77u].w * _2225) / _2211;
        float _2229 = _2228 + cbSceneParam._m0[79u].w;
        float _2230 = cbSceneParam._m0[79u].w - _2224;
        float _2236 = sqrt(((_2223 * _2223) + (_2224 * _2224)) + (_2226 * _2226));
        float _2239 = (1.0 - (cbSceneParam._m0[77u].w / _2211)) * _2236;
        float _2245 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2247 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2480;
        if (abs((_2225 - _2228) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2480 = ((((_2229 > 0.0) ? exp2(_2245 * _2229) : (2.0 - exp2(_2247 * _2229))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2239;
        }
        else
        {
            float _2399 = 1.0 / cbSceneParam._m0[80u].x;
            float _2400 = isnan(_2230) ? _2229 : (isnan(_2229) ? _2230 : max(_2229, _2230));
            float _2401 = isnan(_2230) ? _2229 : (isnan(_2229) ? _2230 : min(_2229, _2230));
            float _2410 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : min(_2400, 0.0));
            float _2411 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : min(_2401, 0.0));
            _2480 = ((abs(_2236 / _2225) * cbSceneParam._m0[80u].y) * ((((_2410 - _2411) * 2.0) - ((exp2(_2245 * (isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0)))) - exp2(_2245 * (isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))))) * _2399)) - ((exp2(_2247 * _2410) - exp2(_2247 * _2411)) * _2399))) + (_2239 * cbSceneParam._m0[80u].z);
        }
        vec4 _2482 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2149, _2150, 1.0), 0.0);
        float _2491 = exp2((_2480 * (-1.44269502162933349609375)) * (1.0 - _2482.w));
        float _2492 = log2(_2491);
        float _2508 = log2(_2169);
        _2249 = (exp2(_2508 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].x)) * _2482.x) / cbSceneParam._m0[78u].x)) + _2166;
        _2251 = (exp2(_2508 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].y)) * _2482.y) / cbSceneParam._m0[78u].y)) + _2167;
        _2253 = (exp2(_2508 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].z)) * _2482.z) / cbSceneParam._m0[78u].z)) + _2168;
        _2255 = _2491 * _2169;
    }
    else
    {
        _2249 = _2166;
        _2251 = _2167;
        _2253 = _2168;
        _2255 = _2169;
    }
    bool _2518;
    vec4 _2265;
    vec4 _2287;
    float _2289;
    float _2293;
    float _2294;
    float _2295;
    float _2296;
    bool _2306;
    for (;;)
    {
        _2265 = cbMatDynParam._m0[0u];
        float _2267 = roundEven(_2265.y);
        bool _2268 = _2267 == 3.0;
        float _2269 = log2(_2255);
        float _2276 = exp2(_2269 * cbSceneParam._m0[78u].x) * _2138;
        float _2277 = exp2(_2269 * cbSceneParam._m0[78u].y) * _2139;
        float _2278 = exp2(_2269 * cbSceneParam._m0[78u].z) * _2140;
        float _2285 = _570 + (-0.5);
        _2287 = cbMtdParam._m0[1u];
        _2289 = _2287.y * _2285;
        float _2292 = (_2267 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2293 = _2292 * (_2268 ? _2276 : (_2276 + (cbSceneParam._m0[72u].w * _2249)));
        _2294 = _2292 * (_2268 ? _2277 : (_2277 + (cbSceneParam._m0[72u].w * _2251)));
        _2295 = _2292 * (_2268 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2253)));
        _2296 = _2285 * 0.999000012874603271484375;
        _2306 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2306)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2296) < 0.5)
            {
                _2518 = true;
                break;
            }
        }
        uint _2434 = _629 + uint(_2265.w);
        if ((cbInstanceData._m0[_2434].w < 1.0) && ((cbInstanceData._m0[_2434].w + _2296) < 0.5))
        {
            _2518 = true;
            break;
        }
        if ((_2289 + 1.0) < _2287.x)
        {
            _2518 = true;
            break;
        }
        _2518 = false;
        break;
    }
    float _2749;
    if (_2518)
    {
        discard_state = true;
        _2749 = 0.0;
    }
    else
    {
        _2749 = cbInstanceData._m0[_2141].w;
    }
    SV_Target.x = _2293;
    SV_Target.y = _2294;
    SV_Target.z = _2295;
    SV_Target.w = _2749;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2141].w;
    discard_exit();
}


