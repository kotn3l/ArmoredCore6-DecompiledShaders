#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _344;
uint _1866;
uint _1867;
uint _1868;
uint _2111;
uint _2112;
uint _2113;
float _2352;
float _2353;
float _2354;
float _2355;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _171 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _172 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _173 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _178 = inversesqrt(dot(vec3(_171, _172, _173), vec3(_171, _172, _173)));
    float _179 = _178 * _171;
    float _180 = _178 * _172;
    float _181 = _178 * _173;
    float _185 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _189 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _190 = _189 * TANGENT.x;
    float _191 = _189 * TANGENT.y;
    float _192 = _189 * TANGENT.z;
    float _237 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _247 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _237);
    float _248 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _237);
    float _249 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _237);
    float _274 = inversesqrt(dot(vec3(_179, _180, _181), vec3(_179, _180, _181)));
    float _281 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _290 = cbMtdParam._m0[23u].x + _247;
    float _291 = cbMtdParam._m0[23u].y + _248;
    float _292 = cbMtdParam._m0[23u].z + _249;
    float _309 = (-0.0) - dot(vec3(_290, _291, _292), vec3(_274 * _179, _274 * _180, _274 * _181));
    float _310 = (-0.0) - dot(vec3(_290, _291, _292), vec3(_281 * _190, _281 * _191, _281 * _192));
    float _311 = (-0.0) - dot(vec3(_290, _291, _292), vec3((-0.0) - (NORMAL.x * _185), (-0.0) - (NORMAL.y * _185), (-0.0) - (NORMAL.z * _185)));
    float _315 = inversesqrt(dot(vec3(_309, _310, _311), vec3(_309, _310, _311)));
    float _316 = _315 * _311;
    float _318 = (cbMtdParam._m0[19u].w * _309) * _315;
    float _320 = (cbMtdParam._m0[20u].x * _310) * _315;
    float _323 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _324 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _342;
    float _345;
    float _347;
    if (_318 > 0.0)
    {
        float _328 = (1.0 - _323) / _318;
        _342 = _328;
        _345 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_328 * _316)) * 0.16666667163372039794921875;
        _347 = (fract((_328 * _320) + _324) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_318 < 0.0)
        {
            float _343 = ((-0.0) - _323) / _318;
            frontier_phi_3_2_ladder = _343;
            frontier_phi_3_2_ladder_1 = (fract((_343 * _320) + _324) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_343 * _316) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _344;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _342 = frontier_phi_3_2_ladder;
        _345 = frontier_phi_3_2_ladder_2;
        _347 = frontier_phi_3_2_ladder_1;
    }
    float _373;
    float _375;
    float _377;
    if (_320 > 0.0)
    {
        float _360 = (1.0 - _324) / _320;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_360 < _342)
        {
            frontier_phi_8_5_ladder = (fract(_360 * _316) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_360 * _318) + _323) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _360;
        }
        else
        {
            frontier_phi_8_5_ladder = _347;
            frontier_phi_8_5_ladder_1 = _345;
            frontier_phi_8_5_ladder_2 = _342;
        }
        _373 = frontier_phi_8_5_ladder_2;
        _375 = frontier_phi_8_5_ladder_1;
        _377 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_320 < 0.0)
        {
            float _374 = ((-0.0) - _324) / _320;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_374 < _342)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_374 * _316) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_374 * _318) + _323) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _374;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _347;
                frontier_phi_8_6_ladder_9_ladder_1 = _345;
                frontier_phi_8_6_ladder_9_ladder_2 = _342;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _347;
            frontier_phi_8_6_ladder_1 = _345;
            frontier_phi_8_6_ladder_2 = _342;
        }
        _373 = frontier_phi_8_6_ladder_2;
        _375 = frontier_phi_8_6_ladder_1;
        _377 = frontier_phi_8_6_ladder;
    }
    float _381 = (_316 > 0.0) ? (cbMtdParam._m0[16u].w / _316) : 5000.0;
    float _394;
    float _395;
    if (_381 < _373)
    {
        _394 = ((_323 + cbMtdParam._m0[17u].x) + (_381 * _318)) * 0.16666667163372039794921875;
        _395 = (((_381 * _320) + _324) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _394 = _375;
        _395 = _377;
    }
    vec4 _398 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_394, _395));
    float _422 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _426 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _427 = _247 * _426;
    float _428 = _248 * _426;
    float _429 = _249 * _426;
    vec4 _434 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _436 = _434.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _511 = sqrt(((_247 * _247) + (_248 * _248)) + (_249 * _249));
        float _518 = (cbMatDynParam._m0[5u].x * _511) + cbMatDynParam._m0[5u].y;
        float _2364 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
        float _519 = isnan(1.0) ? _2364 : (isnan(_2364) ? 1.0 : min(_2364, 1.0));
        float _523 = (cbMatDynParam._m0[5u].z * _511) + cbMatDynParam._m0[5u].w;
        float _2375 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2375 : (isnan(_2375) ? 1.0 : min(_2375, 1.0))) - _519)) + _519) < ((_436 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _454 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _455 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_454 * cbSceneParam._m0[86u].x, _455 * cbSceneParam._m0[86u].y));
    float _467 = _464.x * TEXCOORD.z;
    float _468 = (-0.0) - _427;
    float _469 = (-0.0) - _428;
    float _470 = (-0.0) - _429;
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _664;
    float _665;
    float _666;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = (cbModelParam._m0[37u].x * ((((fma(_500, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _588 = (cbModelParam._m0[37u].y * ((((fma(_500, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _589 = (((((fma(_500, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _637 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _647 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _657 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_613.x + (-0.5));
        float _659 = _657 * (_613.y + (-0.5));
        float _660 = _657 * (_613.z + (-0.5));
        _664 = _626 * (_592.z + (-0.5));
        _665 = _626 * (_592.y + (-0.5));
        _666 = _626 * (_592.x + (-0.5));
        _667 = _637 * (_599.z + (-0.5));
        _668 = _637 * (_599.y + (-0.5));
        _669 = _637 * (_599.x + (-0.5));
        _670 = _647 * (_606.z + (-0.5));
        _671 = _647 * (_606.y + (-0.5));
        _672 = _647 * (_606.x + (-0.5));
        _673 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        _674 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        _675 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    }
    else
    {
        _664 = _344;
        _665 = _344;
        _666 = _344;
        _667 = _344;
        _668 = _344;
        _669 = _344;
        _670 = _344;
        _671 = _344;
        _672 = _344;
        _673 = _344;
        _674 = _344;
        _675 = _344;
    }
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _732 = (cbModelParam._m0[38u].x * ((((fma(_500, cbModelParam._m0[30u].z, fma(_496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _492)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _733 = (cbModelParam._m0[38u].y * ((((fma(_500, cbModelParam._m0[31u].z, fma(_496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _492)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _734 = (((((fma(_500, cbModelParam._m0[32u].z, fma(_496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _492)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        float _769 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _779 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _789 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _799 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_757.x + (-0.5));
        float _801 = _799 * (_757.y + (-0.5));
        float _802 = _799 * (_757.z + (-0.5));
        _806 = _769 * (_736.z + (-0.5));
        _807 = _769 * (_736.y + (-0.5));
        _808 = _769 * (_736.x + (-0.5));
        _809 = _779 * (_743.z + (-0.5));
        _810 = _779 * (_743.y + (-0.5));
        _811 = _779 * (_743.x + (-0.5));
        _812 = _789 * (_750.z + (-0.5));
        _813 = _789 * (_750.y + (-0.5));
        _814 = _789 * (_750.x + (-0.5));
        _815 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        _816 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        _817 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    }
    else
    {
        _806 = _344;
        _807 = _344;
        _808 = _344;
        _809 = _344;
        _810 = _344;
        _811 = _344;
        _812 = _344;
        _813 = _344;
        _814 = _344;
        _815 = _344;
        _816 = _344;
        _817 = _344;
    }
    float _832 = _427 * (-0.5);
    float _833 = _428 * (-0.5);
    float _834 = _429 * (-0.5);
    float _835 = dot(vec4(_832, _833, _834, 1.0), vec4(_808, _811, _814, _817));
    float _838 = dot(vec4(_832, _833, _834, 1.0), vec4(_807, _810, _813, _816));
    float _841 = dot(vec4(_832, _833, _834, 1.0), vec4(_806, _809, _812, _815));
    float _876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _848 = dot(vec4(_832, _833, _834, 1.0), vec4(_664, _667, _670, _673));
        float _852 = dot(vec4(_832, _833, _834, 1.0), vec4(_665, _668, _671, _674));
        float _856 = dot(vec4(_832, _833, _834, 1.0), vec4(_666, _669, _672, _675));
        float _863 = dot(vec4(cbModelParam._m0[39u]), vec4(_832, _833, _834, 1.0));
        _876 = dot(vec3(isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)), isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)), isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_863) ? 0.0 : (isnan(0.0) ? _863 : max(0.0, _863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _876 = 1.0;
    }
    float _887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _878 = dot(vec4(cbModelParam._m0[40u]), vec4(_832, _833, _834, 1.0));
        _887 = dot(vec3(isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)), isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)), isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_878) ? 0.0 : (isnan(0.0) ? _878 : max(0.0, _878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _887 = 1.0;
    }
    float _891 = (_887 * cbModelParam._m0[1u].x) + (_876 * (1.0 - cbModelParam._m0[1u].x));
    float _898 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _981;
    float _983;
    float _985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _948 = fma(_500, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492)) + cbModelParam._m0[13u].w;
        float _952 = fma(_500, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492)) + cbModelParam._m0[14u].w;
        float _956 = fma(_500, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492)) + cbModelParam._m0[15u].w;
        float _959 = fma(_470, cbModelParam._m0[13u].z, fma(_469, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _468));
        float _962 = fma(_470, cbModelParam._m0[14u].z, fma(_469, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _468));
        float _965 = fma(_470, cbModelParam._m0[15u].z, fma(_469, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _468));
        float _991;
        if (_959 > 0.0)
        {
            _991 = abs((1.0 - _948) / _959);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_959 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_948 + 1.0) / _959);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _991 = frontier_phi_29_27_ladder;
        }
        float _1293;
        if (_962 > 0.0)
        {
            _1293 = abs((1.0 - _952) / _962);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_962 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_952 + 1.0) / _962);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1293 = frontier_phi_38_34_ladder;
        }
        float _1598;
        if (_965 > 0.0)
        {
            _1598 = abs((1.0 - _956) / _965);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_965 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_956 + 1.0) / _965);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1598 = frontier_phi_52_45_ladder;
        }
        float _1600 = isnan(_1293) ? _991 : (isnan(_991) ? _1293 : min(_991, _1293));
        float _1601 = isnan(_1598) ? _1600 : (isnan(_1600) ? _1598 : min(_1600, _1598));
        float _1605 = (_1601 * _959) + _948;
        float _1606 = (_1601 * _962) + _952;
        float _1607 = (_1601 * _965) + _956;
        float _1608 = _1601 * 9.9999997473787516355514526367188e-05;
        float _1609 = (-1.0) - _1608;
        float _1611 = _1608 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1607 > _1611) || ((_1607 < _1609) || ((_1606 > _1611) || ((_1606 < _1609) || ((_1605 < _1609) || (_1605 > _1611))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1607, cbModelParam._m0[9u].z, fma(_1606, cbModelParam._m0[9u].y, _1605 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1607, cbModelParam._m0[10u].z, fma(_1606, cbModelParam._m0[10u].y, _1605 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1607, cbModelParam._m0[11u].z, fma(_1606, cbModelParam._m0[11u].y, _1605 * cbModelParam._m0[11u].x))), _898);
            frontier_phi_28_52_ladder = _1734.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _1734.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _1734.x * cbModelParam._m0[1u].y;
        }
        _981 = frontier_phi_28_52_ladder_2;
        _983 = frontier_phi_28_52_ladder_1;
        _985 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_468, _469, _470), _898);
        _981 = _969.x * cbModelParam._m0[1u].y;
        _983 = _969.y * cbModelParam._m0[1u].y;
        _985 = _969.z * cbModelParam._m0[1u].y;
    }
    float _988 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1079;
    float _1081;
    float _1083;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1043 = fma(_500, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492)) + cbModelParam._m0[21u].w;
        float _1047 = fma(_500, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492)) + cbModelParam._m0[22u].w;
        float _1051 = fma(_500, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492)) + cbModelParam._m0[23u].w;
        float _1054 = fma(_470, cbModelParam._m0[21u].z, fma(_469, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _468));
        float _1057 = fma(_470, cbModelParam._m0[22u].z, fma(_469, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _468));
        float _1060 = fma(_470, cbModelParam._m0[23u].z, fma(_469, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _468));
        float _1298;
        if (_1054 > 0.0)
        {
            _1298 = abs((1.0 - _1043) / _1054);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1054 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1043 + 1.0) / _1054);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1298 = frontier_phi_40_36_ladder;
        }
        float _1624;
        if (_1057 > 0.0)
        {
            _1624 = abs((1.0 - _1047) / _1057);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1057 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1047 + 1.0) / _1057);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1624 = frontier_phi_54_47_ladder;
        }
        float _1796;
        if (_1060 > 0.0)
        {
            _1796 = abs((1.0 - _1051) / _1060);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1060 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1051 + 1.0) / _1060);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _1796 = frontier_phi_72_65_ladder;
        }
        float _1798 = isnan(_1624) ? _1298 : (isnan(_1298) ? _1624 : min(_1298, _1624));
        float _1799 = isnan(_1796) ? _1798 : (isnan(_1798) ? _1796 : min(_1798, _1796));
        float _1803 = (_1799 * _1054) + _1043;
        float _1804 = (_1799 * _1057) + _1047;
        float _1805 = (_1799 * _1060) + _1051;
        float _1806 = _1799 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1806;
        float _1809 = _1806 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_1805 > _1809) || ((_1805 < _1807) || ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 < _1807) || (_1803 > _1809))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1805, cbModelParam._m0[17u].z, fma(_1804, cbModelParam._m0[17u].y, _1803 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1805, cbModelParam._m0[18u].z, fma(_1804, cbModelParam._m0[18u].y, _1803 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1805, cbModelParam._m0[19u].z, fma(_1804, cbModelParam._m0[19u].y, _1803 * cbModelParam._m0[19u].x))), _988);
            frontier_phi_37_72_ladder = _1974.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _1974.x * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _1974.y * cbModelParam._m0[1u].z;
        }
        _1079 = frontier_phi_37_72_ladder_1;
        _1081 = frontier_phi_37_72_ladder_2;
        _1083 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_468, _469, _470), _988);
        _1079 = _1063.x * cbModelParam._m0[1u].z;
        _1081 = _1063.y * cbModelParam._m0[1u].z;
        _1083 = _1063.z * cbModelParam._m0[1u].z;
    }
    float _1095 = _467 * 0.01200000010430812835693359375;
    float _1097 = _1095 * ((cbModelParam._m0[1u].w * (_1079 - _981)) + _981);
    float _1098 = _1095 * ((cbModelParam._m0[1u].w * (_1081 - _983)) + _983);
    float _1099 = _1095 * ((cbModelParam._m0[1u].w * (_1083 - _985)) + _985);
    float _1120 = fma(_1099, cbSceneParam._m0[89u].z, fma(_1098, cbSceneParam._m0[89u].y, _1097 * cbSceneParam._m0[89u].x));
    float _1123 = fma(_1099, cbSceneParam._m0[90u].z, fma(_1098, cbSceneParam._m0[90u].y, _1097 * cbSceneParam._m0[90u].x));
    float _1126 = fma(_1099, cbSceneParam._m0[91u].z, fma(_1098, cbSceneParam._m0[91u].y, _1097 * cbSceneParam._m0[91u].x));
    vec4 _1134 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_454, _455));
    float _1136 = _1134.w;
    uint _1152 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1156 = floatBitsToUint(cbInstanceData._m0[_1152 + 5u]);
    uint _1158 = _1156.x * 14u;
    uint _1159 = _1158 + 13u;
    float _1164 = _467 + (-1.0);
    float _1168 = (cbLight._m0[_1159].x * _1164) + 1.0;
    float _1169 = (cbLight._m0[_1159].y * _1164) + 1.0;
    uint _1170 = _1158 + 8u;
    float _1181 = cbLight._m0[_1158].x + _427;
    float _1182 = cbLight._m0[_1158].y + _428;
    float _1183 = cbLight._m0[_1158].z + _429;
    float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
    float _1191 = dot(vec3(0.0), vec3(cbLight._m0[_1158].xyz));
    float _2501 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
    float _1195 = dot(vec3(0.0), vec3(_427, _428, _429));
    float _2512 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
    float _1199 = dot(vec3(cbLight._m0[_1158].xyz), vec3(_1181 * _1187, _1182 * _1187, _1183 * _1187));
    float _2523 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1210 = (exp2(log2(1.0 - (isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1216 = (0.5 / ((_1194 + 9.9999999392252902907785028219223e-09) + _1198)) * _1194;
    float _2534 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = (isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0))) * 0.31831014156341552734375;
    float _1220 = isnan(1.0) ? _1168 : (isnan(_1168) ? 1.0 : min(_1168, 1.0));
    uint _1233 = _1158 + 9u;
    uint _1239 = _1158 | 1u;
    float _1245 = cbLight._m0[_1239].x + _427;
    float _1246 = cbLight._m0[_1239].y + _428;
    float _1247 = cbLight._m0[_1239].z + _429;
    float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
    float _1255 = dot(vec3(0.0), vec3(cbLight._m0[_1239].xyz));
    float _2550 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _1258 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
    float _1259 = dot(vec3(cbLight._m0[_1239].xyz), vec3(_1245 * _1251, _1246 * _1251, _1247 * _1251));
    float _2561 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1268 = (exp2(log2(1.0 - (isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1272 = (0.5 / ((_1258 + 9.9999999392252902907785028219223e-09) + _1198)) * _1258;
    float _2572 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1274 = (isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0))) * 0.31831014156341552734375;
    float _1275 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
    float _1285 = (((_1268 * cbLight._m0[_1233].x) * _1274) * _1275) + ((((cbLight._m0[_1170].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1136))) * _1210) * _1218) * _1220);
    float _1286 = (((_1268 * cbLight._m0[_1233].y) * _1274) * _1275) + ((((cbLight._m0[_1170].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1136))) * _1210) * _1218) * _1220);
    float _1287 = (((_1268 * cbLight._m0[_1233].z) * _1274) * _1275) + ((((cbLight._m0[_1170].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1136))) * _1210) * _1218) * _1220);
    float _1404;
    float _1406;
    float _1408;
    if (_1156.y == 0u)
    {
        float _1343 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1343;
        float _1345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1343;
        float _1346 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1343;
        uvec4 _1358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1359 = _1358.x;
        uint _1370 = uint((float(_1358.y) * floor(float(uint(cbSceneParam._m0[85u].y * _455) / _1359))) + floor(float(uint(cbSceneParam._m0[85u].x * _454) / _1359)));
        float _1380 = (log2(_1346 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1381 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        uint _1384 = uint(isnan(14.0) ? _1381 : (isnan(_1381) ? 14.0 : min(_1381, 14.0)));
        uvec4 _1389 = texelFetch(g_lightClusterGridBuffer, int(((_1384 << 2u) + (_1370 << 6u)) >> 2u));
        uint _1390 = _1389.x;
        uint _1391 = _1358.z;
        float _1481;
        float _1483;
        float _1485;
        if (((((1u << ((_1391 >> 4u) & 15u)) + 4294967295u) & _1390) == 0u) || ((_1391 & 240u) == 0u))
        {
            _1481 = 0.0;
            _1483 = 0.0;
            _1485 = 0.0;
        }
        else
        {
            float _1482;
            float _1484;
            float _1486;
            float _1649 = 0.0;
            float _1650 = 0.0;
            float _1651 = 0.0;
            uint _1652 = 0u;
            uint _1661;
            bool _1662;
            for (;;)
            {
                _1661 = texelFetch(g_lightClassification, int((((_1384 << 5u) + (_1370 << 9u)) + (_1652 << 2u)) >> 2u)).x;
                _1662 = _1661 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                if (_1662)
                {
                    frontier_phi_67_pred = _1651;
                    frontier_phi_67_pred_1 = _1650;
                    frontier_phi_67_pred_2 = _1649;
                }
                else
                {
                    float _1836;
                    float _1837;
                    float _1838;
                    uint _1839;
                    _1836 = _1649;
                    _1837 = _1650;
                    _1838 = _1651;
                    _1839 = _1661;
                    float _1743;
                    float _1744;
                    float _1745;
                    for (;;)
                    {
                        uint _1843 = uint(findLSB(_1839)) + (_1652 << 5u);
                        uint _1840 = (_1839 + 4294967295u) & _1839;
                        uint _1845 = _1843 * 48u;
                        vec4 _1859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1845)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 3u)).x));
                        uint _1876 = (_1843 * 48u) + 8u;
                        vec3 _1887 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1876)).x, texelFetch(g_PointLightRenderingBuffer, int(_1876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1876 + 2u)).x));
                        float _1891 = _1859.x - _1344;
                        float _1892 = _1859.y - _1345;
                        float _1893 = _1859.z - _1346;
                        float _1894 = dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893));
                        float _1897 = inversesqrt(_1894);
                        float _1906 = 1.0 - (_1894 * _1859.w);
                        float _2598 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
                        float _1908 = sqrt(_1894) * uintBitsToFloat(uvec4(_1866, _1867, _1868, texelFetch(g_PointLightRenderingBuffer, int(((_1843 * 48u) + 4u) + 3u)).x)).w;
                        float _1911 = 1.39999997615814208984375 / (_1908 + 1.39999997615814208984375);
                        float _1912 = _1911 * _1911;
                        float _1915 = ((1.0 - _1912) * dot(vec3(0.0), vec3(_1897 * _1891, _1897 * _1892, _1897 * _1893))) + _1912;
                        float _1917 = (-0.0) - _1344;
                        float _1918 = (-0.0) - _1345;
                        float _1919 = (-0.0) - _1346;
                        float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
                        float _1927 = dot(vec3(0.0), vec3(_1923 * _1917, _1923 * _1918, _1923 * _1919));
                        float _2609 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
                        float _2620 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
                        float _1931 = isnan(1.0) ? _2620 : (isnan(_2620) ? 1.0 : min(_2620, 1.0));
                        float _1935 = (0.5 / (((isnan(1.0) ? _2609 : (isnan(_2609) ? 1.0 : min(_2609, 1.0))) + 9.9999999392252902907785028219223e-09) + _1931)) * _1931;
                        float _2631 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
                        float _1944 = (((isnan(1.0) ? _2631 : (isnan(_2631) ? 1.0 : min(_2631, 1.0))) * 3.1415927410125732421875) / (((_1908 * _1908) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2598 : (isnan(_2598) ? 1.0 : min(_2598, 1.0)));
                        _1743 = (_1944 * _1887.x) + _1836;
                        _1744 = (_1944 * _1887.y) + _1837;
                        _1745 = (_1944 * _1887.z) + _1838;
                        if (_1840 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1836 = _1743;
                            _1837 = _1744;
                            _1838 = _1745;
                            _1839 = _1840;
                        }
                    }
                    frontier_phi_67_pred = _1745;
                    frontier_phi_67_pred_1 = _1744;
                    frontier_phi_67_pred_2 = _1743;
                }
                _1486 = frontier_phi_67_pred;
                _1484 = frontier_phi_67_pred_1;
                _1482 = frontier_phi_67_pred_2;
                uint _1653 = _1652 + 1u;
                if (_1653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1649 = _1482;
                    _1650 = _1484;
                    _1651 = _1486;
                    _1652 = _1653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1481 = _1482;
            _1483 = _1484;
            _1485 = _1486;
        }
        uvec4 _1489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1490 = _1489.z;
        uint _1492 = (_1490 >> 8u) & 15u;
        float _1629;
        float _1631;
        float _1633;
        if (((4294967295u << _1492) & _1390) == 0u)
        {
            _1629 = _1481;
            _1631 = _1483;
            _1633 = _1485;
        }
        else
        {
            float _1645 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            if (_1492 < ((_1490 >> 12u) & 15u))
            {
                float _1630;
                float _1632;
                float _1634;
                float _1822 = _1481;
                float _1823 = _1483;
                float _1824 = _1485;
                uint _1825 = _1492;
                uint _1834;
                bool _1835;
                for (;;)
                {
                    _1834 = texelFetch(g_lightClassification, int((((_1384 << 5u) + (_1370 << 9u)) + (_1825 << 2u)) >> 2u)).x;
                    _1835 = _1834 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    if (_1835)
                    {
                        frontier_phi_81_pred = _1822;
                        frontier_phi_81_pred_1 = _1824;
                        frontier_phi_81_pred_2 = _1823;
                    }
                    else
                    {
                        float _1979;
                        float _1980;
                        float _1981;
                        float _2200;
                        float _2201;
                        float _2202;
                        float _1989 = _1822;
                        float _1990 = _1823;
                        float _1991 = _1824;
                        uint _1992 = _1834;
                        uint _1993;
                        uint _2003;
                        vec4 _2018;
                        float _2019;
                        vec3 _2031;
                        vec4 _2046;
                        vec4 _2061;
                        float _2107;
                        bool _2108;
                        for (;;)
                        {
                            _2003 = ((_1825 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1992));
                            _1993 = (_1992 + 4294967295u) & _1992;
                            uint _2005 = _2003 * 40u;
                            _2018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 3u)).x));
                            _2019 = _2018.w;
                            uint _2021 = (_2003 * 40u) + 8u;
                            _2031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 2u)).x));
                            uint _2033 = (_2003 * 40u) + 16u;
                            _2046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 3u)).x));
                            uint _2048 = (_2003 * 40u) + 20u;
                            _2061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 3u)).x));
                            uint _2063 = (_2003 * 40u) + 24u;
                            vec4 _2076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 3u)).x));
                            uint _2082 = (_2003 * 40u) + 28u;
                            vec4 _2095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 3u)).x));
                            _2107 = fma(_1346, _2095.z, fma(_1345, _2095.y, _2095.x * _1344)) + _2095.w;
                            _2108 = !((fma(_1346, _2076.z, fma(_1345, _2076.y, _2076.x * _1344)) + _2076.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            if (_2108)
                            {
                                float _2142 = _2018.x - _1344;
                                float _2143 = _2018.y - _1345;
                                float _2144 = _2018.z - _1346;
                                float _2145 = dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144));
                                float _2148 = inversesqrt(_2145);
                                float _2155 = 1.0 - (_2145 / (_2019 * _2019));
                                float _2642 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
                                float _2157 = sqrt(_2145) * uintBitsToFloat(uvec4(_2111, _2112, _2113, texelFetch(g_SpotLightRenderingBuffer, int(((_2003 * 40u) + 4u) + 3u)).x)).w;
                                float _2159 = 1.39999997615814208984375 / (_2157 + 1.39999997615814208984375);
                                float _2160 = _2159 * _2159;
                                float _2163 = (fma(_1346, _2046.z, fma(_1345, _2046.y, _2046.x * _1344)) + _2046.w) / _2107;
                                float _2164 = (fma(_1346, _2061.z, fma(_1345, _2061.y, _2061.x * _1344)) + _2061.w) / _2107;
                                float _2168 = 1.0 - dot(vec2(_2163, _2164), vec2(_2163, _2164));
                                float _2653 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
                                float _2176 = dot(vec3(0.0), vec3((-0.0) - (_1344 * _1645), (-0.0) - (_1345 * _1645), (-0.0) - (_1346 * _1645)));
                                float _2664 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
                                float _2184 = ((1.0 - _2160) * dot(vec3(0.0), vec3(_2148 * _2142, _2148 * _2143, _2148 * _2144))) + _2160;
                                float _2675 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
                                float _2185 = isnan(1.0) ? _2675 : (isnan(_2675) ? 1.0 : min(_2675, 1.0));
                                float _2189 = (0.5 / (((isnan(1.0) ? _2664 : (isnan(_2664) ? 1.0 : min(_2664, 1.0))) + 9.9999999392252902907785028219223e-09) + _2185)) * _2185;
                                float _2686 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
                                float _2196 = ((isnan(1.0) ? _2653 : (isnan(_2653) ? 1.0 : min(_2653, 1.0))) * (isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0)))) * (((isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0))) * 3.1415927410125732421875) / (((_2157 * _2157) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2196 * _2031.x;
                                frontier_phi_87_pred_1 = _2196 * _2031.y;
                                frontier_phi_87_pred_2 = _2196 * _2031.z;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                            }
                            _2200 = frontier_phi_87_pred;
                            _2201 = frontier_phi_87_pred_1;
                            _2202 = frontier_phi_87_pred_2;
                            _1979 = _2200 + _1989;
                            _1980 = _2201 + _1990;
                            _1981 = _2202 + _1991;
                            if (_1993 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1989 = _1979;
                                _1990 = _1980;
                                _1991 = _1981;
                                _1992 = _1993;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _1979;
                        frontier_phi_81_pred_1 = _1981;
                        frontier_phi_81_pred_2 = _1980;
                    }
                    _1630 = frontier_phi_81_pred;
                    _1634 = frontier_phi_81_pred_1;
                    _1632 = frontier_phi_81_pred_2;
                    uint _1826 = _1825 + 1u;
                    if (_1826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1822 = _1630;
                        _1823 = _1632;
                        _1824 = _1634;
                        _1825 = _1826;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1634;
                frontier_phi_56_57_ladder_1 = _1632;
                frontier_phi_56_57_ladder_2 = _1630;
            }
            else
            {
                frontier_phi_56_57_ladder = _1485;
                frontier_phi_56_57_ladder_1 = _1483;
                frontier_phi_56_57_ladder_2 = _1481;
            }
            _1629 = frontier_phi_56_57_ladder_2;
            _1631 = frontier_phi_56_57_ladder_1;
            _1633 = frontier_phi_56_57_ladder;
        }
        float _1638 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _1404 = ((_1629 * 0.039999999105930328369140625) * _1638) + _1285;
        _1406 = ((_1631 * 0.039999999105930328369140625) * _1638) + _1286;
        _1408 = ((_1633 * 0.039999999105930328369140625) * _1638) + _1287;
    }
    else
    {
        _1404 = _1285;
        _1406 = _1286;
        _1408 = _1287;
    }
    uint _1414 = _1152 + 9u;
    uint _1415 = _1414 + uint(cbMatDynParam._m0[0u].w);
    float _1430 = ((_398.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1415].x) + ((_1404 + ((isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1431 = ((_398.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1415].y) + ((_1406 + ((isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1432 = ((_398.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1415].z) + ((_1408 + ((isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
    uint _1436 = _1152 + 6u;
    float _1444 = _454 / cbSceneParam._m0[86u].x;
    float _1445 = _455 / cbSceneParam._m0[86u].y;
    vec4 _1459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1444, _1445, (log2((isnan(cbSceneParam._m0[77u].w) ? _422 : (isnan(_422) ? cbSceneParam._m0[77u].w : min(_422, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1461 = _1459.x;
    float _1462 = _1459.y;
    float _1463 = _1459.z;
    float _1464 = _1459.w;
    float _1538;
    float _1540;
    float _1542;
    float _1544;
    if (_422 > cbSceneParam._m0[78u].w)
    {
        float _1500 = isnan(_422) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _422 : min(cbSceneParam._m0[80u].w, _422));
        float _1501 = _1500 / _422;
        float _1512 = _1501 * _247;
        float _1513 = _248 * _1501;
        float _1514 = (-0.0) - _1513;
        float _1515 = _1501 * _249;
        float _1517 = (cbSceneParam._m0[77u].w * _1514) / _1500;
        float _1518 = _1517 + cbSceneParam._m0[79u].w;
        float _1519 = cbSceneParam._m0[79u].w - _1513;
        float _1525 = sqrt(((_1512 * _1512) + (_1513 * _1513)) + (_1515 * _1515));
        float _1528 = (1.0 - (cbSceneParam._m0[77u].w / _1500)) * _1525;
        float _1534 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1536 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1753;
        if (abs((_1514 - _1517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1753 = ((((_1518 > 0.0) ? exp2(_1534 * _1518) : (2.0 - exp2(_1536 * _1518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1528;
        }
        else
        {
            float _1675 = 1.0 / cbSceneParam._m0[80u].x;
            float _1676 = isnan(_1519) ? _1518 : (isnan(_1518) ? _1519 : max(_1518, _1519));
            float _1677 = isnan(_1519) ? _1518 : (isnan(_1518) ? _1519 : min(_1518, _1519));
            float _1686 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : min(_1676, 0.0));
            float _1687 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : min(_1677, 0.0));
            _1753 = ((abs(_1525 / _1514) * cbSceneParam._m0[80u].y) * ((((_1686 - _1687) * 2.0) - ((exp2(_1534 * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)))) - exp2(_1534 * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))))) * _1675)) - ((exp2(_1536 * _1686) - exp2(_1536 * _1687)) * _1675))) + (_1528 * cbSceneParam._m0[80u].z);
        }
        vec4 _1755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1444, _1445, 1.0), 0.0);
        float _1764 = exp2((_1753 * (-1.44269502162933349609375)) * (1.0 - _1755.w));
        float _1765 = log2(_1764);
        float _1781 = log2(_1464);
        _1538 = (exp2(_1781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].x)) * _1755.x) / cbSceneParam._m0[78u].x)) + _1461;
        _1540 = (exp2(_1781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].y)) * _1755.y) / cbSceneParam._m0[78u].y)) + _1462;
        _1542 = (exp2(_1781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].z)) * _1755.z) / cbSceneParam._m0[78u].z)) + _1463;
        _1544 = _1764 * _1464;
    }
    else
    {
        _1538 = _1461;
        _1540 = _1462;
        _1542 = _1463;
        _1544 = _1464;
    }
    bool _1791;
    vec4 _1554;
    vec4 _1577;
    float _1579;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    bool _1597;
    for (;;)
    {
        _1554 = cbMatDynParam._m0[0u];
        float _1556 = roundEven(_1554.y);
        bool _1557 = _1556 == 3.0;
        float _1559 = log2(_1544);
        float _1566 = exp2(_1559 * cbSceneParam._m0[78u].x) * _1433;
        float _1567 = exp2(_1559 * cbSceneParam._m0[78u].y) * _1434;
        float _1568 = exp2(_1559 * cbSceneParam._m0[78u].z) * _1435;
        float _1575 = _436 + (-0.5);
        _1577 = cbMtdParam._m0[1u];
        _1579 = _1577.y * _1575;
        float _1582 = (_1556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1583 = _1582 * (_1557 ? _1566 : (_1566 + (cbSceneParam._m0[72u].w * _1538)));
        _1584 = _1582 * (_1557 ? _1567 : (_1567 + (cbSceneParam._m0[72u].w * _1540)));
        _1585 = _1582 * (_1557 ? _1568 : (_1568 + (cbSceneParam._m0[72u].w * _1542)));
        _1586 = _1575 * 0.999000012874603271484375;
        _1597 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1597)
        {
            if ((cbInstanceData._m0[_1152 + 7u].x + _1586) < 0.5)
            {
                _1791 = true;
                break;
            }
        }
        uint _1710 = _1414 + uint(_1554.w);
        if ((cbInstanceData._m0[_1710].w < 1.0) && ((cbInstanceData._m0[_1710].w + _1586) < 0.5))
        {
            _1791 = true;
            break;
        }
        if ((_1579 + 1.0) < _1577.x)
        {
            _1791 = true;
            break;
        }
        _1791 = false;
        break;
    }
    float _1949;
    if (_1791)
    {
        discard_state = true;
        _1949 = 0.0;
    }
    else
    {
        _1949 = cbInstanceData._m0[_1436].w;
    }
    SV_Target.x = _1583;
    SV_Target.y = _1584;
    SV_Target.z = _1585;
    SV_Target.w = _1949;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1436].w;
    discard_exit();
}


