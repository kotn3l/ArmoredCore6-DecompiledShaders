#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1299;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _603 = (_593 * ((_549 - _474) - (_549 * _294))) + _474;
    float _604 = (_593 * ((_550 - _475) - (_550 * _294))) + _475;
    float _605 = (_593 * ((_551 - _476) - (_551 * _294))) + _476;
    float _619 = _397 * cbMtdParam._m0[21u].z;
    float _620 = _398 * cbMtdParam._m0[21u].y;
    bool _621 = _619 > 0.0;
    float _626;
    if (_621)
    {
        _626 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _626 = frontier_phi_27_26_ladder;
    }
    bool _628 = _620 > 0.0;
    float _633;
    if (_628)
    {
        _633 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _633 = frontier_phi_31_30_ladder;
    }
    float _636 = _418 ? (cbMtdParam._m0[18u].x / _396) : 5000.0;
    float _637 = isnan(_633) ? _626 : (isnan(_626) ? _633 : min(_626, _633));
    float _638 = isnan(_636) ? _637 : (isnan(_637) ? _636 : min(_637, _636));
    float _642 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _646 = ((_638 * _396) + _642) / _642;
    float _651 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _653 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _670 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_638 * _619)) / _646) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_638 * _620)) / _646) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _675 = _670.x * cbMtdParam._m0[14u].x;
    float _676 = _670.y * cbMtdParam._m0[14u].y;
    float _677 = _670.z * cbMtdParam._m0[14u].z;
    float _685;
    if (_621)
    {
        _685 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _685 = frontier_phi_35_34_ladder;
    }
    float _691;
    if (_628)
    {
        _691 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _691 = frontier_phi_39_38_ladder;
    }
    float _693 = isnan(_691) ? _685 : (isnan(_685) ? _691 : min(_685, _691));
    float _694 = isnan(_636) ? _693 : (isnan(_693) ? _636 : min(_693, _636));
    float _701 = ((_694 * _396) + _642) / _642;
    vec4 _715 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_694 * _619)) / _701) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_694 * _620)) / _701) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _717 = _715.w;
    float _719 = _717 - (_717 * _294);
    float _730 = 0.5 - (_294 * 0.5);
    float _740 = (((_603 - _307) + (_719 * ((_675 - _603) - (_675 * _294)))) * _730) + _307;
    float _741 = (((_604 - _309) + (_719 * ((_676 - _604) - (_676 * _294)))) * _730) + _309;
    float _742 = (((_605 - _311) + (_719 * ((_677 - _605) - (_677 * _294)))) * _730) + _311;
    vec4 _754 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _756 = _754.x;
    vec4 _768 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _772 = _768.z;
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3749 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))));
    float _783 = _772 * _294;
    float _790 = (cbMtdParam._m0[15u].w * ((_333 - _783) + ((_772 - _333) * _294))) + _783;
    float _794 = (cbMtdParam._m0[16u].x * _361) + _775;
    float _795 = (cbMtdParam._m0[16u].x * _362) + _776;
    float _798 = fma(_782, _203, fma(_795, _210, _794 * _196));
    float _801 = fma(_782, _204, fma(_795, _211, _794 * _197));
    float _804 = fma(_782, _205, fma(_795, _212, _794 * _198));
    float _808 = inversesqrt(dot(vec3(_798, _801, _804), vec3(_798, _801, _804)));
    float _809 = _808 * _798;
    float _810 = _808 * _801;
    float _811 = _808 * _804;
    float _3760 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _812 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _3771 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3782 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3793 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _3804 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _816 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _832 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _836 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _837 = _267 * _836;
    float _838 = _268 * _836;
    float _839 = _269 * _836;
    float _845 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _846 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _865 = fma(_811, cbSceneParam._m0[5u].z, fma(_810, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _809));
    float _868 = fma(_811, cbSceneParam._m0[6u].z, fma(_810, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _809));
    float _871 = fma(_811, cbSceneParam._m0[7u].z, fma(_810, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _809));
    uint _884 = uint(roundEven(NORMAL.w)) * 13u;
    uint _887 = (_884 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _893 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * cbInstanceData._m0[_887].x;
    float _894 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_887].y;
    float _895 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_887].z;
    float _3815 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _3837 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _899 = 1.0 - _816;
    float _900 = _896 * _899;
    float _901 = _897 * _899;
    float _902 = _898 * _899;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _816;
    float _908 = (_897 + (-0.039999999105930328369140625)) * _816;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _816;
    float _910 = _907 + 0.039999999105930328369140625;
    float _912 = _908 + 0.039999999105930328369140625;
    float _913 = _909 + 0.039999999105930328369140625;
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _845, cbSceneParam._m0[86u].y * _846));
    float _925 = _922.x * TEXCOORD.z;
    float _926 = dot(vec3(_809, _810, _811), vec3(_837, _838, _839));
    float _929 = _926 * 2.0;
    float _933 = (_929 * _809) - _837;
    float _934 = (_929 * _810) - _838;
    float _935 = (_929 * _811) - _839;
    float _939 = abs(dot(vec3(_837, _838, _839), vec3(_809, _810, _811)));
    float _3848 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _941 = sqrt(_812);
    float _954 = exp2((_941 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_941 * 3.0));
    float _960 = (1.0 - _954) * ((_941 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _961 = _954 * _941;
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1298;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1025 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1029 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1033 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1056 = _989 + _809;
        float _1057 = _993 + _810;
        float _1058 = _997 + _811;
        float _1068 = fma(_1058, cbModelParam._m0[26u].z, fma(_1057, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056)) - _1025;
        float _1069 = fma(_1058, cbModelParam._m0[27u].z, fma(_1057, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056)) - _1029;
        float _1070 = fma(_1058, cbModelParam._m0[28u].z, fma(_1057, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056)) - _1033;
        float _1074 = inversesqrt(dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070)));
        float _1087 = ((_1074 * _1068) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1025 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1074 * _1069) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1029 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1074 * _1070) / cbModelParam._m0[34u].z) + ((((((_1033 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1087, _1088, _1089), 0.0);
        float _1126 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1127 = _1126 * (_1092.x + (-0.5));
        float _1128 = _1126 * (_1092.y + (-0.5));
        float _1129 = _1126 * (_1092.z + (-0.5));
        float _1136 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1099.x + (-0.5));
        float _1138 = _1136 * (_1099.y + (-0.5));
        float _1139 = _1136 * (_1099.z + (-0.5));
        float _1146 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1106.x + (-0.5));
        float _1148 = _1146 * (_1106.y + (-0.5));
        float _1149 = _1146 * (_1106.z + (-0.5));
        float _1156 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1113.x + (-0.5));
        float _1158 = _1156 * (_1113.y + (-0.5));
        float _1159 = _1156 * (_1113.z + (-0.5));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = _1127 * 0.5;
        float _1164 = _1137 * 0.5;
        float _1165 = _1147 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1180 = (dot(vec3(_809, _810, _811), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3874 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1190 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3885 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3896 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_1192 + 1.0))) + _1197) * _1160;
        float _1207 = _1128 * 0.5;
        float _1208 = _1138 * 0.5;
        float _1209 = _1148 * 0.5;
        float _1210 = dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209));
        float _1215 = (_1210 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1210);
        float _1223 = (dot(vec3(_809, _810, _811), vec3(_1215 * _1207, _1215 * _1208, _1215 * _1209)) + 1.0) * 0.5;
        float _3907 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1232 = sqrt(((_1208 * _1208) + (_1207 * _1207)) + (_1209 * _1209)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3918 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _3929 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1234 + 1.0))) + _1239) * _1161;
        float _1249 = _1129 * 0.5;
        float _1250 = _1139 * 0.5;
        float _1251 = _1149 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_809, _810, _811), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _3962 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1276 + 1.0))) + _1281) * _1162;
        _1298 = _1129;
        _1300 = _1128;
        _1301 = _1127;
        _1302 = _1139;
        _1303 = _1138;
        _1304 = _1137;
        _1305 = _1149;
        _1306 = _1148;
        _1307 = _1147;
        _1308 = _1162;
        _1309 = _1161;
        _1310 = _1160;
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
    }
    else
    {
        _1298 = _1299;
        _1300 = _1299;
        _1301 = _1299;
        _1302 = _1299;
        _1303 = _1299;
        _1304 = _1299;
        _1305 = _1299;
        _1306 = _1299;
        _1307 = _1299;
        _1308 = _1299;
        _1309 = _1299;
        _1310 = _1299;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1339 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1343 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1347 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1370 = _989 + _809;
        float _1371 = _993 + _810;
        float _1372 = _997 + _811;
        float _1382 = fma(_1372, cbModelParam._m0[30u].z, fma(_1371, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1370)) - _1339;
        float _1383 = fma(_1372, cbModelParam._m0[31u].z, fma(_1371, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1370)) - _1343;
        float _1384 = fma(_1372, cbModelParam._m0[32u].z, fma(_1371, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1370)) - _1347;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1401 = ((_1388 * _1382) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1339 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1383) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1343 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1388 * _1384) / cbModelParam._m0[35u].z) + ((((((_1347 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1401, _1402, _1403), 0.0);
        float _1438 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1405.x + (-0.5));
        float _1440 = _1438 * (_1405.y + (-0.5));
        float _1441 = _1438 * (_1405.z + (-0.5));
        float _1448 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1412.x + (-0.5));
        float _1450 = _1448 * (_1412.y + (-0.5));
        float _1451 = _1448 * (_1412.z + (-0.5));
        float _1458 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1419.x + (-0.5));
        float _1460 = _1458 * (_1419.y + (-0.5));
        float _1461 = _1458 * (_1419.z + (-0.5));
        float _1468 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1426.x + (-0.5));
        float _1470 = _1468 * (_1426.y + (-0.5));
        float _1471 = _1468 * (_1426.z + (-0.5));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = _1439 * 0.5;
        float _1476 = _1449 * 0.5;
        float _1477 = _1459 * 0.5;
        float _1478 = dot(vec3(_1475, _1476, _1477), vec3(_1475, _1476, _1477));
        float _1483 = (_1478 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1478);
        float _1491 = (dot(vec3(_809, _810, _811), vec3(_1483 * _1475, _1483 * _1476, _1483 * _1477)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1500 = sqrt(((_1476 * _1476) + (_1475 * _1475)) + (_1477 * _1477)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1502 = _1501 * 2.0;
        float _1506 = (1.0 - _1501) / (_1501 + 1.0);
        float _4025 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1516 = ((((1.0 - _1507) * (_1502 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1502 + 1.0))) + _1507) * _1472;
        float _1517 = _1440 * 0.5;
        float _1518 = _1450 * 0.5;
        float _1519 = _1460 * 0.5;
        float _1520 = dot(vec3(_1517, _1518, _1519), vec3(_1517, _1518, _1519));
        float _1525 = (_1520 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1520);
        float _1533 = (dot(vec3(_809, _810, _811), vec3(_1525 * _1517, _1525 * _1518, _1525 * _1519)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1542 = sqrt(((_1518 * _1518) + (_1517 * _1517)) + (_1519 * _1519)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4058 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1544 + 1.0))) + _1549) * _1473;
        float _1559 = _1441 * 0.5;
        float _1560 = _1451 * 0.5;
        float _1561 = _1461 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_809, _810, _811), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4091 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1586 + 1.0))) + _1591) * _1474;
        _1608 = _1441;
        _1609 = _1440;
        _1610 = _1439;
        _1611 = _1451;
        _1612 = _1450;
        _1613 = _1449;
        _1614 = _1461;
        _1615 = _1460;
        _1616 = _1459;
        _1617 = _1474;
        _1618 = _1473;
        _1619 = _1472;
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)));
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
    }
    else
    {
        _1608 = _1299;
        _1609 = _1299;
        _1610 = _1299;
        _1611 = _1299;
        _1612 = _1299;
        _1613 = _1299;
        _1614 = _1299;
        _1615 = _1299;
        _1616 = _1299;
        _1617 = _1299;
        _1618 = _1299;
        _1619 = _1299;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1312)) + _1312;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1313)) + _1313;
    float _1655 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1632));
    float _1676 = _933 * 0.5;
    float _1677 = _934 * 0.5;
    float _1678 = _935 * 0.5;
    float _1679 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1682 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1685 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1719;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1692 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1298, _1302, _1305, _1308));
        float _1696 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1700 = dot(vec4(_1676, _1677, _1678, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1707 = dot(vec4(cbModelParam._m0[39u]), vec4(_1676, _1677, _1678, 1.0));
        _1719 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1707) ? 0.0 : (isnan(0.0) ? _1707 : max(0.0, _1707))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1719 = 1.0;
    }
    float _1730;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1721 = dot(vec4(cbModelParam._m0[40u]), vec4(_1676, _1677, _1678, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)), isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1721) ? 0.0 : (isnan(0.0) ? _1721 : max(0.0, _1721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1734 = (_1730 * cbModelParam._m0[1u].x) + (_1719 * (1.0 - cbModelParam._m0[1u].x));
    float _1744 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _812);
    float _1745 = isnan(_1744) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1744 : min(cbModelParam._m0[25u].z, _1744));
    float _1825;
    float _1827;
    float _1829;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1792 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1796 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1800 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1803 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1806 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1809 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1837;
        if (_1803 > 0.0)
        {
            _1837 = abs((1.0 - _1792) / _1803);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1792 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1837 = frontier_phi_54_52_ladder;
        }
        float _2007;
        if (_1806 > 0.0)
        {
            _2007 = abs((1.0 - _1796) / _1806);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1796 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2007 = frontier_phi_63_59_ladder;
        }
        float _2462;
        if (_1809 > 0.0)
        {
            _2462 = abs((1.0 - _1800) / _1809);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1800 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2462 = frontier_phi_75_70_ladder;
        }
        float _2464 = isnan(_2007) ? _1837 : (isnan(_1837) ? _2007 : min(_1837, _2007));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1803) + _1792;
        float _2470 = (_2465 * _1806) + _1796;
        float _2471 = (_2465 * _1809) + _1800;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1745);
            frontier_phi_53_75_ladder = _2705.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2705.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2705.x * cbModelParam._m0[1u].y;
        }
        _1825 = frontier_phi_53_75_ladder_2;
        _1827 = frontier_phi_53_75_ladder_1;
        _1829 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1745);
        _1825 = _1813.x * cbModelParam._m0[1u].y;
        _1827 = _1813.y * cbModelParam._m0[1u].y;
        _1829 = _1813.z * cbModelParam._m0[1u].y;
    }
    float _1833 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _812);
    float _1834 = isnan(_1833) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1833 : min(cbModelParam._m0[25u].w, _1833));
    float _1922;
    float _1924;
    float _1926;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1886 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1890 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1894 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1897 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1900 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1903 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2012;
        if (_1897 > 0.0)
        {
            _2012 = abs((1.0 - _1886) / _1897);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1886 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2012 = frontier_phi_65_61_ladder;
        }
        float _2489;
        if (_1900 > 0.0)
        {
            _2489 = abs((1.0 - _1890) / _1900);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1890 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2489 = frontier_phi_77_72_ladder;
        }
        float _2826;
        if (_1903 > 0.0)
        {
            _2826 = abs((1.0 - _1894) / _1903);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1894 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2826 = frontier_phi_89_84_ladder;
        }
        float _2828 = isnan(_2489) ? _2012 : (isnan(_2012) ? _2489 : min(_2012, _2489));
        float _2829 = isnan(_2826) ? _2828 : (isnan(_2828) ? _2826 : min(_2828, _2826));
        float _2833 = (_2829 * _1897) + _1886;
        float _2834 = (_2829 * _1900) + _1890;
        float _2835 = (_2829 * _1903) + _1894;
        float _2836 = _2829 * 9.9999997473787516355514526367188e-05;
        float _2837 = (-1.0) - _2836;
        float _2839 = _2836 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2835 > _2839) || ((_2835 < _2837) || ((_2834 > _2839) || ((_2834 < _2837) || ((_2833 < _2837) || (_2833 > _2839))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2956 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2835, cbModelParam._m0[17u].z, fma(_2834, cbModelParam._m0[17u].y, _2833 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2835, cbModelParam._m0[18u].z, fma(_2834, cbModelParam._m0[18u].y, _2833 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2835, cbModelParam._m0[19u].z, fma(_2834, cbModelParam._m0[19u].y, _2833 * cbModelParam._m0[19u].x))), _1834);
            frontier_phi_62_89_ladder = _2956.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2956.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2956.x * cbModelParam._m0[1u].z;
        }
        _1922 = frontier_phi_62_89_ladder_2;
        _1924 = frontier_phi_62_89_ladder_1;
        _1926 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1834);
        _1922 = _1906.x * cbModelParam._m0[1u].z;
        _1924 = _1906.y * cbModelParam._m0[1u].z;
        _1926 = _1906.z * cbModelParam._m0[1u].z;
    }
    float _1939 = (((_960 * _910) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1922 - _1825)) + _1825);
    float _1941 = (((_960 * _912) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1924 - _1827)) + _1827);
    float _1943 = (((_960 * _913) + _961) * _925) * ((cbModelParam._m0[1u].w * (_1926 - _1829)) + _1829);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1939 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1939 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, _1939 * cbSceneParam._m0[91u].x));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1999 = _1986 / _1998;
    float _2000 = _1990 / _1998;
    float _2001 = _1994 / _1998;
    float _2148;
    float _2149;
    float _2150;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2028 = ((uint(_2001 > cbSceneParam._m0[59u].y) + uint(_2001 > cbSceneParam._m0[59u].x)) + uint(_2001 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2029 = _2028 + 43u;
        uint _2037 = _2028 + 44u;
        uint _2045 = _2028 + 45u;
        uint _2053 = _2028 + 46u;
        float _2064 = fma(_1998, cbSceneParam._m0[_2029].w, fma(_1994, cbSceneParam._m0[_2029].z, fma(_1990, cbSceneParam._m0[_2029].y, _1986 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1998, cbSceneParam._m0[_2037].w, fma(_1994, cbSceneParam._m0[_2037].z, fma(_1990, cbSceneParam._m0[_2037].y, _1986 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_1998, cbSceneParam._m0[_2053].w, fma(_1994, cbSceneParam._m0[_2053].z, fma(_1990, cbSceneParam._m0[_2053].y, _1986 * cbSceneParam._m0[_2053].x)));
        float _2081 = cbSceneParam._m0[33u].z * _2076;
        float _2083 = cbSceneParam._m0[33u].w * _2076;
        float _2086 = fma(_1998, cbSceneParam._m0[_2045].w, fma(_1994, cbSceneParam._m0[_2045].z, fma(_1990, cbSceneParam._m0[_2045].y, _1986 * cbSceneParam._m0[_2045].x))) / _2076;
        float _2134 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
        float _4217 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2141 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2081 + _2064) / _2076, (_2083 + _2068) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2083 + _2064) / _2076, (_2068 - _2081) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2081) / _2076, (_2068 - _2083) / _2076), _2086), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2064 - _2083) / _2076, (_2081 + _2068) / _2076), _2086), 0.0)).x), vec4(0.25)));
        _2148 = 1.0 - (_2141 * cbSceneParam._m0[34u].x);
        _2149 = 1.0 - (_2141 * cbSceneParam._m0[34u].y);
        _2150 = 1.0 - (_2141 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2148 = 1.0;
        _2149 = 1.0;
        _2150 = 1.0;
    }
    float _2214;
    float _2216;
    float _2218;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2202 = fma(_1998, cbSceneParam._m0[63u].w, fma(_1994, cbSceneParam._m0[63u].z, fma(_1990, cbSceneParam._m0[63u].y, _1986 * cbSceneParam._m0[63u].x)));
        float _2203 = fma(_1998, cbSceneParam._m0[60u].w, fma(_1994, cbSceneParam._m0[60u].z, fma(_1990, cbSceneParam._m0[60u].y, _1986 * cbSceneParam._m0[60u].x))) / _2202;
        float _2204 = fma(_1998, cbSceneParam._m0[61u].w, fma(_1994, cbSceneParam._m0[61u].z, fma(_1990, cbSceneParam._m0[61u].y, _1986 * cbSceneParam._m0[61u].x))) / _2202;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2203 >= cbSceneParam._m0[64u].x) && (_2204 >= cbSceneParam._m0[64u].y)) && (_2203 <= cbSceneParam._m0[64u].z)) && (_2204 <= cbSceneParam._m0[64u].w))
        {
            float _2502 = fma(_1998, cbSceneParam._m0[62u].w, fma(_1994, cbSceneParam._m0[62u].z, fma(_1990, cbSceneParam._m0[62u].y, _1986 * cbSceneParam._m0[62u].x))) / _2202;
            float _2506 = isnan(cbSceneParam._m0[41u].w) ? _2502 : (isnan(_2502) ? cbSceneParam._m0[41u].w : max(_2502, cbSceneParam._m0[41u].w));
            float _2549 = (cbSceneParam._m0[33u].x - sqrt(((_2000 * _2000) + (_1999 * _1999)) + (_2001 * _2001))) * cbSceneParam._m0[33u].y;
            float _4233 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
            float _2556 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2203, cbSceneParam._m0[33u].w + _2204), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2203, _2204 - cbSceneParam._m0[33u].z), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].z, _2204 - cbSceneParam._m0[33u].w), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2203 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2204), _2506), 0.0)).x), vec4(0.25)));
            float _2560 = 1.0 - (_2556 * cbSceneParam._m0[34u].x);
            float _2561 = 1.0 - (_2556 * cbSceneParam._m0[34u].y);
            float _2562 = 1.0 - (_2556 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2560) ? _2148 : (isnan(_2148) ? _2560 : min(_2148, _2560));
            frontier_phi_74_73_ladder_1 = isnan(_2561) ? _2149 : (isnan(_2149) ? _2561 : min(_2149, _2561));
            frontier_phi_74_73_ladder_2 = isnan(_2562) ? _2150 : (isnan(_2150) ? _2562 : min(_2150, _2562));
        }
        else
        {
            frontier_phi_74_73_ladder = _2148;
            frontier_phi_74_73_ladder_1 = _2149;
            frontier_phi_74_73_ladder_2 = _2150;
        }
        _2214 = frontier_phi_74_73_ladder;
        _2216 = frontier_phi_74_73_ladder_1;
        _2218 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2214 = _2148;
        _2216 = _2149;
        _2218 = _2150;
    }
    uvec4 _2223 = floatBitsToUint(cbInstanceData._m0[_884 + 5u]);
    uint _2225 = _2223.x * 14u;
    uint _2226 = _2225 + 13u;
    float _2231 = _925 + (-1.0);
    float _2234 = (cbLight._m0[_2226].x * _2231) + 1.0;
    float _2235 = (cbLight._m0[_2226].y * _2231) + 1.0;
    uint _2236 = _2225 + 5u;
    float _2242 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2246 = _2225 + 4u;
    float _2255 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2259 = _2225 | 1u;
    float _2270 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_809, _810, _811));
    float _2273 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_809, _810, _811));
    float _4269 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _4280 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2278 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.3183098733425140380859375;
    float _2280 = (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * 0.3183098733425140380859375;
    float _2287 = ((cbLight._m0[_2236].x * _2242) * _2280) + (((cbLight._m0[_2246].x * _2214) * _2255) * _2278);
    float _2288 = ((_2242 * cbLight._m0[_2236].y) * _2280) + (((cbLight._m0[_2246].y * _2216) * _2255) * _2278);
    float _2289 = ((_2242 * cbLight._m0[_2236].z) * _2280) + (((cbLight._m0[_2246].z * _2218) * _2255) * _2278);
    uint _2291 = _2225 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2225].w)) * _812) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2225].x + _837;
    float _2307 = cbLight._m0[_2225].y + _838;
    float _2308 = cbLight._m0[_2225].z + _839;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2225].xyz));
    float _4291 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _4302 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2320 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2321 = dot(vec3(_809, _810, _811), vec3(_2313, _2314, _2315));
    float _4313 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2225].xyz), vec3(_2313, _2314, _2315));
    float _4324 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) * 5.0);
    float _2342 = 0.959999978542327880859375 - _907;
    float _2344 = 0.959999978542327880859375 - _908;
    float _2345 = 0.959999978542327880859375 - _909;
    float _2352 = 1.0 - _2305;
    float _2363 = (0.5 / (((_2320 * ((_2319 * _2352) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2352) + _2305) * _2319))) * _2319;
    float _4335 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2365 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2379 = _2225 + 9u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _812) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2259].x + _837;
    float _2393 = cbLight._m0[_2259].y + _838;
    float _2394 = cbLight._m0[_2259].z + _839;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_809, _810, _811), vec3(cbLight._m0[_2259].xyz));
    float _4346 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2406 = dot(vec3(_809, _810, _811), vec3(_2399, _2400, _2401));
    float _4357 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _2410 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2399, _2400, _2401));
    float _4368 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2414 = _2391 * _2391;
    float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
    float _2425 = exp2(log2(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * 5.0);
    float _2432 = 1.0 - _2391;
    float _2442 = (0.5 / (((_2320 * ((_2405 * _2432) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2432) + _2391) * _2405))) * _2405;
    float _4379 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
    float _2454 = (((((_2425 * _2342) + _910) * cbLight._m0[_2379].x) * _2444) * _2242) + ((((cbLight._m0[_2291].x * _2214) * ((_2341 * _2342) + _910)) * _2365) * _2255);
    float _2455 = (((((_2425 * _2344) + _912) * cbLight._m0[_2379].y) * _2444) * _2242) + ((((cbLight._m0[_2291].y * _2216) * ((_2341 * _2344) + _912)) * _2365) * _2255);
    float _2456 = (((((_2425 * _2345) + _913) * cbLight._m0[_2379].z) * _2444) * _2242) + ((((cbLight._m0[_2291].z * _2218) * ((_2341 * _2345) + _913)) * _2365) * _2255);
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_2223.y == 0u)
    {
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _846) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _845) / _2575)));
        float _2596 = (log2(_2001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        float _2722;
        float _2724;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
        }
        else
        {
            float _2715;
            float _2717;
            float _2719;
            float _2721;
            float _2723;
            float _2725;
            float _2884 = 0.0;
            float _2885 = 0.0;
            float _2886 = 0.0;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            uint _2890 = 0u;
            uint _2899;
            bool _2900;
            for (;;)
            {
                _2899 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2890 << 2u)) >> 2u)).x;
                _2900 = _2899 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2900)
                {
                    frontier_phi_98_pred = _2884;
                    frontier_phi_98_pred_1 = _2885;
                    frontier_phi_98_pred_2 = _2889;
                    frontier_phi_98_pred_3 = _2888;
                    frontier_phi_98_pred_4 = _2887;
                    frontier_phi_98_pred_5 = _2886;
                }
                else
                {
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    uint _3035;
                    _3029 = _2884;
                    _3030 = _2885;
                    _3031 = _2886;
                    _3032 = _2887;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2899;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    for (;;)
                    {
                        uint _3039 = uint(findLSB(_3035)) + (_2890 << 5u);
                        uint _3036 = (_3035 + 4294967295u) & _3035;
                        uint _3041 = _3039 * 48u;
                        vec4 _3055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3061 = (_3039 * 48u) + 4u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3080 = (_3039 * 48u) + 8u;
                        vec3 _3091 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x));
                        float _3095 = _3055.x - _1999;
                        float _3096 = _3055.y - _2000;
                        float _3097 = _3055.z - _2001;
                        float _3098 = dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097));
                        float _3101 = inversesqrt(_3098);
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3105 = dot(vec3(_865, _868, _871), vec3(_3102, _3103, _3104));
                        float _3110 = 1.0 - (_3098 * _3055.w);
                        float _4400 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3112 = sqrt(_3098) * _3074.w;
                        float _3115 = 1.39999997615814208984375 / (_3112 + 1.39999997615814208984375);
                        float _3116 = _3115 * _3115;
                        float _3119 = ((1.0 - _3116) * _3105) + _3116;
                        float _3122 = _3112 * _3112;
                        float _3126 = ((isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0))) * _3111) / ((_3122 * 0.699999988079071044921875) + 1.0);
                        float _3130 = (-0.0) - _1999;
                        float _3131 = (-0.0) - _2000;
                        float _3132 = (-0.0) - _2001;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3146 = exp2(log2(1.0 / ((_3122 * 3.5) + 5.0)) * 0.25);
                        float _3147 = 1.0 - _941;
                        float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                        float _3155 = _3154 * _3154;
                        float _3156 = _3155 * _3155;
                        float _3157 = _3137 + _3102;
                        float _3158 = _3138 + _3103;
                        float _3159 = _3139 + _3104;
                        float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                        float _3167 = dot(vec3(_865, _868, _871), vec3(_3137, _3138, _3139));
                        float _4416 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                        float _3170 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3171 = dot(vec3(_865, _868, _871), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                        float _4427 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                        float _3179 = _3115 * _3155;
                        float _3180 = _3179 * _3179;
                        float _3183 = ((1.0 - _3180) * _3105) + _3180;
                        float _4438 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3184 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3185 = 1.0 - _3155;
                        float _3195 = (0.5 / (((_3184 * ((_3170 * _3185) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3184 * _3185) + _3155) * _3170))) * _3184;
                        float _4449 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3206 = (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3178 * _3178) * ((_3122 * 2.1991131305694580078125) + 3.141590118408203125))) * _3111;
                        _2964 = (_3126 * _3074.x) + _3032;
                        _2965 = (_3126 * _3074.y) + _3033;
                        _2966 = (_3126 * _3074.z) + _3034;
                        _2961 = (_3206 * _3091.x) + _3029;
                        _2962 = (_3206 * _3091.y) + _3030;
                        _2963 = (_3206 * _3091.z) + _3031;
                        if (_3036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3029 = _2961;
                            _3030 = _2962;
                            _3031 = _2963;
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _3036;
                        }
                    }
                    frontier_phi_98_pred = _2961;
                    frontier_phi_98_pred_1 = _2962;
                    frontier_phi_98_pred_2 = _2966;
                    frontier_phi_98_pred_3 = _2965;
                    frontier_phi_98_pred_4 = _2964;
                    frontier_phi_98_pred_5 = _2963;
                }
                _2715 = frontier_phi_98_pred;
                _2717 = frontier_phi_98_pred_1;
                _2725 = frontier_phi_98_pred_2;
                _2723 = frontier_phi_98_pred_3;
                _2721 = frontier_phi_98_pred_4;
                _2719 = frontier_phi_98_pred_5;
                uint _2891 = _2890 + 1u;
                if (_2891 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2884 = _2715;
                    _2885 = _2717;
                    _2886 = _2719;
                    _2887 = _2721;
                    _2888 = _2723;
                    _2889 = _2725;
                    _2890 = _2891;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
        }
        uvec4 _2728 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2729 = _2728.z;
        uint _2731 = (_2729 >> 8u) & 15u;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((4294967295u << _2731) & _2606) == 0u)
        {
            _2852 = _2714;
            _2854 = _2716;
            _2856 = _2718;
            _2858 = _2720;
            _2860 = _2722;
            _2862 = _2724;
        }
        else
        {
            float _2877 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
            float _2878 = _2877 * _1999;
            float _2879 = _2877 * _2000;
            float _2880 = _2877 * _2001;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2731 < ((_2729 >> 12u) & 15u))
            {
                float _2853;
                float _2855;
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _3012 = _2714;
                float _3013 = _2716;
                float _3014 = _2718;
                float _3015 = _2720;
                float _3016 = _2722;
                float _3017 = _2724;
                uint _3018 = _2731;
                uint _3027;
                bool _3028;
                for (;;)
                {
                    _3027 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_3018 << 2u)) >> 2u)).x;
                    _3028 = _3027 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_3028)
                    {
                        frontier_phi_104_pred = _3017;
                        frontier_phi_104_pred_1 = _3016;
                        frontier_phi_104_pred_2 = _3015;
                        frontier_phi_104_pred_3 = _3014;
                        frontier_phi_104_pred_4 = _3013;
                        frontier_phi_104_pred_5 = _3012;
                    }
                    else
                    {
                        float _3211;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3224 = _3012;
                        float _3225 = _3013;
                        float _3226 = _3014;
                        float _3227 = _3015;
                        float _3228 = _3016;
                        float _3229 = _3017;
                        uint _3230 = _3027;
                        uint _3231;
                        vec4 _3256;
                        float _3257;
                        vec4 _3272;
                        vec3 _3284;
                        vec4 _3299;
                        vec4 _3314;
                        float _3360;
                        bool _3361;
                        for (;;)
                        {
                            uint _3241 = ((_3018 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3230));
                            _3231 = (_3230 + 4294967295u) & _3230;
                            uint _3243 = _3241 * 40u;
                            _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3257 = _3256.w;
                            uint _3259 = (_3241 * 40u) + 4u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3241 * 40u) + 8u;
                            _3284 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x));
                            uint _3286 = (_3241 * 40u) + 16u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            uint _3301 = (_3241 * 40u) + 20u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3316 = (_3241 * 40u) + 24u;
                            vec4 _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3335 = (_3241 * 40u) + 28u;
                            vec4 _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            _3360 = fma(_2001, _3348.z, fma(_2000, _3348.y, _3348.x * _1999)) + _3348.w;
                            _3361 = !((fma(_2001, _3329.z, fma(_2000, _3329.y, _3329.x * _1999)) + _3329.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3361)
                            {
                                float _3388 = _3256.x - _1999;
                                float _3389 = _3256.y - _2000;
                                float _3390 = _3256.z - _2001;
                                float _3391 = dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390));
                                float _3394 = inversesqrt(_3391);
                                float _3395 = _3394 * _3388;
                                float _3396 = _3394 * _3389;
                                float _3397 = _3394 * _3390;
                                float _3401 = 1.0 - (_3391 / (_3257 * _3257));
                                float _4460 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3406 = sqrt(_3391) * _3272.w;
                                float _3408 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                                float _3409 = _3408 * _3408;
                                float _3412 = ((1.0 - _3409) * dot(vec3(_3395, _3396, _3397), vec3(_865, _868, _871))) + _3409;
                                float _3415 = _3406 * _3406;
                                float _3419 = (fma(_2001, _3299.z, fma(_2000, _3299.y, _3299.x * _1999)) + _3299.w) / _3360;
                                float _3420 = (fma(_2001, _3314.z, fma(_2000, _3314.y, _3314.x * _1999)) + _3314.w) / _3360;
                                float _3424 = 1.0 - dot(vec2(_3419, _3420), vec2(_3419, _3420));
                                float _4476 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3425 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3426 = _3425 * (((isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0))) * _3402) / ((_3415 * 0.699999988079071044921875) + 1.0));
                                float _3438 = exp2(log2(1.0 / ((_3415 * 3.5) + 5.0)) * 0.25);
                                float _3439 = 1.0 - _941;
                                float _3446 = sqrt(1.0 - ((1.0 - (_3439 * _3439)) * (1.0 - (_3438 * _3438))));
                                float _3447 = _3446 * _3446;
                                float _3448 = _3447 * _3447;
                                float _3449 = _3395 - _2878;
                                float _3450 = _3396 - _2879;
                                float _3451 = _3397 - _2880;
                                float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                                float _3459 = dot(vec3(_865, _868, _871), vec3((-0.0) - _2878, (-0.0) - _2879, (-0.0) - _2880));
                                float _4487 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3463 = dot(vec3(_865, _868, _871), vec3(_3455 * _3449, _3455 * _3450, _3455 * _3451));
                                float _4498 = isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0));
                                float _3466 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3470 = ((_3466 * _3466) * (_3448 + (-1.0))) + 1.0;
                                float _3471 = _3408 * _3447;
                                float _3472 = _3471 * _3471;
                                float _3478 = ((1.0 - _3472) * dot(vec3(_865, _868, _871), vec3(_3395, _3396, _3397))) + _3472;
                                float _4509 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3480 = 1.0 - _3447;
                                float _3490 = (0.5 / (((_3479 * ((_3462 * _3480) + _3447)) + 9.9999999392252902907785028219223e-09) + (((_3479 * _3480) + _3447) * _3462))) * _3479;
                                float _4520 = isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0));
                                float _3500 = (_3425 * _3402) * (((_3448 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3470 * _3470) * ((_3415 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3500 * _3284.z;
                                frontier_phi_110_pred_1 = _3426 * _3272.z;
                                frontier_phi_110_pred_2 = _3426 * _3272.y;
                                frontier_phi_110_pred_3 = _3426 * _3272.x;
                                frontier_phi_110_pred_4 = _3500 * _3284.y;
                                frontier_phi_110_pred_5 = _3500 * _3284.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3506 = frontier_phi_110_pred;
                            _3509 = frontier_phi_110_pred_1;
                            _3508 = frontier_phi_110_pred_2;
                            _3507 = frontier_phi_110_pred_3;
                            _3505 = frontier_phi_110_pred_4;
                            _3504 = frontier_phi_110_pred_5;
                            _3214 = _3507 + _3227;
                            _3215 = _3508 + _3228;
                            _3216 = _3509 + _3229;
                            _3211 = _3504 + _3224;
                            _3212 = _3505 + _3225;
                            _3213 = _3506 + _3226;
                            if (_3231 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3224 = _3211;
                                _3225 = _3212;
                                _3226 = _3213;
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3231;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3216;
                        frontier_phi_104_pred_1 = _3215;
                        frontier_phi_104_pred_2 = _3214;
                        frontier_phi_104_pred_3 = _3213;
                        frontier_phi_104_pred_4 = _3212;
                        frontier_phi_104_pred_5 = _3211;
                    }
                    _2863 = frontier_phi_104_pred;
                    _2861 = frontier_phi_104_pred_1;
                    _2859 = frontier_phi_104_pred_2;
                    _2857 = frontier_phi_104_pred_3;
                    _2855 = frontier_phi_104_pred_4;
                    _2853 = frontier_phi_104_pred_5;
                    uint _3019 = _3018 + 1u;
                    if (_3019 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3012 = _2853;
                        _3013 = _2855;
                        _3014 = _2857;
                        _3015 = _2859;
                        _3016 = _2861;
                        _3017 = _2863;
                        _3018 = _3019;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2863;
                frontier_phi_91_92_ladder_1 = _2861;
                frontier_phi_91_92_ladder_2 = _2859;
                frontier_phi_91_92_ladder_3 = _2857;
                frontier_phi_91_92_ladder_4 = _2855;
                frontier_phi_91_92_ladder_5 = _2853;
            }
            else
            {
                frontier_phi_91_92_ladder = _2724;
                frontier_phi_91_92_ladder_1 = _2722;
                frontier_phi_91_92_ladder_2 = _2720;
                frontier_phi_91_92_ladder_3 = _2718;
                frontier_phi_91_92_ladder_4 = _2716;
                frontier_phi_91_92_ladder_5 = _2714;
            }
            _2852 = frontier_phi_91_92_ladder_5;
            _2854 = frontier_phi_91_92_ladder_4;
            _2856 = frontier_phi_91_92_ladder_3;
            _2858 = frontier_phi_91_92_ladder_2;
            _2860 = frontier_phi_91_92_ladder_1;
            _2862 = frontier_phi_91_92_ladder;
        }
        float _2867 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
        _2619 = (_2867 * _2858) + _2287;
        _2621 = (_2867 * _2860) + _2288;
        _2623 = (_2867 * _2862) + _2289;
        _2625 = ((_2852 * _910) * _2867) + _2454;
        _2627 = ((_2854 * _912) * _2867) + _2455;
        _2629 = ((_2856 * _913) * _2867) + _2456;
    }
    else
    {
        _2619 = _2287;
        _2621 = _2288;
        _2623 = _2289;
        _2625 = _2454;
        _2627 = _2455;
        _2629 = _2456;
    }
    float _4536 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4547 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4558 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2646 = ((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2619 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _925))) + ((_2625 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2647 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2621 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _925))) + ((_2627 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    float _2648 = ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2623 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _925))) + ((_2629 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1734)) * cbPerFrame._m0[3u].x);
    uint _2652 = _884 + 6u;
    float _2660 = _845 / cbSceneParam._m0[86u].x;
    float _2661 = _846 / cbSceneParam._m0[86u].y;
    vec4 _2675 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, (log2((isnan(cbSceneParam._m0[77u].w) ? _832 : (isnan(_832) ? cbSceneParam._m0[77u].w : min(_832, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2677 = _2675.x;
    float _2678 = _2675.y;
    float _2679 = _2675.z;
    float _2680 = _2675.w;
    float _2776;
    float _2778;
    float _2780;
    float _2782;
    if (_832 > cbSceneParam._m0[78u].w)
    {
        float _2739 = isnan(_832) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _832 : min(cbSceneParam._m0[80u].w, _832));
        float _2740 = _2739 / _832;
        float _2751 = _2740 * _267;
        float _2752 = _268 * _2740;
        float _2753 = (-0.0) - _2752;
        float _2754 = _2740 * _269;
        float _2756 = (cbSceneParam._m0[77u].w * _2753) / _2739;
        float _2757 = _2756 + cbSceneParam._m0[79u].w;
        float _2758 = cbSceneParam._m0[79u].w - _2752;
        float _2764 = sqrt(((_2751 * _2751) + (_2752 * _2752)) + (_2754 * _2754));
        float _2767 = (1.0 - (cbSceneParam._m0[77u].w / _2739)) * _2764;
        float _2772 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2774 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2974;
        if (abs((_2753 - _2756) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2974 = ((((_2757 > 0.0) ? exp2(_2772 * _2757) : (2.0 - exp2(_2774 * _2757))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2767;
        }
        else
        {
            float _2913 = 1.0 / cbSceneParam._m0[80u].x;
            float _2914 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : max(_2757, _2758));
            float _2915 = isnan(_2758) ? _2757 : (isnan(_2757) ? _2758 : min(_2757, _2758));
            float _2924 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : min(_2914, 0.0));
            float _2925 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : min(_2915, 0.0));
            _2974 = ((abs(_2764 / _2753) * cbSceneParam._m0[80u].y) * ((((_2924 - _2925) * 2.0) - ((exp2(_2772 * (isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0)))) - exp2(_2772 * (isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0))))) * _2913)) - ((exp2(_2774 * _2924) - exp2(_2774 * _2925)) * _2913))) + (_2767 * cbSceneParam._m0[80u].z);
        }
        vec4 _2976 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2660, _2661, 1.0), 0.0);
        float _2985 = exp2((_2974 * (-1.44269502162933349609375)) * (1.0 - _2976.w));
        float _2986 = log2(_2985);
        float _3002 = log2(_2680);
        _2776 = (exp2(_3002 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].x)) * _2976.x) / cbSceneParam._m0[78u].x)) + _2677;
        _2778 = (exp2(_3002 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].y)) * _2976.y) / cbSceneParam._m0[78u].y)) + _2678;
        _2780 = (exp2(_3002 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].z)) * _2976.z) / cbSceneParam._m0[78u].z)) + _2679;
        _2782 = _2985 * _2680;
    }
    else
    {
        _2776 = _2677;
        _2778 = _2678;
        _2780 = _2679;
        _2782 = _2680;
    }
    float _2794 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2795 = _2794 == 3.0;
    float _2796 = log2(_2782);
    float _2803 = exp2(_2796 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0)));
    float _2804 = exp2(_2796 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0)));
    float _2805 = exp2(_2796 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)));
    float _2814 = (_2794 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2814 * (_2795 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2776)));
    SV_Target.y = _2814 * (_2795 ? _2804 : (_2804 + (cbSceneParam._m0[72u].w * _2778)));
    SV_Target.z = _2814 * (_2795 ? _2805 : (_2805 + (cbSceneParam._m0[72u].w * _2780)));
    SV_Target.w = cbInstanceData._m0[_2652].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2652].w;
}


