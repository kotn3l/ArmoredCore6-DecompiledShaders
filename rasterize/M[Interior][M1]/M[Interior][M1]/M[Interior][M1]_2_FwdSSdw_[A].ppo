#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _763;
uint _1960;
uint _1961;
uint _1962;
uint _2205;
uint _2206;
uint _2207;
float _2454;
float _2455;
float _2456;
float _2457;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _285 = cbMtdParam._m0[22u].y + _257;
    float _286 = cbMtdParam._m0[22u].z + _258;
    float _287 = cbMtdParam._m0[22u].w + _259;
    float _301 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_285, _286, _287), vec3(_199 * TANGENT.x, _199 * TANGENT.y, _199 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_285, _286, _287), vec3((-0.0) - (_192 * NORMAL.x), (-0.0) - (_192 * NORMAL.y), (-0.0) - (_192 * NORMAL.z)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    bool _330 = _308 > 0.0;
    float _332 = _330 ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = _313 + (-0.5);
    float _342 = _314 + (-0.5);
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_339 + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_342 + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _406 = (cbMtdParam._m0[21u].x * _301) * _307;
    float _408 = (cbMtdParam._m0[20u].w * _302) * _307;
    bool _409 = _406 > 0.0;
    float _414;
    if (_409)
    {
        _414 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _414 = frontier_phi_11_10_ladder;
    }
    bool _416 = _408 > 0.0;
    float _421;
    if (_416)
    {
        _421 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _421 = frontier_phi_15_14_ladder;
    }
    float _424 = _330 ? (cbMtdParam._m0[16u].z / _308) : 5000.0;
    float _425 = isnan(_421) ? _414 : (isnan(_414) ? _421 : min(_414, _421));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _434 = ((_426 * _308) + _430) / _430;
    float _439 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _441 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _457 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_426 * _406)) / _434) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_426 * _408)) / _434) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _469;
    if (_409)
    {
        _469 = (1.0 - _313) / _406;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _313) / _406;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _469 = frontier_phi_19_18_ladder;
    }
    float _475;
    if (_416)
    {
        _475 = (1.0 - _314) / _408;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _314) / _408;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _475 = frontier_phi_23_22_ladder;
    }
    float _477 = isnan(_475) ? _469 : (isnan(_469) ? _475 : min(_469, _475));
    float _478 = isnan(_424) ? _477 : (isnan(_477) ? _424 : min(_477, _424));
    float _485 = ((_478 * _308) + _430) / _430;
    vec4 _499 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_339 + (_478 * _406)) / _485) + 0.5) + _439) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_342 + (_478 * _408)) / _485) + 0.5) + _441) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _501 = _499.w;
    float _526 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _531 = _257 * _530;
    float _532 = _258 * _530;
    float _533 = _259 * _530;
    vec4 _538 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _540 = _538.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _610 = sqrt(((_257 * _257) + (_258 * _258)) + (_259 * _259));
        float _617 = (cbMatDynParam._m0[5u].x * _610) + cbMatDynParam._m0[5u].y;
        float _2496 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        float _618 = isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0));
        float _622 = (cbMatDynParam._m0[5u].z * _610) + cbMatDynParam._m0[5u].w;
        float _2507 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2507 : (isnan(_2507) ? 1.0 : min(_2507, 1.0))) - _618)) + _618) < ((_540 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_553 * cbSceneParam._m0[86u].x, _554 * cbSceneParam._m0[86u].y));
    float _566 = _563.x * TEXCOORD.z;
    float _567 = (-0.0) - _531;
    float _568 = (-0.0) - _532;
    float _569 = (-0.0) - _533;
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _762;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _684 = (cbModelParam._m0[37u].x * ((((fma(_599, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _686 = (cbModelParam._m0[37u].y * ((((fma(_599, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _687 = (((((fma(_599, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_684, _686, _687), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_684, _686, _687), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_684, _686, _687), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_684, _686, _687), 0.0);
        float _724 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _755 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_711.x + (-0.5));
        float _757 = _755 * (_711.y + (-0.5));
        float _758 = _755 * (_711.z + (-0.5));
        _762 = _724 * (_690.z + (-0.5));
        _764 = _724 * (_690.y + (-0.5));
        _765 = _724 * (_690.x + (-0.5));
        _766 = _735 * (_697.z + (-0.5));
        _767 = _735 * (_697.y + (-0.5));
        _768 = _735 * (_697.x + (-0.5));
        _769 = _745 * (_704.z + (-0.5));
        _770 = _745 * (_704.y + (-0.5));
        _771 = _745 * (_704.x + (-0.5));
        _772 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        _773 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        _774 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _762 = _763;
        _764 = _763;
        _765 = _763;
        _766 = _763;
        _767 = _763;
        _768 = _763;
        _769 = _763;
        _770 = _763;
        _771 = _763;
        _772 = _763;
        _773 = _763;
        _774 = _763;
    }
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _831 = (cbModelParam._m0[38u].x * ((((fma(_599, cbModelParam._m0[30u].z, fma(_595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _591)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _832 = (cbModelParam._m0[38u].y * ((((fma(_599, cbModelParam._m0[31u].z, fma(_595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _591)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _833 = (((((fma(_599, cbModelParam._m0[32u].z, fma(_595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _591)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_831, _832, _833), 0.0);
        float _868 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _878 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _888 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _898 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_856.x + (-0.5));
        float _900 = _898 * (_856.y + (-0.5));
        float _901 = _898 * (_856.z + (-0.5));
        _905 = _868 * (_835.z + (-0.5));
        _906 = _868 * (_835.y + (-0.5));
        _907 = _868 * (_835.x + (-0.5));
        _908 = _878 * (_842.z + (-0.5));
        _909 = _878 * (_842.y + (-0.5));
        _910 = _878 * (_842.x + (-0.5));
        _911 = _888 * (_849.z + (-0.5));
        _912 = _888 * (_849.y + (-0.5));
        _913 = _888 * (_849.x + (-0.5));
        _914 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        _915 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        _916 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    }
    else
    {
        _905 = _763;
        _906 = _763;
        _907 = _763;
        _908 = _763;
        _909 = _763;
        _910 = _763;
        _911 = _763;
        _912 = _763;
        _913 = _763;
        _914 = _763;
        _915 = _763;
        _916 = _763;
    }
    float _931 = _531 * (-0.5);
    float _932 = _532 * (-0.5);
    float _933 = _533 * (-0.5);
    float _934 = dot(vec4(_931, _932, _933, 1.0), vec4(_907, _910, _913, _916));
    float _937 = dot(vec4(_931, _932, _933, 1.0), vec4(_906, _909, _912, _915));
    float _940 = dot(vec4(_931, _932, _933, 1.0), vec4(_905, _908, _911, _914));
    float _975;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _947 = dot(vec4(_931, _932, _933, 1.0), vec4(_762, _766, _769, _772));
        float _951 = dot(vec4(_931, _932, _933, 1.0), vec4(_764, _767, _770, _773));
        float _955 = dot(vec4(_931, _932, _933, 1.0), vec4(_765, _768, _771, _774));
        float _962 = dot(vec4(cbModelParam._m0[39u]), vec4(_931, _932, _933, 1.0));
        _975 = dot(vec3(isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0)), isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)), isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_962) ? 0.0 : (isnan(0.0) ? _962 : max(0.0, _962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _975 = 1.0;
    }
    float _986;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _977 = dot(vec4(cbModelParam._m0[40u]), vec4(_931, _932, _933, 1.0));
        _986 = dot(vec3(isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)), isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)), isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_977) ? 0.0 : (isnan(0.0) ? _977 : max(0.0, _977))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _986 = 1.0;
    }
    float _990 = (_986 * cbModelParam._m0[1u].x) + (_975 * (1.0 - cbModelParam._m0[1u].x));
    float _996 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1079;
    float _1081;
    float _1083;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1046 = fma(_599, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591)) + cbModelParam._m0[13u].w;
        float _1050 = fma(_599, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591)) + cbModelParam._m0[14u].w;
        float _1054 = fma(_599, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591)) + cbModelParam._m0[15u].w;
        float _1057 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1060 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1063 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1089;
        if (_1057 > 0.0)
        {
            _1089 = abs((1.0 - _1046) / _1057);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1057 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1046 + 1.0) / _1057);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1089 = frontier_phi_41_39_ladder;
        }
        float _1388;
        if (_1060 > 0.0)
        {
            _1388 = abs((1.0 - _1050) / _1060);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1060 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1050 + 1.0) / _1060);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1388 = frontier_phi_50_46_ladder;
        }
        float _1692;
        if (_1063 > 0.0)
        {
            _1692 = abs((1.0 - _1054) / _1063);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1063 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1054 + 1.0) / _1063);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1692 = frontier_phi_64_57_ladder;
        }
        float _1694 = isnan(_1388) ? _1089 : (isnan(_1089) ? _1388 : min(_1089, _1388));
        float _1695 = isnan(_1692) ? _1694 : (isnan(_1694) ? _1692 : min(_1694, _1692));
        float _1699 = (_1695 * _1057) + _1046;
        float _1700 = (_1695 * _1060) + _1050;
        float _1701 = (_1695 * _1063) + _1054;
        float _1702 = _1695 * 9.9999997473787516355514526367188e-05;
        float _1703 = (-1.0) - _1702;
        float _1705 = _1702 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1701 > _1705) || ((_1701 < _1703) || ((_1700 > _1705) || ((_1700 < _1703) || ((_1699 < _1703) || (_1699 > _1705))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1701, cbModelParam._m0[9u].z, fma(_1700, cbModelParam._m0[9u].y, _1699 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1701, cbModelParam._m0[10u].z, fma(_1700, cbModelParam._m0[10u].y, _1699 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1701, cbModelParam._m0[11u].z, fma(_1700, cbModelParam._m0[11u].y, _1699 * cbModelParam._m0[11u].x))), _996);
            frontier_phi_40_64_ladder = _1828.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1828.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1828.x * cbModelParam._m0[1u].y;
        }
        _1079 = frontier_phi_40_64_ladder_2;
        _1081 = frontier_phi_40_64_ladder_1;
        _1083 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1067 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _996);
        _1079 = _1067.x * cbModelParam._m0[1u].y;
        _1081 = _1067.y * cbModelParam._m0[1u].y;
        _1083 = _1067.z * cbModelParam._m0[1u].y;
    }
    float _1086 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1174;
    float _1176;
    float _1178;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1138 = fma(_599, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591)) + cbModelParam._m0[21u].w;
        float _1142 = fma(_599, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591)) + cbModelParam._m0[22u].w;
        float _1146 = fma(_599, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591)) + cbModelParam._m0[23u].w;
        float _1149 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1152 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1155 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1393;
        if (_1149 > 0.0)
        {
            _1393 = abs((1.0 - _1138) / _1149);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1149 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1138 + 1.0) / _1149);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1393 = frontier_phi_52_48_ladder;
        }
        float _1718;
        if (_1152 > 0.0)
        {
            _1718 = abs((1.0 - _1142) / _1152);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1152 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1142 + 1.0) / _1152);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1718 = frontier_phi_66_59_ladder;
        }
        float _1890;
        if (_1155 > 0.0)
        {
            _1890 = abs((1.0 - _1146) / _1155);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1155 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1146 + 1.0) / _1155);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1890 = frontier_phi_84_77_ladder;
        }
        float _1892 = isnan(_1718) ? _1393 : (isnan(_1393) ? _1718 : min(_1393, _1718));
        float _1893 = isnan(_1890) ? _1892 : (isnan(_1892) ? _1890 : min(_1892, _1890));
        float _1897 = (_1893 * _1149) + _1138;
        float _1898 = (_1893 * _1152) + _1142;
        float _1899 = (_1893 * _1155) + _1146;
        float _1900 = _1893 * 9.9999997473787516355514526367188e-05;
        float _1901 = (-1.0) - _1900;
        float _1903 = _1900 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1899 > _1903) || ((_1899 < _1901) || ((_1898 > _1903) || ((_1898 < _1901) || ((_1897 < _1901) || (_1897 > _1903))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1899, cbModelParam._m0[17u].z, fma(_1898, cbModelParam._m0[17u].y, _1897 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1899, cbModelParam._m0[18u].z, fma(_1898, cbModelParam._m0[18u].y, _1897 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1899, cbModelParam._m0[19u].z, fma(_1898, cbModelParam._m0[19u].y, _1897 * cbModelParam._m0[19u].x))), _1086);
            frontier_phi_49_84_ladder = _2068.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2068.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2068.z * cbModelParam._m0[1u].z;
        }
        _1174 = frontier_phi_49_84_ladder;
        _1176 = frontier_phi_49_84_ladder_1;
        _1178 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1086);
        _1174 = _1158.x * cbModelParam._m0[1u].z;
        _1176 = _1158.y * cbModelParam._m0[1u].z;
        _1178 = _1158.z * cbModelParam._m0[1u].z;
    }
    float _1190 = _566 * 0.01200000010430812835693359375;
    float _1192 = _1190 * ((cbModelParam._m0[1u].w * (_1174 - _1079)) + _1079);
    float _1193 = _1190 * ((cbModelParam._m0[1u].w * (_1176 - _1081)) + _1081);
    float _1194 = _1190 * ((cbModelParam._m0[1u].w * (_1178 - _1083)) + _1083);
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, _1192 * cbSceneParam._m0[91u].x));
    vec4 _1229 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_553, _554));
    float _1231 = _1229.w;
    uint _1247 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1251 = floatBitsToUint(cbInstanceData._m0[_1247 + 5u]);
    uint _1253 = _1251.x * 14u;
    uint _1254 = _1253 + 13u;
    float _1259 = _566 + (-1.0);
    float _1263 = (cbLight._m0[_1254].x * _1259) + 1.0;
    float _1264 = (cbLight._m0[_1254].y * _1259) + 1.0;
    uint _1265 = _1253 + 8u;
    float _1276 = cbLight._m0[_1253].x + _531;
    float _1277 = cbLight._m0[_1253].y + _532;
    float _1278 = cbLight._m0[_1253].z + _533;
    float _1282 = inversesqrt(dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278)));
    float _1286 = dot(vec3(0.0), vec3(cbLight._m0[_1253].xyz));
    float _2633 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
    float _1289 = isnan(1.0) ? _2633 : (isnan(_2633) ? 1.0 : min(_2633, 1.0));
    float _1290 = dot(vec3(0.0), vec3(_531, _532, _533));
    float _2644 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1293 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
    float _1294 = dot(vec3(cbLight._m0[_1253].xyz), vec3(_1276 * _1282, _1277 * _1282, _1278 * _1282));
    float _2655 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _1305 = (exp2(log2(1.0 - (isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1311 = (0.5 / ((_1289 + 9.9999999392252902907785028219223e-09) + _1293)) * _1289;
    float _2666 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
    float _1313 = (isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0))) * 0.31831014156341552734375;
    float _1315 = isnan(1.0) ? _1263 : (isnan(_1263) ? 1.0 : min(_1263, 1.0));
    uint _1328 = _1253 + 9u;
    uint _1334 = _1253 | 1u;
    float _1340 = cbLight._m0[_1334].x + _531;
    float _1341 = cbLight._m0[_1334].y + _532;
    float _1342 = cbLight._m0[_1334].z + _533;
    float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
    float _1350 = dot(vec3(0.0), vec3(cbLight._m0[_1334].xyz));
    float _2682 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
    float _1353 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
    float _1354 = dot(vec3(cbLight._m0[_1334].xyz), vec3(_1340 * _1346, _1341 * _1346, _1342 * _1346));
    float _2693 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1363 = (exp2(log2(1.0 - (isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1367 = (0.5 / ((_1353 + 9.9999999392252902907785028219223e-09) + _1293)) * _1353;
    float _2704 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _1369 = (isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0))) * 0.31831014156341552734375;
    float _1370 = isnan(1.0) ? _1264 : (isnan(_1264) ? 1.0 : min(_1264, 1.0));
    float _1380 = (((_1363 * cbLight._m0[_1328].x) * _1369) * _1370) + ((((cbLight._m0[_1265].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1231))) * _1305) * _1313) * _1315);
    float _1381 = (((_1363 * cbLight._m0[_1328].y) * _1369) * _1370) + ((((cbLight._m0[_1265].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1231))) * _1305) * _1313) * _1315);
    float _1382 = (((_1363 * cbLight._m0[_1328].z) * _1369) * _1370) + ((((cbLight._m0[_1265].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1231))) * _1305) * _1313) * _1315);
    float _1498;
    float _1500;
    float _1502;
    if (_1251.y == 0u)
    {
        float _1438 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1439 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1438;
        float _1440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1438;
        float _1441 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1438;
        uvec4 _1453 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1454 = _1453.x;
        uint _1465 = uint((float(_1453.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _1454))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _1454)));
        float _1475 = (log2(_1441 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1476 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        uint _1479 = uint(isnan(14.0) ? _1476 : (isnan(_1476) ? 14.0 : min(_1476, 14.0)));
        uvec4 _1484 = texelFetch(g_lightClusterGridBuffer, int(((_1479 << 2u) + (_1465 << 6u)) >> 2u));
        uint _1485 = _1484.x;
        uint _1486 = _1453.z;
        float _1575;
        float _1577;
        float _1579;
        if (((((1u << ((_1486 >> 4u) & 15u)) + 4294967295u) & _1485) == 0u) || ((_1486 & 240u) == 0u))
        {
            _1575 = 0.0;
            _1577 = 0.0;
            _1579 = 0.0;
        }
        else
        {
            float _1576;
            float _1578;
            float _1580;
            float _1743 = 0.0;
            float _1744 = 0.0;
            float _1745 = 0.0;
            uint _1746 = 0u;
            uint _1755;
            bool _1756;
            for (;;)
            {
                _1755 = texelFetch(g_lightClassification, int((((_1479 << 5u) + (_1465 << 9u)) + (_1746 << 2u)) >> 2u)).x;
                _1756 = _1755 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1756)
                {
                    frontier_phi_79_pred = _1745;
                    frontier_phi_79_pred_1 = _1744;
                    frontier_phi_79_pred_2 = _1743;
                }
                else
                {
                    float _1930;
                    float _1931;
                    float _1932;
                    uint _1933;
                    _1930 = _1743;
                    _1931 = _1744;
                    _1932 = _1745;
                    _1933 = _1755;
                    float _1837;
                    float _1838;
                    float _1839;
                    for (;;)
                    {
                        uint _1937 = uint(findLSB(_1933)) + (_1746 << 5u);
                        uint _1934 = (_1933 + 4294967295u) & _1933;
                        uint _1939 = _1937 * 48u;
                        vec4 _1953 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1939)).x, texelFetch(g_PointLightRenderingBuffer, int(_1939 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1939 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1939 + 3u)).x));
                        uint _1970 = (_1937 * 48u) + 8u;
                        vec3 _1981 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1970)).x, texelFetch(g_PointLightRenderingBuffer, int(_1970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1970 + 2u)).x));
                        float _1985 = _1953.x - _1439;
                        float _1986 = _1953.y - _1440;
                        float _1987 = _1953.z - _1441;
                        float _1988 = dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987));
                        float _1991 = inversesqrt(_1988);
                        float _2000 = 1.0 - (_1988 * _1953.w);
                        float _2730 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
                        float _2002 = sqrt(_1988) * uintBitsToFloat(uvec4(_1960, _1961, _1962, texelFetch(g_PointLightRenderingBuffer, int(((_1937 * 48u) + 4u) + 3u)).x)).w;
                        float _2005 = 1.39999997615814208984375 / (_2002 + 1.39999997615814208984375);
                        float _2006 = _2005 * _2005;
                        float _2009 = ((1.0 - _2006) * dot(vec3(0.0), vec3(_1991 * _1985, _1991 * _1986, _1991 * _1987))) + _2006;
                        float _2011 = (-0.0) - _1439;
                        float _2012 = (-0.0) - _1440;
                        float _2013 = (-0.0) - _1441;
                        float _2017 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
                        float _2021 = dot(vec3(0.0), vec3(_2017 * _2011, _2017 * _2012, _2017 * _2013));
                        float _2741 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
                        float _2752 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
                        float _2025 = isnan(1.0) ? _2752 : (isnan(_2752) ? 1.0 : min(_2752, 1.0));
                        float _2029 = (0.5 / (((isnan(1.0) ? _2741 : (isnan(_2741) ? 1.0 : min(_2741, 1.0))) + 9.9999999392252902907785028219223e-09) + _2025)) * _2025;
                        float _2763 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
                        float _2038 = (((isnan(1.0) ? _2763 : (isnan(_2763) ? 1.0 : min(_2763, 1.0))) * 3.1415927410125732421875) / (((_2002 * _2002) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2730 : (isnan(_2730) ? 1.0 : min(_2730, 1.0)));
                        _1837 = (_2038 * _1981.x) + _1930;
                        _1838 = (_2038 * _1981.y) + _1931;
                        _1839 = (_2038 * _1981.z) + _1932;
                        if (_1934 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1930 = _1837;
                            _1931 = _1838;
                            _1932 = _1839;
                            _1933 = _1934;
                        }
                    }
                    frontier_phi_79_pred = _1839;
                    frontier_phi_79_pred_1 = _1838;
                    frontier_phi_79_pred_2 = _1837;
                }
                _1580 = frontier_phi_79_pred;
                _1578 = frontier_phi_79_pred_1;
                _1576 = frontier_phi_79_pred_2;
                uint _1747 = _1746 + 1u;
                if (_1747 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1743 = _1576;
                    _1744 = _1578;
                    _1745 = _1580;
                    _1746 = _1747;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1575 = _1576;
            _1577 = _1578;
            _1579 = _1580;
        }
        uvec4 _1583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1584 = _1583.z;
        uint _1586 = (_1584 >> 8u) & 15u;
        float _1723;
        float _1725;
        float _1727;
        if (((4294967295u << _1586) & _1485) == 0u)
        {
            _1723 = _1575;
            _1725 = _1577;
            _1727 = _1579;
        }
        else
        {
            float _1739 = inversesqrt(dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1586 < ((_1584 >> 12u) & 15u))
            {
                float _1724;
                float _1726;
                float _1728;
                float _1916 = _1575;
                float _1917 = _1577;
                float _1918 = _1579;
                uint _1919 = _1586;
                uint _1928;
                bool _1929;
                for (;;)
                {
                    _1928 = texelFetch(g_lightClassification, int((((_1479 << 5u) + (_1465 << 9u)) + (_1919 << 2u)) >> 2u)).x;
                    _1929 = _1928 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1929)
                    {
                        frontier_phi_93_pred = _1918;
                        frontier_phi_93_pred_1 = _1917;
                        frontier_phi_93_pred_2 = _1916;
                    }
                    else
                    {
                        float _2073;
                        float _2074;
                        float _2075;
                        float _2294;
                        float _2295;
                        float _2296;
                        float _2083 = _1916;
                        float _2084 = _1917;
                        float _2085 = _1918;
                        uint _2086 = _1928;
                        uint _2087;
                        uint _2097;
                        vec4 _2112;
                        float _2113;
                        vec3 _2125;
                        vec4 _2140;
                        vec4 _2155;
                        float _2201;
                        bool _2202;
                        for (;;)
                        {
                            _2097 = ((_1919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2086));
                            _2087 = (_2086 + 4294967295u) & _2086;
                            uint _2099 = _2097 * 40u;
                            _2112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2099 + 3u)).x));
                            _2113 = _2112.w;
                            uint _2115 = (_2097 * 40u) + 8u;
                            _2125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2115 + 2u)).x));
                            uint _2127 = (_2097 * 40u) + 16u;
                            _2140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2127 + 3u)).x));
                            uint _2142 = (_2097 * 40u) + 20u;
                            _2155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2142 + 3u)).x));
                            uint _2157 = (_2097 * 40u) + 24u;
                            vec4 _2170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2157 + 3u)).x));
                            uint _2176 = (_2097 * 40u) + 28u;
                            vec4 _2189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 3u)).x));
                            _2201 = fma(_1441, _2189.z, fma(_1440, _2189.y, _2189.x * _1439)) + _2189.w;
                            _2202 = !((fma(_1441, _2170.z, fma(_1440, _2170.y, _2170.x * _1439)) + _2170.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2202)
                            {
                                float _2236 = _2112.x - _1439;
                                float _2237 = _2112.y - _1440;
                                float _2238 = _2112.z - _1441;
                                float _2239 = dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238));
                                float _2242 = inversesqrt(_2239);
                                float _2249 = 1.0 - (_2239 / (_2113 * _2113));
                                float _2774 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
                                float _2251 = sqrt(_2239) * uintBitsToFloat(uvec4(_2205, _2206, _2207, texelFetch(g_SpotLightRenderingBuffer, int(((_2097 * 40u) + 4u) + 3u)).x)).w;
                                float _2253 = 1.39999997615814208984375 / (_2251 + 1.39999997615814208984375);
                                float _2254 = _2253 * _2253;
                                float _2257 = (fma(_1441, _2140.z, fma(_1440, _2140.y, _2140.x * _1439)) + _2140.w) / _2201;
                                float _2258 = (fma(_1441, _2155.z, fma(_1440, _2155.y, _2155.x * _1439)) + _2155.w) / _2201;
                                float _2262 = 1.0 - dot(vec2(_2257, _2258), vec2(_2257, _2258));
                                float _2785 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
                                float _2270 = dot(vec3(0.0), vec3((-0.0) - (_1439 * _1739), (-0.0) - (_1440 * _1739), (-0.0) - (_1441 * _1739)));
                                float _2796 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
                                float _2278 = ((1.0 - _2254) * dot(vec3(0.0), vec3(_2242 * _2236, _2242 * _2237, _2242 * _2238))) + _2254;
                                float _2807 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
                                float _2279 = isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0));
                                float _2283 = (0.5 / (((isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) + 9.9999999392252902907785028219223e-09) + _2279)) * _2279;
                                float _2818 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
                                float _2290 = ((isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0))) * (isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0)))) * (((isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0))) * 3.1415927410125732421875) / (((_2251 * _2251) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2290 * _2125.z;
                                frontier_phi_99_pred_1 = _2290 * _2125.y;
                                frontier_phi_99_pred_2 = _2290 * _2125.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2296 = frontier_phi_99_pred;
                            _2295 = frontier_phi_99_pred_1;
                            _2294 = frontier_phi_99_pred_2;
                            _2073 = _2294 + _2083;
                            _2074 = _2295 + _2084;
                            _2075 = _2296 + _2085;
                            if (_2087 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2083 = _2073;
                                _2084 = _2074;
                                _2085 = _2075;
                                _2086 = _2087;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2075;
                        frontier_phi_93_pred_1 = _2074;
                        frontier_phi_93_pred_2 = _2073;
                    }
                    _1728 = frontier_phi_93_pred;
                    _1726 = frontier_phi_93_pred_1;
                    _1724 = frontier_phi_93_pred_2;
                    uint _1920 = _1919 + 1u;
                    if (_1920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1916 = _1724;
                        _1917 = _1726;
                        _1918 = _1728;
                        _1919 = _1920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1728;
                frontier_phi_68_69_ladder_1 = _1726;
                frontier_phi_68_69_ladder_2 = _1724;
            }
            else
            {
                frontier_phi_68_69_ladder = _1579;
                frontier_phi_68_69_ladder_1 = _1577;
                frontier_phi_68_69_ladder_2 = _1575;
            }
            _1723 = frontier_phi_68_69_ladder_2;
            _1725 = frontier_phi_68_69_ladder_1;
            _1727 = frontier_phi_68_69_ladder;
        }
        float _1732 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _1498 = ((_1723 * 0.039999999105930328369140625) * _1732) + _1380;
        _1500 = ((_1725 * 0.039999999105930328369140625) * _1732) + _1381;
        _1502 = ((_1727 * 0.039999999105930328369140625) * _1732) + _1382;
    }
    else
    {
        _1498 = _1380;
        _1500 = _1381;
        _1502 = _1382;
    }
    uint _1508 = _1247 + 9u;
    uint _1509 = _1508 + uint(cbMatDynParam._m0[0u].w);
    float _1524 = (cbInstanceData._m0[_1509].x * ((_501 * ((_457.x * cbMtdParam._m0[10u].x) - _382)) + _382)) + ((_1498 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _990)) * cbPerFrame._m0[3u].x);
    float _1525 = (cbInstanceData._m0[_1509].y * ((_501 * ((_457.y * cbMtdParam._m0[10u].y) - _383)) + _383)) + ((_1500 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _990)) * cbPerFrame._m0[3u].x);
    float _1526 = (cbInstanceData._m0[_1509].z * ((_501 * ((_457.z * cbMtdParam._m0[10u].z) - _384)) + _384)) + ((_1502 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _990)) * cbPerFrame._m0[3u].x);
    float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
    float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
    float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
    uint _1530 = _1247 + 6u;
    float _1538 = _553 / cbSceneParam._m0[86u].x;
    float _1539 = _554 / cbSceneParam._m0[86u].y;
    vec4 _1553 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1538, _1539, (log2((isnan(cbSceneParam._m0[77u].w) ? _526 : (isnan(_526) ? cbSceneParam._m0[77u].w : min(_526, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1555 = _1553.x;
    float _1556 = _1553.y;
    float _1557 = _1553.z;
    float _1558 = _1553.w;
    float _1632;
    float _1634;
    float _1636;
    float _1638;
    if (_526 > cbSceneParam._m0[78u].w)
    {
        float _1594 = isnan(_526) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _526 : min(cbSceneParam._m0[80u].w, _526));
        float _1595 = _1594 / _526;
        float _1606 = _1595 * _257;
        float _1607 = _258 * _1595;
        float _1608 = (-0.0) - _1607;
        float _1609 = _1595 * _259;
        float _1611 = (cbSceneParam._m0[77u].w * _1608) / _1594;
        float _1612 = _1611 + cbSceneParam._m0[79u].w;
        float _1613 = cbSceneParam._m0[79u].w - _1607;
        float _1619 = sqrt(((_1606 * _1606) + (_1607 * _1607)) + (_1609 * _1609));
        float _1622 = (1.0 - (cbSceneParam._m0[77u].w / _1594)) * _1619;
        float _1628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1847;
        if (abs((_1608 - _1611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1847 = ((((_1612 > 0.0) ? exp2(_1628 * _1612) : (2.0 - exp2(_1630 * _1612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1622;
        }
        else
        {
            float _1769 = 1.0 / cbSceneParam._m0[80u].x;
            float _1770 = isnan(_1613) ? _1612 : (isnan(_1612) ? _1613 : max(_1612, _1613));
            float _1771 = isnan(_1613) ? _1612 : (isnan(_1612) ? _1613 : min(_1612, _1613));
            float _1780 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : min(_1770, 0.0));
            float _1781 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : min(_1771, 0.0));
            _1847 = ((abs(_1619 / _1608) * cbSceneParam._m0[80u].y) * ((((_1780 - _1781) * 2.0) - ((exp2(_1628 * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)))) - exp2(_1628 * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))))) * _1769)) - ((exp2(_1630 * _1780) - exp2(_1630 * _1781)) * _1769))) + (_1622 * cbSceneParam._m0[80u].z);
        }
        vec4 _1849 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1538, _1539, 1.0), 0.0);
        float _1858 = exp2((_1847 * (-1.44269502162933349609375)) * (1.0 - _1849.w));
        float _1859 = log2(_1858);
        float _1875 = log2(_1558);
        _1632 = (exp2(_1875 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1859 * cbSceneParam._m0[78u].x)) * _1849.x) / cbSceneParam._m0[78u].x)) + _1555;
        _1634 = (exp2(_1875 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1859 * cbSceneParam._m0[78u].y)) * _1849.y) / cbSceneParam._m0[78u].y)) + _1556;
        _1636 = (exp2(_1875 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1859 * cbSceneParam._m0[78u].z)) * _1849.z) / cbSceneParam._m0[78u].z)) + _1557;
        _1638 = _1858 * _1558;
    }
    else
    {
        _1632 = _1555;
        _1634 = _1556;
        _1636 = _1557;
        _1638 = _1558;
    }
    bool _1885;
    vec4 _1648;
    vec4 _1671;
    float _1673;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    bool _1691;
    for (;;)
    {
        _1648 = cbMatDynParam._m0[0u];
        float _1650 = roundEven(_1648.y);
        bool _1651 = _1650 == 3.0;
        float _1653 = log2(_1638);
        float _1660 = exp2(_1653 * cbSceneParam._m0[78u].x) * _1527;
        float _1661 = exp2(_1653 * cbSceneParam._m0[78u].y) * _1528;
        float _1662 = exp2(_1653 * cbSceneParam._m0[78u].z) * _1529;
        float _1669 = _540 + (-0.5);
        _1671 = cbMtdParam._m0[1u];
        _1673 = _1671.y * _1669;
        float _1676 = (_1650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1677 = _1676 * (_1651 ? _1660 : (_1660 + (cbSceneParam._m0[72u].w * _1632)));
        _1678 = _1676 * (_1651 ? _1661 : (_1661 + (cbSceneParam._m0[72u].w * _1634)));
        _1679 = _1676 * (_1651 ? _1662 : (_1662 + (cbSceneParam._m0[72u].w * _1636)));
        _1680 = _1669 * 0.999000012874603271484375;
        _1691 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1691)
        {
            if ((cbInstanceData._m0[_1247 + 7u].x + _1680) < 0.5)
            {
                _1885 = true;
                break;
            }
        }
        uint _1804 = _1508 + uint(_1648.w);
        if ((cbInstanceData._m0[_1804].w < 1.0) && ((cbInstanceData._m0[_1804].w + _1680) < 0.5))
        {
            _1885 = true;
            break;
        }
        if ((_1673 + 1.0) < _1671.x)
        {
            _1885 = true;
            break;
        }
        _1885 = false;
        break;
    }
    float _2043;
    if (_1885)
    {
        discard_state = true;
        _2043 = 0.0;
    }
    else
    {
        _2043 = cbInstanceData._m0[_1530].w;
    }
    SV_Target.x = _1677;
    SV_Target.y = _1678;
    SV_Target.z = _1679;
    SV_Target.w = _2043;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1530].w;
    discard_exit();
}


