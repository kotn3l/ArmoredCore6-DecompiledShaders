#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

float _306;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _132 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _133 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _134 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _139 = inversesqrt(dot(vec3(_132, _133, _134), vec3(_132, _133, _134)));
    float _140 = _139 * _132;
    float _141 = _139 * _133;
    float _142 = _139 * _134;
    float _146 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _150 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _151 = _150 * TANGENT.x;
    float _152 = _150 * TANGENT.y;
    float _153 = _150 * TANGENT.z;
    float _198 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _208 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _198);
    float _209 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _198);
    float _210 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _198);
    float _235 = inversesqrt(dot(vec3(_140, _141, _142), vec3(_140, _141, _142)));
    float _242 = inversesqrt(dot(vec3(_151, _152, _153), vec3(_151, _152, _153)));
    float _252 = cbMtdParam._m0[23u].x + _208;
    float _253 = cbMtdParam._m0[23u].y + _209;
    float _254 = cbMtdParam._m0[23u].z + _210;
    float _271 = (-0.0) - dot(vec3(_252, _253, _254), vec3(_235 * _140, _235 * _141, _235 * _142));
    float _272 = (-0.0) - dot(vec3(_252, _253, _254), vec3(_242 * _151, _242 * _152, _242 * _153));
    float _273 = (-0.0) - dot(vec3(_252, _253, _254), vec3((-0.0) - (NORMAL.x * _146), (-0.0) - (NORMAL.y * _146), (-0.0) - (NORMAL.z * _146)));
    float _277 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _278 = _277 * _273;
    float _280 = (cbMtdParam._m0[19u].w * _271) * _277;
    float _282 = (cbMtdParam._m0[20u].x * _272) * _277;
    float _285 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _286 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _304;
    float _307;
    float _309;
    if (_280 > 0.0)
    {
        float _290 = (1.0 - _285) / _280;
        _304 = _290;
        _307 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_290 * _278)) * 0.16666667163372039794921875;
        _309 = (fract((_290 * _282) + _286) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_280 < 0.0)
        {
            float _305 = ((-0.0) - _285) / _280;
            frontier_phi_3_2_ladder = _305;
            frontier_phi_3_2_ladder_1 = (fract(_305 * _278) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_2 = (fract((_305 * _282) + _286) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = _306;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _304 = frontier_phi_3_2_ladder;
        _307 = frontier_phi_3_2_ladder_1;
        _309 = frontier_phi_3_2_ladder_2;
    }
    float _335;
    float _337;
    float _339;
    if (_282 > 0.0)
    {
        float _322 = (1.0 - _286) / _282;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_322 < _304)
        {
            frontier_phi_8_5_ladder = _322;
            frontier_phi_8_5_ladder_1 = (fract((_322 * _280) + _285) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = (fract(_322 * _278) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _304;
            frontier_phi_8_5_ladder_1 = _307;
            frontier_phi_8_5_ladder_2 = _309;
        }
        _335 = frontier_phi_8_5_ladder;
        _337 = frontier_phi_8_5_ladder_1;
        _339 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_282 < 0.0)
        {
            float _336 = ((-0.0) - _286) / _282;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_336 < _304)
            {
                frontier_phi_8_6_ladder_9_ladder = _336;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_336 * _280) + _285) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_336 * _278) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _304;
                frontier_phi_8_6_ladder_9_ladder_1 = _307;
                frontier_phi_8_6_ladder_9_ladder_2 = _309;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _304;
            frontier_phi_8_6_ladder_1 = _307;
            frontier_phi_8_6_ladder_2 = _309;
        }
        _335 = frontier_phi_8_6_ladder;
        _337 = frontier_phi_8_6_ladder_1;
        _339 = frontier_phi_8_6_ladder_2;
    }
    float _343 = (_278 > 0.0) ? (cbMtdParam._m0[16u].w / _278) : 5000.0;
    float _356;
    float _357;
    if (_343 < _335)
    {
        _356 = ((_285 + cbMtdParam._m0[17u].x) + (_343 * _280)) * 0.16666667163372039794921875;
        _357 = (((_343 * _282) + _286) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _356 = _337;
        _357 = _339;
    }
    vec4 _360 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_356, _357));
    float _366 = _360.x * cbMtdParam._m0[13u].x;
    float _367 = _360.y * cbMtdParam._m0[13u].y;
    float _368 = _360.z * cbMtdParam._m0[13u].z;
    float _579 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _369 = isnan(1.0) ? _579 : (isnan(_579) ? 1.0 : min(_579, 1.0));
    float _590 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    float _370 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
    float _601 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _371 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
    uint _373 = uint(roundEven(NORMAL.w));
    vec4 _378 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _380 = _378.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _447 = sqrt(((_208 * _208) + (_209 * _209)) + (_210 * _210));
        float _454 = (cbMatDynParam._m0[5u].x * _447) + cbMatDynParam._m0[5u].y;
        float _612 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
        float _455 = isnan(1.0) ? _612 : (isnan(_612) ? 1.0 : min(_612, 1.0));
        float _459 = (cbMatDynParam._m0[5u].z * _447) + cbMatDynParam._m0[5u].w;
        float _623 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _623 : (isnan(_623) ? 1.0 : min(_623, 1.0))) - _455)) + _455) < ((_380 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _487;
    uint _406;
    vec4 _410;
    float _417;
    float _418;
    float _419;
    float _423;
    vec4 _427;
    float _429;
    float _430;
    bool _441;
    for (;;)
    {
        _406 = _373 * 13u;
        _410 = cbInstanceData._m0[(_406 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _414 = (cbMtdParam._m0[0u].x * _369) * _410.x;
        float _415 = (cbMtdParam._m0[0u].y * _370) * _410.y;
        float _416 = (cbMtdParam._m0[0u].z * _371) * _410.z;
        float _634 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
        _417 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        float _645 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
        _418 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        float _656 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
        _419 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _423 = cbInstanceData._m0[_406 + 6u].w;
        float _424 = _380 + (-0.5);
        _427 = cbMtdParam._m0[1u];
        _429 = _427.y * _424;
        _430 = _424 * 0.999000012874603271484375;
        _441 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_441)
        {
            if ((cbInstanceData._m0[_406 + 7u].x + _430) < 0.5)
            {
                _487 = true;
                break;
            }
        }
        if ((_410.w < 1.0) && ((_410.w + _430) < 0.5))
        {
            _487 = true;
            break;
        }
        if ((_429 + 1.0) < _427.x)
        {
            _487 = true;
            break;
        }
        _487 = false;
        break;
    }
    if (_487)
    {
        discard_state = true;
    }
    bool _503 = cbMtdParam._m0[1u].z != 0.0;
    float _504 = _503 ? _423 : 0.0;
    SV_Target.x = 0.500488758087158203125;
    SV_Target.y = 0.500488758087158203125;
    SV_Target.z = 0.500488758087158203125;
    SV_Target.w = _504;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _503 ? _423 : TEXCOORD.z;
    SV_Target_2.x = _417;
    SV_Target_2.y = _418;
    SV_Target_2.z = _419;
    SV_Target_2.w = _503 ? _423 : (float(floatBitsToUint(cbInstanceData._m0[_406 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _504;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _504;
    discard_exit();
}


