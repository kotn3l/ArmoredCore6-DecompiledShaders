#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1003;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    float _283 = cbMtdParam._m0[22u].y + _255;
    float _284 = cbMtdParam._m0[22u].z + _256;
    float _285 = cbMtdParam._m0[22u].w + _257;
    float _299 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_197 * TANGENT.x, _197 * TANGENT.y, _197 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_283, _284, _285), vec3((-0.0) - (_190 * NORMAL.x), (-0.0) - (_190 * NORMAL.y), (-0.0) - (_190 * NORMAL.z)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    bool _328 = _306 > 0.0;
    float _330 = _328 ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = _311 + (-0.5);
    float _340 = _312 + (-0.5);
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_337 + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_340 + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _380 = cbMtdParam._m0[9u].x * _369.x;
    float _381 = cbMtdParam._m0[9u].y * _369.y;
    float _382 = cbMtdParam._m0[9u].z * _369.z;
    float _404 = (cbMtdParam._m0[21u].x * _299) * _305;
    float _406 = (cbMtdParam._m0[20u].w * _300) * _305;
    bool _407 = _404 > 0.0;
    float _412;
    if (_407)
    {
        _412 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _412 = frontier_phi_11_10_ladder;
    }
    bool _414 = _406 > 0.0;
    float _419;
    if (_414)
    {
        _419 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _419 = frontier_phi_15_14_ladder;
    }
    float _422 = _328 ? (cbMtdParam._m0[16u].z / _306) : 5000.0;
    float _423 = isnan(_419) ? _412 : (isnan(_412) ? _419 : min(_412, _419));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _432 = ((_424 * _306) + _428) / _428;
    float _437 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _439 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _455 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_424 * _404)) / _432) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_424 * _406)) / _432) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _467;
    if (_407)
    {
        _467 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _467 = frontier_phi_19_18_ladder;
    }
    float _473;
    if (_414)
    {
        _473 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _473 = frontier_phi_23_22_ladder;
    }
    float _475 = isnan(_473) ? _467 : (isnan(_467) ? _473 : min(_467, _473));
    float _476 = isnan(_422) ? _475 : (isnan(_475) ? _422 : min(_475, _422));
    float _483 = ((_476 * _306) + _428) / _428;
    vec4 _497 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_476 * _404)) / _483) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_476 * _406)) / _483) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _499 = _497.w;
    float _506 = (_499 * ((_455.x * cbMtdParam._m0[10u].x) - _380)) + _380;
    float _507 = (_499 * ((_455.y * cbMtdParam._m0[10u].y) - _381)) + _381;
    float _508 = (_499 * ((_455.z * cbMtdParam._m0[10u].z) - _382)) + _382;
    float _523 = (cbMtdParam._m0[21u].z * _299) * _305;
    float _525 = (cbMtdParam._m0[21u].y * _300) * _305;
    bool _526 = _523 > 0.0;
    float _531;
    if (_526)
    {
        _531 = (1.0 - _311) / _523;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _311) / _523;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _531 = frontier_phi_27_26_ladder;
    }
    bool _533 = _525 > 0.0;
    float _538;
    if (_533)
    {
        _538 = (1.0 - _312) / _525;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _312) / _525;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _538 = frontier_phi_31_30_ladder;
    }
    float _541 = _328 ? (cbMtdParam._m0[18u].x / _306) : 5000.0;
    float _542 = isnan(_538) ? _531 : (isnan(_531) ? _538 : min(_531, _538));
    float _543 = isnan(_541) ? _542 : (isnan(_542) ? _541 : min(_542, _541));
    float _547 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _551 = ((_543 * _306) + _547) / _547;
    float _556 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _558 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _575 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_337 + (_543 * _523)) / _551) + 0.5) + _556) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_340 + (_543 * _525)) / _551) + 0.5) + _558) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _587;
    if (_526)
    {
        _587 = (1.0 - _311) / _523;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_523 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _311) / _523;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _587 = frontier_phi_35_34_ladder;
    }
    float _593;
    if (_533)
    {
        _593 = (1.0 - _312) / _525;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_525 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _312) / _525;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _593 = frontier_phi_39_38_ladder;
    }
    float _595 = isnan(_593) ? _587 : (isnan(_587) ? _593 : min(_587, _593));
    float _596 = isnan(_541) ? _595 : (isnan(_595) ? _541 : min(_595, _541));
    float _603 = ((_596 * _306) + _547) / _547;
    vec4 _617 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_337 + (_596 * _523)) / _603) + 0.5) + _556) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_340 + (_596 * _525)) / _603) + 0.5) + _558) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _619 = _617.w;
    float _626 = (_619 * ((_575.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _627 = (_619 * ((_575.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _628 = (_619 * ((_575.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    float _3002 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3013 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3024 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _647 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _652 = _255 * _651;
    float _653 = _256 * _651;
    float _654 = _257 * _651;
    float _660 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _661 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _674 = uint(roundEven(NORMAL.w)) * 13u;
    uint _677 = (_674 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _683 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0)))) * cbInstanceData._m0[_677].x;
    float _684 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0)))) * cbInstanceData._m0[_677].y;
    float _685 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0)))) * cbInstanceData._m0[_677].z;
    float _3035 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    float _3046 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
    float _3057 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0));
    vec4 _697 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _660, cbSceneParam._m0[86u].y * _661));
    float _700 = _697.x * TEXCOORD.z;
    float _701 = (-0.0) - _652;
    float _702 = (-0.0) - _653;
    float _703 = (-0.0) - _654;
    float _725 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1002;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = (cbModelParam._m0[37u].x * ((((fma(_733, cbModelParam._m0[26u].z, fma(_729, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _725)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _791 = (cbModelParam._m0[37u].y * ((((fma(_733, cbModelParam._m0[27u].z, fma(_729, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _725)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _792 = (((((fma(_733, cbModelParam._m0[28u].z, fma(_729, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _725)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _791, _792), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _791, _792), 0.0);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _791, _792), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _791, _792), 0.0);
        float _829 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _829 * (_795.x + (-0.5));
        float _832 = _829 * (_795.y + (-0.5));
        float _833 = _829 * (_795.z + (-0.5));
        float _840 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_802.x + (-0.5));
        float _842 = _840 * (_802.y + (-0.5));
        float _843 = _840 * (_802.z + (-0.5));
        float _850 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_809.x + (-0.5));
        float _852 = _850 * (_809.y + (-0.5));
        float _853 = _850 * (_809.z + (-0.5));
        float _860 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_816.x + (-0.5));
        float _862 = _860 * (_816.y + (-0.5));
        float _863 = _860 * (_816.z + (-0.5));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = _831 * 0.5;
        float _868 = _841 * 0.5;
        float _869 = _851 * 0.5;
        float _870 = dot(vec3(_867, _868, _869), vec3(_867, _868, _869));
        float _875 = (_870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_870);
        float _884 = (dot(vec3(0.0), vec3(_875 * _867, _875 * _868, _875 * _869)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _894 = sqrt(((_868 * _868) + (_867 * _867)) + (_869 * _869)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3105 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_896 + 1.0))) + _901) * _864;
        float _911 = _832 * 0.5;
        float _912 = _842 * 0.5;
        float _913 = _852 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(0.0), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3116 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_865 + 9.9999997473787516355514526367188e-06);
        float _3127 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3138 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0))) * (_938 + 1.0))) + _943) * _865;
        float _953 = _833 * 0.5;
        float _954 = _843 * 0.5;
        float _955 = _853 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(0.0), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3149 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3160 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3171 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))) * (_980 + 1.0))) + _985) * _866;
        _1002 = _833;
        _1004 = _832;
        _1005 = _831;
        _1006 = _843;
        _1007 = _842;
        _1008 = _841;
        _1009 = _853;
        _1010 = _852;
        _1011 = _851;
        _1012 = _866;
        _1013 = _865;
        _1014 = _864;
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _1016 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
    }
    else
    {
        _1002 = _1003;
        _1004 = _1003;
        _1005 = _1003;
        _1006 = _1003;
        _1007 = _1003;
        _1008 = _1003;
        _1009 = _1003;
        _1010 = _1003;
        _1011 = _1003;
        _1012 = _1003;
        _1013 = _1003;
        _1014 = _1003;
        _1015 = 0.0;
        _1016 = 0.0;
        _1017 = 0.0;
    }
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1071 = (cbModelParam._m0[38u].x * ((((fma(_733, cbModelParam._m0[30u].z, fma(_729, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _725)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1072 = (cbModelParam._m0[38u].y * ((((fma(_733, cbModelParam._m0[31u].z, fma(_729, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _725)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1073 = (((((fma(_733, cbModelParam._m0[32u].z, fma(_729, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _725)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1108 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1109 = _1108 * (_1075.x + (-0.5));
        float _1110 = _1108 * (_1075.y + (-0.5));
        float _1111 = _1108 * (_1075.z + (-0.5));
        float _1118 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1082.x + (-0.5));
        float _1120 = _1118 * (_1082.y + (-0.5));
        float _1121 = _1118 * (_1082.z + (-0.5));
        float _1128 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1089.x + (-0.5));
        float _1130 = _1128 * (_1089.y + (-0.5));
        float _1131 = _1128 * (_1089.z + (-0.5));
        float _1138 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1096.x + (-0.5));
        float _1140 = _1138 * (_1096.y + (-0.5));
        float _1141 = _1138 * (_1096.z + (-0.5));
        float _1142 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = _1109 * 0.5;
        float _1146 = _1119 * 0.5;
        float _1147 = _1129 * 0.5;
        float _1148 = dot(vec3(_1145, _1146, _1147), vec3(_1145, _1146, _1147));
        float _1153 = (_1148 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1148);
        float _1161 = (dot(vec3(0.0), vec3(_1153 * _1145, _1153 * _1146, _1153 * _1147)) + 1.0) * 0.5;
        float _3212 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1170 = sqrt(((_1146 * _1146) + (_1145 * _1145)) + (_1147 * _1147)) / (_1142 + 9.9999997473787516355514526367188e-06);
        float _3223 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _1172 = _1171 * 2.0;
        float _1176 = (1.0 - _1171) / (_1171 + 1.0);
        float _3234 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1177 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _1186 = ((((1.0 - _1177) * (_1172 + 2.0)) * exp2(log2(isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * (_1172 + 1.0))) + _1177) * _1142;
        float _1187 = _1110 * 0.5;
        float _1188 = _1120 * 0.5;
        float _1189 = _1130 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(0.0), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3245 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _3256 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3267 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * (_1214 + 1.0))) + _1219) * _1143;
        float _1229 = _1111 * 0.5;
        float _1230 = _1121 * 0.5;
        float _1231 = _1131 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(0.0), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3278 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3289 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3300 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * (_1256 + 1.0))) + _1261) * _1144;
        _1278 = _1111;
        _1279 = _1110;
        _1280 = _1109;
        _1281 = _1121;
        _1282 = _1120;
        _1283 = _1119;
        _1284 = _1131;
        _1285 = _1130;
        _1286 = _1129;
        _1287 = _1144;
        _1288 = _1143;
        _1289 = _1142;
        _1290 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)));
        _1291 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1292 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
    }
    else
    {
        _1278 = _1003;
        _1279 = _1003;
        _1280 = _1003;
        _1281 = _1003;
        _1282 = _1003;
        _1283 = _1003;
        _1284 = _1003;
        _1285 = _1003;
        _1286 = _1003;
        _1287 = _1003;
        _1288 = _1003;
        _1289 = _1003;
        _1290 = 0.0;
        _1291 = 0.0;
        _1292 = 0.0;
    }
    float _1302 = (cbModelParam._m0[1u].x * (_1290 - _1015)) + _1015;
    float _1303 = (cbModelParam._m0[1u].x * (_1291 - _1016)) + _1016;
    float _1304 = (cbModelParam._m0[1u].x * (_1292 - _1017)) + _1017;
    float _1325 = fma(_1304, cbSceneParam._m0[89u].z, fma(_1303, cbSceneParam._m0[89u].y, _1302 * cbSceneParam._m0[89u].x));
    float _1328 = fma(_1304, cbSceneParam._m0[90u].z, fma(_1303, cbSceneParam._m0[90u].y, _1302 * cbSceneParam._m0[90u].x));
    float _1331 = fma(_1304, cbSceneParam._m0[91u].z, fma(_1303, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1302));
    float _1346 = _652 * (-0.5);
    float _1347 = _653 * (-0.5);
    float _1348 = _654 * (-0.5);
    float _1349 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1280, _1283, _1286, _1289));
    float _1352 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1279, _1282, _1285, _1288));
    float _1355 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1278, _1281, _1284, _1287));
    float _1389;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1362 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1002, _1006, _1009, _1012));
        float _1366 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1004, _1007, _1010, _1013));
        float _1370 = dot(vec4(_1346, _1347, _1348, 1.0), vec4(_1005, _1008, _1011, _1014));
        float _1377 = dot(vec4(cbModelParam._m0[39u]), vec4(_1346, _1347, _1348, 1.0));
        _1389 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1377) ? 0.0 : (isnan(0.0) ? _1377 : max(0.0, _1377))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1389 = 1.0;
    }
    float _1400;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1391 = dot(vec4(cbModelParam._m0[40u]), vec4(_1346, _1347, _1348, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)), isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1404 = (_1400 * cbModelParam._m0[1u].x) + (_1389 * (1.0 - cbModelParam._m0[1u].x));
    float _1413 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1460 = fma(_733, cbModelParam._m0[13u].z, fma(_729, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _725)) + cbModelParam._m0[13u].w;
        float _1464 = fma(_733, cbModelParam._m0[14u].z, fma(_729, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _725)) + cbModelParam._m0[14u].w;
        float _1468 = fma(_733, cbModelParam._m0[15u].z, fma(_729, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _725)) + cbModelParam._m0[15u].w;
        float _1471 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1474 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1477 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1503;
        if (_1471 > 0.0)
        {
            _1503 = abs((1.0 - _1460) / _1471);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1460 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1503 = frontier_phi_54_52_ladder;
        }
        float _1825;
        if (_1474 > 0.0)
        {
            _1825 = abs((1.0 - _1464) / _1474);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1464 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1825 = frontier_phi_63_59_ladder;
        }
        float _2128;
        if (_1477 > 0.0)
        {
            _2128 = abs((1.0 - _1468) / _1477);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1477 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1468 + 1.0) / _1477);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2128 = frontier_phi_77_70_ladder;
        }
        float _2130 = isnan(_1825) ? _1503 : (isnan(_1503) ? _1825 : min(_1503, _1825));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1471) + _1460;
        float _2136 = (_2131 * _1474) + _1464;
        float _2137 = (_2131 * _1477) + _1468;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2138;
        float _2141 = _2138 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2137 > _2141) || ((_2137 < _2139) || ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 < _2139) || (_2135 > _2141))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2137, cbModelParam._m0[9u].z, fma(_2136, cbModelParam._m0[9u].y, _2135 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2137, cbModelParam._m0[10u].z, fma(_2136, cbModelParam._m0[10u].y, _2135 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2137, cbModelParam._m0[11u].z, fma(_2136, cbModelParam._m0[11u].y, _2135 * cbModelParam._m0[11u].x))), _1413);
            frontier_phi_53_77_ladder = _2260.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2260.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2260.z * cbModelParam._m0[1u].y;
        }
        _1493 = frontier_phi_53_77_ladder;
        _1495 = frontier_phi_53_77_ladder_1;
        _1497 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1413);
        _1493 = _1481.x * cbModelParam._m0[1u].y;
        _1495 = _1481.y * cbModelParam._m0[1u].y;
        _1497 = _1481.z * cbModelParam._m0[1u].y;
    }
    float _1500 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1552 = fma(_733, cbModelParam._m0[21u].z, fma(_729, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _725)) + cbModelParam._m0[21u].w;
        float _1556 = fma(_733, cbModelParam._m0[22u].z, fma(_729, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _725)) + cbModelParam._m0[22u].w;
        float _1560 = fma(_733, cbModelParam._m0[23u].z, fma(_729, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _725)) + cbModelParam._m0[23u].w;
        float _1563 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1566 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1569 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _1830;
        if (_1563 > 0.0)
        {
            _1830 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1830 = frontier_phi_65_61_ladder;
        }
        float _2154;
        if (_1566 > 0.0)
        {
            _2154 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2154 = frontier_phi_79_72_ladder;
        }
        float _2320;
        if (_1569 > 0.0)
        {
            _2320 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2320 = frontier_phi_93_88_ladder;
        }
        float _2322 = isnan(_2154) ? _1830 : (isnan(_1830) ? _2154 : min(_1830, _2154));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1563) + _1552;
        float _2328 = (_2323 * _1566) + _1556;
        float _2329 = (_2323 * _1569) + _1560;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2329, cbModelParam._m0[17u].z, fma(_2328, cbModelParam._m0[17u].y, _2327 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2329, cbModelParam._m0[18u].z, fma(_2328, cbModelParam._m0[18u].y, _2327 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2329, cbModelParam._m0[19u].z, fma(_2328, cbModelParam._m0[19u].y, _2327 * cbModelParam._m0[19u].x))), _1500);
            frontier_phi_62_93_ladder = _2512.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2512.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2512.x * cbModelParam._m0[1u].z;
        }
        _1588 = frontier_phi_62_93_ladder_2;
        _1590 = frontier_phi_62_93_ladder_1;
        _1592 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1572 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1500);
        _1588 = _1572.x * cbModelParam._m0[1u].z;
        _1590 = _1572.y * cbModelParam._m0[1u].z;
        _1592 = _1572.z * cbModelParam._m0[1u].z;
    }
    float _1604 = _700 * 0.01200000010430812835693359375;
    float _1606 = _1604 * ((cbModelParam._m0[1u].w * (_1588 - _1493)) + _1493);
    float _1607 = _1604 * ((cbModelParam._m0[1u].w * (_1590 - _1495)) + _1495);
    float _1608 = _1604 * ((cbModelParam._m0[1u].w * (_1592 - _1497)) + _1497);
    float _1611 = fma(_1608, cbSceneParam._m0[89u].z, fma(_1607, cbSceneParam._m0[89u].y, _1606 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1608, cbSceneParam._m0[90u].z, fma(_1607, cbSceneParam._m0[90u].y, _1606 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1608, cbSceneParam._m0[91u].z, fma(_1607, cbSceneParam._m0[91u].y, _1606 * cbSceneParam._m0[91u].x));
    vec4 _1625 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_660, _661));
    float _1627 = _1625.w;
    float _1640 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1627);
    float _1641 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1627);
    float _1642 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1627);
    uvec4 _1647 = floatBitsToUint(cbInstanceData._m0[_674 + 5u]);
    uint _1649 = _1647.x * 14u;
    uint _1650 = _1649 + 13u;
    float _1655 = _700 + (-1.0);
    float _1659 = (cbLight._m0[_1650].x * _1655) + 1.0;
    float _1660 = (cbLight._m0[_1650].y * _1655) + 1.0;
    uint _1661 = _1649 + 5u;
    float _1667 = isnan(1.0) ? _1660 : (isnan(_1660) ? 1.0 : min(_1660, 1.0));
    uint _1671 = _1649 + 4u;
    float _1680 = isnan(1.0) ? _1659 : (isnan(_1659) ? 1.0 : min(_1659, 1.0));
    uint _1684 = _1649 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1649].xyz), vec3(0.0));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(0.0));
    float _3436 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3447 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1661].x * _1667) * _1705) + (((cbLight._m0[_1671].x * _1640) * _1680) * _1703);
    float _1713 = ((_1667 * cbLight._m0[_1661].y) * _1705) + (((cbLight._m0[_1671].y * _1641) * _1680) * _1703);
    float _1714 = ((_1667 * cbLight._m0[_1661].z) * _1705) + (((cbLight._m0[_1671].z * _1642) * _1680) * _1703);
    uint _1715 = _1649 + 8u;
    float _1721 = cbLight._m0[_1649].x + _652;
    float _1722 = cbLight._m0[_1649].y + _653;
    float _1723 = cbLight._m0[_1649].z + _654;
    float _1727 = inversesqrt(dot(vec3(_1721, _1722, _1723), vec3(_1721, _1722, _1723)));
    float _1731 = dot(vec3(0.0), vec3(cbLight._m0[_1649].xyz));
    float _3458 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _1735 = dot(vec3(0.0), vec3(_652, _653, _654));
    float _3469 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
    float _1739 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1721 * _1727, _1722 * _1727, _1723 * _1727));
    float _3480 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1750 = (exp2(log2(1.0 - (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1756 = (0.5 / ((_1734 + 9.9999999392252902907785028219223e-09) + _1738)) * _1734;
    float _3491 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1758 = (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.31831014156341552734375;
    uint _1772 = _1649 + 9u;
    float _1778 = cbLight._m0[_1684].x + _652;
    float _1779 = cbLight._m0[_1684].y + _653;
    float _1780 = cbLight._m0[_1684].z + _654;
    float _1784 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
    float _1788 = dot(vec3(0.0), vec3(cbLight._m0[_1684].xyz));
    float _3502 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _1791 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _1792 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1778 * _1784, _1779 * _1784, _1780 * _1784));
    float _3513 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1801 = (exp2(log2(1.0 - (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1805 = (0.5 / ((_1791 + 9.9999999392252902907785028219223e-09) + _1738)) * _1791;
    float _3524 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1807 = (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0))) * 0.31831014156341552734375;
    float _1817 = (((_1801 * cbLight._m0[_1772].x) * _1807) * _1667) + ((((cbLight._m0[_1715].x * _1640) * _1750) * _1758) * _1680);
    float _1818 = (((_1801 * cbLight._m0[_1772].y) * _1807) * _1667) + ((((cbLight._m0[_1715].y * _1641) * _1750) * _1758) * _1680);
    float _1819 = (((_1801 * cbLight._m0[_1772].z) * _1807) * _1667) + ((((cbLight._m0[_1715].z * _1642) * _1750) * _1758) * _1680);
    float _1936;
    float _1938;
    float _1940;
    float _1942;
    float _1944;
    float _1946;
    if (_1647.y == 0u)
    {
        float _1875 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1876 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1875;
        float _1877 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1875;
        float _1878 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1875;
        uvec4 _1890 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1891 = _1890.x;
        uint _1902 = uint((float(_1890.y) * floor(float(uint(cbSceneParam._m0[85u].y * _661) / _1891))) + floor(float(uint(cbSceneParam._m0[85u].x * _660) / _1891)));
        float _1912 = (log2(_1878 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1913 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        uint _1916 = uint(isnan(14.0) ? _1913 : (isnan(_1913) ? 14.0 : min(_1913, 14.0)));
        uvec4 _1922 = texelFetch(g_lightClusterGridBuffer, int(((_1916 << 2u) + (_1902 << 6u)) >> 2u));
        uint _1923 = _1922.x;
        uint _1924 = _1890.z;
        float _2014;
        float _2016;
        float _2018;
        float _2020;
        float _2022;
        float _2024;
        if (((((1u << ((_1924 >> 4u) & 15u)) + 4294967295u) & _1923) == 0u) || ((_1924 & 240u) == 0u))
        {
            _2014 = 0.0;
            _2016 = 0.0;
            _2018 = 0.0;
            _2020 = 0.0;
            _2022 = 0.0;
            _2024 = 0.0;
        }
        else
        {
            float _2015;
            float _2017;
            float _2019;
            float _2021;
            float _2023;
            float _2025;
            float _2188 = 0.0;
            float _2189 = 0.0;
            float _2190 = 0.0;
            float _2191 = 0.0;
            float _2192 = 0.0;
            float _2193 = 0.0;
            uint _2194 = 0u;
            uint _2203;
            bool _2204;
            for (;;)
            {
                _2203 = texelFetch(g_lightClassification, int((((_1916 << 5u) + (_1902 << 9u)) + (_2194 << 2u)) >> 2u)).x;
                _2204 = _2203 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2204)
                {
                    frontier_phi_90_pred = _2193;
                    frontier_phi_90_pred_1 = _2188;
                    frontier_phi_90_pred_2 = _2189;
                    frontier_phi_90_pred_3 = _2190;
                    frontier_phi_90_pred_4 = _2191;
                    frontier_phi_90_pred_5 = _2192;
                }
                else
                {
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    uint _2369;
                    _2363 = _2188;
                    _2364 = _2189;
                    _2365 = _2190;
                    _2366 = _2191;
                    _2367 = _2192;
                    _2368 = _2193;
                    _2369 = _2203;
                    float _2269;
                    float _2270;
                    float _2271;
                    float _2272;
                    float _2273;
                    float _2274;
                    for (;;)
                    {
                        uint _2373 = uint(findLSB(_2369)) + (_2194 << 5u);
                        uint _2370 = (_2369 + 4294967295u) & _2369;
                        uint _2375 = _2373 * 48u;
                        vec4 _2389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2375)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2375 + 3u)).x));
                        uint _2395 = (_2373 * 48u) + 4u;
                        vec4 _2408 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2395)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2395 + 3u)).x));
                        uint _2414 = (_2373 * 48u) + 8u;
                        vec3 _2425 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2414)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2414 + 2u)).x));
                        float _2429 = _2389.x - _1876;
                        float _2430 = _2389.y - _1877;
                        float _2431 = _2389.z - _1878;
                        float _2432 = dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431));
                        float _2435 = inversesqrt(_2432);
                        float _2444 = 1.0 - (_2432 * _2389.w);
                        float _3545 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
                        float _2445 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
                        float _2446 = sqrt(_2432) * _2408.w;
                        float _2449 = 1.39999997615814208984375 / (_2446 + 1.39999997615814208984375);
                        float _2450 = _2449 * _2449;
                        float _2453 = ((1.0 - _2450) * dot(vec3(0.0), vec3(_2435 * _2429, _2435 * _2430, _2435 * _2431))) + _2450;
                        float _2456 = _2446 * _2446;
                        float _2460 = ((isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0))) * _2445) / ((_2456 * 0.699999988079071044921875) + 1.0);
                        float _2464 = (-0.0) - _1876;
                        float _2465 = (-0.0) - _1877;
                        float _2466 = (-0.0) - _1878;
                        float _2470 = inversesqrt(dot(vec3(_2464, _2465, _2466), vec3(_2464, _2465, _2466)));
                        float _2474 = dot(vec3(0.0), vec3(_2470 * _2464, _2470 * _2465, _2470 * _2466));
                        float _3561 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
                        float _3572 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
                        float _2478 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
                        float _2482 = (0.5 / (((isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) + 9.9999999392252902907785028219223e-09) + _2478)) * _2478;
                        float _3583 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                        float _2491 = (((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 3.1415927410125732421875) / ((_2456 * 2.1991131305694580078125) + 3.141590118408203125)) * _2445;
                        _2272 = (_2460 * _2408.x) + _2366;
                        _2273 = (_2460 * _2408.y) + _2367;
                        _2274 = (_2460 * _2408.z) + _2368;
                        _2269 = (_2491 * _2425.x) + _2363;
                        _2270 = (_2491 * _2425.y) + _2364;
                        _2271 = (_2491 * _2425.z) + _2365;
                        if (_2370 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2363 = _2269;
                            _2364 = _2270;
                            _2365 = _2271;
                            _2366 = _2272;
                            _2367 = _2273;
                            _2368 = _2274;
                            _2369 = _2370;
                        }
                    }
                    frontier_phi_90_pred = _2274;
                    frontier_phi_90_pred_1 = _2269;
                    frontier_phi_90_pred_2 = _2270;
                    frontier_phi_90_pred_3 = _2271;
                    frontier_phi_90_pred_4 = _2272;
                    frontier_phi_90_pred_5 = _2273;
                }
                _2025 = frontier_phi_90_pred;
                _2015 = frontier_phi_90_pred_1;
                _2017 = frontier_phi_90_pred_2;
                _2019 = frontier_phi_90_pred_3;
                _2021 = frontier_phi_90_pred_4;
                _2023 = frontier_phi_90_pred_5;
                uint _2195 = _2194 + 1u;
                if (_2195 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2188 = _2015;
                    _2189 = _2017;
                    _2190 = _2019;
                    _2191 = _2021;
                    _2192 = _2023;
                    _2193 = _2025;
                    _2194 = _2195;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2014 = _2015;
            _2016 = _2017;
            _2018 = _2019;
            _2020 = _2021;
            _2022 = _2023;
            _2024 = _2025;
        }
        uvec4 _2028 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2029 = _2028.z;
        uint _2031 = (_2029 >> 8u) & 15u;
        float _2159;
        float _2161;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        if (((4294967295u << _2031) & _1923) == 0u)
        {
            _2159 = _2014;
            _2161 = _2016;
            _2163 = _2018;
            _2165 = _2020;
            _2167 = _2022;
            _2169 = _2024;
        }
        else
        {
            float _2184 = inversesqrt(dot(vec3(_1876, _1877, _1878), vec3(_1876, _1877, _1878)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2031 < ((_2029 >> 12u) & 15u))
            {
                float _2160;
                float _2162;
                float _2164;
                float _2166;
                float _2168;
                float _2170;
                float _2346 = _2014;
                float _2347 = _2016;
                float _2348 = _2018;
                float _2349 = _2020;
                float _2350 = _2022;
                float _2351 = _2024;
                uint _2352 = _2031;
                uint _2361;
                bool _2362;
                for (;;)
                {
                    _2361 = texelFetch(g_lightClassification, int((((_1916 << 5u) + (_1902 << 9u)) + (_2352 << 2u)) >> 2u)).x;
                    _2362 = _2361 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2362)
                    {
                        frontier_phi_99_pred = _2349;
                        frontier_phi_99_pred_1 = _2348;
                        frontier_phi_99_pred_2 = _2347;
                        frontier_phi_99_pred_3 = _2346;
                        frontier_phi_99_pred_4 = _2351;
                        frontier_phi_99_pred_5 = _2350;
                    }
                    else
                    {
                        float _2517;
                        float _2518;
                        float _2519;
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2530 = _2346;
                        float _2531 = _2347;
                        float _2532 = _2348;
                        float _2533 = _2349;
                        float _2534 = _2350;
                        float _2535 = _2351;
                        uint _2536 = _2361;
                        uint _2537;
                        vec4 _2562;
                        float _2563;
                        vec4 _2578;
                        vec3 _2590;
                        vec4 _2605;
                        vec4 _2620;
                        float _2666;
                        bool _2667;
                        for (;;)
                        {
                            uint _2547 = ((_2352 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2536));
                            _2537 = (_2536 + 4294967295u) & _2536;
                            uint _2549 = _2547 * 40u;
                            _2562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 3u)).x));
                            _2563 = _2562.w;
                            uint _2565 = (_2547 * 40u) + 4u;
                            _2578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2565 + 3u)).x));
                            uint _2580 = (_2547 * 40u) + 8u;
                            _2590 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x));
                            uint _2592 = (_2547 * 40u) + 16u;
                            _2605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 3u)).x));
                            uint _2607 = (_2547 * 40u) + 20u;
                            _2620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2607 + 3u)).x));
                            uint _2622 = (_2547 * 40u) + 24u;
                            vec4 _2635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2622 + 3u)).x));
                            uint _2641 = (_2547 * 40u) + 28u;
                            vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2641 + 3u)).x));
                            _2666 = fma(_1878, _2654.z, fma(_1877, _2654.y, _2654.x * _1876)) + _2654.w;
                            _2667 = !((fma(_1878, _2635.z, fma(_1877, _2635.y, _2635.x * _1876)) + _2635.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2667)
                            {
                                float _2694 = _2562.x - _1876;
                                float _2695 = _2562.y - _1877;
                                float _2696 = _2562.z - _1878;
                                float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                                float _2700 = inversesqrt(_2697);
                                float _2701 = _2700 * _2694;
                                float _2702 = _2700 * _2695;
                                float _2703 = _2700 * _2696;
                                float _2707 = 1.0 - (_2697 / (_2563 * _2563));
                                float _3594 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                                float _2708 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
                                float _2712 = sqrt(_2697) * _2578.w;
                                float _2714 = 1.39999997615814208984375 / (_2712 + 1.39999997615814208984375);
                                float _2715 = _2714 * _2714;
                                float _2716 = 1.0 - _2715;
                                float _2718 = (_2716 * dot(vec3(_2701, _2702, _2703), vec3(0.0))) + _2715;
                                float _2721 = _2712 * _2712;
                                float _2725 = (fma(_1878, _2605.z, fma(_1877, _2605.y, _2605.x * _1876)) + _2605.w) / _2666;
                                float _2726 = (fma(_1878, _2620.z, fma(_1877, _2620.y, _2620.x * _1876)) + _2620.w) / _2666;
                                float _2730 = 1.0 - dot(vec2(_2725, _2726), vec2(_2725, _2726));
                                float _3610 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                                float _2731 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
                                float _2732 = _2731 * (((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2708) / ((_2721 * 0.699999988079071044921875) + 1.0));
                                float _2742 = dot(vec3(0.0), vec3((-0.0) - (_1876 * _2184), (-0.0) - (_1877 * _2184), (-0.0) - (_1878 * _2184)));
                                float _3621 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                                float _2750 = (_2716 * dot(vec3(0.0), vec3(_2701, _2702, _2703))) + _2715;
                                float _3632 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2751 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
                                float _2755 = (0.5 / (((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) + 9.9999999392252902907785028219223e-09) + _2751)) * _2751;
                                float _3643 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                                float _2762 = (_2731 * _2708) * (((isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 3.1415927410125732421875) / ((_2721 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2732 * _2578.z;
                                frontier_phi_105_pred_1 = _2762 * _2590.x;
                                frontier_phi_105_pred_2 = _2762 * _2590.y;
                                frontier_phi_105_pred_3 = _2762 * _2590.z;
                                frontier_phi_105_pred_4 = _2732 * _2578.x;
                                frontier_phi_105_pred_5 = _2732 * _2578.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _2771 = frontier_phi_105_pred;
                            _2766 = frontier_phi_105_pred_1;
                            _2767 = frontier_phi_105_pred_2;
                            _2768 = frontier_phi_105_pred_3;
                            _2769 = frontier_phi_105_pred_4;
                            _2770 = frontier_phi_105_pred_5;
                            _2520 = _2769 + _2533;
                            _2521 = _2770 + _2534;
                            _2522 = _2771 + _2535;
                            _2517 = _2766 + _2530;
                            _2518 = _2767 + _2531;
                            _2519 = _2768 + _2532;
                            if (_2537 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2530 = _2517;
                                _2531 = _2518;
                                _2532 = _2519;
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2537;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2520;
                        frontier_phi_99_pred_1 = _2519;
                        frontier_phi_99_pred_2 = _2518;
                        frontier_phi_99_pred_3 = _2517;
                        frontier_phi_99_pred_4 = _2522;
                        frontier_phi_99_pred_5 = _2521;
                    }
                    _2166 = frontier_phi_99_pred;
                    _2164 = frontier_phi_99_pred_1;
                    _2162 = frontier_phi_99_pred_2;
                    _2160 = frontier_phi_99_pred_3;
                    _2170 = frontier_phi_99_pred_4;
                    _2168 = frontier_phi_99_pred_5;
                    uint _2353 = _2352 + 1u;
                    if (_2353 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2346 = _2160;
                        _2347 = _2162;
                        _2348 = _2164;
                        _2349 = _2166;
                        _2350 = _2168;
                        _2351 = _2170;
                        _2352 = _2353;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2170;
                frontier_phi_81_82_ladder_1 = _2166;
                frontier_phi_81_82_ladder_2 = _2164;
                frontier_phi_81_82_ladder_3 = _2162;
                frontier_phi_81_82_ladder_4 = _2160;
                frontier_phi_81_82_ladder_5 = _2168;
            }
            else
            {
                frontier_phi_81_82_ladder = _2024;
                frontier_phi_81_82_ladder_1 = _2020;
                frontier_phi_81_82_ladder_2 = _2018;
                frontier_phi_81_82_ladder_3 = _2016;
                frontier_phi_81_82_ladder_4 = _2014;
                frontier_phi_81_82_ladder_5 = _2022;
            }
            _2159 = frontier_phi_81_82_ladder_4;
            _2161 = frontier_phi_81_82_ladder_3;
            _2163 = frontier_phi_81_82_ladder_2;
            _2165 = frontier_phi_81_82_ladder_1;
            _2167 = frontier_phi_81_82_ladder_5;
            _2169 = frontier_phi_81_82_ladder;
        }
        float _2174 = isnan(1.0) ? _700 : (isnan(_700) ? 1.0 : min(_700, 1.0));
        _1936 = (_2174 * _2165) + _1712;
        _1938 = (_2174 * _2167) + _1713;
        _1940 = (_2174 * _2169) + _1714;
        _1942 = ((_2159 * 0.039999999105930328369140625) * _2174) + _1817;
        _1944 = ((_2161 * 0.039999999105930328369140625) * _2174) + _1818;
        _1946 = ((_2163 * 0.039999999105930328369140625) * _2174) + _1819;
    }
    else
    {
        _1936 = _1712;
        _1938 = _1713;
        _1940 = _1714;
        _1942 = _1817;
        _1944 = _1818;
        _1946 = _1819;
    }
    float _3659 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3670 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3681 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1963 = ((isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1936 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _700))) + ((_1942 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _1964 = ((isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1938 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _700))) + ((_1944 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    float _1965 = ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1940 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _700))) + ((_1946 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1404)) * cbPerFrame._m0[3u].x);
    uint _1969 = _674 + 6u;
    float _1977 = _660 / cbSceneParam._m0[86u].x;
    float _1978 = _661 / cbSceneParam._m0[86u].y;
    vec4 _1992 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1977, _1978, (log2((isnan(cbSceneParam._m0[77u].w) ? _647 : (isnan(_647) ? cbSceneParam._m0[77u].w : min(_647, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1994 = _1992.x;
    float _1995 = _1992.y;
    float _1996 = _1992.z;
    float _1997 = _1992.w;
    float _2077;
    float _2079;
    float _2081;
    float _2083;
    if (_647 > cbSceneParam._m0[78u].w)
    {
        float _2039 = isnan(_647) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _647 : min(cbSceneParam._m0[80u].w, _647));
        float _2040 = _2039 / _647;
        float _2051 = _2040 * _255;
        float _2052 = _256 * _2040;
        float _2053 = (-0.0) - _2052;
        float _2054 = _2040 * _257;
        float _2056 = (cbSceneParam._m0[77u].w * _2053) / _2039;
        float _2057 = _2056 + cbSceneParam._m0[79u].w;
        float _2058 = cbSceneParam._m0[79u].w - _2052;
        float _2064 = sqrt(((_2051 * _2051) + (_2052 * _2052)) + (_2054 * _2054));
        float _2067 = (1.0 - (cbSceneParam._m0[77u].w / _2039)) * _2064;
        float _2073 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2075 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2282;
        if (abs((_2053 - _2056) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2282 = ((((_2057 > 0.0) ? exp2(_2073 * _2057) : (2.0 - exp2(_2075 * _2057))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2067;
        }
        else
        {
            float _2217 = 1.0 / cbSceneParam._m0[80u].x;
            float _2218 = isnan(_2058) ? _2057 : (isnan(_2057) ? _2058 : max(_2057, _2058));
            float _2219 = isnan(_2058) ? _2057 : (isnan(_2057) ? _2058 : min(_2057, _2058));
            float _2228 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : min(_2218, 0.0));
            float _2229 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : min(_2219, 0.0));
            _2282 = ((abs(_2064 / _2053) * cbSceneParam._m0[80u].y) * ((((_2228 - _2229) * 2.0) - ((exp2(_2073 * (isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0)))) - exp2(_2073 * (isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))))) * _2217)) - ((exp2(_2075 * _2228) - exp2(_2075 * _2229)) * _2217))) + (_2067 * cbSceneParam._m0[80u].z);
        }
        vec4 _2284 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1977, _1978, 1.0), 0.0);
        float _2293 = exp2((_2282 * (-1.44269502162933349609375)) * (1.0 - _2284.w));
        float _2294 = log2(_2293);
        float _2310 = log2(_1997);
        _2077 = (exp2(_2310 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2294 * cbSceneParam._m0[78u].x)) * _2284.x) / cbSceneParam._m0[78u].x)) + _1994;
        _2079 = (exp2(_2310 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2294 * cbSceneParam._m0[78u].y)) * _2284.y) / cbSceneParam._m0[78u].y)) + _1995;
        _2081 = (exp2(_2310 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2294 * cbSceneParam._m0[78u].z)) * _2284.z) / cbSceneParam._m0[78u].z)) + _1996;
        _2083 = _2293 * _1997;
    }
    else
    {
        _2077 = _1994;
        _2079 = _1995;
        _2081 = _1996;
        _2083 = _1997;
    }
    float _2095 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2096 = _2095 == 3.0;
    float _2098 = log2(_2083);
    float _2105 = exp2(_2098 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
    float _2106 = exp2(_2098 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)));
    float _2107 = exp2(_2098 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
    float _2116 = (_2095 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2116 * (_2096 ? _2105 : (_2105 + (cbSceneParam._m0[72u].w * _2077)));
    SV_Target.y = _2116 * (_2096 ? _2106 : (_2106 + (cbSceneParam._m0[72u].w * _2079)));
    SV_Target.z = _2116 * (_2096 ? _2107 : (_2107 + (cbSceneParam._m0[72u].w * _2081)));
    SV_Target.w = cbInstanceData._m0[_1969].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1969].w;
}


