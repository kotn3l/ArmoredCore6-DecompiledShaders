#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1157;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    vec4 _611 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _613 = _611.x;
    vec4 _625 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _629 = _625.z;
    float _632 = (_625.x * 2.0) + (-1.0);
    float _633 = (_625.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3297 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _639 = sqrt(1.0 - (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))));
    float _640 = _629 * _288;
    float _647 = (cbMtdParam._m0[15u].w * ((_327 - _640) + ((_629 - _327) * _288))) + _640;
    float _651 = (cbMtdParam._m0[16u].x * _355) + _632;
    float _652 = (cbMtdParam._m0[16u].x * _356) + _633;
    float _655 = fma(_639, _197, fma(_652, _204, _651 * _190));
    float _658 = fma(_639, _198, fma(_652, _205, _651 * _191));
    float _661 = fma(_639, _199, fma(_652, _206, _651 * _192));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3308 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _669 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3330 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3341 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3352 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _673 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _694 = _261 * _693;
    float _695 = _262 * _693;
    float _696 = _263 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _726 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _729 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _744 = _742 + 9u;
    uint _745 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3363 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _757 = 1.0 - _673;
    float _758 = _754 * _757;
    float _759 = _755 * _757;
    float _760 = _756 * _757;
    float _765 = (_754 + (-0.039999999105930328369140625)) * _673;
    float _766 = (_755 + (-0.039999999105930328369140625)) * _673;
    float _767 = (_756 + (-0.039999999105930328369140625)) * _673;
    float _768 = _765 + 0.039999999105930328369140625;
    float _770 = _766 + 0.039999999105930328369140625;
    float _771 = _767 + 0.039999999105930328369140625;
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _702, cbSceneParam._m0[86u].y * _703));
    float _783 = _780.x * TEXCOORD.z;
    float _784 = dot(vec3(_666, _667, _668), vec3(_694, _695, _696));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _666) - _694;
    float _792 = (_787 * _667) - _695;
    float _793 = (_787 * _668) - _696;
    float _797 = abs(dot(vec3(_694, _695, _696), vec3(_666, _667, _668)));
    float _3396 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_669);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _818 = (1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _819 = _812 * _799;
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _883 = fma(_855, cbModelParam._m0[26u].z, fma(_851, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _847));
        float _887 = fma(_855, cbModelParam._m0[27u].z, fma(_851, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _847));
        float _891 = fma(_855, cbModelParam._m0[28u].z, fma(_851, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _847));
        float _914 = _847 + _666;
        float _915 = _851 + _667;
        float _916 = _855 + _668;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _883;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _887;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _891;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_883 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_887 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_891 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_666, _667, _668), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3444 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_666, _667, _668), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3477 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_666, _667, _668), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3488 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3499 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3510 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1158 = _986;
        _1159 = _985;
        _1160 = _997;
        _1161 = _996;
        _1162 = _995;
        _1163 = _1007;
        _1164 = _1006;
        _1165 = _1005;
        _1166 = _1020;
        _1167 = _1019;
        _1168 = _1018;
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _1157;
        _1158 = _1157;
        _1159 = _1157;
        _1160 = _1157;
        _1161 = _1157;
        _1162 = _1157;
        _1163 = _1157;
        _1164 = _1157;
        _1165 = _1157;
        _1166 = _1157;
        _1167 = _1157;
        _1168 = _1157;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1197 = fma(_855, cbModelParam._m0[30u].z, fma(_851, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847));
        float _1201 = fma(_855, cbModelParam._m0[31u].z, fma(_851, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847));
        float _1205 = fma(_855, cbModelParam._m0[32u].z, fma(_851, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847));
        float _1228 = _847 + _666;
        float _1229 = _851 + _667;
        float _1230 = _855 + _668;
        float _1240 = fma(_1230, cbModelParam._m0[30u].z, fma(_1229, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1228)) - _1197;
        float _1241 = fma(_1230, cbModelParam._m0[31u].z, fma(_1229, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1228)) - _1201;
        float _1242 = fma(_1230, cbModelParam._m0[32u].z, fma(_1229, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1228)) - _1205;
        float _1246 = inversesqrt(dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242)));
        float _1259 = ((_1246 * _1240) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1197 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1246 * _1241) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1201 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1246 * _1242) / cbModelParam._m0[35u].z) + ((((((_1205 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1296 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1263.x + (-0.5));
        float _1298 = _1296 * (_1263.y + (-0.5));
        float _1299 = _1296 * (_1263.z + (-0.5));
        float _1306 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1270.x + (-0.5));
        float _1308 = _1306 * (_1270.y + (-0.5));
        float _1309 = _1306 * (_1270.z + (-0.5));
        float _1316 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1277.x + (-0.5));
        float _1318 = _1316 * (_1277.y + (-0.5));
        float _1319 = _1316 * (_1277.z + (-0.5));
        float _1326 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1284.x + (-0.5));
        float _1328 = _1326 * (_1284.y + (-0.5));
        float _1329 = _1326 * (_1284.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_666, _667, _668), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3573 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1360 + 1.0))) + _1365) * _1330;
        float _1375 = _1298 * 0.5;
        float _1376 = _1308 * 0.5;
        float _1377 = _1318 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_666, _667, _668), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3606 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1402 + 1.0))) + _1407) * _1331;
        float _1417 = _1299 * 0.5;
        float _1418 = _1309 * 0.5;
        float _1419 = _1319 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_666, _667, _668), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _3617 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3628 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _3639 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * (_1444 + 1.0))) + _1449) * _1332;
        _1466 = _1299;
        _1467 = _1298;
        _1468 = _1297;
        _1469 = _1309;
        _1470 = _1308;
        _1471 = _1307;
        _1472 = _1319;
        _1473 = _1318;
        _1474 = _1317;
        _1475 = _1332;
        _1476 = _1331;
        _1477 = _1330;
        _1478 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1479 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
    }
    else
    {
        _1466 = _1157;
        _1467 = _1157;
        _1468 = _1157;
        _1469 = _1157;
        _1470 = _1157;
        _1471 = _1157;
        _1472 = _1157;
        _1473 = _1157;
        _1474 = _1157;
        _1475 = _1157;
        _1476 = _1157;
        _1477 = _1157;
        _1478 = 0.0;
        _1479 = 0.0;
        _1480 = 0.0;
    }
    float _1490 = (cbModelParam._m0[1u].x * (_1478 - _1169)) + _1169;
    float _1491 = (cbModelParam._m0[1u].x * (_1479 - _1170)) + _1170;
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1171)) + _1171;
    float _1513 = fma(_1492, cbSceneParam._m0[89u].z, fma(_1491, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1492, cbSceneParam._m0[90u].z, fma(_1491, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1492, cbSceneParam._m0[91u].z, fma(_1491, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1490));
    float _1534 = _791 * 0.5;
    float _1535 = _792 * 0.5;
    float _1536 = _793 * 0.5;
    float _1537 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1540 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1467, _1470, _1473, _1476));
    float _1543 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1466, _1469, _1472, _1475));
    float _1577;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1550 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1156, _1160, _1163, _1166));
        float _1554 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1558 = dot(vec4(_1534, _1535, _1536, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1565 = dot(vec4(cbModelParam._m0[39u]), vec4(_1534, _1535, _1536, 1.0));
        _1577 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1565) ? 0.0 : (isnan(0.0) ? _1565 : max(0.0, _1565))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1577 = 1.0;
    }
    float _1588;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1579 = dot(vec4(cbModelParam._m0[40u]), vec4(_1534, _1535, _1536, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)), isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1579) ? 0.0 : (isnan(0.0) ? _1579 : max(0.0, _1579))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1592 = (_1588 * cbModelParam._m0[1u].x) + (_1577 * (1.0 - cbModelParam._m0[1u].x));
    float _1602 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1603 = isnan(_1602) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1602 : min(cbModelParam._m0[25u].z, _1602));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1651 = fma(_855, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _847)) + cbModelParam._m0[13u].w;
        float _1655 = fma(_855, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _847)) + cbModelParam._m0[14u].w;
        float _1659 = fma(_855, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _847)) + cbModelParam._m0[15u].w;
        float _1662 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1665 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1668 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1696;
        if (_1662 > 0.0)
        {
            _1696 = abs((1.0 - _1651) / _1662);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1651 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1696 = frontier_phi_38_36_ladder;
        }
        float _2054;
        if (_1665 > 0.0)
        {
            _2054 = abs((1.0 - _1655) / _1665);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1655 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2054 = frontier_phi_47_43_ladder;
        }
        float _2370;
        if (_1668 > 0.0)
        {
            _2370 = abs((1.0 - _1659) / _1668);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1659 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2370 = frontier_phi_61_54_ladder;
        }
        float _2372 = isnan(_2054) ? _1696 : (isnan(_1696) ? _2054 : min(_1696, _2054));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1662) + _1651;
        float _2378 = (_2373 * _1665) + _1655;
        float _2379 = (_2373 * _1668) + _1659;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2380;
        float _2383 = _2380 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2379 > _2383) || ((_2379 < _2381) || ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 < _2381) || (_2377 > _2383))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1603);
            frontier_phi_37_61_ladder = _2505.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2505.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2505.x * cbModelParam._m0[1u].y;
        }
        _1684 = frontier_phi_37_61_ladder_2;
        _1686 = frontier_phi_37_61_ladder_1;
        _1688 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1603);
        _1684 = _1672.x * cbModelParam._m0[1u].y;
        _1686 = _1672.y * cbModelParam._m0[1u].y;
        _1688 = _1672.z * cbModelParam._m0[1u].y;
    }
    float _1692 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1692 : min(cbModelParam._m0[25u].w, _1692));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1745 = fma(_855, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _847)) + cbModelParam._m0[21u].w;
        float _1749 = fma(_855, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _847)) + cbModelParam._m0[22u].w;
        float _1753 = fma(_855, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _847)) + cbModelParam._m0[23u].w;
        float _1756 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1759 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1762 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _2059;
        if (_1756 > 0.0)
        {
            _2059 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2059 = frontier_phi_49_45_ladder;
        }
        float _2396;
        if (_1759 > 0.0)
        {
            _2396 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2396 = frontier_phi_63_56_ladder;
        }
        float _2565;
        if (_1762 > 0.0)
        {
            _2565 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2565 = frontier_phi_77_72_ladder;
        }
        float _2567 = isnan(_2396) ? _2059 : (isnan(_2059) ? _2396 : min(_2059, _2396));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1756) + _1745;
        float _2573 = (_2568 * _1759) + _1749;
        float _2574 = (_2568 * _1762) + _1753;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2807 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1693);
            frontier_phi_46_77_ladder = _2807.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2807.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2807.x * cbModelParam._m0[1u].z;
        }
        _1781 = frontier_phi_46_77_ladder_2;
        _1783 = frontier_phi_46_77_ladder_1;
        _1785 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1765 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1693);
        _1781 = _1765.x * cbModelParam._m0[1u].z;
        _1783 = _1765.y * cbModelParam._m0[1u].z;
        _1785 = _1765.z * cbModelParam._m0[1u].z;
    }
    float _1798 = (((_818 * _768) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1781 - _1684)) + _1684);
    float _1800 = (((_818 * _770) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1783 - _1686)) + _1686);
    float _1802 = (((_818 * _771) + _819) * _783) * ((cbModelParam._m0[1u].w * (_1785 - _1688)) + _1688);
    float _1805 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1800, cbSceneParam._m0[89u].y, _1798 * cbSceneParam._m0[89u].x));
    float _1808 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1800, cbSceneParam._m0[90u].y, _1798 * cbSceneParam._m0[90u].x));
    float _1811 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1800, cbSceneParam._m0[91u].y, _1798 * cbSceneParam._m0[91u].x));
    uvec4 _1821 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _1823 = _1821.x * 14u;
    uint _1824 = _1823 + 13u;
    float _1829 = _783 + (-1.0);
    float _1832 = (cbLight._m0[_1824].x * _1829) + 1.0;
    float _1833 = (cbLight._m0[_1824].y * _1829) + 1.0;
    uint _1834 = _1823 + 5u;
    float _1840 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1844 = _1823 + 4u;
    float _1850 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
    uint _1854 = _1823 | 1u;
    float _1865 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_666, _667, _668));
    float _1868 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_666, _667, _668));
    float _3775 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _3786 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1873 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1875 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * 0.3183098733425140380859375;
    float _1882 = ((cbLight._m0[_1834].x * _1840) * _1875) + ((cbLight._m0[_1844].x * _1850) * _1873);
    float _1883 = ((_1840 * cbLight._m0[_1834].y) * _1875) + ((_1850 * cbLight._m0[_1844].y) * _1873);
    float _1884 = ((_1840 * cbLight._m0[_1834].z) * _1875) + ((_1850 * cbLight._m0[_1844].z) * _1873);
    uint _1886 = _1823 + 8u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _669) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1823].x + _694;
    float _1902 = cbLight._m0[_1823].y + _695;
    float _1903 = cbLight._m0[_1823].z + _696;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1823].xyz));
    float _3797 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1915 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _1916 = dot(vec3(_666, _667, _668), vec3(_1908, _1909, _1910));
    float _3819 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1908, _1909, _1910));
    float _3830 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1900 * _1900;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0)))) * 5.0);
    float _1937 = 0.959999978542327880859375 - _765;
    float _1939 = 0.959999978542327880859375 - _766;
    float _1940 = 0.959999978542327880859375 - _767;
    float _1947 = 1.0 - _1900;
    float _1958 = (0.5 / (((_1915 * ((_1914 * _1947) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _1947) + _1900) * _1914))) * _1914;
    float _3841 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    uint _1971 = _1823 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _669) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1854].x + _694;
    float _1985 = cbLight._m0[_1854].y + _695;
    float _1986 = cbLight._m0[_1854].z + _696;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1854].xyz));
    float _3852 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
    float _1998 = dot(vec3(_666, _667, _668), vec3(_1991, _1992, _1993));
    float _3863 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1991, _1992, _1993));
    float _3874 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2017 = exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0);
    float _2024 = 1.0 - _1983;
    float _2034 = (0.5 / (((_1915 * ((_1997 * _2024) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2024) + _1983) * _1997))) * _1997;
    float _3885 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2036 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2046 = (((((_2017 * _1937) + _768) * cbLight._m0[_1971].x) * _2036) * _1840) + (((((_1936 * _1937) + _768) * cbLight._m0[_1886].x) * _1960) * _1850);
    float _2047 = (((((_2017 * _1939) + _770) * cbLight._m0[_1971].y) * _2036) * _1840) + (((((_1936 * _1939) + _770) * cbLight._m0[_1886].y) * _1960) * _1850);
    float _2048 = (((((_2017 * _1940) + _771) * cbLight._m0[_1971].z) * _2036) * _1840) + (((((_1936 * _1940) + _771) * cbLight._m0[_1886].z) * _1960) * _1850);
    float _2163;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    float _2173;
    if (_1821.y == 0u)
    {
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2104 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2103;
        float _2105 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2103;
        float _2106 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2103;
        uvec4 _2118 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2119 = _2118.x;
        uint _2130 = uint((float(_2118.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _2119))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _2119)));
        float _2140 = (log2(_2106 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2141 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        uint _2144 = uint(isnan(14.0) ? _2141 : (isnan(_2141) ? 14.0 : min(_2141, 14.0)));
        uvec4 _2149 = texelFetch(g_lightClusterGridBuffer, int(((_2144 << 2u) + (_2130 << 6u)) >> 2u));
        uint _2150 = _2149.x;
        uint _2151 = _2118.z;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((((1u << ((_2151 >> 4u) & 15u)) + 4294967295u) & _2150) == 0u) || ((_2151 & 240u) == 0u))
        {
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
        }
        else
        {
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            uint _2439 = 0u;
            uint _2448;
            bool _2449;
            for (;;)
            {
                _2448 = texelFetch(g_lightClassification, int((((_2144 << 5u) + (_2130 << 9u)) + (_2439 << 2u)) >> 2u)).x;
                _2449 = _2448 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2449)
                {
                    frontier_phi_74_pred = _2436;
                    frontier_phi_74_pred_1 = _2435;
                    frontier_phi_74_pred_2 = _2434;
                    frontier_phi_74_pred_3 = _2433;
                    frontier_phi_74_pred_4 = _2437;
                    frontier_phi_74_pred_5 = _2438;
                }
                else
                {
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    uint _2614;
                    _2608 = _2433;
                    _2609 = _2434;
                    _2610 = _2435;
                    _2611 = _2436;
                    _2612 = _2437;
                    _2613 = _2438;
                    _2614 = _2448;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    for (;;)
                    {
                        uint _2618 = uint(findLSB(_2614)) + (_2439 << 5u);
                        uint _2615 = (_2614 + 4294967295u) & _2614;
                        uint _2620 = _2618 * 48u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2640 = (_2618 * 48u) + 4u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2659 = (_2618 * 48u) + 8u;
                        vec3 _2670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x));
                        float _2674 = _2634.x - _2104;
                        float _2675 = _2634.y - _2105;
                        float _2676 = _2634.z - _2106;
                        float _2677 = dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676));
                        float _2680 = inversesqrt(_2677);
                        float _2681 = _2680 * _2674;
                        float _2682 = _2680 * _2675;
                        float _2683 = _2680 * _2676;
                        float _2684 = dot(vec3(_723, _726, _729), vec3(_2681, _2682, _2683));
                        float _2689 = 1.0 - (_2677 * _2634.w);
                        float _3906 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2691 = sqrt(_2677) * _2653.w;
                        float _2694 = 1.39999997615814208984375 / (_2691 + 1.39999997615814208984375);
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2684) + _2695;
                        float _2701 = _2691 * _2691;
                        float _2705 = ((isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))) * _2690) / ((_2701 * 0.699999988079071044921875) + 1.0);
                        float _2709 = (-0.0) - _2104;
                        float _2710 = (-0.0) - _2105;
                        float _2711 = (-0.0) - _2106;
                        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2726 = exp2(log2(1.0 / ((_2701 * 3.5) + 5.0)) * 0.25);
                        float _2727 = 1.0 - _799;
                        float _2734 = sqrt(1.0 - ((1.0 - (_2727 * _2727)) * (1.0 - (_2726 * _2726))));
                        float _2735 = _2734 * _2734;
                        float _2736 = _2735 * _2735;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2747 = dot(vec3(_723, _726, _729), vec3(_2716, _2717, _2718));
                        float _3922 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2751 = dot(vec3(_723, _726, _729), vec3(_2743 * _2737, _2743 * _2738, _2743 * _2739));
                        float _3933 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2758 = ((_2754 * _2754) * (_2736 + (-1.0))) + 1.0;
                        float _2759 = _2694 * _2735;
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2684) + _2760;
                        float _3944 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                        float _2765 = 1.0 - _2735;
                        float _2775 = (0.5 / (((_2764 * ((_2750 * _2765) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2765) + _2735) * _2750))) * _2764;
                        float _3955 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2786 = (((_2736 * 3.1415927410125732421875) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) / ((_2758 * _2758) * ((_2701 * 2.1991131305694580078125) + 3.141590118408203125))) * _2690;
                        _2517 = (_2705 * _2653.x) + _2611;
                        _2518 = (_2705 * _2653.y) + _2612;
                        _2519 = (_2705 * _2653.z) + _2613;
                        _2514 = (_2786 * _2670.x) + _2608;
                        _2515 = (_2786 * _2670.y) + _2609;
                        _2516 = (_2786 * _2670.z) + _2610;
                        if (_2615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2608 = _2514;
                            _2609 = _2515;
                            _2610 = _2516;
                            _2611 = _2517;
                            _2612 = _2518;
                            _2613 = _2519;
                            _2614 = _2615;
                        }
                    }
                    frontier_phi_74_pred = _2517;
                    frontier_phi_74_pred_1 = _2516;
                    frontier_phi_74_pred_2 = _2515;
                    frontier_phi_74_pred_3 = _2514;
                    frontier_phi_74_pred_4 = _2518;
                    frontier_phi_74_pred_5 = _2519;
                }
                _2264 = frontier_phi_74_pred;
                _2262 = frontier_phi_74_pred_1;
                _2260 = frontier_phi_74_pred_2;
                _2258 = frontier_phi_74_pred_3;
                _2266 = frontier_phi_74_pred_4;
                _2268 = frontier_phi_74_pred_5;
                uint _2440 = _2439 + 1u;
                if (_2440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2433 = _2258;
                    _2434 = _2260;
                    _2435 = _2262;
                    _2436 = _2264;
                    _2437 = _2266;
                    _2438 = _2268;
                    _2439 = _2440;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
        }
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.z;
        uint _2274 = (_2272 >> 8u) & 15u;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((4294967295u << _2274) & _2150) == 0u)
        {
            _2401 = _2257;
            _2403 = _2259;
            _2405 = _2261;
            _2407 = _2263;
            _2409 = _2265;
            _2411 = _2267;
        }
        else
        {
            float _2426 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
            float _2427 = _2426 * _2104;
            float _2428 = _2426 * _2105;
            float _2429 = _2426 * _2106;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2274 < ((_2272 >> 12u) & 15u))
            {
                float _2402;
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2591 = _2257;
                float _2592 = _2259;
                float _2593 = _2261;
                float _2594 = _2263;
                float _2595 = _2265;
                float _2596 = _2267;
                uint _2597 = _2274;
                uint _2606;
                bool _2607;
                for (;;)
                {
                    _2606 = texelFetch(g_lightClassification, int((((_2144 << 5u) + (_2130 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                    _2607 = _2606 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2607)
                    {
                        frontier_phi_83_pred = _2594;
                        frontier_phi_83_pred_1 = _2593;
                        frontier_phi_83_pred_2 = _2592;
                        frontier_phi_83_pred_3 = _2591;
                        frontier_phi_83_pred_4 = _2596;
                        frontier_phi_83_pred_5 = _2595;
                    }
                    else
                    {
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _2825 = _2591;
                        float _2826 = _2592;
                        float _2827 = _2593;
                        float _2828 = _2594;
                        float _2829 = _2595;
                        float _2830 = _2596;
                        uint _2831 = _2606;
                        uint _2832;
                        vec4 _2857;
                        float _2858;
                        vec4 _2873;
                        vec3 _2885;
                        vec4 _2900;
                        vec4 _2915;
                        float _2961;
                        bool _2962;
                        for (;;)
                        {
                            uint _2842 = ((_2597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2831));
                            _2832 = (_2831 + 4294967295u) & _2831;
                            uint _2844 = _2842 * 40u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            _2858 = _2857.w;
                            uint _2860 = (_2842 * 40u) + 4u;
                            _2873 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2860)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2860 + 3u)).x));
                            uint _2875 = (_2842 * 40u) + 8u;
                            _2885 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2875)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2875 + 2u)).x));
                            uint _2887 = (_2842 * 40u) + 16u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2902 = (_2842 * 40u) + 20u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2917 = (_2842 * 40u) + 24u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            uint _2936 = (_2842 * 40u) + 28u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2961 = fma(_2106, _2949.z, fma(_2105, _2949.y, _2949.x * _2104)) + _2949.w;
                            _2962 = !((fma(_2106, _2930.z, fma(_2105, _2930.y, _2930.x * _2104)) + _2930.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2962)
                            {
                                float _2989 = _2857.x - _2104;
                                float _2990 = _2857.y - _2105;
                                float _2991 = _2857.z - _2106;
                                float _2992 = dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991));
                                float _2995 = inversesqrt(_2992);
                                float _2996 = _2995 * _2989;
                                float _2997 = _2995 * _2990;
                                float _2998 = _2995 * _2991;
                                float _3002 = 1.0 - (_2992 / (_2858 * _2858));
                                float _3966 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _3007 = sqrt(_2992) * _2873.w;
                                float _3009 = 1.39999997615814208984375 / (_3007 + 1.39999997615814208984375);
                                float _3010 = _3009 * _3009;
                                float _3013 = ((1.0 - _3010) * dot(vec3(_2996, _2997, _2998), vec3(_723, _726, _729))) + _3010;
                                float _3016 = _3007 * _3007;
                                float _3020 = (fma(_2106, _2900.z, fma(_2105, _2900.y, _2900.x * _2104)) + _2900.w) / _2961;
                                float _3021 = (fma(_2106, _2915.z, fma(_2105, _2915.y, _2915.x * _2104)) + _2915.w) / _2961;
                                float _3025 = 1.0 - dot(vec2(_3020, _3021), vec2(_3020, _3021));
                                float _3982 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _3027 = _3026 * (((isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0))) * _3003) / ((_3016 * 0.699999988079071044921875) + 1.0));
                                float _3039 = exp2(log2(1.0 / ((_3016 * 3.5) + 5.0)) * 0.25);
                                float _3040 = 1.0 - _799;
                                float _3047 = sqrt(1.0 - ((1.0 - (_3040 * _3040)) * (1.0 - (_3039 * _3039))));
                                float _3048 = _3047 * _3047;
                                float _3049 = _3048 * _3048;
                                float _3050 = _2996 - _2427;
                                float _3051 = _2997 - _2428;
                                float _3052 = _2998 - _2429;
                                float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                                float _3060 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2427, (-0.0) - _2428, (-0.0) - _2429));
                                float _3993 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3063 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _3064 = dot(vec3(_723, _726, _729), vec3(_3056 * _3050, _3056 * _3051, _3056 * _3052));
                                float _4004 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3067 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _3071 = ((_3067 * _3067) * (_3049 + (-1.0))) + 1.0;
                                float _3072 = _3009 * _3048;
                                float _3073 = _3072 * _3072;
                                float _3079 = ((1.0 - _3073) * dot(vec3(_723, _726, _729), vec3(_2996, _2997, _2998))) + _3073;
                                float _4015 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3080 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _3081 = 1.0 - _3048;
                                float _3091 = (0.5 / (((_3080 * ((_3063 * _3081) + _3048)) + 9.9999999392252902907785028219223e-09) + (((_3080 * _3081) + _3048) * _3063))) * _3080;
                                float _4026 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3101 = (_3026 * _3003) * (((_3049 * 3.1415927410125732421875) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) / ((_3071 * _3071) * ((_3016 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3027 * _2873.x;
                                frontier_phi_89_pred_1 = _3101 * _2885.z;
                                frontier_phi_89_pred_2 = _3101 * _2885.y;
                                frontier_phi_89_pred_3 = _3101 * _2885.x;
                                frontier_phi_89_pred_4 = _3027 * _2873.z;
                                frontier_phi_89_pred_5 = _3027 * _2873.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3108 = frontier_phi_89_pred;
                            _3107 = frontier_phi_89_pred_1;
                            _3106 = frontier_phi_89_pred_2;
                            _3105 = frontier_phi_89_pred_3;
                            _3110 = frontier_phi_89_pred_4;
                            _3109 = frontier_phi_89_pred_5;
                            _2815 = _3108 + _2828;
                            _2816 = _3109 + _2829;
                            _2817 = _3110 + _2830;
                            _2812 = _3105 + _2825;
                            _2813 = _3106 + _2826;
                            _2814 = _3107 + _2827;
                            if (_2832 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2832;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2815;
                        frontier_phi_83_pred_1 = _2814;
                        frontier_phi_83_pred_2 = _2813;
                        frontier_phi_83_pred_3 = _2812;
                        frontier_phi_83_pred_4 = _2817;
                        frontier_phi_83_pred_5 = _2816;
                    }
                    _2408 = frontier_phi_83_pred;
                    _2406 = frontier_phi_83_pred_1;
                    _2404 = frontier_phi_83_pred_2;
                    _2402 = frontier_phi_83_pred_3;
                    _2412 = frontier_phi_83_pred_4;
                    _2410 = frontier_phi_83_pred_5;
                    uint _2598 = _2597 + 1u;
                    if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2591 = _2402;
                        _2592 = _2404;
                        _2593 = _2406;
                        _2594 = _2408;
                        _2595 = _2410;
                        _2596 = _2412;
                        _2597 = _2598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2412;
                frontier_phi_65_66_ladder_1 = _2410;
                frontier_phi_65_66_ladder_2 = _2406;
                frontier_phi_65_66_ladder_3 = _2404;
                frontier_phi_65_66_ladder_4 = _2408;
                frontier_phi_65_66_ladder_5 = _2402;
            }
            else
            {
                frontier_phi_65_66_ladder = _2267;
                frontier_phi_65_66_ladder_1 = _2265;
                frontier_phi_65_66_ladder_2 = _2261;
                frontier_phi_65_66_ladder_3 = _2259;
                frontier_phi_65_66_ladder_4 = _2263;
                frontier_phi_65_66_ladder_5 = _2257;
            }
            _2401 = frontier_phi_65_66_ladder_5;
            _2403 = frontier_phi_65_66_ladder_3;
            _2405 = frontier_phi_65_66_ladder_2;
            _2407 = frontier_phi_65_66_ladder_4;
            _2409 = frontier_phi_65_66_ladder_1;
            _2411 = frontier_phi_65_66_ladder;
        }
        float _2416 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2163 = (_2416 * _2407) + _1882;
        _2165 = (_2416 * _2409) + _1883;
        _2167 = (_2416 * _2411) + _1884;
        _2169 = ((_2401 * _768) * _2416) + _2046;
        _2171 = ((_2403 * _770) * _2416) + _2047;
        _2173 = ((_2405 * _771) * _2416) + _2048;
    }
    else
    {
        _2163 = _1882;
        _2165 = _1883;
        _2167 = _1884;
        _2169 = _2046;
        _2171 = _2047;
        _2173 = _2048;
    }
    uint _2179 = _744 + uint(cbMatDynParam._m0[0u].w);
    float _4042 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4053 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4064 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2204 = (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2163 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _783))) + ((_2169 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2179].x * ((_587 * ((_543 - _468) - (_543 * _288))) + _468));
    float _2206 = ((cbInstanceData._m0[_2179].y * ((_587 * ((_544 - _469) - (_544 * _288))) + _469)) + ((_2171 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_2165 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _783)));
    float _2208 = ((cbInstanceData._m0[_2179].z * ((_587 * ((_545 - _470) - (_545 * _288))) + _470)) + ((_2173 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1592)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2167 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _783)));
    uint _2212 = _742 + 6u;
    float _2220 = _702 / cbSceneParam._m0[86u].x;
    float _2221 = _703 / cbSceneParam._m0[86u].y;
    vec4 _2235 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2237 = _2235.x;
    float _2238 = _2235.y;
    float _2239 = _2235.z;
    float _2240 = _2235.w;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _2282 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _2283 = _2282 / _689;
        float _2294 = _2283 * _261;
        float _2295 = _262 * _2283;
        float _2296 = (-0.0) - _2295;
        float _2297 = _2283 * _263;
        float _2299 = (cbSceneParam._m0[77u].w * _2296) / _2282;
        float _2300 = _2299 + cbSceneParam._m0[79u].w;
        float _2301 = cbSceneParam._m0[79u].w - _2295;
        float _2307 = sqrt(((_2294 * _2294) + (_2295 * _2295)) + (_2297 * _2297));
        float _2310 = (1.0 - (cbSceneParam._m0[77u].w / _2282)) * _2307;
        float _2316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2527;
        if (abs((_2296 - _2299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2527 = ((((_2300 > 0.0) ? exp2(_2316 * _2300) : (2.0 - exp2(_2318 * _2300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2310;
        }
        else
        {
            float _2462 = 1.0 / cbSceneParam._m0[80u].x;
            float _2463 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : max(_2300, _2301));
            float _2464 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : min(_2300, _2301));
            float _2473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : min(_2463, 0.0));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            _2527 = ((abs(_2307 / _2296) * cbSceneParam._m0[80u].y) * ((((_2473 - _2474) * 2.0) - ((exp2(_2316 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)))) - exp2(_2316 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0))))) * _2462)) - ((exp2(_2318 * _2473) - exp2(_2318 * _2474)) * _2462))) + (_2310 * cbSceneParam._m0[80u].z);
        }
        vec4 _2529 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, 1.0), 0.0);
        float _2538 = exp2((_2527 * (-1.44269502162933349609375)) * (1.0 - _2529.w));
        float _2539 = log2(_2538);
        float _2555 = log2(_2240);
        _2320 = (exp2(_2555 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].x)) * _2529.x) / cbSceneParam._m0[78u].x)) + _2237;
        _2322 = (exp2(_2555 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].y)) * _2529.y) / cbSceneParam._m0[78u].y)) + _2238;
        _2324 = (exp2(_2555 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2539 * cbSceneParam._m0[78u].z)) * _2529.z) / cbSceneParam._m0[78u].z)) + _2239;
        _2326 = _2538 * _2240;
    }
    else
    {
        _2320 = _2237;
        _2322 = _2238;
        _2324 = _2239;
        _2326 = _2240;
    }
    float _2338 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2339 = _2338 == 3.0;
    float _2340 = log2(_2326);
    float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0)));
    float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0)));
    float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0)));
    float _2358 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2358 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2320)));
    SV_Target.y = _2358 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2322)));
    SV_Target.z = _2358 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2324)));
    SV_Target.w = cbInstanceData._m0[_2212].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2212].w;
}


