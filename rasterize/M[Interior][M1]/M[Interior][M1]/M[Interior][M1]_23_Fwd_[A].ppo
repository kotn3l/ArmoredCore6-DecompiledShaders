#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _428;
float _3264;
float _3265;
float _3266;
float _3267;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = _427;
            frontier_phi_3_2_ladder_1 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _428;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder;
        _429 = frontier_phi_3_2_ladder_2;
        _431 = frontier_phi_3_2_ladder_1;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    vec4 _506 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _508 = _506.x;
    vec4 _520 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _524 = _520.z;
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3276 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))));
    float _535 = _524 * _290;
    float _545 = (cbMtdParam._m0[15u].w * ((_347 - _535) + ((_524 - _347) * _290))) + _535;
    float _553 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _527;
    float _554 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _528;
    float _557 = fma(_534, _199, fma(_554, _206, _553 * _192));
    float _560 = fma(_534, _200, fma(_554, _207, _553 * _193));
    float _563 = fma(_534, _201, fma(_554, _208, _553 * _194));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3287 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _571 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3309 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3320 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3331 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _575 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _595 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _596 = _263 * _595;
    float _597 = _264 * _595;
    float _598 = _265 * _595;
    vec4 _603 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _605 = _603.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _785 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _791 = (cbMatDynParam._m0[5u].x * _785) + cbMatDynParam._m0[5u].y;
        float _3342 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _796 = (cbMatDynParam._m0[5u].z * _785) + cbMatDynParam._m0[5u].w;
        float _3353 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0))) - _792)) + _792) < ((_605 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _623 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _624 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _643 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _646 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _649 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _662 = uint(roundEven(NORMAL.w)) * 13u;
    uint _663 = _662 + 9u;
    uint _664 = _663 + uint(cbMatDynParam._m0[0u].w);
    float _670 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_664].x;
    float _671 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_664].y;
    float _672 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_664].z;
    float _3364 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _673 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _3375 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    float _676 = 1.0 - _575;
    float _677 = _673 * _676;
    float _678 = _674 * _676;
    float _679 = _675 * _676;
    float _684 = (_673 + (-0.039999999105930328369140625)) * _575;
    float _685 = (_674 + (-0.039999999105930328369140625)) * _575;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _575;
    float _687 = _684 + 0.039999999105930328369140625;
    float _689 = _685 + 0.039999999105930328369140625;
    float _690 = _686 + 0.039999999105930328369140625;
    vec4 _699 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _623, cbSceneParam._m0[86u].y * _624));
    float _702 = _699.x * TEXCOORD.z;
    float _703 = dot(vec3(_568, _569, _570), vec3(_596, _597, _598));
    float _706 = _703 * 2.0;
    float _710 = (_706 * _568) - _596;
    float _711 = (_706 * _569) - _597;
    float _712 = (_706 * _570) - _598;
    float _716 = abs(dot(vec3(_596, _597, _598), vec3(_568, _569, _570)));
    float _3397 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _718 = sqrt(_571);
    float _731 = exp2((_718 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_718 * 3.0));
    float _737 = (1.0 - _731) * ((_718 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _738 = _731 * _718;
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _834 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _838 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _862 = _766 + _568;
        float _863 = _770 + _569;
        float _864 = _774 + _570;
        float _874 = fma(_864, cbModelParam._m0[26u].z, fma(_863, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _862)) - _830;
        float _875 = fma(_864, cbModelParam._m0[27u].z, fma(_863, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _862)) - _834;
        float _876 = fma(_864, cbModelParam._m0[28u].z, fma(_863, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _862)) - _838;
        float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
        float _893 = ((_880 * _874) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _894 = ((_880 * _875) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_880 * _876) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_893, _894, _895), 0.0);
        float _932 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_898.x + (-0.5));
        float _934 = _932 * (_898.y + (-0.5));
        float _935 = _932 * (_898.z + (-0.5));
        float _942 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_905.x + (-0.5));
        float _944 = _942 * (_905.y + (-0.5));
        float _945 = _942 * (_905.z + (-0.5));
        float _952 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_912.x + (-0.5));
        float _954 = _952 * (_912.y + (-0.5));
        float _955 = _952 * (_912.z + (-0.5));
        float _962 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_919.x + (-0.5));
        float _964 = _962 * (_919.y + (-0.5));
        float _965 = _962 * (_919.z + (-0.5));
        float _966 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = _933 * 0.5;
        float _970 = _943 * 0.5;
        float _971 = _953 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _986 = (dot(vec3(_568, _569, _570), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _996 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_966 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3445 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_998 + 1.0))) + _1003) * _966;
        float _1013 = _934 * 0.5;
        float _1014 = _944 * 0.5;
        float _1015 = _954 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_568, _569, _570), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3478 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1040 + 1.0))) + _1045) * _967;
        float _1055 = _935 * 0.5;
        float _1056 = _945 * 0.5;
        float _1057 = _955 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(_568, _569, _570), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3511 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1082 + 1.0))) + _1087) * _968;
        _1104 = _935;
        _1105 = _934;
        _1106 = _933;
        _1107 = _945;
        _1108 = _944;
        _1109 = _943;
        _1110 = _955;
        _1111 = _954;
        _1112 = _953;
        _1113 = _968;
        _1114 = _967;
        _1115 = _966;
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1117 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
    }
    else
    {
        _1104 = _428;
        _1105 = _428;
        _1106 = _428;
        _1107 = _428;
        _1108 = _428;
        _1109 = _428;
        _1110 = _428;
        _1111 = _428;
        _1112 = _428;
        _1113 = _428;
        _1114 = _428;
        _1115 = _428;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1147 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1151 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1155 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1178 = _766 + _568;
        float _1179 = _770 + _569;
        float _1180 = _774 + _570;
        float _1190 = fma(_1180, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178)) - _1147;
        float _1191 = fma(_1180, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178)) - _1151;
        float _1192 = fma(_1180, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178)) - _1155;
        float _1196 = inversesqrt(dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192)));
        float _1209 = ((_1196 * _1190) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1147 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1196 * _1191) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1151 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1211 = ((_1196 * _1192) / cbModelParam._m0[35u].z) + ((((((_1155 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1209, _1210, _1211), 0.0);
        float _1246 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1213.x + (-0.5));
        float _1248 = _1246 * (_1213.y + (-0.5));
        float _1249 = _1246 * (_1213.z + (-0.5));
        float _1256 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1220.x + (-0.5));
        float _1258 = _1256 * (_1220.y + (-0.5));
        float _1259 = _1256 * (_1220.z + (-0.5));
        float _1266 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1227.x + (-0.5));
        float _1268 = _1266 * (_1227.y + (-0.5));
        float _1269 = _1266 * (_1227.z + (-0.5));
        float _1276 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1234.x + (-0.5));
        float _1278 = _1276 * (_1234.y + (-0.5));
        float _1279 = _1276 * (_1234.z + (-0.5));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = _1247 * 0.5;
        float _1284 = _1257 * 0.5;
        float _1285 = _1267 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_568, _569, _570), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3574 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1310 + 1.0))) + _1315) * _1280;
        float _1325 = _1248 * 0.5;
        float _1326 = _1258 * 0.5;
        float _1327 = _1268 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_568, _569, _570), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3607 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1352 + 1.0))) + _1357) * _1281;
        float _1367 = _1249 * 0.5;
        float _1368 = _1259 * 0.5;
        float _1369 = _1269 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_568, _569, _570), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3640 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1394 + 1.0))) + _1399) * _1282;
        _1416 = _1249;
        _1417 = _1248;
        _1418 = _1247;
        _1419 = _1259;
        _1420 = _1258;
        _1421 = _1257;
        _1422 = _1269;
        _1423 = _1268;
        _1424 = _1267;
        _1425 = _1282;
        _1426 = _1281;
        _1427 = _1280;
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
    }
    else
    {
        _1416 = _428;
        _1417 = _428;
        _1418 = _428;
        _1419 = _428;
        _1420 = _428;
        _1421 = _428;
        _1422 = _428;
        _1423 = _428;
        _1424 = _428;
        _1425 = _428;
        _1426 = _428;
        _1427 = _428;
        _1428 = 0.0;
        _1429 = 0.0;
        _1430 = 0.0;
    }
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1116)) + _1116;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1117)) + _1117;
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1463 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1440));
    float _1484 = _710 * 0.5;
    float _1485 = _711 * 0.5;
    float _1486 = _712 * 0.5;
    float _1487 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1490 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1493 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1527;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1500 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1504 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1105, _1108, _1111, _1114));
        float _1508 = dot(vec4(_1484, _1485, _1486, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1515 = dot(vec4(cbModelParam._m0[39u]), vec4(_1484, _1485, _1486, 1.0));
        _1527 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1515) ? 0.0 : (isnan(0.0) ? _1515 : max(0.0, _1515))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1527 = 1.0;
    }
    float _1538;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1529 = dot(vec4(cbModelParam._m0[40u]), vec4(_1484, _1485, _1486, 1.0));
        _1538 = dot(vec3(isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)), isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1529) ? 0.0 : (isnan(0.0) ? _1529 : max(0.0, _1529))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1538 = 1.0;
    }
    float _1542 = (_1538 * cbModelParam._m0[1u].x) + (_1527 * (1.0 - cbModelParam._m0[1u].x));
    float _1552 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1553 = isnan(_1552) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1552 : min(cbModelParam._m0[25u].z, _1552));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1601 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1605 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1609 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1612 = fma(_712, cbModelParam._m0[13u].z, fma(_711, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710));
        float _1615 = fma(_712, cbModelParam._m0[14u].z, fma(_711, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710));
        float _1618 = fma(_712, cbModelParam._m0[15u].z, fma(_711, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710));
        float _1646;
        if (_1612 > 0.0)
        {
            _1646 = abs((1.0 - _1601) / _1612);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1601 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1646 = frontier_phi_29_27_ladder;
        }
        float _2008;
        if (_1615 > 0.0)
        {
            _2008 = abs((1.0 - _1605) / _1615);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1605 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2008 = frontier_phi_38_34_ladder;
        }
        float _2332;
        if (_1618 > 0.0)
        {
            _2332 = abs((1.0 - _1609) / _1618);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1609 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2332 = frontier_phi_52_45_ladder;
        }
        float _2334 = isnan(_2008) ? _1646 : (isnan(_1646) ? _2008 : min(_1646, _2008));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1612) + _1601;
        float _2340 = (_2335 * _1615) + _1605;
        float _2341 = (_2335 * _1618) + _1609;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2343 = (-1.0) - _2342;
        float _2345 = _2342 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2341 > _2345) || ((_2341 < _2343) || ((_2340 > _2345) || ((_2340 < _2343) || ((_2339 < _2343) || (_2339 > _2345))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2483 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2341, cbModelParam._m0[9u].z, fma(_2340, cbModelParam._m0[9u].y, _2339 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2341, cbModelParam._m0[10u].z, fma(_2340, cbModelParam._m0[10u].y, _2339 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2341, cbModelParam._m0[11u].z, fma(_2340, cbModelParam._m0[11u].y, _2339 * cbModelParam._m0[11u].x))), _1553);
            frontier_phi_28_52_ladder = _2483.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2483.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2483.x * cbModelParam._m0[1u].y;
        }
        _1634 = frontier_phi_28_52_ladder_2;
        _1636 = frontier_phi_28_52_ladder_1;
        _1638 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1622 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_710, _711, _712), _1553);
        _1634 = _1622.x * cbModelParam._m0[1u].y;
        _1636 = _1622.y * cbModelParam._m0[1u].y;
        _1638 = _1622.z * cbModelParam._m0[1u].y;
    }
    float _1642 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1643 = isnan(_1642) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1642 : min(cbModelParam._m0[25u].w, _1642));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1698 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1702 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1706 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1709 = fma(_712, cbModelParam._m0[21u].z, fma(_711, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710));
        float _1712 = fma(_712, cbModelParam._m0[22u].z, fma(_711, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710));
        float _1715 = fma(_712, cbModelParam._m0[23u].z, fma(_711, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710));
        float _2013;
        if (_1709 > 0.0)
        {
            _2013 = abs((1.0 - _1698) / _1709);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1698 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2013 = frontier_phi_40_36_ladder;
        }
        float _2358;
        if (_1712 > 0.0)
        {
            _2358 = abs((1.0 - _1702) / _1712);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1702 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2358 = frontier_phi_54_47_ladder;
        }
        float _2548;
        if (_1715 > 0.0)
        {
            _2548 = abs((1.0 - _1706) / _1715);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1706 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2548 = frontier_phi_72_65_ladder;
        }
        float _2550 = isnan(_2358) ? _2013 : (isnan(_2013) ? _2358 : min(_2013, _2358));
        float _2551 = isnan(_2548) ? _2550 : (isnan(_2550) ? _2548 : min(_2550, _2548));
        float _2555 = (_2551 * _1709) + _1698;
        float _2556 = (_2551 * _1712) + _1702;
        float _2557 = (_2551 * _1715) + _1706;
        float _2558 = _2551 * 9.9999997473787516355514526367188e-05;
        float _2559 = (-1.0) - _2558;
        float _2561 = _2558 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2557 > _2561) || ((_2557 < _2559) || ((_2556 > _2561) || ((_2556 < _2559) || ((_2555 < _2559) || (_2555 > _2561))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2557, cbModelParam._m0[17u].z, fma(_2556, cbModelParam._m0[17u].y, _2555 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2557, cbModelParam._m0[18u].z, fma(_2556, cbModelParam._m0[18u].y, _2555 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2557, cbModelParam._m0[19u].z, fma(_2556, cbModelParam._m0[19u].y, _2555 * cbModelParam._m0[19u].x))), _1643);
            frontier_phi_37_72_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1734 = frontier_phi_37_72_ladder_2;
        _1736 = frontier_phi_37_72_ladder_1;
        _1738 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1718 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_710, _711, _712), _1643);
        _1734 = _1718.x * cbModelParam._m0[1u].z;
        _1736 = _1718.y * cbModelParam._m0[1u].z;
        _1738 = _1718.z * cbModelParam._m0[1u].z;
    }
    float _1751 = (((_737 * _687) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1734 - _1634)) + _1634);
    float _1753 = (((_737 * _689) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1755 = (((_737 * _690) + _738) * _702) * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1758 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1751 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1751 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, _1751 * cbSceneParam._m0[91u].x));
    uvec4 _1774 = floatBitsToUint(cbInstanceData._m0[_662 + 5u]);
    uint _1776 = _1774.x * 14u;
    uint _1777 = _1776 + 13u;
    float _1782 = _702 + (-1.0);
    float _1785 = (cbLight._m0[_1777].x * _1782) + 1.0;
    float _1786 = (cbLight._m0[_1777].y * _1782) + 1.0;
    uint _1787 = _1776 + 5u;
    float _1793 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1797 = _1776 + 4u;
    float _1804 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1808 = _1776 | 1u;
    float _1819 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_568, _569, _570));
    float _1822 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_568, _569, _570));
    float _3776 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _3787 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1827 = (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * 0.3183098733425140380859375;
    float _1829 = (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * 0.3183098733425140380859375;
    float _1836 = ((cbLight._m0[_1787].x * _1793) * _1829) + ((cbLight._m0[_1797].x * _1804) * _1827);
    float _1837 = ((_1793 * cbLight._m0[_1787].y) * _1829) + ((_1804 * cbLight._m0[_1797].y) * _1827);
    float _1838 = ((_1793 * cbLight._m0[_1787].z) * _1829) + ((_1804 * cbLight._m0[_1797].z) * _1827);
    uint _1840 = _1776 + 8u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _571) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1776].x + _596;
    float _1856 = cbLight._m0[_1776].y + _597;
    float _1857 = cbLight._m0[_1776].z + _598;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1776].xyz));
    float _3798 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _3809 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _1869 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _1870 = dot(vec3(_568, _569, _570), vec3(_1862, _1863, _1864));
    float _3820 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1874 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1862, _1863, _1864));
    float _3831 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1878 = _1854 * _1854;
    float _1882 = ((_1873 * _1873) * (_1878 + (-1.0))) + 1.0;
    float _1890 = exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0);
    float _1891 = 0.959999978542327880859375 - _684;
    float _1893 = 0.959999978542327880859375 - _685;
    float _1894 = 0.959999978542327880859375 - _686;
    float _1901 = 1.0 - _1854;
    float _1912 = (0.5 / (((_1869 * ((_1868 * _1901) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1901) + _1854) * _1868))) * _1868;
    float _3842 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1878 / ((_1882 * _1882) * 3.141590118408203125));
    uint _1925 = _1776 + 9u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1808].w)) * _571) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1808].x + _596;
    float _1939 = cbLight._m0[_1808].y + _597;
    float _1940 = cbLight._m0[_1808].z + _598;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1808].xyz));
    float _3853 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1952 = dot(vec3(_568, _569, _570), vec3(_1945, _1946, _1947));
    float _3864 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1955 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1956 = dot(vec3(cbLight._m0[_1808].xyz), vec3(_1945, _1946, _1947));
    float _3875 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1960 = _1937 * _1937;
    float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
    float _1971 = exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0);
    float _1978 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1869 * ((_1951 * _1978) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1869 * _1978) + _1937) * _1951))) * _1951;
    float _3886 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
    float _2000 = (((((_1971 * _1891) + _687) * cbLight._m0[_1925].x) * _1990) * _1793) + (((((_1890 * _1891) + _687) * cbLight._m0[_1840].x) * _1914) * _1804);
    float _2001 = (((((_1971 * _1893) + _689) * cbLight._m0[_1925].y) * _1990) * _1793) + (((((_1890 * _1893) + _689) * cbLight._m0[_1840].y) * _1914) * _1804);
    float _2002 = (((((_1971 * _1894) + _690) * cbLight._m0[_1925].z) * _1990) * _1793) + (((((_1890 * _1894) + _690) * cbLight._m0[_1840].z) * _1914) * _1804);
    float _2117;
    float _2119;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_1774.y == 0u)
    {
        float _2057 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2057;
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2057;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2057;
        uvec4 _2072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2073 = _2072.x;
        uint _2084 = uint((float(_2072.y) * floor(float(uint(cbSceneParam._m0[85u].y * _624) / _2073))) + floor(float(uint(cbSceneParam._m0[85u].x * _623) / _2073)));
        float _2094 = (log2(_2060 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2095 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
        uint _2098 = uint(isnan(14.0) ? _2095 : (isnan(_2095) ? 14.0 : min(_2095, 14.0)));
        uvec4 _2103 = texelFetch(g_lightClusterGridBuffer, int(((_2098 << 2u) + (_2084 << 6u)) >> 2u));
        uint _2104 = _2103.x;
        uint _2105 = _2072.z;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        if (((((1u << ((_2105 >> 4u) & 15u)) + 4294967295u) & _2104) == 0u) || ((_2105 & 240u) == 0u))
        {
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
            _2221 = 0.0;
        }
        else
        {
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2222;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            float _2398 = 0.0;
            float _2399 = 0.0;
            float _2400 = 0.0;
            uint _2401 = 0u;
            uint _2410;
            bool _2411;
            for (;;)
            {
                _2410 = texelFetch(g_lightClassification, int((((_2098 << 5u) + (_2084 << 9u)) + (_2401 << 2u)) >> 2u)).x;
                _2411 = _2410 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2411)
                {
                    frontier_phi_67_pred = _2398;
                    frontier_phi_67_pred_1 = _2397;
                    frontier_phi_67_pred_2 = _2396;
                    frontier_phi_67_pred_3 = _2395;
                    frontier_phi_67_pred_4 = _2399;
                    frontier_phi_67_pred_5 = _2400;
                }
                else
                {
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    uint _2597;
                    _2591 = _2395;
                    _2592 = _2396;
                    _2593 = _2397;
                    _2594 = _2398;
                    _2595 = _2399;
                    _2596 = _2400;
                    _2597 = _2410;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    for (;;)
                    {
                        uint _2601 = uint(findLSB(_2597)) + (_2401 << 5u);
                        uint _2598 = (_2597 + 4294967295u) & _2597;
                        uint _2603 = _2601 * 48u;
                        vec4 _2617 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2603)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2603 + 3u)).x));
                        uint _2623 = (_2601 * 48u) + 4u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2642 = (_2601 * 48u) + 8u;
                        vec3 _2653 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x));
                        float _2657 = _2617.x - _2058;
                        float _2658 = _2617.y - _2059;
                        float _2659 = _2617.z - _2060;
                        float _2660 = dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659));
                        float _2663 = inversesqrt(_2660);
                        float _2664 = _2663 * _2657;
                        float _2665 = _2663 * _2658;
                        float _2666 = _2663 * _2659;
                        float _2667 = dot(vec3(_643, _646, _649), vec3(_2664, _2665, _2666));
                        float _2672 = 1.0 - (_2660 * _2617.w);
                        float _3907 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2673 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2674 = sqrt(_2660) * _2636.w;
                        float _2677 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                        float _2678 = _2677 * _2677;
                        float _2681 = ((1.0 - _2678) * _2667) + _2678;
                        float _2684 = _2674 * _2674;
                        float _2688 = ((isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0))) * _2673) / ((_2684 * 0.699999988079071044921875) + 1.0);
                        float _2692 = (-0.0) - _2058;
                        float _2693 = (-0.0) - _2059;
                        float _2694 = (-0.0) - _2060;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2699 = _2698 * _2692;
                        float _2700 = _2698 * _2693;
                        float _2701 = _2698 * _2694;
                        float _2709 = exp2(log2(1.0 / ((_2684 * 3.5) + 5.0)) * 0.25);
                        float _2710 = 1.0 - _718;
                        float _2717 = sqrt(1.0 - ((1.0 - (_2710 * _2710)) * (1.0 - (_2709 * _2709))));
                        float _2718 = _2717 * _2717;
                        float _2719 = _2718 * _2718;
                        float _2720 = _2699 + _2664;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
                        float _2730 = dot(vec3(_643, _646, _649), vec3(_2699, _2700, _2701));
                        float _3923 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2734 = dot(vec3(_643, _646, _649), vec3(_2726 * _2720, _2726 * _2721, _2726 * _2722));
                        float _3934 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2737 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
                        float _2741 = ((_2737 * _2737) * (_2719 + (-1.0))) + 1.0;
                        float _2742 = _2677 * _2718;
                        float _2743 = _2742 * _2742;
                        float _2746 = ((1.0 - _2743) * _2667) + _2743;
                        float _3945 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                        float _2748 = 1.0 - _2718;
                        float _2758 = (0.5 / (((_2747 * ((_2733 * _2748) + _2718)) + 9.9999999392252902907785028219223e-09) + (((_2747 * _2748) + _2718) * _2733))) * _2747;
                        float _3956 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2769 = (((_2719 * 3.1415927410125732421875) * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)))) / ((_2741 * _2741) * ((_2684 * 2.1991131305694580078125) + 3.141590118408203125))) * _2673;
                        _2495 = (_2688 * _2636.x) + _2594;
                        _2496 = (_2688 * _2636.y) + _2595;
                        _2497 = (_2688 * _2636.z) + _2596;
                        _2492 = (_2769 * _2653.x) + _2591;
                        _2493 = (_2769 * _2653.y) + _2592;
                        _2494 = (_2769 * _2653.z) + _2593;
                        if (_2598 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2591 = _2492;
                            _2592 = _2493;
                            _2593 = _2494;
                            _2594 = _2495;
                            _2595 = _2496;
                            _2596 = _2497;
                            _2597 = _2598;
                        }
                    }
                    frontier_phi_67_pred = _2495;
                    frontier_phi_67_pred_1 = _2494;
                    frontier_phi_67_pred_2 = _2493;
                    frontier_phi_67_pred_3 = _2492;
                    frontier_phi_67_pred_4 = _2496;
                    frontier_phi_67_pred_5 = _2497;
                }
                _2218 = frontier_phi_67_pred;
                _2216 = frontier_phi_67_pred_1;
                _2214 = frontier_phi_67_pred_2;
                _2212 = frontier_phi_67_pred_3;
                _2220 = frontier_phi_67_pred_4;
                _2222 = frontier_phi_67_pred_5;
                uint _2402 = _2401 + 1u;
                if (_2402 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2395 = _2212;
                    _2396 = _2214;
                    _2397 = _2216;
                    _2398 = _2218;
                    _2399 = _2220;
                    _2400 = _2222;
                    _2401 = _2402;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
            _2221 = _2222;
        }
        uvec4 _2225 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2226 = _2225.z;
        uint _2228 = (_2226 >> 8u) & 15u;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((4294967295u << _2228) & _2104) == 0u)
        {
            _2363 = _2211;
            _2365 = _2213;
            _2367 = _2215;
            _2369 = _2217;
            _2371 = _2219;
            _2373 = _2221;
        }
        else
        {
            float _2388 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
            float _2389 = _2388 * _2058;
            float _2390 = _2388 * _2059;
            float _2391 = _2388 * _2060;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2228 < ((_2226 >> 12u) & 15u))
            {
                float _2364;
                float _2366;
                float _2368;
                float _2370;
                float _2372;
                float _2374;
                float _2574 = _2211;
                float _2575 = _2213;
                float _2576 = _2215;
                float _2577 = _2217;
                float _2578 = _2219;
                float _2579 = _2221;
                uint _2580 = _2228;
                uint _2589;
                bool _2590;
                for (;;)
                {
                    _2589 = texelFetch(g_lightClassification, int((((_2098 << 5u) + (_2084 << 9u)) + (_2580 << 2u)) >> 2u)).x;
                    _2590 = _2589 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2590)
                    {
                        frontier_phi_81_pred = _2577;
                        frontier_phi_81_pred_1 = _2576;
                        frontier_phi_81_pred_2 = _2575;
                        frontier_phi_81_pred_3 = _2574;
                        frontier_phi_81_pred_4 = _2579;
                        frontier_phi_81_pred_5 = _2578;
                    }
                    else
                    {
                        float _2804;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _2817 = _2574;
                        float _2818 = _2575;
                        float _2819 = _2576;
                        float _2820 = _2577;
                        float _2821 = _2578;
                        float _2822 = _2579;
                        uint _2823 = _2589;
                        uint _2824;
                        vec4 _2849;
                        float _2850;
                        vec4 _2865;
                        vec3 _2877;
                        vec4 _2892;
                        vec4 _2907;
                        float _2953;
                        bool _2954;
                        for (;;)
                        {
                            uint _2834 = ((_2580 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2823));
                            _2824 = (_2823 + 4294967295u) & _2823;
                            uint _2836 = _2834 * 40u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2850 = _2849.w;
                            uint _2852 = (_2834 * 40u) + 4u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2834 * 40u) + 8u;
                            _2877 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x));
                            uint _2879 = (_2834 * 40u) + 16u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2894 = (_2834 * 40u) + 20u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2909 = (_2834 * 40u) + 24u;
                            vec4 _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            uint _2928 = (_2834 * 40u) + 28u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2953 = fma(_2060, _2941.z, fma(_2059, _2941.y, _2941.x * _2058)) + _2941.w;
                            _2954 = !((fma(_2060, _2922.z, fma(_2059, _2922.y, _2922.x * _2058)) + _2922.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2954)
                            {
                                float _2981 = _2849.x - _2058;
                                float _2982 = _2849.y - _2059;
                                float _2983 = _2849.z - _2060;
                                float _2984 = dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983));
                                float _2987 = inversesqrt(_2984);
                                float _2988 = _2987 * _2981;
                                float _2989 = _2987 * _2982;
                                float _2990 = _2987 * _2983;
                                float _2994 = 1.0 - (_2984 / (_2850 * _2850));
                                float _3967 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                                float _2995 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _2999 = sqrt(_2984) * _2865.w;
                                float _3001 = 1.39999997615814208984375 / (_2999 + 1.39999997615814208984375);
                                float _3002 = _3001 * _3001;
                                float _3005 = ((1.0 - _3002) * dot(vec3(_2988, _2989, _2990), vec3(_643, _646, _649))) + _3002;
                                float _3008 = _2999 * _2999;
                                float _3012 = (fma(_2060, _2892.z, fma(_2059, _2892.y, _2892.x * _2058)) + _2892.w) / _2953;
                                float _3013 = (fma(_2060, _2907.z, fma(_2059, _2907.y, _2907.x * _2058)) + _2907.w) / _2953;
                                float _3017 = 1.0 - dot(vec2(_3012, _3013), vec2(_3012, _3013));
                                float _3983 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3018 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3019 = _3018 * (((isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0))) * _2995) / ((_3008 * 0.699999988079071044921875) + 1.0));
                                float _3031 = exp2(log2(1.0 / ((_3008 * 3.5) + 5.0)) * 0.25);
                                float _3032 = 1.0 - _718;
                                float _3039 = sqrt(1.0 - ((1.0 - (_3032 * _3032)) * (1.0 - (_3031 * _3031))));
                                float _3040 = _3039 * _3039;
                                float _3041 = _3040 * _3040;
                                float _3042 = _2988 - _2389;
                                float _3043 = _2989 - _2390;
                                float _3044 = _2990 - _2391;
                                float _3048 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
                                float _3052 = dot(vec3(_643, _646, _649), vec3((-0.0) - _2389, (-0.0) - _2390, (-0.0) - _2391));
                                float _3994 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3055 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3056 = dot(vec3(_643, _646, _649), vec3(_3048 * _3042, _3048 * _3043, _3048 * _3044));
                                float _4005 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3059 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                                float _3063 = ((_3059 * _3059) * (_3041 + (-1.0))) + 1.0;
                                float _3064 = _3001 * _3040;
                                float _3065 = _3064 * _3064;
                                float _3071 = ((1.0 - _3065) * dot(vec3(_643, _646, _649), vec3(_2988, _2989, _2990))) + _3065;
                                float _4016 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3072 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3073 = 1.0 - _3040;
                                float _3083 = (0.5 / (((_3072 * ((_3055 * _3073) + _3040)) + 9.9999999392252902907785028219223e-09) + (((_3072 * _3073) + _3040) * _3055))) * _3072;
                                float _4027 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3093 = (_3018 * _2995) * (((_3041 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_3063 * _3063) * ((_3008 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3019 * _2865.x;
                                frontier_phi_87_pred_1 = _3093 * _2877.z;
                                frontier_phi_87_pred_2 = _3093 * _2877.y;
                                frontier_phi_87_pred_3 = _3093 * _2877.x;
                                frontier_phi_87_pred_4 = _3019 * _2865.z;
                                frontier_phi_87_pred_5 = _3019 * _2865.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3100 = frontier_phi_87_pred;
                            _3099 = frontier_phi_87_pred_1;
                            _3098 = frontier_phi_87_pred_2;
                            _3097 = frontier_phi_87_pred_3;
                            _3102 = frontier_phi_87_pred_4;
                            _3101 = frontier_phi_87_pred_5;
                            _2807 = _3100 + _2820;
                            _2808 = _3101 + _2821;
                            _2809 = _3102 + _2822;
                            _2804 = _3097 + _2817;
                            _2805 = _3098 + _2818;
                            _2806 = _3099 + _2819;
                            if (_2824 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2806;
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2824;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2807;
                        frontier_phi_81_pred_1 = _2806;
                        frontier_phi_81_pred_2 = _2805;
                        frontier_phi_81_pred_3 = _2804;
                        frontier_phi_81_pred_4 = _2809;
                        frontier_phi_81_pred_5 = _2808;
                    }
                    _2370 = frontier_phi_81_pred;
                    _2368 = frontier_phi_81_pred_1;
                    _2366 = frontier_phi_81_pred_2;
                    _2364 = frontier_phi_81_pred_3;
                    _2374 = frontier_phi_81_pred_4;
                    _2372 = frontier_phi_81_pred_5;
                    uint _2581 = _2580 + 1u;
                    if (_2581 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2574 = _2364;
                        _2575 = _2366;
                        _2576 = _2368;
                        _2577 = _2370;
                        _2578 = _2372;
                        _2579 = _2374;
                        _2580 = _2581;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2374;
                frontier_phi_56_57_ladder_1 = _2372;
                frontier_phi_56_57_ladder_2 = _2370;
                frontier_phi_56_57_ladder_3 = _2366;
                frontier_phi_56_57_ladder_4 = _2364;
                frontier_phi_56_57_ladder_5 = _2368;
            }
            else
            {
                frontier_phi_56_57_ladder = _2221;
                frontier_phi_56_57_ladder_1 = _2219;
                frontier_phi_56_57_ladder_2 = _2217;
                frontier_phi_56_57_ladder_3 = _2213;
                frontier_phi_56_57_ladder_4 = _2211;
                frontier_phi_56_57_ladder_5 = _2215;
            }
            _2363 = frontier_phi_56_57_ladder_4;
            _2365 = frontier_phi_56_57_ladder_3;
            _2367 = frontier_phi_56_57_ladder_5;
            _2369 = frontier_phi_56_57_ladder_2;
            _2371 = frontier_phi_56_57_ladder_1;
            _2373 = frontier_phi_56_57_ladder;
        }
        float _2378 = isnan(1.0) ? _702 : (isnan(_702) ? 1.0 : min(_702, 1.0));
        _2117 = (_2378 * _2369) + _1836;
        _2119 = (_2378 * _2371) + _1837;
        _2121 = (_2378 * _2373) + _1838;
        _2123 = ((_2363 * _687) * _2378) + _2000;
        _2125 = ((_2365 * _689) * _2378) + _2001;
        _2127 = ((_2367 * _690) * _2378) + _2002;
    }
    else
    {
        _2117 = _1836;
        _2119 = _1837;
        _2121 = _1838;
        _2123 = _2000;
        _2125 = _2001;
        _2127 = _2002;
    }
    uint _2133 = _663 + uint(cbMatDynParam._m0[0u].w);
    float _4043 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4054 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4065 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _2158 = (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2117 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _702))) + ((_2123 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2133].x * (_486 - (_486 * _290)));
    float _2160 = ((cbInstanceData._m0[_2133].y * (_487 - (_487 * _290))) + ((_2125 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_2119 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _702)));
    float _2162 = ((cbInstanceData._m0[_2133].z * (_488 - (_488 * _290))) + ((_2127 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1542)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2121 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _702)));
    float _2163 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2164 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    uint _2166 = _662 + 6u;
    float _2174 = _623 / cbSceneParam._m0[86u].x;
    float _2175 = _624 / cbSceneParam._m0[86u].y;
    vec4 _2189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2191 = _2189.x;
    float _2192 = _2189.y;
    float _2193 = _2189.z;
    float _2194 = _2189.w;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2236 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2237 = _2236 / _591;
        float _2248 = _2237 * _263;
        float _2249 = _264 * _2237;
        float _2250 = (-0.0) - _2249;
        float _2251 = _2237 * _265;
        float _2253 = (cbSceneParam._m0[77u].w * _2250) / _2236;
        float _2254 = _2253 + cbSceneParam._m0[79u].w;
        float _2255 = cbSceneParam._m0[79u].w - _2249;
        float _2261 = sqrt(((_2248 * _2248) + (_2249 * _2249)) + (_2251 * _2251));
        float _2264 = (1.0 - (cbSceneParam._m0[77u].w / _2236)) * _2261;
        float _2270 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2272 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2505;
        if (abs((_2250 - _2253) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2505 = ((((_2254 > 0.0) ? exp2(_2270 * _2254) : (2.0 - exp2(_2272 * _2254))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2264;
        }
        else
        {
            float _2424 = 1.0 / cbSceneParam._m0[80u].x;
            float _2425 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : max(_2254, _2255));
            float _2426 = isnan(_2255) ? _2254 : (isnan(_2254) ? _2255 : min(_2254, _2255));
            float _2435 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : min(_2425, 0.0));
            float _2436 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : min(_2426, 0.0));
            _2505 = ((abs(_2261 / _2250) * cbSceneParam._m0[80u].y) * ((((_2435 - _2436) * 2.0) - ((exp2(_2270 * (isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0)))) - exp2(_2270 * (isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0))))) * _2424)) - ((exp2(_2272 * _2435) - exp2(_2272 * _2436)) * _2424))) + (_2264 * cbSceneParam._m0[80u].z);
        }
        vec4 _2507 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2174, _2175, 1.0), 0.0);
        float _2516 = exp2((_2505 * (-1.44269502162933349609375)) * (1.0 - _2507.w));
        float _2517 = log2(_2516);
        float _2533 = log2(_2194);
        _2274 = (exp2(_2533 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].x)) * _2507.x) / cbSceneParam._m0[78u].x)) + _2191;
        _2276 = (exp2(_2533 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].y)) * _2507.y) / cbSceneParam._m0[78u].y)) + _2192;
        _2278 = (exp2(_2533 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2517 * cbSceneParam._m0[78u].z)) * _2507.z) / cbSceneParam._m0[78u].z)) + _2193;
        _2280 = _2516 * _2194;
    }
    else
    {
        _2274 = _2191;
        _2276 = _2192;
        _2278 = _2193;
        _2280 = _2194;
    }
    bool _2543;
    vec4 _2290;
    vec4 _2312;
    float _2314;
    float _2318;
    float _2319;
    float _2320;
    float _2321;
    bool _2331;
    for (;;)
    {
        _2290 = cbMatDynParam._m0[0u];
        float _2292 = roundEven(_2290.y);
        bool _2293 = _2292 == 3.0;
        float _2294 = log2(_2280);
        float _2301 = exp2(_2294 * cbSceneParam._m0[78u].x) * _2163;
        float _2302 = exp2(_2294 * cbSceneParam._m0[78u].y) * _2164;
        float _2303 = exp2(_2294 * cbSceneParam._m0[78u].z) * _2165;
        float _2310 = _605 + (-0.5);
        _2312 = cbMtdParam._m0[1u];
        _2314 = _2312.y * _2310;
        float _2317 = (_2292 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2318 = _2317 * (_2293 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2274)));
        _2319 = _2317 * (_2293 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2276)));
        _2320 = _2317 * (_2293 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2278)));
        _2321 = _2310 * 0.999000012874603271484375;
        _2331 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2331)
        {
            if ((cbInstanceData._m0[_662 + 7u].x + _2321) < 0.5)
            {
                _2543 = true;
                break;
            }
        }
        uint _2459 = _663 + uint(_2290.w);
        if ((cbInstanceData._m0[_2459].w < 1.0) && ((cbInstanceData._m0[_2459].w + _2321) < 0.5))
        {
            _2543 = true;
            break;
        }
        if ((_2314 + 1.0) < _2312.x)
        {
            _2543 = true;
            break;
        }
        _2543 = false;
        break;
    }
    float _2774;
    if (_2543)
    {
        discard_state = true;
        _2774 = 0.0;
    }
    else
    {
        _2774 = cbInstanceData._m0[_2166].w;
    }
    SV_Target.x = _2318;
    SV_Target.y = _2319;
    SV_Target.z = _2320;
    SV_Target.w = _2774;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2166].w;
    discard_exit();
}


