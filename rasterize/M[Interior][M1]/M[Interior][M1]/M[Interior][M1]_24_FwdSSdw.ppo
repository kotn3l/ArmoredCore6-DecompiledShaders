#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1039;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _472 = 0.5 - (_288 * 0.5);
    float _479 = ((((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) - _301) * _472) + _301;
    float _480 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) - _303) * _472) + _303;
    float _481 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) - _305) * _472) + _305;
    vec4 _493 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _495 = _493.x;
    vec4 _507 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _511 = _507.z;
    float _514 = (_507.x * 2.0) + (-1.0);
    float _515 = (_507.y * 2.0) + (-1.0);
    float _516 = dot(vec2(_514, _515), vec2(_514, _515));
    float _3144 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _521 = sqrt(1.0 - (isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0))));
    float _522 = _511 * _288;
    float _529 = (cbMtdParam._m0[15u].w * ((_327 - _522) + ((_511 - _327) * _288))) + _522;
    float _533 = (cbMtdParam._m0[16u].x * _355) + _514;
    float _534 = (cbMtdParam._m0[16u].x * _356) + _515;
    float _537 = fma(_521, _197, fma(_534, _204, _533 * _190));
    float _540 = fma(_521, _198, fma(_534, _205, _533 * _191));
    float _543 = fma(_521, _199, fma(_534, _206, _533 * _192));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3155 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _551 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
    float _3166 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3177 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3188 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3199 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _555 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _575 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _576 = _261 * _575;
    float _577 = _262 * _575;
    float _578 = _263 * _575;
    float _584 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _585 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _605 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _608 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _611 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _624 = uint(roundEven(NORMAL.w)) * 13u;
    uint _627 = (_624 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _633 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0)))) * cbInstanceData._m0[_627].x;
    float _634 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0)))) * cbInstanceData._m0[_627].y;
    float _635 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0)))) * cbInstanceData._m0[_627].z;
    float _3210 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
    float _3221 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
    float _3232 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
    float _639 = 1.0 - _555;
    float _640 = _636 * _639;
    float _641 = _637 * _639;
    float _642 = _638 * _639;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _555;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _555;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _555;
    float _650 = _647 + 0.039999999105930328369140625;
    float _652 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    vec4 _662 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _584, cbSceneParam._m0[86u].y * _585));
    float _665 = _662.x * TEXCOORD.z;
    float _666 = dot(vec3(_548, _549, _550), vec3(_576, _577, _578));
    float _669 = _666 * 2.0;
    float _673 = (_669 * _548) - _576;
    float _674 = (_669 * _549) - _577;
    float _675 = (_669 * _550) - _578;
    float _679 = abs(dot(vec3(_576, _577, _578), vec3(_548, _549, _550)));
    float _3243 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = sqrt(_551);
    float _694 = exp2((_681 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_681 * 3.0));
    float _700 = (1.0 - _694) * ((_681 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _701 = _694 * _681;
    float _729 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1038;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _765 = fma(_737, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _729));
        float _769 = fma(_737, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _729));
        float _773 = fma(_737, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _729));
        float _796 = _729 + _548;
        float _797 = _733 + _549;
        float _798 = _737 + _550;
        float _808 = fma(_798, cbModelParam._m0[26u].z, fma(_797, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _796)) - _765;
        float _809 = fma(_798, cbModelParam._m0[27u].z, fma(_797, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _796)) - _769;
        float _810 = fma(_798, cbModelParam._m0[28u].z, fma(_797, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _796)) - _773;
        float _814 = inversesqrt(dot(vec3(_808, _809, _810), vec3(_808, _809, _810)));
        float _827 = ((_814 * _808) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_765 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _828 = ((_814 * _809) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_769 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _829 = ((_814 * _810) / cbModelParam._m0[34u].z) + ((((((_773 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_827, _828, _829), 0.0);
        float _866 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_832.x + (-0.5));
        float _868 = _866 * (_832.y + (-0.5));
        float _869 = _866 * (_832.z + (-0.5));
        float _876 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_839.x + (-0.5));
        float _878 = _876 * (_839.y + (-0.5));
        float _879 = _876 * (_839.z + (-0.5));
        float _886 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_846.x + (-0.5));
        float _888 = _886 * (_846.y + (-0.5));
        float _889 = _886 * (_846.z + (-0.5));
        float _896 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_853.x + (-0.5));
        float _898 = _896 * (_853.y + (-0.5));
        float _899 = _896 * (_853.z + (-0.5));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _902 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _903 = _867 * 0.5;
        float _904 = _877 * 0.5;
        float _905 = _887 * 0.5;
        float _906 = dot(vec3(_903, _904, _905), vec3(_903, _904, _905));
        float _911 = (_906 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_906);
        float _920 = (dot(vec3(_548, _549, _550), vec3(_911 * _903, _911 * _904, _911 * _905)) + 1.0) * 0.5;
        float _3269 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _930 = sqrt(((_904 * _904) + (_903 * _903)) + (_905 * _905)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3280 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3291 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0))) * (_932 + 1.0))) + _937) * _900;
        float _947 = _868 * 0.5;
        float _948 = _878 * 0.5;
        float _949 = _888 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_548, _549, _550), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3302 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_901 + 9.9999997473787516355514526367188e-06);
        float _3313 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3324 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * (_974 + 1.0))) + _979) * _901;
        float _989 = _869 * 0.5;
        float _990 = _879 * 0.5;
        float _991 = _889 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_548, _549, _550), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_902 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3357 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_1016 + 1.0))) + _1021) * _902;
        _1038 = _869;
        _1040 = _868;
        _1041 = _867;
        _1042 = _879;
        _1043 = _878;
        _1044 = _877;
        _1045 = _889;
        _1046 = _888;
        _1047 = _887;
        _1048 = _902;
        _1049 = _901;
        _1050 = _900;
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1052 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1053 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
    }
    else
    {
        _1038 = _1039;
        _1040 = _1039;
        _1041 = _1039;
        _1042 = _1039;
        _1043 = _1039;
        _1044 = _1039;
        _1045 = _1039;
        _1046 = _1039;
        _1047 = _1039;
        _1048 = _1039;
        _1049 = _1039;
        _1050 = _1039;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1079 = fma(_737, cbModelParam._m0[30u].z, fma(_733, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _729));
        float _1083 = fma(_737, cbModelParam._m0[31u].z, fma(_733, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _729));
        float _1087 = fma(_737, cbModelParam._m0[32u].z, fma(_733, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _729));
        float _1110 = _729 + _548;
        float _1111 = _733 + _549;
        float _1112 = _737 + _550;
        float _1122 = fma(_1112, cbModelParam._m0[30u].z, fma(_1111, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110)) - _1079;
        float _1123 = fma(_1112, cbModelParam._m0[31u].z, fma(_1111, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110)) - _1083;
        float _1124 = fma(_1112, cbModelParam._m0[32u].z, fma(_1111, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110)) - _1087;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1079 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1083 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[35u].z) + ((((((_1087 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1178 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1145.x + (-0.5));
        float _1180 = _1178 * (_1145.y + (-0.5));
        float _1181 = _1178 * (_1145.z + (-0.5));
        float _1188 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1152.x + (-0.5));
        float _1190 = _1188 * (_1152.y + (-0.5));
        float _1191 = _1188 * (_1152.z + (-0.5));
        float _1198 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1159.x + (-0.5));
        float _1200 = _1198 * (_1159.y + (-0.5));
        float _1201 = _1198 * (_1159.z + (-0.5));
        float _1208 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1166.x + (-0.5));
        float _1210 = _1208 * (_1166.y + (-0.5));
        float _1211 = _1208 * (_1166.z + (-0.5));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = _1179 * 0.5;
        float _1216 = _1189 * 0.5;
        float _1217 = _1199 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_548, _549, _550), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3420 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_1242 + 1.0))) + _1247) * _1212;
        float _1257 = _1180 * 0.5;
        float _1258 = _1190 * 0.5;
        float _1259 = _1200 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_548, _549, _550), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3431 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3442 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3453 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0))) * (_1284 + 1.0))) + _1289) * _1213;
        float _1299 = _1181 * 0.5;
        float _1300 = _1191 * 0.5;
        float _1301 = _1201 * 0.5;
        float _1302 = dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301));
        float _1307 = (_1302 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1302);
        float _1315 = (dot(vec3(_548, _549, _550), vec3(_1307 * _1299, _1307 * _1300, _1307 * _1301)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1324 = sqrt(((_1300 * _1300) + (_1299 * _1299)) + (_1301 * _1301)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3486 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1326 + 1.0))) + _1331) * _1214;
        _1348 = _1181;
        _1349 = _1180;
        _1350 = _1179;
        _1351 = _1191;
        _1352 = _1190;
        _1353 = _1189;
        _1354 = _1201;
        _1355 = _1200;
        _1356 = _1199;
        _1357 = _1214;
        _1358 = _1213;
        _1359 = _1212;
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
        _1362 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
    }
    else
    {
        _1348 = _1039;
        _1349 = _1039;
        _1350 = _1039;
        _1351 = _1039;
        _1352 = _1039;
        _1353 = _1039;
        _1354 = _1039;
        _1355 = _1039;
        _1356 = _1039;
        _1357 = _1039;
        _1358 = _1039;
        _1359 = _1039;
        _1360 = 0.0;
        _1361 = 0.0;
        _1362 = 0.0;
    }
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1052)) + _1052;
    float _1374 = (cbModelParam._m0[1u].x * (_1362 - _1053)) + _1053;
    float _1395 = fma(_1374, cbSceneParam._m0[89u].z, fma(_1373, cbSceneParam._m0[89u].y, _1372 * cbSceneParam._m0[89u].x));
    float _1398 = fma(_1374, cbSceneParam._m0[90u].z, fma(_1373, cbSceneParam._m0[90u].y, _1372 * cbSceneParam._m0[90u].x));
    float _1401 = fma(_1374, cbSceneParam._m0[91u].z, fma(_1373, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1372));
    float _1416 = _673 * 0.5;
    float _1417 = _674 * 0.5;
    float _1418 = _675 * 0.5;
    float _1419 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1350, _1353, _1356, _1359));
    float _1422 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1425 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1459;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1432 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1038, _1042, _1045, _1048));
        float _1436 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1040, _1043, _1046, _1049));
        float _1440 = dot(vec4(_1416, _1417, _1418, 1.0), vec4(_1041, _1044, _1047, _1050));
        float _1447 = dot(vec4(cbModelParam._m0[39u]), vec4(_1416, _1417, _1418, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1470;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1461 = dot(vec4(cbModelParam._m0[40u]), vec4(_1416, _1417, _1418, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1461) ? 0.0 : (isnan(0.0) ? _1461 : max(0.0, _1461))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1474 = (_1470 * cbModelParam._m0[1u].x) + (_1459 * (1.0 - cbModelParam._m0[1u].x));
    float _1484 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1485 = isnan(_1484) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1484 : min(cbModelParam._m0[25u].z, _1484));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_737, cbModelParam._m0[13u].z, fma(_733, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _729)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_737, cbModelParam._m0[14u].z, fma(_733, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _729)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_737, cbModelParam._m0[15u].z, fma(_733, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _729)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_675, cbModelParam._m0[13u].z, fma(_674, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673));
        float _1547 = fma(_675, cbModelParam._m0[14u].z, fma(_674, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673));
        float _1550 = fma(_675, cbModelParam._m0[15u].z, fma(_674, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1578 = frontier_phi_22_20_ladder;
        }
        float _1961;
        if (_1547 > 0.0)
        {
            _1961 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1961 = frontier_phi_31_27_ladder;
        }
        float _2261;
        if (_1550 > 0.0)
        {
            _2261 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2261 = frontier_phi_45_38_ladder;
        }
        float _2263 = isnan(_1961) ? _1578 : (isnan(_1578) ? _1961 : min(_1578, _1961));
        float _2264 = isnan(_2261) ? _2263 : (isnan(_2263) ? _2261 : min(_2263, _2261));
        float _2268 = (_2264 * _1544) + _1533;
        float _2269 = (_2264 * _1547) + _1537;
        float _2270 = (_2264 * _1550) + _1541;
        float _2271 = _2264 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2271;
        float _2274 = _2271 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2270 > _2274) || ((_2270 < _2272) || ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 < _2272) || (_2268 > _2274))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2270, cbModelParam._m0[9u].z, fma(_2269, cbModelParam._m0[9u].y, _2268 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2270, cbModelParam._m0[10u].z, fma(_2269, cbModelParam._m0[10u].y, _2268 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2270, cbModelParam._m0[11u].z, fma(_2269, cbModelParam._m0[11u].y, _2268 * cbModelParam._m0[11u].x))), _1485);
            frontier_phi_21_45_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_21_45_ladder_2;
        _1568 = frontier_phi_21_45_ladder_1;
        _1570 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_673, _674, _675), _1485);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1664;
    float _1666;
    float _1668;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1628 = fma(_737, cbModelParam._m0[21u].z, fma(_733, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _729)) + cbModelParam._m0[21u].w;
        float _1632 = fma(_737, cbModelParam._m0[22u].z, fma(_733, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _729)) + cbModelParam._m0[22u].w;
        float _1636 = fma(_737, cbModelParam._m0[23u].z, fma(_733, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _729)) + cbModelParam._m0[23u].w;
        float _1639 = fma(_675, cbModelParam._m0[21u].z, fma(_674, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673));
        float _1642 = fma(_675, cbModelParam._m0[22u].z, fma(_674, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673));
        float _1645 = fma(_675, cbModelParam._m0[23u].z, fma(_674, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673));
        float _1966;
        if (_1639 > 0.0)
        {
            _1966 = abs((1.0 - _1628) / _1639);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1628 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1966 = frontier_phi_33_29_ladder;
        }
        float _2287;
        if (_1642 > 0.0)
        {
            _2287 = abs((1.0 - _1632) / _1642);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1632 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2287 = frontier_phi_47_40_ladder;
        }
        float _2456;
        if (_1645 > 0.0)
        {
            _2456 = abs((1.0 - _1636) / _1645);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1636 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2456 = frontier_phi_61_56_ladder;
        }
        float _2458 = isnan(_2287) ? _1966 : (isnan(_1966) ? _2287 : min(_1966, _2287));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1639) + _1628;
        float _2464 = (_2459 * _1642) + _1632;
        float _2465 = (_2459 * _1645) + _1636;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_30_61_ladder = _2698.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2698.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2698.x * cbModelParam._m0[1u].z;
        }
        _1664 = frontier_phi_30_61_ladder_2;
        _1666 = frontier_phi_30_61_ladder_1;
        _1668 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1648 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_673, _674, _675), _1575);
        _1664 = _1648.x * cbModelParam._m0[1u].z;
        _1666 = _1648.y * cbModelParam._m0[1u].z;
        _1668 = _1648.z * cbModelParam._m0[1u].z;
    }
    float _1681 = (((_700 * _650) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1683 = (((_700 * _652) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1685 = (((_700 * _653) + _701) * _665) * ((cbModelParam._m0[1u].w * (_1668 - _1570)) + _1570);
    float _1688 = fma(_1685, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1681 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1685, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1681 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1685, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1681 * cbSceneParam._m0[91u].x));
    vec4 _1702 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_584, _585));
    float _1704 = _1702.w;
    float _1716 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1704);
    float _1717 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1704);
    float _1718 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1704);
    uvec4 _1722 = floatBitsToUint(cbInstanceData._m0[_624 + 5u]);
    uint _1724 = _1722.x * 14u;
    uint _1725 = _1724 + 13u;
    float _1730 = _665 + (-1.0);
    float _1733 = (cbLight._m0[_1725].x * _1730) + 1.0;
    float _1734 = (cbLight._m0[_1725].y * _1730) + 1.0;
    uint _1735 = _1724 + 5u;
    float _1741 = isnan(1.0) ? _1734 : (isnan(_1734) ? 1.0 : min(_1734, 1.0));
    uint _1745 = _1724 + 4u;
    float _1754 = isnan(1.0) ? _1733 : (isnan(_1733) ? 1.0 : min(_1733, 1.0));
    uint _1758 = _1724 | 1u;
    float _1769 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_548, _549, _550));
    float _1772 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_548, _549, _550));
    float _3622 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _3633 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1777 = (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.3183098733425140380859375;
    float _1779 = (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.3183098733425140380859375;
    float _1786 = ((cbLight._m0[_1735].x * _1741) * _1779) + (((cbLight._m0[_1745].x * _1716) * _1754) * _1777);
    float _1787 = ((_1741 * cbLight._m0[_1735].y) * _1779) + (((cbLight._m0[_1745].y * _1717) * _1754) * _1777);
    float _1788 = ((_1741 * cbLight._m0[_1735].z) * _1779) + (((cbLight._m0[_1745].z * _1718) * _1754) * _1777);
    uint _1790 = _1724 + 8u;
    float _1803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _551) * 0.949999988079071044921875);
    float _1804 = _1803 * _1803;
    float _1805 = cbLight._m0[_1724].x + _576;
    float _1806 = cbLight._m0[_1724].y + _577;
    float _1807 = cbLight._m0[_1724].z + _578;
    float _1811 = inversesqrt(dot(vec3(_1805, _1806, _1807), vec3(_1805, _1806, _1807)));
    float _1812 = _1811 * _1805;
    float _1813 = _1811 * _1806;
    float _1814 = _1811 * _1807;
    float _1815 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1724].xyz));
    float _3644 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _1819 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _1820 = dot(vec3(_548, _549, _550), vec3(_1812, _1813, _1814));
    float _3666 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1823 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _1824 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1812, _1813, _1814));
    float _3677 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1828 = _1804 * _1804;
    float _1832 = ((_1823 * _1823) * (_1828 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * 5.0);
    float _1841 = 0.959999978542327880859375 - _647;
    float _1843 = 0.959999978542327880859375 - _648;
    float _1844 = 0.959999978542327880859375 - _649;
    float _1851 = 1.0 - _1804;
    float _1862 = (0.5 / (((_1819 * ((_1818 * _1851) + _1804)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1851) + _1804) * _1818))) * _1818;
    float _3688 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1828 / ((_1832 * _1832) * 3.141590118408203125));
    uint _1878 = _1724 + 9u;
    float _1889 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1758].w)) * _551) * 0.949999988079071044921875);
    float _1890 = _1889 * _1889;
    float _1891 = cbLight._m0[_1758].x + _576;
    float _1892 = cbLight._m0[_1758].y + _577;
    float _1893 = cbLight._m0[_1758].z + _578;
    float _1897 = inversesqrt(dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893)));
    float _1898 = _1897 * _1891;
    float _1899 = _1897 * _1892;
    float _1900 = _1897 * _1893;
    float _1901 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1758].xyz));
    float _3699 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1904 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1905 = dot(vec3(_548, _549, _550), vec3(_1898, _1899, _1900));
    float _3710 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1758].xyz), vec3(_1898, _1899, _1900));
    float _3721 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1890 * _1890;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0)))) * 5.0);
    float _1931 = 1.0 - _1890;
    float _1941 = (0.5 / (((_1819 * ((_1904 * _1931) + _1890)) + 9.9999999392252902907785028219223e-09) + (((_1819 * _1931) + _1890) * _1904))) * _1904;
    float _3732 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1943 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    float _1953 = (((((_1924 * _1841) + _650) * cbLight._m0[_1878].x) * _1943) * _1741) + ((((cbLight._m0[_1790].x * _1716) * ((_1840 * _1841) + _650)) * _1864) * _1754);
    float _1954 = (((((_1924 * _1843) + _652) * cbLight._m0[_1878].y) * _1943) * _1741) + ((((cbLight._m0[_1790].y * _1717) * ((_1840 * _1843) + _652)) * _1864) * _1754);
    float _1955 = (((((_1924 * _1844) + _653) * cbLight._m0[_1878].z) * _1943) * _1741) + ((((cbLight._m0[_1790].z * _1718) * ((_1840 * _1844) + _653)) * _1864) * _1754);
    float _2070;
    float _2072;
    float _2074;
    float _2076;
    float _2078;
    float _2080;
    if (_1722.y == 0u)
    {
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2010;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2010;
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2010;
        uvec4 _2025 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2026 = _2025.x;
        uint _2037 = uint((float(_2025.y) * floor(float(uint(cbSceneParam._m0[85u].y * _585) / _2026))) + floor(float(uint(cbSceneParam._m0[85u].x * _584) / _2026)));
        float _2047 = (log2(_2013 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2048 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        uint _2051 = uint(isnan(14.0) ? _2048 : (isnan(_2048) ? 14.0 : min(_2048, 14.0)));
        uvec4 _2056 = texelFetch(g_lightClusterGridBuffer, int(((_2051 << 2u) + (_2037 << 6u)) >> 2u));
        uint _2057 = _2056.x;
        uint _2058 = _2025.z;
        float _2148;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        if (((((1u << ((_2058 >> 4u) & 15u)) + 4294967295u) & _2057) == 0u) || ((_2058 & 240u) == 0u))
        {
            _2148 = 0.0;
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
        }
        else
        {
            float _2149;
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2324 = 0.0;
            float _2325 = 0.0;
            float _2326 = 0.0;
            float _2327 = 0.0;
            float _2328 = 0.0;
            float _2329 = 0.0;
            uint _2330 = 0u;
            uint _2339;
            bool _2340;
            for (;;)
            {
                _2339 = texelFetch(g_lightClassification, int((((_2051 << 5u) + (_2037 << 9u)) + (_2330 << 2u)) >> 2u)).x;
                _2340 = _2339 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2340)
                {
                    frontier_phi_58_pred = _2325;
                    frontier_phi_58_pred_1 = _2329;
                    frontier_phi_58_pred_2 = _2328;
                    frontier_phi_58_pred_3 = _2327;
                    frontier_phi_58_pred_4 = _2326;
                    frontier_phi_58_pred_5 = _2324;
                }
                else
                {
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    uint _2505;
                    _2499 = _2324;
                    _2500 = _2325;
                    _2501 = _2326;
                    _2502 = _2327;
                    _2503 = _2328;
                    _2504 = _2329;
                    _2505 = _2339;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    for (;;)
                    {
                        uint _2509 = uint(findLSB(_2505)) + (_2330 << 5u);
                        uint _2506 = (_2505 + 4294967295u) & _2505;
                        uint _2511 = _2509 * 48u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2531 = (_2509 * 48u) + 4u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        uint _2550 = (_2509 * 48u) + 8u;
                        vec3 _2561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x));
                        float _2565 = _2525.x - _2011;
                        float _2566 = _2525.y - _2012;
                        float _2567 = _2525.z - _2013;
                        float _2568 = dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567));
                        float _2571 = inversesqrt(_2568);
                        float _2572 = _2571 * _2565;
                        float _2573 = _2571 * _2566;
                        float _2574 = _2571 * _2567;
                        float _2575 = dot(vec3(_605, _608, _611), vec3(_2572, _2573, _2574));
                        float _2580 = 1.0 - (_2568 * _2525.w);
                        float _3753 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
                        float _2582 = sqrt(_2568) * _2544.w;
                        float _2585 = 1.39999997615814208984375 / (_2582 + 1.39999997615814208984375);
                        float _2586 = _2585 * _2585;
                        float _2589 = ((1.0 - _2586) * _2575) + _2586;
                        float _2592 = _2582 * _2582;
                        float _2596 = ((isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))) * _2581) / ((_2592 * 0.699999988079071044921875) + 1.0);
                        float _2600 = (-0.0) - _2011;
                        float _2601 = (-0.0) - _2012;
                        float _2602 = (-0.0) - _2013;
                        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
                        float _2607 = _2606 * _2600;
                        float _2608 = _2606 * _2601;
                        float _2609 = _2606 * _2602;
                        float _2617 = exp2(log2(1.0 / ((_2592 * 3.5) + 5.0)) * 0.25);
                        float _2618 = 1.0 - _681;
                        float _2625 = sqrt(1.0 - ((1.0 - (_2618 * _2618)) * (1.0 - (_2617 * _2617))));
                        float _2626 = _2625 * _2625;
                        float _2627 = _2626 * _2626;
                        float _2628 = _2607 + _2572;
                        float _2629 = _2608 + _2573;
                        float _2630 = _2609 + _2574;
                        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
                        float _2638 = dot(vec3(_605, _608, _611), vec3(_2607, _2608, _2609));
                        float _3769 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2641 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                        float _2642 = dot(vec3(_605, _608, _611), vec3(_2634 * _2628, _2634 * _2629, _2634 * _2630));
                        float _3780 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2645 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
                        float _2649 = ((_2645 * _2645) * (_2627 + (-1.0))) + 1.0;
                        float _2650 = _2585 * _2626;
                        float _2651 = _2650 * _2650;
                        float _2654 = ((1.0 - _2651) * _2575) + _2651;
                        float _3791 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2655 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
                        float _2656 = 1.0 - _2626;
                        float _2666 = (0.5 / (((_2655 * ((_2641 * _2656) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2656) + _2626) * _2641))) * _2655;
                        float _3802 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2677 = (((_2627 * 3.1415927410125732421875) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) / ((_2649 * _2649) * ((_2592 * 2.1991131305694580078125) + 3.141590118408203125))) * _2581;
                        _2408 = (_2596 * _2544.x) + _2502;
                        _2409 = (_2596 * _2544.y) + _2503;
                        _2410 = (_2596 * _2544.z) + _2504;
                        _2405 = (_2677 * _2561.x) + _2499;
                        _2406 = (_2677 * _2561.y) + _2500;
                        _2407 = (_2677 * _2561.z) + _2501;
                        if (_2506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2499 = _2405;
                            _2500 = _2406;
                            _2501 = _2407;
                            _2502 = _2408;
                            _2503 = _2409;
                            _2504 = _2410;
                            _2505 = _2506;
                        }
                    }
                    frontier_phi_58_pred = _2406;
                    frontier_phi_58_pred_1 = _2410;
                    frontier_phi_58_pred_2 = _2409;
                    frontier_phi_58_pred_3 = _2408;
                    frontier_phi_58_pred_4 = _2407;
                    frontier_phi_58_pred_5 = _2405;
                }
                _2151 = frontier_phi_58_pred;
                _2159 = frontier_phi_58_pred_1;
                _2157 = frontier_phi_58_pred_2;
                _2155 = frontier_phi_58_pred_3;
                _2153 = frontier_phi_58_pred_4;
                _2149 = frontier_phi_58_pred_5;
                uint _2331 = _2330 + 1u;
                if (_2331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2324 = _2149;
                    _2325 = _2151;
                    _2326 = _2153;
                    _2327 = _2155;
                    _2328 = _2157;
                    _2329 = _2159;
                    _2330 = _2331;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2148 = _2149;
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
        }
        uvec4 _2162 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2163 = _2162.z;
        uint _2165 = (_2163 >> 8u) & 15u;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        float _2302;
        if (((4294967295u << _2165) & _2057) == 0u)
        {
            _2292 = _2148;
            _2294 = _2150;
            _2296 = _2152;
            _2298 = _2154;
            _2300 = _2156;
            _2302 = _2158;
        }
        else
        {
            float _2317 = inversesqrt(dot(vec3(_2011, _2012, _2013), vec3(_2011, _2012, _2013)));
            float _2318 = _2317 * _2011;
            float _2319 = _2317 * _2012;
            float _2320 = _2317 * _2013;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2165 < ((_2163 >> 12u) & 15u))
            {
                float _2293;
                float _2295;
                float _2297;
                float _2299;
                float _2301;
                float _2303;
                float _2482 = _2148;
                float _2483 = _2150;
                float _2484 = _2152;
                float _2485 = _2154;
                float _2486 = _2156;
                float _2487 = _2158;
                uint _2488 = _2165;
                uint _2497;
                bool _2498;
                for (;;)
                {
                    _2497 = texelFetch(g_lightClassification, int((((_2051 << 5u) + (_2037 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                    _2498 = _2497 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2498)
                    {
                        frontier_phi_67_pred = _2487;
                        frontier_phi_67_pred_1 = _2486;
                        frontier_phi_67_pred_2 = _2485;
                        frontier_phi_67_pred_3 = _2484;
                        frontier_phi_67_pred_4 = _2483;
                        frontier_phi_67_pred_5 = _2482;
                    }
                    else
                    {
                        float _2703;
                        float _2704;
                        float _2705;
                        float _2706;
                        float _2707;
                        float _2708;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _2716 = _2482;
                        float _2717 = _2483;
                        float _2718 = _2484;
                        float _2719 = _2485;
                        float _2720 = _2486;
                        float _2721 = _2487;
                        uint _2722 = _2497;
                        uint _2723;
                        vec4 _2748;
                        float _2749;
                        vec4 _2764;
                        vec3 _2776;
                        vec4 _2791;
                        vec4 _2806;
                        float _2852;
                        bool _2853;
                        for (;;)
                        {
                            uint _2733 = ((_2488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2722));
                            _2723 = (_2722 + 4294967295u) & _2722;
                            uint _2735 = _2733 * 40u;
                            _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            _2749 = _2748.w;
                            uint _2751 = (_2733 * 40u) + 4u;
                            _2764 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2751)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2751 + 3u)).x));
                            uint _2766 = (_2733 * 40u) + 8u;
                            _2776 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x));
                            uint _2778 = (_2733 * 40u) + 16u;
                            _2791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 3u)).x));
                            uint _2793 = (_2733 * 40u) + 20u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            uint _2808 = (_2733 * 40u) + 24u;
                            vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            uint _2827 = (_2733 * 40u) + 28u;
                            vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            _2852 = fma(_2013, _2840.z, fma(_2012, _2840.y, _2840.x * _2011)) + _2840.w;
                            _2853 = !((fma(_2013, _2821.z, fma(_2012, _2821.y, _2821.x * _2011)) + _2821.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2853)
                            {
                                float _2880 = _2748.x - _2011;
                                float _2881 = _2748.y - _2012;
                                float _2882 = _2748.z - _2013;
                                float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                                float _2886 = inversesqrt(_2883);
                                float _2887 = _2886 * _2880;
                                float _2888 = _2886 * _2881;
                                float _2889 = _2886 * _2882;
                                float _2893 = 1.0 - (_2883 / (_2749 * _2749));
                                float _3813 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2894 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
                                float _2898 = sqrt(_2883) * _2764.w;
                                float _2900 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                                float _2901 = _2900 * _2900;
                                float _2904 = ((1.0 - _2901) * dot(vec3(_2887, _2888, _2889), vec3(_605, _608, _611))) + _2901;
                                float _2907 = _2898 * _2898;
                                float _2911 = (fma(_2013, _2791.z, fma(_2012, _2791.y, _2791.x * _2011)) + _2791.w) / _2852;
                                float _2912 = (fma(_2013, _2806.z, fma(_2012, _2806.y, _2806.x * _2011)) + _2806.w) / _2852;
                                float _2916 = 1.0 - dot(vec2(_2911, _2912), vec2(_2911, _2912));
                                float _3829 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                                float _2917 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                                float _2918 = _2917 * (((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2894) / ((_2907 * 0.699999988079071044921875) + 1.0));
                                float _2930 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                                float _2931 = 1.0 - _681;
                                float _2938 = sqrt(1.0 - ((1.0 - (_2931 * _2931)) * (1.0 - (_2930 * _2930))));
                                float _2939 = _2938 * _2938;
                                float _2940 = _2939 * _2939;
                                float _2941 = _2887 - _2318;
                                float _2942 = _2888 - _2319;
                                float _2943 = _2889 - _2320;
                                float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                                float _2951 = dot(vec3(_605, _608, _611), vec3((-0.0) - _2318, (-0.0) - _2319, (-0.0) - _2320));
                                float _3840 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2954 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                                float _2955 = dot(vec3(_605, _608, _611), vec3(_2947 * _2941, _2947 * _2942, _2947 * _2943));
                                float _3851 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2958 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                                float _2962 = ((_2958 * _2958) * (_2940 + (-1.0))) + 1.0;
                                float _2963 = _2900 * _2939;
                                float _2964 = _2963 * _2963;
                                float _2970 = ((1.0 - _2964) * dot(vec3(_605, _608, _611), vec3(_2887, _2888, _2889))) + _2964;
                                float _3862 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2971 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                                float _2972 = 1.0 - _2939;
                                float _2982 = (0.5 / (((_2971 * ((_2954 * _2972) + _2939)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2939) * _2954))) * _2971;
                                float _3873 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                                float _2992 = (_2917 * _2894) * (((_2940 * 3.1415927410125732421875) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) / ((_2962 * _2962) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2918 * _2764.z;
                                frontier_phi_73_pred_1 = _2918 * _2764.y;
                                frontier_phi_73_pred_2 = _2918 * _2764.x;
                                frontier_phi_73_pred_3 = _2992 * _2776.z;
                                frontier_phi_73_pred_4 = _2992 * _2776.y;
                                frontier_phi_73_pred_5 = _2992 * _2776.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3001 = frontier_phi_73_pred;
                            _3000 = frontier_phi_73_pred_1;
                            _2999 = frontier_phi_73_pred_2;
                            _2998 = frontier_phi_73_pred_3;
                            _2997 = frontier_phi_73_pred_4;
                            _2996 = frontier_phi_73_pred_5;
                            _2706 = _2999 + _2719;
                            _2707 = _3000 + _2720;
                            _2708 = _3001 + _2721;
                            _2703 = _2996 + _2716;
                            _2704 = _2997 + _2717;
                            _2705 = _2998 + _2718;
                            if (_2723 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2716 = _2703;
                                _2717 = _2704;
                                _2718 = _2705;
                                _2719 = _2706;
                                _2720 = _2707;
                                _2721 = _2708;
                                _2722 = _2723;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2708;
                        frontier_phi_67_pred_1 = _2707;
                        frontier_phi_67_pred_2 = _2706;
                        frontier_phi_67_pred_3 = _2705;
                        frontier_phi_67_pred_4 = _2704;
                        frontier_phi_67_pred_5 = _2703;
                    }
                    _2303 = frontier_phi_67_pred;
                    _2301 = frontier_phi_67_pred_1;
                    _2299 = frontier_phi_67_pred_2;
                    _2297 = frontier_phi_67_pred_3;
                    _2295 = frontier_phi_67_pred_4;
                    _2293 = frontier_phi_67_pred_5;
                    uint _2489 = _2488 + 1u;
                    if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2482 = _2293;
                        _2483 = _2295;
                        _2484 = _2297;
                        _2485 = _2299;
                        _2486 = _2301;
                        _2487 = _2303;
                        _2488 = _2489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2299;
                frontier_phi_49_50_ladder_1 = _2303;
                frontier_phi_49_50_ladder_2 = _2301;
                frontier_phi_49_50_ladder_3 = _2297;
                frontier_phi_49_50_ladder_4 = _2295;
                frontier_phi_49_50_ladder_5 = _2293;
            }
            else
            {
                frontier_phi_49_50_ladder = _2154;
                frontier_phi_49_50_ladder_1 = _2158;
                frontier_phi_49_50_ladder_2 = _2156;
                frontier_phi_49_50_ladder_3 = _2152;
                frontier_phi_49_50_ladder_4 = _2150;
                frontier_phi_49_50_ladder_5 = _2148;
            }
            _2292 = frontier_phi_49_50_ladder_5;
            _2294 = frontier_phi_49_50_ladder_4;
            _2296 = frontier_phi_49_50_ladder_3;
            _2298 = frontier_phi_49_50_ladder;
            _2300 = frontier_phi_49_50_ladder_2;
            _2302 = frontier_phi_49_50_ladder_1;
        }
        float _2307 = isnan(1.0) ? _665 : (isnan(_665) ? 1.0 : min(_665, 1.0));
        _2070 = (_2307 * _2298) + _1786;
        _2072 = (_2307 * _2300) + _1787;
        _2074 = (_2307 * _2302) + _1788;
        _2076 = ((_2292 * _650) * _2307) + _1953;
        _2078 = ((_2294 * _652) * _2307) + _1954;
        _2080 = ((_2296 * _653) * _2307) + _1955;
    }
    else
    {
        _2070 = _1786;
        _2072 = _1787;
        _2074 = _1788;
        _2076 = _1953;
        _2078 = _1954;
        _2080 = _1955;
    }
    float _3889 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _3900 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _3911 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _2097 = ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_2070 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _665))) + ((_2076 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    float _2098 = ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_2072 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _665))) + ((_2078 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    float _2099 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_2074 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _665))) + ((_2080 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1474)) * cbPerFrame._m0[3u].x);
    uint _2103 = _624 + 6u;
    float _2111 = _584 / cbSceneParam._m0[86u].x;
    float _2112 = _585 / cbSceneParam._m0[86u].y;
    vec4 _2126 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2128 = _2126.x;
    float _2129 = _2126.y;
    float _2130 = _2126.z;
    float _2131 = _2126.w;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2173 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2174 = _2173 / _571;
        float _2185 = _2174 * _261;
        float _2186 = _262 * _2174;
        float _2187 = (-0.0) - _2186;
        float _2188 = _2174 * _263;
        float _2190 = (cbSceneParam._m0[77u].w * _2187) / _2173;
        float _2191 = _2190 + cbSceneParam._m0[79u].w;
        float _2192 = cbSceneParam._m0[79u].w - _2186;
        float _2198 = sqrt(((_2185 * _2185) + (_2186 * _2186)) + (_2188 * _2188));
        float _2201 = (1.0 - (cbSceneParam._m0[77u].w / _2173)) * _2198;
        float _2207 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2209 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2418;
        if (abs((_2187 - _2190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2418 = ((((_2191 > 0.0) ? exp2(_2207 * _2191) : (2.0 - exp2(_2209 * _2191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2201;
        }
        else
        {
            float _2353 = 1.0 / cbSceneParam._m0[80u].x;
            float _2354 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : max(_2191, _2192));
            float _2355 = isnan(_2192) ? _2191 : (isnan(_2191) ? _2192 : min(_2191, _2192));
            float _2364 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : min(_2354, 0.0));
            float _2365 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : min(_2355, 0.0));
            _2418 = ((abs(_2198 / _2187) * cbSceneParam._m0[80u].y) * ((((_2364 - _2365) * 2.0) - ((exp2(_2207 * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0)))) - exp2(_2207 * (isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0))))) * _2353)) - ((exp2(_2209 * _2364) - exp2(_2209 * _2365)) * _2353))) + (_2201 * cbSceneParam._m0[80u].z);
        }
        vec4 _2420 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2111, _2112, 1.0), 0.0);
        float _2429 = exp2((_2418 * (-1.44269502162933349609375)) * (1.0 - _2420.w));
        float _2430 = log2(_2429);
        float _2446 = log2(_2131);
        _2211 = (exp2(_2446 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].x)) * _2420.x) / cbSceneParam._m0[78u].x)) + _2128;
        _2213 = (exp2(_2446 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].y)) * _2420.y) / cbSceneParam._m0[78u].y)) + _2129;
        _2215 = (exp2(_2446 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].z)) * _2420.z) / cbSceneParam._m0[78u].z)) + _2130;
        _2217 = _2429 * _2131;
    }
    else
    {
        _2211 = _2128;
        _2213 = _2129;
        _2215 = _2130;
        _2217 = _2131;
    }
    float _2229 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2230 = _2229 == 3.0;
    float _2231 = log2(_2217);
    float _2238 = exp2(_2231 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0)));
    float _2239 = exp2(_2231 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)));
    float _2240 = exp2(_2231 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)));
    float _2249 = (_2229 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2249 * (_2230 ? _2238 : (_2238 + (cbSceneParam._m0[72u].w * _2211)));
    SV_Target.y = _2249 * (_2230 ? _2239 : (_2239 + (cbSceneParam._m0[72u].w * _2213)));
    SV_Target.z = _2249 * (_2230 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2215)));
    SV_Target.w = cbInstanceData._m0[_2103].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2103].w;
}


