#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder_1;
        _396 = frontier_phi_3_2_ladder_2;
        _398 = frontier_phi_3_2_ladder;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _411;
            frontier_phi_8_5_ladder_2 = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _396;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _398;
        }
        _424 = frontier_phi_8_5_ladder_1;
        _426 = frontier_phi_8_5_ladder;
        _428 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _425;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_425 * _367) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _396;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _398;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _396;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _398;
        }
        _424 = frontier_phi_8_6_ladder_1;
        _426 = frontier_phi_8_6_ladder;
        _428 = frontier_phi_8_6_ladder_2;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    float _460 = 0.5 - (_286 * 0.5);
    float _470 = (((_453 - _299) - (_453 * _286)) * _460) + _299;
    float _471 = (((_454 - _301) - (_454 * _286)) * _460) + _301;
    float _472 = (((_455 - _303) - (_455 * _286)) * _460) + _303;
    vec4 _484 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _486 = _484.x;
    vec4 _498 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _506 = (_498.x * 2.0) + (-1.0);
    float _508 = (_498.y * 2.0) + (-1.0);
    float _509 = dot(vec2(_506, _508), vec2(_506, _508));
    float _3140 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0))));
    float _515 = _498.z * _286;
    float _518 = fma(_514, _195, fma(_508, _202, _506 * _188));
    float _521 = fma(_514, _196, fma(_508, _203, _506 * _189));
    float _524 = fma(_514, _197, fma(_508, _204, _506 * _190));
    float _528 = inversesqrt(dot(vec3(_518, _521, _524), vec3(_518, _521, _524)));
    float _529 = _528 * _518;
    float _530 = _528 * _521;
    float _531 = _528 * _524;
    float _3151 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _532 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    float _3162 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3173 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _3184 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3195 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _536 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _552 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _557 = _259 * _556;
    float _558 = _260 * _556;
    float _559 = _261 * _556;
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _587 = fma(_531, cbSceneParam._m0[5u].z, fma(_530, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _529));
    float _590 = fma(_531, cbSceneParam._m0[6u].z, fma(_530, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _529));
    float _593 = fma(_531, cbSceneParam._m0[7u].z, fma(_530, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _529));
    uint _606 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = (_606 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3206 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _3217 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0));
    float _3228 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
    float _620 = 1.0 - _536;
    float _621 = _617 * _620;
    float _622 = _618 * _620;
    float _623 = _619 * _620;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _536;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _536;
    float _630 = (_619 + (-0.039999999105930328369140625)) * _536;
    float _631 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    float _634 = _630 + 0.039999999105930328369140625;
    vec4 _643 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _646 = _643.x * TEXCOORD.z;
    float _647 = dot(vec3(_529, _530, _531), vec3(_557, _558, _559));
    float _650 = _647 * 2.0;
    float _654 = (_650 * _529) - _557;
    float _655 = (_650 * _530) - _558;
    float _656 = (_650 * _531) - _559;
    float _660 = abs(dot(vec3(_557, _558, _559), vec3(_529, _530, _531)));
    float _3239 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _662 = sqrt(_532);
    float _675 = exp2((_662 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_662 * 3.0));
    float _681 = (1.0 - _675) * ((_662 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _682 = _675 * _662;
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _751 = fma(_718, cbModelParam._m0[26u].z, fma(_714, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _710));
        float _755 = fma(_718, cbModelParam._m0[27u].z, fma(_714, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _710));
        float _759 = fma(_718, cbModelParam._m0[28u].z, fma(_714, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _710));
        float _783 = _710 + _529;
        float _784 = _714 + _530;
        float _785 = _718 + _531;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _751;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _755;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _759;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_751 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_755 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_759 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_529, _530, _531), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3265 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3276 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3287 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_529, _530, _531), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3298 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3309 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3320 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_529, _530, _531), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3353 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1026 = _855;
        _1027 = _854;
        _1028 = _866;
        _1029 = _865;
        _1030 = _864;
        _1031 = _876;
        _1032 = _875;
        _1033 = _874;
        _1034 = _889;
        _1035 = _888;
        _1036 = _887;
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _395;
        _1026 = _395;
        _1027 = _395;
        _1028 = _395;
        _1029 = _395;
        _1030 = _395;
        _1031 = _395;
        _1032 = _395;
        _1033 = _395;
        _1034 = _395;
        _1035 = _395;
        _1036 = _395;
        _1037 = 0.0;
        _1038 = 0.0;
        _1039 = 0.0;
    }
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1065 = fma(_718, cbModelParam._m0[30u].z, fma(_714, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _710));
        float _1069 = fma(_718, cbModelParam._m0[31u].z, fma(_714, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _710));
        float _1073 = fma(_718, cbModelParam._m0[32u].z, fma(_714, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _710));
        float _1096 = _710 + _529;
        float _1097 = _714 + _530;
        float _1098 = _718 + _531;
        float _1108 = fma(_1098, cbModelParam._m0[30u].z, fma(_1097, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1096)) - _1065;
        float _1109 = fma(_1098, cbModelParam._m0[31u].z, fma(_1097, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1096)) - _1069;
        float _1110 = fma(_1098, cbModelParam._m0[32u].z, fma(_1097, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1096)) - _1073;
        float _1114 = inversesqrt(dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110)));
        float _1127 = ((_1114 * _1108) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1065 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1128 = ((_1114 * _1109) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1069 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1114 * _1110) / cbModelParam._m0[35u].z) + ((((((_1073 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1127, _1128, _1129), 0.0);
        float _1164 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1131.x + (-0.5));
        float _1166 = _1164 * (_1131.y + (-0.5));
        float _1167 = _1164 * (_1131.z + (-0.5));
        float _1174 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1138.x + (-0.5));
        float _1176 = _1174 * (_1138.y + (-0.5));
        float _1177 = _1174 * (_1138.z + (-0.5));
        float _1184 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1145.x + (-0.5));
        float _1186 = _1184 * (_1145.y + (-0.5));
        float _1187 = _1184 * (_1145.z + (-0.5));
        float _1194 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1152.x + (-0.5));
        float _1196 = _1194 * (_1152.y + (-0.5));
        float _1197 = _1194 * (_1152.z + (-0.5));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = _1165 * 0.5;
        float _1202 = _1175 * 0.5;
        float _1203 = _1185 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_529, _530, _531), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3416 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_1228 + 1.0))) + _1233) * _1198;
        float _1243 = _1166 * 0.5;
        float _1244 = _1176 * 0.5;
        float _1245 = _1186 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_529, _530, _531), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3449 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1270 + 1.0))) + _1275) * _1199;
        float _1285 = _1167 * 0.5;
        float _1286 = _1177 * 0.5;
        float _1287 = _1187 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_529, _530, _531), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3460 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3471 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3482 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))) * (_1312 + 1.0))) + _1317) * _1200;
        _1334 = _1167;
        _1335 = _1166;
        _1336 = _1165;
        _1337 = _1177;
        _1338 = _1176;
        _1339 = _1175;
        _1340 = _1187;
        _1341 = _1186;
        _1342 = _1185;
        _1343 = _1200;
        _1344 = _1199;
        _1345 = _1198;
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    }
    else
    {
        _1334 = _395;
        _1335 = _395;
        _1336 = _395;
        _1337 = _395;
        _1338 = _395;
        _1339 = _395;
        _1340 = _395;
        _1341 = _395;
        _1342 = _395;
        _1343 = _395;
        _1344 = _395;
        _1345 = _395;
        _1346 = 0.0;
        _1347 = 0.0;
        _1348 = 0.0;
    }
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1381 = fma(_1360, cbSceneParam._m0[89u].z, fma(_1359, cbSceneParam._m0[89u].y, _1358 * cbSceneParam._m0[89u].x));
    float _1384 = fma(_1360, cbSceneParam._m0[90u].z, fma(_1359, cbSceneParam._m0[90u].y, _1358 * cbSceneParam._m0[90u].x));
    float _1387 = fma(_1360, cbSceneParam._m0[91u].z, fma(_1359, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1358));
    float _1402 = _654 * 0.5;
    float _1403 = _655 * 0.5;
    float _1404 = _656 * 0.5;
    float _1405 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1408 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1411 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1445;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1418 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1422 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1426 = dot(vec4(_1402, _1403, _1404, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1433 = dot(vec4(cbModelParam._m0[39u]), vec4(_1402, _1403, _1404, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1456;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1447 = dot(vec4(cbModelParam._m0[40u]), vec4(_1402, _1403, _1404, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1447) ? 0.0 : (isnan(0.0) ? _1447 : max(0.0, _1447))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1460 = (_1456 * cbModelParam._m0[1u].x) + (_1445 * (1.0 - cbModelParam._m0[1u].x));
    float _1470 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _532);
    float _1471 = isnan(_1470) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1470 : min(cbModelParam._m0[25u].z, _1470));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1520 = fma(_718, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _710)) + cbModelParam._m0[13u].w;
        float _1524 = fma(_718, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _710)) + cbModelParam._m0[14u].w;
        float _1528 = fma(_718, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _710)) + cbModelParam._m0[15u].w;
        float _1531 = fma(_656, cbModelParam._m0[13u].z, fma(_655, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _654));
        float _1534 = fma(_656, cbModelParam._m0[14u].z, fma(_655, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _654));
        float _1537 = fma(_656, cbModelParam._m0[15u].z, fma(_655, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _654));
        float _1565;
        if (_1531 > 0.0)
        {
            _1565 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1565 = frontier_phi_26_24_ladder;
        }
        float _1951;
        if (_1534 > 0.0)
        {
            _1951 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1951 = frontier_phi_35_31_ladder;
        }
        float _2251;
        if (_1537 > 0.0)
        {
            _2251 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2251 = frontier_phi_49_42_ladder;
        }
        float _2253 = isnan(_1951) ? _1565 : (isnan(_1565) ? _1951 : min(_1565, _1951));
        float _2254 = isnan(_2251) ? _2253 : (isnan(_2253) ? _2251 : min(_2253, _2251));
        float _2258 = (_2254 * _1531) + _1520;
        float _2259 = (_2254 * _1534) + _1524;
        float _2260 = (_2254 * _1537) + _1528;
        float _2261 = _2254 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2261;
        float _2264 = _2261 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2260 > _2264) || ((_2260 < _2262) || ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 < _2262) || (_2258 > _2264))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2260, cbModelParam._m0[9u].z, fma(_2259, cbModelParam._m0[9u].y, _2258 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2260, cbModelParam._m0[10u].z, fma(_2259, cbModelParam._m0[10u].y, _2258 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2260, cbModelParam._m0[11u].z, fma(_2259, cbModelParam._m0[11u].y, _2258 * cbModelParam._m0[11u].x))), _1471);
            frontier_phi_25_49_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1553 = frontier_phi_25_49_ladder_2;
        _1555 = frontier_phi_25_49_ladder_1;
        _1557 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_654, _655, _656), _1471);
        _1553 = _1541.x * cbModelParam._m0[1u].y;
        _1555 = _1541.y * cbModelParam._m0[1u].y;
        _1557 = _1541.z * cbModelParam._m0[1u].y;
    }
    float _1561 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _532);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1561 : min(cbModelParam._m0[25u].w, _1561));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1617 = fma(_718, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _710)) + cbModelParam._m0[21u].w;
        float _1621 = fma(_718, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _710)) + cbModelParam._m0[22u].w;
        float _1625 = fma(_718, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _710)) + cbModelParam._m0[23u].w;
        float _1628 = fma(_656, cbModelParam._m0[21u].z, fma(_655, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _654));
        float _1631 = fma(_656, cbModelParam._m0[22u].z, fma(_655, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _654));
        float _1634 = fma(_656, cbModelParam._m0[23u].z, fma(_655, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _654));
        float _1956;
        if (_1628 > 0.0)
        {
            _1956 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1956 = frontier_phi_37_33_ladder;
        }
        float _2277;
        if (_1631 > 0.0)
        {
            _2277 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2277 = frontier_phi_51_44_ladder;
        }
        float _2446;
        if (_1634 > 0.0)
        {
            _2446 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2446 = frontier_phi_65_60_ladder;
        }
        float _2448 = isnan(_2277) ? _1956 : (isnan(_1956) ? _2277 : min(_1956, _2277));
        float _2449 = isnan(_2446) ? _2448 : (isnan(_2448) ? _2446 : min(_2448, _2446));
        float _2453 = (_2449 * _1628) + _1617;
        float _2454 = (_2449 * _1631) + _1621;
        float _2455 = (_2449 * _1634) + _1625;
        float _2456 = _2449 * 9.9999997473787516355514526367188e-05;
        float _2457 = (-1.0) - _2456;
        float _2459 = _2456 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2455 > _2459) || ((_2455 < _2457) || ((_2454 > _2459) || ((_2454 < _2457) || ((_2453 < _2457) || (_2453 > _2459))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2455, cbModelParam._m0[17u].z, fma(_2454, cbModelParam._m0[17u].y, _2453 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2455, cbModelParam._m0[18u].z, fma(_2454, cbModelParam._m0[18u].y, _2453 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2455, cbModelParam._m0[19u].z, fma(_2454, cbModelParam._m0[19u].y, _2453 * cbModelParam._m0[19u].x))), _1562);
            frontier_phi_34_65_ladder = _2688.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2688.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2688.z * cbModelParam._m0[1u].z;
        }
        _1653 = frontier_phi_34_65_ladder_1;
        _1655 = frontier_phi_34_65_ladder;
        _1657 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_654, _655, _656), _1562);
        _1653 = _1637.x * cbModelParam._m0[1u].z;
        _1655 = _1637.y * cbModelParam._m0[1u].z;
        _1657 = _1637.z * cbModelParam._m0[1u].z;
    }
    float _1670 = (((_681 * _631) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1672 = (((_681 * _633) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1674 = (((_681 * _634) + _682) * _646) * ((cbModelParam._m0[1u].w * (_1657 - _1557)) + _1557);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    vec4 _1691 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_565, _566));
    float _1693 = _1691.w;
    float _1705 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1693);
    float _1706 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1693);
    float _1707 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1693);
    uvec4 _1711 = floatBitsToUint(cbInstanceData._m0[_606 + 5u]);
    uint _1713 = _1711.x * 14u;
    uint _1714 = _1713 + 13u;
    float _1719 = _646 + (-1.0);
    float _1722 = (cbLight._m0[_1714].x * _1719) + 1.0;
    float _1723 = (cbLight._m0[_1714].y * _1719) + 1.0;
    uint _1724 = _1713 + 5u;
    float _1730 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1734 = _1713 + 4u;
    float _1744 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1748 = _1713 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_529, _530, _531));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_529, _530, _531));
    float _3618 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3629 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1724].x * _1730) * _1769) + (((cbLight._m0[_1734].x * _1705) * _1744) * _1767);
    float _1777 = ((_1730 * cbLight._m0[_1724].y) * _1769) + (((cbLight._m0[_1734].y * _1706) * _1744) * _1767);
    float _1778 = ((_1730 * cbLight._m0[_1724].z) * _1769) + (((cbLight._m0[_1734].z * _1707) * _1744) * _1767);
    uint _1780 = _1713 + 8u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _532) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1713].x + _557;
    float _1796 = cbLight._m0[_1713].y + _558;
    float _1797 = cbLight._m0[_1713].z + _559;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1713].xyz));
    float _3640 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _1809 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _1810 = dot(vec3(_529, _530, _531), vec3(_1802, _1803, _1804));
    float _3662 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1802, _1803, _1804));
    float _3673 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1794 * _1794;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0)))) * 5.0);
    float _1831 = 0.959999978542327880859375 - _628;
    float _1833 = 0.959999978542327880859375 - _629;
    float _1834 = 0.959999978542327880859375 - _630;
    float _1841 = 1.0 - _1794;
    float _1852 = (0.5 / (((_1809 * ((_1808 * _1841) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1841) + _1794) * _1808))) * _1808;
    float _3684 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    uint _1868 = _1713 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _532) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1748].x + _557;
    float _1882 = cbLight._m0[_1748].y + _558;
    float _1883 = cbLight._m0[_1748].z + _559;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_529, _530, _531), vec3(cbLight._m0[_1748].xyz));
    float _3695 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _1895 = dot(vec3(_529, _530, _531), vec3(_1888, _1889, _1890));
    float _3706 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1888, _1889, _1890));
    float _3717 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * 5.0);
    float _1921 = 1.0 - _1880;
    float _1931 = (0.5 / (((_1809 * ((_1894 * _1921) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1921) + _1880) * _1894))) * _1894;
    float _3728 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1943 = (((((_1914 * _1831) + _631) * cbLight._m0[_1868].x) * _1933) * _1730) + ((((cbLight._m0[_1780].x * _1705) * ((_1830 * _1831) + _631)) * _1854) * _1744);
    float _1944 = (((((_1914 * _1833) + _633) * cbLight._m0[_1868].y) * _1933) * _1730) + ((((cbLight._m0[_1780].y * _1706) * ((_1830 * _1833) + _633)) * _1854) * _1744);
    float _1945 = (((((_1914 * _1834) + _634) * cbLight._m0[_1868].z) * _1933) * _1730) + ((((cbLight._m0[_1780].z * _1707) * ((_1830 * _1834) + _634)) * _1854) * _1744);
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    if (_1711.y == 0u)
    {
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2000;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2000;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2000;
        uvec4 _2015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2016 = _2015.x;
        uint _2027 = uint((float(_2015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2016))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2016)));
        float _2037 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2038 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        uint _2041 = uint(isnan(14.0) ? _2038 : (isnan(_2038) ? 14.0 : min(_2038, 14.0)));
        uvec4 _2046 = texelFetch(g_lightClusterGridBuffer, int(((_2041 << 2u) + (_2027 << 6u)) >> 2u));
        uint _2047 = _2046.x;
        uint _2048 = _2015.z;
        float _2138;
        float _2140;
        float _2142;
        float _2144;
        float _2146;
        float _2148;
        if (((((1u << ((_2048 >> 4u) & 15u)) + 4294967295u) & _2047) == 0u) || ((_2048 & 240u) == 0u))
        {
            _2138 = 0.0;
            _2140 = 0.0;
            _2142 = 0.0;
            _2144 = 0.0;
            _2146 = 0.0;
            _2148 = 0.0;
        }
        else
        {
            float _2139;
            float _2141;
            float _2143;
            float _2145;
            float _2147;
            float _2149;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            float _2317 = 0.0;
            float _2318 = 0.0;
            float _2319 = 0.0;
            uint _2320 = 0u;
            uint _2329;
            bool _2330;
            for (;;)
            {
                _2329 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2320 << 2u)) >> 2u)).x;
                _2330 = _2329 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2330)
                {
                    frontier_phi_62_pred = _2315;
                    frontier_phi_62_pred_1 = _2314;
                    frontier_phi_62_pred_2 = _2316;
                    frontier_phi_62_pred_3 = _2319;
                    frontier_phi_62_pred_4 = _2318;
                    frontier_phi_62_pred_5 = _2317;
                }
                else
                {
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    uint _2495;
                    _2489 = _2314;
                    _2490 = _2315;
                    _2491 = _2316;
                    _2492 = _2317;
                    _2493 = _2318;
                    _2494 = _2319;
                    _2495 = _2329;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    for (;;)
                    {
                        uint _2499 = uint(findLSB(_2495)) + (_2320 << 5u);
                        uint _2496 = (_2495 + 4294967295u) & _2495;
                        uint _2501 = _2499 * 48u;
                        vec4 _2515 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2501)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2501 + 3u)).x));
                        uint _2521 = (_2499 * 48u) + 4u;
                        vec4 _2534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2521)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 3u)).x));
                        uint _2540 = (_2499 * 48u) + 8u;
                        vec3 _2551 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x));
                        float _2555 = _2515.x - _2001;
                        float _2556 = _2515.y - _2002;
                        float _2557 = _2515.z - _2003;
                        float _2558 = dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557));
                        float _2561 = inversesqrt(_2558);
                        float _2562 = _2561 * _2555;
                        float _2563 = _2561 * _2556;
                        float _2564 = _2561 * _2557;
                        float _2565 = dot(vec3(_587, _590, _593), vec3(_2562, _2563, _2564));
                        float _2570 = 1.0 - (_2558 * _2515.w);
                        float _3749 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2571 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
                        float _2572 = sqrt(_2558) * _2534.w;
                        float _2575 = 1.39999997615814208984375 / (_2572 + 1.39999997615814208984375);
                        float _2576 = _2575 * _2575;
                        float _2579 = ((1.0 - _2576) * _2565) + _2576;
                        float _2582 = _2572 * _2572;
                        float _2586 = ((isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0))) * _2571) / ((_2582 * 0.699999988079071044921875) + 1.0);
                        float _2590 = (-0.0) - _2001;
                        float _2591 = (-0.0) - _2002;
                        float _2592 = (-0.0) - _2003;
                        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
                        float _2597 = _2596 * _2590;
                        float _2598 = _2596 * _2591;
                        float _2599 = _2596 * _2592;
                        float _2607 = exp2(log2(1.0 / ((_2582 * 3.5) + 5.0)) * 0.25);
                        float _2608 = 1.0 - _662;
                        float _2615 = sqrt(1.0 - ((1.0 - (_2608 * _2608)) * (1.0 - (_2607 * _2607))));
                        float _2616 = _2615 * _2615;
                        float _2617 = _2616 * _2616;
                        float _2618 = _2597 + _2562;
                        float _2619 = _2598 + _2563;
                        float _2620 = _2599 + _2564;
                        float _2624 = inversesqrt(dot(vec3(_2618, _2619, _2620), vec3(_2618, _2619, _2620)));
                        float _2628 = dot(vec3(_587, _590, _593), vec3(_2597, _2598, _2599));
                        float _3765 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                        float _2631 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
                        float _2632 = dot(vec3(_587, _590, _593), vec3(_2624 * _2618, _2624 * _2619, _2624 * _2620));
                        float _3776 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                        float _2635 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
                        float _2639 = ((_2635 * _2635) * (_2617 + (-1.0))) + 1.0;
                        float _2640 = _2575 * _2616;
                        float _2641 = _2640 * _2640;
                        float _2644 = ((1.0 - _2641) * _2565) + _2641;
                        float _3787 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2645 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                        float _2646 = 1.0 - _2616;
                        float _2656 = (0.5 / (((_2645 * ((_2631 * _2646) + _2616)) + 9.9999999392252902907785028219223e-09) + (((_2645 * _2646) + _2616) * _2631))) * _2645;
                        float _3798 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2667 = (((_2617 * 3.1415927410125732421875) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) / ((_2639 * _2639) * ((_2582 * 2.1991131305694580078125) + 3.141590118408203125))) * _2571;
                        _2398 = (_2586 * _2534.x) + _2492;
                        _2399 = (_2586 * _2534.y) + _2493;
                        _2400 = (_2586 * _2534.z) + _2494;
                        _2395 = (_2667 * _2551.x) + _2489;
                        _2396 = (_2667 * _2551.y) + _2490;
                        _2397 = (_2667 * _2551.z) + _2491;
                        if (_2496 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2489 = _2395;
                            _2490 = _2396;
                            _2491 = _2397;
                            _2492 = _2398;
                            _2493 = _2399;
                            _2494 = _2400;
                            _2495 = _2496;
                        }
                    }
                    frontier_phi_62_pred = _2396;
                    frontier_phi_62_pred_1 = _2395;
                    frontier_phi_62_pred_2 = _2397;
                    frontier_phi_62_pred_3 = _2400;
                    frontier_phi_62_pred_4 = _2399;
                    frontier_phi_62_pred_5 = _2398;
                }
                _2141 = frontier_phi_62_pred;
                _2139 = frontier_phi_62_pred_1;
                _2143 = frontier_phi_62_pred_2;
                _2149 = frontier_phi_62_pred_3;
                _2147 = frontier_phi_62_pred_4;
                _2145 = frontier_phi_62_pred_5;
                uint _2321 = _2320 + 1u;
                if (_2321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2314 = _2139;
                    _2315 = _2141;
                    _2316 = _2143;
                    _2317 = _2145;
                    _2318 = _2147;
                    _2319 = _2149;
                    _2320 = _2321;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2138 = _2139;
            _2140 = _2141;
            _2142 = _2143;
            _2144 = _2145;
            _2146 = _2147;
            _2148 = _2149;
        }
        uvec4 _2152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2153 = _2152.z;
        uint _2155 = (_2153 >> 8u) & 15u;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        if (((4294967295u << _2155) & _2047) == 0u)
        {
            _2282 = _2138;
            _2284 = _2140;
            _2286 = _2142;
            _2288 = _2144;
            _2290 = _2146;
            _2292 = _2148;
        }
        else
        {
            float _2307 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _2308 = _2307 * _2001;
            float _2309 = _2307 * _2002;
            float _2310 = _2307 * _2003;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2155 < ((_2153 >> 12u) & 15u))
            {
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2291;
                float _2293;
                float _2472 = _2138;
                float _2473 = _2140;
                float _2474 = _2142;
                float _2475 = _2144;
                float _2476 = _2146;
                float _2477 = _2148;
                uint _2478 = _2155;
                uint _2487;
                bool _2488;
                for (;;)
                {
                    _2487 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2478 << 2u)) >> 2u)).x;
                    _2488 = _2487 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2488)
                    {
                        frontier_phi_71_pred = _2473;
                        frontier_phi_71_pred_1 = _2472;
                        frontier_phi_71_pred_2 = _2477;
                        frontier_phi_71_pred_3 = _2476;
                        frontier_phi_71_pred_4 = _2475;
                        frontier_phi_71_pred_5 = _2474;
                    }
                    else
                    {
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2698;
                        float _2986;
                        float _2987;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2706 = _2472;
                        float _2707 = _2473;
                        float _2708 = _2474;
                        float _2709 = _2475;
                        float _2710 = _2476;
                        float _2711 = _2477;
                        uint _2712 = _2487;
                        uint _2713;
                        vec4 _2738;
                        float _2739;
                        vec4 _2754;
                        vec3 _2766;
                        vec4 _2781;
                        vec4 _2796;
                        float _2842;
                        bool _2843;
                        for (;;)
                        {
                            uint _2723 = ((_2478 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2712));
                            _2713 = (_2712 + 4294967295u) & _2712;
                            uint _2725 = _2723 * 40u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            _2739 = _2738.w;
                            uint _2741 = (_2723 * 40u) + 4u;
                            _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            uint _2756 = (_2723 * 40u) + 8u;
                            _2766 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x));
                            uint _2768 = (_2723 * 40u) + 16u;
                            _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            uint _2783 = (_2723 * 40u) + 20u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            uint _2798 = (_2723 * 40u) + 24u;
                            vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2817 = (_2723 * 40u) + 28u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            _2842 = fma(_2003, _2830.z, fma(_2002, _2830.y, _2830.x * _2001)) + _2830.w;
                            _2843 = !((fma(_2003, _2811.z, fma(_2002, _2811.y, _2811.x * _2001)) + _2811.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2843)
                            {
                                float _2870 = _2738.x - _2001;
                                float _2871 = _2738.y - _2002;
                                float _2872 = _2738.z - _2003;
                                float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                                float _2876 = inversesqrt(_2873);
                                float _2877 = _2876 * _2870;
                                float _2878 = _2876 * _2871;
                                float _2879 = _2876 * _2872;
                                float _2883 = 1.0 - (_2873 / (_2739 * _2739));
                                float _3809 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2884 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
                                float _2888 = sqrt(_2873) * _2754.w;
                                float _2890 = 1.39999997615814208984375 / (_2888 + 1.39999997615814208984375);
                                float _2891 = _2890 * _2890;
                                float _2894 = ((1.0 - _2891) * dot(vec3(_2877, _2878, _2879), vec3(_587, _590, _593))) + _2891;
                                float _2897 = _2888 * _2888;
                                float _2901 = (fma(_2003, _2781.z, fma(_2002, _2781.y, _2781.x * _2001)) + _2781.w) / _2842;
                                float _2902 = (fma(_2003, _2796.z, fma(_2002, _2796.y, _2796.x * _2001)) + _2796.w) / _2842;
                                float _2906 = 1.0 - dot(vec2(_2901, _2902), vec2(_2901, _2902));
                                float _3825 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
                                float _2907 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
                                float _2908 = _2907 * (((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2884) / ((_2897 * 0.699999988079071044921875) + 1.0));
                                float _2920 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                                float _2921 = 1.0 - _662;
                                float _2928 = sqrt(1.0 - ((1.0 - (_2921 * _2921)) * (1.0 - (_2920 * _2920))));
                                float _2929 = _2928 * _2928;
                                float _2930 = _2929 * _2929;
                                float _2931 = _2877 - _2308;
                                float _2932 = _2878 - _2309;
                                float _2933 = _2879 - _2310;
                                float _2937 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
                                float _2941 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2308, (-0.0) - _2309, (-0.0) - _2310));
                                float _3836 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2944 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2945 = dot(vec3(_587, _590, _593), vec3(_2937 * _2931, _2937 * _2932, _2937 * _2933));
                                float _3847 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
                                float _2948 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
                                float _2952 = ((_2948 * _2948) * (_2930 + (-1.0))) + 1.0;
                                float _2953 = _2890 * _2929;
                                float _2954 = _2953 * _2953;
                                float _2960 = ((1.0 - _2954) * dot(vec3(_587, _590, _593), vec3(_2877, _2878, _2879))) + _2954;
                                float _3858 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2961 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2962 = 1.0 - _2929;
                                float _2972 = (0.5 / (((_2961 * ((_2944 * _2962) + _2929)) + 9.9999999392252902907785028219223e-09) + (((_2961 * _2962) + _2929) * _2944))) * _2961;
                                float _3869 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2982 = (_2907 * _2884) * (((_2930 * 3.1415927410125732421875) * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) / ((_2952 * _2952) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2982 * _2766.y;
                                frontier_phi_77_pred_1 = _2982 * _2766.x;
                                frontier_phi_77_pred_2 = _2908 * _2754.z;
                                frontier_phi_77_pred_3 = _2908 * _2754.y;
                                frontier_phi_77_pred_4 = _2908 * _2754.x;
                                frontier_phi_77_pred_5 = _2982 * _2766.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2987 = frontier_phi_77_pred;
                            _2986 = frontier_phi_77_pred_1;
                            _2991 = frontier_phi_77_pred_2;
                            _2990 = frontier_phi_77_pred_3;
                            _2989 = frontier_phi_77_pred_4;
                            _2988 = frontier_phi_77_pred_5;
                            _2696 = _2989 + _2709;
                            _2697 = _2990 + _2710;
                            _2698 = _2991 + _2711;
                            _2693 = _2986 + _2706;
                            _2694 = _2987 + _2707;
                            _2695 = _2988 + _2708;
                            if (_2713 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2698;
                                _2712 = _2713;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2694;
                        frontier_phi_71_pred_1 = _2693;
                        frontier_phi_71_pred_2 = _2698;
                        frontier_phi_71_pred_3 = _2697;
                        frontier_phi_71_pred_4 = _2696;
                        frontier_phi_71_pred_5 = _2695;
                    }
                    _2285 = frontier_phi_71_pred;
                    _2283 = frontier_phi_71_pred_1;
                    _2293 = frontier_phi_71_pred_2;
                    _2291 = frontier_phi_71_pred_3;
                    _2289 = frontier_phi_71_pred_4;
                    _2287 = frontier_phi_71_pred_5;
                    uint _2479 = _2478 + 1u;
                    if (_2479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2472 = _2283;
                        _2473 = _2285;
                        _2474 = _2287;
                        _2475 = _2289;
                        _2476 = _2291;
                        _2477 = _2293;
                        _2478 = _2479;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2293;
                frontier_phi_53_54_ladder_1 = _2289;
                frontier_phi_53_54_ladder_2 = _2287;
                frontier_phi_53_54_ladder_3 = _2285;
                frontier_phi_53_54_ladder_4 = _2283;
                frontier_phi_53_54_ladder_5 = _2291;
            }
            else
            {
                frontier_phi_53_54_ladder = _2148;
                frontier_phi_53_54_ladder_1 = _2144;
                frontier_phi_53_54_ladder_2 = _2142;
                frontier_phi_53_54_ladder_3 = _2140;
                frontier_phi_53_54_ladder_4 = _2138;
                frontier_phi_53_54_ladder_5 = _2146;
            }
            _2282 = frontier_phi_53_54_ladder_4;
            _2284 = frontier_phi_53_54_ladder_3;
            _2286 = frontier_phi_53_54_ladder_2;
            _2288 = frontier_phi_53_54_ladder_1;
            _2290 = frontier_phi_53_54_ladder_5;
            _2292 = frontier_phi_53_54_ladder;
        }
        float _2297 = isnan(1.0) ? _646 : (isnan(_646) ? 1.0 : min(_646, 1.0));
        _2060 = (_2297 * _2288) + _1776;
        _2062 = (_2297 * _2290) + _1777;
        _2064 = (_2297 * _2292) + _1778;
        _2066 = ((_2282 * _631) * _2297) + _1943;
        _2068 = ((_2284 * _633) * _2297) + _1944;
        _2070 = ((_2286 * _634) * _2297) + _1945;
    }
    else
    {
        _2060 = _1776;
        _2062 = _1777;
        _2064 = _1778;
        _2066 = _1943;
        _2068 = _1944;
        _2070 = _1945;
    }
    float _3885 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3896 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3907 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _2087 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2060 + ((isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))) * _646))) + ((_2066 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    float _2088 = ((isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_2062 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _646))) + ((_2068 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    float _2089 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_2064 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _646))) + ((_2070 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1460)) * cbPerFrame._m0[3u].x);
    uint _2093 = _606 + 6u;
    float _2101 = _565 / cbSceneParam._m0[86u].x;
    float _2102 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2116 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2101, _2102, (log2((isnan(cbSceneParam._m0[77u].w) ? _552 : (isnan(_552) ? cbSceneParam._m0[77u].w : min(_552, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2118 = _2116.x;
    float _2119 = _2116.y;
    float _2120 = _2116.z;
    float _2121 = _2116.w;
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    if (_552 > cbSceneParam._m0[78u].w)
    {
        float _2163 = isnan(_552) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _552 : min(cbSceneParam._m0[80u].w, _552));
        float _2164 = _2163 / _552;
        float _2175 = _2164 * _259;
        float _2176 = _260 * _2164;
        float _2177 = (-0.0) - _2176;
        float _2178 = _2164 * _261;
        float _2180 = (cbSceneParam._m0[77u].w * _2177) / _2163;
        float _2181 = _2180 + cbSceneParam._m0[79u].w;
        float _2182 = cbSceneParam._m0[79u].w - _2176;
        float _2188 = sqrt(((_2175 * _2175) + (_2176 * _2176)) + (_2178 * _2178));
        float _2191 = (1.0 - (cbSceneParam._m0[77u].w / _2163)) * _2188;
        float _2197 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2199 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2408;
        if (abs((_2177 - _2180) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2408 = ((((_2181 > 0.0) ? exp2(_2197 * _2181) : (2.0 - exp2(_2199 * _2181))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2191;
        }
        else
        {
            float _2343 = 1.0 / cbSceneParam._m0[80u].x;
            float _2344 = isnan(_2182) ? _2181 : (isnan(_2181) ? _2182 : max(_2181, _2182));
            float _2345 = isnan(_2182) ? _2181 : (isnan(_2181) ? _2182 : min(_2181, _2182));
            float _2354 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : min(_2344, 0.0));
            float _2355 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : min(_2345, 0.0));
            _2408 = ((abs(_2188 / _2177) * cbSceneParam._m0[80u].y) * ((((_2354 - _2355) * 2.0) - ((exp2(_2197 * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)))) - exp2(_2197 * (isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0))))) * _2343)) - ((exp2(_2199 * _2354) - exp2(_2199 * _2355)) * _2343))) + (_2191 * cbSceneParam._m0[80u].z);
        }
        vec4 _2410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2101, _2102, 1.0), 0.0);
        float _2419 = exp2((_2408 * (-1.44269502162933349609375)) * (1.0 - _2410.w));
        float _2420 = log2(_2419);
        float _2436 = log2(_2121);
        _2201 = (exp2(_2436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].x)) * _2410.x) / cbSceneParam._m0[78u].x)) + _2118;
        _2203 = (exp2(_2436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].y)) * _2410.y) / cbSceneParam._m0[78u].y)) + _2119;
        _2205 = (exp2(_2436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].z)) * _2410.z) / cbSceneParam._m0[78u].z)) + _2120;
        _2207 = _2419 * _2121;
    }
    else
    {
        _2201 = _2118;
        _2203 = _2119;
        _2205 = _2120;
        _2207 = _2121;
    }
    float _2219 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2220 = _2219 == 3.0;
    float _2221 = log2(_2207);
    float _2228 = exp2(_2221 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0)));
    float _2229 = exp2(_2221 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0)));
    float _2230 = exp2(_2221 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0)));
    float _2239 = (_2219 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2239 * (_2220 ? _2228 : (_2228 + (cbSceneParam._m0[72u].w * _2201)));
    SV_Target.y = _2239 * (_2220 ? _2229 : (_2229 + (cbSceneParam._m0[72u].w * _2203)));
    SV_Target.z = _2239 * (_2220 ? _2230 : (_2230 + (cbSceneParam._m0[72u].w * _2205)));
    SV_Target.w = cbInstanceData._m0[_2093].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2093].w;
}


