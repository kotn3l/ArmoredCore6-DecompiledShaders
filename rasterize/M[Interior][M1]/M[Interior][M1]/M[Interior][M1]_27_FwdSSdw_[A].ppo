#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _430;
float _3285;
float _3286;
float _3287;
float _3288;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _345 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _361 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _368 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _377 = cbMtdParam._m0[23u].x + _265;
    float _378 = cbMtdParam._m0[23u].y + _266;
    float _379 = cbMtdParam._m0[23u].z + _267;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_361 * _194, _361 * _195, _361 * _196));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_368 * _208, _368 * _209, _368 * _210));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _399 * _395;
    float _405 = ((cbMtdParam._m0[19u].w * _393) * _399) + (_353 * cbMtdParam._m0[20u].y);
    float _406 = ((cbMtdParam._m0[20u].x * _394) * _399) + (_355 * cbMtdParam._m0[20u].z);
    float _409 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _410 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _428;
    float _431;
    float _433;
    if (_405 > 0.0)
    {
        float _414 = (1.0 - _409) / _405;
        _428 = _414;
        _431 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_414 * _400)) * 0.16666667163372039794921875;
        _433 = (fract((_414 * _406) + _410) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_405 < 0.0)
        {
            float _429 = ((-0.0) - _409) / _405;
            frontier_phi_3_2_ladder = _429;
            frontier_phi_3_2_ladder_1 = (fract((_429 * _406) + _410) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_429 * _400) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _430;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _428 = frontier_phi_3_2_ladder;
        _431 = frontier_phi_3_2_ladder_2;
        _433 = frontier_phi_3_2_ladder_1;
    }
    float _459;
    float _461;
    float _463;
    if (_406 > 0.0)
    {
        float _446 = (1.0 - _410) / _406;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_446 < _428)
        {
            frontier_phi_8_5_ladder = (fract(_446 * _400) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_446 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _446;
        }
        else
        {
            frontier_phi_8_5_ladder = _433;
            frontier_phi_8_5_ladder_1 = _431;
            frontier_phi_8_5_ladder_2 = _428;
        }
        _459 = frontier_phi_8_5_ladder_2;
        _461 = frontier_phi_8_5_ladder_1;
        _463 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_406 < 0.0)
        {
            float _460 = ((-0.0) - _410) / _406;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_460 < _428)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_460 * _400) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_460 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _460;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _433;
                frontier_phi_8_6_ladder_9_ladder_1 = _431;
                frontier_phi_8_6_ladder_9_ladder_2 = _428;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _433;
            frontier_phi_8_6_ladder_1 = _431;
            frontier_phi_8_6_ladder_2 = _428;
        }
        _459 = frontier_phi_8_6_ladder_2;
        _461 = frontier_phi_8_6_ladder_1;
        _463 = frontier_phi_8_6_ladder;
    }
    float _467 = (_400 > 0.0) ? (cbMtdParam._m0[16u].w / _400) : 5000.0;
    float _480;
    float _481;
    if (_467 < _459)
    {
        _480 = ((_409 + cbMtdParam._m0[17u].x) + (_467 * _405)) * 0.16666667163372039794921875;
        _481 = (((_467 * _406) + _410) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _480 = _461;
        _481 = _463;
    }
    vec4 _483 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_480, _481));
    float _488 = _483.x * cbMtdParam._m0[13u].x;
    float _489 = _483.y * cbMtdParam._m0[13u].y;
    float _490 = _483.z * cbMtdParam._m0[13u].z;
    float _495 = 0.5 - (_292 * 0.5);
    float _505 = (((_488 - _305) - (_488 * _292)) * _495) + _305;
    float _506 = (((_489 - _307) - (_489 * _292)) * _495) + _307;
    float _507 = (((_490 - _309) - (_490 * _292)) * _495) + _309;
    vec4 _519 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _521 = _519.x;
    vec4 _533 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _537 = _533.z;
    float _540 = (_533.x * 2.0) + (-1.0);
    float _541 = (_533.y * 2.0) + (-1.0);
    float _542 = dot(vec2(_540, _541), vec2(_540, _541));
    float _3297 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))));
    float _548 = _537 * _292;
    float _558 = (cbMtdParam._m0[15u].w * ((_349 - _548) + ((_537 - _349) * _292))) + _548;
    float _566 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _292))) + _540;
    float _567 = (cbMtdParam._m0[16u].x * (_355 - (_355 * _292))) + _541;
    float _570 = fma(_547, _201, fma(_567, _208, _566 * _194));
    float _573 = fma(_547, _202, fma(_567, _209, _566 * _195));
    float _576 = fma(_547, _203, fma(_567, _210, _566 * _196));
    float _580 = inversesqrt(dot(vec3(_570, _573, _576), vec3(_570, _573, _576)));
    float _581 = _580 * _570;
    float _582 = _580 * _573;
    float _583 = _580 * _576;
    float _3308 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _584 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    float _3319 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3330 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _3341 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _3352 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _588 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _604 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _609 = _265 * _608;
    float _610 = _266 * _608;
    float _611 = _267 * _608;
    vec4 _616 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _618 = _616.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _798 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _804 = (cbMatDynParam._m0[5u].x * _798) + cbMatDynParam._m0[5u].y;
        float _3363 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _809 = (cbMatDynParam._m0[5u].z * _798) + cbMatDynParam._m0[5u].w;
        float _3374 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) - _805)) + _805) < ((_618 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _636 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _637 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _656 = fma(_583, cbSceneParam._m0[5u].z, fma(_582, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _581));
    float _659 = fma(_583, cbSceneParam._m0[6u].z, fma(_582, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _581));
    float _662 = fma(_583, cbSceneParam._m0[7u].z, fma(_582, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _581));
    uint _675 = uint(roundEven(NORMAL.w)) * 13u;
    uint _676 = _675 + 9u;
    uint _677 = _676 + uint(cbMatDynParam._m0[0u].w);
    float _683 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_677].x;
    float _684 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_677].y;
    float _685 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0)))) * cbInstanceData._m0[_677].z;
    float _3385 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _3396 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
    float _3407 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _688 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _689 = 1.0 - _588;
    float _690 = _686 * _689;
    float _691 = _687 * _689;
    float _692 = _688 * _689;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _588;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _588;
    float _699 = (_688 + (-0.039999999105930328369140625)) * _588;
    float _700 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    float _703 = _699 + 0.039999999105930328369140625;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _636, cbSceneParam._m0[86u].y * _637));
    float _715 = _712.x * TEXCOORD.z;
    float _716 = dot(vec3(_581, _582, _583), vec3(_609, _610, _611));
    float _719 = _716 * 2.0;
    float _723 = (_719 * _581) - _609;
    float _724 = (_719 * _582) - _610;
    float _725 = (_719 * _583) - _611;
    float _729 = abs(dot(vec3(_609, _610, _611), vec3(_581, _582, _583)));
    float _3418 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _731 = sqrt(_584);
    float _744 = exp2((_731 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_731 * 3.0));
    float _750 = (1.0 - _744) * ((_731 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _751 = _744 * _731;
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _847 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _851 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _875 = _779 + _581;
        float _876 = _783 + _582;
        float _877 = _787 + _583;
        float _887 = fma(_877, cbModelParam._m0[26u].z, fma(_876, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _875)) - _843;
        float _888 = fma(_877, cbModelParam._m0[27u].z, fma(_876, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _875)) - _847;
        float _889 = fma(_877, cbModelParam._m0[28u].z, fma(_876, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _875)) - _851;
        float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
        float _906 = ((_893 * _887) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_893 * _888) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_893 * _889) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_906, _907, _908), 0.0);
        float _945 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_911.x + (-0.5));
        float _947 = _945 * (_911.y + (-0.5));
        float _948 = _945 * (_911.z + (-0.5));
        float _955 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_918.x + (-0.5));
        float _957 = _955 * (_918.y + (-0.5));
        float _958 = _955 * (_918.z + (-0.5));
        float _965 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_925.x + (-0.5));
        float _967 = _965 * (_925.y + (-0.5));
        float _968 = _965 * (_925.z + (-0.5));
        float _975 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_932.x + (-0.5));
        float _977 = _975 * (_932.y + (-0.5));
        float _978 = _975 * (_932.z + (-0.5));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = _946 * 0.5;
        float _983 = _956 * 0.5;
        float _984 = _966 * 0.5;
        float _985 = dot(vec3(_982, _983, _984), vec3(_982, _983, _984));
        float _990 = (_985 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_985);
        float _999 = (dot(vec3(_581, _582, _583), vec3(_990 * _982, _990 * _983, _990 * _984)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1009 = sqrt(((_983 * _983) + (_982 * _982)) + (_984 * _984)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3466 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_1011 + 1.0))) + _1016) * _979;
        float _1026 = _947 * 0.5;
        float _1027 = _957 * 0.5;
        float _1028 = _967 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_581, _582, _583), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3499 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1053 + 1.0))) + _1058) * _980;
        float _1068 = _948 * 0.5;
        float _1069 = _958 * 0.5;
        float _1070 = _968 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_581, _582, _583), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3532 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1095 + 1.0))) + _1100) * _981;
        _1117 = _948;
        _1118 = _947;
        _1119 = _946;
        _1120 = _958;
        _1121 = _957;
        _1122 = _956;
        _1123 = _968;
        _1124 = _967;
        _1125 = _966;
        _1126 = _981;
        _1127 = _980;
        _1128 = _979;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _430;
        _1118 = _430;
        _1119 = _430;
        _1120 = _430;
        _1121 = _430;
        _1122 = _430;
        _1123 = _430;
        _1124 = _430;
        _1125 = _430;
        _1126 = _430;
        _1127 = _430;
        _1128 = _430;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1160 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1164 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1168 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1191 = _779 + _581;
        float _1192 = _783 + _582;
        float _1193 = _787 + _583;
        float _1203 = fma(_1193, cbModelParam._m0[30u].z, fma(_1192, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191)) - _1160;
        float _1204 = fma(_1193, cbModelParam._m0[31u].z, fma(_1192, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191)) - _1164;
        float _1205 = fma(_1193, cbModelParam._m0[32u].z, fma(_1192, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191)) - _1168;
        float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
        float _1222 = ((_1209 * _1203) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1160 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1209 * _1204) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1164 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1224 = ((_1209 * _1205) / cbModelParam._m0[35u].z) + ((((((_1168 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1222, _1223, _1224), 0.0);
        float _1259 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1260 = _1259 * (_1226.x + (-0.5));
        float _1261 = _1259 * (_1226.y + (-0.5));
        float _1262 = _1259 * (_1226.z + (-0.5));
        float _1269 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1233.x + (-0.5));
        float _1271 = _1269 * (_1233.y + (-0.5));
        float _1272 = _1269 * (_1233.z + (-0.5));
        float _1279 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1240.x + (-0.5));
        float _1281 = _1279 * (_1240.y + (-0.5));
        float _1282 = _1279 * (_1240.z + (-0.5));
        float _1289 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1247.x + (-0.5));
        float _1291 = _1289 * (_1247.y + (-0.5));
        float _1292 = _1289 * (_1247.z + (-0.5));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = _1260 * 0.5;
        float _1297 = _1270 * 0.5;
        float _1298 = _1280 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_581, _582, _583), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3595 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1323 + 1.0))) + _1328) * _1293;
        float _1338 = _1261 * 0.5;
        float _1339 = _1271 * 0.5;
        float _1340 = _1281 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_581, _582, _583), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _3628 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1365 + 1.0))) + _1370) * _1294;
        float _1380 = _1262 * 0.5;
        float _1381 = _1272 * 0.5;
        float _1382 = _1282 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_581, _582, _583), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _3661 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1407 + 1.0))) + _1412) * _1295;
        _1429 = _1262;
        _1430 = _1261;
        _1431 = _1260;
        _1432 = _1272;
        _1433 = _1271;
        _1434 = _1270;
        _1435 = _1282;
        _1436 = _1281;
        _1437 = _1280;
        _1438 = _1295;
        _1439 = _1294;
        _1440 = _1293;
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1443 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _430;
        _1430 = _430;
        _1431 = _430;
        _1432 = _430;
        _1433 = _430;
        _1434 = _430;
        _1435 = _430;
        _1436 = _430;
        _1437 = _430;
        _1438 = _430;
        _1439 = _430;
        _1440 = _430;
        _1441 = 0.0;
        _1442 = 0.0;
        _1443 = 0.0;
    }
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1129)) + _1129;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1130)) + _1130;
    float _1455 = (cbModelParam._m0[1u].x * (_1443 - _1131)) + _1131;
    float _1476 = fma(_1455, cbSceneParam._m0[89u].z, fma(_1454, cbSceneParam._m0[89u].y, _1453 * cbSceneParam._m0[89u].x));
    float _1479 = fma(_1455, cbSceneParam._m0[90u].z, fma(_1454, cbSceneParam._m0[90u].y, _1453 * cbSceneParam._m0[90u].x));
    float _1482 = fma(_1455, cbSceneParam._m0[91u].z, fma(_1454, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1453));
    float _1497 = _723 * 0.5;
    float _1498 = _724 * 0.5;
    float _1499 = _725 * 0.5;
    float _1500 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1431, _1434, _1437, _1440));
    float _1503 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1506 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1540;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1513 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1517 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1521 = dot(vec4(_1497, _1498, _1499, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1528 = dot(vec4(cbModelParam._m0[39u]), vec4(_1497, _1498, _1499, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1551;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1542 = dot(vec4(cbModelParam._m0[40u]), vec4(_1497, _1498, _1499, 1.0));
        _1551 = dot(vec3(isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1542) ? 0.0 : (isnan(0.0) ? _1542 : max(0.0, _1542))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1551 = 1.0;
    }
    float _1555 = (_1551 * cbModelParam._m0[1u].x) + (_1540 * (1.0 - cbModelParam._m0[1u].x));
    float _1565 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _584);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1565 : min(cbModelParam._m0[25u].z, _1565));
    float _1647;
    float _1649;
    float _1651;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1614 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1618 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1622 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1625 = fma(_725, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723));
        float _1628 = fma(_725, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723));
        float _1631 = fma(_725, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723));
        float _1659;
        if (_1625 > 0.0)
        {
            _1659 = abs((1.0 - _1614) / _1625);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1614 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1659 = frontier_phi_29_27_ladder;
        }
        float _2045;
        if (_1628 > 0.0)
        {
            _2045 = abs((1.0 - _1618) / _1628);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1618 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2045 = frontier_phi_38_34_ladder;
        }
        float _2353;
        if (_1631 > 0.0)
        {
            _2353 = abs((1.0 - _1622) / _1631);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1622 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2353 = frontier_phi_52_45_ladder;
        }
        float _2355 = isnan(_2045) ? _1659 : (isnan(_1659) ? _2045 : min(_1659, _2045));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1625) + _1614;
        float _2361 = (_2356 * _1628) + _1618;
        float _2362 = (_2356 * _1631) + _1622;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1566);
            frontier_phi_28_52_ladder = _2504.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2504.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2504.x * cbModelParam._m0[1u].y;
        }
        _1647 = frontier_phi_28_52_ladder_2;
        _1649 = frontier_phi_28_52_ladder_1;
        _1651 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_723, _724, _725), _1566);
        _1647 = _1635.x * cbModelParam._m0[1u].y;
        _1649 = _1635.y * cbModelParam._m0[1u].y;
        _1651 = _1635.z * cbModelParam._m0[1u].y;
    }
    float _1655 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _584);
    float _1656 = isnan(_1655) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1655 : min(cbModelParam._m0[25u].w, _1655));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1711 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1715 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1719 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1722 = fma(_725, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723));
        float _1725 = fma(_725, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723));
        float _1728 = fma(_725, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723));
        float _2050;
        if (_1722 > 0.0)
        {
            _2050 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2050 = frontier_phi_40_36_ladder;
        }
        float _2379;
        if (_1725 > 0.0)
        {
            _2379 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2379 = frontier_phi_54_47_ladder;
        }
        float _2569;
        if (_1728 > 0.0)
        {
            _2569 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2569 = frontier_phi_72_65_ladder;
        }
        float _2571 = isnan(_2379) ? _2050 : (isnan(_2050) ? _2379 : min(_2050, _2379));
        float _2572 = isnan(_2569) ? _2571 : (isnan(_2571) ? _2569 : min(_2571, _2569));
        float _2576 = (_2572 * _1722) + _1711;
        float _2577 = (_2572 * _1725) + _1715;
        float _2578 = (_2572 * _1728) + _1719;
        float _2579 = _2572 * 9.9999997473787516355514526367188e-05;
        float _2580 = (-1.0) - _2579;
        float _2582 = _2579 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2578 > _2582) || ((_2578 < _2580) || ((_2577 > _2582) || ((_2577 < _2580) || ((_2576 < _2580) || (_2576 > _2582))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2820 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2578, cbModelParam._m0[17u].z, fma(_2577, cbModelParam._m0[17u].y, _2576 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2578, cbModelParam._m0[18u].z, fma(_2577, cbModelParam._m0[18u].y, _2576 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2578, cbModelParam._m0[19u].z, fma(_2577, cbModelParam._m0[19u].y, _2576 * cbModelParam._m0[19u].x))), _1656);
            frontier_phi_37_72_ladder = _2820.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2820.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2820.x * cbModelParam._m0[1u].z;
        }
        _1747 = frontier_phi_37_72_ladder_2;
        _1749 = frontier_phi_37_72_ladder_1;
        _1751 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_723, _724, _725), _1656);
        _1747 = _1731.x * cbModelParam._m0[1u].z;
        _1749 = _1731.y * cbModelParam._m0[1u].z;
        _1751 = _1731.z * cbModelParam._m0[1u].z;
    }
    float _1764 = (((_750 * _700) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1747 - _1647)) + _1647);
    float _1766 = (((_750 * _702) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1749 - _1649)) + _1649);
    float _1768 = (((_750 * _703) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1751 - _1651)) + _1651);
    float _1771 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1766, cbSceneParam._m0[89u].y, _1764 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1766, cbSceneParam._m0[90u].y, _1764 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1766, cbSceneParam._m0[91u].y, _1764 * cbSceneParam._m0[91u].x));
    vec4 _1785 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_636, _637));
    float _1787 = _1785.w;
    float _1799 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1787);
    float _1800 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1787);
    float _1801 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1787);
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_675 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1813 = _715 + (-1.0);
    float _1816 = (cbLight._m0[_1808].x * _1813) + 1.0;
    float _1817 = (cbLight._m0[_1808].y * _1813) + 1.0;
    uint _1818 = _1807 + 5u;
    float _1824 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1828 = _1807 + 4u;
    float _1838 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1842 = _1807 | 1u;
    float _1853 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_581, _582, _583));
    float _1856 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_581, _582, _583));
    float _3797 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _3808 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1861 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * 0.3183098733425140380859375;
    float _1863 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * 0.3183098733425140380859375;
    float _1870 = ((cbLight._m0[_1818].x * _1824) * _1863) + (((cbLight._m0[_1828].x * _1799) * _1838) * _1861);
    float _1871 = ((_1824 * cbLight._m0[_1818].y) * _1863) + (((cbLight._m0[_1828].y * _1800) * _1838) * _1861);
    float _1872 = ((_1824 * cbLight._m0[_1818].z) * _1863) + (((cbLight._m0[_1828].z * _1801) * _1838) * _1861);
    uint _1874 = _1807 + 8u;
    float _1887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _584) * 0.949999988079071044921875);
    float _1888 = _1887 * _1887;
    float _1889 = cbLight._m0[_1807].x + _609;
    float _1890 = cbLight._m0[_1807].y + _610;
    float _1891 = cbLight._m0[_1807].z + _611;
    float _1895 = inversesqrt(dot(vec3(_1889, _1890, _1891), vec3(_1889, _1890, _1891)));
    float _1896 = _1895 * _1889;
    float _1897 = _1895 * _1890;
    float _1898 = _1895 * _1891;
    float _1899 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1807].xyz));
    float _3819 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1902 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _3830 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _1903 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _1904 = dot(vec3(_581, _582, _583), vec3(_1896, _1897, _1898));
    float _3841 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1896, _1897, _1898));
    float _3852 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1888 * _1888;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1924 = exp2(log2(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) * 5.0);
    float _1925 = 0.959999978542327880859375 - _697;
    float _1927 = 0.959999978542327880859375 - _698;
    float _1928 = 0.959999978542327880859375 - _699;
    float _1935 = 1.0 - _1888;
    float _1946 = (0.5 / (((_1903 * ((_1902 * _1935) + _1888)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _1935) + _1888) * _1902))) * _1902;
    float _3863 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1948 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    uint _1962 = _1807 + 9u;
    float _1973 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1842].w)) * _584) * 0.949999988079071044921875);
    float _1974 = _1973 * _1973;
    float _1975 = cbLight._m0[_1842].x + _609;
    float _1976 = cbLight._m0[_1842].y + _610;
    float _1977 = cbLight._m0[_1842].z + _611;
    float _1981 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
    float _1982 = _1981 * _1975;
    float _1983 = _1981 * _1976;
    float _1984 = _1981 * _1977;
    float _1985 = dot(vec3(_581, _582, _583), vec3(cbLight._m0[_1842].xyz));
    float _3874 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1988 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _1989 = dot(vec3(_581, _582, _583), vec3(_1982, _1983, _1984));
    float _3885 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1993 = dot(vec3(cbLight._m0[_1842].xyz), vec3(_1982, _1983, _1984));
    float _3896 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1997 = _1974 * _1974;
    float _2001 = ((_1992 * _1992) * (_1997 + (-1.0))) + 1.0;
    float _2008 = exp2(log2(1.0 - (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * 5.0);
    float _2015 = 1.0 - _1974;
    float _2025 = (0.5 / (((_1903 * ((_1988 * _2015) + _1974)) + 9.9999999392252902907785028219223e-09) + (((_1903 * _2015) + _1974) * _1988))) * _1988;
    float _3907 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * (_1997 / ((_2001 * _2001) * 3.141590118408203125));
    float _2037 = (((((_2008 * _1925) + _700) * cbLight._m0[_1962].x) * _2027) * _1824) + ((((cbLight._m0[_1874].x * _1799) * ((_1924 * _1925) + _700)) * _1948) * _1838);
    float _2038 = (((((_2008 * _1927) + _702) * cbLight._m0[_1962].y) * _2027) * _1824) + ((((cbLight._m0[_1874].y * _1800) * ((_1924 * _1927) + _702)) * _1948) * _1838);
    float _2039 = (((((_2008 * _1928) + _703) * cbLight._m0[_1962].z) * _2027) * _1824) + ((((cbLight._m0[_1874].z * _1801) * ((_1924 * _1928) + _703)) * _1948) * _1838);
    float _2154;
    float _2156;
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    if (_1805.y == 0u)
    {
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2094;
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2094;
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2094;
        uvec4 _2109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2110 = _2109.x;
        uint _2121 = uint((float(_2109.y) * floor(float(uint(cbSceneParam._m0[85u].y * _637) / _2110))) + floor(float(uint(cbSceneParam._m0[85u].x * _636) / _2110)));
        float _2131 = (log2(_2097 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2132 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        uint _2135 = uint(isnan(14.0) ? _2132 : (isnan(_2132) ? 14.0 : min(_2132, 14.0)));
        uvec4 _2140 = texelFetch(g_lightClusterGridBuffer, int(((_2135 << 2u) + (_2121 << 6u)) >> 2u));
        uint _2141 = _2140.x;
        uint _2142 = _2109.z;
        float _2232;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        if (((((1u << ((_2142 >> 4u) & 15u)) + 4294967295u) & _2141) == 0u) || ((_2142 & 240u) == 0u))
        {
            _2232 = 0.0;
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
        }
        else
        {
            float _2233;
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            uint _2422 = 0u;
            uint _2431;
            bool _2432;
            for (;;)
            {
                _2431 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2422 << 2u)) >> 2u)).x;
                _2432 = _2431 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2432)
                {
                    frontier_phi_67_pred = _2419;
                    frontier_phi_67_pred_1 = _2418;
                    frontier_phi_67_pred_2 = _2417;
                    frontier_phi_67_pred_3 = _2416;
                    frontier_phi_67_pred_4 = _2420;
                    frontier_phi_67_pred_5 = _2421;
                }
                else
                {
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    uint _2618;
                    _2612 = _2416;
                    _2613 = _2417;
                    _2614 = _2418;
                    _2615 = _2419;
                    _2616 = _2420;
                    _2617 = _2421;
                    _2618 = _2431;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    for (;;)
                    {
                        uint _2622 = uint(findLSB(_2618)) + (_2422 << 5u);
                        uint _2619 = (_2618 + 4294967295u) & _2618;
                        uint _2624 = _2622 * 48u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2644 = (_2622 * 48u) + 4u;
                        vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 3u)).x));
                        uint _2663 = (_2622 * 48u) + 8u;
                        vec3 _2674 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2663)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2663 + 2u)).x));
                        float _2678 = _2638.x - _2095;
                        float _2679 = _2638.y - _2096;
                        float _2680 = _2638.z - _2097;
                        float _2681 = dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680));
                        float _2684 = inversesqrt(_2681);
                        float _2685 = _2684 * _2678;
                        float _2686 = _2684 * _2679;
                        float _2687 = _2684 * _2680;
                        float _2688 = dot(vec3(_656, _659, _662), vec3(_2685, _2686, _2687));
                        float _2693 = 1.0 - (_2681 * _2638.w);
                        float _3928 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2694 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                        float _2695 = sqrt(_2681) * _2657.w;
                        float _2698 = 1.39999997615814208984375 / (_2695 + 1.39999997615814208984375);
                        float _2699 = _2698 * _2698;
                        float _2702 = ((1.0 - _2699) * _2688) + _2699;
                        float _2705 = _2695 * _2695;
                        float _2709 = ((isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0))) * _2694) / ((_2705 * 0.699999988079071044921875) + 1.0);
                        float _2713 = (-0.0) - _2095;
                        float _2714 = (-0.0) - _2096;
                        float _2715 = (-0.0) - _2097;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2720 = _2719 * _2713;
                        float _2721 = _2719 * _2714;
                        float _2722 = _2719 * _2715;
                        float _2730 = exp2(log2(1.0 / ((_2705 * 3.5) + 5.0)) * 0.25);
                        float _2731 = 1.0 - _731;
                        float _2738 = sqrt(1.0 - ((1.0 - (_2731 * _2731)) * (1.0 - (_2730 * _2730))));
                        float _2739 = _2738 * _2738;
                        float _2740 = _2739 * _2739;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2743 = _2722 + _2687;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2751 = dot(vec3(_656, _659, _662), vec3(_2720, _2721, _2722));
                        float _3944 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                        float _2755 = dot(vec3(_656, _659, _662), vec3(_2747 * _2741, _2747 * _2742, _2747 * _2743));
                        float _3955 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
                        float _2762 = ((_2758 * _2758) * (_2740 + (-1.0))) + 1.0;
                        float _2763 = _2698 * _2739;
                        float _2764 = _2763 * _2763;
                        float _2767 = ((1.0 - _2764) * _2688) + _2764;
                        float _3966 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2768 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                        float _2769 = 1.0 - _2739;
                        float _2779 = (0.5 / (((_2768 * ((_2754 * _2769) + _2739)) + 9.9999999392252902907785028219223e-09) + (((_2768 * _2769) + _2739) * _2754))) * _2768;
                        float _3977 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2790 = (((_2740 * 3.1415927410125732421875) * (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) / ((_2762 * _2762) * ((_2705 * 2.1991131305694580078125) + 3.141590118408203125))) * _2694;
                        _2516 = (_2709 * _2657.x) + _2615;
                        _2517 = (_2709 * _2657.y) + _2616;
                        _2518 = (_2709 * _2657.z) + _2617;
                        _2513 = (_2790 * _2674.x) + _2612;
                        _2514 = (_2790 * _2674.y) + _2613;
                        _2515 = (_2790 * _2674.z) + _2614;
                        if (_2619 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2612 = _2513;
                            _2613 = _2514;
                            _2614 = _2515;
                            _2615 = _2516;
                            _2616 = _2517;
                            _2617 = _2518;
                            _2618 = _2619;
                        }
                    }
                    frontier_phi_67_pred = _2516;
                    frontier_phi_67_pred_1 = _2515;
                    frontier_phi_67_pred_2 = _2514;
                    frontier_phi_67_pred_3 = _2513;
                    frontier_phi_67_pred_4 = _2517;
                    frontier_phi_67_pred_5 = _2518;
                }
                _2239 = frontier_phi_67_pred;
                _2237 = frontier_phi_67_pred_1;
                _2235 = frontier_phi_67_pred_2;
                _2233 = frontier_phi_67_pred_3;
                _2241 = frontier_phi_67_pred_4;
                _2243 = frontier_phi_67_pred_5;
                uint _2423 = _2422 + 1u;
                if (_2423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2416 = _2233;
                    _2417 = _2235;
                    _2418 = _2237;
                    _2419 = _2239;
                    _2420 = _2241;
                    _2421 = _2243;
                    _2422 = _2423;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2232 = _2233;
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
        }
        uvec4 _2246 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2247 = _2246.z;
        uint _2249 = (_2247 >> 8u) & 15u;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        if (((4294967295u << _2249) & _2141) == 0u)
        {
            _2384 = _2232;
            _2386 = _2234;
            _2388 = _2236;
            _2390 = _2238;
            _2392 = _2240;
            _2394 = _2242;
        }
        else
        {
            float _2409 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
            float _2410 = _2409 * _2095;
            float _2411 = _2409 * _2096;
            float _2412 = _2409 * _2097;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2249 < ((_2247 >> 12u) & 15u))
            {
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2595 = _2232;
                float _2596 = _2234;
                float _2597 = _2236;
                float _2598 = _2238;
                float _2599 = _2240;
                float _2600 = _2242;
                uint _2601 = _2249;
                uint _2610;
                bool _2611;
                for (;;)
                {
                    _2610 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2601 << 2u)) >> 2u)).x;
                    _2611 = _2610 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2611)
                    {
                        frontier_phi_81_pred = _2598;
                        frontier_phi_81_pred_1 = _2597;
                        frontier_phi_81_pred_2 = _2596;
                        frontier_phi_81_pred_3 = _2595;
                        frontier_phi_81_pred_4 = _2600;
                        frontier_phi_81_pred_5 = _2599;
                    }
                    else
                    {
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _2838 = _2595;
                        float _2839 = _2596;
                        float _2840 = _2597;
                        float _2841 = _2598;
                        float _2842 = _2599;
                        float _2843 = _2600;
                        uint _2844 = _2610;
                        uint _2845;
                        vec4 _2870;
                        float _2871;
                        vec4 _2886;
                        vec3 _2898;
                        vec4 _2913;
                        vec4 _2928;
                        float _2974;
                        bool _2975;
                        for (;;)
                        {
                            uint _2855 = ((_2601 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2844));
                            _2845 = (_2844 + 4294967295u) & _2844;
                            uint _2857 = _2855 * 40u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            _2871 = _2870.w;
                            uint _2873 = (_2855 * 40u) + 4u;
                            _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2888 = (_2855 * 40u) + 8u;
                            _2898 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x));
                            uint _2900 = (_2855 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2915 = (_2855 * 40u) + 20u;
                            _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            uint _2930 = (_2855 * 40u) + 24u;
                            vec4 _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2949 = (_2855 * 40u) + 28u;
                            vec4 _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            _2974 = fma(_2097, _2962.z, fma(_2096, _2962.y, _2962.x * _2095)) + _2962.w;
                            _2975 = !((fma(_2097, _2943.z, fma(_2096, _2943.y, _2943.x * _2095)) + _2943.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2975)
                            {
                                float _3002 = _2870.x - _2095;
                                float _3003 = _2870.y - _2096;
                                float _3004 = _2870.z - _2097;
                                float _3005 = dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004));
                                float _3008 = inversesqrt(_3005);
                                float _3009 = _3008 * _3002;
                                float _3010 = _3008 * _3003;
                                float _3011 = _3008 * _3004;
                                float _3015 = 1.0 - (_3005 / (_2871 * _2871));
                                float _3988 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _3020 = sqrt(_3005) * _2886.w;
                                float _3022 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                                float _3023 = _3022 * _3022;
                                float _3026 = ((1.0 - _3023) * dot(vec3(_3009, _3010, _3011), vec3(_656, _659, _662))) + _3023;
                                float _3029 = _3020 * _3020;
                                float _3033 = (fma(_2097, _2913.z, fma(_2096, _2913.y, _2913.x * _2095)) + _2913.w) / _2974;
                                float _3034 = (fma(_2097, _2928.z, fma(_2096, _2928.y, _2928.x * _2095)) + _2928.w) / _2974;
                                float _3038 = 1.0 - dot(vec2(_3033, _3034), vec2(_3033, _3034));
                                float _4004 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                                float _3040 = _3039 * (((isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))) * _3016) / ((_3029 * 0.699999988079071044921875) + 1.0));
                                float _3052 = exp2(log2(1.0 / ((_3029 * 3.5) + 5.0)) * 0.25);
                                float _3053 = 1.0 - _731;
                                float _3060 = sqrt(1.0 - ((1.0 - (_3053 * _3053)) * (1.0 - (_3052 * _3052))));
                                float _3061 = _3060 * _3060;
                                float _3062 = _3061 * _3061;
                                float _3063 = _3009 - _2410;
                                float _3064 = _3010 - _2411;
                                float _3065 = _3011 - _2412;
                                float _3069 = inversesqrt(dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065)));
                                float _3073 = dot(vec3(_656, _659, _662), vec3((-0.0) - _2410, (-0.0) - _2411, (-0.0) - _2412));
                                float _4015 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3076 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                                float _3077 = dot(vec3(_656, _659, _662), vec3(_3069 * _3063, _3069 * _3064, _3069 * _3065));
                                float _4026 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                                float _3084 = ((_3080 * _3080) * (_3062 + (-1.0))) + 1.0;
                                float _3085 = _3022 * _3061;
                                float _3086 = _3085 * _3085;
                                float _3092 = ((1.0 - _3086) * dot(vec3(_656, _659, _662), vec3(_3009, _3010, _3011))) + _3086;
                                float _4037 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3094 = 1.0 - _3061;
                                float _3104 = (0.5 / (((_3093 * ((_3076 * _3094) + _3061)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3061) * _3076))) * _3093;
                                float _4048 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3114 = (_3039 * _3016) * (((_3062 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_3084 * _3084) * ((_3029 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3040 * _2886.x;
                                frontier_phi_87_pred_1 = _3114 * _2898.z;
                                frontier_phi_87_pred_2 = _3114 * _2898.y;
                                frontier_phi_87_pred_3 = _3114 * _2898.x;
                                frontier_phi_87_pred_4 = _3040 * _2886.z;
                                frontier_phi_87_pred_5 = _3040 * _2886.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3121 = frontier_phi_87_pred;
                            _3120 = frontier_phi_87_pred_1;
                            _3119 = frontier_phi_87_pred_2;
                            _3118 = frontier_phi_87_pred_3;
                            _3123 = frontier_phi_87_pred_4;
                            _3122 = frontier_phi_87_pred_5;
                            _2828 = _3121 + _2841;
                            _2829 = _3122 + _2842;
                            _2830 = _3123 + _2843;
                            _2825 = _3118 + _2838;
                            _2826 = _3119 + _2839;
                            _2827 = _3120 + _2840;
                            if (_2845 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2845;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2828;
                        frontier_phi_81_pred_1 = _2827;
                        frontier_phi_81_pred_2 = _2826;
                        frontier_phi_81_pred_3 = _2825;
                        frontier_phi_81_pred_4 = _2830;
                        frontier_phi_81_pred_5 = _2829;
                    }
                    _2391 = frontier_phi_81_pred;
                    _2389 = frontier_phi_81_pred_1;
                    _2387 = frontier_phi_81_pred_2;
                    _2385 = frontier_phi_81_pred_3;
                    _2395 = frontier_phi_81_pred_4;
                    _2393 = frontier_phi_81_pred_5;
                    uint _2602 = _2601 + 1u;
                    if (_2602 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2595 = _2385;
                        _2596 = _2387;
                        _2597 = _2389;
                        _2598 = _2391;
                        _2599 = _2393;
                        _2600 = _2395;
                        _2601 = _2602;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2395;
                frontier_phi_56_57_ladder_1 = _2393;
                frontier_phi_56_57_ladder_2 = _2391;
                frontier_phi_56_57_ladder_3 = _2387;
                frontier_phi_56_57_ladder_4 = _2385;
                frontier_phi_56_57_ladder_5 = _2389;
            }
            else
            {
                frontier_phi_56_57_ladder = _2242;
                frontier_phi_56_57_ladder_1 = _2240;
                frontier_phi_56_57_ladder_2 = _2238;
                frontier_phi_56_57_ladder_3 = _2234;
                frontier_phi_56_57_ladder_4 = _2232;
                frontier_phi_56_57_ladder_5 = _2236;
            }
            _2384 = frontier_phi_56_57_ladder_4;
            _2386 = frontier_phi_56_57_ladder_3;
            _2388 = frontier_phi_56_57_ladder_5;
            _2390 = frontier_phi_56_57_ladder_2;
            _2392 = frontier_phi_56_57_ladder_1;
            _2394 = frontier_phi_56_57_ladder;
        }
        float _2399 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _2154 = (_2399 * _2390) + _1870;
        _2156 = (_2399 * _2392) + _1871;
        _2158 = (_2399 * _2394) + _1872;
        _2160 = ((_2384 * _700) * _2399) + _2037;
        _2162 = ((_2386 * _702) * _2399) + _2038;
        _2164 = ((_2388 * _703) * _2399) + _2039;
    }
    else
    {
        _2154 = _1870;
        _2156 = _1871;
        _2158 = _1872;
        _2160 = _2037;
        _2162 = _2038;
        _2164 = _2039;
    }
    float _4064 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4075 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4086 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _2181 = ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2154 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _715))) + ((_2160 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2182 = ((isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_2156 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _715))) + ((_2162 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2183 = ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2158 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _715))) + ((_2164 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1555)) * cbPerFrame._m0[3u].x);
    float _2184 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    uint _2187 = _675 + 6u;
    float _2195 = _636 / cbSceneParam._m0[86u].x;
    float _2196 = _637 / cbSceneParam._m0[86u].y;
    vec4 _2210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, (log2((isnan(cbSceneParam._m0[77u].w) ? _604 : (isnan(_604) ? cbSceneParam._m0[77u].w : min(_604, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2212 = _2210.x;
    float _2213 = _2210.y;
    float _2214 = _2210.z;
    float _2215 = _2210.w;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    if (_604 > cbSceneParam._m0[78u].w)
    {
        float _2257 = isnan(_604) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _604 : min(cbSceneParam._m0[80u].w, _604));
        float _2258 = _2257 / _604;
        float _2269 = _2258 * _265;
        float _2270 = _266 * _2258;
        float _2271 = (-0.0) - _2270;
        float _2272 = _2258 * _267;
        float _2274 = (cbSceneParam._m0[77u].w * _2271) / _2257;
        float _2275 = _2274 + cbSceneParam._m0[79u].w;
        float _2276 = cbSceneParam._m0[79u].w - _2270;
        float _2282 = sqrt(((_2269 * _2269) + (_2270 * _2270)) + (_2272 * _2272));
        float _2285 = (1.0 - (cbSceneParam._m0[77u].w / _2257)) * _2282;
        float _2291 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2293 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2526;
        if (abs((_2271 - _2274) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2526 = ((((_2275 > 0.0) ? exp2(_2291 * _2275) : (2.0 - exp2(_2293 * _2275))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2285;
        }
        else
        {
            float _2445 = 1.0 / cbSceneParam._m0[80u].x;
            float _2446 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : max(_2275, _2276));
            float _2447 = isnan(_2276) ? _2275 : (isnan(_2275) ? _2276 : min(_2275, _2276));
            float _2456 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : min(_2446, 0.0));
            float _2457 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : min(_2447, 0.0));
            _2526 = ((abs(_2282 / _2271) * cbSceneParam._m0[80u].y) * ((((_2456 - _2457) * 2.0) - ((exp2(_2291 * (isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0)))) - exp2(_2291 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0))))) * _2445)) - ((exp2(_2293 * _2456) - exp2(_2293 * _2457)) * _2445))) + (_2285 * cbSceneParam._m0[80u].z);
        }
        vec4 _2528 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2195, _2196, 1.0), 0.0);
        float _2537 = exp2((_2526 * (-1.44269502162933349609375)) * (1.0 - _2528.w));
        float _2538 = log2(_2537);
        float _2554 = log2(_2215);
        _2295 = (exp2(_2554 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].x)) * _2528.x) / cbSceneParam._m0[78u].x)) + _2212;
        _2297 = (exp2(_2554 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].y)) * _2528.y) / cbSceneParam._m0[78u].y)) + _2213;
        _2299 = (exp2(_2554 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2538 * cbSceneParam._m0[78u].z)) * _2528.z) / cbSceneParam._m0[78u].z)) + _2214;
        _2301 = _2537 * _2215;
    }
    else
    {
        _2295 = _2212;
        _2297 = _2213;
        _2299 = _2214;
        _2301 = _2215;
    }
    bool _2564;
    vec4 _2311;
    vec4 _2333;
    float _2335;
    float _2339;
    float _2340;
    float _2341;
    float _2342;
    bool _2352;
    for (;;)
    {
        _2311 = cbMatDynParam._m0[0u];
        float _2313 = roundEven(_2311.y);
        bool _2314 = _2313 == 3.0;
        float _2315 = log2(_2301);
        float _2322 = exp2(_2315 * cbSceneParam._m0[78u].x) * _2184;
        float _2323 = exp2(_2315 * cbSceneParam._m0[78u].y) * _2185;
        float _2324 = exp2(_2315 * cbSceneParam._m0[78u].z) * _2186;
        float _2331 = _618 + (-0.5);
        _2333 = cbMtdParam._m0[1u];
        _2335 = _2333.y * _2331;
        float _2338 = (_2313 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2339 = _2338 * (_2314 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2295)));
        _2340 = _2338 * (_2314 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2297)));
        _2341 = _2338 * (_2314 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2299)));
        _2342 = _2331 * 0.999000012874603271484375;
        _2352 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2352)
        {
            if ((cbInstanceData._m0[_675 + 7u].x + _2342) < 0.5)
            {
                _2564 = true;
                break;
            }
        }
        uint _2480 = _676 + uint(_2311.w);
        if ((cbInstanceData._m0[_2480].w < 1.0) && ((cbInstanceData._m0[_2480].w + _2342) < 0.5))
        {
            _2564 = true;
            break;
        }
        if ((_2335 + 1.0) < _2333.x)
        {
            _2564 = true;
            break;
        }
        _2564 = false;
        break;
    }
    float _2795;
    if (_2564)
    {
        discard_state = true;
        _2795 = 0.0;
    }
    else
    {
        _2795 = cbInstanceData._m0[_2187].w;
    }
    SV_Target.x = _2339;
    SV_Target.y = _2340;
    SV_Target.z = _2341;
    SV_Target.w = _2795;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2187].w;
    discard_exit();
}


