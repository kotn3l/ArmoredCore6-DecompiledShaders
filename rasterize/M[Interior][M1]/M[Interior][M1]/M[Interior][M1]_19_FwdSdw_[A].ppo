#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _401;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _334 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _341 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _350 = cbMtdParam._m0[23u].x + _265;
    float _351 = cbMtdParam._m0[23u].y + _266;
    float _352 = cbMtdParam._m0[23u].z + _267;
    float _366 = (-0.0) - dot(vec3(_350, _351, _352), vec3(_334 * _194, _334 * _195, _334 * _196));
    float _367 = (-0.0) - dot(vec3(_350, _351, _352), vec3(_341 * _208, _341 * _209, _341 * _210));
    float _368 = (-0.0) - dot(vec3(_350, _351, _352), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _372 * _368;
    float _375 = (cbMtdParam._m0[19u].w * _366) * _372;
    float _377 = (cbMtdParam._m0[20u].x * _367) * _372;
    float _380 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _381 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _399;
    float _402;
    float _404;
    if (_375 > 0.0)
    {
        float _385 = (1.0 - _380) / _375;
        _399 = _385;
        _402 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_385 * _373)) * 0.16666667163372039794921875;
        _404 = (fract((_385 * _377) + _381) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_375 < 0.0)
        {
            float _400 = ((-0.0) - _380) / _375;
            frontier_phi_3_2_ladder = (fract(_400 * _373) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _400;
            frontier_phi_3_2_ladder_2 = (fract((_400 * _377) + _381) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _401;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _399 = frontier_phi_3_2_ladder_1;
        _402 = frontier_phi_3_2_ladder;
        _404 = frontier_phi_3_2_ladder_2;
    }
    float _430;
    float _432;
    float _434;
    if (_377 > 0.0)
    {
        float _417 = (1.0 - _381) / _377;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_417 < _399)
        {
            frontier_phi_8_5_ladder = (fract(_417 * _373) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_417 * _375) + _380) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _417;
        }
        else
        {
            frontier_phi_8_5_ladder = _404;
            frontier_phi_8_5_ladder_1 = _402;
            frontier_phi_8_5_ladder_2 = _399;
        }
        _430 = frontier_phi_8_5_ladder_2;
        _432 = frontier_phi_8_5_ladder_1;
        _434 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_377 < 0.0)
        {
            float _431 = ((-0.0) - _381) / _377;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_431 < _399)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_431 * _373) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_431 * _375) + _380) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _431;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _404;
                frontier_phi_8_6_ladder_9_ladder_1 = _402;
                frontier_phi_8_6_ladder_9_ladder_2 = _399;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _404;
            frontier_phi_8_6_ladder_1 = _402;
            frontier_phi_8_6_ladder_2 = _399;
        }
        _430 = frontier_phi_8_6_ladder_2;
        _432 = frontier_phi_8_6_ladder_1;
        _434 = frontier_phi_8_6_ladder;
    }
    float _438 = (_373 > 0.0) ? (cbMtdParam._m0[16u].w / _373) : 5000.0;
    float _451;
    float _452;
    if (_438 < _430)
    {
        _451 = ((_380 + cbMtdParam._m0[17u].x) + (_438 * _375)) * 0.16666667163372039794921875;
        _452 = (((_438 * _377) + _381) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _451 = _432;
        _452 = _434;
    }
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_451, _452));
    float _459 = _454.x * cbMtdParam._m0[13u].x;
    float _460 = _454.y * cbMtdParam._m0[13u].y;
    float _461 = _454.z * cbMtdParam._m0[13u].z;
    float _466 = 0.5 - (_292 * 0.5);
    float _476 = (((_459 - _305) - (_459 * _292)) * _466) + _305;
    float _477 = (((_460 - _307) - (_460 * _292)) * _466) + _307;
    float _478 = (((_461 - _309) - (_461 * _292)) * _466) + _309;
    vec4 _490 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _492 = _490.x;
    vec4 _504 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _512 = (_504.x * 2.0) + (-1.0);
    float _514 = (_504.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_512, _514), vec2(_512, _514));
    float _3512 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    float _521 = _504.z * _292;
    float _524 = fma(_520, _201, fma(_514, _208, _512 * _194));
    float _527 = fma(_520, _202, fma(_514, _209, _512 * _195));
    float _530 = fma(_520, _203, fma(_514, _210, _512 * _196));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3523 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _538 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _3545 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3556 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3567 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _542 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _563 = _265 * _562;
    float _564 = _266 * _562;
    float _565 = _267 * _562;
    vec4 _570 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _572 = _570.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _753 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _759 = (cbMatDynParam._m0[5u].x * _753) + cbMatDynParam._m0[5u].y;
        float _3578 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _764 = (cbMatDynParam._m0[5u].z * _753) + cbMatDynParam._m0[5u].w;
        float _3589 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) - _760)) + _760) < ((_572 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _611 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _614 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _617 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _630 = uint(roundEven(NORMAL.w)) * 13u;
    uint _631 = _630 + 9u;
    uint _632 = _631 + uint(cbMatDynParam._m0[0u].w);
    float _638 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_632].x;
    float _639 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_632].y;
    float _640 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_632].z;
    float _3600 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _644 = 1.0 - _542;
    float _645 = _641 * _644;
    float _646 = _642 * _644;
    float _647 = _643 * _644;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _542;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _542;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _542;
    float _655 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    float _658 = _654 + 0.039999999105930328369140625;
    vec4 _667 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _590, cbSceneParam._m0[86u].y * _591));
    float _670 = _667.x * TEXCOORD.z;
    float _671 = dot(vec3(_535, _536, _537), vec3(_563, _564, _565));
    float _674 = _671 * 2.0;
    float _678 = (_674 * _535) - _563;
    float _679 = (_674 * _536) - _564;
    float _680 = (_674 * _537) - _565;
    float _684 = abs(dot(vec3(_563, _564, _565), vec3(_535, _536, _537)));
    float _3633 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _686 = sqrt(_538);
    float _699 = exp2((_686 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_686 * 3.0));
    float _705 = (1.0 - _699) * ((_686 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _706 = _699 * _686;
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _798 = fma(_742, cbModelParam._m0[26u].z, fma(_738, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734));
        float _802 = fma(_742, cbModelParam._m0[27u].z, fma(_738, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734));
        float _806 = fma(_742, cbModelParam._m0[28u].z, fma(_738, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734));
        float _830 = _734 + _535;
        float _831 = _738 + _536;
        float _832 = _742 + _537;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _798;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _802;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _806;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_798 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_802 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_806 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_535, _536, _537), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3681 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_535, _536, _537), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3714 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_535, _536, _537), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3747 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1073 = _902;
        _1074 = _901;
        _1075 = _913;
        _1076 = _912;
        _1077 = _911;
        _1078 = _923;
        _1079 = _922;
        _1080 = _921;
        _1081 = _936;
        _1082 = _935;
        _1083 = _934;
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _401;
        _1073 = _401;
        _1074 = _401;
        _1075 = _401;
        _1076 = _401;
        _1077 = _401;
        _1078 = _401;
        _1079 = _401;
        _1080 = _401;
        _1081 = _401;
        _1082 = _401;
        _1083 = _401;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = fma(_742, cbModelParam._m0[30u].z, fma(_738, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _734));
        float _1119 = fma(_742, cbModelParam._m0[31u].z, fma(_738, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _734));
        float _1123 = fma(_742, cbModelParam._m0[32u].z, fma(_738, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _734));
        float _1146 = _734 + _535;
        float _1147 = _738 + _536;
        float _1148 = _742 + _537;
        float _1158 = fma(_1148, cbModelParam._m0[30u].z, fma(_1147, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1146)) - _1115;
        float _1159 = fma(_1148, cbModelParam._m0[31u].z, fma(_1147, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1146)) - _1119;
        float _1160 = fma(_1148, cbModelParam._m0[32u].z, fma(_1147, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1146)) - _1123;
        float _1164 = inversesqrt(dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160)));
        float _1177 = ((_1164 * _1158) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1115 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1164 * _1159) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1119 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1164 * _1160) / cbModelParam._m0[35u].z) + ((((((_1123 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1177, _1178, _1179), 0.0);
        float _1214 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1181.x + (-0.5));
        float _1216 = _1214 * (_1181.y + (-0.5));
        float _1217 = _1214 * (_1181.z + (-0.5));
        float _1224 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1188.x + (-0.5));
        float _1226 = _1224 * (_1188.y + (-0.5));
        float _1227 = _1224 * (_1188.z + (-0.5));
        float _1234 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1195.x + (-0.5));
        float _1236 = _1234 * (_1195.y + (-0.5));
        float _1237 = _1234 * (_1195.z + (-0.5));
        float _1244 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1202.x + (-0.5));
        float _1246 = _1244 * (_1202.y + (-0.5));
        float _1247 = _1244 * (_1202.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1267 = (dot(vec3(_535, _536, _537), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1276 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1278 = _1277 * 2.0;
        float _1282 = (1.0 - _1277) / (_1277 + 1.0);
        float _3810 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1292 = ((((1.0 - _1283) * (_1278 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1278 + 1.0))) + _1283) * _1248;
        float _1293 = _1216 * 0.5;
        float _1294 = _1226 * 0.5;
        float _1295 = _1236 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_535, _536, _537), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3843 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1320 + 1.0))) + _1325) * _1249;
        float _1335 = _1217 * 0.5;
        float _1336 = _1227 * 0.5;
        float _1337 = _1237 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_535, _536, _537), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3876 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1362 + 1.0))) + _1367) * _1250;
        _1384 = _1217;
        _1385 = _1216;
        _1386 = _1215;
        _1387 = _1227;
        _1388 = _1226;
        _1389 = _1225;
        _1390 = _1237;
        _1391 = _1236;
        _1392 = _1235;
        _1393 = _1250;
        _1394 = _1249;
        _1395 = _1248;
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
    }
    else
    {
        _1384 = _401;
        _1385 = _401;
        _1386 = _401;
        _1387 = _401;
        _1388 = _401;
        _1389 = _401;
        _1390 = _401;
        _1391 = _401;
        _1392 = _401;
        _1393 = _401;
        _1394 = _401;
        _1395 = _401;
        _1396 = 0.0;
        _1397 = 0.0;
        _1398 = 0.0;
    }
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1086)) + _1086;
    float _1431 = fma(_1410, cbSceneParam._m0[89u].z, fma(_1409, cbSceneParam._m0[89u].y, _1408 * cbSceneParam._m0[89u].x));
    float _1434 = fma(_1410, cbSceneParam._m0[90u].z, fma(_1409, cbSceneParam._m0[90u].y, _1408 * cbSceneParam._m0[90u].x));
    float _1437 = fma(_1410, cbSceneParam._m0[91u].z, fma(_1409, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1408));
    float _1452 = _678 * 0.5;
    float _1453 = _679 * 0.5;
    float _1454 = _680 * 0.5;
    float _1455 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1458 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1461 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1495;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1468 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1472 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1476 = dot(vec4(_1452, _1453, _1454, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1483 = dot(vec4(cbModelParam._m0[39u]), vec4(_1452, _1453, _1454, 1.0));
        _1495 = dot(vec3(isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)), isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1495 = 1.0;
    }
    float _1506;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1497 = dot(vec4(cbModelParam._m0[40u]), vec4(_1452, _1453, _1454, 1.0));
        _1506 = dot(vec3(isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1497) ? 0.0 : (isnan(0.0) ? _1497 : max(0.0, _1497))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1506 = 1.0;
    }
    float _1510 = (_1506 * cbModelParam._m0[1u].x) + (_1495 * (1.0 - cbModelParam._m0[1u].x));
    float _1520 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1521 = isnan(_1520) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1520 : min(cbModelParam._m0[25u].z, _1520));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_742, cbModelParam._m0[13u].z, fma(_738, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _734)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_742, cbModelParam._m0[14u].z, fma(_738, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _734)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_742, cbModelParam._m0[15u].z, fma(_738, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _734)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_680, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678));
        float _1584 = fma(_680, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678));
        float _1587 = fma(_680, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1615 = frontier_phi_29_27_ladder;
        }
        float _1788;
        if (_1584 > 0.0)
        {
            _1788 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1788 = frontier_phi_38_34_ladder;
        }
        float _2244;
        if (_1587 > 0.0)
        {
            _2244 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2244 = frontier_phi_50_45_ladder;
        }
        float _2246 = isnan(_1788) ? _1615 : (isnan(_1615) ? _1788 : min(_1615, _1788));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1581) + _1570;
        float _2252 = (_2247 * _1584) + _1574;
        float _2253 = (_2247 * _1587) + _1578;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1521);
            frontier_phi_28_50_ladder = _2487.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2487.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2487.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_28_50_ladder_2;
        _1605 = frontier_phi_28_50_ladder_1;
        _1607 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_678, _679, _680), _1521);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1667 = fma(_742, cbModelParam._m0[21u].z, fma(_738, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _734)) + cbModelParam._m0[21u].w;
        float _1671 = fma(_742, cbModelParam._m0[22u].z, fma(_738, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _734)) + cbModelParam._m0[22u].w;
        float _1675 = fma(_742, cbModelParam._m0[23u].z, fma(_738, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _734)) + cbModelParam._m0[23u].w;
        float _1678 = fma(_680, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678));
        float _1681 = fma(_680, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678));
        float _1684 = fma(_680, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678));
        float _1793;
        if (_1678 > 0.0)
        {
            _1793 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1793 = frontier_phi_40_36_ladder;
        }
        float _2271;
        if (_1681 > 0.0)
        {
            _2271 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2271 = frontier_phi_52_47_ladder;
        }
        float _2616;
        if (_1684 > 0.0)
        {
            _2616 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2616 = frontier_phi_64_59_ladder;
        }
        float _2618 = isnan(_2271) ? _1793 : (isnan(_1793) ? _2271 : min(_1793, _2271));
        float _2619 = isnan(_2616) ? _2618 : (isnan(_2618) ? _2616 : min(_2618, _2616));
        float _2623 = (_2619 * _1678) + _1667;
        float _2624 = (_2619 * _1681) + _1671;
        float _2625 = (_2619 * _1684) + _1675;
        float _2626 = _2619 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2626;
        float _2629 = _2626 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2625 > _2629) || ((_2625 < _2627) || ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 < _2627) || (_2623 > _2629))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2625, cbModelParam._m0[17u].z, fma(_2624, cbModelParam._m0[17u].y, _2623 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2625, cbModelParam._m0[18u].z, fma(_2624, cbModelParam._m0[18u].y, _2623 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2625, cbModelParam._m0[19u].z, fma(_2624, cbModelParam._m0[19u].y, _2623 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_37_64_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1703 = frontier_phi_37_64_ladder_2;
        _1705 = frontier_phi_37_64_ladder_1;
        _1707 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_678, _679, _680), _1612);
        _1703 = _1687.x * cbModelParam._m0[1u].z;
        _1705 = _1687.y * cbModelParam._m0[1u].z;
        _1707 = _1687.z * cbModelParam._m0[1u].z;
    }
    float _1720 = (((_705 * _655) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1722 = (((_705 * _657) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1724 = (((_705 * _658) + _706) * _670) * ((cbModelParam._m0[1u].w * (_1707 - _1607)) + _1607);
    float _1727 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1722, cbSceneParam._m0[89u].y, _1720 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1722, cbSceneParam._m0[90u].y, _1720 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1722, cbSceneParam._m0[91u].y, _1720 * cbSceneParam._m0[91u].x));
    float _1767 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1771 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1775 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1779 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1780 = _1767 / _1779;
    float _1781 = _1771 / _1779;
    float _1782 = _1775 / _1779;
    float _1929;
    float _1930;
    float _1931;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1809 = ((uint(_1782 > cbSceneParam._m0[59u].y) + uint(_1782 > cbSceneParam._m0[59u].x)) + uint(_1782 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1810 = _1809 + 43u;
        uint _1818 = _1809 + 44u;
        uint _1826 = _1809 + 45u;
        uint _1834 = _1809 + 46u;
        float _1845 = fma(_1779, cbSceneParam._m0[_1810].w, fma(_1775, cbSceneParam._m0[_1810].z, fma(_1771, cbSceneParam._m0[_1810].y, _1767 * cbSceneParam._m0[_1810].x)));
        float _1849 = fma(_1779, cbSceneParam._m0[_1818].w, fma(_1775, cbSceneParam._m0[_1818].z, fma(_1771, cbSceneParam._m0[_1818].y, _1767 * cbSceneParam._m0[_1818].x)));
        float _1857 = fma(_1779, cbSceneParam._m0[_1834].w, fma(_1775, cbSceneParam._m0[_1834].z, fma(_1771, cbSceneParam._m0[_1834].y, _1767 * cbSceneParam._m0[_1834].x)));
        float _1862 = cbSceneParam._m0[33u].z * _1857;
        float _1864 = cbSceneParam._m0[33u].w * _1857;
        float _1867 = fma(_1779, cbSceneParam._m0[_1826].w, fma(_1775, cbSceneParam._m0[_1826].z, fma(_1771, cbSceneParam._m0[_1826].y, _1767 * cbSceneParam._m0[_1826].x))) / _1857;
        float _1915 = (cbSceneParam._m0[33u].x - sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782))) * cbSceneParam._m0[33u].y;
        float _4002 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1922 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1845) / _1857, (_1864 + _1849) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1864 + _1845) / _1857, (_1849 - _1862) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 - _1862) / _1857, (_1849 - _1864) / _1857), _1867), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 - _1864) / _1857, (_1862 + _1849) / _1857), _1867), 0.0)).x), vec4(0.25)));
        _1929 = 1.0 - (_1922 * cbSceneParam._m0[34u].x);
        _1930 = 1.0 - (_1922 * cbSceneParam._m0[34u].y);
        _1931 = 1.0 - (_1922 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1929 = 1.0;
        _1930 = 1.0;
        _1931 = 1.0;
    }
    float _1995;
    float _1997;
    float _1999;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1983 = fma(_1779, cbSceneParam._m0[63u].w, fma(_1775, cbSceneParam._m0[63u].z, fma(_1771, cbSceneParam._m0[63u].y, _1767 * cbSceneParam._m0[63u].x)));
        float _1984 = fma(_1779, cbSceneParam._m0[60u].w, fma(_1775, cbSceneParam._m0[60u].z, fma(_1771, cbSceneParam._m0[60u].y, _1767 * cbSceneParam._m0[60u].x))) / _1983;
        float _1985 = fma(_1779, cbSceneParam._m0[61u].w, fma(_1775, cbSceneParam._m0[61u].z, fma(_1771, cbSceneParam._m0[61u].y, _1767 * cbSceneParam._m0[61u].x))) / _1983;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1984 >= cbSceneParam._m0[64u].x) && (_1985 >= cbSceneParam._m0[64u].y)) && (_1984 <= cbSceneParam._m0[64u].z)) && (_1985 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1779, cbSceneParam._m0[62u].w, fma(_1775, cbSceneParam._m0[62u].z, fma(_1771, cbSceneParam._m0[62u].y, _1767 * cbSceneParam._m0[62u].x))) / _1983;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782))) * cbSceneParam._m0[33u].y;
            float _4018 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1984, cbSceneParam._m0[33u].w + _1985), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1984, _1985 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].z, _1985 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1984 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1985), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2344) ? _1931 : (isnan(_1931) ? _2344 : min(_1931, _2344));
            frontier_phi_49_48_ladder_1 = isnan(_2343) ? _1930 : (isnan(_1930) ? _2343 : min(_1930, _2343));
            frontier_phi_49_48_ladder_2 = isnan(_2342) ? _1929 : (isnan(_1929) ? _2342 : min(_1929, _2342));
        }
        else
        {
            frontier_phi_49_48_ladder = _1931;
            frontier_phi_49_48_ladder_1 = _1930;
            frontier_phi_49_48_ladder_2 = _1929;
        }
        _1995 = frontier_phi_49_48_ladder_2;
        _1997 = frontier_phi_49_48_ladder_1;
        _1999 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1995 = _1929;
        _1997 = _1930;
        _1999 = _1931;
    }
    uvec4 _2004 = floatBitsToUint(cbInstanceData._m0[_630 + 5u]);
    uint _2006 = _2004.x * 14u;
    uint _2007 = _2006 + 13u;
    float _2012 = _670 + (-1.0);
    float _2015 = (cbLight._m0[_2007].x * _2012) + 1.0;
    float _2016 = (cbLight._m0[_2007].y * _2012) + 1.0;
    uint _2017 = _2006 + 5u;
    float _2023 = isnan(1.0) ? _2016 : (isnan(_2016) ? 1.0 : min(_2016, 1.0));
    uint _2027 = _2006 + 4u;
    float _2037 = isnan(1.0) ? _2015 : (isnan(_2015) ? 1.0 : min(_2015, 1.0));
    uint _2041 = _2006 | 1u;
    float _2052 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_535, _536, _537));
    float _2055 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_535, _536, _537));
    float _4054 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _4065 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2060 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _2062 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 0.3183098733425140380859375;
    float _2069 = ((cbLight._m0[_2017].x * _2023) * _2062) + (((cbLight._m0[_2027].x * _1995) * _2037) * _2060);
    float _2070 = ((_2023 * cbLight._m0[_2017].y) * _2062) + (((cbLight._m0[_2027].y * _1997) * _2037) * _2060);
    float _2071 = ((_2023 * cbLight._m0[_2017].z) * _2062) + (((cbLight._m0[_2027].z * _1999) * _2037) * _2060);
    uint _2073 = _2006 + 8u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2006].w)) * _538) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_2006].x + _563;
    float _2089 = cbLight._m0[_2006].y + _564;
    float _2090 = cbLight._m0[_2006].z + _565;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2006].xyz));
    float _4076 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _2102 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2103 = dot(vec3(_535, _536, _537), vec3(_2095, _2096, _2097));
    float _4098 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_2006].xyz), vec3(_2095, _2096, _2097));
    float _4109 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2087 * _2087;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2123 = exp2(log2(1.0 - (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * 5.0);
    float _2124 = 0.959999978542327880859375 - _652;
    float _2126 = 0.959999978542327880859375 - _653;
    float _2127 = 0.959999978542327880859375 - _654;
    float _2134 = 1.0 - _2087;
    float _2145 = (0.5 / (((_2102 * ((_2101 * _2134) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2134) + _2087) * _2101))) * _2101;
    float _4120 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2147 = (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    uint _2161 = _2006 + 9u;
    float _2172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _538) * 0.949999988079071044921875);
    float _2173 = _2172 * _2172;
    float _2174 = cbLight._m0[_2041].x + _563;
    float _2175 = cbLight._m0[_2041].y + _564;
    float _2176 = cbLight._m0[_2041].z + _565;
    float _2180 = inversesqrt(dot(vec3(_2174, _2175, _2176), vec3(_2174, _2175, _2176)));
    float _2181 = _2180 * _2174;
    float _2182 = _2180 * _2175;
    float _2183 = _2180 * _2176;
    float _2184 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_2041].xyz));
    float _4131 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2187 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2188 = dot(vec3(_535, _536, _537), vec3(_2181, _2182, _2183));
    float _4142 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _2192 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2181, _2182, _2183));
    float _4153 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2196 = _2173 * _2173;
    float _2200 = ((_2191 * _2191) * (_2196 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * 5.0);
    float _2214 = 1.0 - _2173;
    float _2224 = (0.5 / (((_2102 * ((_2187 * _2214) + _2173)) + 9.9999999392252902907785028219223e-09) + (((_2102 * _2214) + _2173) * _2187))) * _2187;
    float _4164 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2226 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2196 / ((_2200 * _2200) * 3.141590118408203125));
    float _2236 = (((((_2207 * _2124) + _655) * cbLight._m0[_2161].x) * _2226) * _2023) + ((((cbLight._m0[_2073].x * _1995) * ((_2123 * _2124) + _655)) * _2147) * _2037);
    float _2237 = (((((_2207 * _2126) + _657) * cbLight._m0[_2161].y) * _2226) * _2023) + ((((cbLight._m0[_2073].y * _1997) * ((_2123 * _2126) + _657)) * _2147) * _2037);
    float _2238 = (((((_2207 * _2127) + _658) * cbLight._m0[_2161].z) * _2226) * _2023) + ((((cbLight._m0[_2073].z * _1999) * ((_2123 * _2127) + _658)) * _2147) * _2037);
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    if (_2004.y == 0u)
    {
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.x;
        uint _2368 = uint((float(_2356.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _2357))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _2357)));
        float _2378 = (log2(_1782 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2379 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        uint _2382 = uint(isnan(14.0) ? _2379 : (isnan(_2379) ? 14.0 : min(_2379, 14.0)));
        uvec4 _2387 = texelFetch(g_lightClusterGridBuffer, int(((_2382 << 2u) + (_2368 << 6u)) >> 2u));
        uint _2388 = _2387.x;
        uint _2389 = _2356.z;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        if (((((1u << ((_2389 >> 4u) & 15u)) + 4294967295u) & _2388) == 0u) || ((_2389 & 240u) == 0u))
        {
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
            _2506 = 0.0;
        }
        else
        {
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2507;
            float _2674 = 0.0;
            float _2675 = 0.0;
            float _2676 = 0.0;
            float _2677 = 0.0;
            float _2678 = 0.0;
            float _2679 = 0.0;
            uint _2680 = 0u;
            uint _2689;
            bool _2690;
            for (;;)
            {
                _2689 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2680 << 2u)) >> 2u)).x;
                _2690 = _2689 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2690)
                {
                    frontier_phi_75_pred = _2677;
                    frontier_phi_75_pred_1 = _2679;
                    frontier_phi_75_pred_2 = _2678;
                    frontier_phi_75_pred_3 = _2676;
                    frontier_phi_75_pred_4 = _2675;
                    frontier_phi_75_pred_5 = _2674;
                }
                else
                {
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    uint _2846;
                    _2840 = _2674;
                    _2841 = _2675;
                    _2842 = _2676;
                    _2843 = _2677;
                    _2844 = _2678;
                    _2845 = _2679;
                    _2846 = _2689;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    for (;;)
                    {
                        uint _2850 = uint(findLSB(_2846)) + (_2680 << 5u);
                        uint _2847 = (_2846 + 4294967295u) & _2846;
                        uint _2852 = _2850 * 48u;
                        vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2852)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2852 + 3u)).x));
                        uint _2872 = (_2850 * 48u) + 4u;
                        vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2872)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2872 + 3u)).x));
                        uint _2891 = (_2850 * 48u) + 8u;
                        vec3 _2902 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x));
                        float _2906 = _2866.x - _1780;
                        float _2907 = _2866.y - _1781;
                        float _2908 = _2866.z - _1782;
                        float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                        float _2912 = inversesqrt(_2909);
                        float _2913 = _2912 * _2906;
                        float _2914 = _2912 * _2907;
                        float _2915 = _2912 * _2908;
                        float _2916 = dot(vec3(_611, _614, _617), vec3(_2913, _2914, _2915));
                        float _2921 = 1.0 - (_2909 * _2866.w);
                        float _4185 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2923 = sqrt(_2909) * _2885.w;
                        float _2926 = 1.39999997615814208984375 / (_2923 + 1.39999997615814208984375);
                        float _2927 = _2926 * _2926;
                        float _2930 = ((1.0 - _2927) * _2916) + _2927;
                        float _2933 = _2923 * _2923;
                        float _2937 = ((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2922) / ((_2933 * 0.699999988079071044921875) + 1.0);
                        float _2941 = (-0.0) - _1780;
                        float _2942 = (-0.0) - _1781;
                        float _2943 = (-0.0) - _1782;
                        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
                        float _2948 = _2947 * _2941;
                        float _2949 = _2947 * _2942;
                        float _2950 = _2947 * _2943;
                        float _2957 = exp2(log2(1.0 / ((_2933 * 3.5) + 5.0)) * 0.25);
                        float _2958 = 1.0 - _686;
                        float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                        float _2966 = _2965 * _2965;
                        float _2967 = _2966 * _2966;
                        float _2968 = _2948 + _2913;
                        float _2969 = _2949 + _2914;
                        float _2970 = _2950 + _2915;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2978 = dot(vec3(_611, _614, _617), vec3(_2948, _2949, _2950));
                        float _4201 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _2982 = dot(vec3(_611, _614, _617), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                        float _4212 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                        float _2990 = _2926 * _2966;
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2916) + _2991;
                        float _4223 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2996 = 1.0 - _2966;
                        float _3006 = (0.5 / (((_2995 * ((_2981 * _2996) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2966) * _2981))) * _2995;
                        float _4234 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3017 = (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) / ((_2989 * _2989) * ((_2933 * 2.1991131305694580078125) + 3.141590118408203125))) * _2922;
                        _2770 = (_2937 * _2885.x) + _2843;
                        _2771 = (_2937 * _2885.y) + _2844;
                        _2772 = (_2937 * _2885.z) + _2845;
                        _2767 = (_3017 * _2902.x) + _2840;
                        _2768 = (_3017 * _2902.y) + _2841;
                        _2769 = (_3017 * _2902.z) + _2842;
                        if (_2847 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2772;
                            _2846 = _2847;
                        }
                    }
                    frontier_phi_75_pred = _2770;
                    frontier_phi_75_pred_1 = _2772;
                    frontier_phi_75_pred_2 = _2771;
                    frontier_phi_75_pred_3 = _2769;
                    frontier_phi_75_pred_4 = _2768;
                    frontier_phi_75_pred_5 = _2767;
                }
                _2503 = frontier_phi_75_pred;
                _2507 = frontier_phi_75_pred_1;
                _2505 = frontier_phi_75_pred_2;
                _2501 = frontier_phi_75_pred_3;
                _2499 = frontier_phi_75_pred_4;
                _2497 = frontier_phi_75_pred_5;
                uint _2681 = _2680 + 1u;
                if (_2681 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2674 = _2497;
                    _2675 = _2499;
                    _2676 = _2501;
                    _2677 = _2503;
                    _2678 = _2505;
                    _2679 = _2507;
                    _2680 = _2681;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
            _2506 = _2507;
        }
        uvec4 _2510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2511 = _2510.z;
        uint _2513 = (_2511 >> 8u) & 15u;
        float _2642;
        float _2644;
        float _2646;
        float _2648;
        float _2650;
        float _2652;
        if (((4294967295u << _2513) & _2388) == 0u)
        {
            _2642 = _2496;
            _2644 = _2498;
            _2646 = _2500;
            _2648 = _2502;
            _2650 = _2504;
            _2652 = _2506;
        }
        else
        {
            float _2667 = inversesqrt(dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782)));
            float _2668 = _2667 * _1780;
            float _2669 = _2667 * _1781;
            float _2670 = _2667 * _1782;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2513 < ((_2511 >> 12u) & 15u))
            {
                float _2643;
                float _2645;
                float _2647;
                float _2649;
                float _2651;
                float _2653;
                float _2823 = _2496;
                float _2824 = _2498;
                float _2825 = _2500;
                float _2826 = _2502;
                float _2827 = _2504;
                float _2828 = _2506;
                uint _2829 = _2513;
                uint _2838;
                bool _2839;
                for (;;)
                {
                    _2838 = texelFetch(g_lightClassification, int((((_2382 << 5u) + (_2368 << 9u)) + (_2829 << 2u)) >> 2u)).x;
                    _2839 = _2838 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2839)
                    {
                        frontier_phi_86_pred = _2828;
                        frontier_phi_86_pred_1 = _2827;
                        frontier_phi_86_pred_2 = _2826;
                        frontier_phi_86_pred_3 = _2825;
                        frontier_phi_86_pred_4 = _2824;
                        frontier_phi_86_pred_5 = _2823;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3044 = _2823;
                        float _3045 = _2824;
                        float _3046 = _2825;
                        float _3047 = _2826;
                        float _3048 = _2827;
                        float _3049 = _2828;
                        uint _3050 = _2838;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3119;
                        vec4 _3134;
                        float _3180;
                        bool _3181;
                        for (;;)
                        {
                            uint _3061 = ((_2829 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3106 = (_3061 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3121 = (_3061 * 40u) + 20u;
                            _3134 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3121)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3121 + 3u)).x));
                            uint _3136 = (_3061 * 40u) + 24u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3155 = (_3061 * 40u) + 28u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3180 = fma(_1782, _3168.z, fma(_1781, _3168.y, _3168.x * _1780)) + _3168.w;
                            _3181 = !((fma(_1782, _3149.z, fma(_1781, _3149.y, _3149.x * _1780)) + _3149.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3181)
                            {
                                float _3208 = _3076.x - _1780;
                                float _3209 = _3076.y - _1781;
                                float _3210 = _3076.z - _1782;
                                float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                                float _3214 = inversesqrt(_3211);
                                float _3215 = _3214 * _3208;
                                float _3216 = _3214 * _3209;
                                float _3217 = _3214 * _3210;
                                float _3221 = 1.0 - (_3211 / (_3077 * _3077));
                                float _4245 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3226 = sqrt(_3211) * _3092.w;
                                float _3228 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                                float _3229 = _3228 * _3228;
                                float _3232 = ((1.0 - _3229) * dot(vec3(_3215, _3216, _3217), vec3(_611, _614, _617))) + _3229;
                                float _3235 = _3226 * _3226;
                                float _3239 = (fma(_1782, _3119.z, fma(_1781, _3119.y, _3119.x * _1780)) + _3119.w) / _3180;
                                float _3240 = (fma(_1782, _3134.z, fma(_1781, _3134.y, _3134.x * _1780)) + _3134.w) / _3180;
                                float _3244 = 1.0 - dot(vec2(_3239, _3240), vec2(_3239, _3240));
                                float _4261 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3246 = _3245 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3222) / ((_3235 * 0.699999988079071044921875) + 1.0));
                                float _3258 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3259 = 1.0 - _686;
                                float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                                float _3267 = _3266 * _3266;
                                float _3268 = _3267 * _3267;
                                float _3269 = _3215 - _2668;
                                float _3270 = _3216 - _2669;
                                float _3271 = _3217 - _2670;
                                float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                                float _3279 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2668, (-0.0) - _2669, (-0.0) - _2670));
                                float _4272 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3283 = dot(vec3(_611, _614, _617), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                                float _4283 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                                float _3291 = _3228 * _3267;
                                float _3292 = _3291 * _3291;
                                float _3298 = ((1.0 - _3292) * dot(vec3(_611, _614, _617), vec3(_3215, _3216, _3217))) + _3292;
                                float _4294 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
                                float _3300 = 1.0 - _3267;
                                float _3310 = (0.5 / (((_3299 * ((_3282 * _3300) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3267) * _3282))) * _3299;
                                float _4305 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3320 = (_3245 * _3222) * (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) / ((_3290 * _3290) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3246 * _3092.z;
                                frontier_phi_92_pred_1 = _3246 * _3092.y;
                                frontier_phi_92_pred_2 = _3246 * _3092.x;
                                frontier_phi_92_pred_3 = _3320 * _3104.z;
                                frontier_phi_92_pred_4 = _3320 * _3104.y;
                                frontier_phi_92_pred_5 = _3320 * _3104.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3329 = frontier_phi_92_pred;
                            _3328 = frontier_phi_92_pred_1;
                            _3327 = frontier_phi_92_pred_2;
                            _3326 = frontier_phi_92_pred_3;
                            _3325 = frontier_phi_92_pred_4;
                            _3324 = frontier_phi_92_pred_5;
                            _3034 = _3327 + _3047;
                            _3035 = _3328 + _3048;
                            _3036 = _3329 + _3049;
                            _3031 = _3324 + _3044;
                            _3032 = _3325 + _3045;
                            _3033 = _3326 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3036;
                        frontier_phi_86_pred_1 = _3035;
                        frontier_phi_86_pred_2 = _3034;
                        frontier_phi_86_pred_3 = _3033;
                        frontier_phi_86_pred_4 = _3032;
                        frontier_phi_86_pred_5 = _3031;
                    }
                    _2653 = frontier_phi_86_pred;
                    _2651 = frontier_phi_86_pred_1;
                    _2649 = frontier_phi_86_pred_2;
                    _2647 = frontier_phi_86_pred_3;
                    _2645 = frontier_phi_86_pred_4;
                    _2643 = frontier_phi_86_pred_5;
                    uint _2830 = _2829 + 1u;
                    if (_2830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2823 = _2643;
                        _2824 = _2645;
                        _2825 = _2647;
                        _2826 = _2649;
                        _2827 = _2651;
                        _2828 = _2653;
                        _2829 = _2830;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2649;
                frontier_phi_66_67_ladder_1 = _2653;
                frontier_phi_66_67_ladder_2 = _2651;
                frontier_phi_66_67_ladder_3 = _2647;
                frontier_phi_66_67_ladder_4 = _2645;
                frontier_phi_66_67_ladder_5 = _2643;
            }
            else
            {
                frontier_phi_66_67_ladder = _2502;
                frontier_phi_66_67_ladder_1 = _2506;
                frontier_phi_66_67_ladder_2 = _2504;
                frontier_phi_66_67_ladder_3 = _2500;
                frontier_phi_66_67_ladder_4 = _2498;
                frontier_phi_66_67_ladder_5 = _2496;
            }
            _2642 = frontier_phi_66_67_ladder_5;
            _2644 = frontier_phi_66_67_ladder_4;
            _2646 = frontier_phi_66_67_ladder_3;
            _2648 = frontier_phi_66_67_ladder;
            _2650 = frontier_phi_66_67_ladder_2;
            _2652 = frontier_phi_66_67_ladder_1;
        }
        float _2657 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
        _2401 = (_2657 * _2648) + _2069;
        _2403 = (_2657 * _2650) + _2070;
        _2405 = (_2657 * _2652) + _2071;
        _2407 = ((_2642 * _655) * _2657) + _2236;
        _2409 = ((_2644 * _657) * _2657) + _2237;
        _2411 = ((_2646 * _658) * _2657) + _2238;
    }
    else
    {
        _2401 = _2069;
        _2403 = _2070;
        _2405 = _2071;
        _2407 = _2236;
        _2409 = _2237;
        _2411 = _2238;
    }
    float _4321 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4332 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4343 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _2428 = ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2401 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _670))) + ((_2407 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2429 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2403 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _670))) + ((_2409 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2430 = ((isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2405 + ((isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0))) * _670))) + ((_2411 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _1510)) * cbPerFrame._m0[3u].x);
    float _2431 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2433 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    uint _2434 = _630 + 6u;
    float _2442 = _590 / cbSceneParam._m0[86u].x;
    float _2443 = _591 / cbSceneParam._m0[86u].y;
    vec4 _2457 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2459 = _2457.x;
    float _2460 = _2457.y;
    float _2461 = _2457.z;
    float _2462 = _2457.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2522 = _2521 / _558;
        float _2533 = _2522 * _265;
        float _2534 = _266 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _267;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2780;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2780 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2703 = 1.0 / cbSceneParam._m0[80u].x;
            float _2704 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2705 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2714 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : min(_2704, 0.0));
            float _2715 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : min(_2705, 0.0));
            _2780 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2714 - _2715) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))))) * _2703)) - ((exp2(_2556 * _2714) - exp2(_2556 * _2715)) * _2703))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2782 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2442, _2443, 1.0), 0.0);
        float _2791 = exp2((_2780 * (-1.44269502162933349609375)) * (1.0 - _2782.w));
        float _2792 = log2(_2791);
        float _2808 = log2(_2462);
        _2558 = (exp2(_2808 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].x)) * _2782.x) / cbSceneParam._m0[78u].x)) + _2459;
        _2560 = (exp2(_2808 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].y)) * _2782.y) / cbSceneParam._m0[78u].y)) + _2460;
        _2562 = (exp2(_2808 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2792 * cbSceneParam._m0[78u].z)) * _2782.z) / cbSceneParam._m0[78u].z)) + _2461;
        _2564 = _2791 * _2462;
    }
    else
    {
        _2558 = _2459;
        _2560 = _2460;
        _2562 = _2461;
        _2564 = _2462;
    }
    bool _2818;
    vec4 _2574;
    vec4 _2596;
    float _2598;
    float _2602;
    float _2603;
    float _2604;
    float _2605;
    bool _2615;
    for (;;)
    {
        _2574 = cbMatDynParam._m0[0u];
        float _2576 = roundEven(_2574.y);
        bool _2577 = _2576 == 3.0;
        float _2578 = log2(_2564);
        float _2585 = exp2(_2578 * cbSceneParam._m0[78u].x) * _2431;
        float _2586 = exp2(_2578 * cbSceneParam._m0[78u].y) * _2432;
        float _2587 = exp2(_2578 * cbSceneParam._m0[78u].z) * _2433;
        float _2594 = _572 + (-0.5);
        _2596 = cbMtdParam._m0[1u];
        _2598 = _2596.y * _2594;
        float _2601 = (_2576 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2602 = _2601 * (_2577 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2558)));
        _2603 = _2601 * (_2577 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2560)));
        _2604 = _2601 * (_2577 ? _2587 : (_2587 + (cbSceneParam._m0[72u].w * _2562)));
        _2605 = _2594 * 0.999000012874603271484375;
        _2615 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2615)
        {
            if ((cbInstanceData._m0[_630 + 7u].x + _2605) < 0.5)
            {
                _2818 = true;
                break;
            }
        }
        uint _2738 = _631 + uint(_2574.w);
        if ((cbInstanceData._m0[_2738].w < 1.0) && ((cbInstanceData._m0[_2738].w + _2605) < 0.5))
        {
            _2818 = true;
            break;
        }
        if ((_2598 + 1.0) < _2596.x)
        {
            _2818 = true;
            break;
        }
        _2818 = false;
        break;
    }
    float _3022;
    if (_2818)
    {
        discard_state = true;
        _3022 = 0.0;
    }
    else
    {
        _3022 = cbInstanceData._m0[_2434].w;
    }
    SV_Target.x = _2602;
    SV_Target.y = _2603;
    SV_Target.z = _2604;
    SV_Target.w = _3022;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2434].w;
    discard_exit();
}


