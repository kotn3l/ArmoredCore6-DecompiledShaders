#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1162;
float _3350;
float _3351;
float _3352;
float _3353;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    vec4 _584 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _586 = _584.x;
    vec4 _598 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _606 = (_598.x * 2.0) + (-1.0);
    float _608 = (_598.y * 2.0) + (-1.0);
    float _609 = dot(vec2(_606, _608), vec2(_606, _608));
    float _3392 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _614 = sqrt(1.0 - (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))));
    float _615 = _598.z * _292;
    float _618 = fma(_614, _201, fma(_608, _208, _606 * _194));
    float _621 = fma(_614, _202, fma(_608, _209, _606 * _195));
    float _624 = fma(_614, _203, fma(_608, _210, _606 * _196));
    float _628 = inversesqrt(dot(vec3(_618, _621, _624), vec3(_618, _621, _624)));
    float _629 = _628 * _618;
    float _630 = _628 * _621;
    float _631 = _628 * _624;
    float _3403 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _632 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
    float _3414 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3425 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3436 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3447 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _636 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _652 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _656 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _657 = _265 * _656;
    float _658 = _266 * _656;
    float _659 = _267 * _656;
    vec4 _664 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _666 = _664.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _843 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _849 = (cbMatDynParam._m0[5u].x * _843) + cbMatDynParam._m0[5u].y;
        float _3458 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _854 = (cbMatDynParam._m0[5u].z * _843) + cbMatDynParam._m0[5u].w;
        float _3469 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) - _850)) + _850) < ((_666 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _679 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _680 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _700 = fma(_631, cbSceneParam._m0[5u].z, fma(_630, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _629));
    float _703 = fma(_631, cbSceneParam._m0[6u].z, fma(_630, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _629));
    float _706 = fma(_631, cbSceneParam._m0[7u].z, fma(_630, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _629));
    uint _719 = uint(roundEven(NORMAL.w)) * 13u;
    uint _721 = _719 + 9u;
    uint _722 = _721 + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3480 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _734 = 1.0 - _636;
    float _735 = _731 * _734;
    float _736 = _732 * _734;
    float _737 = _733 * _734;
    float _742 = (_731 + (-0.039999999105930328369140625)) * _636;
    float _743 = (_732 + (-0.039999999105930328369140625)) * _636;
    float _744 = (_733 + (-0.039999999105930328369140625)) * _636;
    float _745 = _742 + 0.039999999105930328369140625;
    float _747 = _743 + 0.039999999105930328369140625;
    float _748 = _744 + 0.039999999105930328369140625;
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _679, cbSceneParam._m0[86u].y * _680));
    float _760 = _757.x * TEXCOORD.z;
    float _761 = dot(vec3(_629, _630, _631), vec3(_657, _658, _659));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _629) - _657;
    float _769 = (_764 * _630) - _658;
    float _770 = (_764 * _631) - _659;
    float _774 = abs(dot(vec3(_657, _658, _659), vec3(_629, _630, _631)));
    float _3513 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = sqrt(_632);
    float _789 = exp2((_776 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_776 * 3.0));
    float _795 = (1.0 - _789) * ((_776 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _796 = _789 * _776;
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1161;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _888 = fma(_832, cbModelParam._m0[26u].z, fma(_828, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824));
        float _892 = fma(_832, cbModelParam._m0[27u].z, fma(_828, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824));
        float _896 = fma(_832, cbModelParam._m0[28u].z, fma(_828, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824));
        float _919 = _824 + _629;
        float _920 = _828 + _630;
        float _921 = _832 + _631;
        float _931 = fma(_921, cbModelParam._m0[26u].z, fma(_920, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[27u].z, fma(_920, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[28u].z, fma(_920, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_888 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_892 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[34u].z) + ((((((_896 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _955 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _989 = exp2((_955.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_955.x + (-0.5));
        float _991 = _989 * (_955.y + (-0.5));
        float _992 = _989 * (_955.z + (-0.5));
        float _999 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_962.x + (-0.5));
        float _1001 = _999 * (_962.y + (-0.5));
        float _1002 = _999 * (_962.z + (-0.5));
        float _1009 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_969.x + (-0.5));
        float _1011 = _1009 * (_969.y + (-0.5));
        float _1012 = _1009 * (_969.z + (-0.5));
        float _1019 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_976.x + (-0.5));
        float _1021 = _1019 * (_976.y + (-0.5));
        float _1022 = _1019 * (_976.z + (-0.5));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = _990 * 0.5;
        float _1027 = _1000 * 0.5;
        float _1028 = _1010 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1043 = (dot(vec3(_629, _630, _631), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1053 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3561 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1055 + 1.0))) + _1060) * _1023;
        float _1070 = _991 * 0.5;
        float _1071 = _1001 * 0.5;
        float _1072 = _1011 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_629, _630, _631), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3594 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1097 + 1.0))) + _1102) * _1024;
        float _1112 = _992 * 0.5;
        float _1113 = _1002 * 0.5;
        float _1114 = _1012 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_629, _630, _631), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3627 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1139 + 1.0))) + _1144) * _1025;
        _1161 = _992;
        _1163 = _991;
        _1164 = _990;
        _1165 = _1002;
        _1166 = _1001;
        _1167 = _1000;
        _1168 = _1012;
        _1169 = _1011;
        _1170 = _1010;
        _1171 = _1025;
        _1172 = _1024;
        _1173 = _1023;
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1175 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1176 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
    }
    else
    {
        _1161 = _1162;
        _1163 = _1162;
        _1164 = _1162;
        _1165 = _1162;
        _1166 = _1162;
        _1167 = _1162;
        _1168 = _1162;
        _1169 = _1162;
        _1170 = _1162;
        _1171 = _1162;
        _1172 = _1162;
        _1173 = _1162;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1205 = fma(_832, cbModelParam._m0[30u].z, fma(_828, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _824));
        float _1209 = fma(_832, cbModelParam._m0[31u].z, fma(_828, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _824));
        float _1213 = fma(_832, cbModelParam._m0[32u].z, fma(_828, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _824));
        float _1236 = _824 + _629;
        float _1237 = _828 + _630;
        float _1238 = _832 + _631;
        float _1248 = fma(_1238, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1236)) - _1205;
        float _1249 = fma(_1238, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1236)) - _1209;
        float _1250 = fma(_1238, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1236)) - _1213;
        float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
        float _1267 = ((_1254 * _1248) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1205 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1254 * _1249) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1209 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1254 * _1250) / cbModelParam._m0[35u].z) + ((((((_1213 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1267, _1268, _1269), 0.0);
        float _1304 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1271.x + (-0.5));
        float _1306 = _1304 * (_1271.y + (-0.5));
        float _1307 = _1304 * (_1271.z + (-0.5));
        float _1314 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1278.x + (-0.5));
        float _1316 = _1314 * (_1278.y + (-0.5));
        float _1317 = _1314 * (_1278.z + (-0.5));
        float _1324 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1285.x + (-0.5));
        float _1326 = _1324 * (_1285.y + (-0.5));
        float _1327 = _1324 * (_1285.z + (-0.5));
        float _1334 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1292.x + (-0.5));
        float _1336 = _1334 * (_1292.y + (-0.5));
        float _1337 = _1334 * (_1292.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_629, _630, _631), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _3690 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1368 + 1.0))) + _1373) * _1338;
        float _1383 = _1306 * 0.5;
        float _1384 = _1316 * 0.5;
        float _1385 = _1326 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_629, _630, _631), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3723 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1410 + 1.0))) + _1415) * _1339;
        float _1425 = _1307 * 0.5;
        float _1426 = _1317 * 0.5;
        float _1427 = _1327 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_629, _630, _631), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3756 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1452 + 1.0))) + _1457) * _1340;
        _1474 = _1307;
        _1475 = _1306;
        _1476 = _1305;
        _1477 = _1317;
        _1478 = _1316;
        _1479 = _1315;
        _1480 = _1327;
        _1481 = _1326;
        _1482 = _1325;
        _1483 = _1340;
        _1484 = _1339;
        _1485 = _1338;
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1162;
        _1475 = _1162;
        _1476 = _1162;
        _1477 = _1162;
        _1478 = _1162;
        _1479 = _1162;
        _1480 = _1162;
        _1481 = _1162;
        _1482 = _1162;
        _1483 = _1162;
        _1484 = _1162;
        _1485 = _1162;
        _1486 = 0.0;
        _1487 = 0.0;
        _1488 = 0.0;
    }
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1174)) + _1174;
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1175)) + _1175;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1176)) + _1176;
    float _1521 = fma(_1500, cbSceneParam._m0[89u].z, fma(_1499, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1524 = fma(_1500, cbSceneParam._m0[90u].z, fma(_1499, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1527 = fma(_1500, cbSceneParam._m0[91u].z, fma(_1499, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1498));
    float _1542 = _768 * 0.5;
    float _1543 = _769 * 0.5;
    float _1544 = _770 * 0.5;
    float _1545 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1548 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1551 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1585;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1558 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1161, _1165, _1168, _1171));
        float _1562 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1163, _1166, _1169, _1172));
        float _1566 = dot(vec4(_1542, _1543, _1544, 1.0), vec4(_1164, _1167, _1170, _1173));
        float _1573 = dot(vec4(cbModelParam._m0[39u]), vec4(_1542, _1543, _1544, 1.0));
        _1585 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1573) ? 0.0 : (isnan(0.0) ? _1573 : max(0.0, _1573))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1585 = 1.0;
    }
    float _1596;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1587 = dot(vec4(cbModelParam._m0[40u]), vec4(_1542, _1543, _1544, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1587) ? 0.0 : (isnan(0.0) ? _1587 : max(0.0, _1587))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1600 = (_1596 * cbModelParam._m0[1u].x) + (_1585 * (1.0 - cbModelParam._m0[1u].x));
    float _1610 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _632);
    float _1611 = isnan(_1610) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1610 : min(cbModelParam._m0[25u].z, _1610));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_832, cbModelParam._m0[13u].z, fma(_828, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _824)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_832, cbModelParam._m0[14u].z, fma(_828, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _824)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_832, cbModelParam._m0[15u].z, fma(_828, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _824)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1673 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1676 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1704 = frontier_phi_41_39_ladder;
        }
        float _2086;
        if (_1673 > 0.0)
        {
            _2086 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2086 = frontier_phi_50_46_ladder;
        }
        float _2410;
        if (_1676 > 0.0)
        {
            _2410 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2410 = frontier_phi_64_57_ladder;
        }
        float _2412 = isnan(_2086) ? _1704 : (isnan(_1704) ? _2086 : min(_1704, _2086));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1670) + _1659;
        float _2418 = (_2413 * _1673) + _1663;
        float _2419 = (_2413 * _1676) + _1667;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1611);
            frontier_phi_40_64_ladder = _2561.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2561.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2561.x * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_40_64_ladder_2;
        _1694 = frontier_phi_40_64_ladder_1;
        _1696 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1611);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _632);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1753 = fma(_832, cbModelParam._m0[21u].z, fma(_828, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _824)) + cbModelParam._m0[21u].w;
        float _1757 = fma(_832, cbModelParam._m0[22u].z, fma(_828, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _824)) + cbModelParam._m0[22u].w;
        float _1761 = fma(_832, cbModelParam._m0[23u].z, fma(_828, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _824)) + cbModelParam._m0[23u].w;
        float _1764 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1767 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1770 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _2091;
        if (_1764 > 0.0)
        {
            _2091 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2091 = frontier_phi_52_48_ladder;
        }
        float _2436;
        if (_1767 > 0.0)
        {
            _2436 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2436 = frontier_phi_66_59_ladder;
        }
        float _2626;
        if (_1770 > 0.0)
        {
            _2626 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2626 = frontier_phi_84_77_ladder;
        }
        float _2628 = isnan(_2436) ? _2091 : (isnan(_2091) ? _2436 : min(_2091, _2436));
        float _2629 = isnan(_2626) ? _2628 : (isnan(_2628) ? _2626 : min(_2628, _2626));
        float _2633 = (_2629 * _1764) + _1753;
        float _2634 = (_2629 * _1767) + _1757;
        float _2635 = (_2629 * _1770) + _1761;
        float _2636 = _2629 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2636;
        float _2639 = _2636 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2635 > _2639) || ((_2635 < _2637) || ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 < _2637) || (_2633 > _2639))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2877 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2635, cbModelParam._m0[17u].z, fma(_2634, cbModelParam._m0[17u].y, _2633 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2635, cbModelParam._m0[18u].z, fma(_2634, cbModelParam._m0[18u].y, _2633 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2635, cbModelParam._m0[19u].z, fma(_2634, cbModelParam._m0[19u].y, _2633 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_49_84_ladder = _2877.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2877.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2877.x * cbModelParam._m0[1u].z;
        }
        _1789 = frontier_phi_49_84_ladder_2;
        _1791 = frontier_phi_49_84_ladder_1;
        _1793 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1701);
        _1789 = _1773.x * cbModelParam._m0[1u].z;
        _1791 = _1773.y * cbModelParam._m0[1u].z;
        _1793 = _1773.z * cbModelParam._m0[1u].z;
    }
    float _1806 = (((_795 * _745) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1789 - _1692)) + _1692);
    float _1808 = (((_795 * _747) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1791 - _1694)) + _1694);
    float _1810 = (((_795 * _748) + _796) * _760) * ((cbModelParam._m0[1u].w * (_1793 - _1696)) + _1696);
    float _1813 = fma(_1810, cbSceneParam._m0[89u].z, fma(_1808, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1810, cbSceneParam._m0[90u].z, fma(_1808, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1810, cbSceneParam._m0[91u].z, fma(_1808, cbSceneParam._m0[91u].y, _1806 * cbSceneParam._m0[91u].x));
    vec4 _1827 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_679, _680));
    float _1829 = _1827.w;
    float _1841 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1829);
    float _1842 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1829);
    float _1843 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1829);
    uvec4 _1847 = floatBitsToUint(cbInstanceData._m0[_719 + 5u]);
    uint _1849 = _1847.x * 14u;
    uint _1850 = _1849 + 13u;
    float _1855 = _760 + (-1.0);
    float _1858 = (cbLight._m0[_1850].x * _1855) + 1.0;
    float _1859 = (cbLight._m0[_1850].y * _1855) + 1.0;
    uint _1860 = _1849 + 5u;
    float _1866 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1870 = _1849 + 4u;
    float _1879 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1883 = _1849 | 1u;
    float _1894 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_629, _630, _631));
    float _1897 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_629, _630, _631));
    float _3892 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _3903 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1902 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1904 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1911 = ((cbLight._m0[_1860].x * _1866) * _1904) + (((cbLight._m0[_1870].x * _1841) * _1879) * _1902);
    float _1912 = ((_1866 * cbLight._m0[_1860].y) * _1904) + (((cbLight._m0[_1870].y * _1842) * _1879) * _1902);
    float _1913 = ((_1866 * cbLight._m0[_1860].z) * _1904) + (((cbLight._m0[_1870].z * _1843) * _1879) * _1902);
    uint _1915 = _1849 + 8u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _632) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1849].x + _657;
    float _1931 = cbLight._m0[_1849].y + _658;
    float _1932 = cbLight._m0[_1849].z + _659;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1849].xyz));
    float _3914 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _1944 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _1945 = dot(vec3(_629, _630, _631), vec3(_1937, _1938, _1939));
    float _3936 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_1937, _1938, _1939));
    float _3947 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1929 * _1929;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1965 = exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0);
    float _1966 = 0.959999978542327880859375 - _742;
    float _1968 = 0.959999978542327880859375 - _743;
    float _1969 = 0.959999978542327880859375 - _744;
    float _1976 = 1.0 - _1929;
    float _1987 = (0.5 / (((_1944 * ((_1943 * _1976) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _1976) + _1929) * _1943))) * _1943;
    float _3958 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1989 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    uint _2003 = _1849 + 9u;
    float _2014 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _632) * 0.949999988079071044921875);
    float _2015 = _2014 * _2014;
    float _2016 = cbLight._m0[_1883].x + _657;
    float _2017 = cbLight._m0[_1883].y + _658;
    float _2018 = cbLight._m0[_1883].z + _659;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2023 = _2022 * _2016;
    float _2024 = _2022 * _2017;
    float _2025 = _2022 * _2018;
    float _2026 = dot(vec3(_629, _630, _631), vec3(cbLight._m0[_1883].xyz));
    float _3969 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _2030 = dot(vec3(_629, _630, _631), vec3(_2023, _2024, _2025));
    float _3980 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2023, _2024, _2025));
    float _3991 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2015 * _2015;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2049 = exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0);
    float _2056 = 1.0 - _2015;
    float _2066 = (0.5 / (((_1944 * ((_2029 * _2056) + _2015)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2056) + _2015) * _2029))) * _2029;
    float _4002 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    float _2078 = (((((_2049 * _1966) + _745) * cbLight._m0[_2003].x) * _2068) * _1866) + ((((cbLight._m0[_1915].x * _1841) * ((_1965 * _1966) + _745)) * _1989) * _1879);
    float _2079 = (((((_2049 * _1968) + _747) * cbLight._m0[_2003].y) * _2068) * _1866) + ((((cbLight._m0[_1915].y * _1842) * ((_1965 * _1968) + _747)) * _1989) * _1879);
    float _2080 = (((((_2049 * _1969) + _748) * cbLight._m0[_2003].z) * _2068) * _1866) + ((((cbLight._m0[_1915].z * _1843) * ((_1965 * _1969) + _748)) * _1989) * _1879);
    float _2195;
    float _2197;
    float _2199;
    float _2201;
    float _2203;
    float _2205;
    if (_1847.y == 0u)
    {
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2136 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2135;
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2135;
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2135;
        uvec4 _2150 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2151 = _2150.x;
        uint _2162 = uint((float(_2150.y) * floor(float(uint(cbSceneParam._m0[85u].y * _680) / _2151))) + floor(float(uint(cbSceneParam._m0[85u].x * _679) / _2151)));
        float _2172 = (log2(_2138 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2173 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        uint _2176 = uint(isnan(14.0) ? _2173 : (isnan(_2173) ? 14.0 : min(_2173, 14.0)));
        uvec4 _2181 = texelFetch(g_lightClusterGridBuffer, int(((_2176 << 2u) + (_2162 << 6u)) >> 2u));
        uint _2182 = _2181.x;
        uint _2183 = _2150.z;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        if (((((1u << ((_2183 >> 4u) & 15u)) + 4294967295u) & _2182) == 0u) || ((_2183 & 240u) == 0u))
        {
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
        }
        else
        {
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            uint _2479 = 0u;
            uint _2488;
            bool _2489;
            for (;;)
            {
                _2488 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2479 << 2u)) >> 2u)).x;
                _2489 = _2488 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2489)
                {
                    frontier_phi_79_pred = _2478;
                    frontier_phi_79_pred_1 = _2477;
                    frontier_phi_79_pred_2 = _2476;
                    frontier_phi_79_pred_3 = _2475;
                    frontier_phi_79_pred_4 = _2474;
                    frontier_phi_79_pred_5 = _2473;
                }
                else
                {
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    uint _2675;
                    _2669 = _2473;
                    _2670 = _2474;
                    _2671 = _2475;
                    _2672 = _2476;
                    _2673 = _2477;
                    _2674 = _2478;
                    _2675 = _2488;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    float _2575;
                    for (;;)
                    {
                        uint _2679 = uint(findLSB(_2675)) + (_2479 << 5u);
                        uint _2676 = (_2675 + 4294967295u) & _2675;
                        uint _2681 = _2679 * 48u;
                        vec4 _2695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2701 = (_2679 * 48u) + 4u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2720 = (_2679 * 48u) + 8u;
                        vec3 _2731 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x));
                        float _2735 = _2695.x - _2136;
                        float _2736 = _2695.y - _2137;
                        float _2737 = _2695.z - _2138;
                        float _2738 = dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737));
                        float _2741 = inversesqrt(_2738);
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2745 = dot(vec3(_700, _703, _706), vec3(_2742, _2743, _2744));
                        float _2750 = 1.0 - (_2738 * _2695.w);
                        float _4023 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2751 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2752 = sqrt(_2738) * _2714.w;
                        float _2755 = 1.39999997615814208984375 / (_2752 + 1.39999997615814208984375);
                        float _2756 = _2755 * _2755;
                        float _2759 = ((1.0 - _2756) * _2745) + _2756;
                        float _2762 = _2752 * _2752;
                        float _2766 = ((isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * _2751) / ((_2762 * 0.699999988079071044921875) + 1.0);
                        float _2770 = (-0.0) - _2136;
                        float _2771 = (-0.0) - _2137;
                        float _2772 = (-0.0) - _2138;
                        float _2776 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
                        float _2777 = _2776 * _2770;
                        float _2778 = _2776 * _2771;
                        float _2779 = _2776 * _2772;
                        float _2787 = exp2(log2(1.0 / ((_2762 * 3.5) + 5.0)) * 0.25);
                        float _2788 = 1.0 - _776;
                        float _2795 = sqrt(1.0 - ((1.0 - (_2788 * _2788)) * (1.0 - (_2787 * _2787))));
                        float _2796 = _2795 * _2795;
                        float _2797 = _2796 * _2796;
                        float _2798 = _2777 + _2742;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2808 = dot(vec3(_700, _703, _706), vec3(_2777, _2778, _2779));
                        float _4039 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2812 = dot(vec3(_700, _703, _706), vec3(_2804 * _2798, _2804 * _2799, _2804 * _2800));
                        float _4050 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2815 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2819 = ((_2815 * _2815) * (_2797 + (-1.0))) + 1.0;
                        float _2820 = _2755 * _2796;
                        float _2821 = _2820 * _2820;
                        float _2824 = ((1.0 - _2821) * _2745) + _2821;
                        float _4061 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2825 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2826 = 1.0 - _2796;
                        float _2836 = (0.5 / (((_2825 * ((_2811 * _2826) + _2796)) + 9.9999999392252902907785028219223e-09) + (((_2825 * _2826) + _2796) * _2811))) * _2825;
                        float _4072 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2847 = (((_2797 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_2819 * _2819) * ((_2762 * 2.1991131305694580078125) + 3.141590118408203125))) * _2751;
                        _2573 = (_2766 * _2714.x) + _2672;
                        _2574 = (_2766 * _2714.y) + _2673;
                        _2575 = (_2766 * _2714.z) + _2674;
                        _2570 = (_2847 * _2731.x) + _2669;
                        _2571 = (_2847 * _2731.y) + _2670;
                        _2572 = (_2847 * _2731.z) + _2671;
                        if (_2676 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2669 = _2570;
                            _2670 = _2571;
                            _2671 = _2572;
                            _2672 = _2573;
                            _2673 = _2574;
                            _2674 = _2575;
                            _2675 = _2676;
                        }
                    }
                    frontier_phi_79_pred = _2575;
                    frontier_phi_79_pred_1 = _2574;
                    frontier_phi_79_pred_2 = _2573;
                    frontier_phi_79_pred_3 = _2572;
                    frontier_phi_79_pred_4 = _2571;
                    frontier_phi_79_pred_5 = _2570;
                }
                _2300 = frontier_phi_79_pred;
                _2298 = frontier_phi_79_pred_1;
                _2296 = frontier_phi_79_pred_2;
                _2294 = frontier_phi_79_pred_3;
                _2292 = frontier_phi_79_pred_4;
                _2290 = frontier_phi_79_pred_5;
                uint _2480 = _2479 + 1u;
                if (_2480 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2473 = _2290;
                    _2474 = _2292;
                    _2475 = _2294;
                    _2476 = _2296;
                    _2477 = _2298;
                    _2478 = _2300;
                    _2479 = _2480;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
        }
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.z;
        uint _2306 = (_2304 >> 8u) & 15u;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        if (((4294967295u << _2306) & _2182) == 0u)
        {
            _2441 = _2289;
            _2443 = _2291;
            _2445 = _2293;
            _2447 = _2295;
            _2449 = _2297;
            _2451 = _2299;
        }
        else
        {
            float _2466 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
            float _2467 = _2466 * _2136;
            float _2468 = _2466 * _2137;
            float _2469 = _2466 * _2138;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2306 < ((_2304 >> 12u) & 15u))
            {
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2450;
                float _2452;
                float _2652 = _2289;
                float _2653 = _2291;
                float _2654 = _2293;
                float _2655 = _2295;
                float _2656 = _2297;
                float _2657 = _2299;
                uint _2658 = _2306;
                uint _2667;
                bool _2668;
                for (;;)
                {
                    _2667 = texelFetch(g_lightClassification, int((((_2176 << 5u) + (_2162 << 9u)) + (_2658 << 2u)) >> 2u)).x;
                    _2668 = _2667 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2668)
                    {
                        frontier_phi_93_pred = _2656;
                        frontier_phi_93_pred_1 = _2655;
                        frontier_phi_93_pred_2 = _2654;
                        frontier_phi_93_pred_3 = _2653;
                        frontier_phi_93_pred_4 = _2652;
                        frontier_phi_93_pred_5 = _2657;
                    }
                    else
                    {
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _2886;
                        float _2887;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2895 = _2652;
                        float _2896 = _2653;
                        float _2897 = _2654;
                        float _2898 = _2655;
                        float _2899 = _2656;
                        float _2900 = _2657;
                        uint _2901 = _2667;
                        uint _2902;
                        vec4 _2927;
                        float _2928;
                        vec4 _2943;
                        vec3 _2955;
                        vec4 _2970;
                        vec4 _2985;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2912 = ((_2658 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2901));
                            _2902 = (_2901 + 4294967295u) & _2901;
                            uint _2914 = _2912 * 40u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            _2928 = _2927.w;
                            uint _2930 = (_2912 * 40u) + 4u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2945 = (_2912 * 40u) + 8u;
                            _2955 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x));
                            uint _2957 = (_2912 * 40u) + 16u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2912 * 40u) + 20u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2912 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2912 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2138, _3019.z, fma(_2137, _3019.y, _3019.x * _2136)) + _3019.w;
                            _3032 = !((fma(_2138, _3000.z, fma(_2137, _3000.y, _3000.x * _2136)) + _3000.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2927.x - _2136;
                                float _3060 = _2927.y - _2137;
                                float _3061 = _2927.z - _2138;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2928 * _2928));
                                float _4083 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3077 = sqrt(_3062) * _2943.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_700, _703, _706))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2138, _2970.z, fma(_2137, _2970.y, _2970.x * _2136)) + _2970.w) / _3031;
                                float _3091 = (fma(_2138, _2985.z, fma(_2137, _2985.y, _2985.x * _2136)) + _2985.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4099 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _776;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2467;
                                float _3121 = _3067 - _2468;
                                float _3122 = _3068 - _2469;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_700, _703, _706), vec3((-0.0) - _2467, (-0.0) - _2468, (-0.0) - _2469));
                                float _4110 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3134 = dot(vec3(_700, _703, _706), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4121 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_700, _703, _706), vec3(_3066, _3067, _3068))) + _3143;
                                float _4132 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4143 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3097 * _2943.z;
                                frontier_phi_99_pred_1 = _3097 * _2943.y;
                                frontier_phi_99_pred_2 = _3097 * _2943.x;
                                frontier_phi_99_pred_3 = _3171 * _2955.z;
                                frontier_phi_99_pred_4 = _3171 * _2955.y;
                                frontier_phi_99_pred_5 = _3171 * _2955.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_99_pred;
                            _3179 = frontier_phi_99_pred_1;
                            _3178 = frontier_phi_99_pred_2;
                            _3177 = frontier_phi_99_pred_3;
                            _3176 = frontier_phi_99_pred_4;
                            _3175 = frontier_phi_99_pred_5;
                            _2885 = _3178 + _2898;
                            _2886 = _3179 + _2899;
                            _2887 = _3180 + _2900;
                            _2882 = _3175 + _2895;
                            _2883 = _3176 + _2896;
                            _2884 = _3177 + _2897;
                            if (_2902 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2886;
                                _2900 = _2887;
                                _2901 = _2902;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2886;
                        frontier_phi_93_pred_1 = _2885;
                        frontier_phi_93_pred_2 = _2884;
                        frontier_phi_93_pred_3 = _2883;
                        frontier_phi_93_pred_4 = _2882;
                        frontier_phi_93_pred_5 = _2887;
                    }
                    _2450 = frontier_phi_93_pred;
                    _2448 = frontier_phi_93_pred_1;
                    _2446 = frontier_phi_93_pred_2;
                    _2444 = frontier_phi_93_pred_3;
                    _2442 = frontier_phi_93_pred_4;
                    _2452 = frontier_phi_93_pred_5;
                    uint _2659 = _2658 + 1u;
                    if (_2659 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2652 = _2442;
                        _2653 = _2444;
                        _2654 = _2446;
                        _2655 = _2448;
                        _2656 = _2450;
                        _2657 = _2452;
                        _2658 = _2659;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2452;
                frontier_phi_68_69_ladder_1 = _2450;
                frontier_phi_68_69_ladder_2 = _2448;
                frontier_phi_68_69_ladder_3 = _2446;
                frontier_phi_68_69_ladder_4 = _2442;
                frontier_phi_68_69_ladder_5 = _2444;
            }
            else
            {
                frontier_phi_68_69_ladder = _2299;
                frontier_phi_68_69_ladder_1 = _2297;
                frontier_phi_68_69_ladder_2 = _2295;
                frontier_phi_68_69_ladder_3 = _2293;
                frontier_phi_68_69_ladder_4 = _2289;
                frontier_phi_68_69_ladder_5 = _2291;
            }
            _2441 = frontier_phi_68_69_ladder_4;
            _2443 = frontier_phi_68_69_ladder_5;
            _2445 = frontier_phi_68_69_ladder_3;
            _2447 = frontier_phi_68_69_ladder_2;
            _2449 = frontier_phi_68_69_ladder_1;
            _2451 = frontier_phi_68_69_ladder;
        }
        float _2456 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2195 = (_2456 * _2447) + _1911;
        _2197 = (_2456 * _2449) + _1912;
        _2199 = (_2456 * _2451) + _1913;
        _2201 = ((_2441 * _745) * _2456) + _2078;
        _2203 = ((_2443 * _747) * _2456) + _2079;
        _2205 = ((_2445 * _748) * _2456) + _2080;
    }
    else
    {
        _2195 = _1911;
        _2197 = _1912;
        _2199 = _1913;
        _2201 = _2078;
        _2203 = _2079;
        _2205 = _2080;
    }
    uint _2211 = _721 + uint(cbMatDynParam._m0[0u].w);
    float _4159 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _4170 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _4181 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _2236 = (((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2195 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _760))) + ((_2201 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2211].x * ((_560 * ((_516 - _436) - (_516 * _292))) + _436));
    float _2238 = ((cbInstanceData._m0[_2211].y * ((_560 * ((_517 - _437) - (_517 * _292))) + _437)) + ((_2203 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2197 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _760)));
    float _2240 = ((cbInstanceData._m0[_2211].z * ((_560 * ((_518 - _438) - (_518 * _292))) + _438)) + ((_2205 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1600)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2199 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _760)));
    float _2241 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2242 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2243 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    uint _2244 = _719 + 6u;
    float _2252 = _679 / cbSceneParam._m0[86u].x;
    float _2253 = _680 / cbSceneParam._m0[86u].y;
    vec4 _2267 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, (log2((isnan(cbSceneParam._m0[77u].w) ? _652 : (isnan(_652) ? cbSceneParam._m0[77u].w : min(_652, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2269 = _2267.x;
    float _2270 = _2267.y;
    float _2271 = _2267.z;
    float _2272 = _2267.w;
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    if (_652 > cbSceneParam._m0[78u].w)
    {
        float _2314 = isnan(_652) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _652 : min(cbSceneParam._m0[80u].w, _652));
        float _2315 = _2314 / _652;
        float _2326 = _2315 * _265;
        float _2327 = _266 * _2315;
        float _2328 = (-0.0) - _2327;
        float _2329 = _2315 * _267;
        float _2331 = (cbSceneParam._m0[77u].w * _2328) / _2314;
        float _2332 = _2331 + cbSceneParam._m0[79u].w;
        float _2333 = cbSceneParam._m0[79u].w - _2327;
        float _2339 = sqrt(((_2326 * _2326) + (_2327 * _2327)) + (_2329 * _2329));
        float _2342 = (1.0 - (cbSceneParam._m0[77u].w / _2314)) * _2339;
        float _2348 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2350 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2583;
        if (abs((_2328 - _2331) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2583 = ((((_2332 > 0.0) ? exp2(_2348 * _2332) : (2.0 - exp2(_2350 * _2332))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2342;
        }
        else
        {
            float _2502 = 1.0 / cbSceneParam._m0[80u].x;
            float _2503 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : max(_2332, _2333));
            float _2504 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : min(_2332, _2333));
            float _2513 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : min(_2503, 0.0));
            float _2514 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : min(_2504, 0.0));
            _2583 = ((abs(_2339 / _2328) * cbSceneParam._m0[80u].y) * ((((_2513 - _2514) * 2.0) - ((exp2(_2348 * (isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0)))) - exp2(_2348 * (isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0))))) * _2502)) - ((exp2(_2350 * _2513) - exp2(_2350 * _2514)) * _2502))) + (_2342 * cbSceneParam._m0[80u].z);
        }
        vec4 _2585 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2252, _2253, 1.0), 0.0);
        float _2594 = exp2((_2583 * (-1.44269502162933349609375)) * (1.0 - _2585.w));
        float _2595 = log2(_2594);
        float _2611 = log2(_2272);
        _2352 = (exp2(_2611 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].x)) * _2585.x) / cbSceneParam._m0[78u].x)) + _2269;
        _2354 = (exp2(_2611 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].y)) * _2585.y) / cbSceneParam._m0[78u].y)) + _2270;
        _2356 = (exp2(_2611 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2595 * cbSceneParam._m0[78u].z)) * _2585.z) / cbSceneParam._m0[78u].z)) + _2271;
        _2358 = _2594 * _2272;
    }
    else
    {
        _2352 = _2269;
        _2354 = _2270;
        _2356 = _2271;
        _2358 = _2272;
    }
    bool _2621;
    vec4 _2368;
    vec4 _2390;
    float _2392;
    float _2396;
    float _2397;
    float _2398;
    float _2399;
    bool _2409;
    for (;;)
    {
        _2368 = cbMatDynParam._m0[0u];
        float _2370 = roundEven(_2368.y);
        bool _2371 = _2370 == 3.0;
        float _2372 = log2(_2358);
        float _2379 = exp2(_2372 * cbSceneParam._m0[78u].x) * _2241;
        float _2380 = exp2(_2372 * cbSceneParam._m0[78u].y) * _2242;
        float _2381 = exp2(_2372 * cbSceneParam._m0[78u].z) * _2243;
        float _2388 = _666 + (-0.5);
        _2390 = cbMtdParam._m0[1u];
        _2392 = _2390.y * _2388;
        float _2395 = (_2370 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2396 = _2395 * (_2371 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2352)));
        _2397 = _2395 * (_2371 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2354)));
        _2398 = _2395 * (_2371 ? _2381 : (_2381 + (cbSceneParam._m0[72u].w * _2356)));
        _2399 = _2388 * 0.999000012874603271484375;
        _2409 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2409)
        {
            if ((cbInstanceData._m0[_719 + 7u].x + _2399) < 0.5)
            {
                _2621 = true;
                break;
            }
        }
        uint _2537 = _721 + uint(_2368.w);
        if ((cbInstanceData._m0[_2537].w < 1.0) && ((cbInstanceData._m0[_2537].w + _2399) < 0.5))
        {
            _2621 = true;
            break;
        }
        if ((_2392 + 1.0) < _2390.x)
        {
            _2621 = true;
            break;
        }
        _2621 = false;
        break;
    }
    float _2852;
    if (_2621)
    {
        discard_state = true;
        _2852 = 0.0;
    }
    else
    {
        _2852 = cbInstanceData._m0[_2244].w;
    }
    SV_Target.x = _2396;
    SV_Target.y = _2397;
    SV_Target.z = _2398;
    SV_Target.w = _2852;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2244].w;
    discard_exit();
}


