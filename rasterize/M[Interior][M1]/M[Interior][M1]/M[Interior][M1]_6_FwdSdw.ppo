#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1248;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    float _570 = (_560 * ((_516 - _436) - (_516 * _292))) + _436;
    float _571 = (_560 * ((_517 - _437) - (_517 * _292))) + _437;
    float _572 = (_560 * ((_518 - _438) - (_518 * _292))) + _438;
    float _587 = (cbMtdParam._m0[21u].z * _351) * _357;
    float _589 = (cbMtdParam._m0[21u].y * _352) * _357;
    bool _590 = _587 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _595 = frontier_phi_27_26_ladder;
    }
    bool _597 = _589 > 0.0;
    float _602;
    if (_597)
    {
        _602 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _602 = frontier_phi_31_30_ladder;
    }
    float _605 = _380 ? (cbMtdParam._m0[18u].x / _358) : 5000.0;
    float _606 = isnan(_602) ? _595 : (isnan(_595) ? _602 : min(_595, _602));
    float _607 = isnan(_605) ? _606 : (isnan(_606) ? _605 : min(_606, _605));
    float _611 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _615 = ((_607 * _358) + _611) / _611;
    float _620 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _622 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _639 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_607 * _587)) / _615) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_607 * _589)) / _615) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _644 = _639.x * cbMtdParam._m0[14u].x;
    float _645 = _639.y * cbMtdParam._m0[14u].y;
    float _646 = _639.z * cbMtdParam._m0[14u].z;
    float _654;
    if (_590)
    {
        _654 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _654 = frontier_phi_35_34_ladder;
    }
    float _660;
    if (_597)
    {
        _660 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _660 = frontier_phi_39_38_ladder;
    }
    float _662 = isnan(_660) ? _654 : (isnan(_654) ? _660 : min(_654, _660));
    float _663 = isnan(_605) ? _662 : (isnan(_662) ? _605 : min(_662, _605));
    float _670 = ((_663 * _358) + _611) / _611;
    vec4 _684 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_663 * _587)) / _670) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_663 * _589)) / _670) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _686 = _684.w;
    float _688 = _686 - (_686 * _292);
    vec4 _712 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _714 = _712.x;
    vec4 _726 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _734 = (_726.x * 2.0) + (-1.0);
    float _736 = (_726.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_734, _736), vec2(_734, _736));
    float _3714 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _742 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    float _743 = _726.z * _292;
    float _746 = fma(_742, _201, fma(_736, _208, _734 * _194));
    float _749 = fma(_742, _202, fma(_736, _209, _734 * _195));
    float _752 = fma(_742, _203, fma(_736, _210, _734 * _196));
    float _756 = inversesqrt(dot(vec3(_746, _749, _752), vec3(_746, _749, _752)));
    float _757 = _756 * _746;
    float _758 = _756 * _749;
    float _759 = _756 * _752;
    float _3725 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _760 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3747 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3758 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3769 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _764 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _784 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _785 = _265 * _784;
    float _786 = _266 * _784;
    float _787 = _267 * _784;
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_759, cbSceneParam._m0[5u].z, fma(_758, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _757));
    float _817 = fma(_759, cbSceneParam._m0[6u].z, fma(_758, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _757));
    float _820 = fma(_759, cbSceneParam._m0[7u].z, fma(_758, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _757));
    uint _833 = uint(roundEven(NORMAL.w)) * 13u;
    uint _835 = _833 + 9u;
    uint _836 = _835 + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3780 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _3791 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _848 = 1.0 - _764;
    float _849 = _845 * _848;
    float _850 = _846 * _848;
    float _851 = _847 * _848;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _764;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _764;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _764;
    float _859 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _874 = _871.x * TEXCOORD.z;
    float _875 = dot(vec3(_757, _758, _759), vec3(_785, _786, _787));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _757) - _785;
    float _883 = (_878 * _758) - _786;
    float _884 = (_878 * _759) - _787;
    float _888 = abs(dot(vec3(_785, _786, _787), vec3(_757, _758, _759)));
    float _3813 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_760);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _909 = (1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _890;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1247;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _974 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _978 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _982 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1005 = _938 + _757;
        float _1006 = _942 + _758;
        float _1007 = _946 + _759;
        float _1017 = fma(_1007, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005)) - _974;
        float _1018 = fma(_1007, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005)) - _978;
        float _1019 = fma(_1007, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005)) - _982;
        float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
        float _1036 = ((_1023 * _1017) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_974 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1023 * _1018) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_978 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1023 * _1019) / cbModelParam._m0[34u].z) + ((((((_982 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1036, _1037, _1038), 0.0);
        float _1075 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1041.x + (-0.5));
        float _1077 = _1075 * (_1041.y + (-0.5));
        float _1078 = _1075 * (_1041.z + (-0.5));
        float _1085 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1048.x + (-0.5));
        float _1087 = _1085 * (_1048.y + (-0.5));
        float _1088 = _1085 * (_1048.z + (-0.5));
        float _1095 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1055.x + (-0.5));
        float _1097 = _1095 * (_1055.y + (-0.5));
        float _1098 = _1095 * (_1055.z + (-0.5));
        float _1105 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1062.x + (-0.5));
        float _1107 = _1105 * (_1062.y + (-0.5));
        float _1108 = _1105 * (_1062.z + (-0.5));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = _1076 * 0.5;
        float _1113 = _1086 * 0.5;
        float _1114 = _1096 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1129 = (dot(vec3(_757, _758, _759), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1139 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3861 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1141 + 1.0))) + _1146) * _1109;
        float _1156 = _1077 * 0.5;
        float _1157 = _1087 * 0.5;
        float _1158 = _1097 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_757, _758, _759), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3894 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1183 + 1.0))) + _1188) * _1110;
        float _1198 = _1078 * 0.5;
        float _1199 = _1088 * 0.5;
        float _1200 = _1098 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_757, _758, _759), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3927 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1225 + 1.0))) + _1230) * _1111;
        _1247 = _1078;
        _1249 = _1077;
        _1250 = _1076;
        _1251 = _1088;
        _1252 = _1087;
        _1253 = _1086;
        _1254 = _1098;
        _1255 = _1097;
        _1256 = _1096;
        _1257 = _1111;
        _1258 = _1110;
        _1259 = _1109;
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
    }
    else
    {
        _1247 = _1248;
        _1249 = _1248;
        _1250 = _1248;
        _1251 = _1248;
        _1252 = _1248;
        _1253 = _1248;
        _1254 = _1248;
        _1255 = _1248;
        _1256 = _1248;
        _1257 = _1248;
        _1258 = _1248;
        _1259 = _1248;
        _1260 = 0.0;
        _1261 = 0.0;
        _1262 = 0.0;
    }
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1288 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1292 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1296 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1319 = _938 + _757;
        float _1320 = _942 + _758;
        float _1321 = _946 + _759;
        float _1331 = fma(_1321, cbModelParam._m0[30u].z, fma(_1320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319)) - _1288;
        float _1332 = fma(_1321, cbModelParam._m0[31u].z, fma(_1320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319)) - _1292;
        float _1333 = fma(_1321, cbModelParam._m0[32u].z, fma(_1320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319)) - _1296;
        float _1337 = inversesqrt(dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333)));
        float _1350 = ((_1337 * _1331) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1288 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1337 * _1332) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1292 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1337 * _1333) / cbModelParam._m0[35u].z) + ((((((_1296 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1387 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1354.x + (-0.5));
        float _1389 = _1387 * (_1354.y + (-0.5));
        float _1390 = _1387 * (_1354.z + (-0.5));
        float _1397 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1361.x + (-0.5));
        float _1399 = _1397 * (_1361.y + (-0.5));
        float _1400 = _1397 * (_1361.z + (-0.5));
        float _1407 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1368.x + (-0.5));
        float _1409 = _1407 * (_1368.y + (-0.5));
        float _1410 = _1407 * (_1368.z + (-0.5));
        float _1417 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1375.x + (-0.5));
        float _1419 = _1417 * (_1375.y + (-0.5));
        float _1420 = _1417 * (_1375.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1440 = (dot(vec3(_757, _758, _759), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1449 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1451 = _1450 * 2.0;
        float _1455 = (1.0 - _1450) / (_1450 + 1.0);
        float _3990 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1465 = ((((1.0 - _1456) * (_1451 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1451 + 1.0))) + _1456) * _1421;
        float _1466 = _1389 * 0.5;
        float _1467 = _1399 * 0.5;
        float _1468 = _1409 * 0.5;
        float _1469 = dot(vec3(_1466, _1467, _1468), vec3(_1466, _1467, _1468));
        float _1474 = (_1469 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1469);
        float _1482 = (dot(vec3(_757, _758, _759), vec3(_1474 * _1466, _1474 * _1467, _1474 * _1468)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1491 = sqrt(((_1467 * _1467) + (_1466 * _1466)) + (_1468 * _1468)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1493 = _1492 * 2.0;
        float _1497 = (1.0 - _1492) / (_1492 + 1.0);
        float _4023 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1507 = ((((1.0 - _1498) * (_1493 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1493 + 1.0))) + _1498) * _1422;
        float _1508 = _1390 * 0.5;
        float _1509 = _1400 * 0.5;
        float _1510 = _1410 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_757, _758, _759), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4056 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1535 + 1.0))) + _1540) * _1423;
        _1557 = _1390;
        _1558 = _1389;
        _1559 = _1388;
        _1560 = _1400;
        _1561 = _1399;
        _1562 = _1398;
        _1563 = _1410;
        _1564 = _1409;
        _1565 = _1408;
        _1566 = _1423;
        _1567 = _1422;
        _1568 = _1421;
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
    }
    else
    {
        _1557 = _1248;
        _1558 = _1248;
        _1559 = _1248;
        _1560 = _1248;
        _1561 = _1248;
        _1562 = _1248;
        _1563 = _1248;
        _1564 = _1248;
        _1565 = _1248;
        _1566 = _1248;
        _1567 = _1248;
        _1568 = _1248;
        _1569 = 0.0;
        _1570 = 0.0;
        _1571 = 0.0;
    }
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1604 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1582, cbSceneParam._m0[89u].y, _1581 * cbSceneParam._m0[89u].x));
    float _1607 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1582, cbSceneParam._m0[90u].y, _1581 * cbSceneParam._m0[90u].x));
    float _1610 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1582, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1581));
    float _1625 = _882 * 0.5;
    float _1626 = _883 * 0.5;
    float _1627 = _884 * 0.5;
    float _1628 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1631 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1634 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1668;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1641 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1247, _1251, _1254, _1257));
        float _1645 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1649 = dot(vec4(_1625, _1626, _1627, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1656 = dot(vec4(cbModelParam._m0[39u]), vec4(_1625, _1626, _1627, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1656) ? 0.0 : (isnan(0.0) ? _1656 : max(0.0, _1656))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1679;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1670 = dot(vec4(cbModelParam._m0[40u]), vec4(_1625, _1626, _1627, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)), isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1670) ? 0.0 : (isnan(0.0) ? _1670 : max(0.0, _1670))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1683 = (_1679 * cbModelParam._m0[1u].x) + (_1668 * (1.0 - cbModelParam._m0[1u].x));
    float _1693 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1694 = isnan(_1693) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1693 : min(cbModelParam._m0[25u].z, _1693));
    float _1774;
    float _1776;
    float _1778;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1741 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1745 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1749 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1752 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1755 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1758 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1786;
        if (_1752 > 0.0)
        {
            _1786 = abs((1.0 - _1741) / _1752);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1752 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1741 + 1.0) / _1752);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1786 = frontier_phi_54_52_ladder;
        }
        float _1956;
        if (_1755 > 0.0)
        {
            _1956 = abs((1.0 - _1745) / _1755);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1755 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1745 + 1.0) / _1755);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1956 = frontier_phi_63_59_ladder;
        }
        float _2411;
        if (_1758 > 0.0)
        {
            _2411 = abs((1.0 - _1749) / _1758);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1749 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2411 = frontier_phi_75_70_ladder;
        }
        float _2413 = isnan(_1956) ? _1786 : (isnan(_1786) ? _1956 : min(_1786, _1956));
        float _2414 = isnan(_2411) ? _2413 : (isnan(_2413) ? _2411 : min(_2413, _2411));
        float _2418 = (_2414 * _1752) + _1741;
        float _2419 = (_2414 * _1755) + _1745;
        float _2420 = (_2414 * _1758) + _1749;
        float _2421 = _2414 * 9.9999997473787516355514526367188e-05;
        float _2423 = (-1.0) - _2421;
        float _2425 = _2421 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2420 > _2425) || ((_2420 < _2423) || ((_2419 > _2425) || ((_2419 < _2423) || ((_2418 < _2423) || (_2418 > _2425))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2670 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2420, cbModelParam._m0[9u].z, fma(_2419, cbModelParam._m0[9u].y, _2418 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2420, cbModelParam._m0[10u].z, fma(_2419, cbModelParam._m0[10u].y, _2418 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2420, cbModelParam._m0[11u].z, fma(_2419, cbModelParam._m0[11u].y, _2418 * cbModelParam._m0[11u].x))), _1694);
            frontier_phi_53_75_ladder = _2670.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2670.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2670.x * cbModelParam._m0[1u].y;
        }
        _1774 = frontier_phi_53_75_ladder_2;
        _1776 = frontier_phi_53_75_ladder_1;
        _1778 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1694);
        _1774 = _1762.x * cbModelParam._m0[1u].y;
        _1776 = _1762.y * cbModelParam._m0[1u].y;
        _1778 = _1762.z * cbModelParam._m0[1u].y;
    }
    float _1782 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1783 = isnan(_1782) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1782 : min(cbModelParam._m0[25u].w, _1782));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1849 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1852 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _1961;
        if (_1846 > 0.0)
        {
            _1961 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1961 = frontier_phi_65_61_ladder;
        }
        float _2438;
        if (_1849 > 0.0)
        {
            _2438 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2438 = frontier_phi_77_72_ladder;
        }
        float _2791;
        if (_1852 > 0.0)
        {
            _2791 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2791 = frontier_phi_89_84_ladder;
        }
        float _2793 = isnan(_2438) ? _1961 : (isnan(_1961) ? _2438 : min(_1961, _2438));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _1846) + _1835;
        float _2799 = (_2794 * _1849) + _1839;
        float _2800 = (_2794 * _1852) + _1843;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _1783);
            frontier_phi_62_89_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_62_89_ladder_2;
        _1873 = frontier_phi_62_89_ladder_1;
        _1875 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1783);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1888 = (((_909 * _859) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1871 - _1774)) + _1774);
    float _1890 = (((_909 * _861) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1873 - _1776)) + _1776);
    float _1892 = (((_909 * _862) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1875 - _1778)) + _1778);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1890, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1890, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1890, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1948 = _1935 / _1947;
    float _1949 = _1939 / _1947;
    float _1950 = _1943 / _1947;
    float _2097;
    float _2098;
    float _2099;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1977 = ((uint(_1950 > cbSceneParam._m0[59u].y) + uint(_1950 > cbSceneParam._m0[59u].x)) + uint(_1950 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1978 = _1977 + 43u;
        uint _1986 = _1977 + 44u;
        uint _1994 = _1977 + 45u;
        uint _2002 = _1977 + 46u;
        float _2013 = fma(_1947, cbSceneParam._m0[_1978].w, fma(_1943, cbSceneParam._m0[_1978].z, fma(_1939, cbSceneParam._m0[_1978].y, _1935 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1947, cbSceneParam._m0[_1986].w, fma(_1943, cbSceneParam._m0[_1986].z, fma(_1939, cbSceneParam._m0[_1986].y, _1935 * cbSceneParam._m0[_1986].x)));
        float _2025 = fma(_1947, cbSceneParam._m0[_2002].w, fma(_1943, cbSceneParam._m0[_2002].z, fma(_1939, cbSceneParam._m0[_2002].y, _1935 * cbSceneParam._m0[_2002].x)));
        float _2030 = cbSceneParam._m0[33u].z * _2025;
        float _2032 = cbSceneParam._m0[33u].w * _2025;
        float _2035 = fma(_1947, cbSceneParam._m0[_1994].w, fma(_1943, cbSceneParam._m0[_1994].z, fma(_1939, cbSceneParam._m0[_1994].y, _1935 * cbSceneParam._m0[_1994].x))) / _2025;
        float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
        float _4182 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2090 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2013) / _2025, (_2032 + _2017) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 + _2013) / _2025, (_2017 - _2030) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2030) / _2025, (_2017 - _2032) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2032) / _2025, (_2030 + _2017) / _2025), _2035), 0.0)).x), vec4(0.25)));
        _2097 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
        _2098 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
        _2099 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2097 = 1.0;
        _2098 = 1.0;
        _2099 = 1.0;
    }
    float _2163;
    float _2165;
    float _2167;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2151 = fma(_1947, cbSceneParam._m0[63u].w, fma(_1943, cbSceneParam._m0[63u].z, fma(_1939, cbSceneParam._m0[63u].y, _1935 * cbSceneParam._m0[63u].x)));
        float _2152 = fma(_1947, cbSceneParam._m0[60u].w, fma(_1943, cbSceneParam._m0[60u].z, fma(_1939, cbSceneParam._m0[60u].y, _1935 * cbSceneParam._m0[60u].x))) / _2151;
        float _2153 = fma(_1947, cbSceneParam._m0[61u].w, fma(_1943, cbSceneParam._m0[61u].z, fma(_1939, cbSceneParam._m0[61u].y, _1935 * cbSceneParam._m0[61u].x))) / _2151;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2152 >= cbSceneParam._m0[64u].x) && (_2153 >= cbSceneParam._m0[64u].y)) && (_2152 <= cbSceneParam._m0[64u].z)) && (_2153 <= cbSceneParam._m0[64u].w))
        {
            float _2451 = fma(_1947, cbSceneParam._m0[62u].w, fma(_1943, cbSceneParam._m0[62u].z, fma(_1939, cbSceneParam._m0[62u].y, _1935 * cbSceneParam._m0[62u].x))) / _2151;
            float _2455 = isnan(cbSceneParam._m0[41u].w) ? _2451 : (isnan(_2451) ? cbSceneParam._m0[41u].w : max(_2451, cbSceneParam._m0[41u].w));
            float _2498 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
            float _4198 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
            float _2505 = (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2152, cbSceneParam._m0[33u].w + _2153), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2152, _2153 - cbSceneParam._m0[33u].z), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].z, _2153 - cbSceneParam._m0[33u].w), _2455), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2153), _2455), 0.0)).x), vec4(0.25)));
            float _2509 = 1.0 - (_2505 * cbSceneParam._m0[34u].x);
            float _2510 = 1.0 - (_2505 * cbSceneParam._m0[34u].y);
            float _2511 = 1.0 - (_2505 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2509) ? _2097 : (isnan(_2097) ? _2509 : min(_2097, _2509));
            frontier_phi_74_73_ladder_1 = isnan(_2510) ? _2098 : (isnan(_2098) ? _2510 : min(_2098, _2510));
            frontier_phi_74_73_ladder_2 = isnan(_2511) ? _2099 : (isnan(_2099) ? _2511 : min(_2099, _2511));
        }
        else
        {
            frontier_phi_74_73_ladder = _2097;
            frontier_phi_74_73_ladder_1 = _2098;
            frontier_phi_74_73_ladder_2 = _2099;
        }
        _2163 = frontier_phi_74_73_ladder;
        _2165 = frontier_phi_74_73_ladder_1;
        _2167 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2163 = _2097;
        _2165 = _2098;
        _2167 = _2099;
    }
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_833 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2180 = _874 + (-1.0);
    float _2183 = (cbLight._m0[_2175].x * _2180) + 1.0;
    float _2184 = (cbLight._m0[_2175].y * _2180) + 1.0;
    uint _2185 = _2174 + 5u;
    float _2191 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
    uint _2195 = _2174 + 4u;
    float _2204 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
    uint _2208 = _2174 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_757, _758, _759));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_757, _758, _759));
    float _4234 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4245 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2185].x * _2191) * _2229) + (((cbLight._m0[_2195].x * _2163) * _2204) * _2227);
    float _2237 = ((_2191 * cbLight._m0[_2185].y) * _2229) + (((cbLight._m0[_2195].y * _2165) * _2204) * _2227);
    float _2238 = ((_2191 * cbLight._m0[_2185].z) * _2229) + (((cbLight._m0[_2195].z * _2167) * _2204) * _2227);
    uint _2240 = _2174 + 8u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _760) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2174].x + _785;
    float _2256 = cbLight._m0[_2174].y + _786;
    float _2257 = cbLight._m0[_2174].z + _787;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2174].xyz));
    float _4256 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    float _4267 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2269 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2270 = dot(vec3(_757, _758, _759), vec3(_2262, _2263, _2264));
    float _4278 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2273 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2274 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2262, _2263, _2264));
    float _4289 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2278 = _2254 * _2254;
    float _2282 = ((_2273 * _2273) * (_2278 + (-1.0))) + 1.0;
    float _2290 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2291 = 0.959999978542327880859375 - _856;
    float _2293 = 0.959999978542327880859375 - _857;
    float _2294 = 0.959999978542327880859375 - _858;
    float _2301 = 1.0 - _2254;
    float _2312 = (0.5 / (((_2269 * ((_2268 * _2301) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2301) + _2254) * _2268))) * _2268;
    float _4300 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2278 / ((_2282 * _2282) * 3.141590118408203125));
    uint _2328 = _2174 + 9u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _760) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2208].x + _785;
    float _2342 = cbLight._m0[_2208].y + _786;
    float _2343 = cbLight._m0[_2208].z + _787;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_757, _758, _759), vec3(cbLight._m0[_2208].xyz));
    float _4311 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
    float _2355 = dot(vec3(_757, _758, _759), vec3(_2348, _2349, _2350));
    float _4322 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2358 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
    float _2359 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2348, _2349, _2350));
    float _4333 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2363 = _2340 * _2340;
    float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
    float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0)))) * 5.0);
    float _2381 = 1.0 - _2340;
    float _2391 = (0.5 / (((_2269 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2269 * _2381) + _2340) * _2354))) * _2354;
    float _4344 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
    float _2403 = (((((_2374 * _2291) + _859) * cbLight._m0[_2328].x) * _2393) * _2191) + ((((cbLight._m0[_2240].x * _2163) * ((_2290 * _2291) + _859)) * _2314) * _2204);
    float _2404 = (((((_2374 * _2293) + _861) * cbLight._m0[_2328].y) * _2393) * _2191) + ((((cbLight._m0[_2240].y * _2165) * ((_2290 * _2293) + _861)) * _2314) * _2204);
    float _2405 = (((((_2374 * _2294) + _862) * cbLight._m0[_2328].z) * _2393) * _2191) + ((((cbLight._m0[_2240].z * _2167) * ((_2290 * _2294) + _862)) * _2314) * _2204);
    float _2568;
    float _2570;
    float _2572;
    float _2574;
    float _2576;
    float _2578;
    if (_2172.y == 0u)
    {
        uvec4 _2523 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2524 = _2523.x;
        uint _2535 = uint((float(_2523.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2524))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2524)));
        float _2545 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2546 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        uint _2549 = uint(isnan(14.0) ? _2546 : (isnan(_2546) ? 14.0 : min(_2546, 14.0)));
        uvec4 _2554 = texelFetch(g_lightClusterGridBuffer, int(((_2549 << 2u) + (_2535 << 6u)) >> 2u));
        uint _2555 = _2554.x;
        uint _2556 = _2523.z;
        float _2679;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        if (((((1u << ((_2556 >> 4u) & 15u)) + 4294967295u) & _2555) == 0u) || ((_2556 & 240u) == 0u))
        {
            _2679 = 0.0;
            _2681 = 0.0;
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
        }
        else
        {
            float _2680;
            float _2682;
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2849 = 0.0;
            float _2850 = 0.0;
            float _2851 = 0.0;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            uint _2855 = 0u;
            uint _2864;
            bool _2865;
            for (;;)
            {
                _2864 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                _2865 = _2864 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2865)
                {
                    frontier_phi_98_pred = _2849;
                    frontier_phi_98_pred_1 = _2850;
                    frontier_phi_98_pred_2 = _2854;
                    frontier_phi_98_pred_3 = _2853;
                    frontier_phi_98_pred_4 = _2852;
                    frontier_phi_98_pred_5 = _2851;
                }
                else
                {
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    uint _3000;
                    _2994 = _2849;
                    _2995 = _2850;
                    _2996 = _2851;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2864;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    for (;;)
                    {
                        uint _3004 = uint(findLSB(_3000)) + (_2855 << 5u);
                        uint _3001 = (_3000 + 4294967295u) & _3000;
                        uint _3006 = _3004 * 48u;
                        vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 3u)).x));
                        uint _3026 = (_3004 * 48u) + 4u;
                        vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3026)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3026 + 3u)).x));
                        uint _3045 = (_3004 * 48u) + 8u;
                        vec3 _3056 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x));
                        float _3060 = _3020.x - _1948;
                        float _3061 = _3020.y - _1949;
                        float _3062 = _3020.z - _1950;
                        float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                        float _3066 = inversesqrt(_3063);
                        float _3067 = _3066 * _3060;
                        float _3068 = _3066 * _3061;
                        float _3069 = _3066 * _3062;
                        float _3070 = dot(vec3(_814, _817, _820), vec3(_3067, _3068, _3069));
                        float _3075 = 1.0 - (_3063 * _3020.w);
                        float _4365 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                        float _3076 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3077 = sqrt(_3063) * _3039.w;
                        float _3080 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                        float _3081 = _3080 * _3080;
                        float _3084 = ((1.0 - _3081) * _3070) + _3081;
                        float _3087 = _3077 * _3077;
                        float _3091 = ((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3076) / ((_3087 * 0.699999988079071044921875) + 1.0);
                        float _3095 = (-0.0) - _1948;
                        float _3096 = (-0.0) - _1949;
                        float _3097 = (-0.0) - _1950;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3111 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _890;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3102 + _3067;
                        float _3123 = _3103 + _3068;
                        float _3124 = _3104 + _3069;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_814, _817, _820), vec3(_3102, _3103, _3104));
                        float _4381 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3136 = dot(vec3(_814, _817, _820), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4392 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3080 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3070) + _3145;
                        float _4403 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4414 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) / ((_3143 * _3143) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125))) * _3076;
                        _2929 = (_3091 * _3039.x) + _2997;
                        _2930 = (_3091 * _3039.y) + _2998;
                        _2931 = (_3091 * _3039.z) + _2999;
                        _2926 = (_3171 * _3056.x) + _2994;
                        _2927 = (_3171 * _3056.y) + _2995;
                        _2928 = (_3171 * _3056.z) + _2996;
                        if (_3001 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2994 = _2926;
                            _2995 = _2927;
                            _2996 = _2928;
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _3001;
                        }
                    }
                    frontier_phi_98_pred = _2926;
                    frontier_phi_98_pred_1 = _2927;
                    frontier_phi_98_pred_2 = _2931;
                    frontier_phi_98_pred_3 = _2930;
                    frontier_phi_98_pred_4 = _2929;
                    frontier_phi_98_pred_5 = _2928;
                }
                _2680 = frontier_phi_98_pred;
                _2682 = frontier_phi_98_pred_1;
                _2690 = frontier_phi_98_pred_2;
                _2688 = frontier_phi_98_pred_3;
                _2686 = frontier_phi_98_pred_4;
                _2684 = frontier_phi_98_pred_5;
                uint _2856 = _2855 + 1u;
                if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2849 = _2680;
                    _2850 = _2682;
                    _2851 = _2684;
                    _2852 = _2686;
                    _2853 = _2688;
                    _2854 = _2690;
                    _2855 = _2856;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2679 = _2680;
            _2681 = _2682;
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
        }
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.z;
        uint _2696 = (_2694 >> 8u) & 15u;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((4294967295u << _2696) & _2555) == 0u)
        {
            _2817 = _2679;
            _2819 = _2681;
            _2821 = _2683;
            _2823 = _2685;
            _2825 = _2687;
            _2827 = _2689;
        }
        else
        {
            float _2842 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _2843 = _2842 * _1948;
            float _2844 = _2842 * _1949;
            float _2845 = _2842 * _1950;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2696 < ((_2694 >> 12u) & 15u))
            {
                float _2818;
                float _2820;
                float _2822;
                float _2824;
                float _2826;
                float _2828;
                float _2977 = _2679;
                float _2978 = _2681;
                float _2979 = _2683;
                float _2980 = _2685;
                float _2981 = _2687;
                float _2982 = _2689;
                uint _2983 = _2696;
                uint _2992;
                bool _2993;
                for (;;)
                {
                    _2992 = texelFetch(g_lightClassification, int((((_2549 << 5u) + (_2535 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                    _2993 = _2992 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2993)
                    {
                        frontier_phi_104_pred = _2982;
                        frontier_phi_104_pred_1 = _2981;
                        frontier_phi_104_pred_2 = _2980;
                        frontier_phi_104_pred_3 = _2979;
                        frontier_phi_104_pred_4 = _2978;
                        frontier_phi_104_pred_5 = _2977;
                    }
                    else
                    {
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3189 = _2977;
                        float _3190 = _2978;
                        float _3191 = _2979;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        uint _3195 = _2992;
                        uint _3196;
                        vec4 _3221;
                        float _3222;
                        vec4 _3237;
                        vec3 _3249;
                        vec4 _3264;
                        vec4 _3279;
                        float _3325;
                        bool _3326;
                        for (;;)
                        {
                            uint _3206 = ((_2983 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3195));
                            _3196 = (_3195 + 4294967295u) & _3195;
                            uint _3208 = _3206 * 40u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3222 = _3221.w;
                            uint _3224 = (_3206 * 40u) + 4u;
                            _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3239 = (_3206 * 40u) + 8u;
                            _3249 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x));
                            uint _3251 = (_3206 * 40u) + 16u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3206 * 40u) + 20u;
                            _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3281 = (_3206 * 40u) + 24u;
                            vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3300 = (_3206 * 40u) + 28u;
                            vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            _3325 = fma(_1950, _3313.z, fma(_1949, _3313.y, _3313.x * _1948)) + _3313.w;
                            _3326 = !((fma(_1950, _3294.z, fma(_1949, _3294.y, _3294.x * _1948)) + _3294.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3326)
                            {
                                float _3353 = _3221.x - _1948;
                                float _3354 = _3221.y - _1949;
                                float _3355 = _3221.z - _1950;
                                float _3356 = dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355));
                                float _3359 = inversesqrt(_3356);
                                float _3360 = _3359 * _3353;
                                float _3361 = _3359 * _3354;
                                float _3362 = _3359 * _3355;
                                float _3366 = 1.0 - (_3356 / (_3222 * _3222));
                                float _4425 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3367 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3371 = sqrt(_3356) * _3237.w;
                                float _3373 = 1.39999997615814208984375 / (_3371 + 1.39999997615814208984375);
                                float _3374 = _3373 * _3373;
                                float _3377 = ((1.0 - _3374) * dot(vec3(_3360, _3361, _3362), vec3(_814, _817, _820))) + _3374;
                                float _3380 = _3371 * _3371;
                                float _3384 = (fma(_1950, _3264.z, fma(_1949, _3264.y, _3264.x * _1948)) + _3264.w) / _3325;
                                float _3385 = (fma(_1950, _3279.z, fma(_1949, _3279.y, _3279.x * _1948)) + _3279.w) / _3325;
                                float _3389 = 1.0 - dot(vec2(_3384, _3385), vec2(_3384, _3385));
                                float _4441 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3391 = _3390 * (((isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0))) * _3367) / ((_3380 * 0.699999988079071044921875) + 1.0));
                                float _3403 = exp2(log2(1.0 / ((_3380 * 3.5) + 5.0)) * 0.25);
                                float _3404 = 1.0 - _890;
                                float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                                float _3412 = _3411 * _3411;
                                float _3413 = _3412 * _3412;
                                float _3414 = _3360 - _2843;
                                float _3415 = _3361 - _2844;
                                float _3416 = _3362 - _2845;
                                float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                                float _3424 = dot(vec3(_814, _817, _820), vec3((-0.0) - _2843, (-0.0) - _2844, (-0.0) - _2845));
                                float _4452 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                                float _3427 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3428 = dot(vec3(_814, _817, _820), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                                float _4463 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3431 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                                float _3436 = _3373 * _3412;
                                float _3437 = _3436 * _3436;
                                float _3443 = ((1.0 - _3437) * dot(vec3(_814, _817, _820), vec3(_3360, _3361, _3362))) + _3437;
                                float _4474 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                                float _3444 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                                float _3445 = 1.0 - _3412;
                                float _3455 = (0.5 / (((_3444 * ((_3427 * _3445) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3444 * _3445) + _3412) * _3427))) * _3444;
                                float _4485 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3465 = (_3390 * _3367) * (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) / ((_3435 * _3435) * ((_3380 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3465 * _3249.z;
                                frontier_phi_110_pred_1 = _3391 * _3237.z;
                                frontier_phi_110_pred_2 = _3391 * _3237.y;
                                frontier_phi_110_pred_3 = _3391 * _3237.x;
                                frontier_phi_110_pred_4 = _3465 * _3249.y;
                                frontier_phi_110_pred_5 = _3465 * _3249.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_110_pred;
                            _3474 = frontier_phi_110_pred_1;
                            _3473 = frontier_phi_110_pred_2;
                            _3472 = frontier_phi_110_pred_3;
                            _3470 = frontier_phi_110_pred_4;
                            _3469 = frontier_phi_110_pred_5;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            _3176 = _3469 + _3189;
                            _3177 = _3470 + _3190;
                            _3178 = _3471 + _3191;
                            if (_3196 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3196;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3181;
                        frontier_phi_104_pred_1 = _3180;
                        frontier_phi_104_pred_2 = _3179;
                        frontier_phi_104_pred_3 = _3178;
                        frontier_phi_104_pred_4 = _3177;
                        frontier_phi_104_pred_5 = _3176;
                    }
                    _2828 = frontier_phi_104_pred;
                    _2826 = frontier_phi_104_pred_1;
                    _2824 = frontier_phi_104_pred_2;
                    _2822 = frontier_phi_104_pred_3;
                    _2820 = frontier_phi_104_pred_4;
                    _2818 = frontier_phi_104_pred_5;
                    uint _2984 = _2983 + 1u;
                    if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2977 = _2818;
                        _2978 = _2820;
                        _2979 = _2822;
                        _2980 = _2824;
                        _2981 = _2826;
                        _2982 = _2828;
                        _2983 = _2984;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2828;
                frontier_phi_91_92_ladder_1 = _2826;
                frontier_phi_91_92_ladder_2 = _2824;
                frontier_phi_91_92_ladder_3 = _2822;
                frontier_phi_91_92_ladder_4 = _2820;
                frontier_phi_91_92_ladder_5 = _2818;
            }
            else
            {
                frontier_phi_91_92_ladder = _2689;
                frontier_phi_91_92_ladder_1 = _2687;
                frontier_phi_91_92_ladder_2 = _2685;
                frontier_phi_91_92_ladder_3 = _2683;
                frontier_phi_91_92_ladder_4 = _2681;
                frontier_phi_91_92_ladder_5 = _2679;
            }
            _2817 = frontier_phi_91_92_ladder_5;
            _2819 = frontier_phi_91_92_ladder_4;
            _2821 = frontier_phi_91_92_ladder_3;
            _2823 = frontier_phi_91_92_ladder_2;
            _2825 = frontier_phi_91_92_ladder_1;
            _2827 = frontier_phi_91_92_ladder;
        }
        float _2832 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2568 = (_2832 * _2823) + _2236;
        _2570 = (_2832 * _2825) + _2237;
        _2572 = (_2832 * _2827) + _2238;
        _2574 = ((_2817 * _859) * _2832) + _2403;
        _2576 = ((_2819 * _861) * _2832) + _2404;
        _2578 = ((_2821 * _862) * _2832) + _2405;
    }
    else
    {
        _2568 = _2236;
        _2570 = _2237;
        _2572 = _2238;
        _2574 = _2403;
        _2576 = _2404;
        _2578 = _2405;
    }
    uint _2584 = _835 + uint(cbMatDynParam._m0[0u].w);
    float _4501 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4512 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4523 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _2609 = (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2568 + ((isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))) * _874))) + ((_2574 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1683)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2584].x * ((_688 * ((_644 - _570) - (_644 * _292))) + _570));
    float _2611 = ((cbInstanceData._m0[_2584].y * ((_688 * ((_645 - _571) - (_645 * _292))) + _571)) + ((_2576 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1683)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2570 + ((isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))) * _874)));
    float _2613 = ((cbInstanceData._m0[_2584].z * ((_688 * ((_646 - _572) - (_646 * _292))) + _572)) + ((_2578 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1683)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2572 + ((isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0))) * _874)));
    uint _2617 = _833 + 6u;
    float _2625 = _793 / cbSceneParam._m0[86u].x;
    float _2626 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2640 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2642 = _2640.x;
    float _2643 = _2640.y;
    float _2644 = _2640.z;
    float _2645 = _2640.w;
    float _2741;
    float _2743;
    float _2745;
    float _2747;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _2704 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _2705 = _2704 / _780;
        float _2716 = _2705 * _265;
        float _2717 = _266 * _2705;
        float _2718 = (-0.0) - _2717;
        float _2719 = _2705 * _267;
        float _2721 = (cbSceneParam._m0[77u].w * _2718) / _2704;
        float _2722 = _2721 + cbSceneParam._m0[79u].w;
        float _2723 = cbSceneParam._m0[79u].w - _2717;
        float _2729 = sqrt(((_2716 * _2716) + (_2717 * _2717)) + (_2719 * _2719));
        float _2732 = (1.0 - (cbSceneParam._m0[77u].w / _2704)) * _2729;
        float _2737 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2739 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2939;
        if (abs((_2718 - _2721) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2939 = ((((_2722 > 0.0) ? exp2(_2737 * _2722) : (2.0 - exp2(_2739 * _2722))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2732;
        }
        else
        {
            float _2878 = 1.0 / cbSceneParam._m0[80u].x;
            float _2879 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : max(_2722, _2723));
            float _2880 = isnan(_2723) ? _2722 : (isnan(_2722) ? _2723 : min(_2722, _2723));
            float _2889 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : min(_2879, 0.0));
            float _2890 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : min(_2880, 0.0));
            _2939 = ((abs(_2729 / _2718) * cbSceneParam._m0[80u].y) * ((((_2889 - _2890) * 2.0) - ((exp2(_2737 * (isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0)))) - exp2(_2737 * (isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0))))) * _2878)) - ((exp2(_2739 * _2889) - exp2(_2739 * _2890)) * _2878))) + (_2732 * cbSceneParam._m0[80u].z);
        }
        vec4 _2941 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2625, _2626, 1.0), 0.0);
        float _2950 = exp2((_2939 * (-1.44269502162933349609375)) * (1.0 - _2941.w));
        float _2951 = log2(_2950);
        float _2967 = log2(_2645);
        _2741 = (exp2(_2967 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].x)) * _2941.x) / cbSceneParam._m0[78u].x)) + _2642;
        _2743 = (exp2(_2967 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].y)) * _2941.y) / cbSceneParam._m0[78u].y)) + _2643;
        _2745 = (exp2(_2967 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2951 * cbSceneParam._m0[78u].z)) * _2941.z) / cbSceneParam._m0[78u].z)) + _2644;
        _2747 = _2950 * _2645;
    }
    else
    {
        _2741 = _2642;
        _2743 = _2643;
        _2745 = _2644;
        _2747 = _2645;
    }
    float _2759 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2760 = _2759 == 3.0;
    float _2761 = log2(_2747);
    float _2768 = exp2(_2761 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0)));
    float _2769 = exp2(_2761 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)));
    float _2770 = exp2(_2761 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0)));
    float _2779 = (_2759 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2779 * (_2760 ? _2768 : (_2768 + (cbSceneParam._m0[72u].w * _2741)));
    SV_Target.y = _2779 * (_2760 ? _2769 : (_2769 + (cbSceneParam._m0[72u].w * _2743)));
    SV_Target.z = _2779 * (_2760 ? _2770 : (_2770 + (cbSceneParam._m0[72u].w * _2745)));
    SV_Target.w = cbInstanceData._m0[_2617].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2617].w;
}


