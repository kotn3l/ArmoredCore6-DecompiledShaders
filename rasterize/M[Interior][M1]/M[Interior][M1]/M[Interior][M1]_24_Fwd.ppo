#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1037;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _321 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _325 = _321.z;
    float _348 = (_321.x * 2.0) + (-1.0);
    float _350 = (_321.y * 2.0) + (-1.0);
    float _353 = _348 - (_348 * _286);
    float _354 = _350 - (_350 * _286);
    float _363 = cbMtdParam._m0[22u].y + _259;
    float _364 = cbMtdParam._m0[22u].z + _260;
    float _365 = cbMtdParam._m0[22u].w + _261;
    float _379 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_188, _189, _190));
    float _380 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_202, _203, _204));
    float _381 = (-0.0) - dot(vec3(_363, _364, _365), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _388 = _385 * _381;
    float _391 = ((_385 * _379) + (_353 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _392 = ((_385 * _380) + (_354 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _393 = fract(TEXCOORD.x);
    float _394 = fract(TEXCOORD.y);
    float _400;
    if (_391 > 0.0)
    {
        _400 = (1.0 - _393) / _391;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_391 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _393) / _391;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _400 = frontier_phi_3_2_ladder;
    }
    float _408;
    if (_392 > 0.0)
    {
        _408 = (1.0 - _394) / _392;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_392 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _394) / _392;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _408 = frontier_phi_7_6_ladder;
    }
    float _412 = (_388 > 0.0) ? (cbMtdParam._m0[15u].x / _388) : 5000.0;
    float _413 = isnan(_408) ? _400 : (isnan(_400) ? _408 : min(_400, _408));
    float _414 = isnan(_412) ? _413 : (isnan(_413) ? _412 : min(_413, _412));
    float _418 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = ((_414 * _388) + _418) / _418;
    vec4 _450 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_393 + (-0.5)) + (_414 * _391)) / _425) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_394 + (-0.5)) + (_414 * _392)) / _425) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    float _470 = 0.5 - (_286 * 0.5);
    float _477 = ((((_452 - (_452 * _286)) * cbMtdParam._m0[9u].x) - _299) * _470) + _299;
    float _478 = ((((_453 - (_453 * _286)) * cbMtdParam._m0[9u].y) - _301) * _470) + _301;
    float _479 = (((cbMtdParam._m0[9u].z * (_454 - (_454 * _286))) - _303) * _470) + _303;
    vec4 _491 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _493 = _491.x;
    vec4 _505 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _509 = _505.z;
    float _512 = (_505.x * 2.0) + (-1.0);
    float _513 = (_505.y * 2.0) + (-1.0);
    float _514 = dot(vec2(_512, _513), vec2(_512, _513));
    float _3118 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _519 = sqrt(1.0 - (isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0))));
    float _520 = _509 * _286;
    float _527 = (cbMtdParam._m0[15u].w * ((_325 - _520) + ((_509 - _325) * _286))) + _520;
    float _531 = (cbMtdParam._m0[16u].x * _353) + _512;
    float _532 = (cbMtdParam._m0[16u].x * _354) + _513;
    float _535 = fma(_519, _195, fma(_532, _202, _531 * _188));
    float _538 = fma(_519, _196, fma(_532, _203, _531 * _189));
    float _541 = fma(_519, _197, fma(_532, _204, _531 * _190));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    float _546 = _545 * _535;
    float _547 = _545 * _538;
    float _548 = _545 * _541;
    float _3129 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _549 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
    float _3140 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _3151 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _3162 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3173 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _553 = isnan(1.0) ? _3173 : (isnan(_3173) ? 1.0 : min(_3173, 1.0));
    float _569 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _573 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _574 = _259 * _573;
    float _575 = _260 * _573;
    float _576 = _261 * _573;
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _603 = fma(_548, cbSceneParam._m0[5u].z, fma(_547, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _546));
    float _606 = fma(_548, cbSceneParam._m0[6u].z, fma(_547, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _546));
    float _609 = fma(_548, cbSceneParam._m0[7u].z, fma(_547, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _546));
    uint _622 = uint(roundEven(NORMAL.w)) * 13u;
    uint _625 = (_622 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _631 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0)))) * cbInstanceData._m0[_625].x;
    float _632 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0)))) * cbInstanceData._m0[_625].y;
    float _633 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3162 : (isnan(_3162) ? 1.0 : min(_3162, 1.0)))) * cbInstanceData._m0[_625].z;
    float _3184 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
    float _3195 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3195 : (isnan(_3195) ? 1.0 : min(_3195, 1.0));
    float _3206 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _636 = isnan(1.0) ? _3206 : (isnan(_3206) ? 1.0 : min(_3206, 1.0));
    float _637 = 1.0 - _553;
    float _638 = _634 * _637;
    float _639 = _635 * _637;
    float _640 = _636 * _637;
    float _645 = (_634 + (-0.039999999105930328369140625)) * _553;
    float _646 = (_635 + (-0.039999999105930328369140625)) * _553;
    float _647 = (_636 + (-0.039999999105930328369140625)) * _553;
    float _648 = _645 + 0.039999999105930328369140625;
    float _650 = _646 + 0.039999999105930328369140625;
    float _651 = _647 + 0.039999999105930328369140625;
    vec4 _660 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _663 = _660.x * TEXCOORD.z;
    float _664 = dot(vec3(_546, _547, _548), vec3(_574, _575, _576));
    float _667 = _664 * 2.0;
    float _671 = (_667 * _546) - _574;
    float _672 = (_667 * _547) - _575;
    float _673 = (_667 * _548) - _576;
    float _677 = abs(dot(vec3(_574, _575, _576), vec3(_546, _547, _548)));
    float _3217 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = sqrt(_549);
    float _692 = exp2((_679 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_679 * 3.0));
    float _698 = (1.0 - _692) * ((_679 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _699 = _692 * _679;
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _731 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1036;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _763 = fma(_735, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _727));
        float _767 = fma(_735, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _727));
        float _771 = fma(_735, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _727));
        float _794 = _727 + _546;
        float _795 = _731 + _547;
        float _796 = _735 + _548;
        float _806 = fma(_796, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _794)) - _763;
        float _807 = fma(_796, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _794)) - _767;
        float _808 = fma(_796, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _794)) - _771;
        float _812 = inversesqrt(dot(vec3(_806, _807, _808), vec3(_806, _807, _808)));
        float _825 = ((_812 * _806) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_763 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _826 = ((_812 * _807) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_767 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _827 = ((_812 * _808) / cbModelParam._m0[34u].z) + ((((((_771 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_825, _826, _827), 0.0);
        float _864 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _865 = _864 * (_830.x + (-0.5));
        float _866 = _864 * (_830.y + (-0.5));
        float _867 = _864 * (_830.z + (-0.5));
        float _874 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_837.x + (-0.5));
        float _876 = _874 * (_837.y + (-0.5));
        float _877 = _874 * (_837.z + (-0.5));
        float _884 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_844.x + (-0.5));
        float _886 = _884 * (_844.y + (-0.5));
        float _887 = _884 * (_844.z + (-0.5));
        float _894 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_851.x + (-0.5));
        float _896 = _894 * (_851.y + (-0.5));
        float _897 = _894 * (_851.z + (-0.5));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _900 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _901 = _865 * 0.5;
        float _902 = _875 * 0.5;
        float _903 = _885 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _918 = (dot(vec3(_546, _547, _548), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3243 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _928 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3254 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _930 = _929 * 2.0;
        float _934 = (1.0 - _929) / (_929 + 1.0);
        float _3265 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _944 = ((((1.0 - _935) * (_930 + 2.0)) * exp2(log2(isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (_930 + 1.0))) + _935) * _898;
        float _945 = _866 * 0.5;
        float _946 = _876 * 0.5;
        float _947 = _886 * 0.5;
        float _948 = dot(vec3(_945, _946, _947), vec3(_945, _946, _947));
        float _953 = (_948 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_948);
        float _961 = (dot(vec3(_546, _547, _548), vec3(_953 * _945, _953 * _946, _953 * _947)) + 1.0) * 0.5;
        float _3276 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _970 = sqrt(((_946 * _946) + (_945 * _945)) + (_947 * _947)) / (_899 + 9.9999997473787516355514526367188e-06);
        float _3287 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _972 = _971 * 2.0;
        float _976 = (1.0 - _971) / (_971 + 1.0);
        float _3298 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
        float _986 = ((((1.0 - _977) * (_972 + 2.0)) * exp2(log2(isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))) * (_972 + 1.0))) + _977) * _899;
        float _987 = _867 * 0.5;
        float _988 = _877 * 0.5;
        float _989 = _887 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_546, _547, _548), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3309 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_900 + 9.9999997473787516355514526367188e-06);
        float _3320 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3331 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_1014 + 1.0))) + _1019) * _900;
        _1036 = _867;
        _1038 = _866;
        _1039 = _865;
        _1040 = _877;
        _1041 = _876;
        _1042 = _875;
        _1043 = _887;
        _1044 = _886;
        _1045 = _885;
        _1046 = _900;
        _1047 = _899;
        _1048 = _898;
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)));
        _1050 = cbModelParam._m0[36u].z * (isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)));
        _1051 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
    }
    else
    {
        _1036 = _1037;
        _1038 = _1037;
        _1039 = _1037;
        _1040 = _1037;
        _1041 = _1037;
        _1042 = _1037;
        _1043 = _1037;
        _1044 = _1037;
        _1045 = _1037;
        _1046 = _1037;
        _1047 = _1037;
        _1048 = _1037;
        _1049 = 0.0;
        _1050 = 0.0;
        _1051 = 0.0;
    }
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1077 = fma(_735, cbModelParam._m0[30u].z, fma(_731, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _727));
        float _1081 = fma(_735, cbModelParam._m0[31u].z, fma(_731, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _727));
        float _1085 = fma(_735, cbModelParam._m0[32u].z, fma(_731, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _727));
        float _1108 = _727 + _546;
        float _1109 = _731 + _547;
        float _1110 = _735 + _548;
        float _1120 = fma(_1110, cbModelParam._m0[30u].z, fma(_1109, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1108)) - _1077;
        float _1121 = fma(_1110, cbModelParam._m0[31u].z, fma(_1109, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1108)) - _1081;
        float _1122 = fma(_1110, cbModelParam._m0[32u].z, fma(_1109, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1108)) - _1085;
        float _1126 = inversesqrt(dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122)));
        float _1139 = ((_1126 * _1120) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1077 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1126 * _1121) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1081 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1126 * _1122) / cbModelParam._m0[35u].z) + ((((((_1085 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1139, _1140, _1141), 0.0);
        float _1176 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1143.x + (-0.5));
        float _1178 = _1176 * (_1143.y + (-0.5));
        float _1179 = _1176 * (_1143.z + (-0.5));
        float _1186 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1150.x + (-0.5));
        float _1188 = _1186 * (_1150.y + (-0.5));
        float _1189 = _1186 * (_1150.z + (-0.5));
        float _1196 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1157.x + (-0.5));
        float _1198 = _1196 * (_1157.y + (-0.5));
        float _1199 = _1196 * (_1157.z + (-0.5));
        float _1206 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1164.x + (-0.5));
        float _1208 = _1206 * (_1164.y + (-0.5));
        float _1209 = _1206 * (_1164.z + (-0.5));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = _1177 * 0.5;
        float _1214 = _1187 * 0.5;
        float _1215 = _1197 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_546, _547, _548), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3394 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_1240 + 1.0))) + _1245) * _1210;
        float _1255 = _1178 * 0.5;
        float _1256 = _1188 * 0.5;
        float _1257 = _1198 * 0.5;
        float _1258 = dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257));
        float _1263 = (_1258 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1258);
        float _1271 = (dot(vec3(_546, _547, _548), vec3(_1263 * _1255, _1263 * _1256, _1263 * _1257)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1280 = sqrt(((_1256 * _1256) + (_1255 * _1255)) + (_1257 * _1257)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1282 = _1281 * 2.0;
        float _1286 = (1.0 - _1281) / (_1281 + 1.0);
        float _3427 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1296 = ((((1.0 - _1287) * (_1282 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1282 + 1.0))) + _1287) * _1211;
        float _1297 = _1179 * 0.5;
        float _1298 = _1189 * 0.5;
        float _1299 = _1199 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1313 = (dot(vec3(_546, _547, _548), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1322 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _3460 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1324 + 1.0))) + _1329) * _1212;
        _1346 = _1179;
        _1347 = _1178;
        _1348 = _1177;
        _1349 = _1189;
        _1350 = _1188;
        _1351 = _1187;
        _1352 = _1199;
        _1353 = _1198;
        _1354 = _1197;
        _1355 = _1212;
        _1356 = _1211;
        _1357 = _1210;
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
    }
    else
    {
        _1346 = _1037;
        _1347 = _1037;
        _1348 = _1037;
        _1349 = _1037;
        _1350 = _1037;
        _1351 = _1037;
        _1352 = _1037;
        _1353 = _1037;
        _1354 = _1037;
        _1355 = _1037;
        _1356 = _1037;
        _1357 = _1037;
        _1358 = 0.0;
        _1359 = 0.0;
        _1360 = 0.0;
    }
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1049)) + _1049;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1050)) + _1050;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1051)) + _1051;
    float _1393 = fma(_1372, cbSceneParam._m0[89u].z, fma(_1371, cbSceneParam._m0[89u].y, _1370 * cbSceneParam._m0[89u].x));
    float _1396 = fma(_1372, cbSceneParam._m0[90u].z, fma(_1371, cbSceneParam._m0[90u].y, _1370 * cbSceneParam._m0[90u].x));
    float _1399 = fma(_1372, cbSceneParam._m0[91u].z, fma(_1371, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1370));
    float _1414 = _671 * 0.5;
    float _1415 = _672 * 0.5;
    float _1416 = _673 * 0.5;
    float _1417 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1420 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1423 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1457;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1430 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1036, _1040, _1043, _1046));
        float _1434 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1038, _1041, _1044, _1047));
        float _1438 = dot(vec4(_1414, _1415, _1416, 1.0), vec4(_1039, _1042, _1045, _1048));
        float _1445 = dot(vec4(cbModelParam._m0[39u]), vec4(_1414, _1415, _1416, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)), isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1468;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1459 = dot(vec4(cbModelParam._m0[40u]), vec4(_1414, _1415, _1416, 1.0));
        _1468 = dot(vec3(isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1459) ? 0.0 : (isnan(0.0) ? _1459 : max(0.0, _1459))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1468 = 1.0;
    }
    float _1472 = (_1468 * cbModelParam._m0[1u].x) + (_1457 * (1.0 - cbModelParam._m0[1u].x));
    float _1482 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _549);
    float _1483 = isnan(_1482) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1482 : min(cbModelParam._m0[25u].z, _1482));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_735, cbModelParam._m0[13u].z, fma(_731, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_735, cbModelParam._m0[14u].z, fma(_731, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_735, cbModelParam._m0[15u].z, fma(_731, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_673, cbModelParam._m0[13u].z, fma(_672, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671));
        float _1545 = fma(_673, cbModelParam._m0[14u].z, fma(_672, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671));
        float _1548 = fma(_673, cbModelParam._m0[15u].z, fma(_672, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1576 = frontier_phi_22_20_ladder;
        }
        float _1935;
        if (_1545 > 0.0)
        {
            _1935 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1935 = frontier_phi_31_27_ladder;
        }
        float _2235;
        if (_1548 > 0.0)
        {
            _2235 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2235 = frontier_phi_45_38_ladder;
        }
        float _2237 = isnan(_1935) ? _1576 : (isnan(_1576) ? _1935 : min(_1576, _1935));
        float _2238 = isnan(_2235) ? _2237 : (isnan(_2237) ? _2235 : min(_2237, _2235));
        float _2242 = (_2238 * _1542) + _1531;
        float _2243 = (_2238 * _1545) + _1535;
        float _2244 = (_2238 * _1548) + _1539;
        float _2245 = _2238 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2245;
        float _2248 = _2245 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2244 > _2248) || ((_2244 < _2246) || ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 < _2246) || (_2242 > _2248))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2244, cbModelParam._m0[9u].z, fma(_2243, cbModelParam._m0[9u].y, _2242 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2244, cbModelParam._m0[10u].z, fma(_2243, cbModelParam._m0[10u].y, _2242 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2244, cbModelParam._m0[11u].z, fma(_2243, cbModelParam._m0[11u].y, _2242 * cbModelParam._m0[11u].x))), _1483);
            frontier_phi_21_45_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_21_45_ladder_2;
        _1566 = frontier_phi_21_45_ladder_1;
        _1568 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_671, _672, _673), _1483);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _549);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1662;
    float _1664;
    float _1666;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1626 = fma(_735, cbModelParam._m0[21u].z, fma(_731, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727)) + cbModelParam._m0[21u].w;
        float _1630 = fma(_735, cbModelParam._m0[22u].z, fma(_731, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727)) + cbModelParam._m0[22u].w;
        float _1634 = fma(_735, cbModelParam._m0[23u].z, fma(_731, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727)) + cbModelParam._m0[23u].w;
        float _1637 = fma(_673, cbModelParam._m0[21u].z, fma(_672, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671));
        float _1640 = fma(_673, cbModelParam._m0[22u].z, fma(_672, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671));
        float _1643 = fma(_673, cbModelParam._m0[23u].z, fma(_672, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671));
        float _1940;
        if (_1637 > 0.0)
        {
            _1940 = abs((1.0 - _1626) / _1637);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1626 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1940 = frontier_phi_33_29_ladder;
        }
        float _2261;
        if (_1640 > 0.0)
        {
            _2261 = abs((1.0 - _1630) / _1640);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1630 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2261 = frontier_phi_47_40_ladder;
        }
        float _2430;
        if (_1643 > 0.0)
        {
            _2430 = abs((1.0 - _1634) / _1643);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1634 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2430 = frontier_phi_61_56_ladder;
        }
        float _2432 = isnan(_2261) ? _1940 : (isnan(_1940) ? _2261 : min(_1940, _2261));
        float _2433 = isnan(_2430) ? _2432 : (isnan(_2432) ? _2430 : min(_2432, _2430));
        float _2437 = (_2433 * _1637) + _1626;
        float _2438 = (_2433 * _1640) + _1630;
        float _2439 = (_2433 * _1643) + _1634;
        float _2440 = _2433 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2440;
        float _2443 = _2440 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2439 > _2443) || ((_2439 < _2441) || ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 < _2441) || (_2437 > _2443))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2439, cbModelParam._m0[17u].z, fma(_2438, cbModelParam._m0[17u].y, _2437 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2439, cbModelParam._m0[18u].z, fma(_2438, cbModelParam._m0[18u].y, _2437 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2439, cbModelParam._m0[19u].z, fma(_2438, cbModelParam._m0[19u].y, _2437 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_30_61_ladder = _2672.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2672.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2672.x * cbModelParam._m0[1u].z;
        }
        _1662 = frontier_phi_30_61_ladder_2;
        _1664 = frontier_phi_30_61_ladder_1;
        _1666 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1646 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_671, _672, _673), _1573);
        _1662 = _1646.x * cbModelParam._m0[1u].z;
        _1664 = _1646.y * cbModelParam._m0[1u].z;
        _1666 = _1646.z * cbModelParam._m0[1u].z;
    }
    float _1679 = (((_698 * _648) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1662 - _1564)) + _1564);
    float _1681 = (((_698 * _650) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1664 - _1566)) + _1566);
    float _1683 = (((_698 * _651) + _699) * _663) * ((cbModelParam._m0[1u].w * (_1666 - _1568)) + _1568);
    float _1686 = fma(_1683, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1679 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1683, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1679 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1683, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1679 * cbSceneParam._m0[91u].x));
    uvec4 _1702 = floatBitsToUint(cbInstanceData._m0[_622 + 5u]);
    uint _1704 = _1702.x * 14u;
    uint _1705 = _1704 + 13u;
    float _1710 = _663 + (-1.0);
    float _1713 = (cbLight._m0[_1705].x * _1710) + 1.0;
    float _1714 = (cbLight._m0[_1705].y * _1710) + 1.0;
    uint _1715 = _1704 + 5u;
    float _1721 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1725 = _1704 + 4u;
    float _1731 = isnan(1.0) ? _1713 : (isnan(_1713) ? 1.0 : min(_1713, 1.0));
    uint _1735 = _1704 | 1u;
    float _1746 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_546, _547, _548));
    float _1749 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_546, _547, _548));
    float _3596 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _3607 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1754 = (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * 0.3183098733425140380859375;
    float _1756 = (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0))) * 0.3183098733425140380859375;
    float _1763 = ((cbLight._m0[_1715].x * _1721) * _1756) + ((cbLight._m0[_1725].x * _1731) * _1754);
    float _1764 = ((_1721 * cbLight._m0[_1715].y) * _1756) + ((_1731 * cbLight._m0[_1725].y) * _1754);
    float _1765 = ((_1721 * cbLight._m0[_1715].z) * _1756) + ((_1731 * cbLight._m0[_1725].z) * _1754);
    uint _1767 = _1704 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1704].w)) * _549) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1704].x + _574;
    float _1783 = cbLight._m0[_1704].y + _575;
    float _1784 = cbLight._m0[_1704].z + _576;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1704].xyz));
    float _3618 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _1796 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _1797 = dot(vec3(_546, _547, _548), vec3(_1789, _1790, _1791));
    float _3640 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1704].xyz), vec3(_1789, _1790, _1791));
    float _3651 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1817 = exp2(log2(1.0 - (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * 5.0);
    float _1818 = 0.959999978542327880859375 - _645;
    float _1820 = 0.959999978542327880859375 - _646;
    float _1821 = 0.959999978542327880859375 - _647;
    float _1828 = 1.0 - _1781;
    float _1839 = (0.5 / (((_1796 * ((_1795 * _1828) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1828) + _1781) * _1795))) * _1795;
    float _3662 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1841 = (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    uint _1852 = _1704 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1735].w)) * _549) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1735].x + _574;
    float _1866 = cbLight._m0[_1735].y + _575;
    float _1867 = cbLight._m0[_1735].z + _576;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1735].xyz));
    float _3673 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    float _1879 = dot(vec3(_546, _547, _548), vec3(_1872, _1873, _1874));
    float _3684 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1735].xyz), vec3(_1872, _1873, _1874));
    float _3695 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1898 = exp2(log2(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0)))) * 5.0);
    float _1905 = 1.0 - _1864;
    float _1915 = (0.5 / (((_1796 * ((_1878 * _1905) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1905) + _1864) * _1878))) * _1878;
    float _3706 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1917 = (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1927 = (((((_1898 * _1818) + _648) * cbLight._m0[_1852].x) * _1917) * _1721) + (((((_1817 * _1818) + _648) * cbLight._m0[_1767].x) * _1841) * _1731);
    float _1928 = (((((_1898 * _1820) + _650) * cbLight._m0[_1852].y) * _1917) * _1721) + (((((_1817 * _1820) + _650) * cbLight._m0[_1767].y) * _1841) * _1731);
    float _1929 = (((((_1898 * _1821) + _651) * cbLight._m0[_1852].z) * _1917) * _1721) + (((((_1817 * _1821) + _651) * cbLight._m0[_1767].z) * _1841) * _1731);
    float _2044;
    float _2046;
    float _2048;
    float _2050;
    float _2052;
    float _2054;
    if (_1702.y == 0u)
    {
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1984;
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1984;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1984;
        uvec4 _1999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2000 = _1999.x;
        uint _2011 = uint((float(_1999.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2000))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2000)));
        float _2021 = (log2(_1987 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2022 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        uint _2025 = uint(isnan(14.0) ? _2022 : (isnan(_2022) ? 14.0 : min(_2022, 14.0)));
        uvec4 _2030 = texelFetch(g_lightClusterGridBuffer, int(((_2025 << 2u) + (_2011 << 6u)) >> 2u));
        uint _2031 = _2030.x;
        uint _2032 = _1999.z;
        float _2122;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        if (((((1u << ((_2032 >> 4u) & 15u)) + 4294967295u) & _2031) == 0u) || ((_2032 & 240u) == 0u))
        {
            _2122 = 0.0;
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
        }
        else
        {
            float _2123;
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2298 = 0.0;
            float _2299 = 0.0;
            float _2300 = 0.0;
            float _2301 = 0.0;
            float _2302 = 0.0;
            float _2303 = 0.0;
            uint _2304 = 0u;
            uint _2313;
            bool _2314;
            for (;;)
            {
                _2313 = texelFetch(g_lightClassification, int((((_2025 << 5u) + (_2011 << 9u)) + (_2304 << 2u)) >> 2u)).x;
                _2314 = _2313 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2314)
                {
                    frontier_phi_58_pred = _2299;
                    frontier_phi_58_pred_1 = _2303;
                    frontier_phi_58_pred_2 = _2302;
                    frontier_phi_58_pred_3 = _2301;
                    frontier_phi_58_pred_4 = _2300;
                    frontier_phi_58_pred_5 = _2298;
                }
                else
                {
                    float _2473;
                    float _2474;
                    float _2475;
                    float _2476;
                    float _2477;
                    float _2478;
                    uint _2479;
                    _2473 = _2298;
                    _2474 = _2299;
                    _2475 = _2300;
                    _2476 = _2301;
                    _2477 = _2302;
                    _2478 = _2303;
                    _2479 = _2313;
                    float _2379;
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    for (;;)
                    {
                        uint _2483 = uint(findLSB(_2479)) + (_2304 << 5u);
                        uint _2480 = (_2479 + 4294967295u) & _2479;
                        uint _2485 = _2483 * 48u;
                        vec4 _2499 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        uint _2505 = (_2483 * 48u) + 4u;
                        vec4 _2518 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2505)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2505 + 3u)).x));
                        uint _2524 = (_2483 * 48u) + 8u;
                        vec3 _2535 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2524)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2524 + 2u)).x));
                        float _2539 = _2499.x - _1985;
                        float _2540 = _2499.y - _1986;
                        float _2541 = _2499.z - _1987;
                        float _2542 = dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541));
                        float _2545 = inversesqrt(_2542);
                        float _2546 = _2545 * _2539;
                        float _2547 = _2545 * _2540;
                        float _2548 = _2545 * _2541;
                        float _2549 = dot(vec3(_603, _606, _609), vec3(_2546, _2547, _2548));
                        float _2554 = 1.0 - (_2542 * _2499.w);
                        float _3727 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
                        float _2555 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
                        float _2556 = sqrt(_2542) * _2518.w;
                        float _2559 = 1.39999997615814208984375 / (_2556 + 1.39999997615814208984375);
                        float _2560 = _2559 * _2559;
                        float _2563 = ((1.0 - _2560) * _2549) + _2560;
                        float _2566 = _2556 * _2556;
                        float _2570 = ((isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0))) * _2555) / ((_2566 * 0.699999988079071044921875) + 1.0);
                        float _2574 = (-0.0) - _1985;
                        float _2575 = (-0.0) - _1986;
                        float _2576 = (-0.0) - _1987;
                        float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
                        float _2581 = _2580 * _2574;
                        float _2582 = _2580 * _2575;
                        float _2583 = _2580 * _2576;
                        float _2591 = exp2(log2(1.0 / ((_2566 * 3.5) + 5.0)) * 0.25);
                        float _2592 = 1.0 - _679;
                        float _2599 = sqrt(1.0 - ((1.0 - (_2592 * _2592)) * (1.0 - (_2591 * _2591))));
                        float _2600 = _2599 * _2599;
                        float _2601 = _2600 * _2600;
                        float _2602 = _2581 + _2546;
                        float _2603 = _2582 + _2547;
                        float _2604 = _2583 + _2548;
                        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
                        float _2612 = dot(vec3(_603, _606, _609), vec3(_2581, _2582, _2583));
                        float _3743 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2615 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
                        float _2616 = dot(vec3(_603, _606, _609), vec3(_2608 * _2602, _2608 * _2603, _2608 * _2604));
                        float _3754 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2619 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
                        float _2623 = ((_2619 * _2619) * (_2601 + (-1.0))) + 1.0;
                        float _2624 = _2559 * _2600;
                        float _2625 = _2624 * _2624;
                        float _2628 = ((1.0 - _2625) * _2549) + _2625;
                        float _3765 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                        float _2629 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
                        float _2630 = 1.0 - _2600;
                        float _2640 = (0.5 / (((_2629 * ((_2615 * _2630) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2629 * _2630) + _2600) * _2615))) * _2629;
                        float _3776 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
                        float _2651 = (((_2601 * 3.1415927410125732421875) * (isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0)))) / ((_2623 * _2623) * ((_2566 * 2.1991131305694580078125) + 3.141590118408203125))) * _2555;
                        _2382 = (_2570 * _2518.x) + _2476;
                        _2383 = (_2570 * _2518.y) + _2477;
                        _2384 = (_2570 * _2518.z) + _2478;
                        _2379 = (_2651 * _2535.x) + _2473;
                        _2380 = (_2651 * _2535.y) + _2474;
                        _2381 = (_2651 * _2535.z) + _2475;
                        if (_2480 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2473 = _2379;
                            _2474 = _2380;
                            _2475 = _2381;
                            _2476 = _2382;
                            _2477 = _2383;
                            _2478 = _2384;
                            _2479 = _2480;
                        }
                    }
                    frontier_phi_58_pred = _2380;
                    frontier_phi_58_pred_1 = _2384;
                    frontier_phi_58_pred_2 = _2383;
                    frontier_phi_58_pred_3 = _2382;
                    frontier_phi_58_pred_4 = _2381;
                    frontier_phi_58_pred_5 = _2379;
                }
                _2125 = frontier_phi_58_pred;
                _2133 = frontier_phi_58_pred_1;
                _2131 = frontier_phi_58_pred_2;
                _2129 = frontier_phi_58_pred_3;
                _2127 = frontier_phi_58_pred_4;
                _2123 = frontier_phi_58_pred_5;
                uint _2305 = _2304 + 1u;
                if (_2305 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2298 = _2123;
                    _2299 = _2125;
                    _2300 = _2127;
                    _2301 = _2129;
                    _2302 = _2131;
                    _2303 = _2133;
                    _2304 = _2305;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2122 = _2123;
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
        }
        uvec4 _2136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2137 = _2136.z;
        uint _2139 = (_2137 >> 8u) & 15u;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        float _2274;
        float _2276;
        if (((4294967295u << _2139) & _2031) == 0u)
        {
            _2266 = _2122;
            _2268 = _2124;
            _2270 = _2126;
            _2272 = _2128;
            _2274 = _2130;
            _2276 = _2132;
        }
        else
        {
            float _2291 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
            float _2292 = _2291 * _1985;
            float _2293 = _2291 * _1986;
            float _2294 = _2291 * _1987;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2139 < ((_2137 >> 12u) & 15u))
            {
                float _2267;
                float _2269;
                float _2271;
                float _2273;
                float _2275;
                float _2277;
                float _2456 = _2122;
                float _2457 = _2124;
                float _2458 = _2126;
                float _2459 = _2128;
                float _2460 = _2130;
                float _2461 = _2132;
                uint _2462 = _2139;
                uint _2471;
                bool _2472;
                for (;;)
                {
                    _2471 = texelFetch(g_lightClassification, int((((_2025 << 5u) + (_2011 << 9u)) + (_2462 << 2u)) >> 2u)).x;
                    _2472 = _2471 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2472)
                    {
                        frontier_phi_67_pred = _2461;
                        frontier_phi_67_pred_1 = _2460;
                        frontier_phi_67_pred_2 = _2459;
                        frontier_phi_67_pred_3 = _2458;
                        frontier_phi_67_pred_4 = _2457;
                        frontier_phi_67_pred_5 = _2456;
                    }
                    else
                    {
                        float _2677;
                        float _2678;
                        float _2679;
                        float _2680;
                        float _2681;
                        float _2682;
                        float _2970;
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2690 = _2456;
                        float _2691 = _2457;
                        float _2692 = _2458;
                        float _2693 = _2459;
                        float _2694 = _2460;
                        float _2695 = _2461;
                        uint _2696 = _2471;
                        uint _2697;
                        vec4 _2722;
                        float _2723;
                        vec4 _2738;
                        vec3 _2750;
                        vec4 _2765;
                        vec4 _2780;
                        float _2826;
                        bool _2827;
                        for (;;)
                        {
                            uint _2707 = ((_2462 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2696));
                            _2697 = (_2696 + 4294967295u) & _2696;
                            uint _2709 = _2707 * 40u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            _2723 = _2722.w;
                            uint _2725 = (_2707 * 40u) + 4u;
                            _2738 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2725)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2725 + 3u)).x));
                            uint _2740 = (_2707 * 40u) + 8u;
                            _2750 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x));
                            uint _2752 = (_2707 * 40u) + 16u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2767 = (_2707 * 40u) + 20u;
                            _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            uint _2782 = (_2707 * 40u) + 24u;
                            vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            uint _2801 = (_2707 * 40u) + 28u;
                            vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            _2826 = fma(_1987, _2814.z, fma(_1986, _2814.y, _2814.x * _1985)) + _2814.w;
                            _2827 = !((fma(_1987, _2795.z, fma(_1986, _2795.y, _2795.x * _1985)) + _2795.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2827)
                            {
                                float _2854 = _2722.x - _1985;
                                float _2855 = _2722.y - _1986;
                                float _2856 = _2722.z - _1987;
                                float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                                float _2860 = inversesqrt(_2857);
                                float _2861 = _2860 * _2854;
                                float _2862 = _2860 * _2855;
                                float _2863 = _2860 * _2856;
                                float _2867 = 1.0 - (_2857 / (_2723 * _2723));
                                float _3787 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                                float _2868 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
                                float _2872 = sqrt(_2857) * _2738.w;
                                float _2874 = 1.39999997615814208984375 / (_2872 + 1.39999997615814208984375);
                                float _2875 = _2874 * _2874;
                                float _2878 = ((1.0 - _2875) * dot(vec3(_2861, _2862, _2863), vec3(_603, _606, _609))) + _2875;
                                float _2881 = _2872 * _2872;
                                float _2885 = (fma(_1987, _2765.z, fma(_1986, _2765.y, _2765.x * _1985)) + _2765.w) / _2826;
                                float _2886 = (fma(_1987, _2780.z, fma(_1986, _2780.y, _2780.x * _1985)) + _2780.w) / _2826;
                                float _2890 = 1.0 - dot(vec2(_2885, _2886), vec2(_2885, _2886));
                                float _3803 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                                float _2891 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
                                float _2892 = _2891 * (((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2868) / ((_2881 * 0.699999988079071044921875) + 1.0));
                                float _2904 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                                float _2905 = 1.0 - _679;
                                float _2912 = sqrt(1.0 - ((1.0 - (_2905 * _2905)) * (1.0 - (_2904 * _2904))));
                                float _2913 = _2912 * _2912;
                                float _2914 = _2913 * _2913;
                                float _2915 = _2861 - _2292;
                                float _2916 = _2862 - _2293;
                                float _2917 = _2863 - _2294;
                                float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                                float _2925 = dot(vec3(_603, _606, _609), vec3((-0.0) - _2292, (-0.0) - _2293, (-0.0) - _2294));
                                float _3814 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                                float _2928 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                                float _2929 = dot(vec3(_603, _606, _609), vec3(_2921 * _2915, _2921 * _2916, _2921 * _2917));
                                float _3825 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2932 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
                                float _2936 = ((_2932 * _2932) * (_2914 + (-1.0))) + 1.0;
                                float _2937 = _2874 * _2913;
                                float _2938 = _2937 * _2937;
                                float _2944 = ((1.0 - _2938) * dot(vec3(_603, _606, _609), vec3(_2861, _2862, _2863))) + _2938;
                                float _3836 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                                float _2945 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                                float _2946 = 1.0 - _2913;
                                float _2956 = (0.5 / (((_2945 * ((_2928 * _2946) + _2913)) + 9.9999999392252902907785028219223e-09) + (((_2945 * _2946) + _2913) * _2928))) * _2945;
                                float _3847 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2966 = (_2891 * _2868) * (((_2914 * 3.1415927410125732421875) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) / ((_2936 * _2936) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2892 * _2738.z;
                                frontier_phi_73_pred_1 = _2892 * _2738.y;
                                frontier_phi_73_pred_2 = _2892 * _2738.x;
                                frontier_phi_73_pred_3 = _2966 * _2750.z;
                                frontier_phi_73_pred_4 = _2966 * _2750.y;
                                frontier_phi_73_pred_5 = _2966 * _2750.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2975 = frontier_phi_73_pred;
                            _2974 = frontier_phi_73_pred_1;
                            _2973 = frontier_phi_73_pred_2;
                            _2972 = frontier_phi_73_pred_3;
                            _2971 = frontier_phi_73_pred_4;
                            _2970 = frontier_phi_73_pred_5;
                            _2680 = _2973 + _2693;
                            _2681 = _2974 + _2694;
                            _2682 = _2975 + _2695;
                            _2677 = _2970 + _2690;
                            _2678 = _2971 + _2691;
                            _2679 = _2972 + _2692;
                            if (_2697 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2690 = _2677;
                                _2691 = _2678;
                                _2692 = _2679;
                                _2693 = _2680;
                                _2694 = _2681;
                                _2695 = _2682;
                                _2696 = _2697;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2682;
                        frontier_phi_67_pred_1 = _2681;
                        frontier_phi_67_pred_2 = _2680;
                        frontier_phi_67_pred_3 = _2679;
                        frontier_phi_67_pred_4 = _2678;
                        frontier_phi_67_pred_5 = _2677;
                    }
                    _2277 = frontier_phi_67_pred;
                    _2275 = frontier_phi_67_pred_1;
                    _2273 = frontier_phi_67_pred_2;
                    _2271 = frontier_phi_67_pred_3;
                    _2269 = frontier_phi_67_pred_4;
                    _2267 = frontier_phi_67_pred_5;
                    uint _2463 = _2462 + 1u;
                    if (_2463 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2456 = _2267;
                        _2457 = _2269;
                        _2458 = _2271;
                        _2459 = _2273;
                        _2460 = _2275;
                        _2461 = _2277;
                        _2462 = _2463;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2273;
                frontier_phi_49_50_ladder_1 = _2277;
                frontier_phi_49_50_ladder_2 = _2275;
                frontier_phi_49_50_ladder_3 = _2271;
                frontier_phi_49_50_ladder_4 = _2269;
                frontier_phi_49_50_ladder_5 = _2267;
            }
            else
            {
                frontier_phi_49_50_ladder = _2128;
                frontier_phi_49_50_ladder_1 = _2132;
                frontier_phi_49_50_ladder_2 = _2130;
                frontier_phi_49_50_ladder_3 = _2126;
                frontier_phi_49_50_ladder_4 = _2124;
                frontier_phi_49_50_ladder_5 = _2122;
            }
            _2266 = frontier_phi_49_50_ladder_5;
            _2268 = frontier_phi_49_50_ladder_4;
            _2270 = frontier_phi_49_50_ladder_3;
            _2272 = frontier_phi_49_50_ladder;
            _2274 = frontier_phi_49_50_ladder_2;
            _2276 = frontier_phi_49_50_ladder_1;
        }
        float _2281 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
        _2044 = (_2281 * _2272) + _1763;
        _2046 = (_2281 * _2274) + _1764;
        _2048 = (_2281 * _2276) + _1765;
        _2050 = ((_2266 * _648) * _2281) + _1927;
        _2052 = ((_2268 * _650) * _2281) + _1928;
        _2054 = ((_2270 * _651) * _2281) + _1929;
    }
    else
    {
        _2044 = _1763;
        _2046 = _1764;
        _2048 = _1765;
        _2050 = _1927;
        _2052 = _1928;
        _2054 = _1929;
    }
    float _3863 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _3874 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3885 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _2071 = ((isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * (_2044 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _663))) + ((_2050 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    float _2072 = ((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * (_2046 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _663))) + ((_2052 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    float _2073 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2048 + ((isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))) * _663))) + ((_2054 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _1472)) * cbPerFrame._m0[3u].x);
    uint _2077 = _622 + 6u;
    float _2085 = _582 / cbSceneParam._m0[86u].x;
    float _2086 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2100 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, (log2((isnan(cbSceneParam._m0[77u].w) ? _569 : (isnan(_569) ? cbSceneParam._m0[77u].w : min(_569, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2102 = _2100.x;
    float _2103 = _2100.y;
    float _2104 = _2100.z;
    float _2105 = _2100.w;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    if (_569 > cbSceneParam._m0[78u].w)
    {
        float _2147 = isnan(_569) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _569 : min(cbSceneParam._m0[80u].w, _569));
        float _2148 = _2147 / _569;
        float _2159 = _2148 * _259;
        float _2160 = _260 * _2148;
        float _2161 = (-0.0) - _2160;
        float _2162 = _2148 * _261;
        float _2164 = (cbSceneParam._m0[77u].w * _2161) / _2147;
        float _2165 = _2164 + cbSceneParam._m0[79u].w;
        float _2166 = cbSceneParam._m0[79u].w - _2160;
        float _2172 = sqrt(((_2159 * _2159) + (_2160 * _2160)) + (_2162 * _2162));
        float _2175 = (1.0 - (cbSceneParam._m0[77u].w / _2147)) * _2172;
        float _2181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2392;
        if (abs((_2161 - _2164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2392 = ((((_2165 > 0.0) ? exp2(_2181 * _2165) : (2.0 - exp2(_2183 * _2165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2175;
        }
        else
        {
            float _2327 = 1.0 / cbSceneParam._m0[80u].x;
            float _2328 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : max(_2165, _2166));
            float _2329 = isnan(_2166) ? _2165 : (isnan(_2165) ? _2166 : min(_2165, _2166));
            float _2338 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : min(_2328, 0.0));
            float _2339 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : min(_2329, 0.0));
            _2392 = ((abs(_2172 / _2161) * cbSceneParam._m0[80u].y) * ((((_2338 - _2339) * 2.0) - ((exp2(_2181 * (isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0)))) - exp2(_2181 * (isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0))))) * _2327)) - ((exp2(_2183 * _2338) - exp2(_2183 * _2339)) * _2327))) + (_2175 * cbSceneParam._m0[80u].z);
        }
        vec4 _2394 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2085, _2086, 1.0), 0.0);
        float _2403 = exp2((_2392 * (-1.44269502162933349609375)) * (1.0 - _2394.w));
        float _2404 = log2(_2403);
        float _2420 = log2(_2105);
        _2185 = (exp2(_2420 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].x)) * _2394.x) / cbSceneParam._m0[78u].x)) + _2102;
        _2187 = (exp2(_2420 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].y)) * _2394.y) / cbSceneParam._m0[78u].y)) + _2103;
        _2189 = (exp2(_2420 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2404 * cbSceneParam._m0[78u].z)) * _2394.z) / cbSceneParam._m0[78u].z)) + _2104;
        _2191 = _2403 * _2105;
    }
    else
    {
        _2185 = _2102;
        _2187 = _2103;
        _2189 = _2104;
        _2191 = _2105;
    }
    float _2203 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2204 = _2203 == 3.0;
    float _2205 = log2(_2191);
    float _2212 = exp2(_2205 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0)));
    float _2213 = exp2(_2205 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0)));
    float _2214 = exp2(_2205 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)));
    float _2223 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2223 * (_2204 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
    SV_Target.y = _2223 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
    SV_Target.z = _2223 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2189)));
    SV_Target.w = cbInstanceData._m0[_2077].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2077].w;
}


