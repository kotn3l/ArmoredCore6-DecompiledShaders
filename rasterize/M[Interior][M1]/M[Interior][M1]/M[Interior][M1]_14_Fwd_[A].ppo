#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1035;
float _3161;
float _3162;
float _3163;
float _3164;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _436 = 0.5 - (_288 * 0.5);
    float _443 = ((((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) - _301) * _436) + _301;
    float _444 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) - _303) * _436) + _303;
    float _445 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) - _305) * _436) + _305;
    vec4 _457 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _459 = _457.x;
    vec4 _471 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _479 = (_471.x * 2.0) + (-1.0);
    float _481 = (_471.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_479, _481), vec2(_479, _481));
    float _3183 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    float _488 = _471.z * _288;
    float _491 = fma(_487, _197, fma(_481, _204, _479 * _190));
    float _494 = fma(_487, _198, fma(_481, _205, _479 * _191));
    float _497 = fma(_487, _199, fma(_481, _206, _479 * _192));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3194 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _505 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3216 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3227 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3238 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _509 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _530 = _261 * _529;
    float _531 = _262 * _529;
    float _532 = _263 * _529;
    vec4 _537 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _539 = _537.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _716 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _722 = (cbMatDynParam._m0[5u].x * _716) + cbMatDynParam._m0[5u].y;
        float _3249 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _727 = (cbMatDynParam._m0[5u].z * _716) + cbMatDynParam._m0[5u].w;
        float _3260 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) - _723)) + _723) < ((_539 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _573 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _576 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _579 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _592 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3271 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    float _3293 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
    float _607 = 1.0 - _509;
    float _608 = _604 * _607;
    float _609 = _605 * _607;
    float _610 = _606 * _607;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _509;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _509;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _509;
    float _618 = _615 + 0.039999999105930328369140625;
    float _620 = _616 + 0.039999999105930328369140625;
    float _621 = _617 + 0.039999999105930328369140625;
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = dot(vec3(_502, _503, _504), vec3(_530, _531, _532));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _502) - _530;
    float _642 = (_637 * _503) - _531;
    float _643 = (_637 * _504) - _532;
    float _647 = abs(dot(vec3(_530, _531, _532), vec3(_502, _503, _504)));
    float _3304 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_505);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _668 = (1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _669 = _662 * _649;
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _765 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _769 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _792 = _697 + _502;
        float _793 = _701 + _503;
        float _794 = _705 + _504;
        float _804 = fma(_794, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792)) - _761;
        float _805 = fma(_794, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792)) - _765;
        float _806 = fma(_794, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792)) - _769;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _823 = ((_810 * _804) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_810 * _805) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_810 * _806) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(_502, _503, _504), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3352 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_502, _503, _504), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3385 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_502, _503, _504), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3418 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1082 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1086 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1109 = _697 + _502;
        float _1110 = _701 + _503;
        float _1111 = _705 + _504;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_502, _503, _504), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3481 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_502, _503, _504), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3514 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_502, _503, _504), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3547 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1035;
        _1348 = _1035;
        _1349 = _1035;
        _1350 = _1035;
        _1351 = _1035;
        _1352 = _1035;
        _1353 = _1035;
        _1354 = _1035;
        _1355 = _1035;
        _1356 = _1035;
        _1357 = _1035;
        _1358 = _1035;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _641 * 0.5;
    float _1416 = _642 * 0.5;
    float _1417 = _643 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1565;
    float _1567;
    float _1569;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1532 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1536 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1540 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1543 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1546 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1549 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1577;
        if (_1543 > 0.0)
        {
            _1577 = abs((1.0 - _1532) / _1543);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1532 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1577 = frontier_phi_25_23_ladder;
        }
        float _1936;
        if (_1546 > 0.0)
        {
            _1936 = abs((1.0 - _1536) / _1546);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1536 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1936 = frontier_phi_34_30_ladder;
        }
        float _2244;
        if (_1549 > 0.0)
        {
            _2244 = abs((1.0 - _1540) / _1549);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1549 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1540 + 1.0) / _1549);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2244 = frontier_phi_48_41_ladder;
        }
        float _2246 = isnan(_1936) ? _1577 : (isnan(_1577) ? _1936 : min(_1577, _1936));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1543) + _1532;
        float _2252 = (_2247 * _1546) + _1536;
        float _2253 = (_2247 * _1549) + _1540;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2255 = (-1.0) - _2254;
        float _2257 = _2254 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2253 > _2257) || ((_2253 < _2255) || ((_2252 > _2257) || ((_2252 < _2255) || ((_2251 < _2255) || (_2251 > _2257))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_24_48_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1565 = frontier_phi_24_48_ladder_2;
        _1567 = frontier_phi_24_48_ladder_1;
        _1569 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1484);
        _1565 = _1553.x * cbModelParam._m0[1u].y;
        _1567 = _1553.y * cbModelParam._m0[1u].y;
        _1569 = _1553.z * cbModelParam._m0[1u].y;
    }
    float _1573 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1573 : min(cbModelParam._m0[25u].w, _1573));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1627 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1631 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1635 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1638 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1641 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1644 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1941;
        if (_1638 > 0.0)
        {
            _1941 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1941 = frontier_phi_36_32_ladder;
        }
        float _2270;
        if (_1641 > 0.0)
        {
            _2270 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2270 = frontier_phi_50_43_ladder;
        }
        float _2460;
        if (_1644 > 0.0)
        {
            _2460 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2460 = frontier_phi_68_61_ladder;
        }
        float _2462 = isnan(_2270) ? _1941 : (isnan(_1941) ? _2270 : min(_1941, _2270));
        float _2463 = isnan(_2460) ? _2462 : (isnan(_2462) ? _2460 : min(_2462, _2460));
        float _2467 = (_2463 * _1638) + _1627;
        float _2468 = (_2463 * _1641) + _1631;
        float _2469 = (_2463 * _1644) + _1635;
        float _2470 = _2463 * 9.9999997473787516355514526367188e-05;
        float _2471 = (-1.0) - _2470;
        float _2473 = _2470 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2469 > _2473) || ((_2469 < _2471) || ((_2468 > _2473) || ((_2468 < _2471) || ((_2467 < _2471) || (_2467 > _2473))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2711 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2469, cbModelParam._m0[17u].z, fma(_2468, cbModelParam._m0[17u].y, _2467 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2469, cbModelParam._m0[18u].z, fma(_2468, cbModelParam._m0[18u].y, _2467 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2469, cbModelParam._m0[19u].z, fma(_2468, cbModelParam._m0[19u].y, _2467 * cbModelParam._m0[19u].x))), _1574);
            frontier_phi_33_68_ladder = _2711.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2711.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2711.x * cbModelParam._m0[1u].z;
        }
        _1663 = frontier_phi_33_68_ladder_2;
        _1665 = frontier_phi_33_68_ladder;
        _1667 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1574);
        _1663 = _1647.x * cbModelParam._m0[1u].z;
        _1665 = _1647.y * cbModelParam._m0[1u].z;
        _1667 = _1647.z * cbModelParam._m0[1u].z;
    }
    float _1680 = (((_668 * _618) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1663 - _1565)) + _1565);
    float _1682 = (((_668 * _620) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1665 - _1567)) + _1567);
    float _1684 = (((_668 * _621) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1667 - _1569)) + _1569);
    float _1687 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1682, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1682, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1682, cbSceneParam._m0[91u].y, _1680 * cbSceneParam._m0[91u].x));
    uvec4 _1703 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1705 = _1703.x * 14u;
    uint _1706 = _1705 + 13u;
    float _1711 = _633 + (-1.0);
    float _1714 = (cbLight._m0[_1706].x * _1711) + 1.0;
    float _1715 = (cbLight._m0[_1706].y * _1711) + 1.0;
    uint _1716 = _1705 + 5u;
    float _1722 = isnan(1.0) ? _1715 : (isnan(_1715) ? 1.0 : min(_1715, 1.0));
    uint _1726 = _1705 + 4u;
    float _1732 = isnan(1.0) ? _1714 : (isnan(_1714) ? 1.0 : min(_1714, 1.0));
    uint _1736 = _1705 | 1u;
    float _1747 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_502, _503, _504));
    float _1750 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_502, _503, _504));
    float _3683 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _3694 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1755 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1757 = (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.3183098733425140380859375;
    float _1764 = ((cbLight._m0[_1716].x * _1722) * _1757) + ((cbLight._m0[_1726].x * _1732) * _1755);
    float _1765 = ((_1722 * cbLight._m0[_1716].y) * _1757) + ((_1732 * cbLight._m0[_1726].y) * _1755);
    float _1766 = ((_1722 * cbLight._m0[_1716].z) * _1757) + ((_1732 * cbLight._m0[_1726].z) * _1755);
    uint _1768 = _1705 + 8u;
    float _1781 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1705].w)) * _505) * 0.949999988079071044921875);
    float _1782 = _1781 * _1781;
    float _1783 = cbLight._m0[_1705].x + _530;
    float _1784 = cbLight._m0[_1705].y + _531;
    float _1785 = cbLight._m0[_1705].z + _532;
    float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
    float _1790 = _1789 * _1783;
    float _1791 = _1789 * _1784;
    float _1792 = _1789 * _1785;
    float _1793 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1705].xyz));
    float _3705 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _3716 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1797 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _1798 = dot(vec3(_502, _503, _504), vec3(_1790, _1791, _1792));
    float _3727 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1801 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _1802 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1790, _1791, _1792));
    float _3738 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1806 = _1782 * _1782;
    float _1810 = ((_1801 * _1801) * (_1806 + (-1.0))) + 1.0;
    float _1818 = exp2(log2(1.0 - (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0)))) * 5.0);
    float _1819 = 0.959999978542327880859375 - _615;
    float _1821 = 0.959999978542327880859375 - _616;
    float _1822 = 0.959999978542327880859375 - _617;
    float _1829 = 1.0 - _1782;
    float _1840 = (0.5 / (((_1797 * ((_1796 * _1829) + _1782)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1829) + _1782) * _1796))) * _1796;
    float _3749 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1806 / ((_1810 * _1810) * 3.141590118408203125));
    uint _1853 = _1705 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _505) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1736].x + _530;
    float _1867 = cbLight._m0[_1736].y + _531;
    float _1868 = cbLight._m0[_1736].z + _532;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1736].xyz));
    float _3760 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1880 = dot(vec3(_502, _503, _504), vec3(_1873, _1874, _1875));
    float _3771 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1873, _1874, _1875));
    float _3782 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1899 = exp2(log2(1.0 - (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * 5.0);
    float _1906 = 1.0 - _1865;
    float _1916 = (0.5 / (((_1797 * ((_1879 * _1906) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1797 * _1906) + _1865) * _1879))) * _1879;
    float _3793 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1918 = (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1928 = (((((_1899 * _1819) + _618) * cbLight._m0[_1853].x) * _1918) * _1722) + (((((_1818 * _1819) + _618) * cbLight._m0[_1768].x) * _1842) * _1732);
    float _1929 = (((((_1899 * _1821) + _620) * cbLight._m0[_1853].y) * _1918) * _1722) + (((((_1818 * _1821) + _620) * cbLight._m0[_1768].y) * _1842) * _1732);
    float _1930 = (((((_1899 * _1822) + _621) * cbLight._m0[_1853].z) * _1918) * _1722) + (((((_1818 * _1822) + _621) * cbLight._m0[_1768].z) * _1842) * _1732);
    float _2045;
    float _2047;
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    if (_1703.y == 0u)
    {
        float _1985 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1986 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1985;
        float _1987 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1985;
        float _1988 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1985;
        uvec4 _2000 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2001 = _2000.x;
        uint _2012 = uint((float(_2000.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2001))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2001)));
        float _2022 = (log2(_1988 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2023 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        uint _2026 = uint(isnan(14.0) ? _2023 : (isnan(_2023) ? 14.0 : min(_2023, 14.0)));
        uvec4 _2031 = texelFetch(g_lightClusterGridBuffer, int(((_2026 << 2u) + (_2012 << 6u)) >> 2u));
        uint _2032 = _2031.x;
        uint _2033 = _2000.z;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        if (((((1u << ((_2033 >> 4u) & 15u)) + 4294967295u) & _2032) == 0u) || ((_2033 & 240u) == 0u))
        {
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
        }
        else
        {
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2307 = 0.0;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            uint _2313 = 0u;
            uint _2322;
            bool _2323;
            for (;;)
            {
                _2322 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2313 << 2u)) >> 2u)).x;
                _2323 = _2322 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2323)
                {
                    frontier_phi_63_pred = _2309;
                    frontier_phi_63_pred_1 = _2312;
                    frontier_phi_63_pred_2 = _2311;
                    frontier_phi_63_pred_3 = _2310;
                    frontier_phi_63_pred_4 = _2308;
                    frontier_phi_63_pred_5 = _2307;
                }
                else
                {
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    uint _2509;
                    _2503 = _2307;
                    _2504 = _2308;
                    _2505 = _2309;
                    _2506 = _2310;
                    _2507 = _2311;
                    _2508 = _2312;
                    _2509 = _2322;
                    float _2404;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    for (;;)
                    {
                        uint _2513 = uint(findLSB(_2509)) + (_2313 << 5u);
                        uint _2510 = (_2509 + 4294967295u) & _2509;
                        uint _2515 = _2513 * 48u;
                        vec4 _2529 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2515)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2515 + 3u)).x));
                        uint _2535 = (_2513 * 48u) + 4u;
                        vec4 _2548 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2535)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2535 + 3u)).x));
                        uint _2554 = (_2513 * 48u) + 8u;
                        vec3 _2565 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2554)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2554 + 2u)).x));
                        float _2569 = _2529.x - _1986;
                        float _2570 = _2529.y - _1987;
                        float _2571 = _2529.z - _1988;
                        float _2572 = dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571));
                        float _2575 = inversesqrt(_2572);
                        float _2576 = _2575 * _2569;
                        float _2577 = _2575 * _2570;
                        float _2578 = _2575 * _2571;
                        float _2579 = dot(vec3(_573, _576, _579), vec3(_2576, _2577, _2578));
                        float _2584 = 1.0 - (_2572 * _2529.w);
                        float _3814 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
                        float _2585 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                        float _2586 = sqrt(_2572) * _2548.w;
                        float _2589 = 1.39999997615814208984375 / (_2586 + 1.39999997615814208984375);
                        float _2590 = _2589 * _2589;
                        float _2593 = ((1.0 - _2590) * _2579) + _2590;
                        float _2596 = _2586 * _2586;
                        float _2600 = ((isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))) * _2585) / ((_2596 * 0.699999988079071044921875) + 1.0);
                        float _2604 = (-0.0) - _1986;
                        float _2605 = (-0.0) - _1987;
                        float _2606 = (-0.0) - _1988;
                        float _2610 = inversesqrt(dot(vec3(_2604, _2605, _2606), vec3(_2604, _2605, _2606)));
                        float _2611 = _2610 * _2604;
                        float _2612 = _2610 * _2605;
                        float _2613 = _2610 * _2606;
                        float _2621 = exp2(log2(1.0 / ((_2596 * 3.5) + 5.0)) * 0.25);
                        float _2622 = 1.0 - _649;
                        float _2629 = sqrt(1.0 - ((1.0 - (_2622 * _2622)) * (1.0 - (_2621 * _2621))));
                        float _2630 = _2629 * _2629;
                        float _2631 = _2630 * _2630;
                        float _2632 = _2611 + _2576;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
                        float _2642 = dot(vec3(_573, _576, _579), vec3(_2611, _2612, _2613));
                        float _3830 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2645 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                        float _2646 = dot(vec3(_573, _576, _579), vec3(_2638 * _2632, _2638 * _2633, _2638 * _2634));
                        float _3841 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
                        float _2649 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                        float _2653 = ((_2649 * _2649) * (_2631 + (-1.0))) + 1.0;
                        float _2654 = _2589 * _2630;
                        float _2655 = _2654 * _2654;
                        float _2658 = ((1.0 - _2655) * _2579) + _2655;
                        float _3852 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
                        float _2659 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
                        float _2660 = 1.0 - _2630;
                        float _2670 = (0.5 / (((_2659 * ((_2645 * _2660) + _2630)) + 9.9999999392252902907785028219223e-09) + (((_2659 * _2660) + _2630) * _2645))) * _2659;
                        float _3863 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2681 = (((_2631 * 3.1415927410125732421875) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) / ((_2653 * _2653) * ((_2596 * 2.1991131305694580078125) + 3.141590118408203125))) * _2585;
                        _2407 = (_2600 * _2548.x) + _2506;
                        _2408 = (_2600 * _2548.y) + _2507;
                        _2409 = (_2600 * _2548.z) + _2508;
                        _2404 = (_2681 * _2565.x) + _2503;
                        _2405 = (_2681 * _2565.y) + _2504;
                        _2406 = (_2681 * _2565.z) + _2505;
                        if (_2510 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2503 = _2404;
                            _2504 = _2405;
                            _2505 = _2406;
                            _2506 = _2407;
                            _2507 = _2408;
                            _2508 = _2409;
                            _2509 = _2510;
                        }
                    }
                    frontier_phi_63_pred = _2406;
                    frontier_phi_63_pred_1 = _2409;
                    frontier_phi_63_pred_2 = _2408;
                    frontier_phi_63_pred_3 = _2407;
                    frontier_phi_63_pred_4 = _2405;
                    frontier_phi_63_pred_5 = _2404;
                }
                _2128 = frontier_phi_63_pred;
                _2134 = frontier_phi_63_pred_1;
                _2132 = frontier_phi_63_pred_2;
                _2130 = frontier_phi_63_pred_3;
                _2126 = frontier_phi_63_pred_4;
                _2124 = frontier_phi_63_pred_5;
                uint _2314 = _2313 + 1u;
                if (_2314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2307 = _2124;
                    _2308 = _2126;
                    _2309 = _2128;
                    _2310 = _2130;
                    _2311 = _2132;
                    _2312 = _2134;
                    _2313 = _2314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
        }
        uvec4 _2137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2138 = _2137.z;
        uint _2140 = (_2138 >> 8u) & 15u;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        if (((4294967295u << _2140) & _2032) == 0u)
        {
            _2275 = _2123;
            _2277 = _2125;
            _2279 = _2127;
            _2281 = _2129;
            _2283 = _2131;
            _2285 = _2133;
        }
        else
        {
            float _2300 = inversesqrt(dot(vec3(_1986, _1987, _1988), vec3(_1986, _1987, _1988)));
            float _2301 = _2300 * _1986;
            float _2302 = _2300 * _1987;
            float _2303 = _2300 * _1988;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2140 < ((_2138 >> 12u) & 15u))
            {
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2284;
                float _2286;
                float _2486 = _2123;
                float _2487 = _2125;
                float _2488 = _2127;
                float _2489 = _2129;
                float _2490 = _2131;
                float _2491 = _2133;
                uint _2492 = _2140;
                uint _2501;
                bool _2502;
                for (;;)
                {
                    _2501 = texelFetch(g_lightClassification, int((((_2026 << 5u) + (_2012 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                    _2502 = _2501 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2502)
                    {
                        frontier_phi_77_pred = _2491;
                        frontier_phi_77_pred_1 = _2490;
                        frontier_phi_77_pred_2 = _2489;
                        frontier_phi_77_pred_3 = _2488;
                        frontier_phi_77_pred_4 = _2487;
                        frontier_phi_77_pred_5 = _2486;
                    }
                    else
                    {
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _2729 = _2486;
                        float _2730 = _2487;
                        float _2731 = _2488;
                        float _2732 = _2489;
                        float _2733 = _2490;
                        float _2734 = _2491;
                        uint _2735 = _2501;
                        uint _2736;
                        vec4 _2761;
                        float _2762;
                        vec4 _2777;
                        vec3 _2789;
                        vec4 _2804;
                        vec4 _2820;
                        float _2866;
                        bool _2867;
                        for (;;)
                        {
                            uint _2746 = ((_2492 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2735));
                            _2736 = (_2735 + 4294967295u) & _2735;
                            uint _2748 = _2746 * 40u;
                            _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            _2762 = _2761.w;
                            uint _2764 = (_2746 * 40u) + 4u;
                            _2777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2764 + 3u)).x));
                            uint _2779 = (_2746 * 40u) + 8u;
                            _2789 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x));
                            uint _2791 = (_2746 * 40u) + 16u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2807 = (_2746 * 40u) + 20u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2746 * 40u) + 24u;
                            vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2841 = (_2746 * 40u) + 28u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2866 = fma(_1988, _2854.z, fma(_1987, _2854.y, _2854.x * _1986)) + _2854.w;
                            _2867 = !((fma(_1988, _2835.z, fma(_1987, _2835.y, _2835.x * _1986)) + _2835.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2867)
                            {
                                float _2894 = _2761.x - _1986;
                                float _2895 = _2761.y - _1987;
                                float _2896 = _2761.z - _1988;
                                float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                                float _2900 = inversesqrt(_2897);
                                float _2901 = _2900 * _2894;
                                float _2902 = _2900 * _2895;
                                float _2903 = _2900 * _2896;
                                float _2907 = 1.0 - (_2897 / (_2762 * _2762));
                                float _3874 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2908 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                                float _2912 = sqrt(_2897) * _2777.w;
                                float _2914 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                                float _2915 = _2914 * _2914;
                                float _2918 = ((1.0 - _2915) * dot(vec3(_2901, _2902, _2903), vec3(_573, _576, _579))) + _2915;
                                float _2921 = _2912 * _2912;
                                float _2925 = (fma(_1988, _2804.z, fma(_1987, _2804.y, _2804.x * _1986)) + _2804.w) / _2866;
                                float _2926 = (fma(_1988, _2820.z, fma(_1987, _2820.y, _2820.x * _1986)) + _2820.w) / _2866;
                                float _2930 = 1.0 - dot(vec2(_2925, _2926), vec2(_2925, _2926));
                                float _3890 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                                float _2932 = _2931 * (((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2908) / ((_2921 * 0.699999988079071044921875) + 1.0));
                                float _2944 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                                float _2945 = 1.0 - _649;
                                float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                                float _2953 = _2952 * _2952;
                                float _2954 = _2953 * _2953;
                                float _2955 = _2901 - _2301;
                                float _2956 = _2902 - _2302;
                                float _2957 = _2903 - _2303;
                                float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                                float _2965 = dot(vec3(_573, _576, _579), vec3((-0.0) - _2301, (-0.0) - _2302, (-0.0) - _2303));
                                float _3901 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2968 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2969 = dot(vec3(_573, _576, _579), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                                float _3912 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2972 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                                float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                                float _2977 = _2914 * _2953;
                                float _2978 = _2977 * _2977;
                                float _2984 = ((1.0 - _2978) * dot(vec3(_573, _576, _579), vec3(_2901, _2902, _2903))) + _2978;
                                float _3923 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                                float _2986 = 1.0 - _2953;
                                float _2996 = (0.5 / (((_2985 * ((_2968 * _2986) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2953) * _2968))) * _2985;
                                float _3934 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _3006 = (_2931 * _2908) * (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) / ((_2976 * _2976) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2932 * _2777.x;
                                frontier_phi_83_pred_1 = _2932 * _2777.z;
                                frontier_phi_83_pred_2 = _2932 * _2777.y;
                                frontier_phi_83_pred_3 = _3006 * _2789.z;
                                frontier_phi_83_pred_4 = _3006 * _2789.y;
                                frontier_phi_83_pred_5 = _3006 * _2789.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3013 = frontier_phi_83_pred;
                            _3015 = frontier_phi_83_pred_1;
                            _3014 = frontier_phi_83_pred_2;
                            _3012 = frontier_phi_83_pred_3;
                            _3011 = frontier_phi_83_pred_4;
                            _3010 = frontier_phi_83_pred_5;
                            _2719 = _3013 + _2732;
                            _2720 = _3014 + _2733;
                            _2721 = _3015 + _2734;
                            _2716 = _3010 + _2729;
                            _2717 = _3011 + _2730;
                            _2718 = _3012 + _2731;
                            if (_2736 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2736;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2721;
                        frontier_phi_77_pred_1 = _2720;
                        frontier_phi_77_pred_2 = _2719;
                        frontier_phi_77_pred_3 = _2718;
                        frontier_phi_77_pred_4 = _2717;
                        frontier_phi_77_pred_5 = _2716;
                    }
                    _2286 = frontier_phi_77_pred;
                    _2284 = frontier_phi_77_pred_1;
                    _2282 = frontier_phi_77_pred_2;
                    _2280 = frontier_phi_77_pred_3;
                    _2278 = frontier_phi_77_pred_4;
                    _2276 = frontier_phi_77_pred_5;
                    uint _2493 = _2492 + 1u;
                    if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2486 = _2276;
                        _2487 = _2278;
                        _2488 = _2280;
                        _2489 = _2282;
                        _2490 = _2284;
                        _2491 = _2286;
                        _2492 = _2493;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2278;
                frontier_phi_52_53_ladder_1 = _2286;
                frontier_phi_52_53_ladder_2 = _2284;
                frontier_phi_52_53_ladder_3 = _2282;
                frontier_phi_52_53_ladder_4 = _2280;
                frontier_phi_52_53_ladder_5 = _2276;
            }
            else
            {
                frontier_phi_52_53_ladder = _2125;
                frontier_phi_52_53_ladder_1 = _2133;
                frontier_phi_52_53_ladder_2 = _2131;
                frontier_phi_52_53_ladder_3 = _2129;
                frontier_phi_52_53_ladder_4 = _2127;
                frontier_phi_52_53_ladder_5 = _2123;
            }
            _2275 = frontier_phi_52_53_ladder_5;
            _2277 = frontier_phi_52_53_ladder;
            _2279 = frontier_phi_52_53_ladder_4;
            _2281 = frontier_phi_52_53_ladder_3;
            _2283 = frontier_phi_52_53_ladder_2;
            _2285 = frontier_phi_52_53_ladder_1;
        }
        float _2290 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2045 = (_2290 * _2281) + _1764;
        _2047 = (_2290 * _2283) + _1765;
        _2049 = (_2290 * _2285) + _1766;
        _2051 = ((_2275 * _618) * _2290) + _1928;
        _2053 = ((_2277 * _620) * _2290) + _1929;
        _2055 = ((_2279 * _621) * _2290) + _1930;
    }
    else
    {
        _2045 = _1764;
        _2047 = _1765;
        _2049 = _1766;
        _2051 = _1928;
        _2053 = _1929;
        _2055 = _1930;
    }
    float _3950 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3961 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3972 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2072 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2045 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _633))) + ((_2051 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2073 = ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2047 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _633))) + ((_2053 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2074 = ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2049 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _633))) + ((_2055 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1473)) * cbPerFrame._m0[3u].x);
    float _2075 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2077 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    uint _2078 = _592 + 6u;
    float _2086 = _552 / cbSceneParam._m0[86u].x;
    float _2087 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2101 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2103 = _2101.x;
    float _2104 = _2101.y;
    float _2105 = _2101.z;
    float _2106 = _2101.w;
    float _2186;
    float _2188;
    float _2190;
    float _2192;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2148 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2149 = _2148 / _525;
        float _2160 = _2149 * _261;
        float _2161 = _262 * _2149;
        float _2162 = (-0.0) - _2161;
        float _2163 = _2149 * _263;
        float _2165 = (cbSceneParam._m0[77u].w * _2162) / _2148;
        float _2166 = _2165 + cbSceneParam._m0[79u].w;
        float _2167 = cbSceneParam._m0[79u].w - _2161;
        float _2173 = sqrt(((_2160 * _2160) + (_2161 * _2161)) + (_2163 * _2163));
        float _2176 = (1.0 - (cbSceneParam._m0[77u].w / _2148)) * _2173;
        float _2182 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2184 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2417;
        if (abs((_2162 - _2165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2417 = ((((_2166 > 0.0) ? exp2(_2182 * _2166) : (2.0 - exp2(_2184 * _2166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2176;
        }
        else
        {
            float _2336 = 1.0 / cbSceneParam._m0[80u].x;
            float _2337 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : max(_2166, _2167));
            float _2338 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : min(_2166, _2167));
            float _2347 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : min(_2337, 0.0));
            float _2348 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : min(_2338, 0.0));
            _2417 = ((abs(_2173 / _2162) * cbSceneParam._m0[80u].y) * ((((_2347 - _2348) * 2.0) - ((exp2(_2182 * (isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0)))) - exp2(_2182 * (isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0))))) * _2336)) - ((exp2(_2184 * _2347) - exp2(_2184 * _2348)) * _2336))) + (_2176 * cbSceneParam._m0[80u].z);
        }
        vec4 _2419 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2086, _2087, 1.0), 0.0);
        float _2428 = exp2((_2417 * (-1.44269502162933349609375)) * (1.0 - _2419.w));
        float _2429 = log2(_2428);
        float _2445 = log2(_2106);
        _2186 = (exp2(_2445 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2429 * cbSceneParam._m0[78u].x)) * _2419.x) / cbSceneParam._m0[78u].x)) + _2103;
        _2188 = (exp2(_2445 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2429 * cbSceneParam._m0[78u].y)) * _2419.y) / cbSceneParam._m0[78u].y)) + _2104;
        _2190 = (exp2(_2445 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2429 * cbSceneParam._m0[78u].z)) * _2419.z) / cbSceneParam._m0[78u].z)) + _2105;
        _2192 = _2428 * _2106;
    }
    else
    {
        _2186 = _2103;
        _2188 = _2104;
        _2190 = _2105;
        _2192 = _2106;
    }
    bool _2455;
    vec4 _2202;
    vec4 _2224;
    float _2226;
    float _2230;
    float _2231;
    float _2232;
    float _2233;
    bool _2243;
    for (;;)
    {
        _2202 = cbMatDynParam._m0[0u];
        float _2204 = roundEven(_2202.y);
        bool _2205 = _2204 == 3.0;
        float _2206 = log2(_2192);
        float _2213 = exp2(_2206 * cbSceneParam._m0[78u].x) * _2075;
        float _2214 = exp2(_2206 * cbSceneParam._m0[78u].y) * _2076;
        float _2215 = exp2(_2206 * cbSceneParam._m0[78u].z) * _2077;
        float _2222 = _539 + (-0.5);
        _2224 = cbMtdParam._m0[1u];
        _2226 = _2224.y * _2222;
        float _2229 = (_2204 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2230 = _2229 * (_2205 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2186)));
        _2231 = _2229 * (_2205 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2188)));
        _2232 = _2229 * (_2205 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2190)));
        _2233 = _2222 * 0.999000012874603271484375;
        _2243 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2243)
        {
            if ((cbInstanceData._m0[_592 + 7u].x + _2233) < 0.5)
            {
                _2455 = true;
                break;
            }
        }
        uint _2371 = _594 + uint(_2202.w);
        if ((cbInstanceData._m0[_2371].w < 1.0) && ((cbInstanceData._m0[_2371].w + _2233) < 0.5))
        {
            _2455 = true;
            break;
        }
        if ((_2226 + 1.0) < _2224.x)
        {
            _2455 = true;
            break;
        }
        _2455 = false;
        break;
    }
    float _2686;
    if (_2455)
    {
        discard_state = true;
        _2686 = 0.0;
    }
    else
    {
        _2686 = cbInstanceData._m0[_2078].w;
    }
    SV_Target.x = _2230;
    SV_Target.y = _2231;
    SV_Target.z = _2232;
    SV_Target.w = _2686;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2078].w;
    discard_exit();
}


