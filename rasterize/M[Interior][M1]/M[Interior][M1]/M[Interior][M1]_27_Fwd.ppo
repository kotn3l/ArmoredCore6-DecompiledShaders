#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _424;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _339 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _349 = (_339.y * 2.0) + (-1.0);
    float _355 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _362 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _371 = cbMtdParam._m0[23u].x + _259;
    float _372 = cbMtdParam._m0[23u].y + _260;
    float _373 = cbMtdParam._m0[23u].z + _261;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_355 * _188, _355 * _189, _355 * _190));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_362 * _202, _362 * _203, _362 * _204));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _393 * _389;
    float _399 = ((cbMtdParam._m0[19u].w * _387) * _393) + (_347 * cbMtdParam._m0[20u].y);
    float _400 = ((cbMtdParam._m0[20u].x * _388) * _393) + (_349 * cbMtdParam._m0[20u].z);
    float _403 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _404 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _422;
    float _425;
    float _427;
    if (_399 > 0.0)
    {
        float _408 = (1.0 - _403) / _399;
        _422 = _408;
        _425 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_408 * _394)) * 0.16666667163372039794921875;
        _427 = (fract((_408 * _400) + _404) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_399 < 0.0)
        {
            float _423 = ((-0.0) - _403) / _399;
            frontier_phi_3_2_ladder = (fract((_423 * _400) + _404) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _423;
            frontier_phi_3_2_ladder_2 = (fract(_423 * _394) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _424;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _422 = frontier_phi_3_2_ladder_1;
        _425 = frontier_phi_3_2_ladder_2;
        _427 = frontier_phi_3_2_ladder;
    }
    float _453;
    float _455;
    float _457;
    if (_400 > 0.0)
    {
        float _440 = (1.0 - _404) / _400;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_440 < _422)
        {
            frontier_phi_8_5_ladder = (fract((_440 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _440;
            frontier_phi_8_5_ladder_2 = (fract(_440 * _394) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _425;
            frontier_phi_8_5_ladder_1 = _422;
            frontier_phi_8_5_ladder_2 = _427;
        }
        _453 = frontier_phi_8_5_ladder_1;
        _455 = frontier_phi_8_5_ladder;
        _457 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_400 < 0.0)
        {
            float _454 = ((-0.0) - _404) / _400;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_454 < _422)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_454 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _454;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_454 * _394) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _425;
                frontier_phi_8_6_ladder_9_ladder_1 = _422;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _425;
            frontier_phi_8_6_ladder_1 = _422;
            frontier_phi_8_6_ladder_2 = _427;
        }
        _453 = frontier_phi_8_6_ladder_1;
        _455 = frontier_phi_8_6_ladder;
        _457 = frontier_phi_8_6_ladder_2;
    }
    float _461 = (_394 > 0.0) ? (cbMtdParam._m0[16u].w / _394) : 5000.0;
    float _474;
    float _475;
    if (_461 < _453)
    {
        _474 = ((_403 + cbMtdParam._m0[17u].x) + (_461 * _399)) * 0.16666667163372039794921875;
        _475 = (((_461 * _400) + _404) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _474 = _455;
        _475 = _457;
    }
    vec4 _477 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_474, _475));
    float _482 = _477.x * cbMtdParam._m0[13u].x;
    float _483 = _477.y * cbMtdParam._m0[13u].y;
    float _484 = _477.z * cbMtdParam._m0[13u].z;
    float _489 = 0.5 - (_286 * 0.5);
    float _499 = (((_482 - _299) - (_482 * _286)) * _489) + _299;
    float _500 = (((_483 - _301) - (_483 * _286)) * _489) + _301;
    float _501 = (((_484 - _303) - (_484 * _286)) * _489) + _303;
    vec4 _513 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _515 = _513.x;
    vec4 _527 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _531 = _527.z;
    float _534 = (_527.x * 2.0) + (-1.0);
    float _535 = (_527.y * 2.0) + (-1.0);
    float _536 = dot(vec2(_534, _535), vec2(_534, _535));
    float _3160 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _541 = sqrt(1.0 - (isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))));
    float _542 = _531 * _286;
    float _552 = (cbMtdParam._m0[15u].w * ((_343 - _542) + ((_531 - _343) * _286))) + _542;
    float _560 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _286))) + _534;
    float _561 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _286))) + _535;
    float _564 = fma(_541, _195, fma(_561, _202, _560 * _188));
    float _567 = fma(_541, _196, fma(_561, _203, _560 * _189));
    float _570 = fma(_541, _197, fma(_561, _204, _560 * _190));
    float _574 = inversesqrt(dot(vec3(_564, _567, _570), vec3(_564, _567, _570)));
    float _575 = _574 * _564;
    float _576 = _574 * _567;
    float _577 = _574 * _570;
    float _3171 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _578 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
    float _3182 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3193 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _3204 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3215 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _582 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    float _598 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _603 = _259 * _602;
    float _604 = _260 * _602;
    float _605 = _261 * _602;
    float _611 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _612 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _632 = fma(_577, cbSceneParam._m0[5u].z, fma(_576, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _575));
    float _635 = fma(_577, cbSceneParam._m0[6u].z, fma(_576, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _575));
    float _638 = fma(_577, cbSceneParam._m0[7u].z, fma(_576, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _575));
    uint _651 = uint(roundEven(NORMAL.w)) * 13u;
    uint _653 = (_651 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _659 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_653].x;
    float _660 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0)))) * cbInstanceData._m0[_653].y;
    float _661 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0)))) * cbInstanceData._m0[_653].z;
    float _3226 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _662 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    float _3237 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _663 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _3248 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _665 = 1.0 - _582;
    float _666 = _662 * _665;
    float _667 = _663 * _665;
    float _668 = _664 * _665;
    float _673 = (_662 + (-0.039999999105930328369140625)) * _582;
    float _674 = (_663 + (-0.039999999105930328369140625)) * _582;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _582;
    float _676 = _673 + 0.039999999105930328369140625;
    float _678 = _674 + 0.039999999105930328369140625;
    float _679 = _675 + 0.039999999105930328369140625;
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _611, cbSceneParam._m0[86u].y * _612));
    float _691 = _688.x * TEXCOORD.z;
    float _692 = dot(vec3(_575, _576, _577), vec3(_603, _604, _605));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _575) - _603;
    float _700 = (_695 * _576) - _604;
    float _701 = (_695 * _577) - _605;
    float _705 = abs(dot(vec3(_603, _604, _605), vec3(_575, _576, _577)));
    float _3259 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_578);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _726 = (1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _727 = _720 * _707;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _796 = fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755));
        float _800 = fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755));
        float _804 = fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755));
        float _828 = _755 + _575;
        float _829 = _759 + _576;
        float _830 = _763 + _577;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _796;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _800;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _804;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_796 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_800 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_804 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_575, _576, _577), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3285 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3296 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3307 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_575, _576, _577), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3340 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_575, _576, _577), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3373 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1071 = _900;
        _1072 = _899;
        _1073 = _911;
        _1074 = _910;
        _1075 = _909;
        _1076 = _921;
        _1077 = _920;
        _1078 = _919;
        _1079 = _934;
        _1080 = _933;
        _1081 = _932;
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _424;
        _1071 = _424;
        _1072 = _424;
        _1073 = _424;
        _1074 = _424;
        _1075 = _424;
        _1076 = _424;
        _1077 = _424;
        _1078 = _424;
        _1079 = _424;
        _1080 = _424;
        _1081 = _424;
        _1082 = 0.0;
        _1083 = 0.0;
        _1084 = 0.0;
    }
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1110 = fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755));
        float _1114 = fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755));
        float _1118 = fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755));
        float _1141 = _755 + _575;
        float _1142 = _759 + _576;
        float _1143 = _763 + _577;
        float _1153 = fma(_1143, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1141)) - _1110;
        float _1154 = fma(_1143, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1141)) - _1114;
        float _1155 = fma(_1143, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1141)) - _1118;
        float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
        float _1172 = ((_1159 * _1153) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1110 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1159 * _1154) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1114 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1159 * _1155) / cbModelParam._m0[35u].z) + ((((((_1118 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1172, _1173, _1174), 0.0);
        float _1209 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1176.x + (-0.5));
        float _1211 = _1209 * (_1176.y + (-0.5));
        float _1212 = _1209 * (_1176.z + (-0.5));
        float _1219 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1183.x + (-0.5));
        float _1221 = _1219 * (_1183.y + (-0.5));
        float _1222 = _1219 * (_1183.z + (-0.5));
        float _1229 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1190.x + (-0.5));
        float _1231 = _1229 * (_1190.y + (-0.5));
        float _1232 = _1229 * (_1190.z + (-0.5));
        float _1239 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1197.x + (-0.5));
        float _1241 = _1239 * (_1197.y + (-0.5));
        float _1242 = _1239 * (_1197.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_575, _576, _577), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3436 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1273 + 1.0))) + _1278) * _1243;
        float _1288 = _1211 * 0.5;
        float _1289 = _1221 * 0.5;
        float _1290 = _1231 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_575, _576, _577), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3469 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1315 + 1.0))) + _1320) * _1244;
        float _1330 = _1212 * 0.5;
        float _1331 = _1222 * 0.5;
        float _1332 = _1232 * 0.5;
        float _1333 = dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332));
        float _1338 = (_1333 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1333);
        float _1346 = (dot(vec3(_575, _576, _577), vec3(_1338 * _1330, _1338 * _1331, _1338 * _1332)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1355 = sqrt(((_1331 * _1331) + (_1330 * _1330)) + (_1332 * _1332)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1357 = _1356 * 2.0;
        float _1361 = (1.0 - _1356) / (_1356 + 1.0);
        float _3502 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1371 = ((((1.0 - _1362) * (_1357 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1357 + 1.0))) + _1362) * _1245;
        _1379 = _1212;
        _1380 = _1211;
        _1381 = _1210;
        _1382 = _1222;
        _1383 = _1221;
        _1384 = _1220;
        _1385 = _1232;
        _1386 = _1231;
        _1387 = _1230;
        _1388 = _1245;
        _1389 = _1244;
        _1390 = _1243;
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)));
    }
    else
    {
        _1379 = _424;
        _1380 = _424;
        _1381 = _424;
        _1382 = _424;
        _1383 = _424;
        _1384 = _424;
        _1385 = _424;
        _1386 = _424;
        _1387 = _424;
        _1388 = _424;
        _1389 = _424;
        _1390 = _424;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1082)) + _1082;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1083)) + _1083;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1084)) + _1084;
    float _1426 = fma(_1405, cbSceneParam._m0[89u].z, fma(_1404, cbSceneParam._m0[89u].y, _1403 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1405, cbSceneParam._m0[90u].z, fma(_1404, cbSceneParam._m0[90u].y, _1403 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1405, cbSceneParam._m0[91u].z, fma(_1404, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1403));
    float _1447 = _699 * 0.5;
    float _1448 = _700 * 0.5;
    float _1449 = _701 * 0.5;
    float _1450 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1453 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1456 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1490;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1463 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1467 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1471 = dot(vec4(_1447, _1448, _1449, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1478 = dot(vec4(cbModelParam._m0[39u]), vec4(_1447, _1448, _1449, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1478) ? 0.0 : (isnan(0.0) ? _1478 : max(0.0, _1478))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1501;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1492 = dot(vec4(cbModelParam._m0[40u]), vec4(_1447, _1448, _1449, 1.0));
        _1501 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1492) ? 0.0 : (isnan(0.0) ? _1492 : max(0.0, _1492))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1501 = 1.0;
    }
    float _1505 = (_1501 * cbModelParam._m0[1u].x) + (_1490 * (1.0 - cbModelParam._m0[1u].x));
    float _1515 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _578);
    float _1516 = isnan(_1515) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1515 : min(cbModelParam._m0[25u].z, _1515));
    float _1597;
    float _1599;
    float _1601;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1564 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1568 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1572 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1575 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1578 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1581 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1609;
        if (_1575 > 0.0)
        {
            _1609 = abs((1.0 - _1564) / _1575);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1564 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1609 = frontier_phi_26_24_ladder;
        }
        float _1971;
        if (_1578 > 0.0)
        {
            _1971 = abs((1.0 - _1568) / _1578);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1578 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1568 + 1.0) / _1578);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1971 = frontier_phi_35_31_ladder;
        }
        float _2271;
        if (_1581 > 0.0)
        {
            _2271 = abs((1.0 - _1572) / _1581);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1572 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2271 = frontier_phi_49_42_ladder;
        }
        float _2273 = isnan(_1971) ? _1609 : (isnan(_1609) ? _1971 : min(_1609, _1971));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1575) + _1564;
        float _2279 = (_2274 * _1578) + _1568;
        float _2280 = (_2274 * _1581) + _1572;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1516);
            frontier_phi_25_49_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1597 = frontier_phi_25_49_ladder_2;
        _1599 = frontier_phi_25_49_ladder_1;
        _1601 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1516);
        _1597 = _1585.x * cbModelParam._m0[1u].y;
        _1599 = _1585.y * cbModelParam._m0[1u].y;
        _1601 = _1585.z * cbModelParam._m0[1u].y;
    }
    float _1605 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _578);
    float _1606 = isnan(_1605) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1605 : min(cbModelParam._m0[25u].w, _1605));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1661 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1665 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1669 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1672 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1675 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1678 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1976;
        if (_1672 > 0.0)
        {
            _1976 = abs((1.0 - _1661) / _1672);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1661 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1976 = frontier_phi_37_33_ladder;
        }
        float _2297;
        if (_1675 > 0.0)
        {
            _2297 = abs((1.0 - _1665) / _1675);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1665 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2297 = frontier_phi_51_44_ladder;
        }
        float _2466;
        if (_1678 > 0.0)
        {
            _2466 = abs((1.0 - _1669) / _1678);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1669 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2466 = frontier_phi_65_60_ladder;
        }
        float _2468 = isnan(_2297) ? _1976 : (isnan(_1976) ? _2297 : min(_1976, _2297));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1672) + _1661;
        float _2474 = (_2469 * _1675) + _1665;
        float _2475 = (_2469 * _1678) + _1669;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1606);
            frontier_phi_34_65_ladder = _2708.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2708.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2708.z * cbModelParam._m0[1u].z;
        }
        _1697 = frontier_phi_34_65_ladder_1;
        _1699 = frontier_phi_34_65_ladder;
        _1701 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1606);
        _1697 = _1681.x * cbModelParam._m0[1u].z;
        _1699 = _1681.y * cbModelParam._m0[1u].z;
        _1701 = _1681.z * cbModelParam._m0[1u].z;
    }
    float _1714 = (((_726 * _676) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1716 = (((_726 * _678) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_726 * _679) + _727) * _691) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1721 = fma(_1718, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1718, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1718, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, _1714 * cbSceneParam._m0[91u].x));
    uvec4 _1737 = floatBitsToUint(cbInstanceData._m0[_651 + 5u]);
    uint _1739 = _1737.x * 14u;
    uint _1740 = _1739 + 13u;
    float _1745 = _691 + (-1.0);
    float _1748 = (cbLight._m0[_1740].x * _1745) + 1.0;
    float _1749 = (cbLight._m0[_1740].y * _1745) + 1.0;
    uint _1750 = _1739 + 5u;
    float _1756 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1760 = _1739 + 4u;
    float _1767 = isnan(1.0) ? _1748 : (isnan(_1748) ? 1.0 : min(_1748, 1.0));
    uint _1771 = _1739 | 1u;
    float _1782 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_575, _576, _577));
    float _1785 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_575, _576, _577));
    float _3638 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _3649 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1790 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.3183098733425140380859375;
    float _1792 = (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 0.3183098733425140380859375;
    float _1799 = ((cbLight._m0[_1750].x * _1756) * _1792) + ((cbLight._m0[_1760].x * _1767) * _1790);
    float _1800 = ((_1756 * cbLight._m0[_1750].y) * _1792) + ((_1767 * cbLight._m0[_1760].y) * _1790);
    float _1801 = ((_1756 * cbLight._m0[_1750].z) * _1792) + ((_1767 * cbLight._m0[_1760].z) * _1790);
    uint _1803 = _1739 + 8u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1739].w)) * _578) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1739].x + _603;
    float _1819 = cbLight._m0[_1739].y + _604;
    float _1820 = cbLight._m0[_1739].z + _605;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1739].xyz));
    float _3660 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _3671 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _1832 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _1833 = dot(vec3(_575, _576, _577), vec3(_1825, _1826, _1827));
    float _3682 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1739].xyz), vec3(_1825, _1826, _1827));
    float _3693 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1841 = _1817 * _1817;
    float _1845 = ((_1836 * _1836) * (_1841 + (-1.0))) + 1.0;
    float _1853 = exp2(log2(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0)))) * 5.0);
    float _1854 = 0.959999978542327880859375 - _673;
    float _1856 = 0.959999978542327880859375 - _674;
    float _1857 = 0.959999978542327880859375 - _675;
    float _1864 = 1.0 - _1817;
    float _1875 = (0.5 / (((_1832 * ((_1831 * _1864) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1864) + _1817) * _1831))) * _1831;
    float _3704 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1841 / ((_1845 * _1845) * 3.141590118408203125));
    uint _1888 = _1739 + 9u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1771].w)) * _578) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1771].x + _603;
    float _1902 = cbLight._m0[_1771].y + _604;
    float _1903 = cbLight._m0[_1771].z + _605;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_575, _576, _577), vec3(cbLight._m0[_1771].xyz));
    float _3715 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1915 = dot(vec3(_575, _576, _577), vec3(_1908, _1909, _1910));
    float _3726 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1919 = dot(vec3(cbLight._m0[_1771].xyz), vec3(_1908, _1909, _1910));
    float _3737 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1923 = _1900 * _1900;
    float _1927 = ((_1918 * _1918) * (_1923 + (-1.0))) + 1.0;
    float _1934 = exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * 5.0);
    float _1941 = 1.0 - _1900;
    float _1951 = (0.5 / (((_1832 * ((_1914 * _1941) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1832 * _1941) + _1900) * _1914))) * _1914;
    float _3748 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1923 / ((_1927 * _1927) * 3.141590118408203125));
    float _1963 = (((((_1934 * _1854) + _676) * cbLight._m0[_1888].x) * _1953) * _1756) + (((((_1853 * _1854) + _676) * cbLight._m0[_1803].x) * _1877) * _1767);
    float _1964 = (((((_1934 * _1856) + _678) * cbLight._m0[_1888].y) * _1953) * _1756) + (((((_1853 * _1856) + _678) * cbLight._m0[_1803].y) * _1877) * _1767);
    float _1965 = (((((_1934 * _1857) + _679) * cbLight._m0[_1888].z) * _1953) * _1756) + (((((_1853 * _1857) + _679) * cbLight._m0[_1803].z) * _1877) * _1767);
    float _2080;
    float _2082;
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    if (_1737.y == 0u)
    {
        float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2020;
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2020;
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2020;
        uvec4 _2035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2036 = _2035.x;
        uint _2047 = uint((float(_2035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _612) / _2036))) + floor(float(uint(cbSceneParam._m0[85u].x * _611) / _2036)));
        float _2057 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2058 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        uint _2061 = uint(isnan(14.0) ? _2058 : (isnan(_2058) ? 14.0 : min(_2058, 14.0)));
        uvec4 _2066 = texelFetch(g_lightClusterGridBuffer, int(((_2061 << 2u) + (_2047 << 6u)) >> 2u));
        uint _2067 = _2066.x;
        uint _2068 = _2035.z;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        if (((((1u << ((_2068 >> 4u) & 15u)) + 4294967295u) & _2067) == 0u) || ((_2068 & 240u) == 0u))
        {
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
        }
        else
        {
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            uint _2340 = 0u;
            uint _2349;
            bool _2350;
            for (;;)
            {
                _2349 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2340 << 2u)) >> 2u)).x;
                _2350 = _2349 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2350)
                {
                    frontier_phi_62_pred = _2335;
                    frontier_phi_62_pred_1 = _2334;
                    frontier_phi_62_pred_2 = _2336;
                    frontier_phi_62_pred_3 = _2339;
                    frontier_phi_62_pred_4 = _2338;
                    frontier_phi_62_pred_5 = _2337;
                }
                else
                {
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    uint _2515;
                    _2509 = _2334;
                    _2510 = _2335;
                    _2511 = _2336;
                    _2512 = _2337;
                    _2513 = _2338;
                    _2514 = _2339;
                    _2515 = _2349;
                    float _2415;
                    float _2416;
                    float _2417;
                    float _2418;
                    float _2419;
                    float _2420;
                    for (;;)
                    {
                        uint _2519 = uint(findLSB(_2515)) + (_2340 << 5u);
                        uint _2516 = (_2515 + 4294967295u) & _2515;
                        uint _2521 = _2519 * 48u;
                        vec4 _2535 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2521)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 3u)).x));
                        uint _2541 = (_2519 * 48u) + 4u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2541)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 3u)).x));
                        uint _2560 = (_2519 * 48u) + 8u;
                        vec3 _2571 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x));
                        float _2575 = _2535.x - _2021;
                        float _2576 = _2535.y - _2022;
                        float _2577 = _2535.z - _2023;
                        float _2578 = dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577));
                        float _2581 = inversesqrt(_2578);
                        float _2582 = _2581 * _2575;
                        float _2583 = _2581 * _2576;
                        float _2584 = _2581 * _2577;
                        float _2585 = dot(vec3(_632, _635, _638), vec3(_2582, _2583, _2584));
                        float _2590 = 1.0 - (_2578 * _2535.w);
                        float _3769 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
                        float _2591 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
                        float _2592 = sqrt(_2578) * _2554.w;
                        float _2595 = 1.39999997615814208984375 / (_2592 + 1.39999997615814208984375);
                        float _2596 = _2595 * _2595;
                        float _2599 = ((1.0 - _2596) * _2585) + _2596;
                        float _2602 = _2592 * _2592;
                        float _2606 = ((isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0))) * _2591) / ((_2602 * 0.699999988079071044921875) + 1.0);
                        float _2610 = (-0.0) - _2021;
                        float _2611 = (-0.0) - _2022;
                        float _2612 = (-0.0) - _2023;
                        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
                        float _2617 = _2616 * _2610;
                        float _2618 = _2616 * _2611;
                        float _2619 = _2616 * _2612;
                        float _2627 = exp2(log2(1.0 / ((_2602 * 3.5) + 5.0)) * 0.25);
                        float _2628 = 1.0 - _707;
                        float _2635 = sqrt(1.0 - ((1.0 - (_2628 * _2628)) * (1.0 - (_2627 * _2627))));
                        float _2636 = _2635 * _2635;
                        float _2637 = _2636 * _2636;
                        float _2638 = _2617 + _2582;
                        float _2639 = _2618 + _2583;
                        float _2640 = _2619 + _2584;
                        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
                        float _2648 = dot(vec3(_632, _635, _638), vec3(_2617, _2618, _2619));
                        float _3785 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2651 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                        float _2652 = dot(vec3(_632, _635, _638), vec3(_2644 * _2638, _2644 * _2639, _2644 * _2640));
                        float _3796 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2655 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
                        float _2659 = ((_2655 * _2655) * (_2637 + (-1.0))) + 1.0;
                        float _2660 = _2595 * _2636;
                        float _2661 = _2660 * _2660;
                        float _2664 = ((1.0 - _2661) * _2585) + _2661;
                        float _3807 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                        float _2666 = 1.0 - _2636;
                        float _2676 = (0.5 / (((_2665 * ((_2651 * _2666) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2666) + _2636) * _2651))) * _2665;
                        float _3818 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2687 = (((_2637 * 3.1415927410125732421875) * (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) / ((_2659 * _2659) * ((_2602 * 2.1991131305694580078125) + 3.141590118408203125))) * _2591;
                        _2418 = (_2606 * _2554.x) + _2512;
                        _2419 = (_2606 * _2554.y) + _2513;
                        _2420 = (_2606 * _2554.z) + _2514;
                        _2415 = (_2687 * _2571.x) + _2509;
                        _2416 = (_2687 * _2571.y) + _2510;
                        _2417 = (_2687 * _2571.z) + _2511;
                        if (_2516 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2509 = _2415;
                            _2510 = _2416;
                            _2511 = _2417;
                            _2512 = _2418;
                            _2513 = _2419;
                            _2514 = _2420;
                            _2515 = _2516;
                        }
                    }
                    frontier_phi_62_pred = _2416;
                    frontier_phi_62_pred_1 = _2415;
                    frontier_phi_62_pred_2 = _2417;
                    frontier_phi_62_pred_3 = _2420;
                    frontier_phi_62_pred_4 = _2419;
                    frontier_phi_62_pred_5 = _2418;
                }
                _2161 = frontier_phi_62_pred;
                _2159 = frontier_phi_62_pred_1;
                _2163 = frontier_phi_62_pred_2;
                _2169 = frontier_phi_62_pred_3;
                _2167 = frontier_phi_62_pred_4;
                _2165 = frontier_phi_62_pred_5;
                uint _2341 = _2340 + 1u;
                if (_2341 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2334 = _2159;
                    _2335 = _2161;
                    _2336 = _2163;
                    _2337 = _2165;
                    _2338 = _2167;
                    _2339 = _2169;
                    _2340 = _2341;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
        }
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.z;
        uint _2175 = (_2173 >> 8u) & 15u;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((4294967295u << _2175) & _2067) == 0u)
        {
            _2302 = _2158;
            _2304 = _2160;
            _2306 = _2162;
            _2308 = _2164;
            _2310 = _2166;
            _2312 = _2168;
        }
        else
        {
            float _2327 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _2328 = _2327 * _2021;
            float _2329 = _2327 * _2022;
            float _2330 = _2327 * _2023;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2175 < ((_2173 >> 12u) & 15u))
            {
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2492 = _2158;
                float _2493 = _2160;
                float _2494 = _2162;
                float _2495 = _2164;
                float _2496 = _2166;
                float _2497 = _2168;
                uint _2498 = _2175;
                uint _2507;
                bool _2508;
                for (;;)
                {
                    _2507 = texelFetch(g_lightClassification, int((((_2061 << 5u) + (_2047 << 9u)) + (_2498 << 2u)) >> 2u)).x;
                    _2508 = _2507 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2508)
                    {
                        frontier_phi_71_pred = _2493;
                        frontier_phi_71_pred_1 = _2492;
                        frontier_phi_71_pred_2 = _2497;
                        frontier_phi_71_pred_3 = _2496;
                        frontier_phi_71_pred_4 = _2495;
                        frontier_phi_71_pred_5 = _2494;
                    }
                    else
                    {
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _2726 = _2492;
                        float _2727 = _2493;
                        float _2728 = _2494;
                        float _2729 = _2495;
                        float _2730 = _2496;
                        float _2731 = _2497;
                        uint _2732 = _2507;
                        uint _2733;
                        vec4 _2758;
                        float _2759;
                        vec4 _2774;
                        vec3 _2786;
                        vec4 _2801;
                        vec4 _2816;
                        float _2862;
                        bool _2863;
                        for (;;)
                        {
                            uint _2743 = ((_2498 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2732));
                            _2733 = (_2732 + 4294967295u) & _2732;
                            uint _2745 = _2743 * 40u;
                            _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            _2759 = _2758.w;
                            uint _2761 = (_2743 * 40u) + 4u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2776 = (_2743 * 40u) + 8u;
                            _2786 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x));
                            uint _2788 = (_2743 * 40u) + 16u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2803 = (_2743 * 40u) + 20u;
                            _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2818 = (_2743 * 40u) + 24u;
                            vec4 _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2837 = (_2743 * 40u) + 28u;
                            vec4 _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            _2862 = fma(_2023, _2850.z, fma(_2022, _2850.y, _2850.x * _2021)) + _2850.w;
                            _2863 = !((fma(_2023, _2831.z, fma(_2022, _2831.y, _2831.x * _2021)) + _2831.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2863)
                            {
                                float _2890 = _2758.x - _2021;
                                float _2891 = _2758.y - _2022;
                                float _2892 = _2758.z - _2023;
                                float _2893 = dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892));
                                float _2896 = inversesqrt(_2893);
                                float _2897 = _2896 * _2890;
                                float _2898 = _2896 * _2891;
                                float _2899 = _2896 * _2892;
                                float _2903 = 1.0 - (_2893 / (_2759 * _2759));
                                float _3829 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2904 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                                float _2908 = sqrt(_2893) * _2774.w;
                                float _2910 = 1.39999997615814208984375 / (_2908 + 1.39999997615814208984375);
                                float _2911 = _2910 * _2910;
                                float _2914 = ((1.0 - _2911) * dot(vec3(_2897, _2898, _2899), vec3(_632, _635, _638))) + _2911;
                                float _2917 = _2908 * _2908;
                                float _2921 = (fma(_2023, _2801.z, fma(_2022, _2801.y, _2801.x * _2021)) + _2801.w) / _2862;
                                float _2922 = (fma(_2023, _2816.z, fma(_2022, _2816.y, _2816.x * _2021)) + _2816.w) / _2862;
                                float _2926 = 1.0 - dot(vec2(_2921, _2922), vec2(_2921, _2922));
                                float _3845 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                                float _2927 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                                float _2928 = _2927 * (((isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0))) * _2904) / ((_2917 * 0.699999988079071044921875) + 1.0));
                                float _2940 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                                float _2941 = 1.0 - _707;
                                float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                                float _2949 = _2948 * _2948;
                                float _2950 = _2949 * _2949;
                                float _2951 = _2897 - _2328;
                                float _2952 = _2898 - _2329;
                                float _2953 = _2899 - _2330;
                                float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                                float _2961 = dot(vec3(_632, _635, _638), vec3((-0.0) - _2328, (-0.0) - _2329, (-0.0) - _2330));
                                float _3856 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2964 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                                float _2965 = dot(vec3(_632, _635, _638), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                                float _3867 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2968 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                                float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                                float _2973 = _2910 * _2949;
                                float _2974 = _2973 * _2973;
                                float _2980 = ((1.0 - _2974) * dot(vec3(_632, _635, _638), vec3(_2897, _2898, _2899))) + _2974;
                                float _3878 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                                float _2982 = 1.0 - _2949;
                                float _2992 = (0.5 / (((_2981 * ((_2964 * _2982) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2981 * _2982) + _2949) * _2964))) * _2981;
                                float _3889 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _3002 = (_2927 * _2904) * (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) / ((_2972 * _2972) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3002 * _2786.y;
                                frontier_phi_77_pred_1 = _3002 * _2786.x;
                                frontier_phi_77_pred_2 = _2928 * _2774.z;
                                frontier_phi_77_pred_3 = _2928 * _2774.y;
                                frontier_phi_77_pred_4 = _2928 * _2774.x;
                                frontier_phi_77_pred_5 = _3002 * _2786.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3007 = frontier_phi_77_pred;
                            _3006 = frontier_phi_77_pred_1;
                            _3011 = frontier_phi_77_pred_2;
                            _3010 = frontier_phi_77_pred_3;
                            _3009 = frontier_phi_77_pred_4;
                            _3008 = frontier_phi_77_pred_5;
                            _2716 = _3009 + _2729;
                            _2717 = _3010 + _2730;
                            _2718 = _3011 + _2731;
                            _2713 = _3006 + _2726;
                            _2714 = _3007 + _2727;
                            _2715 = _3008 + _2728;
                            if (_2733 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2733;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2714;
                        frontier_phi_71_pred_1 = _2713;
                        frontier_phi_71_pred_2 = _2718;
                        frontier_phi_71_pred_3 = _2717;
                        frontier_phi_71_pred_4 = _2716;
                        frontier_phi_71_pred_5 = _2715;
                    }
                    _2305 = frontier_phi_71_pred;
                    _2303 = frontier_phi_71_pred_1;
                    _2313 = frontier_phi_71_pred_2;
                    _2311 = frontier_phi_71_pred_3;
                    _2309 = frontier_phi_71_pred_4;
                    _2307 = frontier_phi_71_pred_5;
                    uint _2499 = _2498 + 1u;
                    if (_2499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2492 = _2303;
                        _2493 = _2305;
                        _2494 = _2307;
                        _2495 = _2309;
                        _2496 = _2311;
                        _2497 = _2313;
                        _2498 = _2499;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2313;
                frontier_phi_53_54_ladder_1 = _2309;
                frontier_phi_53_54_ladder_2 = _2307;
                frontier_phi_53_54_ladder_3 = _2305;
                frontier_phi_53_54_ladder_4 = _2303;
                frontier_phi_53_54_ladder_5 = _2311;
            }
            else
            {
                frontier_phi_53_54_ladder = _2168;
                frontier_phi_53_54_ladder_1 = _2164;
                frontier_phi_53_54_ladder_2 = _2162;
                frontier_phi_53_54_ladder_3 = _2160;
                frontier_phi_53_54_ladder_4 = _2158;
                frontier_phi_53_54_ladder_5 = _2166;
            }
            _2302 = frontier_phi_53_54_ladder_4;
            _2304 = frontier_phi_53_54_ladder_3;
            _2306 = frontier_phi_53_54_ladder_2;
            _2308 = frontier_phi_53_54_ladder_1;
            _2310 = frontier_phi_53_54_ladder_5;
            _2312 = frontier_phi_53_54_ladder;
        }
        float _2317 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2080 = (_2317 * _2308) + _1799;
        _2082 = (_2317 * _2310) + _1800;
        _2084 = (_2317 * _2312) + _1801;
        _2086 = ((_2302 * _676) * _2317) + _1963;
        _2088 = ((_2304 * _678) * _2317) + _1964;
        _2090 = ((_2306 * _679) * _2317) + _1965;
    }
    else
    {
        _2080 = _1799;
        _2082 = _1800;
        _2084 = _1801;
        _2086 = _1963;
        _2088 = _1964;
        _2090 = _1965;
    }
    float _3905 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _3916 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _3927 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _2107 = ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_2080 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _691))) + ((_2086 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    float _2108 = ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_2082 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _691))) + ((_2088 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    float _2109 = ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_2084 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _691))) + ((_2090 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _1505)) * cbPerFrame._m0[3u].x);
    uint _2113 = _651 + 6u;
    float _2121 = _611 / cbSceneParam._m0[86u].x;
    float _2122 = _612 / cbSceneParam._m0[86u].y;
    vec4 _2136 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2121, _2122, (log2((isnan(cbSceneParam._m0[77u].w) ? _598 : (isnan(_598) ? cbSceneParam._m0[77u].w : min(_598, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2138 = _2136.x;
    float _2139 = _2136.y;
    float _2140 = _2136.z;
    float _2141 = _2136.w;
    float _2221;
    float _2223;
    float _2225;
    float _2227;
    if (_598 > cbSceneParam._m0[78u].w)
    {
        float _2183 = isnan(_598) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _598 : min(cbSceneParam._m0[80u].w, _598));
        float _2184 = _2183 / _598;
        float _2195 = _2184 * _259;
        float _2196 = _260 * _2184;
        float _2197 = (-0.0) - _2196;
        float _2198 = _2184 * _261;
        float _2200 = (cbSceneParam._m0[77u].w * _2197) / _2183;
        float _2201 = _2200 + cbSceneParam._m0[79u].w;
        float _2202 = cbSceneParam._m0[79u].w - _2196;
        float _2208 = sqrt(((_2195 * _2195) + (_2196 * _2196)) + (_2198 * _2198));
        float _2211 = (1.0 - (cbSceneParam._m0[77u].w / _2183)) * _2208;
        float _2217 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2219 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2428;
        if (abs((_2197 - _2200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2428 = ((((_2201 > 0.0) ? exp2(_2217 * _2201) : (2.0 - exp2(_2219 * _2201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2211;
        }
        else
        {
            float _2363 = 1.0 / cbSceneParam._m0[80u].x;
            float _2364 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : max(_2201, _2202));
            float _2365 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : min(_2201, _2202));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            _2428 = ((abs(_2208 / _2197) * cbSceneParam._m0[80u].y) * ((((_2374 - _2375) * 2.0) - ((exp2(_2217 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)))) - exp2(_2217 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))))) * _2363)) - ((exp2(_2219 * _2374) - exp2(_2219 * _2375)) * _2363))) + (_2211 * cbSceneParam._m0[80u].z);
        }
        vec4 _2430 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2121, _2122, 1.0), 0.0);
        float _2439 = exp2((_2428 * (-1.44269502162933349609375)) * (1.0 - _2430.w));
        float _2440 = log2(_2439);
        float _2456 = log2(_2141);
        _2221 = (exp2(_2456 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2440 * cbSceneParam._m0[78u].x)) * _2430.x) / cbSceneParam._m0[78u].x)) + _2138;
        _2223 = (exp2(_2456 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2440 * cbSceneParam._m0[78u].y)) * _2430.y) / cbSceneParam._m0[78u].y)) + _2139;
        _2225 = (exp2(_2456 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2440 * cbSceneParam._m0[78u].z)) * _2430.z) / cbSceneParam._m0[78u].z)) + _2140;
        _2227 = _2439 * _2141;
    }
    else
    {
        _2221 = _2138;
        _2223 = _2139;
        _2225 = _2140;
        _2227 = _2141;
    }
    float _2239 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2240 = _2239 == 3.0;
    float _2241 = log2(_2227);
    float _2248 = exp2(_2241 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0)));
    float _2249 = exp2(_2241 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0)));
    float _2250 = exp2(_2241 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0)));
    float _2259 = (_2239 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2259 * (_2240 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2221)));
    SV_Target.y = _2259 * (_2240 ? _2249 : (_2249 + (cbSceneParam._m0[72u].w * _2223)));
    SV_Target.z = _2259 * (_2240 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2225)));
    SV_Target.w = cbInstanceData._m0[_2113].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2113].w;
}


