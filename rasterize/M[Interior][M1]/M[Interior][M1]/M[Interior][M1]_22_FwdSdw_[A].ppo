#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1333;
float _3803;
float _3804;
float _3805;
float _3806;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _298 = _292.w;
    float _311 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _298) + cbMtdParam._m0[11u].x) * _292.x;
    float _313 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _298) + cbMtdParam._m0[11u].y) * _292.y;
    float _315 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _298) + cbMtdParam._m0[11u].z) * _292.z;
    vec4 _333 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _337 = _333.z;
    float _360 = (_333.x * 2.0) + (-1.0);
    float _362 = (_333.y * 2.0) + (-1.0);
    float _365 = _360 - (_360 * _298);
    float _366 = _362 - (_362 * _298);
    float _375 = cbMtdParam._m0[22u].y + _271;
    float _376 = cbMtdParam._m0[22u].z + _272;
    float _377 = cbMtdParam._m0[22u].w + _273;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_200, _201, _202));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_214, _215, _216));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _400 = _397 * _393;
    float _401 = (_397 * _391) + (_365 * cbMtdParam._m0[20u].y);
    float _402 = (_397 * _392) + (_366 * cbMtdParam._m0[20u].z);
    float _403 = _401 * cbMtdParam._m0[19u].x;
    float _404 = _402 * cbMtdParam._m0[18u].w;
    float _405 = fract(TEXCOORD.x);
    float _406 = fract(TEXCOORD.y);
    float _412;
    if (_403 > 0.0)
    {
        _412 = (1.0 - _405) / _403;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_403 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _405) / _403;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _412 = frontier_phi_3_2_ladder;
    }
    float _420;
    if (_404 > 0.0)
    {
        _420 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _420 = frontier_phi_7_6_ladder;
    }
    bool _422 = _400 > 0.0;
    float _424 = _422 ? (cbMtdParam._m0[15u].x / _400) : 5000.0;
    float _425 = isnan(_420) ? _412 : (isnan(_412) ? _420 : min(_412, _420));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _431 = _405 + (-0.5);
    float _434 = _406 + (-0.5);
    float _437 = ((_426 * _400) + _430) / _430;
    vec4 _462 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_431 + (_426 * _403)) / _437) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_434 + (_426 * _404)) / _437) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _478 = (_464 - (_464 * _298)) * cbMtdParam._m0[9u].x;
    float _479 = (_465 - (_465 * _298)) * cbMtdParam._m0[9u].y;
    float _480 = cbMtdParam._m0[9u].z * (_466 - (_466 * _298));
    float _498 = _401 * cbMtdParam._m0[21u].x;
    float _499 = _402 * cbMtdParam._m0[20u].w;
    bool _500 = _498 > 0.0;
    float _505;
    if (_500)
    {
        _505 = (1.0 - _405) / _498;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _405) / _498;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _505 = frontier_phi_11_10_ladder;
    }
    bool _507 = _499 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _406) / _499;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _406) / _499;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _512 = frontier_phi_15_14_ladder;
    }
    float _515 = _422 ? (cbMtdParam._m0[16u].z / _400) : 5000.0;
    float _516 = isnan(_512) ? _505 : (isnan(_505) ? _512 : min(_505, _512));
    float _517 = isnan(_515) ? _516 : (isnan(_516) ? _515 : min(_516, _515));
    float _521 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _525 = ((_517 * _400) + _521) / _521;
    float _530 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _532 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _548 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_431 + (_517 * _498)) / _525) + 0.5) + _530) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_434 + (_517 * _499)) / _525) + 0.5) + _532) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _553 = _548.x * cbMtdParam._m0[10u].x;
    float _554 = _548.y * cbMtdParam._m0[10u].y;
    float _555 = _548.z * cbMtdParam._m0[10u].z;
    float _563;
    if (_500)
    {
        _563 = (1.0 - _405) / _498;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _405) / _498;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _563 = frontier_phi_19_18_ladder;
    }
    float _569;
    if (_507)
    {
        _569 = (1.0 - _406) / _499;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _406) / _499;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _569 = frontier_phi_23_22_ladder;
    }
    float _571 = isnan(_569) ? _563 : (isnan(_563) ? _569 : min(_563, _569));
    float _572 = isnan(_515) ? _571 : (isnan(_571) ? _515 : min(_571, _515));
    float _579 = ((_572 * _400) + _521) / _521;
    vec4 _593 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_431 + (_572 * _498)) / _579) + 0.5) + _530) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_434 + (_572 * _499)) / _579) + 0.5) + _532) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _595 = _593.w;
    float _597 = _595 - (_595 * _298);
    float _607 = (_597 * ((_553 - _478) - (_553 * _298))) + _478;
    float _608 = (_597 * ((_554 - _479) - (_554 * _298))) + _479;
    float _609 = (_597 * ((_555 - _480) - (_555 * _298))) + _480;
    float _623 = _401 * cbMtdParam._m0[21u].z;
    float _624 = _402 * cbMtdParam._m0[21u].y;
    bool _625 = _623 > 0.0;
    float _630;
    if (_625)
    {
        _630 = (1.0 - _405) / _623;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_623 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _405) / _623;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _630 = frontier_phi_27_26_ladder;
    }
    bool _632 = _624 > 0.0;
    float _637;
    if (_632)
    {
        _637 = (1.0 - _406) / _624;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_624 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _406) / _624;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _637 = frontier_phi_31_30_ladder;
    }
    float _640 = _422 ? (cbMtdParam._m0[18u].x / _400) : 5000.0;
    float _641 = isnan(_637) ? _630 : (isnan(_630) ? _637 : min(_630, _637));
    float _642 = isnan(_640) ? _641 : (isnan(_641) ? _640 : min(_641, _640));
    float _646 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _650 = ((_642 * _400) + _646) / _646;
    float _655 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _657 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _674 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_431 + (_642 * _623)) / _650) + 0.5) + _655) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_434 + (_642 * _624)) / _650) + 0.5) + _657) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _679 = _674.x * cbMtdParam._m0[14u].x;
    float _680 = _674.y * cbMtdParam._m0[14u].y;
    float _681 = _674.z * cbMtdParam._m0[14u].z;
    float _689;
    if (_625)
    {
        _689 = (1.0 - _405) / _623;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_623 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _405) / _623;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _689 = frontier_phi_35_34_ladder;
    }
    float _695;
    if (_632)
    {
        _695 = (1.0 - _406) / _624;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_624 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _406) / _624;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _695 = frontier_phi_39_38_ladder;
    }
    float _697 = isnan(_695) ? _689 : (isnan(_689) ? _695 : min(_689, _695));
    float _698 = isnan(_640) ? _697 : (isnan(_697) ? _640 : min(_697, _640));
    float _705 = ((_698 * _400) + _646) / _646;
    vec4 _719 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_431 + (_698 * _623)) / _705) + 0.5) + _655) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_434 + (_698 * _624)) / _705) + 0.5) + _657) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _721 = _719.w;
    float _723 = _721 - (_721 * _298);
    vec4 _747 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _749 = _747.x;
    vec4 _761 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _765 = _761.z;
    float _768 = (_761.x * 2.0) + (-1.0);
    float _769 = (_761.y * 2.0) + (-1.0);
    float _770 = dot(vec2(_768, _769), vec2(_768, _769));
    float _3865 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _775 = sqrt(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))));
    float _776 = _765 * _298;
    float _783 = (cbMtdParam._m0[15u].w * ((_337 - _776) + ((_765 - _337) * _298))) + _776;
    float _787 = (cbMtdParam._m0[16u].x * _365) + _768;
    float _788 = (cbMtdParam._m0[16u].x * _366) + _769;
    float _791 = fma(_775, _207, fma(_788, _214, _787 * _200));
    float _794 = fma(_775, _208, fma(_788, _215, _787 * _201));
    float _797 = fma(_775, _209, fma(_788, _216, _787 * _202));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _3876 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _805 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3898 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3909 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3920 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _809 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _830 = _271 * _829;
    float _831 = _272 * _829;
    float _832 = _273 * _829;
    vec4 _837 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _839 = _837.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1014 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _1020 = (cbMatDynParam._m0[5u].x * _1014) + cbMatDynParam._m0[5u].y;
        float _3931 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1025 = (cbMatDynParam._m0[5u].z * _1014) + cbMatDynParam._m0[5u].w;
        float _3942 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) - _1021)) + _1021) < ((_839 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _852 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _853 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _874 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _877 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _890 = uint(roundEven(NORMAL.w)) * 13u;
    uint _892 = _890 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3953 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _905 = 1.0 - _809;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _809;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _809;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _809;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _852, cbSceneParam._m0[86u].y * _853));
    float _931 = _928.x * TEXCOORD.z;
    float _932 = dot(vec3(_802, _803, _804), vec3(_830, _831, _832));
    float _935 = _932 * 2.0;
    float _939 = (_935 * _802) - _830;
    float _940 = (_935 * _803) - _831;
    float _941 = (_935 * _804) - _832;
    float _945 = abs(dot(vec3(_830, _831, _832), vec3(_802, _803, _804)));
    float _3986 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _947 = sqrt(_805);
    float _960 = exp2((_947 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_947 * 3.0));
    float _966 = (1.0 - _960) * ((_947 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _967 = _960 * _947;
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1059 = fma(_1003, cbModelParam._m0[26u].z, fma(_999, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _995));
        float _1063 = fma(_1003, cbModelParam._m0[27u].z, fma(_999, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _995));
        float _1067 = fma(_1003, cbModelParam._m0[28u].z, fma(_999, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _995));
        float _1090 = _995 + _802;
        float _1091 = _999 + _803;
        float _1092 = _1003 + _804;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1059;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1063;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1067;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1059 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1063 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1067 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_802, _803, _804), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4034 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_802, _803, _804), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4067 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_802, _803, _804), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4100 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1376 = fma(_1003, cbModelParam._m0[30u].z, fma(_999, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _995));
        float _1380 = fma(_1003, cbModelParam._m0[31u].z, fma(_999, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _995));
        float _1384 = fma(_1003, cbModelParam._m0[32u].z, fma(_999, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _995));
        float _1407 = _995 + _802;
        float _1408 = _999 + _803;
        float _1409 = _1003 + _804;
        float _1419 = fma(_1409, cbModelParam._m0[30u].z, fma(_1408, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1407)) - _1376;
        float _1420 = fma(_1409, cbModelParam._m0[31u].z, fma(_1408, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1407)) - _1380;
        float _1421 = fma(_1409, cbModelParam._m0[32u].z, fma(_1408, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1407)) - _1384;
        float _1425 = inversesqrt(dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421)));
        float _1438 = ((_1425 * _1419) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1376 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1439 = ((_1425 * _1420) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1380 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1425 * _1421) / cbModelParam._m0[35u].z) + ((((((_1384 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1438, _1439, _1440), 0.0);
        float _1475 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1442.x + (-0.5));
        float _1477 = _1475 * (_1442.y + (-0.5));
        float _1478 = _1475 * (_1442.z + (-0.5));
        float _1485 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1449.x + (-0.5));
        float _1487 = _1485 * (_1449.y + (-0.5));
        float _1488 = _1485 * (_1449.z + (-0.5));
        float _1495 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1456.x + (-0.5));
        float _1497 = _1495 * (_1456.y + (-0.5));
        float _1498 = _1495 * (_1456.z + (-0.5));
        float _1505 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1463.x + (-0.5));
        float _1507 = _1505 * (_1463.y + (-0.5));
        float _1508 = _1505 * (_1463.z + (-0.5));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1512 = _1476 * 0.5;
        float _1513 = _1486 * 0.5;
        float _1514 = _1496 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_802, _803, _804), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4163 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1539 + 1.0))) + _1544) * _1509;
        float _1554 = _1477 * 0.5;
        float _1555 = _1487 * 0.5;
        float _1556 = _1497 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_802, _803, _804), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4196 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1581 + 1.0))) + _1586) * _1510;
        float _1596 = _1478 * 0.5;
        float _1597 = _1488 * 0.5;
        float _1598 = _1498 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_802, _803, _804), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1511 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4229 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1623 + 1.0))) + _1628) * _1511;
        _1645 = _1478;
        _1646 = _1477;
        _1647 = _1476;
        _1648 = _1488;
        _1649 = _1487;
        _1650 = _1486;
        _1651 = _1498;
        _1652 = _1497;
        _1653 = _1496;
        _1654 = _1511;
        _1655 = _1510;
        _1656 = _1509;
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1658 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1659 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
    }
    else
    {
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = _1333;
        _1654 = _1333;
        _1655 = _1333;
        _1656 = _1333;
        _1657 = 0.0;
        _1658 = 0.0;
        _1659 = 0.0;
    }
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1345)) + _1345;
    float _1670 = (cbModelParam._m0[1u].x * (_1658 - _1346)) + _1346;
    float _1671 = (cbModelParam._m0[1u].x * (_1659 - _1347)) + _1347;
    float _1692 = fma(_1671, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1695 = fma(_1671, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1698 = fma(_1671, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1669));
    float _1713 = _939 * 0.5;
    float _1714 = _940 * 0.5;
    float _1715 = _941 * 0.5;
    float _1716 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1647, _1650, _1653, _1656));
    float _1719 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1646, _1649, _1652, _1655));
    float _1722 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1756;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1729 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1733 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1737 = dot(vec4(_1713, _1714, _1715, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1744 = dot(vec4(cbModelParam._m0[39u]), vec4(_1713, _1714, _1715, 1.0));
        _1756 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1756 = 1.0;
    }
    float _1767;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1758 = dot(vec4(cbModelParam._m0[40u]), vec4(_1713, _1714, _1715, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1758) ? 0.0 : (isnan(0.0) ? _1758 : max(0.0, _1758))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1771 = (_1767 * cbModelParam._m0[1u].x) + (_1756 * (1.0 - cbModelParam._m0[1u].x));
    float _1781 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1781 : min(cbModelParam._m0[25u].z, _1781));
    float _1862;
    float _1864;
    float _1866;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1829 = fma(_1003, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _995)) + cbModelParam._m0[13u].w;
        float _1833 = fma(_1003, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _995)) + cbModelParam._m0[14u].w;
        float _1837 = fma(_1003, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _995)) + cbModelParam._m0[15u].w;
        float _1840 = fma(_941, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _939));
        float _1843 = fma(_941, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _939));
        float _1846 = fma(_941, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _939));
        float _1874;
        if (_1840 > 0.0)
        {
            _1874 = abs((1.0 - _1829) / _1840);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1829 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1874 = frontier_phi_57_55_ladder;
        }
        float _2044;
        if (_1843 > 0.0)
        {
            _2044 = abs((1.0 - _1833) / _1843);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1843 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1833 + 1.0) / _1843);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2044 = frontier_phi_66_62_ladder;
        }
        float _2499;
        if (_1846 > 0.0)
        {
            _2499 = abs((1.0 - _1837) / _1846);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1837 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2499 = frontier_phi_78_73_ladder;
        }
        float _2501 = isnan(_2044) ? _1874 : (isnan(_1874) ? _2044 : min(_1874, _2044));
        float _2502 = isnan(_2499) ? _2501 : (isnan(_2501) ? _2499 : min(_2501, _2499));
        float _2506 = (_2502 * _1840) + _1829;
        float _2507 = (_2502 * _1843) + _1833;
        float _2508 = (_2502 * _1846) + _1837;
        float _2509 = _2502 * 9.9999997473787516355514526367188e-05;
        float _2511 = (-1.0) - _2509;
        float _2513 = _2509 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2508 > _2513) || ((_2508 < _2511) || ((_2507 > _2513) || ((_2507 < _2511) || ((_2506 < _2511) || (_2506 > _2513))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2508, cbModelParam._m0[9u].z, fma(_2507, cbModelParam._m0[9u].y, _2506 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2508, cbModelParam._m0[10u].z, fma(_2507, cbModelParam._m0[10u].y, _2506 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2508, cbModelParam._m0[11u].z, fma(_2507, cbModelParam._m0[11u].y, _2506 * cbModelParam._m0[11u].x))), _1782);
            frontier_phi_56_78_ladder = _2758.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2758.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2758.x * cbModelParam._m0[1u].y;
        }
        _1862 = frontier_phi_56_78_ladder_2;
        _1864 = frontier_phi_56_78_ladder_1;
        _1866 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1850 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_939, _940, _941), _1782);
        _1862 = _1850.x * cbModelParam._m0[1u].y;
        _1864 = _1850.y * cbModelParam._m0[1u].y;
        _1866 = _1850.z * cbModelParam._m0[1u].y;
    }
    float _1870 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1871 = isnan(_1870) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1870 : min(cbModelParam._m0[25u].w, _1870));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1003, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _995)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1003, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _995)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1003, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _995)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_941, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _939));
        float _1937 = fma(_941, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _939));
        float _1940 = fma(_941, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _939));
        float _2049;
        if (_1934 > 0.0)
        {
            _2049 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2049 = frontier_phi_68_64_ladder;
        }
        float _2526;
        if (_1937 > 0.0)
        {
            _2526 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2526 = frontier_phi_80_75_ladder;
        }
        float _2887;
        if (_1940 > 0.0)
        {
            _2887 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2887 = frontier_phi_92_87_ladder;
        }
        float _2889 = isnan(_2526) ? _2049 : (isnan(_2049) ? _2526 : min(_2049, _2526));
        float _2890 = isnan(_2887) ? _2889 : (isnan(_2889) ? _2887 : min(_2889, _2887));
        float _2894 = (_2890 * _1934) + _1923;
        float _2895 = (_2890 * _1937) + _1927;
        float _2896 = (_2890 * _1940) + _1931;
        float _2897 = _2890 * 9.9999997473787516355514526367188e-05;
        float _2898 = (-1.0) - _2897;
        float _2900 = _2897 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2896 > _2900) || ((_2896 < _2898) || ((_2895 > _2900) || ((_2895 < _2898) || ((_2894 < _2898) || (_2894 > _2900))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2896, cbModelParam._m0[17u].z, fma(_2895, cbModelParam._m0[17u].y, _2894 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2896, cbModelParam._m0[18u].z, fma(_2895, cbModelParam._m0[18u].y, _2894 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2896, cbModelParam._m0[19u].z, fma(_2895, cbModelParam._m0[19u].y, _2894 * cbModelParam._m0[19u].x))), _1871);
            frontier_phi_65_92_ladder = _3033.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _3033.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _3033.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_65_92_ladder_2;
        _1961 = frontier_phi_65_92_ladder_1;
        _1963 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_939, _940, _941), _1871);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1976 = (((_966 * _916) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1959 - _1862)) + _1862);
    float _1978 = (((_966 * _918) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1961 - _1864)) + _1864);
    float _1980 = (((_966 * _919) + _967) * _931) * ((cbModelParam._m0[1u].w * (_1963 - _1866)) + _1866);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2036 = _2023 / _2035;
    float _2037 = _2027 / _2035;
    float _2038 = _2031 / _2035;
    float _2185;
    float _2186;
    float _2187;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2065 = ((uint(_2038 > cbSceneParam._m0[59u].y) + uint(_2038 > cbSceneParam._m0[59u].x)) + uint(_2038 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2066 = _2065 + 43u;
        uint _2074 = _2065 + 44u;
        uint _2082 = _2065 + 45u;
        uint _2090 = _2065 + 46u;
        float _2101 = fma(_2035, cbSceneParam._m0[_2066].w, fma(_2031, cbSceneParam._m0[_2066].z, fma(_2027, cbSceneParam._m0[_2066].y, _2023 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2035, cbSceneParam._m0[_2074].w, fma(_2031, cbSceneParam._m0[_2074].z, fma(_2027, cbSceneParam._m0[_2074].y, _2023 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2035, cbSceneParam._m0[_2090].w, fma(_2031, cbSceneParam._m0[_2090].z, fma(_2027, cbSceneParam._m0[_2090].y, _2023 * cbSceneParam._m0[_2090].x)));
        float _2118 = cbSceneParam._m0[33u].z * _2113;
        float _2120 = cbSceneParam._m0[33u].w * _2113;
        float _2123 = fma(_2035, cbSceneParam._m0[_2082].w, fma(_2031, cbSceneParam._m0[_2082].z, fma(_2027, cbSceneParam._m0[_2082].y, _2023 * cbSceneParam._m0[_2082].x))) / _2113;
        float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
        float _4355 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2178 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2101) / _2113, (_2120 + _2105) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2101) / _2113, (_2105 - _2118) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2118) / _2113, (_2105 - _2120) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2120) / _2113, (_2118 + _2105) / _2113), _2123), 0.0)).x), vec4(0.25)));
        _2185 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
        _2186 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
        _2187 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2185 = 1.0;
        _2186 = 1.0;
        _2187 = 1.0;
    }
    float _2251;
    float _2253;
    float _2255;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2239 = fma(_2035, cbSceneParam._m0[63u].w, fma(_2031, cbSceneParam._m0[63u].z, fma(_2027, cbSceneParam._m0[63u].y, _2023 * cbSceneParam._m0[63u].x)));
        float _2240 = fma(_2035, cbSceneParam._m0[60u].w, fma(_2031, cbSceneParam._m0[60u].z, fma(_2027, cbSceneParam._m0[60u].y, _2023 * cbSceneParam._m0[60u].x))) / _2239;
        float _2241 = fma(_2035, cbSceneParam._m0[61u].w, fma(_2031, cbSceneParam._m0[61u].z, fma(_2027, cbSceneParam._m0[61u].y, _2023 * cbSceneParam._m0[61u].x))) / _2239;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2240 >= cbSceneParam._m0[64u].x) && (_2241 >= cbSceneParam._m0[64u].y)) && (_2240 <= cbSceneParam._m0[64u].z)) && (_2241 <= cbSceneParam._m0[64u].w))
        {
            float _2539 = fma(_2035, cbSceneParam._m0[62u].w, fma(_2031, cbSceneParam._m0[62u].z, fma(_2027, cbSceneParam._m0[62u].y, _2023 * cbSceneParam._m0[62u].x))) / _2239;
            float _2543 = isnan(cbSceneParam._m0[41u].w) ? _2539 : (isnan(_2539) ? cbSceneParam._m0[41u].w : max(_2539, cbSceneParam._m0[41u].w));
            float _2586 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
            float _4371 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
            float _2593 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2240, cbSceneParam._m0[33u].w + _2241), _2543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2240, _2241 - cbSceneParam._m0[33u].z), _2543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].z, _2241 - cbSceneParam._m0[33u].w), _2543), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2241), _2543), 0.0)).x), vec4(0.25)));
            float _2597 = 1.0 - (_2593 * cbSceneParam._m0[34u].x);
            float _2598 = 1.0 - (_2593 * cbSceneParam._m0[34u].y);
            float _2599 = 1.0 - (_2593 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2599) ? _2187 : (isnan(_2187) ? _2599 : min(_2187, _2599));
            frontier_phi_77_76_ladder_1 = isnan(_2598) ? _2186 : (isnan(_2186) ? _2598 : min(_2186, _2598));
            frontier_phi_77_76_ladder_2 = isnan(_2597) ? _2185 : (isnan(_2185) ? _2597 : min(_2185, _2597));
        }
        else
        {
            frontier_phi_77_76_ladder = _2187;
            frontier_phi_77_76_ladder_1 = _2186;
            frontier_phi_77_76_ladder_2 = _2185;
        }
        _2251 = frontier_phi_77_76_ladder_2;
        _2253 = frontier_phi_77_76_ladder_1;
        _2255 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2251 = _2185;
        _2253 = _2186;
        _2255 = _2187;
    }
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_890 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2268 = _931 + (-1.0);
    float _2271 = (cbLight._m0[_2263].x * _2268) + 1.0;
    float _2272 = (cbLight._m0[_2263].y * _2268) + 1.0;
    uint _2273 = _2262 + 5u;
    float _2279 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2283 = _2262 + 4u;
    float _2292 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
    uint _2296 = _2262 | 1u;
    float _2307 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_802, _803, _804));
    float _2310 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_802, _803, _804));
    float _4407 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _4418 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2315 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.3183098733425140380859375;
    float _2317 = (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * 0.3183098733425140380859375;
    float _2324 = ((cbLight._m0[_2273].x * _2279) * _2317) + (((cbLight._m0[_2283].x * _2251) * _2292) * _2315);
    float _2325 = ((_2279 * cbLight._m0[_2273].y) * _2317) + (((cbLight._m0[_2283].y * _2253) * _2292) * _2315);
    float _2326 = ((_2279 * cbLight._m0[_2273].z) * _2317) + (((cbLight._m0[_2283].z * _2255) * _2292) * _2315);
    uint _2328 = _2262 + 8u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _805) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2262].x + _830;
    float _2344 = cbLight._m0[_2262].y + _831;
    float _2345 = cbLight._m0[_2262].z + _832;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2262].xyz));
    float _4429 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _2357 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2358 = dot(vec3(_802, _803, _804), vec3(_2350, _2351, _2352));
    float _4451 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2350, _2351, _2352));
    float _4462 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2342 * _2342;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2379 = 0.959999978542327880859375 - _913;
    float _2381 = 0.959999978542327880859375 - _914;
    float _2382 = 0.959999978542327880859375 - _915;
    float _2389 = 1.0 - _2342;
    float _2400 = (0.5 / (((_2357 * ((_2356 * _2389) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2389) + _2342) * _2356))) * _2356;
    float _4473 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    uint _2416 = _2262 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _805) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2296].x + _830;
    float _2430 = cbLight._m0[_2296].y + _831;
    float _2431 = cbLight._m0[_2296].z + _832;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2296].xyz));
    float _4484 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _2443 = dot(vec3(_802, _803, _804), vec3(_2436, _2437, _2438));
    float _4495 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2436, _2437, _2438));
    float _4506 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * 5.0);
    float _2469 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2357 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2469) + _2428) * _2442))) * _2442;
    float _4517 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2491 = (((((_2462 * _2379) + _916) * cbLight._m0[_2416].x) * _2481) * _2279) + ((((cbLight._m0[_2328].x * _2251) * ((_2378 * _2379) + _916)) * _2402) * _2292);
    float _2492 = (((((_2462 * _2381) + _918) * cbLight._m0[_2416].y) * _2481) * _2279) + ((((cbLight._m0[_2328].y * _2253) * ((_2378 * _2381) + _918)) * _2402) * _2292);
    float _2493 = (((((_2462 * _2382) + _919) * cbLight._m0[_2416].z) * _2481) * _2279) + ((((cbLight._m0[_2328].z * _2255) * ((_2378 * _2382) + _919)) * _2402) * _2292);
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    float _2666;
    if (_2260.y == 0u)
    {
        uvec4 _2611 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2612 = _2611.x;
        uint _2623 = uint((float(_2611.y) * floor(float(uint(cbSceneParam._m0[85u].y * _853) / _2612))) + floor(float(uint(cbSceneParam._m0[85u].x * _852) / _2612)));
        float _2633 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2634 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        uint _2637 = uint(isnan(14.0) ? _2634 : (isnan(_2634) ? 14.0 : min(_2634, 14.0)));
        uvec4 _2642 = texelFetch(g_lightClusterGridBuffer, int(((_2637 << 2u) + (_2623 << 6u)) >> 2u));
        uint _2643 = _2642.x;
        uint _2644 = _2611.z;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((((1u << ((_2644 >> 4u) & 15u)) + 4294967295u) & _2643) == 0u) || ((_2644 & 240u) == 0u))
        {
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
        }
        else
        {
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2945 = 0.0;
            float _2946 = 0.0;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            uint _2951 = 0u;
            uint _2960;
            bool _2961;
            for (;;)
            {
                _2960 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_2951 << 2u)) >> 2u)).x;
                _2961 = _2960 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2961)
                {
                    frontier_phi_103_pred = _2946;
                    frontier_phi_103_pred_1 = _2950;
                    frontier_phi_103_pred_2 = _2949;
                    frontier_phi_103_pred_3 = _2948;
                    frontier_phi_103_pred_4 = _2947;
                    frontier_phi_103_pred_5 = _2945;
                }
                else
                {
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    float _3115;
                    float _3116;
                    uint _3117;
                    _3111 = _2945;
                    _3112 = _2946;
                    _3113 = _2947;
                    _3114 = _2948;
                    _3115 = _2949;
                    _3116 = _2950;
                    _3117 = _2960;
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    for (;;)
                    {
                        uint _3121 = uint(findLSB(_3117)) + (_2951 << 5u);
                        uint _3118 = (_3117 + 4294967295u) & _3117;
                        uint _3123 = _3121 * 48u;
                        vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3123)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3123 + 3u)).x));
                        uint _3143 = (_3121 * 48u) + 4u;
                        vec4 _3156 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3143)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3143 + 3u)).x));
                        uint _3162 = (_3121 * 48u) + 8u;
                        vec3 _3173 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x));
                        float _3177 = _3137.x - _2036;
                        float _3178 = _3137.y - _2037;
                        float _3179 = _3137.z - _2038;
                        float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                        float _3183 = inversesqrt(_3180);
                        float _3184 = _3183 * _3177;
                        float _3185 = _3183 * _3178;
                        float _3186 = _3183 * _3179;
                        float _3187 = dot(vec3(_871, _874, _877), vec3(_3184, _3185, _3186));
                        float _3192 = 1.0 - (_3180 * _3137.w);
                        float _4538 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3193 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3194 = sqrt(_3180) * _3156.w;
                        float _3197 = 1.39999997615814208984375 / (_3194 + 1.39999997615814208984375);
                        float _3198 = _3197 * _3197;
                        float _3201 = ((1.0 - _3198) * _3187) + _3198;
                        float _3204 = _3194 * _3194;
                        float _3208 = ((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3193) / ((_3204 * 0.699999988079071044921875) + 1.0);
                        float _3212 = (-0.0) - _2036;
                        float _3213 = (-0.0) - _2037;
                        float _3214 = (-0.0) - _2038;
                        float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                        float _3219 = _3218 * _3212;
                        float _3220 = _3218 * _3213;
                        float _3221 = _3218 * _3214;
                        float _3228 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                        float _3229 = 1.0 - _947;
                        float _3236 = sqrt(1.0 - ((1.0 - (_3229 * _3229)) * (1.0 - (_3228 * _3228))));
                        float _3237 = _3236 * _3236;
                        float _3238 = _3237 * _3237;
                        float _3239 = _3219 + _3184;
                        float _3240 = _3220 + _3185;
                        float _3241 = _3221 + _3186;
                        float _3245 = inversesqrt(dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241)));
                        float _3249 = dot(vec3(_871, _874, _877), vec3(_3219, _3220, _3221));
                        float _4554 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3252 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3253 = dot(vec3(_871, _874, _877), vec3(_3245 * _3239, _3245 * _3240, _3245 * _3241));
                        float _4565 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3260 = ((_3256 * _3256) * (_3238 + (-1.0))) + 1.0;
                        float _3261 = _3197 * _3237;
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3187) + _3262;
                        float _4576 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                        float _3266 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3267 = 1.0 - _3237;
                        float _3277 = (0.5 / (((_3266 * ((_3252 * _3267) + _3237)) + 9.9999999392252902907785028219223e-09) + (((_3266 * _3267) + _3237) * _3252))) * _3266;
                        float _4587 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3288 = (((_3238 * 3.1415927410125732421875) * (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) / ((_3260 * _3260) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125))) * _3193;
                        _3041 = (_3208 * _3156.x) + _3114;
                        _3042 = (_3208 * _3156.y) + _3115;
                        _3043 = (_3208 * _3156.z) + _3116;
                        _3038 = (_3288 * _3173.x) + _3111;
                        _3039 = (_3288 * _3173.y) + _3112;
                        _3040 = (_3288 * _3173.z) + _3113;
                        if (_3118 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3111 = _3038;
                            _3112 = _3039;
                            _3113 = _3040;
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3118;
                        }
                    }
                    frontier_phi_103_pred = _3039;
                    frontier_phi_103_pred_1 = _3043;
                    frontier_phi_103_pred_2 = _3042;
                    frontier_phi_103_pred_3 = _3041;
                    frontier_phi_103_pred_4 = _3040;
                    frontier_phi_103_pred_5 = _3038;
                }
                _2770 = frontier_phi_103_pred;
                _2778 = frontier_phi_103_pred_1;
                _2776 = frontier_phi_103_pred_2;
                _2774 = frontier_phi_103_pred_3;
                _2772 = frontier_phi_103_pred_4;
                _2768 = frontier_phi_103_pred_5;
                uint _2952 = _2951 + 1u;
                if (_2952 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2945 = _2768;
                    _2946 = _2770;
                    _2947 = _2772;
                    _2948 = _2774;
                    _2949 = _2776;
                    _2950 = _2778;
                    _2951 = _2952;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
        }
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.z;
        uint _2784 = (_2782 >> 8u) & 15u;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        if (((4294967295u << _2784) & _2643) == 0u)
        {
            _2913 = _2767;
            _2915 = _2769;
            _2917 = _2771;
            _2919 = _2773;
            _2921 = _2775;
            _2923 = _2777;
        }
        else
        {
            float _2938 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _2939 = _2938 * _2036;
            float _2940 = _2938 * _2037;
            float _2941 = _2938 * _2038;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2784 < ((_2782 >> 12u) & 15u))
            {
                float _2914;
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _3094 = _2767;
                float _3095 = _2769;
                float _3096 = _2771;
                float _3097 = _2773;
                float _3098 = _2775;
                float _3099 = _2777;
                uint _3100 = _2784;
                uint _3109;
                bool _3110;
                for (;;)
                {
                    _3109 = texelFetch(g_lightClassification, int((((_2637 << 5u) + (_2623 << 9u)) + (_3100 << 2u)) >> 2u)).x;
                    _3110 = _3109 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3110)
                    {
                        frontier_phi_114_pred = _3099;
                        frontier_phi_114_pred_1 = _3098;
                        frontier_phi_114_pred_2 = _3097;
                        frontier_phi_114_pred_3 = _3096;
                        frontier_phi_114_pred_4 = _3095;
                        frontier_phi_114_pred_5 = _3094;
                    }
                    else
                    {
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3307;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3315 = _3094;
                        float _3316 = _3095;
                        float _3317 = _3096;
                        float _3318 = _3097;
                        float _3319 = _3098;
                        float _3320 = _3099;
                        uint _3321 = _3109;
                        uint _3322;
                        vec4 _3347;
                        float _3348;
                        vec4 _3363;
                        vec3 _3375;
                        vec4 _3390;
                        vec4 _3405;
                        float _3451;
                        bool _3452;
                        for (;;)
                        {
                            uint _3332 = ((_3100 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3321));
                            _3322 = (_3321 + 4294967295u) & _3321;
                            uint _3334 = _3332 * 40u;
                            _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            _3348 = _3347.w;
                            uint _3350 = (_3332 * 40u) + 4u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3332 * 40u) + 8u;
                            _3375 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x));
                            uint _3377 = (_3332 * 40u) + 16u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            uint _3392 = (_3332 * 40u) + 20u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            uint _3407 = (_3332 * 40u) + 24u;
                            vec4 _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3426 = (_3332 * 40u) + 28u;
                            vec4 _3439 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3426 + 3u)).x));
                            _3451 = fma(_2038, _3439.z, fma(_2037, _3439.y, _3439.x * _2036)) + _3439.w;
                            _3452 = !((fma(_2038, _3420.z, fma(_2037, _3420.y, _3420.x * _2036)) + _3420.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3452)
                            {
                                float _3479 = _3347.x - _2036;
                                float _3480 = _3347.y - _2037;
                                float _3481 = _3347.z - _2038;
                                float _3482 = dot(vec3(_3479, _3480, _3481), vec3(_3479, _3480, _3481));
                                float _3485 = inversesqrt(_3482);
                                float _3486 = _3485 * _3479;
                                float _3487 = _3485 * _3480;
                                float _3488 = _3485 * _3481;
                                float _3492 = 1.0 - (_3482 / (_3348 * _3348));
                                float _4598 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                                float _3493 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3497 = sqrt(_3482) * _3363.w;
                                float _3499 = 1.39999997615814208984375 / (_3497 + 1.39999997615814208984375);
                                float _3500 = _3499 * _3499;
                                float _3503 = ((1.0 - _3500) * dot(vec3(_3486, _3487, _3488), vec3(_871, _874, _877))) + _3500;
                                float _3506 = _3497 * _3497;
                                float _3510 = (fma(_2038, _3390.z, fma(_2037, _3390.y, _3390.x * _2036)) + _3390.w) / _3451;
                                float _3511 = (fma(_2038, _3405.z, fma(_2037, _3405.y, _3405.x * _2036)) + _3405.w) / _3451;
                                float _3515 = 1.0 - dot(vec2(_3510, _3511), vec2(_3510, _3511));
                                float _4614 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3517 = _3516 * (((isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))) * _3493) / ((_3506 * 0.699999988079071044921875) + 1.0));
                                float _3529 = exp2(log2(1.0 / ((_3506 * 3.5) + 5.0)) * 0.25);
                                float _3530 = 1.0 - _947;
                                float _3537 = sqrt(1.0 - ((1.0 - (_3530 * _3530)) * (1.0 - (_3529 * _3529))));
                                float _3538 = _3537 * _3537;
                                float _3539 = _3538 * _3538;
                                float _3540 = _3486 - _2939;
                                float _3541 = _3487 - _2940;
                                float _3542 = _3488 - _2941;
                                float _3546 = inversesqrt(dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542)));
                                float _3550 = dot(vec3(_871, _874, _877), vec3((-0.0) - _2939, (-0.0) - _2940, (-0.0) - _2941));
                                float _4625 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3553 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3554 = dot(vec3(_871, _874, _877), vec3(_3546 * _3540, _3546 * _3541, _3546 * _3542));
                                float _4636 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                                float _3557 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3561 = ((_3557 * _3557) * (_3539 + (-1.0))) + 1.0;
                                float _3562 = _3499 * _3538;
                                float _3563 = _3562 * _3562;
                                float _3569 = ((1.0 - _3563) * dot(vec3(_871, _874, _877), vec3(_3486, _3487, _3488))) + _3563;
                                float _4647 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3571 = 1.0 - _3538;
                                float _3581 = (0.5 / (((_3570 * ((_3553 * _3571) + _3538)) + 9.9999999392252902907785028219223e-09) + (((_3570 * _3571) + _3538) * _3553))) * _3570;
                                float _4658 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3591 = (_3516 * _3493) * (((_3539 * 3.1415927410125732421875) * (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) / ((_3561 * _3561) * ((_3506 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3517 * _3363.z;
                                frontier_phi_120_pred_1 = _3517 * _3363.y;
                                frontier_phi_120_pred_2 = _3517 * _3363.x;
                                frontier_phi_120_pred_3 = _3591 * _3375.z;
                                frontier_phi_120_pred_4 = _3591 * _3375.y;
                                frontier_phi_120_pred_5 = _3591 * _3375.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3600 = frontier_phi_120_pred;
                            _3599 = frontier_phi_120_pred_1;
                            _3598 = frontier_phi_120_pred_2;
                            _3597 = frontier_phi_120_pred_3;
                            _3596 = frontier_phi_120_pred_4;
                            _3595 = frontier_phi_120_pred_5;
                            _3305 = _3598 + _3318;
                            _3306 = _3599 + _3319;
                            _3307 = _3600 + _3320;
                            _3302 = _3595 + _3315;
                            _3303 = _3596 + _3316;
                            _3304 = _3597 + _3317;
                            if (_3322 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3315 = _3302;
                                _3316 = _3303;
                                _3317 = _3304;
                                _3318 = _3305;
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3322;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3307;
                        frontier_phi_114_pred_1 = _3306;
                        frontier_phi_114_pred_2 = _3305;
                        frontier_phi_114_pred_3 = _3304;
                        frontier_phi_114_pred_4 = _3303;
                        frontier_phi_114_pred_5 = _3302;
                    }
                    _2924 = frontier_phi_114_pred;
                    _2922 = frontier_phi_114_pred_1;
                    _2920 = frontier_phi_114_pred_2;
                    _2918 = frontier_phi_114_pred_3;
                    _2916 = frontier_phi_114_pred_4;
                    _2914 = frontier_phi_114_pred_5;
                    uint _3101 = _3100 + 1u;
                    if (_3101 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3094 = _2914;
                        _3095 = _2916;
                        _3096 = _2918;
                        _3097 = _2920;
                        _3098 = _2922;
                        _3099 = _2924;
                        _3100 = _3101;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2920;
                frontier_phi_94_95_ladder_1 = _2924;
                frontier_phi_94_95_ladder_2 = _2922;
                frontier_phi_94_95_ladder_3 = _2918;
                frontier_phi_94_95_ladder_4 = _2916;
                frontier_phi_94_95_ladder_5 = _2914;
            }
            else
            {
                frontier_phi_94_95_ladder = _2773;
                frontier_phi_94_95_ladder_1 = _2777;
                frontier_phi_94_95_ladder_2 = _2775;
                frontier_phi_94_95_ladder_3 = _2771;
                frontier_phi_94_95_ladder_4 = _2769;
                frontier_phi_94_95_ladder_5 = _2767;
            }
            _2913 = frontier_phi_94_95_ladder_5;
            _2915 = frontier_phi_94_95_ladder_4;
            _2917 = frontier_phi_94_95_ladder_3;
            _2919 = frontier_phi_94_95_ladder;
            _2921 = frontier_phi_94_95_ladder_2;
            _2923 = frontier_phi_94_95_ladder_1;
        }
        float _2928 = isnan(1.0) ? _931 : (isnan(_931) ? 1.0 : min(_931, 1.0));
        _2656 = (_2928 * _2919) + _2324;
        _2658 = (_2928 * _2921) + _2325;
        _2660 = (_2928 * _2923) + _2326;
        _2662 = ((_2913 * _916) * _2928) + _2491;
        _2664 = ((_2915 * _918) * _2928) + _2492;
        _2666 = ((_2917 * _919) * _2928) + _2493;
    }
    else
    {
        _2656 = _2324;
        _2658 = _2325;
        _2660 = _2326;
        _2662 = _2491;
        _2664 = _2492;
        _2666 = _2493;
    }
    uint _2672 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _4674 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4685 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4696 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2697 = (((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2656 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _931))) + ((_2662 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2672].x * ((_723 * ((_679 - _607) - (_679 * _298))) + _607));
    float _2699 = ((cbInstanceData._m0[_2672].y * ((_723 * ((_680 - _608) - (_680 * _298))) + _608)) + ((_2664 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2658 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _931)));
    float _2701 = ((cbInstanceData._m0[_2672].z * ((_723 * ((_681 - _609) - (_681 * _298))) + _609)) + ((_2666 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1771)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2660 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _931)));
    float _2702 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
    float _2703 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2704 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    uint _2705 = _890 + 6u;
    float _2713 = _852 / cbSceneParam._m0[86u].x;
    float _2714 = _853 / cbSceneParam._m0[86u].y;
    vec4 _2728 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2730 = _2728.x;
    float _2731 = _2728.y;
    float _2732 = _2728.z;
    float _2733 = _2728.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _2792 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _2793 = _2792 / _825;
        float _2804 = _2793 * _271;
        float _2805 = _272 * _2793;
        float _2806 = (-0.0) - _2805;
        float _2807 = _2793 * _273;
        float _2809 = (cbSceneParam._m0[77u].w * _2806) / _2792;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2805;
        float _2817 = sqrt(((_2804 * _2804) + (_2805 * _2805)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2792)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3051;
        if (abs((_2806 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3051 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2974 = 1.0 / cbSceneParam._m0[80u].x;
            float _2975 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2976 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2985 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : min(_2975, 0.0));
            float _2986 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : min(_2976, 0.0));
            _3051 = ((abs(_2817 / _2806) * cbSceneParam._m0[80u].y) * ((((_2985 - _2986) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0))))) * _2974)) - ((exp2(_2827 * _2985) - exp2(_2827 * _2986)) * _2974))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _3053 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2713, _2714, 1.0), 0.0);
        float _3062 = exp2((_3051 * (-1.44269502162933349609375)) * (1.0 - _3053.w));
        float _3063 = log2(_3062);
        float _3079 = log2(_2733);
        _2829 = (exp2(_3079 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].x)) * _3053.x) / cbSceneParam._m0[78u].x)) + _2730;
        _2831 = (exp2(_3079 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].y)) * _3053.y) / cbSceneParam._m0[78u].y)) + _2731;
        _2833 = (exp2(_3079 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3063 * cbSceneParam._m0[78u].z)) * _3053.z) / cbSceneParam._m0[78u].z)) + _2732;
        _2835 = _3062 * _2733;
    }
    else
    {
        _2829 = _2730;
        _2831 = _2731;
        _2833 = _2732;
        _2835 = _2733;
    }
    bool _3089;
    vec4 _2845;
    vec4 _2867;
    float _2869;
    float _2873;
    float _2874;
    float _2875;
    float _2876;
    bool _2886;
    for (;;)
    {
        _2845 = cbMatDynParam._m0[0u];
        float _2847 = roundEven(_2845.y);
        bool _2848 = _2847 == 3.0;
        float _2849 = log2(_2835);
        float _2856 = exp2(_2849 * cbSceneParam._m0[78u].x) * _2702;
        float _2857 = exp2(_2849 * cbSceneParam._m0[78u].y) * _2703;
        float _2858 = exp2(_2849 * cbSceneParam._m0[78u].z) * _2704;
        float _2865 = _839 + (-0.5);
        _2867 = cbMtdParam._m0[1u];
        _2869 = _2867.y * _2865;
        float _2872 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2873 = _2872 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
        _2874 = _2872 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
        _2875 = _2872 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
        _2876 = _2865 * 0.999000012874603271484375;
        _2886 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2886)
        {
            if ((cbInstanceData._m0[_890 + 7u].x + _2876) < 0.5)
            {
                _3089 = true;
                break;
            }
        }
        uint _3009 = _892 + uint(_2845.w);
        if ((cbInstanceData._m0[_3009].w < 1.0) && ((cbInstanceData._m0[_3009].w + _2876) < 0.5))
        {
            _3089 = true;
            break;
        }
        if ((_2869 + 1.0) < _2867.x)
        {
            _3089 = true;
            break;
        }
        _3089 = false;
        break;
    }
    float _3293;
    if (_3089)
    {
        discard_state = true;
        _3293 = 0.0;
    }
    else
    {
        _3293 = cbInstanceData._m0[_2705].w;
    }
    SV_Target.x = _2873;
    SV_Target.y = _2874;
    SV_Target.z = _2875;
    SV_Target.w = _3293;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2705].w;
    discard_exit();
}


