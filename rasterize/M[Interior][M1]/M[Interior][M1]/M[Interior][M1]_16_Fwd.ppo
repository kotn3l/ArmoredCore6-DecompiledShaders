#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1255;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    float _566 = (_556 * ((_512 - _432) - (_512 * _288))) + _432;
    float _567 = (_556 * ((_513 - _433) - (_513 * _288))) + _433;
    float _568 = (_556 * ((_514 - _434) - (_514 * _288))) + _434;
    float _583 = (cbMtdParam._m0[21u].z * _347) * _353;
    float _585 = (cbMtdParam._m0[21u].y * _348) * _353;
    bool _586 = _583 > 0.0;
    float _591;
    if (_586)
    {
        _591 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _591 = frontier_phi_27_26_ladder;
    }
    bool _593 = _585 > 0.0;
    float _598;
    if (_593)
    {
        _598 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _598 = frontier_phi_31_30_ladder;
    }
    float _601 = _376 ? (cbMtdParam._m0[18u].x / _354) : 5000.0;
    float _602 = isnan(_598) ? _591 : (isnan(_591) ? _598 : min(_591, _598));
    float _603 = isnan(_601) ? _602 : (isnan(_602) ? _601 : min(_602, _601));
    float _607 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _611 = ((_603 * _354) + _607) / _607;
    float _616 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _618 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _635 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_603 * _583)) / _611) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_603 * _585)) / _611) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _640 = _635.x * cbMtdParam._m0[14u].x;
    float _641 = _635.y * cbMtdParam._m0[14u].y;
    float _642 = _635.z * cbMtdParam._m0[14u].z;
    float _650;
    if (_586)
    {
        _650 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _650 = frontier_phi_35_34_ladder;
    }
    float _656;
    if (_593)
    {
        _656 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _656 = frontier_phi_39_38_ladder;
    }
    float _658 = isnan(_656) ? _650 : (isnan(_650) ? _656 : min(_650, _656));
    float _659 = isnan(_601) ? _658 : (isnan(_658) ? _601 : min(_658, _601));
    float _666 = ((_659 * _354) + _607) / _607;
    vec4 _680 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_659 * _583)) / _666) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_659 * _585)) / _666) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _682 = _680.w;
    float _684 = _682 - (_682 * _288);
    float _695 = 0.5 - (_288 * 0.5);
    float _705 = (((_566 - _301) + (_684 * ((_640 - _566) - (_640 * _288)))) * _695) + _301;
    float _706 = (((_567 - _303) + (_684 * ((_641 - _567) - (_641 * _288)))) * _695) + _303;
    float _707 = (((_568 - _305) + (_684 * ((_642 - _568) - (_642 * _288)))) * _695) + _305;
    vec4 _719 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _721 = _719.x;
    vec4 _733 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _741 = (_733.x * 2.0) + (-1.0);
    float _743 = (_733.y * 2.0) + (-1.0);
    float _744 = dot(vec2(_741, _743), vec2(_741, _743));
    float _3422 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _749 = sqrt(1.0 - (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))));
    float _750 = _733.z * _288;
    float _753 = fma(_749, _197, fma(_743, _204, _741 * _190));
    float _756 = fma(_749, _198, fma(_743, _205, _741 * _191));
    float _759 = fma(_749, _199, fma(_743, _206, _741 * _192));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    float _764 = _763 * _753;
    float _765 = _763 * _756;
    float _766 = _763 * _759;
    float _3433 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _767 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _3444 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3455 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3466 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _3477 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _771 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _787 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _792 = _261 * _791;
    float _793 = _262 * _791;
    float _794 = _263 * _791;
    float _800 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _801 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _821 = fma(_766, cbSceneParam._m0[5u].z, fma(_765, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _764));
    float _824 = fma(_766, cbSceneParam._m0[6u].z, fma(_765, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _764));
    float _827 = fma(_766, cbSceneParam._m0[7u].z, fma(_765, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _764));
    uint _840 = uint(roundEven(NORMAL.w)) * 13u;
    uint _843 = (_840 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3488 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _3499 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _855 = 1.0 - _771;
    float _856 = _852 * _855;
    float _857 = _853 * _855;
    float _858 = _854 * _855;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _771;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _771;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _771;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _800, cbSceneParam._m0[86u].y * _801));
    float _881 = _878.x * TEXCOORD.z;
    float _882 = dot(vec3(_764, _765, _766), vec3(_792, _793, _794));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _764) - _792;
    float _890 = (_885 * _765) - _793;
    float _891 = (_885 * _766) - _794;
    float _895 = abs(dot(vec3(_792, _793, _794), vec3(_764, _765, _766)));
    float _3521 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_767);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _916 = (1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _897;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1254;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _981 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _985 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _989 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1012 = _945 + _764;
        float _1013 = _949 + _765;
        float _1014 = _953 + _766;
        float _1024 = fma(_1014, cbModelParam._m0[26u].z, fma(_1013, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012)) - _981;
        float _1025 = fma(_1014, cbModelParam._m0[27u].z, fma(_1013, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012)) - _985;
        float _1026 = fma(_1014, cbModelParam._m0[28u].z, fma(_1013, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012)) - _989;
        float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
        float _1043 = ((_1030 * _1024) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_981 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1044 = ((_1030 * _1025) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_985 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1030 * _1026) / cbModelParam._m0[34u].z) + ((((((_989 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1062 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        vec4 _1069 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1043, _1044, _1045), 0.0);
        float _1082 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1048.x + (-0.5));
        float _1084 = _1082 * (_1048.y + (-0.5));
        float _1085 = _1082 * (_1048.z + (-0.5));
        float _1092 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1055.x + (-0.5));
        float _1094 = _1092 * (_1055.y + (-0.5));
        float _1095 = _1092 * (_1055.z + (-0.5));
        float _1102 = exp2((_1062.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1062.x + (-0.5));
        float _1104 = _1102 * (_1062.y + (-0.5));
        float _1105 = _1102 * (_1062.z + (-0.5));
        float _1112 = exp2((_1069.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1069.x + (-0.5));
        float _1114 = _1112 * (_1069.y + (-0.5));
        float _1115 = _1112 * (_1069.z + (-0.5));
        float _1116 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = _1083 * 0.5;
        float _1120 = _1093 * 0.5;
        float _1121 = _1103 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1136 = (dot(vec3(_764, _765, _766), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3547 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1146 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1116 + 9.9999997473787516355514526367188e-06);
        float _3558 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3569 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0))) * (_1148 + 1.0))) + _1153) * _1116;
        float _1163 = _1084 * 0.5;
        float _1164 = _1094 * 0.5;
        float _1165 = _1104 * 0.5;
        float _1166 = dot(vec3(_1163, _1164, _1165), vec3(_1163, _1164, _1165));
        float _1171 = (_1166 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1166);
        float _1179 = (dot(vec3(_764, _765, _766), vec3(_1171 * _1163, _1171 * _1164, _1171 * _1165)) + 1.0) * 0.5;
        float _3580 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1188 = sqrt(((_1164 * _1164) + (_1163 * _1163)) + (_1165 * _1165)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _3591 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3602 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * (_1190 + 1.0))) + _1195) * _1117;
        float _1205 = _1085 * 0.5;
        float _1206 = _1095 * 0.5;
        float _1207 = _1105 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_764, _765, _766), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3635 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1232 + 1.0))) + _1237) * _1118;
        _1254 = _1085;
        _1256 = _1084;
        _1257 = _1083;
        _1258 = _1095;
        _1259 = _1094;
        _1260 = _1093;
        _1261 = _1105;
        _1262 = _1104;
        _1263 = _1103;
        _1264 = _1118;
        _1265 = _1117;
        _1266 = _1116;
        _1267 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
    }
    else
    {
        _1254 = _1255;
        _1256 = _1255;
        _1257 = _1255;
        _1258 = _1255;
        _1259 = _1255;
        _1260 = _1255;
        _1261 = _1255;
        _1262 = _1255;
        _1263 = _1255;
        _1264 = _1255;
        _1265 = _1255;
        _1266 = _1255;
        _1267 = 0.0;
        _1268 = 0.0;
        _1269 = 0.0;
    }
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1295 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1299 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1303 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1326 = _945 + _764;
        float _1327 = _949 + _765;
        float _1328 = _953 + _766;
        float _1338 = fma(_1328, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1326)) - _1295;
        float _1339 = fma(_1328, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1326)) - _1299;
        float _1340 = fma(_1328, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1326)) - _1303;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1357 = ((_1344 * _1338) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1295 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1339) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1299 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1344 * _1340) / cbModelParam._m0[35u].z) + ((((((_1303 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1357, _1358, _1359), 0.0);
        float _1394 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1361.x + (-0.5));
        float _1396 = _1394 * (_1361.y + (-0.5));
        float _1397 = _1394 * (_1361.z + (-0.5));
        float _1404 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1368.x + (-0.5));
        float _1406 = _1404 * (_1368.y + (-0.5));
        float _1407 = _1404 * (_1368.z + (-0.5));
        float _1414 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1415 = _1414 * (_1375.x + (-0.5));
        float _1416 = _1414 * (_1375.y + (-0.5));
        float _1417 = _1414 * (_1375.z + (-0.5));
        float _1424 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1425 = _1424 * (_1382.x + (-0.5));
        float _1426 = _1424 * (_1382.y + (-0.5));
        float _1427 = _1424 * (_1382.z + (-0.5));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = _1395 * 0.5;
        float _1432 = _1405 * 0.5;
        float _1433 = _1415 * 0.5;
        float _1434 = dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433));
        float _1439 = (_1434 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1434);
        float _1447 = (dot(vec3(_764, _765, _766), vec3(_1439 * _1431, _1439 * _1432, _1439 * _1433)) + 1.0) * 0.5;
        float _3676 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1456 = sqrt(((_1432 * _1432) + (_1431 * _1431)) + (_1433 * _1433)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _3687 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1458 = _1457 * 2.0;
        float _1462 = (1.0 - _1457) / (_1457 + 1.0);
        float _3698 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1472 = ((((1.0 - _1463) * (_1458 + 2.0)) * exp2(log2(isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1458 + 1.0))) + _1463) * _1428;
        float _1473 = _1396 * 0.5;
        float _1474 = _1406 * 0.5;
        float _1475 = _1416 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_764, _765, _766), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3731 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1500 + 1.0))) + _1505) * _1429;
        float _1515 = _1397 * 0.5;
        float _1516 = _1407 * 0.5;
        float _1517 = _1417 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_764, _765, _766), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3764 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1542 + 1.0))) + _1547) * _1430;
        _1564 = _1397;
        _1565 = _1396;
        _1566 = _1395;
        _1567 = _1407;
        _1568 = _1406;
        _1569 = _1405;
        _1570 = _1417;
        _1571 = _1416;
        _1572 = _1415;
        _1573 = _1430;
        _1574 = _1429;
        _1575 = _1428;
        _1576 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)));
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
    }
    else
    {
        _1564 = _1255;
        _1565 = _1255;
        _1566 = _1255;
        _1567 = _1255;
        _1568 = _1255;
        _1569 = _1255;
        _1570 = _1255;
        _1571 = _1255;
        _1572 = _1255;
        _1573 = _1255;
        _1574 = _1255;
        _1575 = _1255;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1588 = (cbModelParam._m0[1u].x * (_1576 - _1267)) + _1267;
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1611 = fma(_1590, cbSceneParam._m0[89u].z, fma(_1589, cbSceneParam._m0[89u].y, _1588 * cbSceneParam._m0[89u].x));
    float _1614 = fma(_1590, cbSceneParam._m0[90u].z, fma(_1589, cbSceneParam._m0[90u].y, _1588 * cbSceneParam._m0[90u].x));
    float _1617 = fma(_1590, cbSceneParam._m0[91u].z, fma(_1589, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1588));
    float _1632 = _889 * 0.5;
    float _1633 = _890 * 0.5;
    float _1634 = _891 * 0.5;
    float _1635 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1638 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1641 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1564, _1567, _1570, _1573));
    float _1675;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1648 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1254, _1258, _1261, _1264));
        float _1652 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1256, _1259, _1262, _1265));
        float _1656 = dot(vec4(_1632, _1633, _1634, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1663 = dot(vec4(cbModelParam._m0[39u]), vec4(_1632, _1633, _1634, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1663) ? 0.0 : (isnan(0.0) ? _1663 : max(0.0, _1663))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1686;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1677 = dot(vec4(cbModelParam._m0[40u]), vec4(_1632, _1633, _1634, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1677) ? 0.0 : (isnan(0.0) ? _1677 : max(0.0, _1677))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1690 = (_1686 * cbModelParam._m0[1u].x) + (_1675 * (1.0 - cbModelParam._m0[1u].x));
    float _1700 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _767);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1700 : min(cbModelParam._m0[25u].z, _1700));
    float _1781;
    float _1783;
    float _1785;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1748 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1752 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1756 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1759 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1762 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1765 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1793;
        if (_1759 > 0.0)
        {
            _1793 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1793 = frontier_phi_54_52_ladder;
        }
        float _2151;
        if (_1762 > 0.0)
        {
            _2151 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2151 = frontier_phi_63_59_ladder;
        }
        float _2451;
        if (_1765 > 0.0)
        {
            _2451 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2451 = frontier_phi_77_70_ladder;
        }
        float _2453 = isnan(_2151) ? _1793 : (isnan(_1793) ? _2151 : min(_1793, _2151));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1759) + _1748;
        float _2459 = (_2454 * _1762) + _1752;
        float _2460 = (_2454 * _1765) + _1756;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2461;
        float _2464 = _2461 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2460 > _2464) || ((_2460 < _2462) || ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 < _2462) || (_2458 > _2464))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2586 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2460, cbModelParam._m0[9u].z, fma(_2459, cbModelParam._m0[9u].y, _2458 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2460, cbModelParam._m0[10u].z, fma(_2459, cbModelParam._m0[10u].y, _2458 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2460, cbModelParam._m0[11u].z, fma(_2459, cbModelParam._m0[11u].y, _2458 * cbModelParam._m0[11u].x))), _1701);
            frontier_phi_53_77_ladder = _2586.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2586.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2586.z * cbModelParam._m0[1u].y;
        }
        _1781 = frontier_phi_53_77_ladder;
        _1783 = frontier_phi_53_77_ladder_1;
        _1785 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1769 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1701);
        _1781 = _1769.x * cbModelParam._m0[1u].y;
        _1783 = _1769.y * cbModelParam._m0[1u].y;
        _1785 = _1769.z * cbModelParam._m0[1u].y;
    }
    float _1789 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _767);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1789 : min(cbModelParam._m0[25u].w, _1789));
    float _1878;
    float _1880;
    float _1882;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1842 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1846 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1850 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1853 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1856 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1859 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _2156;
        if (_1853 > 0.0)
        {
            _2156 = abs((1.0 - _1842) / _1853);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1842 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2156 = frontier_phi_65_61_ladder;
        }
        float _2477;
        if (_1856 > 0.0)
        {
            _2477 = abs((1.0 - _1846) / _1856);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1846 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2477 = frontier_phi_79_72_ladder;
        }
        float _2646;
        if (_1859 > 0.0)
        {
            _2646 = abs((1.0 - _1850) / _1859);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1850 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2646 = frontier_phi_93_88_ladder;
        }
        float _2648 = isnan(_2477) ? _2156 : (isnan(_2156) ? _2477 : min(_2156, _2477));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _1853) + _1842;
        float _2654 = (_2649 * _1856) + _1846;
        float _2655 = (_2649 * _1859) + _1850;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2656;
        float _2659 = _2656 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2655 > _2659) || ((_2655 < _2657) || ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 < _2657) || (_2653 > _2659))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2888 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2655, cbModelParam._m0[17u].z, fma(_2654, cbModelParam._m0[17u].y, _2653 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2655, cbModelParam._m0[18u].z, fma(_2654, cbModelParam._m0[18u].y, _2653 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2655, cbModelParam._m0[19u].z, fma(_2654, cbModelParam._m0[19u].y, _2653 * cbModelParam._m0[19u].x))), _1790);
            frontier_phi_62_93_ladder = _2888.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2888.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2888.x * cbModelParam._m0[1u].z;
        }
        _1878 = frontier_phi_62_93_ladder_2;
        _1880 = frontier_phi_62_93_ladder_1;
        _1882 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1862 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1790);
        _1878 = _1862.x * cbModelParam._m0[1u].z;
        _1880 = _1862.y * cbModelParam._m0[1u].z;
        _1882 = _1862.z * cbModelParam._m0[1u].z;
    }
    float _1895 = (((_916 * _866) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1878 - _1781)) + _1781);
    float _1897 = (((_916 * _868) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1880 - _1783)) + _1783);
    float _1899 = (((_916 * _869) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1882 - _1785)) + _1785);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1897, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1897, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1897, cbSceneParam._m0[91u].y, _1895 * cbSceneParam._m0[91u].x));
    uvec4 _1918 = floatBitsToUint(cbInstanceData._m0[_840 + 5u]);
    uint _1920 = _1918.x * 14u;
    uint _1921 = _1920 + 13u;
    float _1926 = _881 + (-1.0);
    float _1929 = (cbLight._m0[_1921].x * _1926) + 1.0;
    float _1930 = (cbLight._m0[_1921].y * _1926) + 1.0;
    uint _1931 = _1920 + 5u;
    float _1937 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1941 = _1920 + 4u;
    float _1947 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1951 = _1920 | 1u;
    float _1962 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_764, _765, _766));
    float _1965 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_764, _765, _766));
    float _3900 = isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0));
    float _3911 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1970 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * 0.3183098733425140380859375;
    float _1972 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * 0.3183098733425140380859375;
    float _1979 = ((cbLight._m0[_1931].x * _1937) * _1972) + ((cbLight._m0[_1941].x * _1947) * _1970);
    float _1980 = ((_1937 * cbLight._m0[_1931].y) * _1972) + ((_1947 * cbLight._m0[_1941].y) * _1970);
    float _1981 = ((_1937 * cbLight._m0[_1931].z) * _1972) + ((_1947 * cbLight._m0[_1941].z) * _1970);
    uint _1983 = _1920 + 8u;
    float _1996 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1920].w)) * _767) * 0.949999988079071044921875);
    float _1997 = _1996 * _1996;
    float _1998 = cbLight._m0[_1920].x + _792;
    float _1999 = cbLight._m0[_1920].y + _793;
    float _2000 = cbLight._m0[_1920].z + _794;
    float _2004 = inversesqrt(dot(vec3(_1998, _1999, _2000), vec3(_1998, _1999, _2000)));
    float _2005 = _2004 * _1998;
    float _2006 = _2004 * _1999;
    float _2007 = _2004 * _2000;
    float _2008 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_1920].xyz));
    float _3922 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2011 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2012 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _2013 = dot(vec3(_764, _765, _766), vec3(_2005, _2006, _2007));
    float _3944 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _2017 = dot(vec3(cbLight._m0[_1920].xyz), vec3(_2005, _2006, _2007));
    float _3955 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2021 = _1997 * _1997;
    float _2025 = ((_2016 * _2016) * (_2021 + (-1.0))) + 1.0;
    float _2033 = exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * 5.0);
    float _2034 = 0.959999978542327880859375 - _863;
    float _2036 = 0.959999978542327880859375 - _864;
    float _2037 = 0.959999978542327880859375 - _865;
    float _2044 = 1.0 - _1997;
    float _2055 = (0.5 / (((_2012 * ((_2011 * _2044) + _1997)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2044) + _1997) * _2011))) * _2011;
    float _3966 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2057 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2021 / ((_2025 * _2025) * 3.141590118408203125));
    uint _2068 = _1920 + 9u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1951].w)) * _767) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1951].x + _792;
    float _2082 = cbLight._m0[_1951].y + _793;
    float _2083 = cbLight._m0[_1951].z + _794;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_764, _765, _766), vec3(cbLight._m0[_1951].xyz));
    float _3977 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _2095 = dot(vec3(_764, _765, _766), vec3(_2088, _2089, _2090));
    float _3988 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2098 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _2099 = dot(vec3(cbLight._m0[_1951].xyz), vec3(_2088, _2089, _2090));
    float _3999 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2103 = _2080 * _2080;
    float _2107 = ((_2098 * _2098) * (_2103 + (-1.0))) + 1.0;
    float _2114 = exp2(log2(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) * 5.0);
    float _2121 = 1.0 - _2080;
    float _2131 = (0.5 / (((_2012 * ((_2094 * _2121) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2012 * _2121) + _2080) * _2094))) * _2094;
    float _4010 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2133 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2103 / ((_2107 * _2107) * 3.141590118408203125));
    float _2143 = (((((_2114 * _2034) + _866) * cbLight._m0[_2068].x) * _2133) * _1937) + (((((_2033 * _2034) + _866) * cbLight._m0[_1983].x) * _2057) * _1947);
    float _2144 = (((((_2114 * _2036) + _868) * cbLight._m0[_2068].y) * _2133) * _1937) + (((((_2033 * _2036) + _868) * cbLight._m0[_1983].y) * _2057) * _1947);
    float _2145 = (((((_2114 * _2037) + _869) * cbLight._m0[_2068].z) * _2133) * _1937) + (((((_2033 * _2037) + _869) * cbLight._m0[_1983].z) * _2057) * _1947);
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_1918.y == 0u)
    {
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2200;
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2200;
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2200;
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.x;
        uint _2227 = uint((float(_2215.y) * floor(float(uint(cbSceneParam._m0[85u].y * _801) / _2216))) + floor(float(uint(cbSceneParam._m0[85u].x * _800) / _2216)));
        float _2237 = (log2(_2203 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2238 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        uint _2241 = uint(isnan(14.0) ? _2238 : (isnan(_2238) ? 14.0 : min(_2238, 14.0)));
        uvec4 _2246 = texelFetch(g_lightClusterGridBuffer, int(((_2241 << 2u) + (_2227 << 6u)) >> 2u));
        uint _2247 = _2246.x;
        uint _2248 = _2215.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2248 >> 4u) & 15u)) + 4294967295u) & _2247) == 0u) || ((_2248 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            uint _2520 = 0u;
            uint _2529;
            bool _2530;
            for (;;)
            {
                _2529 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                _2530 = _2529 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2530)
                {
                    frontier_phi_90_pred = _2519;
                    frontier_phi_90_pred_1 = _2514;
                    frontier_phi_90_pred_2 = _2515;
                    frontier_phi_90_pred_3 = _2516;
                    frontier_phi_90_pred_4 = _2517;
                    frontier_phi_90_pred_5 = _2518;
                }
                else
                {
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    float _2694;
                    uint _2695;
                    _2689 = _2514;
                    _2690 = _2515;
                    _2691 = _2516;
                    _2692 = _2517;
                    _2693 = _2518;
                    _2694 = _2519;
                    _2695 = _2529;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2699 = uint(findLSB(_2695)) + (_2520 << 5u);
                        uint _2696 = (_2695 + 4294967295u) & _2695;
                        uint _2701 = _2699 * 48u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 3u)).x));
                        uint _2721 = (_2699 * 48u) + 4u;
                        vec4 _2734 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 3u)).x));
                        uint _2740 = (_2699 * 48u) + 8u;
                        vec3 _2751 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2740)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2740 + 2u)).x));
                        float _2755 = _2715.x - _2201;
                        float _2756 = _2715.y - _2202;
                        float _2757 = _2715.z - _2203;
                        float _2758 = dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757));
                        float _2761 = inversesqrt(_2758);
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2765 = dot(vec3(_821, _824, _827), vec3(_2762, _2763, _2764));
                        float _2770 = 1.0 - (_2758 * _2715.w);
                        float _4031 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2772 = sqrt(_2758) * _2734.w;
                        float _2775 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                        float _2776 = _2775 * _2775;
                        float _2779 = ((1.0 - _2776) * _2765) + _2776;
                        float _2782 = _2772 * _2772;
                        float _2786 = ((isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0))) * _2771) / ((_2782 * 0.699999988079071044921875) + 1.0);
                        float _2790 = (-0.0) - _2201;
                        float _2791 = (-0.0) - _2202;
                        float _2792 = (-0.0) - _2203;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2797 = _2796 * _2790;
                        float _2798 = _2796 * _2791;
                        float _2799 = _2796 * _2792;
                        float _2807 = exp2(log2(1.0 / ((_2782 * 3.5) + 5.0)) * 0.25);
                        float _2808 = 1.0 - _897;
                        float _2815 = sqrt(1.0 - ((1.0 - (_2808 * _2808)) * (1.0 - (_2807 * _2807))));
                        float _2816 = _2815 * _2815;
                        float _2817 = _2816 * _2816;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2820 = _2799 + _2764;
                        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
                        float _2828 = dot(vec3(_821, _824, _827), vec3(_2797, _2798, _2799));
                        float _4047 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2832 = dot(vec3(_821, _824, _827), vec3(_2824 * _2818, _2824 * _2819, _2824 * _2820));
                        float _4058 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                        float _2839 = ((_2835 * _2835) * (_2817 + (-1.0))) + 1.0;
                        float _2840 = _2775 * _2816;
                        float _2841 = _2840 * _2840;
                        float _2844 = ((1.0 - _2841) * _2765) + _2841;
                        float _4069 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2845 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                        float _2846 = 1.0 - _2816;
                        float _2856 = (0.5 / (((_2845 * ((_2831 * _2846) + _2816)) + 9.9999999392252902907785028219223e-09) + (((_2845 * _2846) + _2816) * _2831))) * _2845;
                        float _4080 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                        float _2867 = (((_2817 * 3.1415927410125732421875) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) / ((_2839 * _2839) * ((_2782 * 2.1991131305694580078125) + 3.141590118408203125))) * _2771;
                        _2598 = (_2786 * _2734.x) + _2692;
                        _2599 = (_2786 * _2734.y) + _2693;
                        _2600 = (_2786 * _2734.z) + _2694;
                        _2595 = (_2867 * _2751.x) + _2689;
                        _2596 = (_2867 * _2751.y) + _2690;
                        _2597 = (_2867 * _2751.z) + _2691;
                        if (_2696 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2689 = _2595;
                            _2690 = _2596;
                            _2691 = _2597;
                            _2692 = _2598;
                            _2693 = _2599;
                            _2694 = _2600;
                            _2695 = _2696;
                        }
                    }
                    frontier_phi_90_pred = _2600;
                    frontier_phi_90_pred_1 = _2595;
                    frontier_phi_90_pred_2 = _2596;
                    frontier_phi_90_pred_3 = _2597;
                    frontier_phi_90_pred_4 = _2598;
                    frontier_phi_90_pred_5 = _2599;
                }
                _2349 = frontier_phi_90_pred;
                _2339 = frontier_phi_90_pred_1;
                _2341 = frontier_phi_90_pred_2;
                _2343 = frontier_phi_90_pred_3;
                _2345 = frontier_phi_90_pred_4;
                _2347 = frontier_phi_90_pred_5;
                uint _2521 = _2520 + 1u;
                if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2514 = _2339;
                    _2515 = _2341;
                    _2516 = _2343;
                    _2517 = _2345;
                    _2518 = _2347;
                    _2519 = _2349;
                    _2520 = _2521;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        uvec4 _2352 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2353 = _2352.z;
        uint _2355 = (_2353 >> 8u) & 15u;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        float _2490;
        float _2492;
        if (((4294967295u << _2355) & _2247) == 0u)
        {
            _2482 = _2338;
            _2484 = _2340;
            _2486 = _2342;
            _2488 = _2344;
            _2490 = _2346;
            _2492 = _2348;
        }
        else
        {
            float _2507 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
            float _2508 = _2507 * _2201;
            float _2509 = _2507 * _2202;
            float _2510 = _2507 * _2203;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2355 < ((_2353 >> 12u) & 15u))
            {
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2491;
                float _2493;
                float _2672 = _2338;
                float _2673 = _2340;
                float _2674 = _2342;
                float _2675 = _2344;
                float _2676 = _2346;
                float _2677 = _2348;
                uint _2678 = _2355;
                uint _2687;
                bool _2688;
                for (;;)
                {
                    _2687 = texelFetch(g_lightClassification, int((((_2241 << 5u) + (_2227 << 9u)) + (_2678 << 2u)) >> 2u)).x;
                    _2688 = _2687 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2688)
                    {
                        frontier_phi_99_pred = _2675;
                        frontier_phi_99_pred_1 = _2674;
                        frontier_phi_99_pred_2 = _2673;
                        frontier_phi_99_pred_3 = _2672;
                        frontier_phi_99_pred_4 = _2677;
                        frontier_phi_99_pred_5 = _2676;
                    }
                    else
                    {
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2898;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _2906 = _2672;
                        float _2907 = _2673;
                        float _2908 = _2674;
                        float _2909 = _2675;
                        float _2910 = _2676;
                        float _2911 = _2677;
                        uint _2912 = _2687;
                        uint _2913;
                        vec4 _2938;
                        float _2939;
                        vec4 _2954;
                        vec3 _2966;
                        vec4 _2981;
                        vec4 _2996;
                        float _3042;
                        bool _3043;
                        for (;;)
                        {
                            uint _2923 = ((_2678 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2912));
                            _2913 = (_2912 + 4294967295u) & _2912;
                            uint _2925 = _2923 * 40u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.w;
                            uint _2941 = (_2923 * 40u) + 4u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2923 * 40u) + 8u;
                            _2966 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x));
                            uint _2968 = (_2923 * 40u) + 16u;
                            _2981 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2968)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2968 + 3u)).x));
                            uint _2983 = (_2923 * 40u) + 20u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2998 = (_2923 * 40u) + 24u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            uint _3017 = (_2923 * 40u) + 28u;
                            vec4 _3030 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3017)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3017 + 3u)).x));
                            _3042 = fma(_2203, _3030.z, fma(_2202, _3030.y, _3030.x * _2201)) + _3030.w;
                            _3043 = !((fma(_2203, _3011.z, fma(_2202, _3011.y, _3011.x * _2201)) + _3011.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3043)
                            {
                                float _3070 = _2938.x - _2201;
                                float _3071 = _2938.y - _2202;
                                float _3072 = _2938.z - _2203;
                                float _3073 = dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072));
                                float _3076 = inversesqrt(_3073);
                                float _3077 = _3076 * _3070;
                                float _3078 = _3076 * _3071;
                                float _3079 = _3076 * _3072;
                                float _3083 = 1.0 - (_3073 / (_2939 * _2939));
                                float _4091 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3084 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3088 = sqrt(_3073) * _2954.w;
                                float _3090 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                                float _3091 = _3090 * _3090;
                                float _3094 = ((1.0 - _3091) * dot(vec3(_3077, _3078, _3079), vec3(_821, _824, _827))) + _3091;
                                float _3097 = _3088 * _3088;
                                float _3101 = (fma(_2203, _2981.z, fma(_2202, _2981.y, _2981.x * _2201)) + _2981.w) / _3042;
                                float _3102 = (fma(_2203, _2996.z, fma(_2202, _2996.y, _2996.x * _2201)) + _2996.w) / _3042;
                                float _3106 = 1.0 - dot(vec2(_3101, _3102), vec2(_3101, _3102));
                                float _4107 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                                float _3107 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3108 = _3107 * (((isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0))) * _3084) / ((_3097 * 0.699999988079071044921875) + 1.0));
                                float _3120 = exp2(log2(1.0 / ((_3097 * 3.5) + 5.0)) * 0.25);
                                float _3121 = 1.0 - _897;
                                float _3128 = sqrt(1.0 - ((1.0 - (_3121 * _3121)) * (1.0 - (_3120 * _3120))));
                                float _3129 = _3128 * _3128;
                                float _3130 = _3129 * _3129;
                                float _3131 = _3077 - _2508;
                                float _3132 = _3078 - _2509;
                                float _3133 = _3079 - _2510;
                                float _3137 = inversesqrt(dot(vec3(_3131, _3132, _3133), vec3(_3131, _3132, _3133)));
                                float _3141 = dot(vec3(_821, _824, _827), vec3((-0.0) - _2508, (-0.0) - _2509, (-0.0) - _2510));
                                float _4118 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3144 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3145 = dot(vec3(_821, _824, _827), vec3(_3137 * _3131, _3137 * _3132, _3137 * _3133));
                                float _4129 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3148 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                                float _3152 = ((_3148 * _3148) * (_3130 + (-1.0))) + 1.0;
                                float _3153 = _3090 * _3129;
                                float _3154 = _3153 * _3153;
                                float _3160 = ((1.0 - _3154) * dot(vec3(_821, _824, _827), vec3(_3077, _3078, _3079))) + _3154;
                                float _4140 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                                float _3162 = 1.0 - _3129;
                                float _3172 = (0.5 / (((_3161 * ((_3144 * _3162) + _3129)) + 9.9999999392252902907785028219223e-09) + (((_3161 * _3162) + _3129) * _3144))) * _3161;
                                float _4151 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3182 = (_3107 * _3084) * (((_3130 * 3.1415927410125732421875) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) / ((_3152 * _3152) * ((_3097 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3108 * _2954.z;
                                frontier_phi_105_pred_1 = _3182 * _2966.x;
                                frontier_phi_105_pred_2 = _3182 * _2966.y;
                                frontier_phi_105_pred_3 = _3182 * _2966.z;
                                frontier_phi_105_pred_4 = _3108 * _2954.x;
                                frontier_phi_105_pred_5 = _3108 * _2954.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3191 = frontier_phi_105_pred;
                            _3186 = frontier_phi_105_pred_1;
                            _3187 = frontier_phi_105_pred_2;
                            _3188 = frontier_phi_105_pred_3;
                            _3189 = frontier_phi_105_pred_4;
                            _3190 = frontier_phi_105_pred_5;
                            _2896 = _3189 + _2909;
                            _2897 = _3190 + _2910;
                            _2898 = _3191 + _2911;
                            _2893 = _3186 + _2906;
                            _2894 = _3187 + _2907;
                            _2895 = _3188 + _2908;
                            if (_2913 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2906 = _2893;
                                _2907 = _2894;
                                _2908 = _2895;
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2913;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2896;
                        frontier_phi_99_pred_1 = _2895;
                        frontier_phi_99_pred_2 = _2894;
                        frontier_phi_99_pred_3 = _2893;
                        frontier_phi_99_pred_4 = _2898;
                        frontier_phi_99_pred_5 = _2897;
                    }
                    _2489 = frontier_phi_99_pred;
                    _2487 = frontier_phi_99_pred_1;
                    _2485 = frontier_phi_99_pred_2;
                    _2483 = frontier_phi_99_pred_3;
                    _2493 = frontier_phi_99_pred_4;
                    _2491 = frontier_phi_99_pred_5;
                    uint _2679 = _2678 + 1u;
                    if (_2679 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2672 = _2483;
                        _2673 = _2485;
                        _2674 = _2487;
                        _2675 = _2489;
                        _2676 = _2491;
                        _2677 = _2493;
                        _2678 = _2679;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2493;
                frontier_phi_81_82_ladder_1 = _2489;
                frontier_phi_81_82_ladder_2 = _2487;
                frontier_phi_81_82_ladder_3 = _2485;
                frontier_phi_81_82_ladder_4 = _2483;
                frontier_phi_81_82_ladder_5 = _2491;
            }
            else
            {
                frontier_phi_81_82_ladder = _2348;
                frontier_phi_81_82_ladder_1 = _2344;
                frontier_phi_81_82_ladder_2 = _2342;
                frontier_phi_81_82_ladder_3 = _2340;
                frontier_phi_81_82_ladder_4 = _2338;
                frontier_phi_81_82_ladder_5 = _2346;
            }
            _2482 = frontier_phi_81_82_ladder_4;
            _2484 = frontier_phi_81_82_ladder_3;
            _2486 = frontier_phi_81_82_ladder_2;
            _2488 = frontier_phi_81_82_ladder_1;
            _2490 = frontier_phi_81_82_ladder_5;
            _2492 = frontier_phi_81_82_ladder;
        }
        float _2497 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2260 = (_2497 * _2488) + _1979;
        _2262 = (_2497 * _2490) + _1980;
        _2264 = (_2497 * _2492) + _1981;
        _2266 = ((_2482 * _866) * _2497) + _2143;
        _2268 = ((_2484 * _868) * _2497) + _2144;
        _2270 = ((_2486 * _869) * _2497) + _2145;
    }
    else
    {
        _2260 = _1979;
        _2262 = _1980;
        _2264 = _1981;
        _2266 = _2143;
        _2268 = _2144;
        _2270 = _2145;
    }
    float _4167 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4178 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4189 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2287 = ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2260 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _881))) + ((_2266 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2288 = ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_2262 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _881))) + ((_2268 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2264 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _881))) + ((_2270 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1690)) * cbPerFrame._m0[3u].x);
    uint _2293 = _840 + 6u;
    float _2301 = _800 / cbSceneParam._m0[86u].x;
    float _2302 = _801 / cbSceneParam._m0[86u].y;
    vec4 _2316 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, (log2((isnan(cbSceneParam._m0[77u].w) ? _787 : (isnan(_787) ? cbSceneParam._m0[77u].w : min(_787, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2318 = _2316.x;
    float _2319 = _2316.y;
    float _2320 = _2316.z;
    float _2321 = _2316.w;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    if (_787 > cbSceneParam._m0[78u].w)
    {
        float _2363 = isnan(_787) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _787 : min(cbSceneParam._m0[80u].w, _787));
        float _2364 = _2363 / _787;
        float _2375 = _2364 * _261;
        float _2376 = _262 * _2364;
        float _2377 = (-0.0) - _2376;
        float _2378 = _2364 * _263;
        float _2380 = (cbSceneParam._m0[77u].w * _2377) / _2363;
        float _2381 = _2380 + cbSceneParam._m0[79u].w;
        float _2382 = cbSceneParam._m0[79u].w - _2376;
        float _2388 = sqrt(((_2375 * _2375) + (_2376 * _2376)) + (_2378 * _2378));
        float _2391 = (1.0 - (cbSceneParam._m0[77u].w / _2363)) * _2388;
        float _2397 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2399 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2608;
        if (abs((_2377 - _2380) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2608 = ((((_2381 > 0.0) ? exp2(_2397 * _2381) : (2.0 - exp2(_2399 * _2381))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2391;
        }
        else
        {
            float _2543 = 1.0 / cbSceneParam._m0[80u].x;
            float _2544 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : max(_2381, _2382));
            float _2545 = isnan(_2382) ? _2381 : (isnan(_2381) ? _2382 : min(_2381, _2382));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            _2608 = ((abs(_2388 / _2377) * cbSceneParam._m0[80u].y) * ((((_2554 - _2555) * 2.0) - ((exp2(_2397 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0)))) - exp2(_2397 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0))))) * _2543)) - ((exp2(_2399 * _2554) - exp2(_2399 * _2555)) * _2543))) + (_2391 * cbSceneParam._m0[80u].z);
        }
        vec4 _2610 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2301, _2302, 1.0), 0.0);
        float _2619 = exp2((_2608 * (-1.44269502162933349609375)) * (1.0 - _2610.w));
        float _2620 = log2(_2619);
        float _2636 = log2(_2321);
        _2401 = (exp2(_2636 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].x)) * _2610.x) / cbSceneParam._m0[78u].x)) + _2318;
        _2403 = (exp2(_2636 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].y)) * _2610.y) / cbSceneParam._m0[78u].y)) + _2319;
        _2405 = (exp2(_2636 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2620 * cbSceneParam._m0[78u].z)) * _2610.z) / cbSceneParam._m0[78u].z)) + _2320;
        _2407 = _2619 * _2321;
    }
    else
    {
        _2401 = _2318;
        _2403 = _2319;
        _2405 = _2320;
        _2407 = _2321;
    }
    float _2419 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2420 = _2419 == 3.0;
    float _2421 = log2(_2407);
    float _2428 = exp2(_2421 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0)));
    float _2429 = exp2(_2421 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0)));
    float _2430 = exp2(_2421 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0)));
    float _2439 = (_2419 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2439 * (_2420 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2401)));
    SV_Target.y = _2439 * (_2420 ? _2429 : (_2429 + (cbSceneParam._m0[72u].w * _2403)));
    SV_Target.z = _2439 * (_2420 ? _2430 : (_2430 + (cbSceneParam._m0[72u].w * _2405)));
    SV_Target.w = cbInstanceData._m0[_2293].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2293].w;
}


