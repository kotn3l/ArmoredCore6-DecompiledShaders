#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _753;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _179 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _186 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _190 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _238 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _248 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _238);
    float _249 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _238);
    float _250 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _238);
    float _276 = cbMtdParam._m0[22u].y + _248;
    float _277 = cbMtdParam._m0[22u].z + _249;
    float _278 = cbMtdParam._m0[22u].w + _250;
    float _295 = (-0.0) - dot(vec3(_276, _277, _278), vec3(_179 * _172, _179 * _173, _179 * _174));
    float _296 = (-0.0) - dot(vec3(_276, _277, _278), vec3(_190 * TANGENT.x, _190 * TANGENT.y, _190 * TANGENT.z));
    float _297 = (-0.0) - dot(vec3(_276, _277, _278), vec3((-0.0) - (NORMAL.x * _186), (-0.0) - (NORMAL.y * _186), (-0.0) - (NORMAL.z * _186)));
    float _301 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _302 = _301 * _297;
    float _304 = (cbMtdParam._m0[19u].x * _295) * _301;
    float _306 = (cbMtdParam._m0[18u].w * _296) * _301;
    float _307 = fract(TEXCOORD.x);
    float _308 = fract(TEXCOORD.y);
    float _314;
    if (_304 > 0.0)
    {
        _314 = (1.0 - _307) / _304;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _307) / _304;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _314 = frontier_phi_3_2_ladder;
    }
    float _322;
    if (_306 > 0.0)
    {
        _322 = (1.0 - _308) / _306;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _308) / _306;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _322 = frontier_phi_7_6_ladder;
    }
    float _326 = (_302 > 0.0) ? (cbMtdParam._m0[15u].x / _302) : 5000.0;
    float _327 = isnan(_322) ? _314 : (isnan(_314) ? _322 : min(_314, _322));
    float _328 = isnan(_326) ? _327 : (isnan(_327) ? _326 : min(_327, _326));
    float _332 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _339 = ((_328 * _302) + _332) / _332;
    vec4 _365 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_307 + (-0.5)) + (_328 * _304)) / _339) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_308 + (-0.5)) + (_328 * _306)) / _339) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _376 = cbMtdParam._m0[9u].x * _365.x;
    float _377 = cbMtdParam._m0[9u].y * _365.y;
    float _378 = cbMtdParam._m0[9u].z * _365.z;
    float _2668 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _2679 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _2690 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _397 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _401 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _402 = _248 * _401;
    float _403 = _249 * _401;
    float _404 = _250 * _401;
    float _410 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _411 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2679 : (isnan(_2679) ? 1.0 : min(_2679, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2690 : (isnan(_2690) ? 1.0 : min(_2690, 1.0)))) * cbInstanceData._m0[_427].z;
    float _2701 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _2701 : (isnan(_2701) ? 1.0 : min(_2701, 1.0));
    float _2712 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _2712 : (isnan(_2712) ? 1.0 : min(_2712, 1.0));
    float _2723 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _2723 : (isnan(_2723) ? 1.0 : min(_2723, 1.0));
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _410, cbSceneParam._m0[86u].y * _411));
    float _450 = _447.x * TEXCOORD.z;
    float _451 = (-0.0) - _402;
    float _452 = (-0.0) - _403;
    float _453 = (-0.0) - _404;
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _539 = (cbModelParam._m0[37u].x * ((((fma(_483, cbModelParam._m0[26u].z, fma(_479, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _475)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _541 = (cbModelParam._m0[37u].y * ((((fma(_483, cbModelParam._m0[27u].z, fma(_479, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _475)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _542 = (((((fma(_483, cbModelParam._m0[28u].z, fma(_479, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _475)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_539, _541, _542), 0.0);
        float _579 = exp2((_545.w + (-0.5)) * 20.0) * 2.0;
        float _581 = _579 * (_545.x + (-0.5));
        float _582 = _579 * (_545.y + (-0.5));
        float _583 = _579 * (_545.z + (-0.5));
        float _590 = exp2((_552.w + (-0.5)) * 20.0) * 2.0;
        float _591 = _590 * (_552.x + (-0.5));
        float _592 = _590 * (_552.y + (-0.5));
        float _593 = _590 * (_552.z + (-0.5));
        float _600 = exp2((_559.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_559.x + (-0.5));
        float _602 = _600 * (_559.y + (-0.5));
        float _603 = _600 * (_559.z + (-0.5));
        float _610 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_566.x + (-0.5));
        float _612 = _610 * (_566.y + (-0.5));
        float _613 = _610 * (_566.z + (-0.5));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
        float _616 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        float _617 = _581 * 0.5;
        float _618 = _591 * 0.5;
        float _619 = _601 * 0.5;
        float _620 = dot(vec3(_617, _618, _619), vec3(_617, _618, _619));
        float _625 = (_620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_620);
        float _634 = (dot(vec3(0.0), vec3(_625 * _617, _625 * _618, _625 * _619)) + 1.0) * 0.5;
        float _2749 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _644 = sqrt(((_618 * _618) + (_617 * _617)) + (_619 * _619)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _2760 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
        float _645 = isnan(1.0) ? _2760 : (isnan(_2760) ? 1.0 : min(_2760, 1.0));
        float _646 = _645 * 2.0;
        float _650 = (1.0 - _645) / (_645 + 1.0);
        float _2771 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
        float _651 = isnan(1.0) ? _2771 : (isnan(_2771) ? 1.0 : min(_2771, 1.0));
        float _660 = ((((1.0 - _651) * (_646 + 2.0)) * exp2(log2(isnan(1.0) ? _2749 : (isnan(_2749) ? 1.0 : min(_2749, 1.0))) * (_646 + 1.0))) + _651) * _614;
        float _661 = _582 * 0.5;
        float _662 = _592 * 0.5;
        float _663 = _602 * 0.5;
        float _664 = dot(vec3(_661, _662, _663), vec3(_661, _662, _663));
        float _669 = (_664 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_664);
        float _677 = (dot(vec3(0.0), vec3(_669 * _661, _669 * _662, _669 * _663)) + 1.0) * 0.5;
        float _2782 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _686 = sqrt(((_662 * _662) + (_661 * _661)) + (_663 * _663)) / (_615 + 9.9999997473787516355514526367188e-06);
        float _2793 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _687 = isnan(1.0) ? _2793 : (isnan(_2793) ? 1.0 : min(_2793, 1.0));
        float _688 = _687 * 2.0;
        float _692 = (1.0 - _687) / (_687 + 1.0);
        float _2804 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _693 = isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0));
        float _702 = ((((1.0 - _693) * (_688 + 2.0)) * exp2(log2(isnan(1.0) ? _2782 : (isnan(_2782) ? 1.0 : min(_2782, 1.0))) * (_688 + 1.0))) + _693) * _615;
        float _703 = _583 * 0.5;
        float _704 = _593 * 0.5;
        float _705 = _603 * 0.5;
        float _706 = dot(vec3(_703, _704, _705), vec3(_703, _704, _705));
        float _711 = (_706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_706);
        float _719 = (dot(vec3(0.0), vec3(_711 * _703, _711 * _704, _711 * _705)) + 1.0) * 0.5;
        float _2815 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _728 = sqrt(((_704 * _704) + (_703 * _703)) + (_705 * _705)) / (_616 + 9.9999997473787516355514526367188e-06);
        float _2826 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0));
        float _730 = _729 * 2.0;
        float _734 = (1.0 - _729) / (_729 + 1.0);
        float _2837 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _735 = isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0));
        float _744 = ((((1.0 - _735) * (_730 + 2.0)) * exp2(log2(isnan(1.0) ? _2815 : (isnan(_2815) ? 1.0 : min(_2815, 1.0))) * (_730 + 1.0))) + _735) * _616;
        _752 = _583;
        _754 = _582;
        _755 = _581;
        _756 = _593;
        _757 = _592;
        _758 = _591;
        _759 = _603;
        _760 = _602;
        _761 = _601;
        _762 = _616;
        _763 = _615;
        _764 = _614;
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0)));
        _766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0)));
        _767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0)));
    }
    else
    {
        _752 = _753;
        _754 = _753;
        _755 = _753;
        _756 = _753;
        _757 = _753;
        _758 = _753;
        _759 = _753;
        _760 = _753;
        _761 = _753;
        _762 = _753;
        _763 = _753;
        _764 = _753;
        _765 = 0.0;
        _766 = 0.0;
        _767 = 0.0;
    }
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _821 = (cbModelParam._m0[38u].x * ((((fma(_483, cbModelParam._m0[30u].z, fma(_479, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _475)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _822 = (cbModelParam._m0[38u].y * ((((fma(_483, cbModelParam._m0[31u].z, fma(_479, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _475)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _823 = (((((fma(_483, cbModelParam._m0[32u].z, fma(_479, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _475)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _825 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _832 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _858 = exp2((_825.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_825.x + (-0.5));
        float _860 = _858 * (_825.y + (-0.5));
        float _861 = _858 * (_825.z + (-0.5));
        float _868 = exp2((_832.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_832.x + (-0.5));
        float _870 = _868 * (_832.y + (-0.5));
        float _871 = _868 * (_832.z + (-0.5));
        float _878 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_839.x + (-0.5));
        float _880 = _878 * (_839.y + (-0.5));
        float _881 = _878 * (_839.z + (-0.5));
        float _888 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_846.x + (-0.5));
        float _890 = _888 * (_846.y + (-0.5));
        float _891 = _888 * (_846.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _911 = (dot(vec3(0.0), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _2878 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _920 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _2889 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0));
        float _922 = _921 * 2.0;
        float _926 = (1.0 - _921) / (_921 + 1.0);
        float _2900 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _2900 : (isnan(_2900) ? 1.0 : min(_2900, 1.0));
        float _936 = ((((1.0 - _927) * (_922 + 2.0)) * exp2(log2(isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0))) * (_922 + 1.0))) + _927) * _892;
        float _937 = _860 * 0.5;
        float _938 = _870 * 0.5;
        float _939 = _880 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _953 = (dot(vec3(0.0), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _2911 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _962 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _2922 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _2933 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0))) * (_964 + 1.0))) + _969) * _893;
        float _979 = _861 * 0.5;
        float _980 = _871 * 0.5;
        float _981 = _881 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(0.0), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _2944 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _2955 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _2955 : (isnan(_2955) ? 1.0 : min(_2955, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _2966 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _2966 : (isnan(_2966) ? 1.0 : min(_2966, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _2944 : (isnan(_2944) ? 1.0 : min(_2944, 1.0))) * (_1006 + 1.0))) + _1011) * _894;
        _1028 = _861;
        _1029 = _860;
        _1030 = _859;
        _1031 = _871;
        _1032 = _870;
        _1033 = _869;
        _1034 = _881;
        _1035 = _880;
        _1036 = _879;
        _1037 = _894;
        _1038 = _893;
        _1039 = _892;
        _1040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)));
        _1041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1042 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
    }
    else
    {
        _1028 = _753;
        _1029 = _753;
        _1030 = _753;
        _1031 = _753;
        _1032 = _753;
        _1033 = _753;
        _1034 = _753;
        _1035 = _753;
        _1036 = _753;
        _1037 = _753;
        _1038 = _753;
        _1039 = _753;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1052 = (cbModelParam._m0[1u].x * (_1040 - _765)) + _765;
    float _1053 = (cbModelParam._m0[1u].x * (_1041 - _766)) + _766;
    float _1054 = (cbModelParam._m0[1u].x * (_1042 - _767)) + _767;
    float _1075 = fma(_1054, cbSceneParam._m0[89u].z, fma(_1053, cbSceneParam._m0[89u].y, _1052 * cbSceneParam._m0[89u].x));
    float _1078 = fma(_1054, cbSceneParam._m0[90u].z, fma(_1053, cbSceneParam._m0[90u].y, _1052 * cbSceneParam._m0[90u].x));
    float _1081 = fma(_1054, cbSceneParam._m0[91u].z, fma(_1053, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1052));
    float _1096 = _402 * (-0.5);
    float _1097 = _403 * (-0.5);
    float _1098 = _404 * (-0.5);
    float _1099 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1102 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1105 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_1028, _1031, _1034, _1037));
    float _1139;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1112 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_752, _756, _759, _762));
        float _1116 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_754, _757, _760, _763));
        float _1120 = dot(vec4(_1096, _1097, _1098, 1.0), vec4(_755, _758, _761, _764));
        float _1127 = dot(vec4(cbModelParam._m0[39u]), vec4(_1096, _1097, _1098, 1.0));
        _1139 = dot(vec3(isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)), isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1127) ? 0.0 : (isnan(0.0) ? _1127 : max(0.0, _1127))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1139 = 1.0;
    }
    float _1150;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1141 = dot(vec4(cbModelParam._m0[40u]), vec4(_1096, _1097, _1098, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0)), isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1141) ? 0.0 : (isnan(0.0) ? _1141 : max(0.0, _1141))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1154 = (_1150 * cbModelParam._m0[1u].x) + (_1139 * (1.0 - cbModelParam._m0[1u].x));
    float _1163 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1245;
    float _1247;
    float _1249;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1212 = fma(_483, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475)) + cbModelParam._m0[13u].w;
        float _1216 = fma(_483, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475)) + cbModelParam._m0[14u].w;
        float _1220 = fma(_483, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475)) + cbModelParam._m0[15u].w;
        float _1223 = fma(_453, cbModelParam._m0[13u].z, fma(_452, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _451));
        float _1226 = fma(_453, cbModelParam._m0[14u].z, fma(_452, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _451));
        float _1229 = fma(_453, cbModelParam._m0[15u].z, fma(_452, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _451));
        float _1255;
        if (_1223 > 0.0)
        {
            _1255 = abs((1.0 - _1212) / _1223);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1223 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1212 + 1.0) / _1223);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1255 = frontier_phi_22_20_ladder;
        }
        float _1578;
        if (_1226 > 0.0)
        {
            _1578 = abs((1.0 - _1216) / _1226);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1226 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1216 + 1.0) / _1226);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1578 = frontier_phi_31_27_ladder;
        }
        float _1881;
        if (_1229 > 0.0)
        {
            _1881 = abs((1.0 - _1220) / _1229);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1229 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1220 + 1.0) / _1229);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1881 = frontier_phi_45_38_ladder;
        }
        float _1883 = isnan(_1578) ? _1255 : (isnan(_1255) ? _1578 : min(_1255, _1578));
        float _1884 = isnan(_1881) ? _1883 : (isnan(_1883) ? _1881 : min(_1883, _1881));
        float _1888 = (_1884 * _1223) + _1212;
        float _1889 = (_1884 * _1226) + _1216;
        float _1890 = (_1884 * _1229) + _1220;
        float _1891 = _1884 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1891;
        float _1894 = _1891 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1890 > _1894) || ((_1890 < _1892) || ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 < _1892) || (_1888 > _1894))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1890, cbModelParam._m0[9u].z, fma(_1889, cbModelParam._m0[9u].y, _1888 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1890, cbModelParam._m0[10u].z, fma(_1889, cbModelParam._m0[10u].y, _1888 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1890, cbModelParam._m0[11u].z, fma(_1889, cbModelParam._m0[11u].y, _1888 * cbModelParam._m0[11u].x))), _1163);
            frontier_phi_21_45_ladder = _2013.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2013.x * cbModelParam._m0[1u].y;
        }
        _1245 = frontier_phi_21_45_ladder_2;
        _1247 = frontier_phi_21_45_ladder_1;
        _1249 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_451, _452, _453), _1163);
        _1245 = _1233.x * cbModelParam._m0[1u].y;
        _1247 = _1233.y * cbModelParam._m0[1u].y;
        _1249 = _1233.z * cbModelParam._m0[1u].y;
    }
    float _1252 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1341;
    float _1343;
    float _1345;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1305 = fma(_483, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475)) + cbModelParam._m0[21u].w;
        float _1309 = fma(_483, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475)) + cbModelParam._m0[22u].w;
        float _1313 = fma(_483, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475)) + cbModelParam._m0[23u].w;
        float _1316 = fma(_453, cbModelParam._m0[21u].z, fma(_452, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _451));
        float _1319 = fma(_453, cbModelParam._m0[22u].z, fma(_452, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _451));
        float _1322 = fma(_453, cbModelParam._m0[23u].z, fma(_452, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _451));
        float _1583;
        if (_1316 > 0.0)
        {
            _1583 = abs((1.0 - _1305) / _1316);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1305 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1583 = frontier_phi_33_29_ladder;
        }
        float _1907;
        if (_1319 > 0.0)
        {
            _1907 = abs((1.0 - _1309) / _1319);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1309 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1907 = frontier_phi_47_40_ladder;
        }
        float _2073;
        if (_1322 > 0.0)
        {
            _2073 = abs((1.0 - _1313) / _1322);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1313 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2073 = frontier_phi_61_56_ladder;
        }
        float _2075 = isnan(_1907) ? _1583 : (isnan(_1583) ? _1907 : min(_1583, _1907));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1316) + _1305;
        float _2081 = (_2076 * _1319) + _1309;
        float _2082 = (_2076 * _1322) + _1313;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2083;
        float _2086 = _2083 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2082 > _2086) || ((_2082 < _2084) || ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 < _2084) || (_2080 > _2086))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2265 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2082, cbModelParam._m0[17u].z, fma(_2081, cbModelParam._m0[17u].y, _2080 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2082, cbModelParam._m0[18u].z, fma(_2081, cbModelParam._m0[18u].y, _2080 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2082, cbModelParam._m0[19u].z, fma(_2081, cbModelParam._m0[19u].y, _2080 * cbModelParam._m0[19u].x))), _1252);
            frontier_phi_30_61_ladder = _2265.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2265.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2265.x * cbModelParam._m0[1u].z;
        }
        _1341 = frontier_phi_30_61_ladder_2;
        _1343 = frontier_phi_30_61_ladder_1;
        _1345 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1325 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_451, _452, _453), _1252);
        _1341 = _1325.x * cbModelParam._m0[1u].z;
        _1343 = _1325.y * cbModelParam._m0[1u].z;
        _1345 = _1325.z * cbModelParam._m0[1u].z;
    }
    float _1357 = _450 * 0.01200000010430812835693359375;
    float _1359 = _1357 * ((cbModelParam._m0[1u].w * (_1341 - _1245)) + _1245);
    float _1360 = _1357 * ((cbModelParam._m0[1u].w * (_1343 - _1247)) + _1247);
    float _1361 = _1357 * ((cbModelParam._m0[1u].w * (_1345 - _1249)) + _1249);
    float _1364 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1367 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1370 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, _1359 * cbSceneParam._m0[91u].x));
    vec4 _1378 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_410, _411));
    float _1380 = _1378.w;
    float _1393 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1380);
    float _1394 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1380);
    float _1395 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1380);
    uvec4 _1400 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1402 = _1400.x * 14u;
    uint _1403 = _1402 + 13u;
    float _1408 = _450 + (-1.0);
    float _1412 = (cbLight._m0[_1403].x * _1408) + 1.0;
    float _1413 = (cbLight._m0[_1403].y * _1408) + 1.0;
    uint _1414 = _1402 + 5u;
    float _1420 = isnan(1.0) ? _1413 : (isnan(_1413) ? 1.0 : min(_1413, 1.0));
    uint _1424 = _1402 + 4u;
    float _1433 = isnan(1.0) ? _1412 : (isnan(_1412) ? 1.0 : min(_1412, 1.0));
    uint _1437 = _1402 | 1u;
    float _1448 = dot(vec3(cbLight._m0[_1402].xyz), vec3(0.0));
    float _1451 = dot(vec3(cbLight._m0[_1437].xyz), vec3(0.0));
    float _3102 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
    float _3113 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
    float _1456 = (isnan(1.0) ? _3102 : (isnan(_3102) ? 1.0 : min(_3102, 1.0))) * 0.3183098733425140380859375;
    float _1458 = (isnan(1.0) ? _3113 : (isnan(_3113) ? 1.0 : min(_3113, 1.0))) * 0.3183098733425140380859375;
    float _1465 = ((cbLight._m0[_1414].x * _1420) * _1458) + (((cbLight._m0[_1424].x * _1393) * _1433) * _1456);
    float _1466 = ((_1420 * cbLight._m0[_1414].y) * _1458) + (((cbLight._m0[_1424].y * _1394) * _1433) * _1456);
    float _1467 = ((_1420 * cbLight._m0[_1414].z) * _1458) + (((cbLight._m0[_1424].z * _1395) * _1433) * _1456);
    uint _1468 = _1402 + 8u;
    float _1474 = cbLight._m0[_1402].x + _402;
    float _1475 = cbLight._m0[_1402].y + _403;
    float _1476 = cbLight._m0[_1402].z + _404;
    float _1480 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
    float _1484 = dot(vec3(0.0), vec3(cbLight._m0[_1402].xyz));
    float _3124 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
    float _1487 = isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0));
    float _1488 = dot(vec3(0.0), vec3(_402, _403, _404));
    float _3135 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
    float _1491 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _1492 = dot(vec3(cbLight._m0[_1402].xyz), vec3(_1474 * _1480, _1475 * _1480, _1476 * _1480));
    float _3146 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _1503 = (exp2(log2(1.0 - (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1509 = (0.5 / ((_1487 + 9.9999999392252902907785028219223e-09) + _1491)) * _1487;
    float _3157 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1511 = (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0))) * 0.31831014156341552734375;
    uint _1525 = _1402 + 9u;
    float _1531 = cbLight._m0[_1437].x + _402;
    float _1532 = cbLight._m0[_1437].y + _403;
    float _1533 = cbLight._m0[_1437].z + _404;
    float _1537 = inversesqrt(dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533)));
    float _1541 = dot(vec3(0.0), vec3(cbLight._m0[_1437].xyz));
    float _3168 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
    float _1544 = isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0));
    float _1545 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_1531 * _1537, _1532 * _1537, _1533 * _1537));
    float _3179 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
    float _1554 = (exp2(log2(1.0 - (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1558 = (0.5 / ((_1544 + 9.9999999392252902907785028219223e-09) + _1491)) * _1544;
    float _3190 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
    float _1560 = (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) * 0.31831014156341552734375;
    float _1570 = (((_1554 * cbLight._m0[_1525].x) * _1560) * _1420) + ((((cbLight._m0[_1468].x * _1393) * _1503) * _1511) * _1433);
    float _1571 = (((_1554 * cbLight._m0[_1525].y) * _1560) * _1420) + ((((cbLight._m0[_1468].y * _1394) * _1503) * _1511) * _1433);
    float _1572 = (((_1554 * cbLight._m0[_1525].z) * _1560) * _1420) + ((((cbLight._m0[_1468].z * _1395) * _1503) * _1511) * _1433);
    float _1689;
    float _1691;
    float _1693;
    float _1695;
    float _1697;
    float _1699;
    if (_1400.y == 0u)
    {
        float _1628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1628;
        float _1630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1628;
        float _1631 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1628;
        uvec4 _1643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1644 = _1643.x;
        uint _1655 = uint((float(_1643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _411) / _1644))) + floor(float(uint(cbSceneParam._m0[85u].x * _410) / _1644)));
        float _1665 = (log2(_1631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1666 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        uint _1669 = uint(isnan(14.0) ? _1666 : (isnan(_1666) ? 14.0 : min(_1666, 14.0)));
        uvec4 _1675 = texelFetch(g_lightClusterGridBuffer, int(((_1669 << 2u) + (_1655 << 6u)) >> 2u));
        uint _1676 = _1675.x;
        uint _1677 = _1643.z;
        float _1767;
        float _1769;
        float _1771;
        float _1773;
        float _1775;
        float _1777;
        if (((((1u << ((_1677 >> 4u) & 15u)) + 4294967295u) & _1676) == 0u) || ((_1677 & 240u) == 0u))
        {
            _1767 = 0.0;
            _1769 = 0.0;
            _1771 = 0.0;
            _1773 = 0.0;
            _1775 = 0.0;
            _1777 = 0.0;
        }
        else
        {
            float _1768;
            float _1770;
            float _1772;
            float _1774;
            float _1776;
            float _1778;
            float _1941 = 0.0;
            float _1942 = 0.0;
            float _1943 = 0.0;
            float _1944 = 0.0;
            float _1945 = 0.0;
            float _1946 = 0.0;
            uint _1947 = 0u;
            uint _1956;
            bool _1957;
            for (;;)
            {
                _1956 = texelFetch(g_lightClassification, int((((_1669 << 5u) + (_1655 << 9u)) + (_1947 << 2u)) >> 2u)).x;
                _1957 = _1956 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_1957)
                {
                    frontier_phi_58_pred = _1942;
                    frontier_phi_58_pred_1 = _1946;
                    frontier_phi_58_pred_2 = _1945;
                    frontier_phi_58_pred_3 = _1944;
                    frontier_phi_58_pred_4 = _1943;
                    frontier_phi_58_pred_5 = _1941;
                }
                else
                {
                    float _2116;
                    float _2117;
                    float _2118;
                    float _2119;
                    float _2120;
                    float _2121;
                    uint _2122;
                    _2116 = _1941;
                    _2117 = _1942;
                    _2118 = _1943;
                    _2119 = _1944;
                    _2120 = _1945;
                    _2121 = _1946;
                    _2122 = _1956;
                    float _2022;
                    float _2023;
                    float _2024;
                    float _2025;
                    float _2026;
                    float _2027;
                    for (;;)
                    {
                        uint _2126 = uint(findLSB(_2122)) + (_1947 << 5u);
                        uint _2123 = (_2122 + 4294967295u) & _2122;
                        uint _2128 = _2126 * 48u;
                        vec4 _2142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2128)).x, texelFetch(g_PointLightRenderingBuffer, int(_2128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2128 + 3u)).x));
                        uint _2148 = (_2126 * 48u) + 4u;
                        vec4 _2161 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2148)).x, texelFetch(g_PointLightRenderingBuffer, int(_2148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2148 + 3u)).x));
                        uint _2167 = (_2126 * 48u) + 8u;
                        vec3 _2178 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2167)).x, texelFetch(g_PointLightRenderingBuffer, int(_2167 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2167 + 2u)).x));
                        float _2182 = _2142.x - _1629;
                        float _2183 = _2142.y - _1630;
                        float _2184 = _2142.z - _1631;
                        float _2185 = dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184));
                        float _2188 = inversesqrt(_2185);
                        float _2197 = 1.0 - (_2185 * _2142.w);
                        float _3211 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
                        float _2198 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
                        float _2199 = sqrt(_2185) * _2161.w;
                        float _2202 = 1.39999997615814208984375 / (_2199 + 1.39999997615814208984375);
                        float _2203 = _2202 * _2202;
                        float _2206 = ((1.0 - _2203) * dot(vec3(0.0), vec3(_2188 * _2182, _2188 * _2183, _2188 * _2184))) + _2203;
                        float _2209 = _2199 * _2199;
                        float _2213 = ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _2198) / ((_2209 * 0.699999988079071044921875) + 1.0);
                        float _2217 = (-0.0) - _1629;
                        float _2218 = (-0.0) - _1630;
                        float _2219 = (-0.0) - _1631;
                        float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
                        float _2227 = dot(vec3(0.0), vec3(_2223 * _2217, _2223 * _2218, _2223 * _2219));
                        float _3227 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
                        float _3238 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
                        float _2231 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
                        float _2235 = (0.5 / (((isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) + 9.9999999392252902907785028219223e-09) + _2231)) * _2231;
                        float _3249 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
                        float _2244 = (((isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) * 3.1415927410125732421875) / ((_2209 * 2.1991131305694580078125) + 3.141590118408203125)) * _2198;
                        _2025 = (_2213 * _2161.x) + _2119;
                        _2026 = (_2213 * _2161.y) + _2120;
                        _2027 = (_2213 * _2161.z) + _2121;
                        _2022 = (_2244 * _2178.x) + _2116;
                        _2023 = (_2244 * _2178.y) + _2117;
                        _2024 = (_2244 * _2178.z) + _2118;
                        if (_2123 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2116 = _2022;
                            _2117 = _2023;
                            _2118 = _2024;
                            _2119 = _2025;
                            _2120 = _2026;
                            _2121 = _2027;
                            _2122 = _2123;
                        }
                    }
                    frontier_phi_58_pred = _2023;
                    frontier_phi_58_pred_1 = _2027;
                    frontier_phi_58_pred_2 = _2026;
                    frontier_phi_58_pred_3 = _2025;
                    frontier_phi_58_pred_4 = _2024;
                    frontier_phi_58_pred_5 = _2022;
                }
                _1770 = frontier_phi_58_pred;
                _1778 = frontier_phi_58_pred_1;
                _1776 = frontier_phi_58_pred_2;
                _1774 = frontier_phi_58_pred_3;
                _1772 = frontier_phi_58_pred_4;
                _1768 = frontier_phi_58_pred_5;
                uint _1948 = _1947 + 1u;
                if (_1948 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1941 = _1768;
                    _1942 = _1770;
                    _1943 = _1772;
                    _1944 = _1774;
                    _1945 = _1776;
                    _1946 = _1778;
                    _1947 = _1948;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1767 = _1768;
            _1769 = _1770;
            _1771 = _1772;
            _1773 = _1774;
            _1775 = _1776;
            _1777 = _1778;
        }
        uvec4 _1781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1782 = _1781.z;
        uint _1784 = (_1782 >> 8u) & 15u;
        float _1912;
        float _1914;
        float _1916;
        float _1918;
        float _1920;
        float _1922;
        if (((4294967295u << _1784) & _1676) == 0u)
        {
            _1912 = _1767;
            _1914 = _1769;
            _1916 = _1771;
            _1918 = _1773;
            _1920 = _1775;
            _1922 = _1777;
        }
        else
        {
            float _1937 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_1784 < ((_1782 >> 12u) & 15u))
            {
                float _1913;
                float _1915;
                float _1917;
                float _1919;
                float _1921;
                float _1923;
                float _2099 = _1767;
                float _2100 = _1769;
                float _2101 = _1771;
                float _2102 = _1773;
                float _2103 = _1775;
                float _2104 = _1777;
                uint _2105 = _1784;
                uint _2114;
                bool _2115;
                for (;;)
                {
                    _2114 = texelFetch(g_lightClassification, int((((_1669 << 5u) + (_1655 << 9u)) + (_2105 << 2u)) >> 2u)).x;
                    _2115 = _2114 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2115)
                    {
                        frontier_phi_67_pred = _2104;
                        frontier_phi_67_pred_1 = _2103;
                        frontier_phi_67_pred_2 = _2102;
                        frontier_phi_67_pred_3 = _2101;
                        frontier_phi_67_pred_4 = _2100;
                        frontier_phi_67_pred_5 = _2099;
                    }
                    else
                    {
                        float _2270;
                        float _2271;
                        float _2272;
                        float _2273;
                        float _2274;
                        float _2275;
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2283 = _2099;
                        float _2284 = _2100;
                        float _2285 = _2101;
                        float _2286 = _2102;
                        float _2287 = _2103;
                        float _2288 = _2104;
                        uint _2289 = _2114;
                        uint _2290;
                        vec4 _2315;
                        float _2316;
                        vec4 _2331;
                        vec3 _2343;
                        vec4 _2358;
                        vec4 _2374;
                        float _2420;
                        bool _2421;
                        for (;;)
                        {
                            uint _2300 = ((_2105 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2289));
                            _2290 = (_2289 + 4294967295u) & _2289;
                            uint _2302 = _2300 * 40u;
                            _2315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2302 + 3u)).x));
                            _2316 = _2315.w;
                            uint _2318 = (_2300 * 40u) + 4u;
                            _2331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 3u)).x));
                            uint _2333 = (_2300 * 40u) + 8u;
                            _2343 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2333 + 2u)).x));
                            uint _2345 = (_2300 * 40u) + 16u;
                            _2358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 3u)).x));
                            uint _2361 = (_2300 * 40u) + 20u;
                            _2374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2361 + 3u)).x));
                            uint _2376 = (_2300 * 40u) + 24u;
                            vec4 _2389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2376 + 3u)).x));
                            uint _2395 = (_2300 * 40u) + 28u;
                            vec4 _2408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 3u)).x));
                            _2420 = fma(_1631, _2408.z, fma(_1630, _2408.y, _2408.x * _1629)) + _2408.w;
                            _2421 = !((fma(_1631, _2389.z, fma(_1630, _2389.y, _2389.x * _1629)) + _2389.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2421)
                            {
                                float _2448 = _2315.x - _1629;
                                float _2449 = _2315.y - _1630;
                                float _2450 = _2315.z - _1631;
                                float _2451 = dot(vec3(_2448, _2449, _2450), vec3(_2448, _2449, _2450));
                                float _2454 = inversesqrt(_2451);
                                float _2455 = _2454 * _2448;
                                float _2456 = _2454 * _2449;
                                float _2457 = _2454 * _2450;
                                float _2461 = 1.0 - (_2451 / (_2316 * _2316));
                                float _3260 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                                float _2462 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
                                float _2466 = sqrt(_2451) * _2331.w;
                                float _2468 = 1.39999997615814208984375 / (_2466 + 1.39999997615814208984375);
                                float _2469 = _2468 * _2468;
                                float _2470 = 1.0 - _2469;
                                float _2472 = (_2470 * dot(vec3(_2455, _2456, _2457), vec3(0.0))) + _2469;
                                float _2475 = _2466 * _2466;
                                float _2479 = (fma(_1631, _2358.z, fma(_1630, _2358.y, _2358.x * _1629)) + _2358.w) / _2420;
                                float _2480 = (fma(_1631, _2374.z, fma(_1630, _2374.y, _2374.x * _1629)) + _2374.w) / _2420;
                                float _2484 = 1.0 - dot(vec2(_2479, _2480), vec2(_2479, _2480));
                                float _3276 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
                                float _2485 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
                                float _2486 = _2485 * (((isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0))) * _2462) / ((_2475 * 0.699999988079071044921875) + 1.0));
                                float _2496 = dot(vec3(0.0), vec3((-0.0) - (_1629 * _1937), (-0.0) - (_1630 * _1937), (-0.0) - (_1631 * _1937)));
                                float _3287 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
                                float _2504 = (_2470 * dot(vec3(0.0), vec3(_2455, _2456, _2457))) + _2469;
                                float _3298 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                                float _2505 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
                                float _2509 = (0.5 / (((isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0))) + 9.9999999392252902907785028219223e-09) + _2505)) * _2505;
                                float _3309 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
                                float _2516 = (_2485 * _2462) * (((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * 3.1415927410125732421875) / ((_2475 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2486 * _2331.z;
                                frontier_phi_73_pred_1 = _2486 * _2331.y;
                                frontier_phi_73_pred_2 = _2486 * _2331.x;
                                frontier_phi_73_pred_3 = _2516 * _2343.z;
                                frontier_phi_73_pred_4 = _2516 * _2343.y;
                                frontier_phi_73_pred_5 = _2516 * _2343.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2525 = frontier_phi_73_pred;
                            _2524 = frontier_phi_73_pred_1;
                            _2523 = frontier_phi_73_pred_2;
                            _2522 = frontier_phi_73_pred_3;
                            _2521 = frontier_phi_73_pred_4;
                            _2520 = frontier_phi_73_pred_5;
                            _2273 = _2523 + _2286;
                            _2274 = _2524 + _2287;
                            _2275 = _2525 + _2288;
                            _2270 = _2520 + _2283;
                            _2271 = _2521 + _2284;
                            _2272 = _2522 + _2285;
                            if (_2290 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2283 = _2270;
                                _2284 = _2271;
                                _2285 = _2272;
                                _2286 = _2273;
                                _2287 = _2274;
                                _2288 = _2275;
                                _2289 = _2290;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2275;
                        frontier_phi_67_pred_1 = _2274;
                        frontier_phi_67_pred_2 = _2273;
                        frontier_phi_67_pred_3 = _2272;
                        frontier_phi_67_pred_4 = _2271;
                        frontier_phi_67_pred_5 = _2270;
                    }
                    _1923 = frontier_phi_67_pred;
                    _1921 = frontier_phi_67_pred_1;
                    _1919 = frontier_phi_67_pred_2;
                    _1917 = frontier_phi_67_pred_3;
                    _1915 = frontier_phi_67_pred_4;
                    _1913 = frontier_phi_67_pred_5;
                    uint _2106 = _2105 + 1u;
                    if (_2106 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2099 = _1913;
                        _2100 = _1915;
                        _2101 = _1917;
                        _2102 = _1919;
                        _2103 = _1921;
                        _2104 = _1923;
                        _2105 = _2106;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1919;
                frontier_phi_49_50_ladder_1 = _1923;
                frontier_phi_49_50_ladder_2 = _1921;
                frontier_phi_49_50_ladder_3 = _1917;
                frontier_phi_49_50_ladder_4 = _1915;
                frontier_phi_49_50_ladder_5 = _1913;
            }
            else
            {
                frontier_phi_49_50_ladder = _1773;
                frontier_phi_49_50_ladder_1 = _1777;
                frontier_phi_49_50_ladder_2 = _1775;
                frontier_phi_49_50_ladder_3 = _1771;
                frontier_phi_49_50_ladder_4 = _1769;
                frontier_phi_49_50_ladder_5 = _1767;
            }
            _1912 = frontier_phi_49_50_ladder_5;
            _1914 = frontier_phi_49_50_ladder_4;
            _1916 = frontier_phi_49_50_ladder_3;
            _1918 = frontier_phi_49_50_ladder;
            _1920 = frontier_phi_49_50_ladder_2;
            _1922 = frontier_phi_49_50_ladder_1;
        }
        float _1927 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _1689 = (_1927 * _1918) + _1465;
        _1691 = (_1927 * _1920) + _1466;
        _1693 = (_1927 * _1922) + _1467;
        _1695 = ((_1912 * 0.039999999105930328369140625) * _1927) + _1570;
        _1697 = ((_1914 * 0.039999999105930328369140625) * _1927) + _1571;
        _1699 = ((_1916 * 0.039999999105930328369140625) * _1927) + _1572;
    }
    else
    {
        _1689 = _1465;
        _1691 = _1466;
        _1693 = _1467;
        _1695 = _1570;
        _1697 = _1571;
        _1699 = _1572;
    }
    float _3325 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _3336 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _3347 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _1716 = ((isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0))) * (_1689 + ((isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0))) * _450))) + ((_1695 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    float _1717 = ((isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_1691 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _450))) + ((_1697 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    float _1718 = ((isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_1693 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _450))) + ((_1699 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _1154)) * cbPerFrame._m0[3u].x);
    uint _1722 = _424 + 6u;
    float _1730 = _410 / cbSceneParam._m0[86u].x;
    float _1731 = _411 / cbSceneParam._m0[86u].y;
    vec4 _1745 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1730, _1731, (log2((isnan(cbSceneParam._m0[77u].w) ? _397 : (isnan(_397) ? cbSceneParam._m0[77u].w : min(_397, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1747 = _1745.x;
    float _1748 = _1745.y;
    float _1749 = _1745.z;
    float _1750 = _1745.w;
    float _1830;
    float _1832;
    float _1834;
    float _1836;
    if (_397 > cbSceneParam._m0[78u].w)
    {
        float _1792 = isnan(_397) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _397 : min(cbSceneParam._m0[80u].w, _397));
        float _1793 = _1792 / _397;
        float _1804 = _1793 * _248;
        float _1805 = _249 * _1793;
        float _1806 = (-0.0) - _1805;
        float _1807 = _1793 * _250;
        float _1809 = (cbSceneParam._m0[77u].w * _1806) / _1792;
        float _1810 = _1809 + cbSceneParam._m0[79u].w;
        float _1811 = cbSceneParam._m0[79u].w - _1805;
        float _1817 = sqrt(((_1804 * _1804) + (_1805 * _1805)) + (_1807 * _1807));
        float _1820 = (1.0 - (cbSceneParam._m0[77u].w / _1792)) * _1817;
        float _1826 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1828 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2035;
        if (abs((_1806 - _1809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2035 = ((((_1810 > 0.0) ? exp2(_1826 * _1810) : (2.0 - exp2(_1828 * _1810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1820;
        }
        else
        {
            float _1970 = 1.0 / cbSceneParam._m0[80u].x;
            float _1971 = isnan(_1811) ? _1810 : (isnan(_1810) ? _1811 : max(_1810, _1811));
            float _1972 = isnan(_1811) ? _1810 : (isnan(_1810) ? _1811 : min(_1810, _1811));
            float _1981 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : min(_1971, 0.0));
            float _1982 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : min(_1972, 0.0));
            _2035 = ((abs(_1817 / _1806) * cbSceneParam._m0[80u].y) * ((((_1981 - _1982) * 2.0) - ((exp2(_1826 * (isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)))) - exp2(_1826 * (isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))))) * _1970)) - ((exp2(_1828 * _1981) - exp2(_1828 * _1982)) * _1970))) + (_1820 * cbSceneParam._m0[80u].z);
        }
        vec4 _2037 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1730, _1731, 1.0), 0.0);
        float _2046 = exp2((_2035 * (-1.44269502162933349609375)) * (1.0 - _2037.w));
        float _2047 = log2(_2046);
        float _2063 = log2(_1750);
        _1830 = (exp2(_2063 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2047 * cbSceneParam._m0[78u].x)) * _2037.x) / cbSceneParam._m0[78u].x)) + _1747;
        _1832 = (exp2(_2063 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2047 * cbSceneParam._m0[78u].y)) * _2037.y) / cbSceneParam._m0[78u].y)) + _1748;
        _1834 = (exp2(_2063 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2047 * cbSceneParam._m0[78u].z)) * _2037.z) / cbSceneParam._m0[78u].z)) + _1749;
        _1836 = _2046 * _1750;
    }
    else
    {
        _1830 = _1747;
        _1832 = _1748;
        _1834 = _1749;
        _1836 = _1750;
    }
    float _1848 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1849 = _1848 == 3.0;
    float _1851 = log2(_1836);
    float _1858 = exp2(_1851 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
    float _1859 = exp2(_1851 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)));
    float _1860 = exp2(_1851 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
    float _1869 = (_1848 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1869 * (_1849 ? _1858 : (_1858 + (cbSceneParam._m0[72u].w * _1830)));
    SV_Target.y = _1869 * (_1849 ? _1859 : (_1859 + (cbSceneParam._m0[72u].w * _1832)));
    SV_Target.z = _1869 * (_1849 ? _1860 : (_1860 + (cbSceneParam._m0[72u].w * _1834)));
    SV_Target.w = cbInstanceData._m0[_1722].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1722].w;
}


