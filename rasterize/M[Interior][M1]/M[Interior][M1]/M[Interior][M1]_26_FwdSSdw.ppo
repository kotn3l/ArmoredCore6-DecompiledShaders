#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1297;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _395 = (_391 * _385) + (_359 * cbMtdParam._m0[20u].y);
    float _396 = (_391 * _386) + (_360 * cbMtdParam._m0[20u].z);
    float _397 = _395 * cbMtdParam._m0[19u].x;
    float _398 = _396 * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    bool _416 = _394 > 0.0;
    float _418 = _416 ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = _399 + (-0.5);
    float _428 = _400 + (-0.5);
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_425 + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_428 + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _472 = (_458 - (_458 * _292)) * cbMtdParam._m0[9u].x;
    float _473 = (_459 - (_459 * _292)) * cbMtdParam._m0[9u].y;
    float _474 = cbMtdParam._m0[9u].z * (_460 - (_460 * _292));
    float _492 = _395 * cbMtdParam._m0[21u].x;
    float _493 = _396 * cbMtdParam._m0[20u].w;
    bool _494 = _492 > 0.0;
    float _499;
    if (_494)
    {
        _499 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _499 = frontier_phi_11_10_ladder;
    }
    bool _501 = _493 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _506 = frontier_phi_15_14_ladder;
    }
    float _509 = _416 ? (cbMtdParam._m0[16u].z / _394) : 5000.0;
    float _510 = isnan(_506) ? _499 : (isnan(_499) ? _506 : min(_499, _506));
    float _511 = isnan(_509) ? _510 : (isnan(_510) ? _509 : min(_510, _509));
    float _515 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _519 = ((_511 * _394) + _515) / _515;
    float _524 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _526 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _542 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_511 * _492)) / _519) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_511 * _493)) / _519) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _547 = _542.x * cbMtdParam._m0[10u].x;
    float _548 = _542.y * cbMtdParam._m0[10u].y;
    float _549 = _542.z * cbMtdParam._m0[10u].z;
    float _557;
    if (_494)
    {
        _557 = (1.0 - _399) / _492;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_492 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _399) / _492;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _557 = frontier_phi_19_18_ladder;
    }
    float _563;
    if (_501)
    {
        _563 = (1.0 - _400) / _493;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_493 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _400) / _493;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _563 = frontier_phi_23_22_ladder;
    }
    float _565 = isnan(_563) ? _557 : (isnan(_557) ? _563 : min(_557, _563));
    float _566 = isnan(_509) ? _565 : (isnan(_565) ? _509 : min(_565, _509));
    float _573 = ((_566 * _394) + _515) / _515;
    vec4 _587 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_425 + (_566 * _492)) / _573) + 0.5) + _524) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_428 + (_566 * _493)) / _573) + 0.5) + _526) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _589 = _587.w;
    float _591 = _589 - (_589 * _292);
    float _601 = (_591 * ((_547 - _472) - (_547 * _292))) + _472;
    float _602 = (_591 * ((_548 - _473) - (_548 * _292))) + _473;
    float _603 = (_591 * ((_549 - _474) - (_549 * _292))) + _474;
    float _617 = _395 * cbMtdParam._m0[21u].z;
    float _618 = _396 * cbMtdParam._m0[21u].y;
    bool _619 = _617 > 0.0;
    float _624;
    if (_619)
    {
        _624 = (1.0 - _399) / _617;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_617 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _399) / _617;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _624 = frontier_phi_27_26_ladder;
    }
    bool _626 = _618 > 0.0;
    float _631;
    if (_626)
    {
        _631 = (1.0 - _400) / _618;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_618 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _400) / _618;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _631 = frontier_phi_31_30_ladder;
    }
    float _634 = _416 ? (cbMtdParam._m0[18u].x / _394) : 5000.0;
    float _635 = isnan(_631) ? _624 : (isnan(_624) ? _631 : min(_624, _631));
    float _636 = isnan(_634) ? _635 : (isnan(_635) ? _634 : min(_635, _634));
    float _640 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _644 = ((_636 * _394) + _640) / _640;
    float _649 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _651 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _668 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_425 + (_636 * _617)) / _644) + 0.5) + _649) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_428 + (_636 * _618)) / _644) + 0.5) + _651) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _673 = _668.x * cbMtdParam._m0[14u].x;
    float _674 = _668.y * cbMtdParam._m0[14u].y;
    float _675 = _668.z * cbMtdParam._m0[14u].z;
    float _683;
    if (_619)
    {
        _683 = (1.0 - _399) / _617;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_617 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _399) / _617;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _683 = frontier_phi_35_34_ladder;
    }
    float _689;
    if (_626)
    {
        _689 = (1.0 - _400) / _618;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_618 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _400) / _618;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _689 = frontier_phi_39_38_ladder;
    }
    float _691 = isnan(_689) ? _683 : (isnan(_683) ? _689 : min(_683, _689));
    float _692 = isnan(_634) ? _691 : (isnan(_691) ? _634 : min(_691, _634));
    float _699 = ((_692 * _394) + _640) / _640;
    vec4 _713 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_425 + (_692 * _617)) / _699) + 0.5) + _649) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_428 + (_692 * _618)) / _699) + 0.5) + _651) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _715 = _713.w;
    float _717 = _715 - (_715 * _292);
    float _728 = 0.5 - (_292 * 0.5);
    float _738 = (((_601 - _305) + (_717 * ((_673 - _601) - (_673 * _292)))) * _728) + _305;
    float _739 = (((_602 - _307) + (_717 * ((_674 - _602) - (_674 * _292)))) * _728) + _307;
    float _740 = (((_603 - _309) + (_717 * ((_675 - _603) - (_675 * _292)))) * _728) + _309;
    vec4 _752 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _754 = _752.x;
    vec4 _766 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _770 = _766.z;
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3488 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))));
    float _781 = _770 * _292;
    float _788 = (cbMtdParam._m0[15u].w * ((_331 - _781) + ((_770 - _331) * _292))) + _781;
    float _792 = (cbMtdParam._m0[16u].x * _359) + _773;
    float _793 = (cbMtdParam._m0[16u].x * _360) + _774;
    float _796 = fma(_780, _201, fma(_793, _208, _792 * _194));
    float _799 = fma(_780, _202, fma(_793, _209, _792 * _195));
    float _802 = fma(_780, _203, fma(_793, _210, _792 * _196));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _3499 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _810 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3521 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3532 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3543 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _814 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _834 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _835 = _265 * _834;
    float _836 = _266 * _834;
    float _837 = _267 * _834;
    float _843 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _844 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _866 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _869 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _882 = uint(roundEven(NORMAL.w)) * 13u;
    uint _885 = (_882 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _891 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_885].x;
    float _892 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_885].y;
    float _893 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0)))) * cbInstanceData._m0[_885].z;
    float _3554 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    float _897 = 1.0 - _814;
    float _898 = _894 * _897;
    float _899 = _895 * _897;
    float _900 = _896 * _897;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _814;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _814;
    float _907 = (_896 + (-0.039999999105930328369140625)) * _814;
    float _908 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    float _911 = _907 + 0.039999999105930328369140625;
    vec4 _920 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _843, cbSceneParam._m0[86u].y * _844));
    float _923 = _920.x * TEXCOORD.z;
    float _924 = dot(vec3(_807, _808, _809), vec3(_835, _836, _837));
    float _927 = _924 * 2.0;
    float _931 = (_927 * _807) - _835;
    float _932 = (_927 * _808) - _836;
    float _933 = (_927 * _809) - _837;
    float _937 = abs(dot(vec3(_835, _836, _837), vec3(_807, _808, _809)));
    float _3587 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _939 = sqrt(_810);
    float _952 = exp2((_939 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_939 * 3.0));
    float _958 = (1.0 - _952) * ((_939 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _959 = _952 * _939;
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1023 = fma(_995, cbModelParam._m0[26u].z, fma(_991, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987));
        float _1027 = fma(_995, cbModelParam._m0[27u].z, fma(_991, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987));
        float _1031 = fma(_995, cbModelParam._m0[28u].z, fma(_991, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987));
        float _1054 = _987 + _807;
        float _1055 = _991 + _808;
        float _1056 = _995 + _809;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1023;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1027;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1031;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1023 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1027 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1031 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_807, _808, _809), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _3635 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_807, _808, _809), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3668 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_807, _808, _809), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3701 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_995, cbModelParam._m0[30u].z, fma(_991, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _987));
        float _1341 = fma(_995, cbModelParam._m0[31u].z, fma(_991, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _987));
        float _1345 = fma(_995, cbModelParam._m0[32u].z, fma(_991, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _987));
        float _1368 = _987 + _807;
        float _1369 = _991 + _808;
        float _1370 = _995 + _809;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_807, _808, _809), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _3764 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_807, _808, _809), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _3797 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_807, _808, _809), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _3830 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1297;
        _1607 = _1297;
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1309)) + _1309;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1310)) + _1310;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _931 * 0.5;
    float _1675 = _932 * 0.5;
    float _1676 = _933 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_995, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_995, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_995, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_933, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _931));
        float _1804 = fma(_933, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _931));
        float _1807 = fma(_933, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _931));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1835 = frontier_phi_54_52_ladder;
        }
        float _2217;
        if (_1804 > 0.0)
        {
            _2217 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2217 = frontier_phi_63_59_ladder;
        }
        float _2517;
        if (_1807 > 0.0)
        {
            _2517 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2517 = frontier_phi_77_70_ladder;
        }
        float _2519 = isnan(_2217) ? _1835 : (isnan(_1835) ? _2217 : min(_1835, _2217));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1801) + _1790;
        float _2525 = (_2520 * _1804) + _1794;
        float _2526 = (_2520 * _1807) + _1798;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2526, cbModelParam._m0[9u].z, fma(_2525, cbModelParam._m0[9u].y, _2524 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2526, cbModelParam._m0[10u].z, fma(_2525, cbModelParam._m0[10u].y, _2524 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2526, cbModelParam._m0[11u].z, fma(_2525, cbModelParam._m0[11u].y, _2524 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_53_77_ladder = _2652.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2652.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2652.z * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_53_77_ladder;
        _1825 = frontier_phi_53_77_ladder_1;
        _1827 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_931, _932, _933), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_995, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_995, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_995, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_933, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _931));
        float _1898 = fma(_933, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _931));
        float _1901 = fma(_933, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _931));
        float _2222;
        if (_1895 > 0.0)
        {
            _2222 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2222 = frontier_phi_65_61_ladder;
        }
        float _2543;
        if (_1898 > 0.0)
        {
            _2543 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2543 = frontier_phi_79_72_ladder;
        }
        float _2712;
        if (_1901 > 0.0)
        {
            _2712 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2712 = frontier_phi_93_88_ladder;
        }
        float _2714 = isnan(_2543) ? _2222 : (isnan(_2222) ? _2543 : min(_2222, _2543));
        float _2715 = isnan(_2712) ? _2714 : (isnan(_2714) ? _2712 : min(_2714, _2712));
        float _2719 = (_2715 * _1895) + _1884;
        float _2720 = (_2715 * _1898) + _1888;
        float _2721 = (_2715 * _1901) + _1892;
        float _2722 = _2715 * 9.9999997473787516355514526367188e-05;
        float _2723 = (-1.0) - _2722;
        float _2725 = _2722 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2721 > _2725) || ((_2721 < _2723) || ((_2720 > _2725) || ((_2720 < _2723) || ((_2719 < _2723) || (_2719 > _2725))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2721, cbModelParam._m0[17u].z, fma(_2720, cbModelParam._m0[17u].y, _2719 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2721, cbModelParam._m0[18u].z, fma(_2720, cbModelParam._m0[18u].y, _2719 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2721, cbModelParam._m0[19u].z, fma(_2720, cbModelParam._m0[19u].y, _2719 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_62_93_ladder = _2954.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2954.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2954.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_62_93_ladder_2;
        _1922 = frontier_phi_62_93_ladder_1;
        _1924 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_931, _932, _933), _1832);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1937 = (((_958 * _908) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1920 - _1823)) + _1823);
    float _1939 = (((_958 * _910) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1922 - _1825)) + _1825);
    float _1941 = (((_958 * _911) + _959) * _923) * ((cbModelParam._m0[1u].w * (_1924 - _1827)) + _1827);
    float _1944 = fma(_1941, cbSceneParam._m0[89u].z, fma(_1939, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1947 = fma(_1941, cbSceneParam._m0[90u].z, fma(_1939, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1950 = fma(_1941, cbSceneParam._m0[91u].z, fma(_1939, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    vec4 _1958 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_843, _844));
    float _1960 = _1958.w;
    float _1972 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1960);
    float _1973 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1960);
    float _1974 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1960);
    uvec4 _1978 = floatBitsToUint(cbInstanceData._m0[_882 + 5u]);
    uint _1980 = _1978.x * 14u;
    uint _1981 = _1980 + 13u;
    float _1986 = _923 + (-1.0);
    float _1989 = (cbLight._m0[_1981].x * _1986) + 1.0;
    float _1990 = (cbLight._m0[_1981].y * _1986) + 1.0;
    uint _1991 = _1980 + 5u;
    float _1997 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2001 = _1980 + 4u;
    float _2010 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2014 = _1980 | 1u;
    float _2025 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_807, _808, _809));
    float _2028 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_807, _808, _809));
    float _3966 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _3977 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2033 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
    float _2035 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
    float _2042 = ((cbLight._m0[_1991].x * _1997) * _2035) + (((cbLight._m0[_2001].x * _1972) * _2010) * _2033);
    float _2043 = ((_1997 * cbLight._m0[_1991].y) * _2035) + (((cbLight._m0[_2001].y * _1973) * _2010) * _2033);
    float _2044 = ((_1997 * cbLight._m0[_1991].z) * _2035) + (((cbLight._m0[_2001].z * _1974) * _2010) * _2033);
    uint _2046 = _1980 + 8u;
    float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1980].w)) * _810) * 0.949999988079071044921875);
    float _2060 = _2059 * _2059;
    float _2061 = cbLight._m0[_1980].x + _835;
    float _2062 = cbLight._m0[_1980].y + _836;
    float _2063 = cbLight._m0[_1980].z + _837;
    float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
    float _2068 = _2067 * _2061;
    float _2069 = _2067 * _2062;
    float _2070 = _2067 * _2063;
    float _2071 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_1980].xyz));
    float _3988 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _2075 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _2076 = dot(vec3(_807, _808, _809), vec3(_2068, _2069, _2070));
    float _4010 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _2080 = dot(vec3(cbLight._m0[_1980].xyz), vec3(_2068, _2069, _2070));
    float _4021 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2084 = _2060 * _2060;
    float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
    float _2096 = exp2(log2(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * 5.0);
    float _2097 = 0.959999978542327880859375 - _905;
    float _2099 = 0.959999978542327880859375 - _906;
    float _2100 = 0.959999978542327880859375 - _907;
    float _2107 = 1.0 - _2060;
    float _2118 = (0.5 / (((_2075 * ((_2074 * _2107) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2107) + _2060) * _2074))) * _2074;
    float _4032 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
    uint _2134 = _1980 + 9u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2014].w)) * _810) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_2014].x + _835;
    float _2148 = cbLight._m0[_2014].y + _836;
    float _2149 = cbLight._m0[_2014].z + _837;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2014].xyz));
    float _4043 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _2161 = dot(vec3(_807, _808, _809), vec3(_2154, _2155, _2156));
    float _4054 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_2014].xyz), vec3(_2154, _2155, _2156));
    float _4065 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2146 * _2146;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2180 = exp2(log2(1.0 - (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * 5.0);
    float _2187 = 1.0 - _2146;
    float _2197 = (0.5 / (((_2075 * ((_2160 * _2187) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2075 * _2187) + _2146) * _2160))) * _2160;
    float _4076 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    float _2209 = (((((_2180 * _2097) + _908) * cbLight._m0[_2134].x) * _2199) * _1997) + ((((cbLight._m0[_2046].x * _1972) * ((_2096 * _2097) + _908)) * _2120) * _2010);
    float _2210 = (((((_2180 * _2099) + _910) * cbLight._m0[_2134].y) * _2199) * _1997) + ((((cbLight._m0[_2046].y * _1973) * ((_2096 * _2099) + _910)) * _2120) * _2010);
    float _2211 = (((((_2180 * _2100) + _911) * cbLight._m0[_2134].z) * _2199) * _1997) + ((((cbLight._m0[_2046].z * _1974) * ((_2096 * _2100) + _911)) * _2120) * _2010);
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_1978.y == 0u)
    {
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2266;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2266;
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2266;
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _844) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _843) / _2282)));
        float _2303 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        float _2412;
        float _2414;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
            _2412 = 0.0;
            _2414 = 0.0;
        }
        else
        {
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2413;
            float _2415;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            uint _2586 = 0u;
            uint _2595;
            bool _2596;
            for (;;)
            {
                _2595 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                _2596 = _2595 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2596)
                {
                    frontier_phi_90_pred = _2585;
                    frontier_phi_90_pred_1 = _2580;
                    frontier_phi_90_pred_2 = _2581;
                    frontier_phi_90_pred_3 = _2582;
                    frontier_phi_90_pred_4 = _2583;
                    frontier_phi_90_pred_5 = _2584;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2580;
                    _2756 = _2581;
                    _2757 = _2582;
                    _2758 = _2583;
                    _2759 = _2584;
                    _2760 = _2585;
                    _2761 = _2595;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2586 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        float _2821 = _2781.x - _2267;
                        float _2822 = _2781.y - _2268;
                        float _2823 = _2781.z - _2269;
                        float _2824 = dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823));
                        float _2827 = inversesqrt(_2824);
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2831 = dot(vec3(_863, _866, _869), vec3(_2828, _2829, _2830));
                        float _2836 = 1.0 - (_2824 * _2781.w);
                        float _4097 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2837 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                        float _2838 = sqrt(_2824) * _2800.w;
                        float _2841 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                        float _2842 = _2841 * _2841;
                        float _2845 = ((1.0 - _2842) * _2831) + _2842;
                        float _2848 = _2838 * _2838;
                        float _2852 = ((isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))) * _2837) / ((_2848 * 0.699999988079071044921875) + 1.0);
                        float _2856 = (-0.0) - _2267;
                        float _2857 = (-0.0) - _2268;
                        float _2858 = (-0.0) - _2269;
                        float _2862 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
                        float _2863 = _2862 * _2856;
                        float _2864 = _2862 * _2857;
                        float _2865 = _2862 * _2858;
                        float _2873 = exp2(log2(1.0 / ((_2848 * 3.5) + 5.0)) * 0.25);
                        float _2874 = 1.0 - _939;
                        float _2881 = sqrt(1.0 - ((1.0 - (_2874 * _2874)) * (1.0 - (_2873 * _2873))));
                        float _2882 = _2881 * _2881;
                        float _2883 = _2882 * _2882;
                        float _2884 = _2863 + _2828;
                        float _2885 = _2864 + _2829;
                        float _2886 = _2865 + _2830;
                        float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
                        float _2894 = dot(vec3(_863, _866, _869), vec3(_2863, _2864, _2865));
                        float _4113 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
                        float _2897 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2898 = dot(vec3(_863, _866, _869), vec3(_2890 * _2884, _2890 * _2885, _2890 * _2886));
                        float _4124 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2901 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2905 = ((_2901 * _2901) * (_2883 + (-1.0))) + 1.0;
                        float _2906 = _2841 * _2882;
                        float _2907 = _2906 * _2906;
                        float _2910 = ((1.0 - _2907) * _2831) + _2907;
                        float _4135 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                        float _2911 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2912 = 1.0 - _2882;
                        float _2922 = (0.5 / (((_2911 * ((_2897 * _2912) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2911 * _2912) + _2882) * _2897))) * _2911;
                        float _4146 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2933 = (((_2883 * 3.1415927410125732421875) * (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) / ((_2905 * _2905) * ((_2848 * 2.1991131305694580078125) + 3.141590118408203125))) * _2837;
                        _2664 = (_2852 * _2800.x) + _2758;
                        _2665 = (_2852 * _2800.y) + _2759;
                        _2666 = (_2852 * _2800.z) + _2760;
                        _2661 = (_2933 * _2817.x) + _2755;
                        _2662 = (_2933 * _2817.y) + _2756;
                        _2663 = (_2933 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2661;
                            _2756 = _2662;
                            _2757 = _2663;
                            _2758 = _2664;
                            _2759 = _2665;
                            _2760 = _2666;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_90_pred = _2666;
                    frontier_phi_90_pred_1 = _2661;
                    frontier_phi_90_pred_2 = _2662;
                    frontier_phi_90_pred_3 = _2663;
                    frontier_phi_90_pred_4 = _2664;
                    frontier_phi_90_pred_5 = _2665;
                }
                _2415 = frontier_phi_90_pred;
                _2405 = frontier_phi_90_pred_1;
                _2407 = frontier_phi_90_pred_2;
                _2409 = frontier_phi_90_pred_3;
                _2411 = frontier_phi_90_pred_4;
                _2413 = frontier_phi_90_pred_5;
                uint _2587 = _2586 + 1u;
                if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2580 = _2405;
                    _2581 = _2407;
                    _2582 = _2409;
                    _2583 = _2411;
                    _2584 = _2413;
                    _2585 = _2415;
                    _2586 = _2587;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
            _2412 = _2413;
            _2414 = _2415;
        }
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.z;
        uint _2421 = (_2419 >> 8u) & 15u;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        if (((4294967295u << _2421) & _2313) == 0u)
        {
            _2548 = _2404;
            _2550 = _2406;
            _2552 = _2408;
            _2554 = _2410;
            _2556 = _2412;
            _2558 = _2414;
        }
        else
        {
            float _2573 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _2574 = _2573 * _2267;
            float _2575 = _2573 * _2268;
            float _2576 = _2573 * _2269;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2421 < ((_2419 >> 12u) & 15u))
            {
                float _2549;
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2738 = _2404;
                float _2739 = _2406;
                float _2740 = _2408;
                float _2741 = _2410;
                float _2742 = _2412;
                float _2743 = _2414;
                uint _2744 = _2421;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2754)
                    {
                        frontier_phi_99_pred = _2741;
                        frontier_phi_99_pred_1 = _2740;
                        frontier_phi_99_pred_2 = _2739;
                        frontier_phi_99_pred_3 = _2738;
                        frontier_phi_99_pred_4 = _2743;
                        frontier_phi_99_pred_5 = _2742;
                    }
                    else
                    {
                        float _2959;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _2972 = _2738;
                        float _2973 = _2739;
                        float _2974 = _2740;
                        float _2975 = _2741;
                        float _2976 = _2742;
                        float _2977 = _2743;
                        uint _2978 = _2753;
                        uint _2979;
                        vec4 _3004;
                        float _3005;
                        vec4 _3020;
                        vec3 _3032;
                        vec4 _3047;
                        vec4 _3062;
                        float _3108;
                        bool _3109;
                        for (;;)
                        {
                            uint _2989 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2978));
                            _2979 = (_2978 + 4294967295u) & _2978;
                            uint _2991 = _2989 * 40u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            _3005 = _3004.w;
                            uint _3007 = (_2989 * 40u) + 4u;
                            _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            uint _3022 = (_2989 * 40u) + 8u;
                            _3032 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x));
                            uint _3034 = (_2989 * 40u) + 16u;
                            _3047 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 3u)).x));
                            uint _3049 = (_2989 * 40u) + 20u;
                            _3062 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3049)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3049 + 3u)).x));
                            uint _3064 = (_2989 * 40u) + 24u;
                            vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3083 = (_2989 * 40u) + 28u;
                            vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            _3108 = fma(_2269, _3096.z, fma(_2268, _3096.y, _3096.x * _2267)) + _3096.w;
                            _3109 = !((fma(_2269, _3077.z, fma(_2268, _3077.y, _3077.x * _2267)) + _3077.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3109)
                            {
                                float _3136 = _3004.x - _2267;
                                float _3137 = _3004.y - _2268;
                                float _3138 = _3004.z - _2269;
                                float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                                float _3142 = inversesqrt(_3139);
                                float _3143 = _3142 * _3136;
                                float _3144 = _3142 * _3137;
                                float _3145 = _3142 * _3138;
                                float _3149 = 1.0 - (_3139 / (_3005 * _3005));
                                float _4157 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
                                float _3154 = sqrt(_3139) * _3020.w;
                                float _3156 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                                float _3157 = _3156 * _3156;
                                float _3160 = ((1.0 - _3157) * dot(vec3(_3143, _3144, _3145), vec3(_863, _866, _869))) + _3157;
                                float _3163 = _3154 * _3154;
                                float _3167 = (fma(_2269, _3047.z, fma(_2268, _3047.y, _3047.x * _2267)) + _3047.w) / _3108;
                                float _3168 = (fma(_2269, _3062.z, fma(_2268, _3062.y, _3062.x * _2267)) + _3062.w) / _3108;
                                float _3172 = 1.0 - dot(vec2(_3167, _3168), vec2(_3167, _3168));
                                float _4173 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3174 = _3173 * (((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3150) / ((_3163 * 0.699999988079071044921875) + 1.0));
                                float _3186 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                                float _3187 = 1.0 - _939;
                                float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                                float _3195 = _3194 * _3194;
                                float _3196 = _3195 * _3195;
                                float _3197 = _3143 - _2574;
                                float _3198 = _3144 - _2575;
                                float _3199 = _3145 - _2576;
                                float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                                float _3207 = dot(vec3(_863, _866, _869), vec3((-0.0) - _2574, (-0.0) - _2575, (-0.0) - _2576));
                                float _4184 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3210 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3211 = dot(vec3(_863, _866, _869), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                                float _4195 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                                float _3214 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                                float _3219 = _3156 * _3195;
                                float _3220 = _3219 * _3219;
                                float _3226 = ((1.0 - _3220) * dot(vec3(_863, _866, _869), vec3(_3143, _3144, _3145))) + _3220;
                                float _4206 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3228 = 1.0 - _3195;
                                float _3238 = (0.5 / (((_3227 * ((_3210 * _3228) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3195) * _3210))) * _3227;
                                float _4217 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3248 = (_3173 * _3150) * (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) / ((_3218 * _3218) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3174 * _3020.z;
                                frontier_phi_105_pred_1 = _3248 * _3032.x;
                                frontier_phi_105_pred_2 = _3248 * _3032.y;
                                frontier_phi_105_pred_3 = _3248 * _3032.z;
                                frontier_phi_105_pred_4 = _3174 * _3020.x;
                                frontier_phi_105_pred_5 = _3174 * _3020.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3257 = frontier_phi_105_pred;
                            _3252 = frontier_phi_105_pred_1;
                            _3253 = frontier_phi_105_pred_2;
                            _3254 = frontier_phi_105_pred_3;
                            _3255 = frontier_phi_105_pred_4;
                            _3256 = frontier_phi_105_pred_5;
                            _2962 = _3255 + _2975;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            _2959 = _3252 + _2972;
                            _2960 = _3253 + _2973;
                            _2961 = _3254 + _2974;
                            if (_2979 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2972 = _2959;
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2979;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2962;
                        frontier_phi_99_pred_1 = _2961;
                        frontier_phi_99_pred_2 = _2960;
                        frontier_phi_99_pred_3 = _2959;
                        frontier_phi_99_pred_4 = _2964;
                        frontier_phi_99_pred_5 = _2963;
                    }
                    _2555 = frontier_phi_99_pred;
                    _2553 = frontier_phi_99_pred_1;
                    _2551 = frontier_phi_99_pred_2;
                    _2549 = frontier_phi_99_pred_3;
                    _2559 = frontier_phi_99_pred_4;
                    _2557 = frontier_phi_99_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2549;
                        _2739 = _2551;
                        _2740 = _2553;
                        _2741 = _2555;
                        _2742 = _2557;
                        _2743 = _2559;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2559;
                frontier_phi_81_82_ladder_1 = _2555;
                frontier_phi_81_82_ladder_2 = _2553;
                frontier_phi_81_82_ladder_3 = _2551;
                frontier_phi_81_82_ladder_4 = _2549;
                frontier_phi_81_82_ladder_5 = _2557;
            }
            else
            {
                frontier_phi_81_82_ladder = _2414;
                frontier_phi_81_82_ladder_1 = _2410;
                frontier_phi_81_82_ladder_2 = _2408;
                frontier_phi_81_82_ladder_3 = _2406;
                frontier_phi_81_82_ladder_4 = _2404;
                frontier_phi_81_82_ladder_5 = _2412;
            }
            _2548 = frontier_phi_81_82_ladder_4;
            _2550 = frontier_phi_81_82_ladder_3;
            _2552 = frontier_phi_81_82_ladder_2;
            _2554 = frontier_phi_81_82_ladder_1;
            _2556 = frontier_phi_81_82_ladder_5;
            _2558 = frontier_phi_81_82_ladder;
        }
        float _2563 = isnan(1.0) ? _923 : (isnan(_923) ? 1.0 : min(_923, 1.0));
        _2326 = (_2563 * _2554) + _2042;
        _2328 = (_2563 * _2556) + _2043;
        _2330 = (_2563 * _2558) + _2044;
        _2332 = ((_2548 * _908) * _2563) + _2209;
        _2334 = ((_2550 * _910) * _2563) + _2210;
        _2336 = ((_2552 * _911) * _2563) + _2211;
    }
    else
    {
        _2326 = _2042;
        _2328 = _2043;
        _2330 = _2044;
        _2332 = _2209;
        _2334 = _2210;
        _2336 = _2211;
    }
    float _4233 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4244 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _4255 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2353 = ((isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2326 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _923))) + ((_2332 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2354 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2328 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _923))) + ((_2334 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2355 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2330 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _923))) + ((_2336 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    uint _2359 = _882 + 6u;
    float _2367 = _843 / cbSceneParam._m0[86u].x;
    float _2368 = _844 / cbSceneParam._m0[86u].y;
    vec4 _2382 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2384 = _2382.x;
    float _2385 = _2382.y;
    float _2386 = _2382.z;
    float _2387 = _2382.w;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _2429 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _2430 = _2429 / _830;
        float _2441 = _2430 * _265;
        float _2442 = _266 * _2430;
        float _2443 = (-0.0) - _2442;
        float _2444 = _2430 * _267;
        float _2446 = (cbSceneParam._m0[77u].w * _2443) / _2429;
        float _2447 = _2446 + cbSceneParam._m0[79u].w;
        float _2448 = cbSceneParam._m0[79u].w - _2442;
        float _2454 = sqrt(((_2441 * _2441) + (_2442 * _2442)) + (_2444 * _2444));
        float _2457 = (1.0 - (cbSceneParam._m0[77u].w / _2429)) * _2454;
        float _2463 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2465 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2674;
        if (abs((_2443 - _2446) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2674 = ((((_2447 > 0.0) ? exp2(_2463 * _2447) : (2.0 - exp2(_2465 * _2447))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2457;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : max(_2447, _2448));
            float _2611 = isnan(_2448) ? _2447 : (isnan(_2447) ? _2448 : min(_2447, _2448));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2674 = ((abs(_2454 / _2443) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2463 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2463 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2465 * _2620) - exp2(_2465 * _2621)) * _2609))) + (_2457 * cbSceneParam._m0[80u].z);
        }
        vec4 _2676 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2367, _2368, 1.0), 0.0);
        float _2685 = exp2((_2674 * (-1.44269502162933349609375)) * (1.0 - _2676.w));
        float _2686 = log2(_2685);
        float _2702 = log2(_2387);
        _2467 = (exp2(_2702 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].x)) * _2676.x) / cbSceneParam._m0[78u].x)) + _2384;
        _2469 = (exp2(_2702 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].y)) * _2676.y) / cbSceneParam._m0[78u].y)) + _2385;
        _2471 = (exp2(_2702 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2686 * cbSceneParam._m0[78u].z)) * _2676.z) / cbSceneParam._m0[78u].z)) + _2386;
        _2473 = _2685 * _2387;
    }
    else
    {
        _2467 = _2384;
        _2469 = _2385;
        _2471 = _2386;
        _2473 = _2387;
    }
    float _2485 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2486 = _2485 == 3.0;
    float _2487 = log2(_2473);
    float _2494 = exp2(_2487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0)));
    float _2495 = exp2(_2487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0)));
    float _2496 = exp2(_2487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0)));
    float _2505 = (_2485 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2505 * (_2486 ? _2494 : (_2494 + (cbSceneParam._m0[72u].w * _2467)));
    SV_Target.y = _2505 * (_2486 ? _2495 : (_2495 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.z = _2505 * (_2486 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.w = cbInstanceData._m0[_2359].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2359].w;
}


