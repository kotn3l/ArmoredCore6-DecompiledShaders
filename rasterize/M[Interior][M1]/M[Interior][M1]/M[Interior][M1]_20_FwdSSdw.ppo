#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1028;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _393 = ((_387 * _381) + (_355 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _394 = ((_387 * _382) + (_356 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    float _414 = (_390 > 0.0) ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_395 + (-0.5)) + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_396 + (-0.5)) + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    vec4 _482 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _484 = _482.x;
    vec4 _496 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _500 = _496.z;
    float _503 = (_496.x * 2.0) + (-1.0);
    float _504 = (_496.y * 2.0) + (-1.0);
    float _505 = dot(vec2(_503, _504), vec2(_503, _504));
    float _3149 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _510 = sqrt(1.0 - (isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0))));
    float _511 = _500 * _288;
    float _518 = (cbMtdParam._m0[15u].w * ((_327 - _511) + ((_500 - _327) * _288))) + _511;
    float _522 = (cbMtdParam._m0[16u].x * _355) + _503;
    float _523 = (cbMtdParam._m0[16u].x * _356) + _504;
    float _526 = fma(_510, _197, fma(_523, _204, _522 * _190));
    float _529 = fma(_510, _198, fma(_523, _205, _522 * _191));
    float _532 = fma(_510, _199, fma(_523, _206, _522 * _192));
    float _536 = inversesqrt(dot(vec3(_526, _529, _532), vec3(_526, _529, _532)));
    float _537 = _536 * _526;
    float _538 = _536 * _529;
    float _539 = _536 * _532;
    float _3160 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _540 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
    float _3171 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3182 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3193 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3204 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _544 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _565 = _261 * _564;
    float _566 = _262 * _564;
    float _567 = _263 * _564;
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _594 = fma(_539, cbSceneParam._m0[5u].z, fma(_538, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _537));
    float _597 = fma(_539, cbSceneParam._m0[6u].z, fma(_538, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _537));
    float _600 = fma(_539, cbSceneParam._m0[7u].z, fma(_538, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _537));
    uint _613 = uint(roundEven(NORMAL.w)) * 13u;
    uint _615 = _613 + 9u;
    uint _616 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _622 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0)))) * cbInstanceData._m0[_616].x;
    float _623 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0)))) * cbInstanceData._m0[_616].y;
    float _624 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0)))) * cbInstanceData._m0[_616].z;
    float _3215 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    float _3226 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    float _3237 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
    float _628 = 1.0 - _544;
    float _629 = _625 * _628;
    float _630 = _626 * _628;
    float _631 = _627 * _628;
    float _636 = (_625 + (-0.039999999105930328369140625)) * _544;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _544;
    float _638 = (_627 + (-0.039999999105930328369140625)) * _544;
    float _639 = _636 + 0.039999999105930328369140625;
    float _641 = _637 + 0.039999999105930328369140625;
    float _642 = _638 + 0.039999999105930328369140625;
    vec4 _651 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _573, cbSceneParam._m0[86u].y * _574));
    float _654 = _651.x * TEXCOORD.z;
    float _655 = dot(vec3(_537, _538, _539), vec3(_565, _566, _567));
    float _658 = _655 * 2.0;
    float _662 = (_658 * _537) - _565;
    float _663 = (_658 * _538) - _566;
    float _664 = (_658 * _539) - _567;
    float _668 = abs(dot(vec3(_565, _566, _567), vec3(_537, _538, _539)));
    float _3248 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = sqrt(_540);
    float _683 = exp2((_670 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_670 * 3.0));
    float _689 = (1.0 - _683) * ((_670 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _690 = _683 * _670;
    float _718 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _722 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _726 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1027;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _754 = fma(_726, cbModelParam._m0[26u].z, fma(_722, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _718));
        float _758 = fma(_726, cbModelParam._m0[27u].z, fma(_722, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _718));
        float _762 = fma(_726, cbModelParam._m0[28u].z, fma(_722, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _718));
        float _785 = _718 + _537;
        float _786 = _722 + _538;
        float _787 = _726 + _539;
        float _797 = fma(_787, cbModelParam._m0[26u].z, fma(_786, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) - _754;
        float _798 = fma(_787, cbModelParam._m0[27u].z, fma(_786, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) - _758;
        float _799 = fma(_787, cbModelParam._m0[28u].z, fma(_786, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) - _762;
        float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
        float _816 = ((_803 * _797) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_754 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _817 = ((_803 * _798) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_758 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _818 = ((_803 * _799) / cbModelParam._m0[34u].z) + ((((((_762 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _855 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _856 = _855 * (_821.x + (-0.5));
        float _857 = _855 * (_821.y + (-0.5));
        float _858 = _855 * (_821.z + (-0.5));
        float _865 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _866 = _865 * (_828.x + (-0.5));
        float _867 = _865 * (_828.y + (-0.5));
        float _868 = _865 * (_828.z + (-0.5));
        float _875 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _876 = _875 * (_835.x + (-0.5));
        float _877 = _875 * (_835.y + (-0.5));
        float _878 = _875 * (_835.z + (-0.5));
        float _885 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_842.x + (-0.5));
        float _887 = _885 * (_842.y + (-0.5));
        float _888 = _885 * (_842.z + (-0.5));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = _856 * 0.5;
        float _893 = _866 * 0.5;
        float _894 = _876 * 0.5;
        float _895 = dot(vec3(_892, _893, _894), vec3(_892, _893, _894));
        float _900 = (_895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_895);
        float _909 = (dot(vec3(_537, _538, _539), vec3(_900 * _892, _900 * _893, _900 * _894)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _919 = sqrt(((_893 * _893) + (_892 * _892)) + (_894 * _894)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3296 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_921 + 1.0))) + _926) * _889;
        float _936 = _857 * 0.5;
        float _937 = _867 * 0.5;
        float _938 = _877 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_537, _538, _539), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3329 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_963 + 1.0))) + _968) * _890;
        float _978 = _858 * 0.5;
        float _979 = _868 * 0.5;
        float _980 = _878 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(_537, _538, _539), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3362 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_1005 + 1.0))) + _1010) * _891;
        _1027 = _858;
        _1029 = _857;
        _1030 = _856;
        _1031 = _868;
        _1032 = _867;
        _1033 = _866;
        _1034 = _878;
        _1035 = _877;
        _1036 = _876;
        _1037 = _891;
        _1038 = _890;
        _1039 = _889;
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1041 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
    }
    else
    {
        _1027 = _1028;
        _1029 = _1028;
        _1030 = _1028;
        _1031 = _1028;
        _1032 = _1028;
        _1033 = _1028;
        _1034 = _1028;
        _1035 = _1028;
        _1036 = _1028;
        _1037 = _1028;
        _1038 = _1028;
        _1039 = _1028;
        _1040 = 0.0;
        _1041 = 0.0;
        _1042 = 0.0;
    }
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1068 = fma(_726, cbModelParam._m0[30u].z, fma(_722, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _718));
        float _1072 = fma(_726, cbModelParam._m0[31u].z, fma(_722, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _718));
        float _1076 = fma(_726, cbModelParam._m0[32u].z, fma(_722, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _718));
        float _1099 = _718 + _537;
        float _1100 = _722 + _538;
        float _1101 = _726 + _539;
        float _1111 = fma(_1101, cbModelParam._m0[30u].z, fma(_1100, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1099)) - _1068;
        float _1112 = fma(_1101, cbModelParam._m0[31u].z, fma(_1100, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1099)) - _1072;
        float _1113 = fma(_1101, cbModelParam._m0[32u].z, fma(_1100, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1099)) - _1076;
        float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
        float _1130 = ((_1117 * _1111) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1068 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1117 * _1112) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1072 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1117 * _1113) / cbModelParam._m0[35u].z) + ((((((_1076 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1130, _1131, _1132), 0.0);
        float _1167 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1134.x + (-0.5));
        float _1169 = _1167 * (_1134.y + (-0.5));
        float _1170 = _1167 * (_1134.z + (-0.5));
        float _1177 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1141.x + (-0.5));
        float _1179 = _1177 * (_1141.y + (-0.5));
        float _1180 = _1177 * (_1141.z + (-0.5));
        float _1187 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1148.x + (-0.5));
        float _1189 = _1187 * (_1148.y + (-0.5));
        float _1190 = _1187 * (_1148.z + (-0.5));
        float _1197 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1155.x + (-0.5));
        float _1199 = _1197 * (_1155.y + (-0.5));
        float _1200 = _1197 * (_1155.z + (-0.5));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = _1168 * 0.5;
        float _1205 = _1178 * 0.5;
        float _1206 = _1188 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_537, _538, _539), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3403 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3414 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3425 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0))) * (_1231 + 1.0))) + _1236) * _1201;
        float _1246 = _1169 * 0.5;
        float _1247 = _1179 * 0.5;
        float _1248 = _1189 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_537, _538, _539), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3436 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3447 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3458 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * (_1273 + 1.0))) + _1278) * _1202;
        float _1288 = _1170 * 0.5;
        float _1289 = _1180 * 0.5;
        float _1290 = _1190 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1304 = (dot(vec3(_537, _538, _539), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1313 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1315 = _1314 * 2.0;
        float _1319 = (1.0 - _1314) / (_1314 + 1.0);
        float _3491 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1329 = ((((1.0 - _1320) * (_1315 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1315 + 1.0))) + _1320) * _1203;
        _1337 = _1170;
        _1338 = _1169;
        _1339 = _1168;
        _1340 = _1180;
        _1341 = _1179;
        _1342 = _1178;
        _1343 = _1190;
        _1344 = _1189;
        _1345 = _1188;
        _1346 = _1203;
        _1347 = _1202;
        _1348 = _1201;
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)));
    }
    else
    {
        _1337 = _1028;
        _1338 = _1028;
        _1339 = _1028;
        _1340 = _1028;
        _1341 = _1028;
        _1342 = _1028;
        _1343 = _1028;
        _1344 = _1028;
        _1345 = _1028;
        _1346 = _1028;
        _1347 = _1028;
        _1348 = _1028;
        _1349 = 0.0;
        _1350 = 0.0;
        _1351 = 0.0;
    }
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1041)) + _1041;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1384 = fma(_1363, cbSceneParam._m0[89u].z, fma(_1362, cbSceneParam._m0[89u].y, _1361 * cbSceneParam._m0[89u].x));
    float _1387 = fma(_1363, cbSceneParam._m0[90u].z, fma(_1362, cbSceneParam._m0[90u].y, _1361 * cbSceneParam._m0[90u].x));
    float _1390 = fma(_1363, cbSceneParam._m0[91u].z, fma(_1362, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1361));
    float _1405 = _662 * 0.5;
    float _1406 = _663 * 0.5;
    float _1407 = _664 * 0.5;
    float _1408 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1411 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1414 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1448;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1421 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1027, _1031, _1034, _1037));
        float _1425 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1029, _1032, _1035, _1038));
        float _1429 = dot(vec4(_1405, _1406, _1407, 1.0), vec4(_1030, _1033, _1036, _1039));
        float _1436 = dot(vec4(cbModelParam._m0[39u]), vec4(_1405, _1406, _1407, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1459;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1450 = dot(vec4(cbModelParam._m0[40u]), vec4(_1405, _1406, _1407, 1.0));
        _1459 = dot(vec3(isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1450) ? 0.0 : (isnan(0.0) ? _1450 : max(0.0, _1450))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1459 = 1.0;
    }
    float _1463 = (_1459 * cbModelParam._m0[1u].x) + (_1448 * (1.0 - cbModelParam._m0[1u].x));
    float _1473 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _540);
    float _1474 = isnan(_1473) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1473 : min(cbModelParam._m0[25u].z, _1473));
    float _1555;
    float _1557;
    float _1559;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1522 = fma(_726, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718)) + cbModelParam._m0[13u].w;
        float _1526 = fma(_726, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718)) + cbModelParam._m0[14u].w;
        float _1530 = fma(_726, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718)) + cbModelParam._m0[15u].w;
        float _1533 = fma(_664, cbModelParam._m0[13u].z, fma(_663, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _662));
        float _1536 = fma(_664, cbModelParam._m0[14u].z, fma(_663, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _662));
        float _1539 = fma(_664, cbModelParam._m0[15u].z, fma(_663, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _662));
        float _1567;
        if (_1533 > 0.0)
        {
            _1567 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1567 = frontier_phi_22_20_ladder;
        }
        float _1950;
        if (_1536 > 0.0)
        {
            _1950 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1950 = frontier_phi_31_27_ladder;
        }
        float _2266;
        if (_1539 > 0.0)
        {
            _2266 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2266 = frontier_phi_45_38_ladder;
        }
        float _2268 = isnan(_1950) ? _1567 : (isnan(_1567) ? _1950 : min(_1567, _1950));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1533) + _1522;
        float _2274 = (_2269 * _1536) + _1526;
        float _2275 = (_2269 * _1539) + _1530;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1474);
            frontier_phi_21_45_ladder = _2401.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2401.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2401.x * cbModelParam._m0[1u].y;
        }
        _1555 = frontier_phi_21_45_ladder_2;
        _1557 = frontier_phi_21_45_ladder_1;
        _1559 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_662, _663, _664), _1474);
        _1555 = _1543.x * cbModelParam._m0[1u].y;
        _1557 = _1543.y * cbModelParam._m0[1u].y;
        _1559 = _1543.z * cbModelParam._m0[1u].y;
    }
    float _1563 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _540);
    float _1564 = isnan(_1563) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1563 : min(cbModelParam._m0[25u].w, _1563));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1617 = fma(_726, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718)) + cbModelParam._m0[21u].w;
        float _1621 = fma(_726, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718)) + cbModelParam._m0[22u].w;
        float _1625 = fma(_726, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718)) + cbModelParam._m0[23u].w;
        float _1628 = fma(_664, cbModelParam._m0[21u].z, fma(_663, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _662));
        float _1631 = fma(_664, cbModelParam._m0[22u].z, fma(_663, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _662));
        float _1634 = fma(_664, cbModelParam._m0[23u].z, fma(_663, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _662));
        float _1955;
        if (_1628 > 0.0)
        {
            _1955 = abs((1.0 - _1617) / _1628);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1617 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1955 = frontier_phi_33_29_ladder;
        }
        float _2292;
        if (_1631 > 0.0)
        {
            _2292 = abs((1.0 - _1621) / _1631);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1621 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2292 = frontier_phi_47_40_ladder;
        }
        float _2461;
        if (_1634 > 0.0)
        {
            _2461 = abs((1.0 - _1625) / _1634);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1625 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2461 = frontier_phi_61_56_ladder;
        }
        float _2463 = isnan(_2292) ? _1955 : (isnan(_1955) ? _2292 : min(_1955, _2292));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1628) + _1617;
        float _2469 = (_2464 * _1631) + _1621;
        float _2470 = (_2464 * _1634) + _1625;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1564);
            frontier_phi_30_61_ladder = _2703.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2703.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2703.x * cbModelParam._m0[1u].z;
        }
        _1653 = frontier_phi_30_61_ladder_2;
        _1655 = frontier_phi_30_61_ladder_1;
        _1657 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_662, _663, _664), _1564);
        _1653 = _1637.x * cbModelParam._m0[1u].z;
        _1655 = _1637.y * cbModelParam._m0[1u].z;
        _1657 = _1637.z * cbModelParam._m0[1u].z;
    }
    float _1670 = (((_689 * _639) + _690) * _654) * ((cbModelParam._m0[1u].w * (_1653 - _1555)) + _1555);
    float _1672 = (((_689 * _641) + _690) * _654) * ((cbModelParam._m0[1u].w * (_1655 - _1557)) + _1557);
    float _1674 = (((_689 * _642) + _690) * _654) * ((cbModelParam._m0[1u].w * (_1657 - _1559)) + _1559);
    float _1677 = fma(_1674, cbSceneParam._m0[89u].z, fma(_1672, cbSceneParam._m0[89u].y, _1670 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1674, cbSceneParam._m0[90u].z, fma(_1672, cbSceneParam._m0[90u].y, _1670 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1674, cbSceneParam._m0[91u].z, fma(_1672, cbSceneParam._m0[91u].y, _1670 * cbSceneParam._m0[91u].x));
    vec4 _1691 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_573, _574));
    float _1693 = _1691.w;
    float _1705 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1693);
    float _1706 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1693);
    float _1707 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1693);
    uvec4 _1711 = floatBitsToUint(cbInstanceData._m0[_613 + 5u]);
    uint _1713 = _1711.x * 14u;
    uint _1714 = _1713 + 13u;
    float _1719 = _654 + (-1.0);
    float _1722 = (cbLight._m0[_1714].x * _1719) + 1.0;
    float _1723 = (cbLight._m0[_1714].y * _1719) + 1.0;
    uint _1724 = _1713 + 5u;
    float _1730 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1734 = _1713 + 4u;
    float _1743 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1747 = _1713 | 1u;
    float _1758 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_537, _538, _539));
    float _1761 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_537, _538, _539));
    float _3627 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _3638 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1766 = (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.3183098733425140380859375;
    float _1768 = (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.3183098733425140380859375;
    float _1775 = ((cbLight._m0[_1724].x * _1730) * _1768) + (((cbLight._m0[_1734].x * _1705) * _1743) * _1766);
    float _1776 = ((_1730 * cbLight._m0[_1724].y) * _1768) + (((cbLight._m0[_1734].y * _1706) * _1743) * _1766);
    float _1777 = ((_1730 * cbLight._m0[_1724].z) * _1768) + (((cbLight._m0[_1734].z * _1707) * _1743) * _1766);
    uint _1779 = _1713 + 8u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1713].w)) * _540) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1713].x + _565;
    float _1795 = cbLight._m0[_1713].y + _566;
    float _1796 = cbLight._m0[_1713].z + _567;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1713].xyz));
    float _3649 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _3660 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _1808 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _1809 = dot(vec3(_537, _538, _539), vec3(_1801, _1802, _1803));
    float _3671 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _1813 = dot(vec3(cbLight._m0[_1713].xyz), vec3(_1801, _1802, _1803));
    float _3682 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1817 = _1793 * _1793;
    float _1821 = ((_1812 * _1812) * (_1817 + (-1.0))) + 1.0;
    float _1829 = exp2(log2(1.0 - (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0)))) * 5.0);
    float _1830 = 0.959999978542327880859375 - _636;
    float _1832 = 0.959999978542327880859375 - _637;
    float _1833 = 0.959999978542327880859375 - _638;
    float _1840 = 1.0 - _1793;
    float _1851 = (0.5 / (((_1808 * ((_1807 * _1840) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1840) + _1793) * _1807))) * _1807;
    float _3693 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1853 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1817 / ((_1821 * _1821) * 3.141590118408203125));
    uint _1867 = _1713 + 9u;
    float _1878 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _540) * 0.949999988079071044921875);
    float _1879 = _1878 * _1878;
    float _1880 = cbLight._m0[_1747].x + _565;
    float _1881 = cbLight._m0[_1747].y + _566;
    float _1882 = cbLight._m0[_1747].z + _567;
    float _1886 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
    float _1887 = _1886 * _1880;
    float _1888 = _1886 * _1881;
    float _1889 = _1886 * _1882;
    float _1890 = dot(vec3(_537, _538, _539), vec3(cbLight._m0[_1747].xyz));
    float _3704 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1893 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _1894 = dot(vec3(_537, _538, _539), vec3(_1887, _1888, _1889));
    float _3715 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1898 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_1887, _1888, _1889));
    float _3726 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1902 = _1879 * _1879;
    float _1906 = ((_1897 * _1897) * (_1902 + (-1.0))) + 1.0;
    float _1913 = exp2(log2(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * 5.0);
    float _1920 = 1.0 - _1879;
    float _1930 = (0.5 / (((_1808 * ((_1893 * _1920) + _1879)) + 9.9999999392252902907785028219223e-09) + (((_1808 * _1920) + _1879) * _1893))) * _1893;
    float _3737 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1932 = (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1902 / ((_1906 * _1906) * 3.141590118408203125));
    float _1942 = (((((_1913 * _1830) + _639) * cbLight._m0[_1867].x) * _1932) * _1730) + ((((cbLight._m0[_1779].x * _1705) * ((_1829 * _1830) + _639)) * _1853) * _1743);
    float _1943 = (((((_1913 * _1832) + _641) * cbLight._m0[_1867].y) * _1932) * _1730) + ((((cbLight._m0[_1779].y * _1706) * ((_1829 * _1832) + _641)) * _1853) * _1743);
    float _1944 = (((((_1913 * _1833) + _642) * cbLight._m0[_1867].z) * _1932) * _1730) + ((((cbLight._m0[_1779].z * _1707) * ((_1829 * _1833) + _642)) * _1853) * _1743);
    float _2059;
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    if (_1711.y == 0u)
    {
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1999;
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1999;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1999;
        uvec4 _2014 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2015 = _2014.x;
        uint _2026 = uint((float(_2014.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _2015))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _2015)));
        float _2036 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2037 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        uint _2040 = uint(isnan(14.0) ? _2037 : (isnan(_2037) ? 14.0 : min(_2037, 14.0)));
        uvec4 _2045 = texelFetch(g_lightClusterGridBuffer, int(((_2040 << 2u) + (_2026 << 6u)) >> 2u));
        uint _2046 = _2045.x;
        uint _2047 = _2014.z;
        float _2153;
        float _2155;
        float _2157;
        float _2159;
        float _2161;
        float _2163;
        if (((((1u << ((_2047 >> 4u) & 15u)) + 4294967295u) & _2046) == 0u) || ((_2047 & 240u) == 0u))
        {
            _2153 = 0.0;
            _2155 = 0.0;
            _2157 = 0.0;
            _2159 = 0.0;
            _2161 = 0.0;
            _2163 = 0.0;
        }
        else
        {
            float _2154;
            float _2156;
            float _2158;
            float _2160;
            float _2162;
            float _2164;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            uint _2335 = 0u;
            uint _2344;
            bool _2345;
            for (;;)
            {
                _2344 = texelFetch(g_lightClassification, int((((_2040 << 5u) + (_2026 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                _2345 = _2344 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2345)
                {
                    frontier_phi_58_pred = _2330;
                    frontier_phi_58_pred_1 = _2334;
                    frontier_phi_58_pred_2 = _2333;
                    frontier_phi_58_pred_3 = _2332;
                    frontier_phi_58_pred_4 = _2331;
                    frontier_phi_58_pred_5 = _2329;
                }
                else
                {
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    uint _2510;
                    _2504 = _2329;
                    _2505 = _2330;
                    _2506 = _2331;
                    _2507 = _2332;
                    _2508 = _2333;
                    _2509 = _2334;
                    _2510 = _2344;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    float _2415;
                    for (;;)
                    {
                        uint _2514 = uint(findLSB(_2510)) + (_2335 << 5u);
                        uint _2511 = (_2510 + 4294967295u) & _2510;
                        uint _2516 = _2514 * 48u;
                        vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2516)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 3u)).x));
                        uint _2536 = (_2514 * 48u) + 4u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 3u)).x));
                        uint _2555 = (_2514 * 48u) + 8u;
                        vec3 _2566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x));
                        float _2570 = _2530.x - _2000;
                        float _2571 = _2530.y - _2001;
                        float _2572 = _2530.z - _2002;
                        float _2573 = dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572));
                        float _2576 = inversesqrt(_2573);
                        float _2577 = _2576 * _2570;
                        float _2578 = _2576 * _2571;
                        float _2579 = _2576 * _2572;
                        float _2580 = dot(vec3(_594, _597, _600), vec3(_2577, _2578, _2579));
                        float _2585 = 1.0 - (_2573 * _2530.w);
                        float _3758 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2586 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
                        float _2587 = sqrt(_2573) * _2549.w;
                        float _2590 = 1.39999997615814208984375 / (_2587 + 1.39999997615814208984375);
                        float _2591 = _2590 * _2590;
                        float _2594 = ((1.0 - _2591) * _2580) + _2591;
                        float _2597 = _2587 * _2587;
                        float _2601 = ((isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))) * _2586) / ((_2597 * 0.699999988079071044921875) + 1.0);
                        float _2605 = (-0.0) - _2000;
                        float _2606 = (-0.0) - _2001;
                        float _2607 = (-0.0) - _2002;
                        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2622 = exp2(log2(1.0 / ((_2597 * 3.5) + 5.0)) * 0.25);
                        float _2623 = 1.0 - _670;
                        float _2630 = sqrt(1.0 - ((1.0 - (_2623 * _2623)) * (1.0 - (_2622 * _2622))));
                        float _2631 = _2630 * _2630;
                        float _2632 = _2631 * _2631;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2635 = _2614 + _2579;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2643 = dot(vec3(_594, _597, _600), vec3(_2612, _2613, _2614));
                        float _3774 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2646 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                        float _2647 = dot(vec3(_594, _597, _600), vec3(_2639 * _2633, _2639 * _2634, _2639 * _2635));
                        float _3785 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2650 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
                        float _2654 = ((_2650 * _2650) * (_2632 + (-1.0))) + 1.0;
                        float _2655 = _2590 * _2631;
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2580) + _2656;
                        float _3796 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
                        float _2661 = 1.0 - _2631;
                        float _2671 = (0.5 / (((_2660 * ((_2646 * _2661) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2661) + _2631) * _2646))) * _2660;
                        float _3807 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2682 = (((_2632 * 3.1415927410125732421875) * (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0)))) / ((_2654 * _2654) * ((_2597 * 2.1991131305694580078125) + 3.141590118408203125))) * _2586;
                        _2413 = (_2601 * _2549.x) + _2507;
                        _2414 = (_2601 * _2549.y) + _2508;
                        _2415 = (_2601 * _2549.z) + _2509;
                        _2410 = (_2682 * _2566.x) + _2504;
                        _2411 = (_2682 * _2566.y) + _2505;
                        _2412 = (_2682 * _2566.z) + _2506;
                        if (_2511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2504 = _2410;
                            _2505 = _2411;
                            _2506 = _2412;
                            _2507 = _2413;
                            _2508 = _2414;
                            _2509 = _2415;
                            _2510 = _2511;
                        }
                    }
                    frontier_phi_58_pred = _2411;
                    frontier_phi_58_pred_1 = _2415;
                    frontier_phi_58_pred_2 = _2414;
                    frontier_phi_58_pred_3 = _2413;
                    frontier_phi_58_pred_4 = _2412;
                    frontier_phi_58_pred_5 = _2410;
                }
                _2156 = frontier_phi_58_pred;
                _2164 = frontier_phi_58_pred_1;
                _2162 = frontier_phi_58_pred_2;
                _2160 = frontier_phi_58_pred_3;
                _2158 = frontier_phi_58_pred_4;
                _2154 = frontier_phi_58_pred_5;
                uint _2336 = _2335 + 1u;
                if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2329 = _2154;
                    _2330 = _2156;
                    _2331 = _2158;
                    _2332 = _2160;
                    _2333 = _2162;
                    _2334 = _2164;
                    _2335 = _2336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2153 = _2154;
            _2155 = _2156;
            _2157 = _2158;
            _2159 = _2160;
            _2161 = _2162;
            _2163 = _2164;
        }
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.z;
        uint _2170 = (_2168 >> 8u) & 15u;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        if (((4294967295u << _2170) & _2046) == 0u)
        {
            _2297 = _2153;
            _2299 = _2155;
            _2301 = _2157;
            _2303 = _2159;
            _2305 = _2161;
            _2307 = _2163;
        }
        else
        {
            float _2322 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _2323 = _2322 * _2000;
            float _2324 = _2322 * _2001;
            float _2325 = _2322 * _2002;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2170 < ((_2168 >> 12u) & 15u))
            {
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2487 = _2153;
                float _2488 = _2155;
                float _2489 = _2157;
                float _2490 = _2159;
                float _2491 = _2161;
                float _2492 = _2163;
                uint _2493 = _2170;
                uint _2502;
                bool _2503;
                for (;;)
                {
                    _2502 = texelFetch(g_lightClassification, int((((_2040 << 5u) + (_2026 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                    _2503 = _2502 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2503)
                    {
                        frontier_phi_67_pred = _2492;
                        frontier_phi_67_pred_1 = _2491;
                        frontier_phi_67_pred_2 = _2490;
                        frontier_phi_67_pred_3 = _2489;
                        frontier_phi_67_pred_4 = _2488;
                        frontier_phi_67_pred_5 = _2487;
                    }
                    else
                    {
                        float _2708;
                        float _2709;
                        float _2710;
                        float _2711;
                        float _2712;
                        float _2713;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3004;
                        float _3005;
                        float _3006;
                        float _2721 = _2487;
                        float _2722 = _2488;
                        float _2723 = _2489;
                        float _2724 = _2490;
                        float _2725 = _2491;
                        float _2726 = _2492;
                        uint _2727 = _2502;
                        uint _2728;
                        vec4 _2753;
                        float _2754;
                        vec4 _2769;
                        vec3 _2781;
                        vec4 _2796;
                        vec4 _2811;
                        float _2857;
                        bool _2858;
                        for (;;)
                        {
                            uint _2738 = ((_2493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2727));
                            _2728 = (_2727 + 4294967295u) & _2727;
                            uint _2740 = _2738 * 40u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            _2754 = _2753.w;
                            uint _2756 = (_2738 * 40u) + 4u;
                            _2769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2756 + 3u)).x));
                            uint _2771 = (_2738 * 40u) + 8u;
                            _2781 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x));
                            uint _2783 = (_2738 * 40u) + 16u;
                            _2796 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2783)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2783 + 3u)).x));
                            uint _2798 = (_2738 * 40u) + 20u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2813 = (_2738 * 40u) + 24u;
                            vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            uint _2832 = (_2738 * 40u) + 28u;
                            vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2857 = fma(_2002, _2845.z, fma(_2001, _2845.y, _2845.x * _2000)) + _2845.w;
                            _2858 = !((fma(_2002, _2826.z, fma(_2001, _2826.y, _2826.x * _2000)) + _2826.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2858)
                            {
                                float _2885 = _2753.x - _2000;
                                float _2886 = _2753.y - _2001;
                                float _2887 = _2753.z - _2002;
                                float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                                float _2891 = inversesqrt(_2888);
                                float _2892 = _2891 * _2885;
                                float _2893 = _2891 * _2886;
                                float _2894 = _2891 * _2887;
                                float _2898 = 1.0 - (_2888 / (_2754 * _2754));
                                float _3818 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
                                float _2903 = sqrt(_2888) * _2769.w;
                                float _2905 = 1.39999997615814208984375 / (_2903 + 1.39999997615814208984375);
                                float _2906 = _2905 * _2905;
                                float _2909 = ((1.0 - _2906) * dot(vec3(_2892, _2893, _2894), vec3(_594, _597, _600))) + _2906;
                                float _2912 = _2903 * _2903;
                                float _2916 = (fma(_2002, _2796.z, fma(_2001, _2796.y, _2796.x * _2000)) + _2796.w) / _2857;
                                float _2917 = (fma(_2002, _2811.z, fma(_2001, _2811.y, _2811.x * _2000)) + _2811.w) / _2857;
                                float _2921 = 1.0 - dot(vec2(_2916, _2917), vec2(_2916, _2917));
                                float _3834 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                                float _2922 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                                float _2923 = _2922 * (((isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0))) * _2899) / ((_2912 * 0.699999988079071044921875) + 1.0));
                                float _2935 = exp2(log2(1.0 / ((_2912 * 3.5) + 5.0)) * 0.25);
                                float _2936 = 1.0 - _670;
                                float _2943 = sqrt(1.0 - ((1.0 - (_2936 * _2936)) * (1.0 - (_2935 * _2935))));
                                float _2944 = _2943 * _2943;
                                float _2945 = _2944 * _2944;
                                float _2946 = _2892 - _2323;
                                float _2947 = _2893 - _2324;
                                float _2948 = _2894 - _2325;
                                float _2952 = inversesqrt(dot(vec3(_2946, _2947, _2948), vec3(_2946, _2947, _2948)));
                                float _2956 = dot(vec3(_594, _597, _600), vec3((-0.0) - _2323, (-0.0) - _2324, (-0.0) - _2325));
                                float _3845 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2959 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                                float _2960 = dot(vec3(_594, _597, _600), vec3(_2952 * _2946, _2952 * _2947, _2952 * _2948));
                                float _3856 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2963 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                                float _2967 = ((_2963 * _2963) * (_2945 + (-1.0))) + 1.0;
                                float _2968 = _2905 * _2944;
                                float _2969 = _2968 * _2968;
                                float _2975 = ((1.0 - _2969) * dot(vec3(_594, _597, _600), vec3(_2892, _2893, _2894))) + _2969;
                                float _3867 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                                float _2977 = 1.0 - _2944;
                                float _2987 = (0.5 / (((_2976 * ((_2959 * _2977) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2976 * _2977) + _2944) * _2959))) * _2976;
                                float _3878 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2997 = (_2922 * _2899) * (((_2945 * 3.1415927410125732421875) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) / ((_2967 * _2967) * ((_2912 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2923 * _2769.z;
                                frontier_phi_73_pred_1 = _2923 * _2769.y;
                                frontier_phi_73_pred_2 = _2923 * _2769.x;
                                frontier_phi_73_pred_3 = _2997 * _2781.z;
                                frontier_phi_73_pred_4 = _2997 * _2781.y;
                                frontier_phi_73_pred_5 = _2997 * _2781.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3006 = frontier_phi_73_pred;
                            _3005 = frontier_phi_73_pred_1;
                            _3004 = frontier_phi_73_pred_2;
                            _3003 = frontier_phi_73_pred_3;
                            _3002 = frontier_phi_73_pred_4;
                            _3001 = frontier_phi_73_pred_5;
                            _2711 = _3004 + _2724;
                            _2712 = _3005 + _2725;
                            _2713 = _3006 + _2726;
                            _2708 = _3001 + _2721;
                            _2709 = _3002 + _2722;
                            _2710 = _3003 + _2723;
                            if (_2728 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2721 = _2708;
                                _2722 = _2709;
                                _2723 = _2710;
                                _2724 = _2711;
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2728;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2713;
                        frontier_phi_67_pred_1 = _2712;
                        frontier_phi_67_pred_2 = _2711;
                        frontier_phi_67_pred_3 = _2710;
                        frontier_phi_67_pred_4 = _2709;
                        frontier_phi_67_pred_5 = _2708;
                    }
                    _2308 = frontier_phi_67_pred;
                    _2306 = frontier_phi_67_pred_1;
                    _2304 = frontier_phi_67_pred_2;
                    _2302 = frontier_phi_67_pred_3;
                    _2300 = frontier_phi_67_pred_4;
                    _2298 = frontier_phi_67_pred_5;
                    uint _2494 = _2493 + 1u;
                    if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2487 = _2298;
                        _2488 = _2300;
                        _2489 = _2302;
                        _2490 = _2304;
                        _2491 = _2306;
                        _2492 = _2308;
                        _2493 = _2494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2304;
                frontier_phi_49_50_ladder_1 = _2308;
                frontier_phi_49_50_ladder_2 = _2306;
                frontier_phi_49_50_ladder_3 = _2302;
                frontier_phi_49_50_ladder_4 = _2300;
                frontier_phi_49_50_ladder_5 = _2298;
            }
            else
            {
                frontier_phi_49_50_ladder = _2159;
                frontier_phi_49_50_ladder_1 = _2163;
                frontier_phi_49_50_ladder_2 = _2161;
                frontier_phi_49_50_ladder_3 = _2157;
                frontier_phi_49_50_ladder_4 = _2155;
                frontier_phi_49_50_ladder_5 = _2153;
            }
            _2297 = frontier_phi_49_50_ladder_5;
            _2299 = frontier_phi_49_50_ladder_4;
            _2301 = frontier_phi_49_50_ladder_3;
            _2303 = frontier_phi_49_50_ladder;
            _2305 = frontier_phi_49_50_ladder_2;
            _2307 = frontier_phi_49_50_ladder_1;
        }
        float _2312 = isnan(1.0) ? _654 : (isnan(_654) ? 1.0 : min(_654, 1.0));
        _2059 = (_2312 * _2303) + _1775;
        _2061 = (_2312 * _2305) + _1776;
        _2063 = (_2312 * _2307) + _1777;
        _2065 = ((_2297 * _639) * _2312) + _1942;
        _2067 = ((_2299 * _641) * _2312) + _1943;
        _2069 = ((_2301 * _642) * _2312) + _1944;
    }
    else
    {
        _2059 = _1775;
        _2061 = _1776;
        _2063 = _1777;
        _2065 = _1942;
        _2067 = _1943;
        _2069 = _1944;
    }
    uint _2075 = _615 + uint(cbMatDynParam._m0[0u].w);
    float _3894 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3905 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3916 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2100 = (((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_2059 + ((isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0))) * _654))) + ((_2065 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + (((_454 - (_454 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2075].x);
    float _2102 = ((((_455 - (_455 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2075].y) + ((_2067 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_2061 + ((isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))) * _654)));
    float _2104 = (((cbMtdParam._m0[9u].z * (_456 - (_456 * _288))) * cbInstanceData._m0[_2075].z) + ((_2069 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1463)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_2063 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _654)));
    uint _2108 = _613 + 6u;
    float _2116 = _573 / cbSceneParam._m0[86u].x;
    float _2117 = _574 / cbSceneParam._m0[86u].y;
    vec4 _2131 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2116, _2117, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2133 = _2131.x;
    float _2134 = _2131.y;
    float _2135 = _2131.z;
    float _2136 = _2131.w;
    float _2216;
    float _2218;
    float _2220;
    float _2222;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2178 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2179 = _2178 / _560;
        float _2190 = _2179 * _261;
        float _2191 = _262 * _2179;
        float _2192 = (-0.0) - _2191;
        float _2193 = _2179 * _263;
        float _2195 = (cbSceneParam._m0[77u].w * _2192) / _2178;
        float _2196 = _2195 + cbSceneParam._m0[79u].w;
        float _2197 = cbSceneParam._m0[79u].w - _2191;
        float _2203 = sqrt(((_2190 * _2190) + (_2191 * _2191)) + (_2193 * _2193));
        float _2206 = (1.0 - (cbSceneParam._m0[77u].w / _2178)) * _2203;
        float _2212 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2214 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2423;
        if (abs((_2192 - _2195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2423 = ((((_2196 > 0.0) ? exp2(_2212 * _2196) : (2.0 - exp2(_2214 * _2196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2206;
        }
        else
        {
            float _2358 = 1.0 / cbSceneParam._m0[80u].x;
            float _2359 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : max(_2196, _2197));
            float _2360 = isnan(_2197) ? _2196 : (isnan(_2196) ? _2197 : min(_2196, _2197));
            float _2369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : min(_2359, 0.0));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            _2423 = ((abs(_2203 / _2192) * cbSceneParam._m0[80u].y) * ((((_2369 - _2370) * 2.0) - ((exp2(_2212 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)))) - exp2(_2212 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))))) * _2358)) - ((exp2(_2214 * _2369) - exp2(_2214 * _2370)) * _2358))) + (_2206 * cbSceneParam._m0[80u].z);
        }
        vec4 _2425 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2116, _2117, 1.0), 0.0);
        float _2434 = exp2((_2423 * (-1.44269502162933349609375)) * (1.0 - _2425.w));
        float _2435 = log2(_2434);
        float _2451 = log2(_2136);
        _2216 = (exp2(_2451 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].x)) * _2425.x) / cbSceneParam._m0[78u].x)) + _2133;
        _2218 = (exp2(_2451 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].y)) * _2425.y) / cbSceneParam._m0[78u].y)) + _2134;
        _2220 = (exp2(_2451 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2435 * cbSceneParam._m0[78u].z)) * _2425.z) / cbSceneParam._m0[78u].z)) + _2135;
        _2222 = _2434 * _2136;
    }
    else
    {
        _2216 = _2133;
        _2218 = _2134;
        _2220 = _2135;
        _2222 = _2136;
    }
    float _2234 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2235 = _2234 == 3.0;
    float _2236 = log2(_2222);
    float _2243 = exp2(_2236 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)));
    float _2244 = exp2(_2236 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)));
    float _2245 = exp2(_2236 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)));
    float _2254 = (_2234 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2254 * (_2235 ? _2243 : (_2243 + (cbSceneParam._m0[72u].w * _2216)));
    SV_Target.y = _2254 * (_2235 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2218)));
    SV_Target.z = _2254 * (_2235 ? _2245 : (_2245 + (cbSceneParam._m0[72u].w * _2220)));
    SV_Target.w = cbInstanceData._m0[_2108].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2108].w;
}


