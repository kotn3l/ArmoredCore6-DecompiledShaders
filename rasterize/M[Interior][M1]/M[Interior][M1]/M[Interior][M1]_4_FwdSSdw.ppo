#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _981;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    float _376 = (_352 > 0.0) ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_357 + (-0.5)) + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_358 + (-0.5)) + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    vec4 _444 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = _444.x;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _466 = (_458.x * 2.0) + (-1.0);
    float _468 = (_458.y * 2.0) + (-1.0);
    float _469 = dot(vec2(_466, _468), vec2(_466, _468));
    float _3103 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _474 = sqrt(1.0 - (isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))));
    float _475 = _458.z * _286;
    float _478 = fma(_474, _195, fma(_468, _202, _466 * _188));
    float _481 = fma(_474, _196, fma(_468, _203, _466 * _189));
    float _484 = fma(_474, _197, fma(_468, _204, _466 * _190));
    float _488 = inversesqrt(dot(vec3(_478, _481, _484), vec3(_478, _481, _484)));
    float _489 = _488 * _478;
    float _490 = _488 * _481;
    float _491 = _488 * _484;
    float _3114 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _492 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
    float _3125 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3136 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3147 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3158 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _496 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
    float _512 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _516 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _517 = _259 * _516;
    float _518 = _260 * _516;
    float _519 = _261 * _516;
    float _525 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _526 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _547 = fma(_491, cbSceneParam._m0[5u].z, fma(_490, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _489));
    float _550 = fma(_491, cbSceneParam._m0[6u].z, fma(_490, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _489));
    float _553 = fma(_491, cbSceneParam._m0[7u].z, fma(_490, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _489));
    uint _566 = uint(roundEven(NORMAL.w)) * 13u;
    uint _568 = _566 + 9u;
    uint _569 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _575 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0)))) * cbInstanceData._m0[_569].x;
    float _576 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_569].y;
    float _577 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0)))) * cbInstanceData._m0[_569].z;
    float _3169 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _3180 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _579 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _581 = 1.0 - _496;
    float _582 = _578 * _581;
    float _583 = _579 * _581;
    float _584 = _580 * _581;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _496;
    float _590 = (_579 + (-0.039999999105930328369140625)) * _496;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _496;
    float _592 = _589 + 0.039999999105930328369140625;
    float _594 = _590 + 0.039999999105930328369140625;
    float _595 = _591 + 0.039999999105930328369140625;
    vec4 _604 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _525, cbSceneParam._m0[86u].y * _526));
    float _607 = _604.x * TEXCOORD.z;
    float _608 = dot(vec3(_489, _490, _491), vec3(_517, _518, _519));
    float _611 = _608 * 2.0;
    float _615 = (_611 * _489) - _517;
    float _616 = (_611 * _490) - _518;
    float _617 = (_611 * _491) - _519;
    float _621 = abs(dot(vec3(_517, _518, _519), vec3(_489, _490, _491)));
    float _3202 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _623 = sqrt(_492);
    float _636 = exp2((_623 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_623 * 3.0));
    float _642 = (1.0 - _636) * ((_623 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _643 = _636 * _623;
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _980;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = fma(_679, cbModelParam._m0[26u].z, fma(_675, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _671));
        float _711 = fma(_679, cbModelParam._m0[27u].z, fma(_675, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _671));
        float _715 = fma(_679, cbModelParam._m0[28u].z, fma(_675, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _671));
        float _738 = _671 + _489;
        float _739 = _675 + _490;
        float _740 = _679 + _491;
        float _750 = fma(_740, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) - _707;
        float _751 = fma(_740, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) - _711;
        float _752 = fma(_740, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) - _715;
        float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
        float _769 = ((_756 * _750) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_707 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _770 = ((_756 * _751) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_711 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _771 = ((_756 * _752) / cbModelParam._m0[34u].z) + ((((((_715 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _774 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_769, _770, _771), 0.0);
        float _808 = exp2((_774.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_774.x + (-0.5));
        float _810 = _808 * (_774.y + (-0.5));
        float _811 = _808 * (_774.z + (-0.5));
        float _818 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_781.x + (-0.5));
        float _820 = _818 * (_781.y + (-0.5));
        float _821 = _818 * (_781.z + (-0.5));
        float _828 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_788.x + (-0.5));
        float _830 = _828 * (_788.y + (-0.5));
        float _831 = _828 * (_788.z + (-0.5));
        float _838 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_795.x + (-0.5));
        float _840 = _838 * (_795.y + (-0.5));
        float _841 = _838 * (_795.z + (-0.5));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = _809 * 0.5;
        float _846 = _819 * 0.5;
        float _847 = _829 * 0.5;
        float _848 = dot(vec3(_845, _846, _847), vec3(_845, _846, _847));
        float _853 = (_848 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_848);
        float _862 = (dot(vec3(_489, _490, _491), vec3(_853 * _845, _853 * _846, _853 * _847)) + 1.0) * 0.5;
        float _3228 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _872 = sqrt(((_846 * _846) + (_845 * _845)) + (_847 * _847)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3239 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _874 = _873 * 2.0;
        float _878 = (1.0 - _873) / (_873 + 1.0);
        float _3250 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _888 = ((((1.0 - _879) * (_874 + 2.0)) * exp2(log2(isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0))) * (_874 + 1.0))) + _879) * _842;
        float _889 = _810 * 0.5;
        float _890 = _820 * 0.5;
        float _891 = _830 * 0.5;
        float _892 = dot(vec3(_889, _890, _891), vec3(_889, _890, _891));
        float _897 = (_892 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_892);
        float _905 = (dot(vec3(_489, _490, _491), vec3(_897 * _889, _897 * _890, _897 * _891)) + 1.0) * 0.5;
        float _3261 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _914 = sqrt(((_890 * _890) + (_889 * _889)) + (_891 * _891)) / (_843 + 9.9999997473787516355514526367188e-06);
        float _3272 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _916 = _915 * 2.0;
        float _920 = (1.0 - _915) / (_915 + 1.0);
        float _3283 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _921 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _930 = ((((1.0 - _921) * (_916 + 2.0)) * exp2(log2(isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_916 + 1.0))) + _921) * _843;
        float _931 = _811 * 0.5;
        float _932 = _821 * 0.5;
        float _933 = _831 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _947 = (dot(vec3(_489, _490, _491), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _956 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3316 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_958 + 1.0))) + _963) * _844;
        _980 = _811;
        _982 = _810;
        _983 = _809;
        _984 = _821;
        _985 = _820;
        _986 = _819;
        _987 = _831;
        _988 = _830;
        _989 = _829;
        _990 = _844;
        _991 = _843;
        _992 = _842;
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0)));
        _994 = cbModelParam._m0[36u].z * (isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0)));
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
    }
    else
    {
        _980 = _981;
        _982 = _981;
        _983 = _981;
        _984 = _981;
        _985 = _981;
        _986 = _981;
        _987 = _981;
        _988 = _981;
        _989 = _981;
        _990 = _981;
        _991 = _981;
        _992 = _981;
        _993 = 0.0;
        _994 = 0.0;
        _995 = 0.0;
    }
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1021 = fma(_679, cbModelParam._m0[30u].z, fma(_675, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _671));
        float _1025 = fma(_679, cbModelParam._m0[31u].z, fma(_675, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _671));
        float _1029 = fma(_679, cbModelParam._m0[32u].z, fma(_675, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _671));
        float _1052 = _671 + _489;
        float _1053 = _675 + _490;
        float _1054 = _679 + _491;
        float _1064 = fma(_1054, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1052)) - _1021;
        float _1065 = fma(_1054, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1052)) - _1025;
        float _1066 = fma(_1054, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1052)) - _1029;
        float _1070 = inversesqrt(dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066)));
        float _1083 = ((_1070 * _1064) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1021 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1070 * _1065) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1025 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1085 = ((_1070 * _1066) / cbModelParam._m0[35u].z) + ((((((_1029 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1083, _1084, _1085), 0.0);
        float _1120 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1087.x + (-0.5));
        float _1122 = _1120 * (_1087.y + (-0.5));
        float _1123 = _1120 * (_1087.z + (-0.5));
        float _1130 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1094.x + (-0.5));
        float _1132 = _1130 * (_1094.y + (-0.5));
        float _1133 = _1130 * (_1094.z + (-0.5));
        float _1140 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1101.x + (-0.5));
        float _1142 = _1140 * (_1101.y + (-0.5));
        float _1143 = _1140 * (_1101.z + (-0.5));
        float _1150 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1108.x + (-0.5));
        float _1152 = _1150 * (_1108.y + (-0.5));
        float _1153 = _1150 * (_1108.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_489, _490, _491), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _3357 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3368 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3379 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))) * (_1184 + 1.0))) + _1189) * _1154;
        float _1199 = _1122 * 0.5;
        float _1200 = _1132 * 0.5;
        float _1201 = _1142 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_489, _490, _491), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3412 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_1226 + 1.0))) + _1231) * _1155;
        float _1241 = _1123 * 0.5;
        float _1242 = _1133 * 0.5;
        float _1243 = _1143 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_489, _490, _491), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3445 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_1268 + 1.0))) + _1273) * _1156;
        _1290 = _1123;
        _1291 = _1122;
        _1292 = _1121;
        _1293 = _1133;
        _1294 = _1132;
        _1295 = _1131;
        _1296 = _1143;
        _1297 = _1142;
        _1298 = _1141;
        _1299 = _1156;
        _1300 = _1155;
        _1301 = _1154;
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _981;
        _1291 = _981;
        _1292 = _981;
        _1293 = _981;
        _1294 = _981;
        _1295 = _981;
        _1296 = _981;
        _1297 = _981;
        _1298 = _981;
        _1299 = _981;
        _1300 = _981;
        _1301 = _981;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _994)) + _994;
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1337 = fma(_1316, cbSceneParam._m0[89u].z, fma(_1315, cbSceneParam._m0[89u].y, _1314 * cbSceneParam._m0[89u].x));
    float _1340 = fma(_1316, cbSceneParam._m0[90u].z, fma(_1315, cbSceneParam._m0[90u].y, _1314 * cbSceneParam._m0[90u].x));
    float _1343 = fma(_1316, cbSceneParam._m0[91u].z, fma(_1315, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1314));
    float _1358 = _615 * 0.5;
    float _1359 = _616 * 0.5;
    float _1360 = _617 * 0.5;
    float _1361 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1364 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1367 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1401;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1374 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_980, _984, _987, _990));
        float _1378 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_982, _985, _988, _991));
        float _1382 = dot(vec4(_1358, _1359, _1360, 1.0), vec4(_983, _986, _989, _992));
        float _1389 = dot(vec4(cbModelParam._m0[39u]), vec4(_1358, _1359, _1360, 1.0));
        _1401 = dot(vec3(isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1389) ? 0.0 : (isnan(0.0) ? _1389 : max(0.0, _1389))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1401 = 1.0;
    }
    float _1412;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1403 = dot(vec4(cbModelParam._m0[40u]), vec4(_1358, _1359, _1360, 1.0));
        _1412 = dot(vec3(isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)), isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1403) ? 0.0 : (isnan(0.0) ? _1403 : max(0.0, _1403))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1412 = 1.0;
    }
    float _1416 = (_1412 * cbModelParam._m0[1u].x) + (_1401 * (1.0 - cbModelParam._m0[1u].x));
    float _1426 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _492);
    float _1427 = isnan(_1426) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1426 : min(cbModelParam._m0[25u].z, _1426));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_679, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _671)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_679, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _671)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_679, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _671)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1489 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1492 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1520 = frontier_phi_22_20_ladder;
        }
        float _1903;
        if (_1489 > 0.0)
        {
            _1903 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1903 = frontier_phi_31_27_ladder;
        }
        float _2219;
        if (_1492 > 0.0)
        {
            _2219 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2219 = frontier_phi_45_38_ladder;
        }
        float _2221 = isnan(_1903) ? _1520 : (isnan(_1520) ? _1903 : min(_1520, _1903));
        float _2222 = isnan(_2219) ? _2221 : (isnan(_2221) ? _2219 : min(_2221, _2219));
        float _2226 = (_2222 * _1486) + _1475;
        float _2227 = (_2222 * _1489) + _1479;
        float _2228 = (_2222 * _1492) + _1483;
        float _2229 = _2222 * 9.9999997473787516355514526367188e-05;
        float _2230 = (-1.0) - _2229;
        float _2232 = _2229 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2228 > _2232) || ((_2228 < _2230) || ((_2227 > _2232) || ((_2227 < _2230) || ((_2226 < _2230) || (_2226 > _2232))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2228, cbModelParam._m0[9u].z, fma(_2227, cbModelParam._m0[9u].y, _2226 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2228, cbModelParam._m0[10u].z, fma(_2227, cbModelParam._m0[10u].y, _2226 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2228, cbModelParam._m0[11u].z, fma(_2227, cbModelParam._m0[11u].y, _2226 * cbModelParam._m0[11u].x))), _1427);
            frontier_phi_21_45_ladder = _2354.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2354.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2354.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_21_45_ladder_2;
        _1510 = frontier_phi_21_45_ladder_1;
        _1512 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1427);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _492);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_679, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _671)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_679, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _671)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_679, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _671)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1584 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1587 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1908;
        if (_1581 > 0.0)
        {
            _1908 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1908 = frontier_phi_33_29_ladder;
        }
        float _2245;
        if (_1584 > 0.0)
        {
            _2245 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2245 = frontier_phi_47_40_ladder;
        }
        float _2414;
        if (_1587 > 0.0)
        {
            _2414 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2414 = frontier_phi_61_56_ladder;
        }
        float _2416 = isnan(_2245) ? _1908 : (isnan(_1908) ? _2245 : min(_1908, _2245));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1581) + _1570;
        float _2422 = (_2417 * _1584) + _1574;
        float _2423 = (_2417 * _1587) + _1578;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2425 = (-1.0) - _2424;
        float _2427 = _2424 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2423 > _2427) || ((_2423 < _2425) || ((_2422 > _2427) || ((_2422 < _2425) || ((_2421 < _2425) || (_2421 > _2427))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2423, cbModelParam._m0[17u].z, fma(_2422, cbModelParam._m0[17u].y, _2421 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2423, cbModelParam._m0[18u].z, fma(_2422, cbModelParam._m0[18u].y, _2421 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2423, cbModelParam._m0[19u].z, fma(_2422, cbModelParam._m0[19u].y, _2421 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_30_61_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_30_61_ladder_2;
        _1608 = frontier_phi_30_61_ladder_1;
        _1610 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1517);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1623 = (((_642 * _592) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1606 - _1508)) + _1508);
    float _1625 = (((_642 * _594) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1627 = (((_642 * _595) + _643) * _607) * ((cbModelParam._m0[1u].w * (_1610 - _1512)) + _1512);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    vec4 _1644 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_525, _526));
    float _1646 = _1644.w;
    float _1658 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1646);
    float _1659 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1646);
    float _1660 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1646);
    uvec4 _1664 = floatBitsToUint(cbInstanceData._m0[_566 + 5u]);
    uint _1666 = _1664.x * 14u;
    uint _1667 = _1666 + 13u;
    float _1672 = _607 + (-1.0);
    float _1675 = (cbLight._m0[_1667].x * _1672) + 1.0;
    float _1676 = (cbLight._m0[_1667].y * _1672) + 1.0;
    uint _1677 = _1666 + 5u;
    float _1683 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
    uint _1687 = _1666 + 4u;
    float _1696 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
    uint _1700 = _1666 | 1u;
    float _1711 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_489, _490, _491));
    float _1714 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_489, _490, _491));
    float _3581 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _3592 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1719 = (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * 0.3183098733425140380859375;
    float _1721 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.3183098733425140380859375;
    float _1728 = ((cbLight._m0[_1677].x * _1683) * _1721) + (((cbLight._m0[_1687].x * _1658) * _1696) * _1719);
    float _1729 = ((_1683 * cbLight._m0[_1677].y) * _1721) + (((cbLight._m0[_1687].y * _1659) * _1696) * _1719);
    float _1730 = ((_1683 * cbLight._m0[_1677].z) * _1721) + (((cbLight._m0[_1687].z * _1660) * _1696) * _1719);
    uint _1732 = _1666 + 8u;
    float _1745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1666].w)) * _492) * 0.949999988079071044921875);
    float _1746 = _1745 * _1745;
    float _1747 = cbLight._m0[_1666].x + _517;
    float _1748 = cbLight._m0[_1666].y + _518;
    float _1749 = cbLight._m0[_1666].z + _519;
    float _1753 = inversesqrt(dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749)));
    float _1754 = _1753 * _1747;
    float _1755 = _1753 * _1748;
    float _1756 = _1753 * _1749;
    float _1757 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1666].xyz));
    float _3603 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _1761 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _1762 = dot(vec3(_489, _490, _491), vec3(_1754, _1755, _1756));
    float _3625 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _1766 = dot(vec3(cbLight._m0[_1666].xyz), vec3(_1754, _1755, _1756));
    float _3636 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1770 = _1746 * _1746;
    float _1774 = ((_1765 * _1765) * (_1770 + (-1.0))) + 1.0;
    float _1782 = exp2(log2(1.0 - (isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0)))) * 5.0);
    float _1783 = 0.959999978542327880859375 - _589;
    float _1785 = 0.959999978542327880859375 - _590;
    float _1786 = 0.959999978542327880859375 - _591;
    float _1793 = 1.0 - _1746;
    float _1804 = (0.5 / (((_1761 * ((_1760 * _1793) + _1746)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1793) + _1746) * _1760))) * _1760;
    float _3647 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1770 / ((_1774 * _1774) * 3.141590118408203125));
    uint _1820 = _1666 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1700].w)) * _492) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1700].x + _517;
    float _1834 = cbLight._m0[_1700].y + _518;
    float _1835 = cbLight._m0[_1700].z + _519;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_489, _490, _491), vec3(cbLight._m0[_1700].xyz));
    float _3658 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
    float _1847 = dot(vec3(_489, _490, _491), vec3(_1840, _1841, _1842));
    float _3669 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1840, _1841, _1842));
    float _3680 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1866 = exp2(log2(1.0 - (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0)))) * 5.0);
    float _1873 = 1.0 - _1832;
    float _1883 = (0.5 / (((_1761 * ((_1846 * _1873) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1761 * _1873) + _1832) * _1846))) * _1846;
    float _3691 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1885 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1895 = (((((_1866 * _1783) + _592) * cbLight._m0[_1820].x) * _1885) * _1683) + ((((cbLight._m0[_1732].x * _1658) * ((_1782 * _1783) + _592)) * _1806) * _1696);
    float _1896 = (((((_1866 * _1785) + _594) * cbLight._m0[_1820].y) * _1885) * _1683) + ((((cbLight._m0[_1732].y * _1659) * ((_1782 * _1785) + _594)) * _1806) * _1696);
    float _1897 = (((((_1866 * _1786) + _595) * cbLight._m0[_1820].z) * _1885) * _1683) + ((((cbLight._m0[_1732].z * _1660) * ((_1782 * _1786) + _595)) * _1806) * _1696);
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    float _2022;
    if (_1664.y == 0u)
    {
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1952;
        float _1954 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1952;
        float _1955 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1952;
        uvec4 _1967 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1968 = _1967.x;
        uint _1979 = uint((float(_1967.y) * floor(float(uint(cbSceneParam._m0[85u].y * _526) / _1968))) + floor(float(uint(cbSceneParam._m0[85u].x * _525) / _1968)));
        float _1989 = (log2(_1955 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1990 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        uint _1993 = uint(isnan(14.0) ? _1990 : (isnan(_1990) ? 14.0 : min(_1990, 14.0)));
        uvec4 _1998 = texelFetch(g_lightClusterGridBuffer, int(((_1993 << 2u) + (_1979 << 6u)) >> 2u));
        uint _1999 = _1998.x;
        uint _2000 = _1967.z;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        if (((((1u << ((_2000 >> 4u) & 15u)) + 4294967295u) & _1999) == 0u) || ((_2000 & 240u) == 0u))
        {
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
        }
        else
        {
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2282 = 0.0;
            float _2283 = 0.0;
            float _2284 = 0.0;
            float _2285 = 0.0;
            float _2286 = 0.0;
            float _2287 = 0.0;
            uint _2288 = 0u;
            uint _2297;
            bool _2298;
            for (;;)
            {
                _2297 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2288 << 2u)) >> 2u)).x;
                _2298 = _2297 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2298)
                {
                    frontier_phi_58_pred = _2283;
                    frontier_phi_58_pred_1 = _2287;
                    frontier_phi_58_pred_2 = _2286;
                    frontier_phi_58_pred_3 = _2285;
                    frontier_phi_58_pred_4 = _2284;
                    frontier_phi_58_pred_5 = _2282;
                }
                else
                {
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    uint _2463;
                    _2457 = _2282;
                    _2458 = _2283;
                    _2459 = _2284;
                    _2460 = _2285;
                    _2461 = _2286;
                    _2462 = _2287;
                    _2463 = _2297;
                    float _2363;
                    float _2364;
                    float _2365;
                    float _2366;
                    float _2367;
                    float _2368;
                    for (;;)
                    {
                        uint _2467 = uint(findLSB(_2463)) + (_2288 << 5u);
                        uint _2464 = (_2463 + 4294967295u) & _2463;
                        uint _2469 = _2467 * 48u;
                        vec4 _2483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2469)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 3u)).x));
                        uint _2489 = (_2467 * 48u) + 4u;
                        vec4 _2502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2489)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2489 + 3u)).x));
                        uint _2508 = (_2467 * 48u) + 8u;
                        vec3 _2519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2508)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2508 + 2u)).x));
                        float _2523 = _2483.x - _1953;
                        float _2524 = _2483.y - _1954;
                        float _2525 = _2483.z - _1955;
                        float _2526 = dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525));
                        float _2529 = inversesqrt(_2526);
                        float _2530 = _2529 * _2523;
                        float _2531 = _2529 * _2524;
                        float _2532 = _2529 * _2525;
                        float _2533 = dot(vec3(_547, _550, _553), vec3(_2530, _2531, _2532));
                        float _2538 = 1.0 - (_2526 * _2483.w);
                        float _3712 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
                        float _2539 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
                        float _2540 = sqrt(_2526) * _2502.w;
                        float _2543 = 1.39999997615814208984375 / (_2540 + 1.39999997615814208984375);
                        float _2544 = _2543 * _2543;
                        float _2547 = ((1.0 - _2544) * _2533) + _2544;
                        float _2550 = _2540 * _2540;
                        float _2554 = ((isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0))) * _2539) / ((_2550 * 0.699999988079071044921875) + 1.0);
                        float _2558 = (-0.0) - _1953;
                        float _2559 = (-0.0) - _1954;
                        float _2560 = (-0.0) - _1955;
                        float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
                        float _2565 = _2564 * _2558;
                        float _2566 = _2564 * _2559;
                        float _2567 = _2564 * _2560;
                        float _2575 = exp2(log2(1.0 / ((_2550 * 3.5) + 5.0)) * 0.25);
                        float _2576 = 1.0 - _623;
                        float _2583 = sqrt(1.0 - ((1.0 - (_2576 * _2576)) * (1.0 - (_2575 * _2575))));
                        float _2584 = _2583 * _2583;
                        float _2585 = _2584 * _2584;
                        float _2586 = _2565 + _2530;
                        float _2587 = _2566 + _2531;
                        float _2588 = _2567 + _2532;
                        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
                        float _2596 = dot(vec3(_547, _550, _553), vec3(_2565, _2566, _2567));
                        float _3728 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2599 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                        float _2600 = dot(vec3(_547, _550, _553), vec3(_2592 * _2586, _2592 * _2587, _2592 * _2588));
                        float _3739 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                        float _2603 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
                        float _2607 = ((_2603 * _2603) * (_2585 + (-1.0))) + 1.0;
                        float _2608 = _2543 * _2584;
                        float _2609 = _2608 * _2608;
                        float _2612 = ((1.0 - _2609) * _2533) + _2609;
                        float _3750 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2613 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
                        float _2614 = 1.0 - _2584;
                        float _2624 = (0.5 / (((_2613 * ((_2599 * _2614) + _2584)) + 9.9999999392252902907785028219223e-09) + (((_2613 * _2614) + _2584) * _2599))) * _2613;
                        float _3761 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
                        float _2635 = (((_2585 * 3.1415927410125732421875) * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) / ((_2607 * _2607) * ((_2550 * 2.1991131305694580078125) + 3.141590118408203125))) * _2539;
                        _2366 = (_2554 * _2502.x) + _2460;
                        _2367 = (_2554 * _2502.y) + _2461;
                        _2368 = (_2554 * _2502.z) + _2462;
                        _2363 = (_2635 * _2519.x) + _2457;
                        _2364 = (_2635 * _2519.y) + _2458;
                        _2365 = (_2635 * _2519.z) + _2459;
                        if (_2464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2457 = _2363;
                            _2458 = _2364;
                            _2459 = _2365;
                            _2460 = _2366;
                            _2461 = _2367;
                            _2462 = _2368;
                            _2463 = _2464;
                        }
                    }
                    frontier_phi_58_pred = _2364;
                    frontier_phi_58_pred_1 = _2368;
                    frontier_phi_58_pred_2 = _2367;
                    frontier_phi_58_pred_3 = _2366;
                    frontier_phi_58_pred_4 = _2365;
                    frontier_phi_58_pred_5 = _2363;
                }
                _2109 = frontier_phi_58_pred;
                _2117 = frontier_phi_58_pred_1;
                _2115 = frontier_phi_58_pred_2;
                _2113 = frontier_phi_58_pred_3;
                _2111 = frontier_phi_58_pred_4;
                _2107 = frontier_phi_58_pred_5;
                uint _2289 = _2288 + 1u;
                if (_2289 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2282 = _2107;
                    _2283 = _2109;
                    _2284 = _2111;
                    _2285 = _2113;
                    _2286 = _2115;
                    _2287 = _2117;
                    _2288 = _2289;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
        }
        uvec4 _2120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2121 = _2120.z;
        uint _2123 = (_2121 >> 8u) & 15u;
        float _2250;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        if (((4294967295u << _2123) & _1999) == 0u)
        {
            _2250 = _2106;
            _2252 = _2108;
            _2254 = _2110;
            _2256 = _2112;
            _2258 = _2114;
            _2260 = _2116;
        }
        else
        {
            float _2275 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
            float _2276 = _2275 * _1953;
            float _2277 = _2275 * _1954;
            float _2278 = _2275 * _1955;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2123 < ((_2121 >> 12u) & 15u))
            {
                float _2251;
                float _2253;
                float _2255;
                float _2257;
                float _2259;
                float _2261;
                float _2440 = _2106;
                float _2441 = _2108;
                float _2442 = _2110;
                float _2443 = _2112;
                float _2444 = _2114;
                float _2445 = _2116;
                uint _2446 = _2123;
                uint _2455;
                bool _2456;
                for (;;)
                {
                    _2455 = texelFetch(g_lightClassification, int((((_1993 << 5u) + (_1979 << 9u)) + (_2446 << 2u)) >> 2u)).x;
                    _2456 = _2455 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2456)
                    {
                        frontier_phi_67_pred = _2445;
                        frontier_phi_67_pred_1 = _2444;
                        frontier_phi_67_pred_2 = _2443;
                        frontier_phi_67_pred_3 = _2442;
                        frontier_phi_67_pred_4 = _2441;
                        frontier_phi_67_pred_5 = _2440;
                    }
                    else
                    {
                        float _2661;
                        float _2662;
                        float _2663;
                        float _2664;
                        float _2665;
                        float _2666;
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _2674 = _2440;
                        float _2675 = _2441;
                        float _2676 = _2442;
                        float _2677 = _2443;
                        float _2678 = _2444;
                        float _2679 = _2445;
                        uint _2680 = _2455;
                        uint _2681;
                        vec4 _2706;
                        float _2707;
                        vec4 _2722;
                        vec3 _2734;
                        vec4 _2749;
                        vec4 _2765;
                        float _2811;
                        bool _2812;
                        for (;;)
                        {
                            uint _2691 = ((_2446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2680));
                            _2681 = (_2680 + 4294967295u) & _2680;
                            uint _2693 = _2691 * 40u;
                            _2706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 3u)).x));
                            _2707 = _2706.w;
                            uint _2709 = (_2691 * 40u) + 4u;
                            _2722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2709 + 3u)).x));
                            uint _2724 = (_2691 * 40u) + 8u;
                            _2734 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x));
                            uint _2736 = (_2691 * 40u) + 16u;
                            _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2752 = (_2691 * 40u) + 20u;
                            _2765 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2752 + 3u)).x));
                            uint _2767 = (_2691 * 40u) + 24u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            uint _2786 = (_2691 * 40u) + 28u;
                            vec4 _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            _2811 = fma(_1955, _2799.z, fma(_1954, _2799.y, _2799.x * _1953)) + _2799.w;
                            _2812 = !((fma(_1955, _2780.z, fma(_1954, _2780.y, _2780.x * _1953)) + _2780.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2812)
                            {
                                float _2839 = _2706.x - _1953;
                                float _2840 = _2706.y - _1954;
                                float _2841 = _2706.z - _1955;
                                float _2842 = dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841));
                                float _2845 = inversesqrt(_2842);
                                float _2846 = _2845 * _2839;
                                float _2847 = _2845 * _2840;
                                float _2848 = _2845 * _2841;
                                float _2852 = 1.0 - (_2842 / (_2707 * _2707));
                                float _3772 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                                float _2853 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
                                float _2857 = sqrt(_2842) * _2722.w;
                                float _2859 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                                float _2860 = _2859 * _2859;
                                float _2863 = ((1.0 - _2860) * dot(vec3(_2846, _2847, _2848), vec3(_547, _550, _553))) + _2860;
                                float _2866 = _2857 * _2857;
                                float _2870 = (fma(_1955, _2749.z, fma(_1954, _2749.y, _2749.x * _1953)) + _2749.w) / _2811;
                                float _2871 = (fma(_1955, _2765.z, fma(_1954, _2765.y, _2765.x * _1953)) + _2765.w) / _2811;
                                float _2875 = 1.0 - dot(vec2(_2870, _2871), vec2(_2870, _2871));
                                float _3788 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                                float _2876 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2877 = _2876 * (((isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0))) * _2853) / ((_2866 * 0.699999988079071044921875) + 1.0));
                                float _2889 = exp2(log2(1.0 / ((_2866 * 3.5) + 5.0)) * 0.25);
                                float _2890 = 1.0 - _623;
                                float _2897 = sqrt(1.0 - ((1.0 - (_2890 * _2890)) * (1.0 - (_2889 * _2889))));
                                float _2898 = _2897 * _2897;
                                float _2899 = _2898 * _2898;
                                float _2900 = _2846 - _2276;
                                float _2901 = _2847 - _2277;
                                float _2902 = _2848 - _2278;
                                float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                                float _2910 = dot(vec3(_547, _550, _553), vec3((-0.0) - _2276, (-0.0) - _2277, (-0.0) - _2278));
                                float _3799 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2913 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
                                float _2914 = dot(vec3(_547, _550, _553), vec3(_2906 * _2900, _2906 * _2901, _2906 * _2902));
                                float _3810 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
                                float _2917 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                                float _2921 = ((_2917 * _2917) * (_2899 + (-1.0))) + 1.0;
                                float _2922 = _2859 * _2898;
                                float _2923 = _2922 * _2922;
                                float _2929 = ((1.0 - _2923) * dot(vec3(_547, _550, _553), vec3(_2846, _2847, _2848))) + _2923;
                                float _3821 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                                float _2931 = 1.0 - _2898;
                                float _2941 = (0.5 / (((_2930 * ((_2913 * _2931) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2930 * _2931) + _2898) * _2913))) * _2930;
                                float _3832 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                                float _2951 = (_2876 * _2853) * (((_2899 * 3.1415927410125732421875) * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) / ((_2921 * _2921) * ((_2866 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2877 * _2722.z;
                                frontier_phi_73_pred_1 = _2877 * _2722.y;
                                frontier_phi_73_pred_2 = _2877 * _2722.x;
                                frontier_phi_73_pred_3 = _2951 * _2734.z;
                                frontier_phi_73_pred_4 = _2951 * _2734.y;
                                frontier_phi_73_pred_5 = _2951 * _2734.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2960 = frontier_phi_73_pred;
                            _2959 = frontier_phi_73_pred_1;
                            _2958 = frontier_phi_73_pred_2;
                            _2957 = frontier_phi_73_pred_3;
                            _2956 = frontier_phi_73_pred_4;
                            _2955 = frontier_phi_73_pred_5;
                            _2664 = _2958 + _2677;
                            _2665 = _2959 + _2678;
                            _2666 = _2960 + _2679;
                            _2661 = _2955 + _2674;
                            _2662 = _2956 + _2675;
                            _2663 = _2957 + _2676;
                            if (_2681 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2663;
                                _2677 = _2664;
                                _2678 = _2665;
                                _2679 = _2666;
                                _2680 = _2681;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2666;
                        frontier_phi_67_pred_1 = _2665;
                        frontier_phi_67_pred_2 = _2664;
                        frontier_phi_67_pred_3 = _2663;
                        frontier_phi_67_pred_4 = _2662;
                        frontier_phi_67_pred_5 = _2661;
                    }
                    _2261 = frontier_phi_67_pred;
                    _2259 = frontier_phi_67_pred_1;
                    _2257 = frontier_phi_67_pred_2;
                    _2255 = frontier_phi_67_pred_3;
                    _2253 = frontier_phi_67_pred_4;
                    _2251 = frontier_phi_67_pred_5;
                    uint _2447 = _2446 + 1u;
                    if (_2447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2440 = _2251;
                        _2441 = _2253;
                        _2442 = _2255;
                        _2443 = _2257;
                        _2444 = _2259;
                        _2445 = _2261;
                        _2446 = _2447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2257;
                frontier_phi_49_50_ladder_1 = _2261;
                frontier_phi_49_50_ladder_2 = _2259;
                frontier_phi_49_50_ladder_3 = _2255;
                frontier_phi_49_50_ladder_4 = _2253;
                frontier_phi_49_50_ladder_5 = _2251;
            }
            else
            {
                frontier_phi_49_50_ladder = _2112;
                frontier_phi_49_50_ladder_1 = _2116;
                frontier_phi_49_50_ladder_2 = _2114;
                frontier_phi_49_50_ladder_3 = _2110;
                frontier_phi_49_50_ladder_4 = _2108;
                frontier_phi_49_50_ladder_5 = _2106;
            }
            _2250 = frontier_phi_49_50_ladder_5;
            _2252 = frontier_phi_49_50_ladder_4;
            _2254 = frontier_phi_49_50_ladder_3;
            _2256 = frontier_phi_49_50_ladder;
            _2258 = frontier_phi_49_50_ladder_2;
            _2260 = frontier_phi_49_50_ladder_1;
        }
        float _2265 = isnan(1.0) ? _607 : (isnan(_607) ? 1.0 : min(_607, 1.0));
        _2012 = (_2265 * _2256) + _1728;
        _2014 = (_2265 * _2258) + _1729;
        _2016 = (_2265 * _2260) + _1730;
        _2018 = ((_2250 * _592) * _2265) + _1895;
        _2020 = ((_2252 * _594) * _2265) + _1896;
        _2022 = ((_2254 * _595) * _2265) + _1897;
    }
    else
    {
        _2012 = _1728;
        _2014 = _1729;
        _2016 = _1730;
        _2018 = _1895;
        _2020 = _1896;
        _2022 = _1897;
    }
    uint _2028 = _568 + uint(cbMatDynParam._m0[0u].w);
    float _3848 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3859 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3870 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _2053 = (((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_2012 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _607))) + ((_2018 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + (((_416 - (_416 * _286)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2028].x);
    float _2055 = ((((_417 - (_417 * _286)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2028].y) + ((_2020 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_2014 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _607)));
    float _2057 = (((cbMtdParam._m0[9u].z * (_418 - (_418 * _286))) * cbInstanceData._m0[_2028].z) + ((_2022 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1416)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_2016 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _607)));
    uint _2061 = _566 + 6u;
    float _2069 = _525 / cbSceneParam._m0[86u].x;
    float _2070 = _526 / cbSceneParam._m0[86u].y;
    vec4 _2084 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, (log2((isnan(cbSceneParam._m0[77u].w) ? _512 : (isnan(_512) ? cbSceneParam._m0[77u].w : min(_512, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2086 = _2084.x;
    float _2087 = _2084.y;
    float _2088 = _2084.z;
    float _2089 = _2084.w;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    if (_512 > cbSceneParam._m0[78u].w)
    {
        float _2131 = isnan(_512) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _512 : min(cbSceneParam._m0[80u].w, _512));
        float _2132 = _2131 / _512;
        float _2143 = _2132 * _259;
        float _2144 = _260 * _2132;
        float _2145 = (-0.0) - _2144;
        float _2146 = _2132 * _261;
        float _2148 = (cbSceneParam._m0[77u].w * _2145) / _2131;
        float _2149 = _2148 + cbSceneParam._m0[79u].w;
        float _2150 = cbSceneParam._m0[79u].w - _2144;
        float _2156 = sqrt(((_2143 * _2143) + (_2144 * _2144)) + (_2146 * _2146));
        float _2159 = (1.0 - (cbSceneParam._m0[77u].w / _2131)) * _2156;
        float _2165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2376;
        if (abs((_2145 - _2148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2376 = ((((_2149 > 0.0) ? exp2(_2165 * _2149) : (2.0 - exp2(_2167 * _2149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2159;
        }
        else
        {
            float _2311 = 1.0 / cbSceneParam._m0[80u].x;
            float _2312 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : max(_2149, _2150));
            float _2313 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : min(_2149, _2150));
            float _2322 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : min(_2312, 0.0));
            float _2323 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : min(_2313, 0.0));
            _2376 = ((abs(_2156 / _2145) * cbSceneParam._m0[80u].y) * ((((_2322 - _2323) * 2.0) - ((exp2(_2165 * (isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0)))) - exp2(_2165 * (isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))))) * _2311)) - ((exp2(_2167 * _2322) - exp2(_2167 * _2323)) * _2311))) + (_2159 * cbSceneParam._m0[80u].z);
        }
        vec4 _2378 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, 1.0), 0.0);
        float _2387 = exp2((_2376 * (-1.44269502162933349609375)) * (1.0 - _2378.w));
        float _2388 = log2(_2387);
        float _2404 = log2(_2089);
        _2169 = (exp2(_2404 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].x)) * _2378.x) / cbSceneParam._m0[78u].x)) + _2086;
        _2171 = (exp2(_2404 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].y)) * _2378.y) / cbSceneParam._m0[78u].y)) + _2087;
        _2173 = (exp2(_2404 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2388 * cbSceneParam._m0[78u].z)) * _2378.z) / cbSceneParam._m0[78u].z)) + _2088;
        _2175 = _2387 * _2089;
    }
    else
    {
        _2169 = _2086;
        _2171 = _2087;
        _2173 = _2088;
        _2175 = _2089;
    }
    float _2187 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2188 = _2187 == 3.0;
    float _2189 = log2(_2175);
    float _2196 = exp2(_2189 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    float _2197 = exp2(_2189 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)));
    float _2198 = exp2(_2189 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)));
    float _2207 = (_2187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2207 * (_2188 ? _2196 : (_2196 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.y = _2207 * (_2188 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2171)));
    SV_Target.z = _2207 * (_2188 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2173)));
    SV_Target.w = cbInstanceData._m0[_2061].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2061].w;
}


