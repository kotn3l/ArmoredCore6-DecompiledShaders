#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1215;
float _3387;
float _3388;
float _3389;
float _3390;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _604 = 0.5 - (_294 * 0.5);
    float _614 = (((_474 - _307) + (_593 * ((_549 - _474) - (_549 * _294)))) * _604) + _307;
    float _615 = (((_475 - _309) + (_593 * ((_550 - _475) - (_550 * _294)))) * _604) + _309;
    float _616 = (((_476 - _311) + (_593 * ((_551 - _476) - (_551 * _294)))) * _604) + _311;
    vec4 _628 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _630 = _628.x;
    vec4 _642 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _646 = _642.z;
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3429 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))));
    float _657 = _646 * _294;
    float _664 = (cbMtdParam._m0[15u].w * ((_333 - _657) + ((_646 - _333) * _294))) + _657;
    float _668 = (cbMtdParam._m0[16u].x * _361) + _649;
    float _669 = (cbMtdParam._m0[16u].x * _362) + _650;
    float _672 = fma(_656, _203, fma(_669, _210, _668 * _196));
    float _675 = fma(_656, _204, fma(_669, _211, _668 * _197));
    float _678 = fma(_656, _205, fma(_669, _212, _668 * _198));
    float _682 = inversesqrt(dot(vec3(_672, _675, _678), vec3(_672, _675, _678)));
    float _683 = _682 * _672;
    float _684 = _682 * _675;
    float _685 = _682 * _678;
    float _3440 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _686 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3462 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3473 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3484 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _690 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _706 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _710 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _711 = _267 * _710;
    float _712 = _268 * _710;
    float _713 = _269 * _710;
    vec4 _718 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _720 = _718.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _896 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _902 = (cbMatDynParam._m0[5u].x * _896) + cbMatDynParam._m0[5u].y;
        float _3495 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _907 = (cbMatDynParam._m0[5u].z * _896) + cbMatDynParam._m0[5u].w;
        float _3506 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) - _903)) + _903) < ((_720 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _733 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _734 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _753 = fma(_685, cbSceneParam._m0[5u].z, fma(_684, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _683));
    float _756 = fma(_685, cbSceneParam._m0[6u].z, fma(_684, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _683));
    float _759 = fma(_685, cbSceneParam._m0[7u].z, fma(_684, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _683));
    uint _772 = uint(roundEven(NORMAL.w)) * 13u;
    uint _774 = _772 + 9u;
    uint _775 = _774 + uint(cbMatDynParam._m0[0u].w);
    float _781 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0)))) * cbInstanceData._m0[_775].x;
    float _782 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0)))) * cbInstanceData._m0[_775].y;
    float _783 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_775].z;
    float _3517 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _787 = 1.0 - _690;
    float _788 = _784 * _787;
    float _789 = _785 * _787;
    float _790 = _786 * _787;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _690;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _690;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _690;
    float _798 = _795 + 0.039999999105930328369140625;
    float _800 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    vec4 _810 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _733, cbSceneParam._m0[86u].y * _734));
    float _813 = _810.x * TEXCOORD.z;
    float _814 = dot(vec3(_683, _684, _685), vec3(_711, _712, _713));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _683) - _711;
    float _822 = (_817 * _684) - _712;
    float _823 = (_817 * _685) - _713;
    float _827 = abs(dot(vec3(_711, _712, _713), vec3(_683, _684, _685)));
    float _3550 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_686);
    float _842 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _848 = (1.0 - _842) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _849 = _842 * _829;
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1214;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _941 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _945 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _949 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _972 = _877 + _683;
        float _973 = _881 + _684;
        float _974 = _885 + _685;
        float _984 = fma(_974, cbModelParam._m0[26u].z, fma(_973, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _972)) - _941;
        float _985 = fma(_974, cbModelParam._m0[27u].z, fma(_973, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _972)) - _945;
        float _986 = fma(_974, cbModelParam._m0[28u].z, fma(_973, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _972)) - _949;
        float _990 = inversesqrt(dot(vec3(_984, _985, _986), vec3(_984, _985, _986)));
        float _1003 = ((_990 * _984) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_941 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_990 * _985) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_945 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_990 * _986) / cbModelParam._m0[34u].z) + ((((((_949 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1003, _1004, _1005), 0.0);
        float _1042 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1043 = _1042 * (_1008.x + (-0.5));
        float _1044 = _1042 * (_1008.y + (-0.5));
        float _1045 = _1042 * (_1008.z + (-0.5));
        float _1052 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1015.x + (-0.5));
        float _1054 = _1052 * (_1015.y + (-0.5));
        float _1055 = _1052 * (_1015.z + (-0.5));
        float _1062 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1022.x + (-0.5));
        float _1064 = _1062 * (_1022.y + (-0.5));
        float _1065 = _1062 * (_1022.z + (-0.5));
        float _1072 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1029.x + (-0.5));
        float _1074 = _1072 * (_1029.y + (-0.5));
        float _1075 = _1072 * (_1029.z + (-0.5));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = _1043 * 0.5;
        float _1080 = _1053 * 0.5;
        float _1081 = _1063 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1096 = (dot(vec3(_683, _684, _685), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1106 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3598 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1108 + 1.0))) + _1113) * _1076;
        float _1123 = _1044 * 0.5;
        float _1124 = _1054 * 0.5;
        float _1125 = _1064 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_683, _684, _685), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3631 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1150 + 1.0))) + _1155) * _1077;
        float _1165 = _1045 * 0.5;
        float _1166 = _1055 * 0.5;
        float _1167 = _1065 * 0.5;
        float _1168 = dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167));
        float _1173 = (_1168 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1168);
        float _1181 = (dot(vec3(_683, _684, _685), vec3(_1173 * _1165, _1173 * _1166, _1173 * _1167)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1190 = sqrt(((_1166 * _1166) + (_1165 * _1165)) + (_1167 * _1167)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1192 = _1191 * 2.0;
        float _1196 = (1.0 - _1191) / (_1191 + 1.0);
        float _3664 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1206 = ((((1.0 - _1197) * (_1192 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1192 + 1.0))) + _1197) * _1078;
        _1214 = _1045;
        _1216 = _1044;
        _1217 = _1043;
        _1218 = _1055;
        _1219 = _1054;
        _1220 = _1053;
        _1221 = _1065;
        _1222 = _1064;
        _1223 = _1063;
        _1224 = _1078;
        _1225 = _1077;
        _1226 = _1076;
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)));
    }
    else
    {
        _1214 = _1215;
        _1216 = _1215;
        _1217 = _1215;
        _1218 = _1215;
        _1219 = _1215;
        _1220 = _1215;
        _1221 = _1215;
        _1222 = _1215;
        _1223 = _1215;
        _1224 = _1215;
        _1225 = _1215;
        _1226 = _1215;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1262 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1266 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1289 = _877 + _683;
        float _1290 = _881 + _684;
        float _1291 = _885 + _685;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_683, _684, _685), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3727 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_683, _684, _685), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3760 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_683, _684, _685), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _3793 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1215;
        _1528 = _1215;
        _1529 = _1215;
        _1530 = _1215;
        _1531 = _1215;
        _1532 = _1215;
        _1533 = _1215;
        _1534 = _1215;
        _1535 = _1215;
        _1536 = _1215;
        _1537 = _1215;
        _1538 = _1215;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1227)) + _1227;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1228)) + _1228;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _821 * 0.5;
    float _1596 = _822 * 0.5;
    float _1597 = _823 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1214, _1218, _1221, _1224));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _686);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1726 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1729 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1757 = frontier_phi_41_39_ladder;
        }
        float _2139;
        if (_1726 > 0.0)
        {
            _2139 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2139 = frontier_phi_50_46_ladder;
        }
        float _2447;
        if (_1729 > 0.0)
        {
            _2447 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2447 = frontier_phi_64_57_ladder;
        }
        float _2449 = isnan(_2139) ? _1757 : (isnan(_1757) ? _2139 : min(_1757, _2139));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1723) + _1712;
        float _2455 = (_2450 * _1726) + _1716;
        float _2456 = (_2450 * _1729) + _1720;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2457;
        float _2460 = _2457 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2456 > _2460) || ((_2456 < _2458) || ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 < _2458) || (_2454 > _2460))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2598 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2456, cbModelParam._m0[9u].z, fma(_2455, cbModelParam._m0[9u].y, _2454 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2456, cbModelParam._m0[10u].z, fma(_2455, cbModelParam._m0[10u].y, _2454 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2456, cbModelParam._m0[11u].z, fma(_2455, cbModelParam._m0[11u].y, _2454 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_40_64_ladder = _2598.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2598.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2598.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_40_64_ladder_2;
        _1747 = frontier_phi_40_64_ladder_1;
        _1749 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1664);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _686);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1820 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1823 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _2144;
        if (_1817 > 0.0)
        {
            _2144 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2144 = frontier_phi_52_48_ladder;
        }
        float _2473;
        if (_1820 > 0.0)
        {
            _2473 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2473 = frontier_phi_66_59_ladder;
        }
        float _2663;
        if (_1823 > 0.0)
        {
            _2663 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2663 = frontier_phi_84_77_ladder;
        }
        float _2665 = isnan(_2473) ? _2144 : (isnan(_2144) ? _2473 : min(_2144, _2473));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1817) + _1806;
        float _2671 = (_2666 * _1820) + _1810;
        float _2672 = (_2666 * _1823) + _1814;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_49_84_ladder = _2914.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2914.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2914.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_49_84_ladder_2;
        _1844 = frontier_phi_49_84_ladder_1;
        _1846 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1754);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1859 = (((_848 * _798) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1842 - _1745)) + _1745);
    float _1861 = (((_848 * _800) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1844 - _1747)) + _1747);
    float _1863 = (((_848 * _801) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1846 - _1749)) + _1749);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    vec4 _1880 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_733, _734));
    float _1882 = _1880.w;
    float _1894 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1882);
    float _1895 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1882);
    float _1896 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1882);
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_772 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1908 = _813 + (-1.0);
    float _1911 = (cbLight._m0[_1903].x * _1908) + 1.0;
    float _1912 = (cbLight._m0[_1903].y * _1908) + 1.0;
    uint _1913 = _1902 + 5u;
    float _1919 = isnan(1.0) ? _1912 : (isnan(_1912) ? 1.0 : min(_1912, 1.0));
    uint _1923 = _1902 + 4u;
    float _1932 = isnan(1.0) ? _1911 : (isnan(_1911) ? 1.0 : min(_1911, 1.0));
    uint _1936 = _1902 | 1u;
    float _1947 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_683, _684, _685));
    float _1950 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_683, _684, _685));
    float _3929 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
    float _3940 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1955 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _1957 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * 0.3183098733425140380859375;
    float _1964 = ((cbLight._m0[_1913].x * _1919) * _1957) + (((cbLight._m0[_1923].x * _1894) * _1932) * _1955);
    float _1965 = ((_1919 * cbLight._m0[_1913].y) * _1957) + (((cbLight._m0[_1923].y * _1895) * _1932) * _1955);
    float _1966 = ((_1919 * cbLight._m0[_1913].z) * _1957) + (((cbLight._m0[_1923].z * _1896) * _1932) * _1955);
    uint _1968 = _1902 + 8u;
    float _1981 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _686) * 0.949999988079071044921875);
    float _1982 = _1981 * _1981;
    float _1983 = cbLight._m0[_1902].x + _711;
    float _1984 = cbLight._m0[_1902].y + _712;
    float _1985 = cbLight._m0[_1902].z + _713;
    float _1989 = inversesqrt(dot(vec3(_1983, _1984, _1985), vec3(_1983, _1984, _1985)));
    float _1990 = _1989 * _1983;
    float _1991 = _1989 * _1984;
    float _1992 = _1989 * _1985;
    float _1993 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1902].xyz));
    float _3951 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _1997 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1998 = dot(vec3(_683, _684, _685), vec3(_1990, _1991, _1992));
    float _3973 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_1990, _1991, _1992));
    float _3984 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1982 * _1982;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2018 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _2019 = 0.959999978542327880859375 - _795;
    float _2021 = 0.959999978542327880859375 - _796;
    float _2022 = 0.959999978542327880859375 - _797;
    float _2029 = 1.0 - _1982;
    float _2040 = (0.5 / (((_1997 * ((_1996 * _2029) + _1982)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2029) + _1982) * _1996))) * _1996;
    float _3995 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    uint _2056 = _1902 + 9u;
    float _2067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1936].w)) * _686) * 0.949999988079071044921875);
    float _2068 = _2067 * _2067;
    float _2069 = cbLight._m0[_1936].x + _711;
    float _2070 = cbLight._m0[_1936].y + _712;
    float _2071 = cbLight._m0[_1936].z + _713;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2076 = _2075 * _2069;
    float _2077 = _2075 * _2070;
    float _2078 = _2075 * _2071;
    float _2079 = dot(vec3(_683, _684, _685), vec3(cbLight._m0[_1936].xyz));
    float _4006 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _2083 = dot(vec3(_683, _684, _685), vec3(_2076, _2077, _2078));
    float _4017 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1936].xyz), vec3(_2076, _2077, _2078));
    float _4028 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2068 * _2068;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2102 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _2109 = 1.0 - _2068;
    float _2119 = (0.5 / (((_1997 * ((_2082 * _2109) + _2068)) + 9.9999999392252902907785028219223e-09) + (((_1997 * _2109) + _2068) * _2082))) * _2082;
    float _4039 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2121 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    float _2131 = (((((_2102 * _2019) + _798) * cbLight._m0[_2056].x) * _2121) * _1919) + ((((cbLight._m0[_1968].x * _1894) * ((_2018 * _2019) + _798)) * _2042) * _1932);
    float _2132 = (((((_2102 * _2021) + _800) * cbLight._m0[_2056].y) * _2121) * _1919) + ((((cbLight._m0[_1968].y * _1895) * ((_2018 * _2021) + _800)) * _2042) * _1932);
    float _2133 = (((((_2102 * _2022) + _801) * cbLight._m0[_2056].z) * _2121) * _1919) + ((((cbLight._m0[_1968].z * _1896) * ((_2018 * _2022) + _801)) * _2042) * _1932);
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_1900.y == 0u)
    {
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2188;
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2188;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2188;
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.x;
        uint _2215 = uint((float(_2203.y) * floor(float(uint(cbSceneParam._m0[85u].y * _734) / _2204))) + floor(float(uint(cbSceneParam._m0[85u].x * _733) / _2204)));
        float _2225 = (log2(_2191 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2226 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
        uint _2229 = uint(isnan(14.0) ? _2226 : (isnan(_2226) ? 14.0 : min(_2226, 14.0)));
        uvec4 _2234 = texelFetch(g_lightClusterGridBuffer, int(((_2229 << 2u) + (_2215 << 6u)) >> 2u));
        uint _2235 = _2234.x;
        uint _2236 = _2203.z;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        if (((((1u << ((_2236 >> 4u) & 15u)) + 4294967295u) & _2235) == 0u) || ((_2236 & 240u) == 0u))
        {
            _2326 = 0.0;
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
        }
        else
        {
            float _2327;
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2510 = 0.0;
            float _2511 = 0.0;
            float _2512 = 0.0;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            uint _2516 = 0u;
            uint _2525;
            bool _2526;
            for (;;)
            {
                _2525 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2516 << 2u)) >> 2u)).x;
                _2526 = _2525 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2526)
                {
                    frontier_phi_79_pred = _2515;
                    frontier_phi_79_pred_1 = _2514;
                    frontier_phi_79_pred_2 = _2513;
                    frontier_phi_79_pred_3 = _2512;
                    frontier_phi_79_pred_4 = _2511;
                    frontier_phi_79_pred_5 = _2510;
                }
                else
                {
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    float _2711;
                    uint _2712;
                    _2706 = _2510;
                    _2707 = _2511;
                    _2708 = _2512;
                    _2709 = _2513;
                    _2710 = _2514;
                    _2711 = _2515;
                    _2712 = _2525;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2716 = uint(findLSB(_2712)) + (_2516 << 5u);
                        uint _2713 = (_2712 + 4294967295u) & _2712;
                        uint _2718 = _2716 * 48u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2718)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2718 + 3u)).x));
                        uint _2738 = (_2716 * 48u) + 4u;
                        vec4 _2751 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2757 = (_2716 * 48u) + 8u;
                        vec3 _2768 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2757)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2757 + 2u)).x));
                        float _2772 = _2732.x - _2189;
                        float _2773 = _2732.y - _2190;
                        float _2774 = _2732.z - _2191;
                        float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                        float _2778 = inversesqrt(_2775);
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2782 = dot(vec3(_753, _756, _759), vec3(_2779, _2780, _2781));
                        float _2787 = 1.0 - (_2775 * _2732.w);
                        float _4060 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2789 = sqrt(_2775) * _2751.w;
                        float _2792 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                        float _2793 = _2792 * _2792;
                        float _2796 = ((1.0 - _2793) * _2782) + _2793;
                        float _2799 = _2789 * _2789;
                        float _2803 = ((isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * _2788) / ((_2799 * 0.699999988079071044921875) + 1.0);
                        float _2807 = (-0.0) - _2189;
                        float _2808 = (-0.0) - _2190;
                        float _2809 = (-0.0) - _2191;
                        float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
                        float _2814 = _2813 * _2807;
                        float _2815 = _2813 * _2808;
                        float _2816 = _2813 * _2809;
                        float _2824 = exp2(log2(1.0 / ((_2799 * 3.5) + 5.0)) * 0.25);
                        float _2825 = 1.0 - _829;
                        float _2832 = sqrt(1.0 - ((1.0 - (_2825 * _2825)) * (1.0 - (_2824 * _2824))));
                        float _2833 = _2832 * _2832;
                        float _2834 = _2833 * _2833;
                        float _2835 = _2814 + _2779;
                        float _2836 = _2815 + _2780;
                        float _2837 = _2816 + _2781;
                        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
                        float _2845 = dot(vec3(_753, _756, _759), vec3(_2814, _2815, _2816));
                        float _4076 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
                        float _2848 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2849 = dot(vec3(_753, _756, _759), vec3(_2841 * _2835, _2841 * _2836, _2841 * _2837));
                        float _4087 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2852 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2856 = ((_2852 * _2852) * (_2834 + (-1.0))) + 1.0;
                        float _2857 = _2792 * _2833;
                        float _2858 = _2857 * _2857;
                        float _2861 = ((1.0 - _2858) * _2782) + _2858;
                        float _4098 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2862 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2863 = 1.0 - _2833;
                        float _2873 = (0.5 / (((_2862 * ((_2848 * _2863) + _2833)) + 9.9999999392252902907785028219223e-09) + (((_2862 * _2863) + _2833) * _2848))) * _2862;
                        float _4109 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2884 = (((_2834 * 3.1415927410125732421875) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) / ((_2856 * _2856) * ((_2799 * 2.1991131305694580078125) + 3.141590118408203125))) * _2788;
                        _2610 = (_2803 * _2751.x) + _2709;
                        _2611 = (_2803 * _2751.y) + _2710;
                        _2612 = (_2803 * _2751.z) + _2711;
                        _2607 = (_2884 * _2768.x) + _2706;
                        _2608 = (_2884 * _2768.y) + _2707;
                        _2609 = (_2884 * _2768.z) + _2708;
                        if (_2713 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2706 = _2607;
                            _2707 = _2608;
                            _2708 = _2609;
                            _2709 = _2610;
                            _2710 = _2611;
                            _2711 = _2612;
                            _2712 = _2713;
                        }
                    }
                    frontier_phi_79_pred = _2612;
                    frontier_phi_79_pred_1 = _2611;
                    frontier_phi_79_pred_2 = _2610;
                    frontier_phi_79_pred_3 = _2609;
                    frontier_phi_79_pred_4 = _2608;
                    frontier_phi_79_pred_5 = _2607;
                }
                _2337 = frontier_phi_79_pred;
                _2335 = frontier_phi_79_pred_1;
                _2333 = frontier_phi_79_pred_2;
                _2331 = frontier_phi_79_pred_3;
                _2329 = frontier_phi_79_pred_4;
                _2327 = frontier_phi_79_pred_5;
                uint _2517 = _2516 + 1u;
                if (_2517 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2510 = _2327;
                    _2511 = _2329;
                    _2512 = _2331;
                    _2513 = _2333;
                    _2514 = _2335;
                    _2515 = _2337;
                    _2516 = _2517;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2326 = _2327;
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
        }
        uvec4 _2340 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2341 = _2340.z;
        uint _2343 = (_2341 >> 8u) & 15u;
        float _2478;
        float _2480;
        float _2482;
        float _2484;
        float _2486;
        float _2488;
        if (((4294967295u << _2343) & _2235) == 0u)
        {
            _2478 = _2326;
            _2480 = _2328;
            _2482 = _2330;
            _2484 = _2332;
            _2486 = _2334;
            _2488 = _2336;
        }
        else
        {
            float _2503 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
            float _2504 = _2503 * _2189;
            float _2505 = _2503 * _2190;
            float _2506 = _2503 * _2191;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2343 < ((_2341 >> 12u) & 15u))
            {
                float _2479;
                float _2481;
                float _2483;
                float _2485;
                float _2487;
                float _2489;
                float _2689 = _2326;
                float _2690 = _2328;
                float _2691 = _2330;
                float _2692 = _2332;
                float _2693 = _2334;
                float _2694 = _2336;
                uint _2695 = _2343;
                uint _2704;
                bool _2705;
                for (;;)
                {
                    _2704 = texelFetch(g_lightClassification, int((((_2229 << 5u) + (_2215 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                    _2705 = _2704 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2705)
                    {
                        frontier_phi_93_pred = _2693;
                        frontier_phi_93_pred_1 = _2692;
                        frontier_phi_93_pred_2 = _2691;
                        frontier_phi_93_pred_3 = _2690;
                        frontier_phi_93_pred_4 = _2689;
                        frontier_phi_93_pred_5 = _2694;
                    }
                    else
                    {
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _3212;
                        float _3213;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _2932 = _2689;
                        float _2933 = _2690;
                        float _2934 = _2691;
                        float _2935 = _2692;
                        float _2936 = _2693;
                        float _2937 = _2694;
                        uint _2938 = _2704;
                        uint _2939;
                        vec4 _2964;
                        float _2965;
                        vec4 _2980;
                        vec3 _2992;
                        vec4 _3007;
                        vec4 _3022;
                        float _3068;
                        bool _3069;
                        for (;;)
                        {
                            uint _2949 = ((_2695 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2938));
                            _2939 = (_2938 + 4294967295u) & _2938;
                            uint _2951 = _2949 * 40u;
                            _2964 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2951)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2951 + 3u)).x));
                            _2965 = _2964.w;
                            uint _2967 = (_2949 * 40u) + 4u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2949 * 40u) + 8u;
                            _2992 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x));
                            uint _2994 = (_2949 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2949 * 40u) + 20u;
                            _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3024 = (_2949 * 40u) + 24u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            uint _3043 = (_2949 * 40u) + 28u;
                            vec4 _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            _3068 = fma(_2191, _3056.z, fma(_2190, _3056.y, _3056.x * _2189)) + _3056.w;
                            _3069 = !((fma(_2191, _3037.z, fma(_2190, _3037.y, _3037.x * _2189)) + _3037.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3069)
                            {
                                float _3096 = _2964.x - _2189;
                                float _3097 = _2964.y - _2190;
                                float _3098 = _2964.z - _2191;
                                float _3099 = dot(vec3(_3096, _3097, _3098), vec3(_3096, _3097, _3098));
                                float _3102 = inversesqrt(_3099);
                                float _3103 = _3102 * _3096;
                                float _3104 = _3102 * _3097;
                                float _3105 = _3102 * _3098;
                                float _3109 = 1.0 - (_3099 / (_2965 * _2965));
                                float _4120 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3114 = sqrt(_3099) * _2980.w;
                                float _3116 = 1.39999997615814208984375 / (_3114 + 1.39999997615814208984375);
                                float _3117 = _3116 * _3116;
                                float _3120 = ((1.0 - _3117) * dot(vec3(_3103, _3104, _3105), vec3(_753, _756, _759))) + _3117;
                                float _3123 = _3114 * _3114;
                                float _3127 = (fma(_2191, _3007.z, fma(_2190, _3007.y, _3007.x * _2189)) + _3007.w) / _3068;
                                float _3128 = (fma(_2191, _3022.z, fma(_2190, _3022.y, _3022.x * _2189)) + _3022.w) / _3068;
                                float _3132 = 1.0 - dot(vec2(_3127, _3128), vec2(_3127, _3128));
                                float _4136 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3134 = _3133 * (((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3110) / ((_3123 * 0.699999988079071044921875) + 1.0));
                                float _3146 = exp2(log2(1.0 / ((_3123 * 3.5) + 5.0)) * 0.25);
                                float _3147 = 1.0 - _829;
                                float _3154 = sqrt(1.0 - ((1.0 - (_3147 * _3147)) * (1.0 - (_3146 * _3146))));
                                float _3155 = _3154 * _3154;
                                float _3156 = _3155 * _3155;
                                float _3157 = _3103 - _2504;
                                float _3158 = _3104 - _2505;
                                float _3159 = _3105 - _2506;
                                float _3163 = inversesqrt(dot(vec3(_3157, _3158, _3159), vec3(_3157, _3158, _3159)));
                                float _3167 = dot(vec3(_753, _756, _759), vec3((-0.0) - _2504, (-0.0) - _2505, (-0.0) - _2506));
                                float _4147 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3170 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3171 = dot(vec3(_753, _756, _759), vec3(_3163 * _3157, _3163 * _3158, _3163 * _3159));
                                float _4158 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3174 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3178 = ((_3174 * _3174) * (_3156 + (-1.0))) + 1.0;
                                float _3179 = _3116 * _3155;
                                float _3180 = _3179 * _3179;
                                float _3186 = ((1.0 - _3180) * dot(vec3(_753, _756, _759), vec3(_3103, _3104, _3105))) + _3180;
                                float _4169 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
                                float _3188 = 1.0 - _3155;
                                float _3198 = (0.5 / (((_3187 * ((_3170 * _3188) + _3155)) + 9.9999999392252902907785028219223e-09) + (((_3187 * _3188) + _3155) * _3170))) * _3187;
                                float _4180 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3208 = (_3133 * _3110) * (((_3156 * 3.1415927410125732421875) * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) / ((_3178 * _3178) * ((_3123 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3134 * _2980.z;
                                frontier_phi_99_pred_1 = _3134 * _2980.y;
                                frontier_phi_99_pred_2 = _3134 * _2980.x;
                                frontier_phi_99_pred_3 = _3208 * _2992.z;
                                frontier_phi_99_pred_4 = _3208 * _2992.y;
                                frontier_phi_99_pred_5 = _3208 * _2992.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3217 = frontier_phi_99_pred;
                            _3216 = frontier_phi_99_pred_1;
                            _3215 = frontier_phi_99_pred_2;
                            _3214 = frontier_phi_99_pred_3;
                            _3213 = frontier_phi_99_pred_4;
                            _3212 = frontier_phi_99_pred_5;
                            _2922 = _3215 + _2935;
                            _2923 = _3216 + _2936;
                            _2924 = _3217 + _2937;
                            _2919 = _3212 + _2932;
                            _2920 = _3213 + _2933;
                            _2921 = _3214 + _2934;
                            if (_2939 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2939;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2923;
                        frontier_phi_93_pred_1 = _2922;
                        frontier_phi_93_pred_2 = _2921;
                        frontier_phi_93_pred_3 = _2920;
                        frontier_phi_93_pred_4 = _2919;
                        frontier_phi_93_pred_5 = _2924;
                    }
                    _2487 = frontier_phi_93_pred;
                    _2485 = frontier_phi_93_pred_1;
                    _2483 = frontier_phi_93_pred_2;
                    _2481 = frontier_phi_93_pred_3;
                    _2479 = frontier_phi_93_pred_4;
                    _2489 = frontier_phi_93_pred_5;
                    uint _2696 = _2695 + 1u;
                    if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2689 = _2479;
                        _2690 = _2481;
                        _2691 = _2483;
                        _2692 = _2485;
                        _2693 = _2487;
                        _2694 = _2489;
                        _2695 = _2696;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2489;
                frontier_phi_68_69_ladder_1 = _2487;
                frontier_phi_68_69_ladder_2 = _2485;
                frontier_phi_68_69_ladder_3 = _2483;
                frontier_phi_68_69_ladder_4 = _2479;
                frontier_phi_68_69_ladder_5 = _2481;
            }
            else
            {
                frontier_phi_68_69_ladder = _2336;
                frontier_phi_68_69_ladder_1 = _2334;
                frontier_phi_68_69_ladder_2 = _2332;
                frontier_phi_68_69_ladder_3 = _2330;
                frontier_phi_68_69_ladder_4 = _2326;
                frontier_phi_68_69_ladder_5 = _2328;
            }
            _2478 = frontier_phi_68_69_ladder_4;
            _2480 = frontier_phi_68_69_ladder_5;
            _2482 = frontier_phi_68_69_ladder_3;
            _2484 = frontier_phi_68_69_ladder_2;
            _2486 = frontier_phi_68_69_ladder_1;
            _2488 = frontier_phi_68_69_ladder;
        }
        float _2493 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2248 = (_2493 * _2484) + _1964;
        _2250 = (_2493 * _2486) + _1965;
        _2252 = (_2493 * _2488) + _1966;
        _2254 = ((_2478 * _798) * _2493) + _2131;
        _2256 = ((_2480 * _800) * _2493) + _2132;
        _2258 = ((_2482 * _801) * _2493) + _2133;
    }
    else
    {
        _2248 = _1964;
        _2250 = _1965;
        _2252 = _1966;
        _2254 = _2131;
        _2256 = _2132;
        _2258 = _2133;
    }
    float _4196 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4207 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4218 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _2275 = ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2248 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _813))) + ((_2254 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2276 = ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2250 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _813))) + ((_2256 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_2252 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _813))) + ((_2258 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1653)) * cbPerFrame._m0[3u].x);
    float _2278 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2279 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2280 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    uint _2281 = _772 + 6u;
    float _2289 = _733 / cbSceneParam._m0[86u].x;
    float _2290 = _734 / cbSceneParam._m0[86u].y;
    vec4 _2304 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, (log2((isnan(cbSceneParam._m0[77u].w) ? _706 : (isnan(_706) ? cbSceneParam._m0[77u].w : min(_706, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2306 = _2304.x;
    float _2307 = _2304.y;
    float _2308 = _2304.z;
    float _2309 = _2304.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_706 > cbSceneParam._m0[78u].w)
    {
        float _2351 = isnan(_706) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _706 : min(cbSceneParam._m0[80u].w, _706));
        float _2352 = _2351 / _706;
        float _2363 = _2352 * _267;
        float _2364 = _268 * _2352;
        float _2365 = (-0.0) - _2364;
        float _2366 = _2352 * _269;
        float _2368 = (cbSceneParam._m0[77u].w * _2365) / _2351;
        float _2369 = _2368 + cbSceneParam._m0[79u].w;
        float _2370 = cbSceneParam._m0[79u].w - _2364;
        float _2376 = sqrt(((_2363 * _2363) + (_2364 * _2364)) + (_2366 * _2366));
        float _2379 = (1.0 - (cbSceneParam._m0[77u].w / _2351)) * _2376;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2365 - _2368) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2369 > 0.0) ? exp2(_2385 * _2369) : (2.0 - exp2(_2387 * _2369))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2379;
        }
        else
        {
            float _2539 = 1.0 / cbSceneParam._m0[80u].x;
            float _2540 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : max(_2369, _2370));
            float _2541 = isnan(_2370) ? _2369 : (isnan(_2369) ? _2370 : min(_2369, _2370));
            float _2550 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : min(_2540, 0.0));
            float _2551 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : min(_2541, 0.0));
            _2620 = ((abs(_2376 / _2365) * cbSceneParam._m0[80u].y) * ((((_2550 - _2551) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0))))) * _2539)) - ((exp2(_2387 * _2550) - exp2(_2387 * _2551)) * _2539))) + (_2379 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2289, _2290, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2309);
        _2389 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2306;
        _2391 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2307;
        _2393 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2308;
        _2395 = _2631 * _2309;
    }
    else
    {
        _2389 = _2306;
        _2391 = _2307;
        _2393 = _2308;
        _2395 = _2309;
    }
    bool _2658;
    vec4 _2405;
    vec4 _2427;
    float _2429;
    float _2433;
    float _2434;
    float _2435;
    float _2436;
    bool _2446;
    for (;;)
    {
        _2405 = cbMatDynParam._m0[0u];
        float _2407 = roundEven(_2405.y);
        bool _2408 = _2407 == 3.0;
        float _2409 = log2(_2395);
        float _2416 = exp2(_2409 * cbSceneParam._m0[78u].x) * _2278;
        float _2417 = exp2(_2409 * cbSceneParam._m0[78u].y) * _2279;
        float _2418 = exp2(_2409 * cbSceneParam._m0[78u].z) * _2280;
        float _2425 = _720 + (-0.5);
        _2427 = cbMtdParam._m0[1u];
        _2429 = _2427.y * _2425;
        float _2432 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2433 = _2432 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
        _2434 = _2432 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
        _2435 = _2432 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
        _2436 = _2425 * 0.999000012874603271484375;
        _2446 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2446)
        {
            if ((cbInstanceData._m0[_772 + 7u].x + _2436) < 0.5)
            {
                _2658 = true;
                break;
            }
        }
        uint _2574 = _774 + uint(_2405.w);
        if ((cbInstanceData._m0[_2574].w < 1.0) && ((cbInstanceData._m0[_2574].w + _2436) < 0.5))
        {
            _2658 = true;
            break;
        }
        if ((_2429 + 1.0) < _2427.x)
        {
            _2658 = true;
            break;
        }
        _2658 = false;
        break;
    }
    float _2889;
    if (_2658)
    {
        discard_state = true;
        _2889 = 0.0;
    }
    else
    {
        _2889 = cbInstanceData._m0[_2281].w;
    }
    SV_Target.x = _2433;
    SV_Target.y = _2434;
    SV_Target.z = _2435;
    SV_Target.w = _2889;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2281].w;
    discard_exit();
}


