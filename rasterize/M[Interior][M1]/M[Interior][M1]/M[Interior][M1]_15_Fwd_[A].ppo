#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1171;
float _3319;
float _3320;
float _3321;
float _3322;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    float _569 = 0.5 - (_290 * 0.5);
    float _579 = (((_434 - _303) + (_558 * ((_514 - _434) - (_514 * _290)))) * _569) + _303;
    float _580 = (((_435 - _305) + (_558 * ((_515 - _435) - (_515 * _290)))) * _569) + _305;
    float _581 = (((_436 - _307) + (_558 * ((_516 - _436) - (_516 * _290)))) * _569) + _307;
    vec4 _593 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _595 = _593.x;
    vec4 _607 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _615 = (_607.x * 2.0) + (-1.0);
    float _617 = (_607.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_615, _617), vec2(_615, _617));
    float _3361 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))));
    float _624 = _607.z * _290;
    float _627 = fma(_623, _199, fma(_617, _206, _615 * _192));
    float _630 = fma(_623, _200, fma(_617, _207, _615 * _193));
    float _633 = fma(_623, _201, fma(_617, _208, _615 * _194));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3372 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _641 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
    float _3383 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3394 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3405 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3416 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _645 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _666 = _263 * _665;
    float _667 = _264 * _665;
    float _668 = _265 * _665;
    vec4 _673 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _675 = _673.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _852 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _858 = (cbMatDynParam._m0[5u].x * _852) + cbMatDynParam._m0[5u].y;
        float _3427 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _863 = (cbMatDynParam._m0[5u].z * _852) + cbMatDynParam._m0[5u].w;
        float _3438 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) - _859)) + _859) < ((_675 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _712 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _715 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _728 = uint(roundEven(NORMAL.w)) * 13u;
    uint _730 = _728 + 9u;
    uint _731 = _730 + uint(cbMatDynParam._m0[0u].w);
    float _737 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0)))) * cbInstanceData._m0[_731].x;
    float _738 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0)))) * cbInstanceData._m0[_731].y;
    float _739 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0)))) * cbInstanceData._m0[_731].z;
    float _3449 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _743 = 1.0 - _645;
    float _744 = _740 * _743;
    float _745 = _741 * _743;
    float _746 = _742 * _743;
    float _751 = (_740 + (-0.039999999105930328369140625)) * _645;
    float _752 = (_741 + (-0.039999999105930328369140625)) * _645;
    float _753 = (_742 + (-0.039999999105930328369140625)) * _645;
    float _754 = _751 + 0.039999999105930328369140625;
    float _756 = _752 + 0.039999999105930328369140625;
    float _757 = _753 + 0.039999999105930328369140625;
    vec4 _766 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _769 = _766.x * TEXCOORD.z;
    float _770 = dot(vec3(_638, _639, _640), vec3(_666, _667, _668));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _638) - _666;
    float _778 = (_773 * _639) - _667;
    float _779 = (_773 * _640) - _668;
    float _783 = abs(dot(vec3(_666, _667, _668), vec3(_638, _639, _640)));
    float _3482 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_641);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _804 = (1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _805 = _798 * _785;
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _901 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _905 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _928 = _833 + _638;
        float _929 = _837 + _639;
        float _930 = _841 + _640;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_638, _639, _640), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3530 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_638, _639, _640), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3563 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_638, _639, _640), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3596 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1218 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1222 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1245 = _833 + _638;
        float _1246 = _837 + _639;
        float _1247 = _841 + _640;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_638, _639, _640), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3659 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_638, _639, _640), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3692 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_638, _639, _640), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3725 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = _1171;
        _1493 = _1171;
        _1494 = _1171;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _777 * 0.5;
    float _1552 = _778 * 0.5;
    float _1553 = _779 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1682 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1685 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1713 = frontier_phi_41_39_ladder;
        }
        float _2071;
        if (_1682 > 0.0)
        {
            _2071 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2071 = frontier_phi_50_46_ladder;
        }
        float _2379;
        if (_1685 > 0.0)
        {
            _2379 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2379 = frontier_phi_64_57_ladder;
        }
        float _2381 = isnan(_2071) ? _1713 : (isnan(_1713) ? _2071 : min(_1713, _2071));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1679) + _1668;
        float _2387 = (_2382 * _1682) + _1672;
        float _2388 = (_2382 * _1685) + _1676;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_40_64_ladder = _2530.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2530.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2530.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_40_64_ladder_2;
        _1703 = frontier_phi_40_64_ladder_1;
        _1705 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1620);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1776 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1779 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _2076;
        if (_1773 > 0.0)
        {
            _2076 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2076 = frontier_phi_52_48_ladder;
        }
        float _2405;
        if (_1776 > 0.0)
        {
            _2405 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2405 = frontier_phi_66_59_ladder;
        }
        float _2595;
        if (_1779 > 0.0)
        {
            _2595 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2595 = frontier_phi_84_77_ladder;
        }
        float _2597 = isnan(_2405) ? _2076 : (isnan(_2076) ? _2405 : min(_2076, _2405));
        float _2598 = isnan(_2595) ? _2597 : (isnan(_2597) ? _2595 : min(_2597, _2595));
        float _2602 = (_2598 * _1773) + _1762;
        float _2603 = (_2598 * _1776) + _1766;
        float _2604 = (_2598 * _1779) + _1770;
        float _2605 = _2598 * 9.9999997473787516355514526367188e-05;
        float _2606 = (-1.0) - _2605;
        float _2608 = _2605 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2604 > _2608) || ((_2604 < _2606) || ((_2603 > _2608) || ((_2603 < _2606) || ((_2602 < _2606) || (_2602 > _2608))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2846 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2604, cbModelParam._m0[17u].z, fma(_2603, cbModelParam._m0[17u].y, _2602 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2604, cbModelParam._m0[18u].z, fma(_2603, cbModelParam._m0[18u].y, _2602 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2604, cbModelParam._m0[19u].z, fma(_2603, cbModelParam._m0[19u].y, _2602 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_49_84_ladder = _2846.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2846.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2846.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_49_84_ladder_2;
        _1800 = frontier_phi_49_84_ladder_1;
        _1802 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1710);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1815 = (((_804 * _754) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1817 = (((_804 * _756) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1819 = (((_804 * _757) + _805) * _769) * ((cbModelParam._m0[1u].w * (_1802 - _1705)) + _1705);
    float _1822 = fma(_1819, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1825 = fma(_1819, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1828 = fma(_1819, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_728 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1846 = _769 + (-1.0);
    float _1849 = (cbLight._m0[_1841].x * _1846) + 1.0;
    float _1850 = (cbLight._m0[_1841].y * _1846) + 1.0;
    uint _1851 = _1840 + 5u;
    float _1857 = isnan(1.0) ? _1850 : (isnan(_1850) ? 1.0 : min(_1850, 1.0));
    uint _1861 = _1840 + 4u;
    float _1867 = isnan(1.0) ? _1849 : (isnan(_1849) ? 1.0 : min(_1849, 1.0));
    uint _1871 = _1840 | 1u;
    float _1882 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_638, _639, _640));
    float _1885 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_638, _639, _640));
    float _3861 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _3872 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1890 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
    float _1892 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
    float _1899 = ((cbLight._m0[_1851].x * _1857) * _1892) + ((cbLight._m0[_1861].x * _1867) * _1890);
    float _1900 = ((_1857 * cbLight._m0[_1851].y) * _1892) + ((_1867 * cbLight._m0[_1861].y) * _1890);
    float _1901 = ((_1857 * cbLight._m0[_1851].z) * _1892) + ((_1867 * cbLight._m0[_1861].z) * _1890);
    uint _1903 = _1840 + 8u;
    float _1916 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _641) * 0.949999988079071044921875);
    float _1917 = _1916 * _1916;
    float _1918 = cbLight._m0[_1840].x + _666;
    float _1919 = cbLight._m0[_1840].y + _667;
    float _1920 = cbLight._m0[_1840].z + _668;
    float _1924 = inversesqrt(dot(vec3(_1918, _1919, _1920), vec3(_1918, _1919, _1920)));
    float _1925 = _1924 * _1918;
    float _1926 = _1924 * _1919;
    float _1927 = _1924 * _1920;
    float _1928 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1840].xyz));
    float _3883 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1931 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    float _3894 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _1932 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
    float _1933 = dot(vec3(_638, _639, _640), vec3(_1925, _1926, _1927));
    float _3905 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1936 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _1937 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1925, _1926, _1927));
    float _3916 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = _1917 * _1917;
    float _1945 = ((_1936 * _1936) * (_1941 + (-1.0))) + 1.0;
    float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * 5.0);
    float _1954 = 0.959999978542327880859375 - _751;
    float _1956 = 0.959999978542327880859375 - _752;
    float _1957 = 0.959999978542327880859375 - _753;
    float _1964 = 1.0 - _1917;
    float _1975 = (0.5 / (((_1932 * ((_1931 * _1964) + _1917)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _1964) + _1917) * _1931))) * _1931;
    float _3927 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1941 / ((_1945 * _1945) * 3.141590118408203125));
    uint _1988 = _1840 + 9u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1871].w)) * _641) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1871].x + _666;
    float _2002 = cbLight._m0[_1871].y + _667;
    float _2003 = cbLight._m0[_1871].z + _668;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1871].xyz));
    float _3938 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _2015 = dot(vec3(_638, _639, _640), vec3(_2008, _2009, _2010));
    float _3949 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _2019 = dot(vec3(cbLight._m0[_1871].xyz), vec3(_2008, _2009, _2010));
    float _3960 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
    float _2023 = _2000 * _2000;
    float _2027 = ((_2018 * _2018) * (_2023 + (-1.0))) + 1.0;
    float _2034 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _2041 = 1.0 - _2000;
    float _2051 = (0.5 / (((_1932 * ((_2014 * _2041) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_1932 * _2041) + _2000) * _2014))) * _2014;
    float _3971 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2023 / ((_2027 * _2027) * 3.141590118408203125));
    float _2063 = (((((_2034 * _1954) + _754) * cbLight._m0[_1988].x) * _2053) * _1857) + (((((_1953 * _1954) + _754) * cbLight._m0[_1903].x) * _1977) * _1867);
    float _2064 = (((((_2034 * _1956) + _756) * cbLight._m0[_1988].y) * _2053) * _1857) + (((((_1953 * _1956) + _756) * cbLight._m0[_1903].y) * _1977) * _1867);
    float _2065 = (((((_2034 * _1957) + _757) * cbLight._m0[_1988].z) * _2053) * _1857) + (((((_1953 * _1957) + _757) * cbLight._m0[_1903].z) * _1977) * _1867);
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    float _2190;
    if (_1838.y == 0u)
    {
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2120;
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2120;
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2120;
        uvec4 _2135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2136 = _2135.x;
        uint _2147 = uint((float(_2135.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2136))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2136)));
        float _2157 = (log2(_2123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2158 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        uint _2161 = uint(isnan(14.0) ? _2158 : (isnan(_2158) ? 14.0 : min(_2158, 14.0)));
        uvec4 _2166 = texelFetch(g_lightClusterGridBuffer, int(((_2161 << 2u) + (_2147 << 6u)) >> 2u));
        uint _2167 = _2166.x;
        uint _2168 = _2135.z;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        if (((((1u << ((_2168 >> 4u) & 15u)) + 4294967295u) & _2167) == 0u) || ((_2168 & 240u) == 0u))
        {
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
        }
        else
        {
            float _2259;
            float _2261;
            float _2263;
            float _2265;
            float _2267;
            float _2269;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            uint _2448 = 0u;
            uint _2457;
            bool _2458;
            for (;;)
            {
                _2457 = texelFetch(g_lightClassification, int((((_2161 << 5u) + (_2147 << 9u)) + (_2448 << 2u)) >> 2u)).x;
                _2458 = _2457 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2458)
                {
                    frontier_phi_79_pred = _2447;
                    frontier_phi_79_pred_1 = _2446;
                    frontier_phi_79_pred_2 = _2445;
                    frontier_phi_79_pred_3 = _2444;
                    frontier_phi_79_pred_4 = _2443;
                    frontier_phi_79_pred_5 = _2442;
                }
                else
                {
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    uint _2644;
                    _2638 = _2442;
                    _2639 = _2443;
                    _2640 = _2444;
                    _2641 = _2445;
                    _2642 = _2446;
                    _2643 = _2447;
                    _2644 = _2457;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    for (;;)
                    {
                        uint _2648 = uint(findLSB(_2644)) + (_2448 << 5u);
                        uint _2645 = (_2644 + 4294967295u) & _2644;
                        uint _2650 = _2648 * 48u;
                        vec4 _2664 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 3u)).x));
                        uint _2670 = (_2648 * 48u) + 4u;
                        vec4 _2683 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2670)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2670 + 3u)).x));
                        uint _2689 = (_2648 * 48u) + 8u;
                        vec3 _2700 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2689)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2689 + 2u)).x));
                        float _2704 = _2664.x - _2121;
                        float _2705 = _2664.y - _2122;
                        float _2706 = _2664.z - _2123;
                        float _2707 = dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706));
                        float _2710 = inversesqrt(_2707);
                        float _2711 = _2710 * _2704;
                        float _2712 = _2710 * _2705;
                        float _2713 = _2710 * _2706;
                        float _2714 = dot(vec3(_709, _712, _715), vec3(_2711, _2712, _2713));
                        float _2719 = 1.0 - (_2707 * _2664.w);
                        float _3992 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2720 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                        float _2721 = sqrt(_2707) * _2683.w;
                        float _2724 = 1.39999997615814208984375 / (_2721 + 1.39999997615814208984375);
                        float _2725 = _2724 * _2724;
                        float _2728 = ((1.0 - _2725) * _2714) + _2725;
                        float _2731 = _2721 * _2721;
                        float _2735 = ((isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0))) * _2720) / ((_2731 * 0.699999988079071044921875) + 1.0);
                        float _2739 = (-0.0) - _2121;
                        float _2740 = (-0.0) - _2122;
                        float _2741 = (-0.0) - _2123;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2746 = _2745 * _2739;
                        float _2747 = _2745 * _2740;
                        float _2748 = _2745 * _2741;
                        float _2756 = exp2(log2(1.0 / ((_2731 * 3.5) + 5.0)) * 0.25);
                        float _2757 = 1.0 - _785;
                        float _2764 = sqrt(1.0 - ((1.0 - (_2757 * _2757)) * (1.0 - (_2756 * _2756))));
                        float _2765 = _2764 * _2764;
                        float _2766 = _2765 * _2765;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2769 = _2748 + _2713;
                        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
                        float _2777 = dot(vec3(_709, _712, _715), vec3(_2746, _2747, _2748));
                        float _4008 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                        float _2781 = dot(vec3(_709, _712, _715), vec3(_2773 * _2767, _2773 * _2768, _2773 * _2769));
                        float _4019 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                        float _2788 = ((_2784 * _2784) * (_2766 + (-1.0))) + 1.0;
                        float _2789 = _2724 * _2765;
                        float _2790 = _2789 * _2789;
                        float _2793 = ((1.0 - _2790) * _2714) + _2790;
                        float _4030 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2794 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                        float _2795 = 1.0 - _2765;
                        float _2805 = (0.5 / (((_2794 * ((_2780 * _2795) + _2765)) + 9.9999999392252902907785028219223e-09) + (((_2794 * _2795) + _2765) * _2780))) * _2794;
                        float _4041 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2816 = (((_2766 * 3.1415927410125732421875) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) / ((_2788 * _2788) * ((_2731 * 2.1991131305694580078125) + 3.141590118408203125))) * _2720;
                        _2542 = (_2735 * _2683.x) + _2641;
                        _2543 = (_2735 * _2683.y) + _2642;
                        _2544 = (_2735 * _2683.z) + _2643;
                        _2539 = (_2816 * _2700.x) + _2638;
                        _2540 = (_2816 * _2700.y) + _2639;
                        _2541 = (_2816 * _2700.z) + _2640;
                        if (_2645 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2638 = _2539;
                            _2639 = _2540;
                            _2640 = _2541;
                            _2641 = _2542;
                            _2642 = _2543;
                            _2643 = _2544;
                            _2644 = _2645;
                        }
                    }
                    frontier_phi_79_pred = _2544;
                    frontier_phi_79_pred_1 = _2543;
                    frontier_phi_79_pred_2 = _2542;
                    frontier_phi_79_pred_3 = _2541;
                    frontier_phi_79_pred_4 = _2540;
                    frontier_phi_79_pred_5 = _2539;
                }
                _2269 = frontier_phi_79_pred;
                _2267 = frontier_phi_79_pred_1;
                _2265 = frontier_phi_79_pred_2;
                _2263 = frontier_phi_79_pred_3;
                _2261 = frontier_phi_79_pred_4;
                _2259 = frontier_phi_79_pred_5;
                uint _2449 = _2448 + 1u;
                if (_2449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2442 = _2259;
                    _2443 = _2261;
                    _2444 = _2263;
                    _2445 = _2265;
                    _2446 = _2267;
                    _2447 = _2269;
                    _2448 = _2449;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
        }
        uvec4 _2272 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2273 = _2272.z;
        uint _2275 = (_2273 >> 8u) & 15u;
        float _2410;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        if (((4294967295u << _2275) & _2167) == 0u)
        {
            _2410 = _2258;
            _2412 = _2260;
            _2414 = _2262;
            _2416 = _2264;
            _2418 = _2266;
            _2420 = _2268;
        }
        else
        {
            float _2435 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
            float _2436 = _2435 * _2121;
            float _2437 = _2435 * _2122;
            float _2438 = _2435 * _2123;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2275 < ((_2273 >> 12u) & 15u))
            {
                float _2411;
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2621 = _2258;
                float _2622 = _2260;
                float _2623 = _2262;
                float _2624 = _2264;
                float _2625 = _2266;
                float _2626 = _2268;
                uint _2627 = _2275;
                uint _2636;
                bool _2637;
                for (;;)
                {
                    _2636 = texelFetch(g_lightClassification, int((((_2161 << 5u) + (_2147 << 9u)) + (_2627 << 2u)) >> 2u)).x;
                    _2637 = _2636 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2637)
                    {
                        frontier_phi_93_pred = _2625;
                        frontier_phi_93_pred_1 = _2624;
                        frontier_phi_93_pred_2 = _2623;
                        frontier_phi_93_pred_3 = _2622;
                        frontier_phi_93_pred_4 = _2621;
                        frontier_phi_93_pred_5 = _2626;
                    }
                    else
                    {
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _2864 = _2621;
                        float _2865 = _2622;
                        float _2866 = _2623;
                        float _2867 = _2624;
                        float _2868 = _2625;
                        float _2869 = _2626;
                        uint _2870 = _2636;
                        uint _2871;
                        vec4 _2896;
                        float _2897;
                        vec4 _2912;
                        vec3 _2924;
                        vec4 _2939;
                        vec4 _2954;
                        float _3000;
                        bool _3001;
                        for (;;)
                        {
                            uint _2881 = ((_2627 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2870));
                            _2871 = (_2870 + 4294967295u) & _2870;
                            uint _2883 = _2881 * 40u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2897 = _2896.w;
                            uint _2899 = (_2881 * 40u) + 4u;
                            _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2914 = (_2881 * 40u) + 8u;
                            _2924 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x));
                            uint _2926 = (_2881 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2941 = (_2881 * 40u) + 20u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            uint _2956 = (_2881 * 40u) + 24u;
                            vec4 _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2975 = (_2881 * 40u) + 28u;
                            vec4 _2988 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2975)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2975 + 3u)).x));
                            _3000 = fma(_2123, _2988.z, fma(_2122, _2988.y, _2988.x * _2121)) + _2988.w;
                            _3001 = !((fma(_2123, _2969.z, fma(_2122, _2969.y, _2969.x * _2121)) + _2969.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3001)
                            {
                                float _3028 = _2896.x - _2121;
                                float _3029 = _2896.y - _2122;
                                float _3030 = _2896.z - _2123;
                                float _3031 = dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030));
                                float _3034 = inversesqrt(_3031);
                                float _3035 = _3034 * _3028;
                                float _3036 = _3034 * _3029;
                                float _3037 = _3034 * _3030;
                                float _3041 = 1.0 - (_3031 / (_2897 * _2897));
                                float _4052 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3042 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                                float _3046 = sqrt(_3031) * _2912.w;
                                float _3048 = 1.39999997615814208984375 / (_3046 + 1.39999997615814208984375);
                                float _3049 = _3048 * _3048;
                                float _3052 = ((1.0 - _3049) * dot(vec3(_3035, _3036, _3037), vec3(_709, _712, _715))) + _3049;
                                float _3055 = _3046 * _3046;
                                float _3059 = (fma(_2123, _2939.z, fma(_2122, _2939.y, _2939.x * _2121)) + _2939.w) / _3000;
                                float _3060 = (fma(_2123, _2954.z, fma(_2122, _2954.y, _2954.x * _2121)) + _2954.w) / _3000;
                                float _3064 = 1.0 - dot(vec2(_3059, _3060), vec2(_3059, _3060));
                                float _4068 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
                                float _3066 = _3065 * (((isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))) * _3042) / ((_3055 * 0.699999988079071044921875) + 1.0));
                                float _3078 = exp2(log2(1.0 / ((_3055 * 3.5) + 5.0)) * 0.25);
                                float _3079 = 1.0 - _785;
                                float _3086 = sqrt(1.0 - ((1.0 - (_3079 * _3079)) * (1.0 - (_3078 * _3078))));
                                float _3087 = _3086 * _3086;
                                float _3088 = _3087 * _3087;
                                float _3089 = _3035 - _2436;
                                float _3090 = _3036 - _2437;
                                float _3091 = _3037 - _2438;
                                float _3095 = inversesqrt(dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091)));
                                float _3099 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2436, (-0.0) - _2437, (-0.0) - _2438));
                                float _4079 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3102 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
                                float _3103 = dot(vec3(_709, _712, _715), vec3(_3095 * _3089, _3095 * _3090, _3095 * _3091));
                                float _4090 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3106 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
                                float _3110 = ((_3106 * _3106) * (_3088 + (-1.0))) + 1.0;
                                float _3111 = _3048 * _3087;
                                float _3112 = _3111 * _3111;
                                float _3118 = ((1.0 - _3112) * dot(vec3(_709, _712, _715), vec3(_3035, _3036, _3037))) + _3112;
                                float _4101 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                                float _3119 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3120 = 1.0 - _3087;
                                float _3130 = (0.5 / (((_3119 * ((_3102 * _3120) + _3087)) + 9.9999999392252902907785028219223e-09) + (((_3119 * _3120) + _3087) * _3102))) * _3119;
                                float _4112 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3140 = (_3065 * _3042) * (((_3088 * 3.1415927410125732421875) * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) / ((_3110 * _3110) * ((_3055 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3066 * _2912.z;
                                frontier_phi_99_pred_1 = _3066 * _2912.y;
                                frontier_phi_99_pred_2 = _3066 * _2912.x;
                                frontier_phi_99_pred_3 = _3140 * _2924.z;
                                frontier_phi_99_pred_4 = _3140 * _2924.y;
                                frontier_phi_99_pred_5 = _3140 * _2924.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3149 = frontier_phi_99_pred;
                            _3148 = frontier_phi_99_pred_1;
                            _3147 = frontier_phi_99_pred_2;
                            _3146 = frontier_phi_99_pred_3;
                            _3145 = frontier_phi_99_pred_4;
                            _3144 = frontier_phi_99_pred_5;
                            _2854 = _3147 + _2867;
                            _2855 = _3148 + _2868;
                            _2856 = _3149 + _2869;
                            _2851 = _3144 + _2864;
                            _2852 = _3145 + _2865;
                            _2853 = _3146 + _2866;
                            if (_2871 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2871;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2855;
                        frontier_phi_93_pred_1 = _2854;
                        frontier_phi_93_pred_2 = _2853;
                        frontier_phi_93_pred_3 = _2852;
                        frontier_phi_93_pred_4 = _2851;
                        frontier_phi_93_pred_5 = _2856;
                    }
                    _2419 = frontier_phi_93_pred;
                    _2417 = frontier_phi_93_pred_1;
                    _2415 = frontier_phi_93_pred_2;
                    _2413 = frontier_phi_93_pred_3;
                    _2411 = frontier_phi_93_pred_4;
                    _2421 = frontier_phi_93_pred_5;
                    uint _2628 = _2627 + 1u;
                    if (_2628 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2621 = _2411;
                        _2622 = _2413;
                        _2623 = _2415;
                        _2624 = _2417;
                        _2625 = _2419;
                        _2626 = _2421;
                        _2627 = _2628;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2421;
                frontier_phi_68_69_ladder_1 = _2419;
                frontier_phi_68_69_ladder_2 = _2417;
                frontier_phi_68_69_ladder_3 = _2415;
                frontier_phi_68_69_ladder_4 = _2411;
                frontier_phi_68_69_ladder_5 = _2413;
            }
            else
            {
                frontier_phi_68_69_ladder = _2268;
                frontier_phi_68_69_ladder_1 = _2266;
                frontier_phi_68_69_ladder_2 = _2264;
                frontier_phi_68_69_ladder_3 = _2262;
                frontier_phi_68_69_ladder_4 = _2258;
                frontier_phi_68_69_ladder_5 = _2260;
            }
            _2410 = frontier_phi_68_69_ladder_4;
            _2412 = frontier_phi_68_69_ladder_5;
            _2414 = frontier_phi_68_69_ladder_3;
            _2416 = frontier_phi_68_69_ladder_2;
            _2418 = frontier_phi_68_69_ladder_1;
            _2420 = frontier_phi_68_69_ladder;
        }
        float _2425 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2180 = (_2425 * _2416) + _1899;
        _2182 = (_2425 * _2418) + _1900;
        _2184 = (_2425 * _2420) + _1901;
        _2186 = ((_2410 * _754) * _2425) + _2063;
        _2188 = ((_2412 * _756) * _2425) + _2064;
        _2190 = ((_2414 * _757) * _2425) + _2065;
    }
    else
    {
        _2180 = _1899;
        _2182 = _1900;
        _2184 = _1901;
        _2186 = _2063;
        _2188 = _2064;
        _2190 = _2065;
    }
    float _4128 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4139 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4150 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2207 = ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2180 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _769))) + ((_2186 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2208 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2182 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _769))) + ((_2188 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2209 = ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2184 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _769))) + ((_2190 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1609)) * cbPerFrame._m0[3u].x);
    float _2210 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2212 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    uint _2213 = _728 + 6u;
    float _2221 = _688 / cbSceneParam._m0[86u].x;
    float _2222 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2236 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2221, _2222, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2238 = _2236.x;
    float _2239 = _2236.y;
    float _2240 = _2236.z;
    float _2241 = _2236.w;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2283 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2284 = _2283 / _661;
        float _2295 = _2284 * _263;
        float _2296 = _264 * _2284;
        float _2297 = (-0.0) - _2296;
        float _2298 = _2284 * _265;
        float _2300 = (cbSceneParam._m0[77u].w * _2297) / _2283;
        float _2301 = _2300 + cbSceneParam._m0[79u].w;
        float _2302 = cbSceneParam._m0[79u].w - _2296;
        float _2308 = sqrt(((_2295 * _2295) + (_2296 * _2296)) + (_2298 * _2298));
        float _2311 = (1.0 - (cbSceneParam._m0[77u].w / _2283)) * _2308;
        float _2317 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2319 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2552;
        if (abs((_2297 - _2300) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2552 = ((((_2301 > 0.0) ? exp2(_2317 * _2301) : (2.0 - exp2(_2319 * _2301))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2311;
        }
        else
        {
            float _2471 = 1.0 / cbSceneParam._m0[80u].x;
            float _2472 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : max(_2301, _2302));
            float _2473 = isnan(_2302) ? _2301 : (isnan(_2301) ? _2302 : min(_2301, _2302));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            _2552 = ((abs(_2308 / _2297) * cbSceneParam._m0[80u].y) * ((((_2482 - _2483) * 2.0) - ((exp2(_2317 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0)))) - exp2(_2317 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0))))) * _2471)) - ((exp2(_2319 * _2482) - exp2(_2319 * _2483)) * _2471))) + (_2311 * cbSceneParam._m0[80u].z);
        }
        vec4 _2554 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2221, _2222, 1.0), 0.0);
        float _2563 = exp2((_2552 * (-1.44269502162933349609375)) * (1.0 - _2554.w));
        float _2564 = log2(_2563);
        float _2580 = log2(_2241);
        _2321 = (exp2(_2580 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].x)) * _2554.x) / cbSceneParam._m0[78u].x)) + _2238;
        _2323 = (exp2(_2580 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].y)) * _2554.y) / cbSceneParam._m0[78u].y)) + _2239;
        _2325 = (exp2(_2580 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2564 * cbSceneParam._m0[78u].z)) * _2554.z) / cbSceneParam._m0[78u].z)) + _2240;
        _2327 = _2563 * _2241;
    }
    else
    {
        _2321 = _2238;
        _2323 = _2239;
        _2325 = _2240;
        _2327 = _2241;
    }
    bool _2590;
    vec4 _2337;
    vec4 _2359;
    float _2361;
    float _2365;
    float _2366;
    float _2367;
    float _2368;
    bool _2378;
    for (;;)
    {
        _2337 = cbMatDynParam._m0[0u];
        float _2339 = roundEven(_2337.y);
        bool _2340 = _2339 == 3.0;
        float _2341 = log2(_2327);
        float _2348 = exp2(_2341 * cbSceneParam._m0[78u].x) * _2210;
        float _2349 = exp2(_2341 * cbSceneParam._m0[78u].y) * _2211;
        float _2350 = exp2(_2341 * cbSceneParam._m0[78u].z) * _2212;
        float _2357 = _675 + (-0.5);
        _2359 = cbMtdParam._m0[1u];
        _2361 = _2359.y * _2357;
        float _2364 = (_2339 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2365 = _2364 * (_2340 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2321)));
        _2366 = _2364 * (_2340 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2323)));
        _2367 = _2364 * (_2340 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2325)));
        _2368 = _2357 * 0.999000012874603271484375;
        _2378 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2378)
        {
            if ((cbInstanceData._m0[_728 + 7u].x + _2368) < 0.5)
            {
                _2590 = true;
                break;
            }
        }
        uint _2506 = _730 + uint(_2337.w);
        if ((cbInstanceData._m0[_2506].w < 1.0) && ((cbInstanceData._m0[_2506].w + _2368) < 0.5))
        {
            _2590 = true;
            break;
        }
        if ((_2361 + 1.0) < _2359.x)
        {
            _2590 = true;
            break;
        }
        _2590 = false;
        break;
    }
    float _2821;
    if (_2590)
    {
        discard_state = true;
        _2821 = 0.0;
    }
    else
    {
        _2821 = cbInstanceData._m0[_2213].w;
    }
    SV_Target.x = _2365;
    SV_Target.y = _2366;
    SV_Target.z = _2367;
    SV_Target.w = _2821;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2213].w;
    discard_exit();
}


