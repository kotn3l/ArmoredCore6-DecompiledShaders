#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _761;
uint _1936;
uint _1937;
uint _1938;
uint _2181;
uint _2182;
uint _2183;
float _2430;
float _2431;
float _2432;
float _2433;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    float _283 = cbMtdParam._m0[22u].y + _255;
    float _284 = cbMtdParam._m0[22u].z + _256;
    float _285 = cbMtdParam._m0[22u].w + _257;
    float _299 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_283, _284, _285), vec3(_197 * TANGENT.x, _197 * TANGENT.y, _197 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_283, _284, _285), vec3((-0.0) - (_190 * NORMAL.x), (-0.0) - (_190 * NORMAL.y), (-0.0) - (_190 * NORMAL.z)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    bool _328 = _306 > 0.0;
    float _330 = _328 ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = _311 + (-0.5);
    float _340 = _312 + (-0.5);
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_337 + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_340 + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _380 = cbMtdParam._m0[9u].x * _369.x;
    float _381 = cbMtdParam._m0[9u].y * _369.y;
    float _382 = cbMtdParam._m0[9u].z * _369.z;
    float _404 = (cbMtdParam._m0[21u].x * _299) * _305;
    float _406 = (cbMtdParam._m0[20u].w * _300) * _305;
    bool _407 = _404 > 0.0;
    float _412;
    if (_407)
    {
        _412 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _412 = frontier_phi_11_10_ladder;
    }
    bool _414 = _406 > 0.0;
    float _419;
    if (_414)
    {
        _419 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _419 = frontier_phi_15_14_ladder;
    }
    float _422 = _328 ? (cbMtdParam._m0[16u].z / _306) : 5000.0;
    float _423 = isnan(_419) ? _412 : (isnan(_412) ? _419 : min(_412, _419));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _432 = ((_424 * _306) + _428) / _428;
    float _437 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _439 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _455 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_424 * _404)) / _432) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_424 * _406)) / _432) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _467;
    if (_407)
    {
        _467 = (1.0 - _311) / _404;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _311) / _404;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _467 = frontier_phi_19_18_ladder;
    }
    float _473;
    if (_414)
    {
        _473 = (1.0 - _312) / _406;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _312) / _406;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _473 = frontier_phi_23_22_ladder;
    }
    float _475 = isnan(_473) ? _467 : (isnan(_467) ? _473 : min(_467, _473));
    float _476 = isnan(_422) ? _475 : (isnan(_475) ? _422 : min(_475, _422));
    float _483 = ((_476 * _306) + _428) / _428;
    vec4 _497 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_337 + (_476 * _404)) / _483) + 0.5) + _437) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_340 + (_476 * _406)) / _483) + 0.5) + _439) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _499 = _497.w;
    float _524 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _529 = _255 * _528;
    float _530 = _256 * _528;
    float _531 = _257 * _528;
    vec4 _536 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _538 = _536.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _608 = sqrt(((_255 * _255) + (_256 * _256)) + (_257 * _257));
        float _615 = (cbMatDynParam._m0[5u].x * _608) + cbMatDynParam._m0[5u].y;
        float _2472 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        float _616 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        float _620 = (cbMatDynParam._m0[5u].z * _608) + cbMatDynParam._m0[5u].w;
        float _2483 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2483 : (isnan(_2483) ? 1.0 : min(_2483, 1.0))) - _616)) + _616) < ((_538 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_551 * cbSceneParam._m0[86u].x, _552 * cbSceneParam._m0[86u].y));
    float _564 = _561.x * TEXCOORD.z;
    float _565 = (-0.0) - _529;
    float _566 = (-0.0) - _530;
    float _567 = (-0.0) - _531;
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _760;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _682 = (cbModelParam._m0[37u].x * ((((fma(_597, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _684 = (cbModelParam._m0[37u].y * ((((fma(_597, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _685 = (((((fma(_597, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_682, _684, _685), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_682, _684, _685), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_682, _684, _685), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_682, _684, _685), 0.0);
        float _722 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _743 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _753 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_709.x + (-0.5));
        float _755 = _753 * (_709.y + (-0.5));
        float _756 = _753 * (_709.z + (-0.5));
        _760 = _722 * (_688.z + (-0.5));
        _762 = _722 * (_688.y + (-0.5));
        _763 = _722 * (_688.x + (-0.5));
        _764 = _733 * (_695.z + (-0.5));
        _765 = _733 * (_695.y + (-0.5));
        _766 = _733 * (_695.x + (-0.5));
        _767 = _743 * (_702.z + (-0.5));
        _768 = _743 * (_702.y + (-0.5));
        _769 = _743 * (_702.x + (-0.5));
        _770 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        _771 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        _772 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    }
    else
    {
        _760 = _761;
        _762 = _761;
        _763 = _761;
        _764 = _761;
        _765 = _761;
        _766 = _761;
        _767 = _761;
        _768 = _761;
        _769 = _761;
        _770 = _761;
        _771 = _761;
        _772 = _761;
    }
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _829 = (cbModelParam._m0[38u].x * ((((fma(_597, cbModelParam._m0[30u].z, fma(_593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _589)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _830 = (cbModelParam._m0[38u].y * ((((fma(_597, cbModelParam._m0[31u].z, fma(_593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _589)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _831 = (((((fma(_597, cbModelParam._m0[32u].z, fma(_593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _589)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_829, _830, _831), 0.0);
        float _866 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _876 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _886 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _896 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_854.x + (-0.5));
        float _898 = _896 * (_854.y + (-0.5));
        float _899 = _896 * (_854.z + (-0.5));
        _903 = _866 * (_833.z + (-0.5));
        _904 = _866 * (_833.y + (-0.5));
        _905 = _866 * (_833.x + (-0.5));
        _906 = _876 * (_840.z + (-0.5));
        _907 = _876 * (_840.y + (-0.5));
        _908 = _876 * (_840.x + (-0.5));
        _909 = _886 * (_847.z + (-0.5));
        _910 = _886 * (_847.y + (-0.5));
        _911 = _886 * (_847.x + (-0.5));
        _912 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        _913 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        _914 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    }
    else
    {
        _903 = _761;
        _904 = _761;
        _905 = _761;
        _906 = _761;
        _907 = _761;
        _908 = _761;
        _909 = _761;
        _910 = _761;
        _911 = _761;
        _912 = _761;
        _913 = _761;
        _914 = _761;
    }
    float _929 = _529 * (-0.5);
    float _930 = _530 * (-0.5);
    float _931 = _531 * (-0.5);
    float _932 = dot(vec4(_929, _930, _931, 1.0), vec4(_905, _908, _911, _914));
    float _935 = dot(vec4(_929, _930, _931, 1.0), vec4(_904, _907, _910, _913));
    float _938 = dot(vec4(_929, _930, _931, 1.0), vec4(_903, _906, _909, _912));
    float _973;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _945 = dot(vec4(_929, _930, _931, 1.0), vec4(_760, _764, _767, _770));
        float _949 = dot(vec4(_929, _930, _931, 1.0), vec4(_762, _765, _768, _771));
        float _953 = dot(vec4(_929, _930, _931, 1.0), vec4(_763, _766, _769, _772));
        float _960 = dot(vec4(cbModelParam._m0[39u]), vec4(_929, _930, _931, 1.0));
        _973 = dot(vec3(isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)), isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)), isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_960) ? 0.0 : (isnan(0.0) ? _960 : max(0.0, _960))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _973 = 1.0;
    }
    float _984;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _975 = dot(vec4(cbModelParam._m0[40u]), vec4(_929, _930, _931, 1.0));
        _984 = dot(vec3(isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)), isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)), isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_975) ? 0.0 : (isnan(0.0) ? _975 : max(0.0, _975))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _984 = 1.0;
    }
    float _988 = (_984 * cbModelParam._m0[1u].x) + (_973 * (1.0 - cbModelParam._m0[1u].x));
    float _994 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1077;
    float _1079;
    float _1081;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1044 = fma(_597, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589)) + cbModelParam._m0[13u].w;
        float _1048 = fma(_597, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589)) + cbModelParam._m0[14u].w;
        float _1052 = fma(_597, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589)) + cbModelParam._m0[15u].w;
        float _1055 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1058 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1061 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1087;
        if (_1055 > 0.0)
        {
            _1087 = abs((1.0 - _1044) / _1055);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1055 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1044 + 1.0) / _1055);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1087 = frontier_phi_41_39_ladder;
        }
        float _1364;
        if (_1058 > 0.0)
        {
            _1364 = abs((1.0 - _1048) / _1058);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1058 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1048 + 1.0) / _1058);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1364 = frontier_phi_50_46_ladder;
        }
        float _1668;
        if (_1061 > 0.0)
        {
            _1668 = abs((1.0 - _1052) / _1061);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1061 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1052 + 1.0) / _1061);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1668 = frontier_phi_64_57_ladder;
        }
        float _1670 = isnan(_1364) ? _1087 : (isnan(_1087) ? _1364 : min(_1087, _1364));
        float _1671 = isnan(_1668) ? _1670 : (isnan(_1670) ? _1668 : min(_1670, _1668));
        float _1675 = (_1671 * _1055) + _1044;
        float _1676 = (_1671 * _1058) + _1048;
        float _1677 = (_1671 * _1061) + _1052;
        float _1678 = _1671 * 9.9999997473787516355514526367188e-05;
        float _1679 = (-1.0) - _1678;
        float _1681 = _1678 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1677 > _1681) || ((_1677 < _1679) || ((_1676 > _1681) || ((_1676 < _1679) || ((_1675 < _1679) || (_1675 > _1681))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1804 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1677, cbModelParam._m0[9u].z, fma(_1676, cbModelParam._m0[9u].y, _1675 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1677, cbModelParam._m0[10u].z, fma(_1676, cbModelParam._m0[10u].y, _1675 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1677, cbModelParam._m0[11u].z, fma(_1676, cbModelParam._m0[11u].y, _1675 * cbModelParam._m0[11u].x))), _994);
            frontier_phi_40_64_ladder = _1804.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1804.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1804.x * cbModelParam._m0[1u].y;
        }
        _1077 = frontier_phi_40_64_ladder_2;
        _1079 = frontier_phi_40_64_ladder_1;
        _1081 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1065 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _994);
        _1077 = _1065.x * cbModelParam._m0[1u].y;
        _1079 = _1065.y * cbModelParam._m0[1u].y;
        _1081 = _1065.z * cbModelParam._m0[1u].y;
    }
    float _1084 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1172;
    float _1174;
    float _1176;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1136 = fma(_597, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589)) + cbModelParam._m0[21u].w;
        float _1140 = fma(_597, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589)) + cbModelParam._m0[22u].w;
        float _1144 = fma(_597, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589)) + cbModelParam._m0[23u].w;
        float _1147 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1150 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1153 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1369;
        if (_1147 > 0.0)
        {
            _1369 = abs((1.0 - _1136) / _1147);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1147 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1136 + 1.0) / _1147);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1369 = frontier_phi_52_48_ladder;
        }
        float _1694;
        if (_1150 > 0.0)
        {
            _1694 = abs((1.0 - _1140) / _1150);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1150 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1140 + 1.0) / _1150);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1694 = frontier_phi_66_59_ladder;
        }
        float _1866;
        if (_1153 > 0.0)
        {
            _1866 = abs((1.0 - _1144) / _1153);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1153 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1144 + 1.0) / _1153);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1866 = frontier_phi_84_77_ladder;
        }
        float _1868 = isnan(_1694) ? _1369 : (isnan(_1369) ? _1694 : min(_1369, _1694));
        float _1869 = isnan(_1866) ? _1868 : (isnan(_1868) ? _1866 : min(_1868, _1866));
        float _1873 = (_1869 * _1147) + _1136;
        float _1874 = (_1869 * _1150) + _1140;
        float _1875 = (_1869 * _1153) + _1144;
        float _1876 = _1869 * 9.9999997473787516355514526367188e-05;
        float _1877 = (-1.0) - _1876;
        float _1879 = _1876 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1875 > _1879) || ((_1875 < _1877) || ((_1874 > _1879) || ((_1874 < _1877) || ((_1873 < _1877) || (_1873 > _1879))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1875, cbModelParam._m0[17u].z, fma(_1874, cbModelParam._m0[17u].y, _1873 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1875, cbModelParam._m0[18u].z, fma(_1874, cbModelParam._m0[18u].y, _1873 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1875, cbModelParam._m0[19u].z, fma(_1874, cbModelParam._m0[19u].y, _1873 * cbModelParam._m0[19u].x))), _1084);
            frontier_phi_49_84_ladder = _2044.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2044.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2044.z * cbModelParam._m0[1u].z;
        }
        _1172 = frontier_phi_49_84_ladder;
        _1174 = frontier_phi_49_84_ladder_1;
        _1176 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1156 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1084);
        _1172 = _1156.x * cbModelParam._m0[1u].z;
        _1174 = _1156.y * cbModelParam._m0[1u].z;
        _1176 = _1156.z * cbModelParam._m0[1u].z;
    }
    float _1188 = _564 * 0.01200000010430812835693359375;
    float _1190 = _1188 * ((cbModelParam._m0[1u].w * (_1172 - _1077)) + _1077);
    float _1191 = _1188 * ((cbModelParam._m0[1u].w * (_1174 - _1079)) + _1079);
    float _1192 = _1188 * ((cbModelParam._m0[1u].w * (_1176 - _1081)) + _1081);
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, _1190 * cbSceneParam._m0[91u].x));
    uint _1226 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1230 = floatBitsToUint(cbInstanceData._m0[_1226 + 5u]);
    uint _1232 = _1230.x * 14u;
    uint _1233 = _1232 + 13u;
    float _1238 = _564 + (-1.0);
    float _1242 = (cbLight._m0[_1233].x * _1238) + 1.0;
    float _1243 = (cbLight._m0[_1233].y * _1238) + 1.0;
    uint _1244 = _1232 + 8u;
    float _1255 = cbLight._m0[_1232].x + _529;
    float _1256 = cbLight._m0[_1232].y + _530;
    float _1257 = cbLight._m0[_1232].z + _531;
    float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
    float _1265 = dot(vec3(0.0), vec3(cbLight._m0[_1232].xyz));
    float _2609 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
    float _1268 = isnan(1.0) ? _2609 : (isnan(_2609) ? 1.0 : min(_2609, 1.0));
    float _1269 = dot(vec3(0.0), vec3(_529, _530, _531));
    float _2620 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1272 = isnan(1.0) ? _2620 : (isnan(_2620) ? 1.0 : min(_2620, 1.0));
    float _1273 = dot(vec3(cbLight._m0[_1232].xyz), vec3(_1255 * _1261, _1256 * _1261, _1257 * _1261));
    float _2631 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1284 = (exp2(log2(1.0 - (isnan(1.0) ? _2631 : (isnan(_2631) ? 1.0 : min(_2631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1290 = (0.5 / ((_1268 + 9.9999999392252902907785028219223e-09) + _1272)) * _1268;
    float _2642 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1292 = (isnan(1.0) ? _2642 : (isnan(_2642) ? 1.0 : min(_2642, 1.0))) * 0.31831014156341552734375;
    float _1294 = isnan(1.0) ? _1242 : (isnan(_1242) ? 1.0 : min(_1242, 1.0));
    uint _1304 = _1232 + 9u;
    uint _1310 = _1232 | 1u;
    float _1316 = cbLight._m0[_1310].x + _529;
    float _1317 = cbLight._m0[_1310].y + _530;
    float _1318 = cbLight._m0[_1310].z + _531;
    float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
    float _1326 = dot(vec3(0.0), vec3(cbLight._m0[_1310].xyz));
    float _2658 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _1329 = isnan(1.0) ? _2658 : (isnan(_2658) ? 1.0 : min(_2658, 1.0));
    float _1330 = dot(vec3(cbLight._m0[_1310].xyz), vec3(_1316 * _1322, _1317 * _1322, _1318 * _1322));
    float _2669 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1339 = (exp2(log2(1.0 - (isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1343 = (0.5 / ((_1329 + 9.9999999392252902907785028219223e-09) + _1272)) * _1329;
    float _2680 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
    float _1345 = (isnan(1.0) ? _2680 : (isnan(_2680) ? 1.0 : min(_2680, 1.0))) * 0.31831014156341552734375;
    float _1346 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
    float _1356 = (((_1339 * cbLight._m0[_1304].x) * _1345) * _1346) + (((_1284 * cbLight._m0[_1244].x) * _1292) * _1294);
    float _1357 = (((_1339 * cbLight._m0[_1304].y) * _1345) * _1346) + (((_1284 * cbLight._m0[_1244].y) * _1292) * _1294);
    float _1358 = (((_1339 * cbLight._m0[_1304].z) * _1345) * _1346) + (((_1284 * cbLight._m0[_1244].z) * _1292) * _1294);
    float _1474;
    float _1476;
    float _1478;
    if (_1230.y == 0u)
    {
        float _1414 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1415 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1414;
        float _1416 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1414;
        float _1417 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1414;
        uvec4 _1429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1430 = _1429.x;
        uint _1441 = uint((float(_1429.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _1430))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _1430)));
        float _1451 = (log2(_1417 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1452 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        uint _1455 = uint(isnan(14.0) ? _1452 : (isnan(_1452) ? 14.0 : min(_1452, 14.0)));
        uvec4 _1460 = texelFetch(g_lightClusterGridBuffer, int(((_1455 << 2u) + (_1441 << 6u)) >> 2u));
        uint _1461 = _1460.x;
        uint _1462 = _1429.z;
        float _1551;
        float _1553;
        float _1555;
        if (((((1u << ((_1462 >> 4u) & 15u)) + 4294967295u) & _1461) == 0u) || ((_1462 & 240u) == 0u))
        {
            _1551 = 0.0;
            _1553 = 0.0;
            _1555 = 0.0;
        }
        else
        {
            float _1552;
            float _1554;
            float _1556;
            float _1719 = 0.0;
            float _1720 = 0.0;
            float _1721 = 0.0;
            uint _1722 = 0u;
            uint _1731;
            bool _1732;
            for (;;)
            {
                _1731 = texelFetch(g_lightClassification, int((((_1455 << 5u) + (_1441 << 9u)) + (_1722 << 2u)) >> 2u)).x;
                _1732 = _1731 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1732)
                {
                    frontier_phi_79_pred = _1721;
                    frontier_phi_79_pred_1 = _1720;
                    frontier_phi_79_pred_2 = _1719;
                }
                else
                {
                    float _1906;
                    float _1907;
                    float _1908;
                    uint _1909;
                    _1906 = _1719;
                    _1907 = _1720;
                    _1908 = _1721;
                    _1909 = _1731;
                    float _1813;
                    float _1814;
                    float _1815;
                    for (;;)
                    {
                        uint _1913 = uint(findLSB(_1909)) + (_1722 << 5u);
                        uint _1910 = (_1909 + 4294967295u) & _1909;
                        uint _1915 = _1913 * 48u;
                        vec4 _1929 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1915)).x, texelFetch(g_PointLightRenderingBuffer, int(_1915 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1915 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1915 + 3u)).x));
                        uint _1946 = (_1913 * 48u) + 8u;
                        vec3 _1957 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1946)).x, texelFetch(g_PointLightRenderingBuffer, int(_1946 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1946 + 2u)).x));
                        float _1961 = _1929.x - _1415;
                        float _1962 = _1929.y - _1416;
                        float _1963 = _1929.z - _1417;
                        float _1964 = dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963));
                        float _1967 = inversesqrt(_1964);
                        float _1976 = 1.0 - (_1964 * _1929.w);
                        float _2706 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
                        float _1978 = sqrt(_1964) * uintBitsToFloat(uvec4(_1936, _1937, _1938, texelFetch(g_PointLightRenderingBuffer, int(((_1913 * 48u) + 4u) + 3u)).x)).w;
                        float _1981 = 1.39999997615814208984375 / (_1978 + 1.39999997615814208984375);
                        float _1982 = _1981 * _1981;
                        float _1985 = ((1.0 - _1982) * dot(vec3(0.0), vec3(_1967 * _1961, _1967 * _1962, _1967 * _1963))) + _1982;
                        float _1987 = (-0.0) - _1415;
                        float _1988 = (-0.0) - _1416;
                        float _1989 = (-0.0) - _1417;
                        float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
                        float _1997 = dot(vec3(0.0), vec3(_1993 * _1987, _1993 * _1988, _1993 * _1989));
                        float _2717 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
                        float _2728 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
                        float _2001 = isnan(1.0) ? _2728 : (isnan(_2728) ? 1.0 : min(_2728, 1.0));
                        float _2005 = (0.5 / (((isnan(1.0) ? _2717 : (isnan(_2717) ? 1.0 : min(_2717, 1.0))) + 9.9999999392252902907785028219223e-09) + _2001)) * _2001;
                        float _2739 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
                        float _2014 = (((isnan(1.0) ? _2739 : (isnan(_2739) ? 1.0 : min(_2739, 1.0))) * 3.1415927410125732421875) / (((_1978 * _1978) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2706 : (isnan(_2706) ? 1.0 : min(_2706, 1.0)));
                        _1813 = (_2014 * _1957.x) + _1906;
                        _1814 = (_2014 * _1957.y) + _1907;
                        _1815 = (_2014 * _1957.z) + _1908;
                        if (_1910 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1906 = _1813;
                            _1907 = _1814;
                            _1908 = _1815;
                            _1909 = _1910;
                        }
                    }
                    frontier_phi_79_pred = _1815;
                    frontier_phi_79_pred_1 = _1814;
                    frontier_phi_79_pred_2 = _1813;
                }
                _1556 = frontier_phi_79_pred;
                _1554 = frontier_phi_79_pred_1;
                _1552 = frontier_phi_79_pred_2;
                uint _1723 = _1722 + 1u;
                if (_1723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1719 = _1552;
                    _1720 = _1554;
                    _1721 = _1556;
                    _1722 = _1723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1551 = _1552;
            _1553 = _1554;
            _1555 = _1556;
        }
        uvec4 _1559 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1560 = _1559.z;
        uint _1562 = (_1560 >> 8u) & 15u;
        float _1699;
        float _1701;
        float _1703;
        if (((4294967295u << _1562) & _1461) == 0u)
        {
            _1699 = _1551;
            _1701 = _1553;
            _1703 = _1555;
        }
        else
        {
            float _1715 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1562 < ((_1560 >> 12u) & 15u))
            {
                float _1700;
                float _1702;
                float _1704;
                float _1892 = _1551;
                float _1893 = _1553;
                float _1894 = _1555;
                uint _1895 = _1562;
                uint _1904;
                bool _1905;
                for (;;)
                {
                    _1904 = texelFetch(g_lightClassification, int((((_1455 << 5u) + (_1441 << 9u)) + (_1895 << 2u)) >> 2u)).x;
                    _1905 = _1904 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1905)
                    {
                        frontier_phi_93_pred = _1894;
                        frontier_phi_93_pred_1 = _1893;
                        frontier_phi_93_pred_2 = _1892;
                    }
                    else
                    {
                        float _2049;
                        float _2050;
                        float _2051;
                        float _2270;
                        float _2271;
                        float _2272;
                        float _2059 = _1892;
                        float _2060 = _1893;
                        float _2061 = _1894;
                        uint _2062 = _1904;
                        uint _2063;
                        uint _2073;
                        vec4 _2088;
                        float _2089;
                        vec3 _2101;
                        vec4 _2116;
                        vec4 _2131;
                        float _2177;
                        bool _2178;
                        for (;;)
                        {
                            _2073 = ((_1895 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2062));
                            _2063 = (_2062 + 4294967295u) & _2062;
                            uint _2075 = _2073 * 40u;
                            _2088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2075 + 3u)).x));
                            _2089 = _2088.w;
                            uint _2091 = (_2073 * 40u) + 8u;
                            _2101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 2u)).x));
                            uint _2103 = (_2073 * 40u) + 16u;
                            _2116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2103 + 3u)).x));
                            uint _2118 = (_2073 * 40u) + 20u;
                            _2131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2118 + 3u)).x));
                            uint _2133 = (_2073 * 40u) + 24u;
                            vec4 _2146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2133 + 3u)).x));
                            uint _2152 = (_2073 * 40u) + 28u;
                            vec4 _2165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 3u)).x));
                            _2177 = fma(_1417, _2165.z, fma(_1416, _2165.y, _2165.x * _1415)) + _2165.w;
                            _2178 = !((fma(_1417, _2146.z, fma(_1416, _2146.y, _2146.x * _1415)) + _2146.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2178)
                            {
                                float _2212 = _2088.x - _1415;
                                float _2213 = _2088.y - _1416;
                                float _2214 = _2088.z - _1417;
                                float _2215 = dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214));
                                float _2218 = inversesqrt(_2215);
                                float _2225 = 1.0 - (_2215 / (_2089 * _2089));
                                float _2750 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
                                float _2227 = sqrt(_2215) * uintBitsToFloat(uvec4(_2181, _2182, _2183, texelFetch(g_SpotLightRenderingBuffer, int(((_2073 * 40u) + 4u) + 3u)).x)).w;
                                float _2229 = 1.39999997615814208984375 / (_2227 + 1.39999997615814208984375);
                                float _2230 = _2229 * _2229;
                                float _2233 = (fma(_1417, _2116.z, fma(_1416, _2116.y, _2116.x * _1415)) + _2116.w) / _2177;
                                float _2234 = (fma(_1417, _2131.z, fma(_1416, _2131.y, _2131.x * _1415)) + _2131.w) / _2177;
                                float _2238 = 1.0 - dot(vec2(_2233, _2234), vec2(_2233, _2234));
                                float _2761 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
                                float _2246 = dot(vec3(0.0), vec3((-0.0) - (_1415 * _1715), (-0.0) - (_1416 * _1715), (-0.0) - (_1417 * _1715)));
                                float _2772 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
                                float _2254 = ((1.0 - _2230) * dot(vec3(0.0), vec3(_2218 * _2212, _2218 * _2213, _2218 * _2214))) + _2230;
                                float _2783 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
                                float _2255 = isnan(1.0) ? _2783 : (isnan(_2783) ? 1.0 : min(_2783, 1.0));
                                float _2259 = (0.5 / (((isnan(1.0) ? _2772 : (isnan(_2772) ? 1.0 : min(_2772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2255)) * _2255;
                                float _2794 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
                                float _2266 = ((isnan(1.0) ? _2761 : (isnan(_2761) ? 1.0 : min(_2761, 1.0))) * (isnan(1.0) ? _2750 : (isnan(_2750) ? 1.0 : min(_2750, 1.0)))) * (((isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0))) * 3.1415927410125732421875) / (((_2227 * _2227) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2266 * _2101.z;
                                frontier_phi_99_pred_1 = _2266 * _2101.y;
                                frontier_phi_99_pred_2 = _2266 * _2101.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2272 = frontier_phi_99_pred;
                            _2271 = frontier_phi_99_pred_1;
                            _2270 = frontier_phi_99_pred_2;
                            _2049 = _2270 + _2059;
                            _2050 = _2271 + _2060;
                            _2051 = _2272 + _2061;
                            if (_2063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2059 = _2049;
                                _2060 = _2050;
                                _2061 = _2051;
                                _2062 = _2063;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2051;
                        frontier_phi_93_pred_1 = _2050;
                        frontier_phi_93_pred_2 = _2049;
                    }
                    _1704 = frontier_phi_93_pred;
                    _1702 = frontier_phi_93_pred_1;
                    _1700 = frontier_phi_93_pred_2;
                    uint _1896 = _1895 + 1u;
                    if (_1896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1892 = _1700;
                        _1893 = _1702;
                        _1894 = _1704;
                        _1895 = _1896;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1704;
                frontier_phi_68_69_ladder_1 = _1702;
                frontier_phi_68_69_ladder_2 = _1700;
            }
            else
            {
                frontier_phi_68_69_ladder = _1555;
                frontier_phi_68_69_ladder_1 = _1553;
                frontier_phi_68_69_ladder_2 = _1551;
            }
            _1699 = frontier_phi_68_69_ladder_2;
            _1701 = frontier_phi_68_69_ladder_1;
            _1703 = frontier_phi_68_69_ladder;
        }
        float _1708 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _1474 = ((_1699 * 0.039999999105930328369140625) * _1708) + _1356;
        _1476 = ((_1701 * 0.039999999105930328369140625) * _1708) + _1357;
        _1478 = ((_1703 * 0.039999999105930328369140625) * _1708) + _1358;
    }
    else
    {
        _1474 = _1356;
        _1476 = _1357;
        _1478 = _1358;
    }
    uint _1484 = _1226 + 9u;
    uint _1485 = _1484 + uint(cbMatDynParam._m0[0u].w);
    float _1500 = (cbInstanceData._m0[_1485].x * ((_499 * ((_455.x * cbMtdParam._m0[10u].x) - _380)) + _380)) + ((_1474 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _988)) * cbPerFrame._m0[3u].x);
    float _1501 = (cbInstanceData._m0[_1485].y * ((_499 * ((_455.y * cbMtdParam._m0[10u].y) - _381)) + _381)) + ((_1476 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _988)) * cbPerFrame._m0[3u].x);
    float _1502 = (cbInstanceData._m0[_1485].z * ((_499 * ((_455.z * cbMtdParam._m0[10u].z) - _382)) + _382)) + ((_1478 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _988)) * cbPerFrame._m0[3u].x);
    float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
    float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
    float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
    uint _1506 = _1226 + 6u;
    float _1514 = _551 / cbSceneParam._m0[86u].x;
    float _1515 = _552 / cbSceneParam._m0[86u].y;
    vec4 _1529 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1514, _1515, (log2((isnan(cbSceneParam._m0[77u].w) ? _524 : (isnan(_524) ? cbSceneParam._m0[77u].w : min(_524, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1531 = _1529.x;
    float _1532 = _1529.y;
    float _1533 = _1529.z;
    float _1534 = _1529.w;
    float _1608;
    float _1610;
    float _1612;
    float _1614;
    if (_524 > cbSceneParam._m0[78u].w)
    {
        float _1570 = isnan(_524) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _524 : min(cbSceneParam._m0[80u].w, _524));
        float _1571 = _1570 / _524;
        float _1582 = _1571 * _255;
        float _1583 = _256 * _1571;
        float _1584 = (-0.0) - _1583;
        float _1585 = _1571 * _257;
        float _1587 = (cbSceneParam._m0[77u].w * _1584) / _1570;
        float _1588 = _1587 + cbSceneParam._m0[79u].w;
        float _1589 = cbSceneParam._m0[79u].w - _1583;
        float _1595 = sqrt(((_1582 * _1582) + (_1583 * _1583)) + (_1585 * _1585));
        float _1598 = (1.0 - (cbSceneParam._m0[77u].w / _1570)) * _1595;
        float _1604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1823;
        if (abs((_1584 - _1587) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1823 = ((((_1588 > 0.0) ? exp2(_1604 * _1588) : (2.0 - exp2(_1606 * _1588))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1598;
        }
        else
        {
            float _1745 = 1.0 / cbSceneParam._m0[80u].x;
            float _1746 = isnan(_1589) ? _1588 : (isnan(_1588) ? _1589 : max(_1588, _1589));
            float _1747 = isnan(_1589) ? _1588 : (isnan(_1588) ? _1589 : min(_1588, _1589));
            float _1756 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : min(_1746, 0.0));
            float _1757 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : min(_1747, 0.0));
            _1823 = ((abs(_1595 / _1584) * cbSceneParam._m0[80u].y) * ((((_1756 - _1757) * 2.0) - ((exp2(_1604 * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)))) - exp2(_1604 * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))))) * _1745)) - ((exp2(_1606 * _1756) - exp2(_1606 * _1757)) * _1745))) + (_1598 * cbSceneParam._m0[80u].z);
        }
        vec4 _1825 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1514, _1515, 1.0), 0.0);
        float _1834 = exp2((_1823 * (-1.44269502162933349609375)) * (1.0 - _1825.w));
        float _1835 = log2(_1834);
        float _1851 = log2(_1534);
        _1608 = (exp2(_1851 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1835 * cbSceneParam._m0[78u].x)) * _1825.x) / cbSceneParam._m0[78u].x)) + _1531;
        _1610 = (exp2(_1851 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1835 * cbSceneParam._m0[78u].y)) * _1825.y) / cbSceneParam._m0[78u].y)) + _1532;
        _1612 = (exp2(_1851 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1835 * cbSceneParam._m0[78u].z)) * _1825.z) / cbSceneParam._m0[78u].z)) + _1533;
        _1614 = _1834 * _1534;
    }
    else
    {
        _1608 = _1531;
        _1610 = _1532;
        _1612 = _1533;
        _1614 = _1534;
    }
    bool _1861;
    vec4 _1624;
    vec4 _1647;
    float _1649;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    bool _1667;
    for (;;)
    {
        _1624 = cbMatDynParam._m0[0u];
        float _1626 = roundEven(_1624.y);
        bool _1627 = _1626 == 3.0;
        float _1629 = log2(_1614);
        float _1636 = exp2(_1629 * cbSceneParam._m0[78u].x) * _1503;
        float _1637 = exp2(_1629 * cbSceneParam._m0[78u].y) * _1504;
        float _1638 = exp2(_1629 * cbSceneParam._m0[78u].z) * _1505;
        float _1645 = _538 + (-0.5);
        _1647 = cbMtdParam._m0[1u];
        _1649 = _1647.y * _1645;
        float _1652 = (_1626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1653 = _1652 * (_1627 ? _1636 : (_1636 + (cbSceneParam._m0[72u].w * _1608)));
        _1654 = _1652 * (_1627 ? _1637 : (_1637 + (cbSceneParam._m0[72u].w * _1610)));
        _1655 = _1652 * (_1627 ? _1638 : (_1638 + (cbSceneParam._m0[72u].w * _1612)));
        _1656 = _1645 * 0.999000012874603271484375;
        _1667 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1667)
        {
            if ((cbInstanceData._m0[_1226 + 7u].x + _1656) < 0.5)
            {
                _1861 = true;
                break;
            }
        }
        uint _1780 = _1484 + uint(_1624.w);
        if ((cbInstanceData._m0[_1780].w < 1.0) && ((cbInstanceData._m0[_1780].w + _1656) < 0.5))
        {
            _1861 = true;
            break;
        }
        if ((_1649 + 1.0) < _1647.x)
        {
            _1861 = true;
            break;
        }
        _1861 = false;
        break;
    }
    float _2019;
    if (_1861)
    {
        discard_state = true;
        _2019 = 0.0;
    }
    else
    {
        _2019 = cbInstanceData._m0[_1506].w;
    }
    SV_Target.x = _1653;
    SV_Target.y = _1654;
    SV_Target.z = _1655;
    SV_Target.w = _2019;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1506].w;
    discard_exit();
}


