#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1173;
float _3345;
float _3346;
float _3347;
float _3348;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    float _571 = 0.5 - (_292 * 0.5);
    float _581 = (((_436 - _305) + (_560 * ((_516 - _436) - (_516 * _292)))) * _571) + _305;
    float _582 = (((_437 - _307) + (_560 * ((_517 - _437) - (_517 * _292)))) * _571) + _307;
    float _583 = (((_438 - _309) + (_560 * ((_518 - _438) - (_518 * _292)))) * _571) + _309;
    vec4 _595 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _597 = _595.x;
    vec4 _609 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _617 = (_609.x * 2.0) + (-1.0);
    float _619 = (_609.y * 2.0) + (-1.0);
    float _620 = dot(vec2(_617, _619), vec2(_617, _619));
    float _3387 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))));
    float _626 = _609.z * _292;
    float _629 = fma(_625, _201, fma(_619, _208, _617 * _194));
    float _632 = fma(_625, _202, fma(_619, _209, _617 * _195));
    float _635 = fma(_625, _203, fma(_619, _210, _617 * _196));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3398 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _643 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
    float _3409 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3420 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3431 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3442 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _647 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _663 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _667 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _668 = _265 * _667;
    float _669 = _266 * _667;
    float _670 = _267 * _667;
    vec4 _675 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _677 = _675.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _854 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _860 = (cbMatDynParam._m0[5u].x * _854) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _865 = (cbMatDynParam._m0[5u].z * _854) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _861)) + _861) < ((_677 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _714 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _717 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _732 = _730 + 9u;
    uint _733 = _732 + uint(cbMatDynParam._m0[0u].w);
    float _739 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_733].x;
    float _740 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_733].y;
    float _741 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_733].z;
    float _3475 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _745 = 1.0 - _647;
    float _746 = _742 * _745;
    float _747 = _743 * _745;
    float _748 = _744 * _745;
    float _753 = (_742 + (-0.039999999105930328369140625)) * _647;
    float _754 = (_743 + (-0.039999999105930328369140625)) * _647;
    float _755 = (_744 + (-0.039999999105930328369140625)) * _647;
    float _756 = _753 + 0.039999999105930328369140625;
    float _758 = _754 + 0.039999999105930328369140625;
    float _759 = _755 + 0.039999999105930328369140625;
    vec4 _768 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _771 = _768.x * TEXCOORD.z;
    float _772 = dot(vec3(_640, _641, _642), vec3(_668, _669, _670));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _640) - _668;
    float _780 = (_775 * _641) - _669;
    float _781 = (_775 * _642) - _670;
    float _785 = abs(dot(vec3(_668, _669, _670), vec3(_640, _641, _642)));
    float _3508 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_643);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _806 = (1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _807 = _800 * _787;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1172;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _899 = fma(_843, cbModelParam._m0[26u].z, fma(_839, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _835));
        float _903 = fma(_843, cbModelParam._m0[27u].z, fma(_839, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _835));
        float _907 = fma(_843, cbModelParam._m0[28u].z, fma(_839, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _835));
        float _930 = _835 + _640;
        float _931 = _839 + _641;
        float _932 = _843 + _642;
        float _942 = fma(_932, cbModelParam._m0[26u].z, fma(_931, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[27u].z, fma(_931, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[28u].z, fma(_931, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_899 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_903 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[34u].z) + ((((((_907 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _1000 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_966.x + (-0.5));
        float _1002 = _1000 * (_966.y + (-0.5));
        float _1003 = _1000 * (_966.z + (-0.5));
        float _1010 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_973.x + (-0.5));
        float _1012 = _1010 * (_973.y + (-0.5));
        float _1013 = _1010 * (_973.z + (-0.5));
        float _1020 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_980.x + (-0.5));
        float _1022 = _1020 * (_980.y + (-0.5));
        float _1023 = _1020 * (_980.z + (-0.5));
        float _1030 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_987.x + (-0.5));
        float _1032 = _1030 * (_987.y + (-0.5));
        float _1033 = _1030 * (_987.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1054 = (dot(vec3(_640, _641, _642), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1064 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3556 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1066 + 1.0))) + _1071) * _1034;
        float _1081 = _1002 * 0.5;
        float _1082 = _1012 * 0.5;
        float _1083 = _1022 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_640, _641, _642), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3589 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1108 + 1.0))) + _1113) * _1035;
        float _1123 = _1003 * 0.5;
        float _1124 = _1013 * 0.5;
        float _1125 = _1023 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_640, _641, _642), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3600 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3611 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3622 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1150 + 1.0))) + _1155) * _1036;
        _1172 = _1003;
        _1174 = _1002;
        _1175 = _1001;
        _1176 = _1013;
        _1177 = _1012;
        _1178 = _1011;
        _1179 = _1023;
        _1180 = _1022;
        _1181 = _1021;
        _1182 = _1036;
        _1183 = _1035;
        _1184 = _1034;
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _1173;
        _1174 = _1173;
        _1175 = _1173;
        _1176 = _1173;
        _1177 = _1173;
        _1178 = _1173;
        _1179 = _1173;
        _1180 = _1173;
        _1181 = _1173;
        _1182 = _1173;
        _1183 = _1173;
        _1184 = _1173;
        _1185 = 0.0;
        _1186 = 0.0;
        _1187 = 0.0;
    }
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1216 = fma(_843, cbModelParam._m0[30u].z, fma(_839, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _835));
        float _1220 = fma(_843, cbModelParam._m0[31u].z, fma(_839, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _835));
        float _1224 = fma(_843, cbModelParam._m0[32u].z, fma(_839, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _835));
        float _1247 = _835 + _640;
        float _1248 = _839 + _641;
        float _1249 = _843 + _642;
        float _1259 = fma(_1249, cbModelParam._m0[30u].z, fma(_1248, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1247)) - _1216;
        float _1260 = fma(_1249, cbModelParam._m0[31u].z, fma(_1248, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1247)) - _1220;
        float _1261 = fma(_1249, cbModelParam._m0[32u].z, fma(_1248, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1247)) - _1224;
        float _1265 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
        float _1278 = ((_1265 * _1259) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1216 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1265 * _1260) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1220 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1265 * _1261) / cbModelParam._m0[35u].z) + ((((((_1224 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1278, _1279, _1280), 0.0);
        float _1315 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1282.x + (-0.5));
        float _1317 = _1315 * (_1282.y + (-0.5));
        float _1318 = _1315 * (_1282.z + (-0.5));
        float _1325 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1289.x + (-0.5));
        float _1327 = _1325 * (_1289.y + (-0.5));
        float _1328 = _1325 * (_1289.z + (-0.5));
        float _1335 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1296.x + (-0.5));
        float _1337 = _1335 * (_1296.y + (-0.5));
        float _1338 = _1335 * (_1296.z + (-0.5));
        float _1345 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1303.x + (-0.5));
        float _1347 = _1345 * (_1303.y + (-0.5));
        float _1348 = _1345 * (_1303.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1368 = (dot(vec3(_640, _641, _642), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1377 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1379 = _1378 * 2.0;
        float _1383 = (1.0 - _1378) / (_1378 + 1.0);
        float _3685 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1393 = ((((1.0 - _1384) * (_1379 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1379 + 1.0))) + _1384) * _1349;
        float _1394 = _1317 * 0.5;
        float _1395 = _1327 * 0.5;
        float _1396 = _1337 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_640, _641, _642), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _3696 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3707 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _3718 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0))) * (_1421 + 1.0))) + _1426) * _1350;
        float _1436 = _1318 * 0.5;
        float _1437 = _1328 * 0.5;
        float _1438 = _1338 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_640, _641, _642), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3729 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3740 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _3751 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_1463 + 1.0))) + _1468) * _1351;
        _1485 = _1318;
        _1486 = _1317;
        _1487 = _1316;
        _1488 = _1328;
        _1489 = _1327;
        _1490 = _1326;
        _1491 = _1338;
        _1492 = _1337;
        _1493 = _1336;
        _1494 = _1351;
        _1495 = _1350;
        _1496 = _1349;
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
    }
    else
    {
        _1485 = _1173;
        _1486 = _1173;
        _1487 = _1173;
        _1488 = _1173;
        _1489 = _1173;
        _1490 = _1173;
        _1491 = _1173;
        _1492 = _1173;
        _1493 = _1173;
        _1494 = _1173;
        _1495 = _1173;
        _1496 = _1173;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1186)) + _1186;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1187)) + _1187;
    float _1532 = fma(_1511, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1511, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1511, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1509));
    float _1553 = _779 * 0.5;
    float _1554 = _780 * 0.5;
    float _1555 = _781 * 0.5;
    float _1556 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1559 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1562 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1596;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1569 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1172, _1176, _1179, _1182));
        float _1573 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1577 = dot(vec4(_1553, _1554, _1555, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1584 = dot(vec4(cbModelParam._m0[39u]), vec4(_1553, _1554, _1555, 1.0));
        _1596 = dot(vec3(isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1584) ? 0.0 : (isnan(0.0) ? _1584 : max(0.0, _1584))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1596 = 1.0;
    }
    float _1607;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1598 = dot(vec4(cbModelParam._m0[40u]), vec4(_1553, _1554, _1555, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)), isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1598) ? 0.0 : (isnan(0.0) ? _1598 : max(0.0, _1598))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1611 = (_1607 * cbModelParam._m0[1u].x) + (_1596 * (1.0 - cbModelParam._m0[1u].x));
    float _1621 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1622 = isnan(_1621) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1621 : min(cbModelParam._m0[25u].z, _1621));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1670 = fma(_843, cbModelParam._m0[13u].z, fma(_839, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _835)) + cbModelParam._m0[13u].w;
        float _1674 = fma(_843, cbModelParam._m0[14u].z, fma(_839, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _835)) + cbModelParam._m0[14u].w;
        float _1678 = fma(_843, cbModelParam._m0[15u].z, fma(_839, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _835)) + cbModelParam._m0[15u].w;
        float _1681 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1684 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1687 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1715;
        if (_1681 > 0.0)
        {
            _1715 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1715 = frontier_phi_41_39_ladder;
        }
        float _2097;
        if (_1684 > 0.0)
        {
            _2097 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2097 = frontier_phi_50_46_ladder;
        }
        float _2405;
        if (_1687 > 0.0)
        {
            _2405 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2405 = frontier_phi_64_57_ladder;
        }
        float _2407 = isnan(_2097) ? _1715 : (isnan(_1715) ? _2097 : min(_1715, _2097));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1681) + _1670;
        float _2413 = (_2408 * _1684) + _1674;
        float _2414 = (_2408 * _1687) + _1678;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2414, cbModelParam._m0[9u].z, fma(_2413, cbModelParam._m0[9u].y, _2412 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2414, cbModelParam._m0[10u].z, fma(_2413, cbModelParam._m0[10u].y, _2412 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2414, cbModelParam._m0[11u].z, fma(_2413, cbModelParam._m0[11u].y, _2412 * cbModelParam._m0[11u].x))), _1622);
            frontier_phi_40_64_ladder = _2556.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2556.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2556.x * cbModelParam._m0[1u].y;
        }
        _1703 = frontier_phi_40_64_ladder_2;
        _1705 = frontier_phi_40_64_ladder_1;
        _1707 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1622);
        _1703 = _1691.x * cbModelParam._m0[1u].y;
        _1705 = _1691.y * cbModelParam._m0[1u].y;
        _1707 = _1691.z * cbModelParam._m0[1u].y;
    }
    float _1711 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1711 : min(cbModelParam._m0[25u].w, _1711));
    float _1800;
    float _1802;
    float _1804;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1764 = fma(_843, cbModelParam._m0[21u].z, fma(_839, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _835)) + cbModelParam._m0[21u].w;
        float _1768 = fma(_843, cbModelParam._m0[22u].z, fma(_839, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _835)) + cbModelParam._m0[22u].w;
        float _1772 = fma(_843, cbModelParam._m0[23u].z, fma(_839, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _835)) + cbModelParam._m0[23u].w;
        float _1775 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1778 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1781 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _2102;
        if (_1775 > 0.0)
        {
            _2102 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2102 = frontier_phi_52_48_ladder;
        }
        float _2431;
        if (_1778 > 0.0)
        {
            _2431 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2431 = frontier_phi_66_59_ladder;
        }
        float _2621;
        if (_1781 > 0.0)
        {
            _2621 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2621 = frontier_phi_84_77_ladder;
        }
        float _2623 = isnan(_2431) ? _2102 : (isnan(_2102) ? _2431 : min(_2102, _2431));
        float _2624 = isnan(_2621) ? _2623 : (isnan(_2623) ? _2621 : min(_2623, _2621));
        float _2628 = (_2624 * _1775) + _1764;
        float _2629 = (_2624 * _1778) + _1768;
        float _2630 = (_2624 * _1781) + _1772;
        float _2631 = _2624 * 9.9999997473787516355514526367188e-05;
        float _2632 = (-1.0) - _2631;
        float _2634 = _2631 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2630 > _2634) || ((_2630 < _2632) || ((_2629 > _2634) || ((_2629 < _2632) || ((_2628 < _2632) || (_2628 > _2634))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2630, cbModelParam._m0[17u].z, fma(_2629, cbModelParam._m0[17u].y, _2628 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2630, cbModelParam._m0[18u].z, fma(_2629, cbModelParam._m0[18u].y, _2628 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2630, cbModelParam._m0[19u].z, fma(_2629, cbModelParam._m0[19u].y, _2628 * cbModelParam._m0[19u].x))), _1712);
            frontier_phi_49_84_ladder = _2872.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2872.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2872.x * cbModelParam._m0[1u].z;
        }
        _1800 = frontier_phi_49_84_ladder_2;
        _1802 = frontier_phi_49_84_ladder_1;
        _1804 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1712);
        _1800 = _1784.x * cbModelParam._m0[1u].z;
        _1802 = _1784.y * cbModelParam._m0[1u].z;
        _1804 = _1784.z * cbModelParam._m0[1u].z;
    }
    float _1817 = (((_806 * _756) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1800 - _1703)) + _1703);
    float _1819 = (((_806 * _758) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1802 - _1705)) + _1705);
    float _1821 = (((_806 * _759) + _807) * _771) * ((cbModelParam._m0[1u].w * (_1804 - _1707)) + _1707);
    float _1824 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1817 * cbSceneParam._m0[89u].x));
    float _1827 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1817 * cbSceneParam._m0[90u].x));
    float _1830 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1817 * cbSceneParam._m0[91u].x));
    vec4 _1838 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_690, _691));
    float _1840 = _1838.w;
    float _1852 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1840);
    float _1853 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1840);
    float _1854 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1840);
    uvec4 _1858 = floatBitsToUint(cbInstanceData._m0[_730 + 5u]);
    uint _1860 = _1858.x * 14u;
    uint _1861 = _1860 + 13u;
    float _1866 = _771 + (-1.0);
    float _1869 = (cbLight._m0[_1861].x * _1866) + 1.0;
    float _1870 = (cbLight._m0[_1861].y * _1866) + 1.0;
    uint _1871 = _1860 + 5u;
    float _1877 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
    uint _1881 = _1860 + 4u;
    float _1890 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
    uint _1894 = _1860 | 1u;
    float _1905 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_640, _641, _642));
    float _1908 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_640, _641, _642));
    float _3887 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _3898 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1913 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.3183098733425140380859375;
    float _1915 = (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * 0.3183098733425140380859375;
    float _1922 = ((cbLight._m0[_1871].x * _1877) * _1915) + (((cbLight._m0[_1881].x * _1852) * _1890) * _1913);
    float _1923 = ((_1877 * cbLight._m0[_1871].y) * _1915) + (((cbLight._m0[_1881].y * _1853) * _1890) * _1913);
    float _1924 = ((_1877 * cbLight._m0[_1871].z) * _1915) + (((cbLight._m0[_1881].z * _1854) * _1890) * _1913);
    uint _1926 = _1860 + 8u;
    float _1939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _643) * 0.949999988079071044921875);
    float _1940 = _1939 * _1939;
    float _1941 = cbLight._m0[_1860].x + _668;
    float _1942 = cbLight._m0[_1860].y + _669;
    float _1943 = cbLight._m0[_1860].z + _670;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1948 = _1947 * _1941;
    float _1949 = _1947 * _1942;
    float _1950 = _1947 * _1943;
    float _1951 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1860].xyz));
    float _3909 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _1955 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _1956 = dot(vec3(_640, _641, _642), vec3(_1948, _1949, _1950));
    float _3931 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _1960 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_1948, _1949, _1950));
    float _3942 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
    float _1964 = _1940 * _1940;
    float _1968 = ((_1959 * _1959) * (_1964 + (-1.0))) + 1.0;
    float _1976 = exp2(log2(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0)))) * 5.0);
    float _1977 = 0.959999978542327880859375 - _753;
    float _1979 = 0.959999978542327880859375 - _754;
    float _1980 = 0.959999978542327880859375 - _755;
    float _1987 = 1.0 - _1940;
    float _1998 = (0.5 / (((_1955 * ((_1954 * _1987) + _1940)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _1987) + _1940) * _1954))) * _1954;
    float _3953 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2000 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1964 / ((_1968 * _1968) * 3.141590118408203125));
    uint _2014 = _1860 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1894].w)) * _643) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1894].x + _668;
    float _2028 = cbLight._m0[_1894].y + _669;
    float _2029 = cbLight._m0[_1894].z + _670;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1894].xyz));
    float _3964 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _2041 = dot(vec3(_640, _641, _642), vec3(_2034, _2035, _2036));
    float _3975 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1894].xyz), vec3(_2034, _2035, _2036));
    float _3986 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2060 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
    float _2067 = 1.0 - _2026;
    float _2077 = (0.5 / (((_1955 * ((_2040 * _2067) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1955 * _2067) + _2026) * _2040))) * _2040;
    float _3997 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2079 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2089 = (((((_2060 * _1977) + _756) * cbLight._m0[_2014].x) * _2079) * _1877) + ((((cbLight._m0[_1926].x * _1852) * ((_1976 * _1977) + _756)) * _2000) * _1890);
    float _2090 = (((((_2060 * _1979) + _758) * cbLight._m0[_2014].y) * _2079) * _1877) + ((((cbLight._m0[_1926].y * _1853) * ((_1976 * _1979) + _758)) * _2000) * _1890);
    float _2091 = (((((_2060 * _1980) + _759) * cbLight._m0[_2014].z) * _2079) * _1877) + ((((cbLight._m0[_1926].z * _1854) * ((_1976 * _1980) + _759)) * _2000) * _1890);
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    if (_1858.y == 0u)
    {
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2147 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2146;
        float _2148 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2146;
        float _2149 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2146;
        uvec4 _2161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2162 = _2161.x;
        uint _2173 = uint((float(_2161.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2162))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2162)));
        float _2183 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2184 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        uint _2187 = uint(isnan(14.0) ? _2184 : (isnan(_2184) ? 14.0 : min(_2184, 14.0)));
        uvec4 _2192 = texelFetch(g_lightClusterGridBuffer, int(((_2187 << 2u) + (_2173 << 6u)) >> 2u));
        uint _2193 = _2192.x;
        uint _2194 = _2161.z;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        float _2294;
        if (((((1u << ((_2194 >> 4u) & 15u)) + 4294967295u) & _2193) == 0u) || ((_2194 & 240u) == 0u))
        {
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
        }
        else
        {
            float _2285;
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2295;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            uint _2474 = 0u;
            uint _2483;
            bool _2484;
            for (;;)
            {
                _2483 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2474 << 2u)) >> 2u)).x;
                _2484 = _2483 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2484)
                {
                    frontier_phi_79_pred = _2473;
                    frontier_phi_79_pred_1 = _2472;
                    frontier_phi_79_pred_2 = _2471;
                    frontier_phi_79_pred_3 = _2470;
                    frontier_phi_79_pred_4 = _2469;
                    frontier_phi_79_pred_5 = _2468;
                }
                else
                {
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    uint _2670;
                    _2664 = _2468;
                    _2665 = _2469;
                    _2666 = _2470;
                    _2667 = _2471;
                    _2668 = _2472;
                    _2669 = _2473;
                    _2670 = _2483;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    for (;;)
                    {
                        uint _2674 = uint(findLSB(_2670)) + (_2474 << 5u);
                        uint _2671 = (_2670 + 4294967295u) & _2670;
                        uint _2676 = _2674 * 48u;
                        vec4 _2690 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 3u)).x));
                        uint _2696 = (_2674 * 48u) + 4u;
                        vec4 _2709 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2696)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2696 + 3u)).x));
                        uint _2715 = (_2674 * 48u) + 8u;
                        vec3 _2726 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2715)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2715 + 2u)).x));
                        float _2730 = _2690.x - _2147;
                        float _2731 = _2690.y - _2148;
                        float _2732 = _2690.z - _2149;
                        float _2733 = dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732));
                        float _2736 = inversesqrt(_2733);
                        float _2737 = _2736 * _2730;
                        float _2738 = _2736 * _2731;
                        float _2739 = _2736 * _2732;
                        float _2740 = dot(vec3(_711, _714, _717), vec3(_2737, _2738, _2739));
                        float _2745 = 1.0 - (_2733 * _2690.w);
                        float _4018 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                        float _2746 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2747 = sqrt(_2733) * _2709.w;
                        float _2750 = 1.39999997615814208984375 / (_2747 + 1.39999997615814208984375);
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2740) + _2751;
                        float _2757 = _2747 * _2747;
                        float _2761 = ((isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0))) * _2746) / ((_2757 * 0.699999988079071044921875) + 1.0);
                        float _2765 = (-0.0) - _2147;
                        float _2766 = (-0.0) - _2148;
                        float _2767 = (-0.0) - _2149;
                        float _2771 = inversesqrt(dot(vec3(_2765, _2766, _2767), vec3(_2765, _2766, _2767)));
                        float _2772 = _2771 * _2765;
                        float _2773 = _2771 * _2766;
                        float _2774 = _2771 * _2767;
                        float _2782 = exp2(log2(1.0 / ((_2757 * 3.5) + 5.0)) * 0.25);
                        float _2783 = 1.0 - _787;
                        float _2790 = sqrt(1.0 - ((1.0 - (_2783 * _2783)) * (1.0 - (_2782 * _2782))));
                        float _2791 = _2790 * _2790;
                        float _2792 = _2791 * _2791;
                        float _2793 = _2772 + _2737;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2803 = dot(vec3(_711, _714, _717), vec3(_2772, _2773, _2774));
                        float _4034 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2806 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2807 = dot(vec3(_711, _714, _717), vec3(_2799 * _2793, _2799 * _2794, _2799 * _2795));
                        float _4045 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2810 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2814 = ((_2810 * _2810) * (_2792 + (-1.0))) + 1.0;
                        float _2815 = _2750 * _2791;
                        float _2816 = _2815 * _2815;
                        float _2819 = ((1.0 - _2816) * _2740) + _2816;
                        float _4056 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
                        float _2820 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2821 = 1.0 - _2791;
                        float _2831 = (0.5 / (((_2820 * ((_2806 * _2821) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2820 * _2821) + _2791) * _2806))) * _2820;
                        float _4067 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2842 = (((_2792 * 3.1415927410125732421875) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) / ((_2814 * _2814) * ((_2757 * 2.1991131305694580078125) + 3.141590118408203125))) * _2746;
                        _2568 = (_2761 * _2709.x) + _2667;
                        _2569 = (_2761 * _2709.y) + _2668;
                        _2570 = (_2761 * _2709.z) + _2669;
                        _2565 = (_2842 * _2726.x) + _2664;
                        _2566 = (_2842 * _2726.y) + _2665;
                        _2567 = (_2842 * _2726.z) + _2666;
                        if (_2671 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2664 = _2565;
                            _2665 = _2566;
                            _2666 = _2567;
                            _2667 = _2568;
                            _2668 = _2569;
                            _2669 = _2570;
                            _2670 = _2671;
                        }
                    }
                    frontier_phi_79_pred = _2570;
                    frontier_phi_79_pred_1 = _2569;
                    frontier_phi_79_pred_2 = _2568;
                    frontier_phi_79_pred_3 = _2567;
                    frontier_phi_79_pred_4 = _2566;
                    frontier_phi_79_pred_5 = _2565;
                }
                _2295 = frontier_phi_79_pred;
                _2293 = frontier_phi_79_pred_1;
                _2291 = frontier_phi_79_pred_2;
                _2289 = frontier_phi_79_pred_3;
                _2287 = frontier_phi_79_pred_4;
                _2285 = frontier_phi_79_pred_5;
                uint _2475 = _2474 + 1u;
                if (_2475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2468 = _2285;
                    _2469 = _2287;
                    _2470 = _2289;
                    _2471 = _2291;
                    _2472 = _2293;
                    _2473 = _2295;
                    _2474 = _2475;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
        }
        uvec4 _2298 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2299 = _2298.z;
        uint _2301 = (_2299 >> 8u) & 15u;
        float _2436;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        if (((4294967295u << _2301) & _2193) == 0u)
        {
            _2436 = _2284;
            _2438 = _2286;
            _2440 = _2288;
            _2442 = _2290;
            _2444 = _2292;
            _2446 = _2294;
        }
        else
        {
            float _2461 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _2462 = _2461 * _2147;
            float _2463 = _2461 * _2148;
            float _2464 = _2461 * _2149;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2301 < ((_2299 >> 12u) & 15u))
            {
                float _2437;
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2647 = _2284;
                float _2648 = _2286;
                float _2649 = _2288;
                float _2650 = _2290;
                float _2651 = _2292;
                float _2652 = _2294;
                uint _2653 = _2301;
                uint _2662;
                bool _2663;
                for (;;)
                {
                    _2662 = texelFetch(g_lightClassification, int((((_2187 << 5u) + (_2173 << 9u)) + (_2653 << 2u)) >> 2u)).x;
                    _2663 = _2662 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2663)
                    {
                        frontier_phi_93_pred = _2651;
                        frontier_phi_93_pred_1 = _2650;
                        frontier_phi_93_pred_2 = _2649;
                        frontier_phi_93_pred_3 = _2648;
                        frontier_phi_93_pred_4 = _2647;
                        frontier_phi_93_pred_5 = _2652;
                    }
                    else
                    {
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _2890 = _2647;
                        float _2891 = _2648;
                        float _2892 = _2649;
                        float _2893 = _2650;
                        float _2894 = _2651;
                        float _2895 = _2652;
                        uint _2896 = _2662;
                        uint _2897;
                        vec4 _2922;
                        float _2923;
                        vec4 _2938;
                        vec3 _2950;
                        vec4 _2965;
                        vec4 _2980;
                        float _3026;
                        bool _3027;
                        for (;;)
                        {
                            uint _2907 = ((_2653 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2896));
                            _2897 = (_2896 + 4294967295u) & _2896;
                            uint _2909 = _2907 * 40u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2923 = _2922.w;
                            uint _2925 = (_2907 * 40u) + 4u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            uint _2940 = (_2907 * 40u) + 8u;
                            _2950 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x));
                            uint _2952 = (_2907 * 40u) + 16u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2967 = (_2907 * 40u) + 20u;
                            _2980 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 3u)).x));
                            uint _2982 = (_2907 * 40u) + 24u;
                            vec4 _2995 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2982)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2982 + 3u)).x));
                            uint _3001 = (_2907 * 40u) + 28u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            _3026 = fma(_2149, _3014.z, fma(_2148, _3014.y, _3014.x * _2147)) + _3014.w;
                            _3027 = !((fma(_2149, _2995.z, fma(_2148, _2995.y, _2995.x * _2147)) + _2995.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3027)
                            {
                                float _3054 = _2922.x - _2147;
                                float _3055 = _2922.y - _2148;
                                float _3056 = _2922.z - _2149;
                                float _3057 = dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056));
                                float _3060 = inversesqrt(_3057);
                                float _3061 = _3060 * _3054;
                                float _3062 = _3060 * _3055;
                                float _3063 = _3060 * _3056;
                                float _3067 = 1.0 - (_3057 / (_2923 * _2923));
                                float _4078 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3068 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3072 = sqrt(_3057) * _2938.w;
                                float _3074 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                                float _3075 = _3074 * _3074;
                                float _3078 = ((1.0 - _3075) * dot(vec3(_3061, _3062, _3063), vec3(_711, _714, _717))) + _3075;
                                float _3081 = _3072 * _3072;
                                float _3085 = (fma(_2149, _2965.z, fma(_2148, _2965.y, _2965.x * _2147)) + _2965.w) / _3026;
                                float _3086 = (fma(_2149, _2980.z, fma(_2148, _2980.y, _2980.x * _2147)) + _2980.w) / _3026;
                                float _3090 = 1.0 - dot(vec2(_3085, _3086), vec2(_3085, _3086));
                                float _4094 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3092 = _3091 * (((isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))) * _3068) / ((_3081 * 0.699999988079071044921875) + 1.0));
                                float _3104 = exp2(log2(1.0 / ((_3081 * 3.5) + 5.0)) * 0.25);
                                float _3105 = 1.0 - _787;
                                float _3112 = sqrt(1.0 - ((1.0 - (_3105 * _3105)) * (1.0 - (_3104 * _3104))));
                                float _3113 = _3112 * _3112;
                                float _3114 = _3113 * _3113;
                                float _3115 = _3061 - _2462;
                                float _3116 = _3062 - _2463;
                                float _3117 = _3063 - _2464;
                                float _3121 = inversesqrt(dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117)));
                                float _3125 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2462, (-0.0) - _2463, (-0.0) - _2464));
                                float _4105 = isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0));
                                float _3128 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3129 = dot(vec3(_711, _714, _717), vec3(_3121 * _3115, _3121 * _3116, _3121 * _3117));
                                float _4116 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                                float _3132 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3136 = ((_3132 * _3132) * (_3114 + (-1.0))) + 1.0;
                                float _3137 = _3074 * _3113;
                                float _3138 = _3137 * _3137;
                                float _3144 = ((1.0 - _3138) * dot(vec3(_711, _714, _717), vec3(_3061, _3062, _3063))) + _3138;
                                float _4127 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3145 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3146 = 1.0 - _3113;
                                float _3156 = (0.5 / (((_3145 * ((_3128 * _3146) + _3113)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3113) * _3128))) * _3145;
                                float _4138 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3166 = (_3091 * _3068) * (((_3114 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_3136 * _3136) * ((_3081 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3092 * _2938.z;
                                frontier_phi_99_pred_1 = _3092 * _2938.y;
                                frontier_phi_99_pred_2 = _3092 * _2938.x;
                                frontier_phi_99_pred_3 = _3166 * _2950.z;
                                frontier_phi_99_pred_4 = _3166 * _2950.y;
                                frontier_phi_99_pred_5 = _3166 * _2950.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3175 = frontier_phi_99_pred;
                            _3174 = frontier_phi_99_pred_1;
                            _3173 = frontier_phi_99_pred_2;
                            _3172 = frontier_phi_99_pred_3;
                            _3171 = frontier_phi_99_pred_4;
                            _3170 = frontier_phi_99_pred_5;
                            _2880 = _3173 + _2893;
                            _2881 = _3174 + _2894;
                            _2882 = _3175 + _2895;
                            _2877 = _3170 + _2890;
                            _2878 = _3171 + _2891;
                            _2879 = _3172 + _2892;
                            if (_2897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2897;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2881;
                        frontier_phi_93_pred_1 = _2880;
                        frontier_phi_93_pred_2 = _2879;
                        frontier_phi_93_pred_3 = _2878;
                        frontier_phi_93_pred_4 = _2877;
                        frontier_phi_93_pred_5 = _2882;
                    }
                    _2445 = frontier_phi_93_pred;
                    _2443 = frontier_phi_93_pred_1;
                    _2441 = frontier_phi_93_pred_2;
                    _2439 = frontier_phi_93_pred_3;
                    _2437 = frontier_phi_93_pred_4;
                    _2447 = frontier_phi_93_pred_5;
                    uint _2654 = _2653 + 1u;
                    if (_2654 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2647 = _2437;
                        _2648 = _2439;
                        _2649 = _2441;
                        _2650 = _2443;
                        _2651 = _2445;
                        _2652 = _2447;
                        _2653 = _2654;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2447;
                frontier_phi_68_69_ladder_1 = _2445;
                frontier_phi_68_69_ladder_2 = _2443;
                frontier_phi_68_69_ladder_3 = _2441;
                frontier_phi_68_69_ladder_4 = _2437;
                frontier_phi_68_69_ladder_5 = _2439;
            }
            else
            {
                frontier_phi_68_69_ladder = _2294;
                frontier_phi_68_69_ladder_1 = _2292;
                frontier_phi_68_69_ladder_2 = _2290;
                frontier_phi_68_69_ladder_3 = _2288;
                frontier_phi_68_69_ladder_4 = _2284;
                frontier_phi_68_69_ladder_5 = _2286;
            }
            _2436 = frontier_phi_68_69_ladder_4;
            _2438 = frontier_phi_68_69_ladder_5;
            _2440 = frontier_phi_68_69_ladder_3;
            _2442 = frontier_phi_68_69_ladder_2;
            _2444 = frontier_phi_68_69_ladder_1;
            _2446 = frontier_phi_68_69_ladder;
        }
        float _2451 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2206 = (_2451 * _2442) + _1922;
        _2208 = (_2451 * _2444) + _1923;
        _2210 = (_2451 * _2446) + _1924;
        _2212 = ((_2436 * _756) * _2451) + _2089;
        _2214 = ((_2438 * _758) * _2451) + _2090;
        _2216 = ((_2440 * _759) * _2451) + _2091;
    }
    else
    {
        _2206 = _1922;
        _2208 = _1923;
        _2210 = _1924;
        _2212 = _2089;
        _2214 = _2090;
        _2216 = _2091;
    }
    float _4154 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4165 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4176 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _2233 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2206 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _771))) + ((_2212 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1611)) * cbPerFrame._m0[3u].x);
    float _2234 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2208 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _771))) + ((_2214 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1611)) * cbPerFrame._m0[3u].x);
    float _2235 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2210 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _771))) + ((_2216 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1611)) * cbPerFrame._m0[3u].x);
    float _2236 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2237 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2238 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    uint _2239 = _730 + 6u;
    float _2247 = _690 / cbSceneParam._m0[86u].x;
    float _2248 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2262 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2247, _2248, (log2((isnan(cbSceneParam._m0[77u].w) ? _663 : (isnan(_663) ? cbSceneParam._m0[77u].w : min(_663, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2264 = _2262.x;
    float _2265 = _2262.y;
    float _2266 = _2262.z;
    float _2267 = _2262.w;
    float _2347;
    float _2349;
    float _2351;
    float _2353;
    if (_663 > cbSceneParam._m0[78u].w)
    {
        float _2309 = isnan(_663) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _663 : min(cbSceneParam._m0[80u].w, _663));
        float _2310 = _2309 / _663;
        float _2321 = _2310 * _265;
        float _2322 = _266 * _2310;
        float _2323 = (-0.0) - _2322;
        float _2324 = _2310 * _267;
        float _2326 = (cbSceneParam._m0[77u].w * _2323) / _2309;
        float _2327 = _2326 + cbSceneParam._m0[79u].w;
        float _2328 = cbSceneParam._m0[79u].w - _2322;
        float _2334 = sqrt(((_2321 * _2321) + (_2322 * _2322)) + (_2324 * _2324));
        float _2337 = (1.0 - (cbSceneParam._m0[77u].w / _2309)) * _2334;
        float _2343 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2345 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2578;
        if (abs((_2323 - _2326) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2578 = ((((_2327 > 0.0) ? exp2(_2343 * _2327) : (2.0 - exp2(_2345 * _2327))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2337;
        }
        else
        {
            float _2497 = 1.0 / cbSceneParam._m0[80u].x;
            float _2498 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : max(_2327, _2328));
            float _2499 = isnan(_2328) ? _2327 : (isnan(_2327) ? _2328 : min(_2327, _2328));
            float _2508 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : min(_2498, 0.0));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            _2578 = ((abs(_2334 / _2323) * cbSceneParam._m0[80u].y) * ((((_2508 - _2509) * 2.0) - ((exp2(_2343 * (isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0)))) - exp2(_2343 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0))))) * _2497)) - ((exp2(_2345 * _2508) - exp2(_2345 * _2509)) * _2497))) + (_2337 * cbSceneParam._m0[80u].z);
        }
        vec4 _2580 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2247, _2248, 1.0), 0.0);
        float _2589 = exp2((_2578 * (-1.44269502162933349609375)) * (1.0 - _2580.w));
        float _2590 = log2(_2589);
        float _2606 = log2(_2267);
        _2347 = (exp2(_2606 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].x)) * _2580.x) / cbSceneParam._m0[78u].x)) + _2264;
        _2349 = (exp2(_2606 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].y)) * _2580.y) / cbSceneParam._m0[78u].y)) + _2265;
        _2351 = (exp2(_2606 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2590 * cbSceneParam._m0[78u].z)) * _2580.z) / cbSceneParam._m0[78u].z)) + _2266;
        _2353 = _2589 * _2267;
    }
    else
    {
        _2347 = _2264;
        _2349 = _2265;
        _2351 = _2266;
        _2353 = _2267;
    }
    bool _2616;
    vec4 _2363;
    vec4 _2385;
    float _2387;
    float _2391;
    float _2392;
    float _2393;
    float _2394;
    bool _2404;
    for (;;)
    {
        _2363 = cbMatDynParam._m0[0u];
        float _2365 = roundEven(_2363.y);
        bool _2366 = _2365 == 3.0;
        float _2367 = log2(_2353);
        float _2374 = exp2(_2367 * cbSceneParam._m0[78u].x) * _2236;
        float _2375 = exp2(_2367 * cbSceneParam._m0[78u].y) * _2237;
        float _2376 = exp2(_2367 * cbSceneParam._m0[78u].z) * _2238;
        float _2383 = _677 + (-0.5);
        _2385 = cbMtdParam._m0[1u];
        _2387 = _2385.y * _2383;
        float _2390 = (_2365 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2391 = _2390 * (_2366 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2347)));
        _2392 = _2390 * (_2366 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2349)));
        _2393 = _2390 * (_2366 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2351)));
        _2394 = _2383 * 0.999000012874603271484375;
        _2404 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2404)
        {
            if ((cbInstanceData._m0[_730 + 7u].x + _2394) < 0.5)
            {
                _2616 = true;
                break;
            }
        }
        uint _2532 = _732 + uint(_2363.w);
        if ((cbInstanceData._m0[_2532].w < 1.0) && ((cbInstanceData._m0[_2532].w + _2394) < 0.5))
        {
            _2616 = true;
            break;
        }
        if ((_2387 + 1.0) < _2385.x)
        {
            _2616 = true;
            break;
        }
        _2616 = false;
        break;
    }
    float _2847;
    if (_2616)
    {
        discard_state = true;
        _2847 = 0.0;
    }
    else
    {
        _2847 = cbInstanceData._m0[_2239].w;
    }
    SV_Target.x = _2391;
    SV_Target.y = _2392;
    SV_Target.z = _2393;
    SV_Target.w = _2847;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2239].w;
    discard_exit();
}


