#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _994;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _436 = 0.5 - (_288 * 0.5);
    float _443 = ((((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) - _301) * _436) + _301;
    float _444 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) - _303) * _436) + _303;
    float _445 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) - _305) * _436) + _305;
    vec4 _457 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _459 = _457.x;
    vec4 _471 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _479 = (_471.x * 2.0) + (-1.0);
    float _481 = (_471.y * 2.0) + (-1.0);
    float _482 = dot(vec2(_479, _481), vec2(_479, _481));
    float _3359 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _487 = sqrt(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))));
    float _488 = _471.z * _288;
    float _491 = fma(_487, _197, fma(_481, _204, _479 * _190));
    float _494 = fma(_487, _198, fma(_481, _205, _479 * _191));
    float _497 = fma(_487, _199, fma(_481, _206, _479 * _192));
    float _501 = inversesqrt(dot(vec3(_491, _494, _497), vec3(_491, _494, _497)));
    float _502 = _501 * _491;
    float _503 = _501 * _494;
    float _504 = _501 * _497;
    float _3370 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _505 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3392 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3403 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3414 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _509 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _530 = _261 * _529;
    float _531 = _262 * _529;
    float _532 = _263 * _529;
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _560 = fma(_504, cbSceneParam._m0[5u].z, fma(_503, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _502));
    float _563 = fma(_504, cbSceneParam._m0[6u].z, fma(_503, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _502));
    float _566 = fma(_504, cbSceneParam._m0[7u].z, fma(_503, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _502));
    uint _579 = uint(roundEven(NORMAL.w)) * 13u;
    uint _582 = (_579 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _588 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_582].x;
    float _589 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_582].y;
    float _590 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_582].z;
    float _3425 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _591 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
    float _592 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _594 = 1.0 - _509;
    float _595 = _591 * _594;
    float _596 = _592 * _594;
    float _597 = _593 * _594;
    float _602 = (_591 + (-0.039999999105930328369140625)) * _509;
    float _603 = (_592 + (-0.039999999105930328369140625)) * _509;
    float _604 = (_593 + (-0.039999999105930328369140625)) * _509;
    float _605 = _602 + 0.039999999105930328369140625;
    float _607 = _603 + 0.039999999105930328369140625;
    float _608 = _604 + 0.039999999105930328369140625;
    vec4 _617 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _620 = _617.x * TEXCOORD.z;
    float _621 = dot(vec3(_502, _503, _504), vec3(_530, _531, _532));
    float _624 = _621 * 2.0;
    float _628 = (_624 * _502) - _530;
    float _629 = (_624 * _503) - _531;
    float _630 = (_624 * _504) - _532;
    float _634 = abs(dot(vec3(_530, _531, _532), vec3(_502, _503, _504)));
    float _3458 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _636 = sqrt(_505);
    float _649 = exp2((_636 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_636 * 3.0));
    float _655 = (1.0 - _649) * ((_636 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _656 = _649 * _636;
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _993;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = fma(_692, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _684));
        float _724 = fma(_692, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _684));
        float _728 = fma(_692, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _684));
        float _751 = _684 + _502;
        float _752 = _688 + _503;
        float _753 = _692 + _504;
        float _763 = fma(_753, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _751)) - _720;
        float _764 = fma(_753, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _751)) - _724;
        float _765 = fma(_753, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _751)) - _728;
        float _769 = inversesqrt(dot(vec3(_763, _764, _765), vec3(_763, _764, _765)));
        float _782 = ((_769 * _763) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_720 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _783 = ((_769 * _764) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_724 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _784 = ((_769 * _765) / cbModelParam._m0[34u].z) + ((((((_728 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_782, _783, _784), 0.0);
        float _821 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _822 = _821 * (_787.x + (-0.5));
        float _823 = _821 * (_787.y + (-0.5));
        float _824 = _821 * (_787.z + (-0.5));
        float _831 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _832 = _831 * (_794.x + (-0.5));
        float _833 = _831 * (_794.y + (-0.5));
        float _834 = _831 * (_794.z + (-0.5));
        float _841 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_801.x + (-0.5));
        float _843 = _841 * (_801.y + (-0.5));
        float _844 = _841 * (_801.z + (-0.5));
        float _851 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_808.x + (-0.5));
        float _853 = _851 * (_808.y + (-0.5));
        float _854 = _851 * (_808.z + (-0.5));
        float _855 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _856 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _857 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _858 = _822 * 0.5;
        float _859 = _832 * 0.5;
        float _860 = _842 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _875 = (dot(vec3(_502, _503, _504), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _885 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_855 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3506 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_887 + 1.0))) + _892) * _855;
        float _902 = _823 * 0.5;
        float _903 = _833 * 0.5;
        float _904 = _843 * 0.5;
        float _905 = dot(vec3(_902, _903, _904), vec3(_902, _903, _904));
        float _910 = (_905 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_905);
        float _918 = (dot(vec3(_502, _503, _504), vec3(_910 * _902, _910 * _903, _910 * _904)) + 1.0) * 0.5;
        float _3517 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _927 = sqrt(((_903 * _903) + (_902 * _902)) + (_904 * _904)) / (_856 + 9.9999997473787516355514526367188e-06);
        float _3528 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _929 = _928 * 2.0;
        float _933 = (1.0 - _928) / (_928 + 1.0);
        float _3539 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _943 = ((((1.0 - _934) * (_929 + 2.0)) * exp2(log2(isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_929 + 1.0))) + _934) * _856;
        float _944 = _824 * 0.5;
        float _945 = _834 * 0.5;
        float _946 = _844 * 0.5;
        float _947 = dot(vec3(_944, _945, _946), vec3(_944, _945, _946));
        float _952 = (_947 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_947);
        float _960 = (dot(vec3(_502, _503, _504), vec3(_952 * _944, _952 * _945, _952 * _946)) + 1.0) * 0.5;
        float _3550 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _969 = sqrt(((_945 * _945) + (_944 * _944)) + (_946 * _946)) / (_857 + 9.9999997473787516355514526367188e-06);
        float _3561 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _971 = _970 * 2.0;
        float _975 = (1.0 - _970) / (_970 + 1.0);
        float _3572 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _985 = ((((1.0 - _976) * (_971 + 2.0)) * exp2(log2(isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * (_971 + 1.0))) + _976) * _857;
        _993 = _824;
        _995 = _823;
        _996 = _822;
        _997 = _834;
        _998 = _833;
        _999 = _832;
        _1000 = _844;
        _1001 = _843;
        _1002 = _842;
        _1003 = _857;
        _1004 = _856;
        _1005 = _855;
        _1006 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
        _1007 = cbModelParam._m0[36u].z * (isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0)));
        _1008 = cbModelParam._m0[36u].z * (isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0)));
    }
    else
    {
        _993 = _994;
        _995 = _994;
        _996 = _994;
        _997 = _994;
        _998 = _994;
        _999 = _994;
        _1000 = _994;
        _1001 = _994;
        _1002 = _994;
        _1003 = _994;
        _1004 = _994;
        _1005 = _994;
        _1006 = 0.0;
        _1007 = 0.0;
        _1008 = 0.0;
    }
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = fma(_692, cbModelParam._m0[30u].z, fma(_688, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _684));
        float _1038 = fma(_692, cbModelParam._m0[31u].z, fma(_688, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _684));
        float _1042 = fma(_692, cbModelParam._m0[32u].z, fma(_688, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _684));
        float _1065 = _684 + _502;
        float _1066 = _688 + _503;
        float _1067 = _692 + _504;
        float _1077 = fma(_1067, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1034 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1038 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[35u].z) + ((((((_1042 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1133 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1100.x + (-0.5));
        float _1135 = _1133 * (_1100.y + (-0.5));
        float _1136 = _1133 * (_1100.z + (-0.5));
        float _1143 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1107.x + (-0.5));
        float _1145 = _1143 * (_1107.y + (-0.5));
        float _1146 = _1143 * (_1107.z + (-0.5));
        float _1153 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1114.x + (-0.5));
        float _1155 = _1153 * (_1114.y + (-0.5));
        float _1156 = _1153 * (_1114.z + (-0.5));
        float _1163 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1121.x + (-0.5));
        float _1165 = _1163 * (_1121.y + (-0.5));
        float _1166 = _1163 * (_1121.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1186 = (dot(vec3(_502, _503, _504), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1195 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3635 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_1197 + 1.0))) + _1202) * _1167;
        float _1212 = _1135 * 0.5;
        float _1213 = _1145 * 0.5;
        float _1214 = _1155 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_502, _503, _504), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3668 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1239 + 1.0))) + _1244) * _1168;
        float _1254 = _1136 * 0.5;
        float _1255 = _1146 * 0.5;
        float _1256 = _1156 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_502, _503, _504), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3701 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_1281 + 1.0))) + _1286) * _1169;
        _1303 = _1136;
        _1304 = _1135;
        _1305 = _1134;
        _1306 = _1146;
        _1307 = _1145;
        _1308 = _1144;
        _1309 = _1156;
        _1310 = _1155;
        _1311 = _1154;
        _1312 = _1169;
        _1313 = _1168;
        _1314 = _1167;
        _1315 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1316 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1317 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _994;
        _1304 = _994;
        _1305 = _994;
        _1306 = _994;
        _1307 = _994;
        _1308 = _994;
        _1309 = _994;
        _1310 = _994;
        _1311 = _994;
        _1312 = _994;
        _1313 = _994;
        _1314 = _994;
        _1315 = 0.0;
        _1316 = 0.0;
        _1317 = 0.0;
    }
    float _1327 = (cbModelParam._m0[1u].x * (_1315 - _1006)) + _1006;
    float _1328 = (cbModelParam._m0[1u].x * (_1316 - _1007)) + _1007;
    float _1329 = (cbModelParam._m0[1u].x * (_1317 - _1008)) + _1008;
    float _1350 = fma(_1329, cbSceneParam._m0[89u].z, fma(_1328, cbSceneParam._m0[89u].y, _1327 * cbSceneParam._m0[89u].x));
    float _1353 = fma(_1329, cbSceneParam._m0[90u].z, fma(_1328, cbSceneParam._m0[90u].y, _1327 * cbSceneParam._m0[90u].x));
    float _1356 = fma(_1329, cbSceneParam._m0[91u].z, fma(_1328, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1327));
    float _1371 = _628 * 0.5;
    float _1372 = _629 * 0.5;
    float _1373 = _630 * 0.5;
    float _1374 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1305, _1308, _1311, _1314));
    float _1377 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1304, _1307, _1310, _1313));
    float _1380 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_1303, _1306, _1309, _1312));
    float _1414;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1387 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_993, _997, _1000, _1003));
        float _1391 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_995, _998, _1001, _1004));
        float _1395 = dot(vec4(_1371, _1372, _1373, 1.0), vec4(_996, _999, _1002, _1005));
        float _1402 = dot(vec4(cbModelParam._m0[39u]), vec4(_1371, _1372, _1373, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1425;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1416 = dot(vec4(cbModelParam._m0[40u]), vec4(_1371, _1372, _1373, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1416) ? 0.0 : (isnan(0.0) ? _1416 : max(0.0, _1416))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1429 = (_1425 * cbModelParam._m0[1u].x) + (_1414 * (1.0 - cbModelParam._m0[1u].x));
    float _1439 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _505);
    float _1440 = isnan(_1439) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1439 : min(cbModelParam._m0[25u].z, _1439));
    float _1521;
    float _1523;
    float _1525;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1488 = fma(_692, cbModelParam._m0[13u].z, fma(_688, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _684)) + cbModelParam._m0[13u].w;
        float _1492 = fma(_692, cbModelParam._m0[14u].z, fma(_688, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _684)) + cbModelParam._m0[14u].w;
        float _1496 = fma(_692, cbModelParam._m0[15u].z, fma(_688, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _684)) + cbModelParam._m0[15u].w;
        float _1499 = fma(_630, cbModelParam._m0[13u].z, fma(_629, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628));
        float _1502 = fma(_630, cbModelParam._m0[14u].z, fma(_629, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628));
        float _1505 = fma(_630, cbModelParam._m0[15u].z, fma(_629, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628));
        float _1533;
        if (_1499 > 0.0)
        {
            _1533 = abs((1.0 - _1488) / _1499);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1488 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1533 = frontier_phi_22_20_ladder;
        }
        float _1704;
        if (_1502 > 0.0)
        {
            _1704 = abs((1.0 - _1492) / _1502);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1492 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1704 = frontier_phi_31_27_ladder;
        }
        float _2159;
        if (_1505 > 0.0)
        {
            _2159 = abs((1.0 - _1496) / _1505);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1496 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2159 = frontier_phi_43_38_ladder;
        }
        float _2161 = isnan(_1704) ? _1533 : (isnan(_1533) ? _1704 : min(_1533, _1704));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1499) + _1488;
        float _2167 = (_2162 * _1502) + _1492;
        float _2168 = (_2162 * _1505) + _1496;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2169;
        float _2173 = _2169 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 > _2173) || ((_2167 < _2171) || ((_2166 < _2171) || (_2166 > _2173))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2168, cbModelParam._m0[9u].z, fma(_2167, cbModelParam._m0[9u].y, _2166 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2168, cbModelParam._m0[10u].z, fma(_2167, cbModelParam._m0[10u].y, _2166 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2168, cbModelParam._m0[11u].z, fma(_2167, cbModelParam._m0[11u].y, _2166 * cbModelParam._m0[11u].x))), _1440);
            frontier_phi_21_43_ladder = _2402.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2402.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2402.z * cbModelParam._m0[1u].y;
        }
        _1521 = frontier_phi_21_43_ladder_1;
        _1523 = frontier_phi_21_43_ladder;
        _1525 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_628, _629, _630), _1440);
        _1521 = _1509.x * cbModelParam._m0[1u].y;
        _1523 = _1509.y * cbModelParam._m0[1u].y;
        _1525 = _1509.z * cbModelParam._m0[1u].y;
    }
    float _1529 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _505);
    float _1530 = isnan(_1529) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1529 : min(cbModelParam._m0[25u].w, _1529));
    float _1619;
    float _1621;
    float _1623;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1583 = fma(_692, cbModelParam._m0[21u].z, fma(_688, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _684)) + cbModelParam._m0[21u].w;
        float _1587 = fma(_692, cbModelParam._m0[22u].z, fma(_688, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _684)) + cbModelParam._m0[22u].w;
        float _1591 = fma(_692, cbModelParam._m0[23u].z, fma(_688, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _684)) + cbModelParam._m0[23u].w;
        float _1594 = fma(_630, cbModelParam._m0[21u].z, fma(_629, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628));
        float _1597 = fma(_630, cbModelParam._m0[22u].z, fma(_629, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628));
        float _1600 = fma(_630, cbModelParam._m0[23u].z, fma(_629, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628));
        float _1709;
        if (_1594 > 0.0)
        {
            _1709 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1709 = frontier_phi_33_29_ladder;
        }
        float _2186;
        if (_1597 > 0.0)
        {
            _2186 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2186 = frontier_phi_45_40_ladder;
        }
        float _2523;
        if (_1600 > 0.0)
        {
            _2523 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2523 = frontier_phi_57_52_ladder;
        }
        float _2525 = isnan(_2186) ? _1709 : (isnan(_1709) ? _2186 : min(_1709, _2186));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1594) + _1583;
        float _2531 = (_2526 * _1597) + _1587;
        float _2532 = (_2526 * _1600) + _1591;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2653 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1530);
            frontier_phi_30_57_ladder = _2653.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2653.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2653.x * cbModelParam._m0[1u].z;
        }
        _1619 = frontier_phi_30_57_ladder_2;
        _1621 = frontier_phi_30_57_ladder_1;
        _1623 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1603 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_628, _629, _630), _1530);
        _1619 = _1603.x * cbModelParam._m0[1u].z;
        _1621 = _1603.y * cbModelParam._m0[1u].z;
        _1623 = _1603.z * cbModelParam._m0[1u].z;
    }
    float _1636 = (((_655 * _605) + _656) * _620) * ((cbModelParam._m0[1u].w * (_1619 - _1521)) + _1521);
    float _1638 = (((_655 * _607) + _656) * _620) * ((cbModelParam._m0[1u].w * (_1621 - _1523)) + _1523);
    float _1640 = (((_655 * _608) + _656) * _620) * ((cbModelParam._m0[1u].w * (_1623 - _1525)) + _1525);
    float _1643 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1638, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1646 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1638, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1649 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1638, cbSceneParam._m0[91u].y, _1636 * cbSceneParam._m0[91u].x));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1695 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1696 = _1683 / _1695;
    float _1697 = _1687 / _1695;
    float _1698 = _1691 / _1695;
    float _1845;
    float _1846;
    float _1847;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1725 = ((uint(_1698 > cbSceneParam._m0[59u].y) + uint(_1698 > cbSceneParam._m0[59u].x)) + uint(_1698 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1726 = _1725 + 43u;
        uint _1734 = _1725 + 44u;
        uint _1742 = _1725 + 45u;
        uint _1750 = _1725 + 46u;
        float _1761 = fma(_1695, cbSceneParam._m0[_1726].w, fma(_1691, cbSceneParam._m0[_1726].z, fma(_1687, cbSceneParam._m0[_1726].y, _1683 * cbSceneParam._m0[_1726].x)));
        float _1765 = fma(_1695, cbSceneParam._m0[_1734].w, fma(_1691, cbSceneParam._m0[_1734].z, fma(_1687, cbSceneParam._m0[_1734].y, _1683 * cbSceneParam._m0[_1734].x)));
        float _1773 = fma(_1695, cbSceneParam._m0[_1750].w, fma(_1691, cbSceneParam._m0[_1750].z, fma(_1687, cbSceneParam._m0[_1750].y, _1683 * cbSceneParam._m0[_1750].x)));
        float _1778 = cbSceneParam._m0[33u].z * _1773;
        float _1780 = cbSceneParam._m0[33u].w * _1773;
        float _1783 = fma(_1695, cbSceneParam._m0[_1742].w, fma(_1691, cbSceneParam._m0[_1742].z, fma(_1687, cbSceneParam._m0[_1742].y, _1683 * cbSceneParam._m0[_1742].x))) / _1773;
        float _1831 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
        float _3827 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1838 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 + _1761) / _1773, (_1780 + _1765) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1780 + _1761) / _1773, (_1765 - _1778) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1778) / _1773, (_1765 - _1780) / _1773), _1783), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1761 - _1780) / _1773, (_1778 + _1765) / _1773), _1783), 0.0)).x), vec4(0.25)));
        _1845 = 1.0 - (_1838 * cbSceneParam._m0[34u].x);
        _1846 = 1.0 - (_1838 * cbSceneParam._m0[34u].y);
        _1847 = 1.0 - (_1838 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1845 = 1.0;
        _1846 = 1.0;
        _1847 = 1.0;
    }
    float _1911;
    float _1913;
    float _1915;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1899 = fma(_1695, cbSceneParam._m0[63u].w, fma(_1691, cbSceneParam._m0[63u].z, fma(_1687, cbSceneParam._m0[63u].y, _1683 * cbSceneParam._m0[63u].x)));
        float _1900 = fma(_1695, cbSceneParam._m0[60u].w, fma(_1691, cbSceneParam._m0[60u].z, fma(_1687, cbSceneParam._m0[60u].y, _1683 * cbSceneParam._m0[60u].x))) / _1899;
        float _1901 = fma(_1695, cbSceneParam._m0[61u].w, fma(_1691, cbSceneParam._m0[61u].z, fma(_1687, cbSceneParam._m0[61u].y, _1683 * cbSceneParam._m0[61u].x))) / _1899;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1900 >= cbSceneParam._m0[64u].x) && (_1901 >= cbSceneParam._m0[64u].y)) && (_1900 <= cbSceneParam._m0[64u].z)) && (_1901 <= cbSceneParam._m0[64u].w))
        {
            float _2199 = fma(_1695, cbSceneParam._m0[62u].w, fma(_1691, cbSceneParam._m0[62u].z, fma(_1687, cbSceneParam._m0[62u].y, _1683 * cbSceneParam._m0[62u].x))) / _1899;
            float _2203 = isnan(cbSceneParam._m0[41u].w) ? _2199 : (isnan(_2199) ? cbSceneParam._m0[41u].w : max(_2199, cbSceneParam._m0[41u].w));
            float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698))) * cbSceneParam._m0[33u].y;
            float _3843 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
            float _2253 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1900, cbSceneParam._m0[33u].w + _1901), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1900, _1901 - cbSceneParam._m0[33u].z), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].z, _1901 - cbSceneParam._m0[33u].w), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1900 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1901), _2203), 0.0)).x), vec4(0.25)));
            float _2257 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
            float _2258 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
            float _2259 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2258) ? _1846 : (isnan(_1846) ? _2258 : min(_1846, _2258));
            frontier_phi_42_41_ladder_1 = isnan(_2257) ? _1845 : (isnan(_1845) ? _2257 : min(_1845, _2257));
            frontier_phi_42_41_ladder_2 = isnan(_2259) ? _1847 : (isnan(_1847) ? _2259 : min(_1847, _2259));
        }
        else
        {
            frontier_phi_42_41_ladder = _1846;
            frontier_phi_42_41_ladder_1 = _1845;
            frontier_phi_42_41_ladder_2 = _1847;
        }
        _1911 = frontier_phi_42_41_ladder_1;
        _1913 = frontier_phi_42_41_ladder;
        _1915 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1911 = _1845;
        _1913 = _1846;
        _1915 = _1847;
    }
    uvec4 _1920 = floatBitsToUint(cbInstanceData._m0[_579 + 5u]);
    uint _1922 = _1920.x * 14u;
    uint _1923 = _1922 + 13u;
    float _1928 = _620 + (-1.0);
    float _1931 = (cbLight._m0[_1923].x * _1928) + 1.0;
    float _1932 = (cbLight._m0[_1923].y * _1928) + 1.0;
    uint _1933 = _1922 + 5u;
    float _1939 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1943 = _1922 + 4u;
    float _1952 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
    uint _1956 = _1922 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_502, _503, _504));
    float _1970 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_502, _503, _504));
    float _3879 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _3890 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1975 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1977 = (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * 0.3183098733425140380859375;
    float _1984 = ((cbLight._m0[_1933].x * _1939) * _1977) + (((cbLight._m0[_1943].x * _1911) * _1952) * _1975);
    float _1985 = ((_1939 * cbLight._m0[_1933].y) * _1977) + (((cbLight._m0[_1943].y * _1913) * _1952) * _1975);
    float _1986 = ((_1939 * cbLight._m0[_1933].z) * _1977) + (((cbLight._m0[_1943].z * _1915) * _1952) * _1975);
    uint _1988 = _1922 + 8u;
    float _2001 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1922].w)) * _505) * 0.949999988079071044921875);
    float _2002 = _2001 * _2001;
    float _2003 = cbLight._m0[_1922].x + _530;
    float _2004 = cbLight._m0[_1922].y + _531;
    float _2005 = cbLight._m0[_1922].z + _532;
    float _2009 = inversesqrt(dot(vec3(_2003, _2004, _2005), vec3(_2003, _2004, _2005)));
    float _2010 = _2009 * _2003;
    float _2011 = _2009 * _2004;
    float _2012 = _2009 * _2005;
    float _2013 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1922].xyz));
    float _3901 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2016 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2017 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _2018 = dot(vec3(_502, _503, _504), vec3(_2010, _2011, _2012));
    float _3923 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1922].xyz), vec3(_2010, _2011, _2012));
    float _3934 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2002 * _2002;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2038 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
    float _2039 = 0.959999978542327880859375 - _602;
    float _2041 = 0.959999978542327880859375 - _603;
    float _2042 = 0.959999978542327880859375 - _604;
    float _2049 = 1.0 - _2002;
    float _2060 = (0.5 / (((_2017 * ((_2016 * _2049) + _2002)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2049) + _2002) * _2016))) * _2016;
    float _3945 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    uint _2076 = _1922 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1956].w)) * _505) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1956].x + _530;
    float _2090 = cbLight._m0[_1956].y + _531;
    float _2091 = cbLight._m0[_1956].z + _532;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_502, _503, _504), vec3(cbLight._m0[_1956].xyz));
    float _3956 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _2103 = dot(vec3(_502, _503, _504), vec3(_2096, _2097, _2098));
    float _3967 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1956].xyz), vec3(_2096, _2097, _2098));
    float _3978 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
    float _2129 = 1.0 - _2088;
    float _2139 = (0.5 / (((_2017 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2017 * _2129) + _2088) * _2102))) * _2102;
    float _3989 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2141 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2151 = (((((_2122 * _2039) + _605) * cbLight._m0[_2076].x) * _2141) * _1939) + ((((cbLight._m0[_1988].x * _1911) * ((_2038 * _2039) + _605)) * _2062) * _1952);
    float _2152 = (((((_2122 * _2041) + _607) * cbLight._m0[_2076].y) * _2141) * _1939) + ((((cbLight._m0[_1988].y * _1913) * ((_2038 * _2041) + _607)) * _2062) * _1952);
    float _2153 = (((((_2122 * _2042) + _608) * cbLight._m0[_2076].z) * _2141) * _1939) + ((((cbLight._m0[_1988].z * _1915) * ((_2038 * _2042) + _608)) * _2062) * _1952);
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_1920.y == 0u)
    {
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.x;
        uint _2283 = uint((float(_2271.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _2272))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _2272)));
        float _2293 = (log2(_1698 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2294 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        uint _2297 = uint(isnan(14.0) ? _2294 : (isnan(_2294) ? 14.0 : min(_2294, 14.0)));
        uvec4 _2302 = texelFetch(g_lightClusterGridBuffer, int(((_2297 << 2u) + (_2283 << 6u)) >> 2u));
        uint _2303 = _2302.x;
        uint _2304 = _2271.z;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((((1u << ((_2304 >> 4u) & 15u)) + 4294967295u) & _2303) == 0u) || ((_2304 & 240u) == 0u))
        {
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
        }
        else
        {
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            uint _2587 = 0u;
            uint _2596;
            bool _2597;
            for (;;)
            {
                _2596 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                _2597 = _2596 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2597)
                {
                    frontier_phi_66_pred = _2582;
                    frontier_phi_66_pred_1 = _2581;
                    frontier_phi_66_pred_2 = _2583;
                    frontier_phi_66_pred_3 = _2586;
                    frontier_phi_66_pred_4 = _2585;
                    frontier_phi_66_pred_5 = _2584;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2596;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2587 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _1696;
                        float _2793 = _2752.y - _1697;
                        float _2794 = _2752.z - _1698;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_560, _563, _566), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4010 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _1696;
                        float _2828 = (-0.0) - _1697;
                        float _2829 = (-0.0) - _1698;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2843 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2844 = 1.0 - _636;
                        float _2851 = sqrt(1.0 - ((1.0 - (_2844 * _2844)) * (1.0 - (_2843 * _2843))));
                        float _2852 = _2851 * _2851;
                        float _2853 = _2852 * _2852;
                        float _2854 = _2834 + _2799;
                        float _2855 = _2835 + _2800;
                        float _2856 = _2836 + _2801;
                        float _2860 = inversesqrt(dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856)));
                        float _2864 = dot(vec3(_560, _563, _566), vec3(_2834, _2835, _2836));
                        float _4026 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2867 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2868 = dot(vec3(_560, _563, _566), vec3(_2860 * _2854, _2860 * _2855, _2860 * _2856));
                        float _4037 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2875 = ((_2871 * _2871) * (_2853 + (-1.0))) + 1.0;
                        float _2876 = _2812 * _2852;
                        float _2877 = _2876 * _2876;
                        float _2880 = ((1.0 - _2877) * _2802) + _2877;
                        float _4048 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                        float _2882 = 1.0 - _2852;
                        float _2892 = (0.5 / (((_2881 * ((_2867 * _2882) + _2852)) + 9.9999999392252902907785028219223e-09) + (((_2881 * _2882) + _2852) * _2867))) * _2881;
                        float _4059 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2903 = (((_2853 * 3.1415927410125732421875) * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) / ((_2875 * _2875) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2661 = (_2823 * _2771.x) + _2729;
                        _2662 = (_2823 * _2771.y) + _2730;
                        _2663 = (_2823 * _2771.z) + _2731;
                        _2658 = (_2903 * _2788.x) + _2726;
                        _2659 = (_2903 * _2788.y) + _2727;
                        _2660 = (_2903 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_66_pred = _2659;
                    frontier_phi_66_pred_1 = _2658;
                    frontier_phi_66_pred_2 = _2660;
                    frontier_phi_66_pred_3 = _2663;
                    frontier_phi_66_pred_4 = _2662;
                    frontier_phi_66_pred_5 = _2661;
                }
                _2414 = frontier_phi_66_pred;
                _2412 = frontier_phi_66_pred_1;
                _2416 = frontier_phi_66_pred_2;
                _2422 = frontier_phi_66_pred_3;
                _2420 = frontier_phi_66_pred_4;
                _2418 = frontier_phi_66_pred_5;
                uint _2588 = _2587 + 1u;
                if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2581 = _2412;
                    _2582 = _2414;
                    _2583 = _2416;
                    _2584 = _2418;
                    _2585 = _2420;
                    _2586 = _2422;
                    _2587 = _2588;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
        }
        uvec4 _2425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2426 = _2425.z;
        uint _2428 = (_2426 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2428) & _2303) == 0u)
        {
            _2549 = _2411;
            _2551 = _2413;
            _2553 = _2415;
            _2555 = _2417;
            _2557 = _2419;
            _2559 = _2421;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698)));
            float _2575 = _2574 * _1696;
            float _2576 = _2574 * _1697;
            float _2577 = _2574 * _1698;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2428 < ((_2426 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2709 = _2411;
                float _2710 = _2413;
                float _2711 = _2415;
                float _2712 = _2417;
                float _2713 = _2419;
                float _2714 = _2421;
                uint _2715 = _2428;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2297 << 5u) + (_2283 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2725)
                    {
                        frontier_phi_72_pred = _2710;
                        frontier_phi_72_pred_1 = _2709;
                        frontier_phi_72_pred_2 = _2714;
                        frontier_phi_72_pred_3 = _2713;
                        frontier_phi_72_pred_4 = _2712;
                        frontier_phi_72_pred_5 = _2711;
                    }
                    else
                    {
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2921 = _2709;
                        float _2922 = _2710;
                        float _2923 = _2711;
                        float _2924 = _2712;
                        float _2925 = _2713;
                        float _2926 = _2714;
                        uint _2927 = _2724;
                        uint _2928;
                        vec4 _2953;
                        float _2954;
                        vec4 _2969;
                        vec3 _2981;
                        vec4 _2996;
                        vec4 _3012;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2938 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2927));
                            _2928 = (_2927 + 4294967295u) & _2927;
                            uint _2940 = _2938 * 40u;
                            _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2954 = _2953.w;
                            uint _2956 = (_2938 * 40u) + 4u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2971 = (_2938 * 40u) + 8u;
                            _2981 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x));
                            uint _2983 = (_2938 * 40u) + 16u;
                            _2996 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2983)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2983 + 3u)).x));
                            uint _2999 = (_2938 * 40u) + 20u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2938 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2938 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_1698, _3046.z, fma(_1697, _3046.y, _3046.x * _1696)) + _3046.w;
                            _3059 = !((fma(_1698, _3027.z, fma(_1697, _3027.y, _3027.x * _1696)) + _3027.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2953.x - _1696;
                                float _3087 = _2953.y - _1697;
                                float _3088 = _2953.z - _1698;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2954 * _2954));
                                float _4070 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3104 = sqrt(_3089) * _2969.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_560, _563, _566))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_1698, _2996.z, fma(_1697, _2996.y, _2996.x * _1696)) + _2996.w) / _3058;
                                float _3118 = (fma(_1698, _3012.z, fma(_1697, _3012.y, _3012.x * _1696)) + _3012.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4086 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _636;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2575;
                                float _3148 = _3094 - _2576;
                                float _3149 = _3095 - _2577;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_560, _563, _566), vec3((-0.0) - _2575, (-0.0) - _2576, (-0.0) - _2577));
                                float _4097 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3161 = dot(vec3(_560, _563, _566), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4108 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_560, _563, _566), vec3(_3093, _3094, _3095))) + _3170;
                                float _4119 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4130 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3198 * _2981.y;
                                frontier_phi_78_pred_1 = _3198 * _2981.x;
                                frontier_phi_78_pred_2 = _3124 * _2969.z;
                                frontier_phi_78_pred_3 = _3124 * _2969.y;
                                frontier_phi_78_pred_4 = _3124 * _2969.x;
                                frontier_phi_78_pred_5 = _3198 * _2981.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3203 = frontier_phi_78_pred;
                            _3202 = frontier_phi_78_pred_1;
                            _3207 = frontier_phi_78_pred_2;
                            _3206 = frontier_phi_78_pred_3;
                            _3205 = frontier_phi_78_pred_4;
                            _3204 = frontier_phi_78_pred_5;
                            _2911 = _3205 + _2924;
                            _2912 = _3206 + _2925;
                            _2913 = _3207 + _2926;
                            _2908 = _3202 + _2921;
                            _2909 = _3203 + _2922;
                            _2910 = _3204 + _2923;
                            if (_2928 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2928;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2909;
                        frontier_phi_72_pred_1 = _2908;
                        frontier_phi_72_pred_2 = _2913;
                        frontier_phi_72_pred_3 = _2912;
                        frontier_phi_72_pred_4 = _2911;
                        frontier_phi_72_pred_5 = _2910;
                    }
                    _2552 = frontier_phi_72_pred;
                    _2550 = frontier_phi_72_pred_1;
                    _2560 = frontier_phi_72_pred_2;
                    _2558 = frontier_phi_72_pred_3;
                    _2556 = frontier_phi_72_pred_4;
                    _2554 = frontier_phi_72_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2550;
                        _2710 = _2552;
                        _2711 = _2554;
                        _2712 = _2556;
                        _2713 = _2558;
                        _2714 = _2560;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2560;
                frontier_phi_59_60_ladder_1 = _2556;
                frontier_phi_59_60_ladder_2 = _2554;
                frontier_phi_59_60_ladder_3 = _2552;
                frontier_phi_59_60_ladder_4 = _2550;
                frontier_phi_59_60_ladder_5 = _2558;
            }
            else
            {
                frontier_phi_59_60_ladder = _2421;
                frontier_phi_59_60_ladder_1 = _2417;
                frontier_phi_59_60_ladder_2 = _2415;
                frontier_phi_59_60_ladder_3 = _2413;
                frontier_phi_59_60_ladder_4 = _2411;
                frontier_phi_59_60_ladder_5 = _2419;
            }
            _2549 = frontier_phi_59_60_ladder_4;
            _2551 = frontier_phi_59_60_ladder_3;
            _2553 = frontier_phi_59_60_ladder_2;
            _2555 = frontier_phi_59_60_ladder_1;
            _2557 = frontier_phi_59_60_ladder_5;
            _2559 = frontier_phi_59_60_ladder;
        }
        float _2564 = isnan(1.0) ? _620 : (isnan(_620) ? 1.0 : min(_620, 1.0));
        _2316 = (_2564 * _2555) + _1984;
        _2318 = (_2564 * _2557) + _1985;
        _2320 = (_2564 * _2559) + _1986;
        _2322 = ((_2549 * _605) * _2564) + _2151;
        _2324 = ((_2551 * _607) * _2564) + _2152;
        _2326 = ((_2553 * _608) * _2564) + _2153;
    }
    else
    {
        _2316 = _1984;
        _2318 = _1985;
        _2320 = _1986;
        _2322 = _2151;
        _2324 = _2152;
        _2326 = _2153;
    }
    float _4146 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _4157 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _4168 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _2343 = ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2316 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _620))) + ((_2322 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    float _2344 = ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2318 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _620))) + ((_2324 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    float _2345 = ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_2320 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _620))) + ((_2326 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1429)) * cbPerFrame._m0[3u].x);
    uint _2349 = _579 + 6u;
    float _2357 = _538 / cbSceneParam._m0[86u].x;
    float _2358 = _539 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2473;
    float _2475;
    float _2477;
    float _2479;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _2436 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _2437 = _2436 / _525;
        float _2448 = _2437 * _261;
        float _2449 = _262 * _2437;
        float _2450 = (-0.0) - _2449;
        float _2451 = _2437 * _263;
        float _2453 = (cbSceneParam._m0[77u].w * _2450) / _2436;
        float _2454 = _2453 + cbSceneParam._m0[79u].w;
        float _2455 = cbSceneParam._m0[79u].w - _2449;
        float _2461 = sqrt(((_2448 * _2448) + (_2449 * _2449)) + (_2451 * _2451));
        float _2464 = (1.0 - (cbSceneParam._m0[77u].w / _2436)) * _2461;
        float _2469 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2471 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2671;
        if (abs((_2450 - _2453) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2671 = ((((_2454 > 0.0) ? exp2(_2469 * _2454) : (2.0 - exp2(_2471 * _2454))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2464;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : max(_2454, _2455));
            float _2612 = isnan(_2455) ? _2454 : (isnan(_2454) ? _2455 : min(_2454, _2455));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2671 = ((abs(_2461 / _2450) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2469 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2469 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2471 * _2621) - exp2(_2471 * _2622)) * _2610))) + (_2464 * cbSceneParam._m0[80u].z);
        }
        vec4 _2673 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2682 = exp2((_2671 * (-1.44269502162933349609375)) * (1.0 - _2673.w));
        float _2683 = log2(_2682);
        float _2699 = log2(_2377);
        _2473 = (exp2(_2699 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].x)) * _2673.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2475 = (exp2(_2699 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].y)) * _2673.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2477 = (exp2(_2699 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].z)) * _2673.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2479 = _2682 * _2377;
    }
    else
    {
        _2473 = _2374;
        _2475 = _2375;
        _2477 = _2376;
        _2479 = _2377;
    }
    float _2491 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2492 = _2491 == 3.0;
    float _2493 = log2(_2479);
    float _2500 = exp2(_2493 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0)));
    float _2501 = exp2(_2493 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)));
    float _2502 = exp2(_2493 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0)));
    float _2511 = (_2491 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2511 * (_2492 ? _2500 : (_2500 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.y = _2511 * (_2492 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2475)));
    SV_Target.z = _2511 * (_2492 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2477)));
    SV_Target.w = cbInstanceData._m0[_2349].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
}


