#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _635;
uint _1833;
uint _1834;
uint _1835;
uint _2079;
uint _2080;
uint _2081;
float _2304;
float _2305;
float _2306;
float _2307;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    float _280 = cbMtdParam._m0[22u].y + _252;
    float _281 = cbMtdParam._m0[22u].z + _253;
    float _282 = cbMtdParam._m0[22u].w + _254;
    float _299 = (-0.0) - dot(vec3(_280, _281, _282), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _300 = (-0.0) - dot(vec3(_280, _281, _282), vec3(_194 * TANGENT.x, _194 * TANGENT.y, _194 * TANGENT.z));
    float _301 = (-0.0) - dot(vec3(_280, _281, _282), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _305 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _306 = _305 * _301;
    float _308 = (cbMtdParam._m0[19u].x * _299) * _305;
    float _310 = (cbMtdParam._m0[18u].w * _300) * _305;
    float _311 = fract(TEXCOORD.x);
    float _312 = fract(TEXCOORD.y);
    float _318;
    if (_308 > 0.0)
    {
        _318 = (1.0 - _311) / _308;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _311) / _308;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _318 = frontier_phi_3_2_ladder;
    }
    float _326;
    if (_310 > 0.0)
    {
        _326 = (1.0 - _312) / _310;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _312) / _310;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _326 = frontier_phi_7_6_ladder;
    }
    float _330 = (_306 > 0.0) ? (cbMtdParam._m0[15u].x / _306) : 5000.0;
    float _331 = isnan(_326) ? _318 : (isnan(_318) ? _326 : min(_318, _326));
    float _332 = isnan(_330) ? _331 : (isnan(_331) ? _330 : min(_331, _330));
    float _336 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _343 = ((_332 * _306) + _336) / _336;
    vec4 _369 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_311 + (-0.5)) + (_332 * _308)) / _343) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_312 + (-0.5)) + (_332 * _310)) / _343) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _398 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _402 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _403 = _252 * _402;
    float _404 = _253 * _402;
    float _405 = _254 * _402;
    vec4 _410 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _412 = _410.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _482 = sqrt(((_252 * _252) + (_253 * _253)) + (_254 * _254));
        float _489 = (cbMatDynParam._m0[5u].x * _482) + cbMatDynParam._m0[5u].y;
        float _2326 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
        float _490 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        float _494 = (cbMatDynParam._m0[5u].z * _482) + cbMatDynParam._m0[5u].w;
        float _2337 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0))) - _490)) + _490) < ((_412 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _435 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_425 * cbSceneParam._m0[86u].x, _426 * cbSceneParam._m0[86u].y));
    float _438 = _435.x * TEXCOORD.z;
    float _439 = (-0.0) - _403;
    float _440 = (-0.0) - _404;
    float _441 = (-0.0) - _405;
    float _463 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _467 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _471 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _634;
    float _636;
    float _637;
    float _638;
    float _639;
    float _640;
    float _641;
    float _642;
    float _643;
    float _644;
    float _645;
    float _646;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _556 = (cbModelParam._m0[37u].x * ((((fma(_471, cbModelParam._m0[26u].z, fma(_467, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _463)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _558 = (cbModelParam._m0[37u].y * ((((fma(_471, cbModelParam._m0[27u].z, fma(_467, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _463)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _559 = (((((fma(_471, cbModelParam._m0[28u].z, fma(_467, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _463)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _562 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_556, _558, _559), 0.0);
        vec4 _569 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_556, _558, _559), 0.0);
        vec4 _576 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_556, _558, _559), 0.0);
        vec4 _583 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_556, _558, _559), 0.0);
        float _596 = exp2((_562.w + (-0.5)) * 20.0) * 2.0;
        float _607 = exp2((_569.w + (-0.5)) * 20.0) * 2.0;
        float _617 = exp2((_576.w + (-0.5)) * 20.0) * 2.0;
        float _627 = exp2((_583.w + (-0.5)) * 20.0) * 2.0;
        float _628 = _627 * (_583.x + (-0.5));
        float _629 = _627 * (_583.y + (-0.5));
        float _630 = _627 * (_583.z + (-0.5));
        _634 = _596 * (_562.z + (-0.5));
        _636 = _596 * (_562.y + (-0.5));
        _637 = _596 * (_562.x + (-0.5));
        _638 = _607 * (_569.z + (-0.5));
        _639 = _607 * (_569.y + (-0.5));
        _640 = _607 * (_569.x + (-0.5));
        _641 = _617 * (_576.z + (-0.5));
        _642 = _617 * (_576.y + (-0.5));
        _643 = _617 * (_576.x + (-0.5));
        _644 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        _645 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        _646 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    }
    else
    {
        _634 = _635;
        _636 = _635;
        _637 = _635;
        _638 = _635;
        _639 = _635;
        _640 = _635;
        _641 = _635;
        _642 = _635;
        _643 = _635;
        _644 = _635;
        _645 = _635;
        _646 = _635;
    }
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _703 = (cbModelParam._m0[38u].x * ((((fma(_471, cbModelParam._m0[30u].z, fma(_467, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _463)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _704 = (cbModelParam._m0[38u].y * ((((fma(_471, cbModelParam._m0[31u].z, fma(_467, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _463)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _705 = (((((fma(_471, cbModelParam._m0[32u].z, fma(_467, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _463)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _714 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_703, _704, _705), 0.0);
        float _740 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _750 = exp2((_714.w + (-0.5)) * 20.0) * 2.0;
        float _760 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _770 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _771 = _770 * (_728.x + (-0.5));
        float _772 = _770 * (_728.y + (-0.5));
        float _773 = _770 * (_728.z + (-0.5));
        _777 = _740 * (_707.z + (-0.5));
        _778 = _740 * (_707.y + (-0.5));
        _779 = _740 * (_707.x + (-0.5));
        _780 = _750 * (_714.z + (-0.5));
        _781 = _750 * (_714.y + (-0.5));
        _782 = _750 * (_714.x + (-0.5));
        _783 = _760 * (_721.z + (-0.5));
        _784 = _760 * (_721.y + (-0.5));
        _785 = _760 * (_721.x + (-0.5));
        _786 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        _787 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        _788 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    }
    else
    {
        _777 = _635;
        _778 = _635;
        _779 = _635;
        _780 = _635;
        _781 = _635;
        _782 = _635;
        _783 = _635;
        _784 = _635;
        _785 = _635;
        _786 = _635;
        _787 = _635;
        _788 = _635;
    }
    float _803 = _403 * (-0.5);
    float _804 = _404 * (-0.5);
    float _805 = _405 * (-0.5);
    float _806 = dot(vec4(_803, _804, _805, 1.0), vec4(_779, _782, _785, _788));
    float _809 = dot(vec4(_803, _804, _805, 1.0), vec4(_778, _781, _784, _787));
    float _812 = dot(vec4(_803, _804, _805, 1.0), vec4(_777, _780, _783, _786));
    float _847;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _819 = dot(vec4(_803, _804, _805, 1.0), vec4(_634, _638, _641, _644));
        float _823 = dot(vec4(_803, _804, _805, 1.0), vec4(_636, _639, _642, _645));
        float _827 = dot(vec4(_803, _804, _805, 1.0), vec4(_637, _640, _643, _646));
        float _834 = dot(vec4(cbModelParam._m0[39u]), vec4(_803, _804, _805, 1.0));
        _847 = dot(vec3(isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)), isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)), isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_834) ? 0.0 : (isnan(0.0) ? _834 : max(0.0, _834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _847 = 1.0;
    }
    float _858;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _849 = dot(vec4(cbModelParam._m0[40u]), vec4(_803, _804, _805, 1.0));
        _858 = dot(vec3(isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)), isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)), isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_849) ? 0.0 : (isnan(0.0) ? _849 : max(0.0, _849))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _858 = 1.0;
    }
    float _862 = (_858 * cbModelParam._m0[1u].x) + (_847 * (1.0 - cbModelParam._m0[1u].x));
    float _868 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _951;
    float _953;
    float _955;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _918 = fma(_471, cbModelParam._m0[13u].z, fma(_467, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _463)) + cbModelParam._m0[13u].w;
        float _922 = fma(_471, cbModelParam._m0[14u].z, fma(_467, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _463)) + cbModelParam._m0[14u].w;
        float _926 = fma(_471, cbModelParam._m0[15u].z, fma(_467, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _463)) + cbModelParam._m0[15u].w;
        float _929 = fma(_441, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439));
        float _932 = fma(_441, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439));
        float _935 = fma(_441, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439));
        float _961;
        if (_929 > 0.0)
        {
            _961 = abs((1.0 - _918) / _929);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_929 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_918 + 1.0) / _929);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _961 = frontier_phi_25_23_ladder;
        }
        float _1261;
        if (_932 > 0.0)
        {
            _1261 = abs((1.0 - _922) / _932);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_932 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_922 + 1.0) / _932);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1261 = frontier_phi_34_30_ladder;
        }
        float _1565;
        if (_935 > 0.0)
        {
            _1565 = abs((1.0 - _926) / _935);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_935 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_926 + 1.0) / _935);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1565 = frontier_phi_48_41_ladder;
        }
        float _1567 = isnan(_1261) ? _961 : (isnan(_961) ? _1261 : min(_961, _1261));
        float _1568 = isnan(_1565) ? _1567 : (isnan(_1567) ? _1565 : min(_1567, _1565));
        float _1572 = (_1568 * _929) + _918;
        float _1573 = (_1568 * _932) + _922;
        float _1574 = (_1568 * _935) + _926;
        float _1575 = _1568 * 9.9999997473787516355514526367188e-05;
        float _1576 = (-1.0) - _1575;
        float _1578 = _1575 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1574 > _1578) || ((_1574 < _1576) || ((_1573 > _1578) || ((_1573 < _1576) || ((_1572 < _1576) || (_1572 > _1578))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1574, cbModelParam._m0[9u].z, fma(_1573, cbModelParam._m0[9u].y, _1572 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1574, cbModelParam._m0[10u].z, fma(_1573, cbModelParam._m0[10u].y, _1572 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1574, cbModelParam._m0[11u].z, fma(_1573, cbModelParam._m0[11u].y, _1572 * cbModelParam._m0[11u].x))), _868);
            frontier_phi_24_48_ladder = _1701.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1701.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1701.x * cbModelParam._m0[1u].y;
        }
        _951 = frontier_phi_24_48_ladder_2;
        _953 = frontier_phi_24_48_ladder_1;
        _955 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_439, _440, _441), _868);
        _951 = _939.x * cbModelParam._m0[1u].y;
        _953 = _939.y * cbModelParam._m0[1u].y;
        _955 = _939.z * cbModelParam._m0[1u].y;
    }
    float _958 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1047;
    float _1049;
    float _1051;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1011 = fma(_471, cbModelParam._m0[21u].z, fma(_467, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _463)) + cbModelParam._m0[21u].w;
        float _1015 = fma(_471, cbModelParam._m0[22u].z, fma(_467, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _463)) + cbModelParam._m0[22u].w;
        float _1019 = fma(_471, cbModelParam._m0[23u].z, fma(_467, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _463)) + cbModelParam._m0[23u].w;
        float _1022 = fma(_441, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439));
        float _1025 = fma(_441, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439));
        float _1028 = fma(_441, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439));
        float _1266;
        if (_1022 > 0.0)
        {
            _1266 = abs((1.0 - _1011) / _1022);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1022 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1011 + 1.0) / _1022);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1266 = frontier_phi_36_32_ladder;
        }
        float _1591;
        if (_1025 > 0.0)
        {
            _1591 = abs((1.0 - _1015) / _1025);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1025 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1015 + 1.0) / _1025);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1591 = frontier_phi_50_43_ladder;
        }
        float _1763;
        if (_1028 > 0.0)
        {
            _1763 = abs((1.0 - _1019) / _1028);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1028 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1019 + 1.0) / _1028);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1763 = frontier_phi_68_61_ladder;
        }
        float _1765 = isnan(_1591) ? _1266 : (isnan(_1266) ? _1591 : min(_1266, _1591));
        float _1766 = isnan(_1763) ? _1765 : (isnan(_1765) ? _1763 : min(_1765, _1763));
        float _1770 = (_1766 * _1022) + _1011;
        float _1771 = (_1766 * _1025) + _1015;
        float _1772 = (_1766 * _1028) + _1019;
        float _1773 = _1766 * 9.9999997473787516355514526367188e-05;
        float _1774 = (-1.0) - _1773;
        float _1776 = _1773 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1772 > _1776) || ((_1772 < _1774) || ((_1771 > _1776) || ((_1771 < _1774) || ((_1770 < _1774) || (_1770 > _1776))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1772, cbModelParam._m0[17u].z, fma(_1771, cbModelParam._m0[17u].y, _1770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1772, cbModelParam._m0[18u].z, fma(_1771, cbModelParam._m0[18u].y, _1770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1772, cbModelParam._m0[19u].z, fma(_1771, cbModelParam._m0[19u].y, _1770 * cbModelParam._m0[19u].x))), _958);
            frontier_phi_33_68_ladder = _1941.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1941.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1941.x * cbModelParam._m0[1u].z;
        }
        _1047 = frontier_phi_33_68_ladder_2;
        _1049 = frontier_phi_33_68_ladder_1;
        _1051 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1031 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_439, _440, _441), _958);
        _1047 = _1031.x * cbModelParam._m0[1u].z;
        _1049 = _1031.y * cbModelParam._m0[1u].z;
        _1051 = _1031.z * cbModelParam._m0[1u].z;
    }
    float _1063 = _438 * 0.01200000010430812835693359375;
    float _1065 = _1063 * ((cbModelParam._m0[1u].w * (_1047 - _951)) + _951);
    float _1066 = _1063 * ((cbModelParam._m0[1u].w * (_1049 - _953)) + _953);
    float _1067 = _1063 * ((cbModelParam._m0[1u].w * (_1051 - _955)) + _955);
    float _1088 = fma(_1067, cbSceneParam._m0[89u].z, fma(_1066, cbSceneParam._m0[89u].y, _1065 * cbSceneParam._m0[89u].x));
    float _1091 = fma(_1067, cbSceneParam._m0[90u].z, fma(_1066, cbSceneParam._m0[90u].y, _1065 * cbSceneParam._m0[90u].x));
    float _1094 = fma(_1067, cbSceneParam._m0[91u].z, fma(_1066, cbSceneParam._m0[91u].y, _1065 * cbSceneParam._m0[91u].x));
    vec4 _1102 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_425, _426));
    float _1104 = _1102.w;
    uint _1120 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1124 = floatBitsToUint(cbInstanceData._m0[_1120 + 5u]);
    uint _1126 = _1124.x * 14u;
    uint _1127 = _1126 + 13u;
    float _1132 = _438 + (-1.0);
    float _1136 = (cbLight._m0[_1127].x * _1132) + 1.0;
    float _1137 = (cbLight._m0[_1127].y * _1132) + 1.0;
    uint _1138 = _1126 + 8u;
    float _1149 = cbLight._m0[_1126].x + _403;
    float _1150 = cbLight._m0[_1126].y + _404;
    float _1151 = cbLight._m0[_1126].z + _405;
    float _1155 = inversesqrt(dot(vec3(_1149, _1150, _1151), vec3(_1149, _1150, _1151)));
    float _1159 = dot(vec3(0.0), vec3(cbLight._m0[_1126].xyz));
    float _2463 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
    float _1163 = dot(vec3(0.0), vec3(_403, _404, _405));
    float _2474 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    float _1167 = dot(vec3(cbLight._m0[_1126].xyz), vec3(_1149 * _1155, _1150 * _1155, _1151 * _1155));
    float _2485 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1178 = (exp2(log2(1.0 - (isnan(1.0) ? _2485 : (isnan(_2485) ? 1.0 : min(_2485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1184 = (0.5 / ((_1162 + 9.9999999392252902907785028219223e-09) + _1166)) * _1162;
    float _2496 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1186 = (isnan(1.0) ? _2496 : (isnan(_2496) ? 1.0 : min(_2496, 1.0))) * 0.31831014156341552734375;
    float _1188 = isnan(1.0) ? _1136 : (isnan(_1136) ? 1.0 : min(_1136, 1.0));
    uint _1201 = _1126 + 9u;
    uint _1207 = _1126 | 1u;
    float _1213 = cbLight._m0[_1207].x + _403;
    float _1214 = cbLight._m0[_1207].y + _404;
    float _1215 = cbLight._m0[_1207].z + _405;
    float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
    float _1223 = dot(vec3(0.0), vec3(cbLight._m0[_1207].xyz));
    float _2512 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _1226 = isnan(1.0) ? _2512 : (isnan(_2512) ? 1.0 : min(_2512, 1.0));
    float _1227 = dot(vec3(cbLight._m0[_1207].xyz), vec3(_1213 * _1219, _1214 * _1219, _1215 * _1219));
    float _2523 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1236 = (exp2(log2(1.0 - (isnan(1.0) ? _2523 : (isnan(_2523) ? 1.0 : min(_2523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1240 = (0.5 / ((_1226 + 9.9999999392252902907785028219223e-09) + _1166)) * _1226;
    float _2534 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1242 = (isnan(1.0) ? _2534 : (isnan(_2534) ? 1.0 : min(_2534, 1.0))) * 0.31831014156341552734375;
    float _1243 = isnan(1.0) ? _1137 : (isnan(_1137) ? 1.0 : min(_1137, 1.0));
    float _1253 = (((_1236 * cbLight._m0[_1201].x) * _1242) * _1243) + ((((cbLight._m0[_1138].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1104))) * _1178) * _1186) * _1188);
    float _1254 = (((_1236 * cbLight._m0[_1201].y) * _1242) * _1243) + ((((cbLight._m0[_1138].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1104))) * _1178) * _1186) * _1188);
    float _1255 = (((_1236 * cbLight._m0[_1201].z) * _1242) * _1243) + ((((cbLight._m0[_1138].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1104))) * _1178) * _1186) * _1188);
    float _1371;
    float _1373;
    float _1375;
    if (_1124.y == 0u)
    {
        float _1311 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1312 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1311;
        float _1313 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1311;
        float _1314 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1311;
        uvec4 _1326 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1327 = _1326.x;
        uint _1338 = uint((float(_1326.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _1327))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _1327)));
        float _1348 = (log2(_1314 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1349 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        uint _1352 = uint(isnan(14.0) ? _1349 : (isnan(_1349) ? 14.0 : min(_1349, 14.0)));
        uvec4 _1357 = texelFetch(g_lightClusterGridBuffer, int(((_1352 << 2u) + (_1338 << 6u)) >> 2u));
        uint _1358 = _1357.x;
        uint _1359 = _1326.z;
        float _1448;
        float _1450;
        float _1452;
        if (((((1u << ((_1359 >> 4u) & 15u)) + 4294967295u) & _1358) == 0u) || ((_1359 & 240u) == 0u))
        {
            _1448 = 0.0;
            _1450 = 0.0;
            _1452 = 0.0;
        }
        else
        {
            float _1449;
            float _1451;
            float _1453;
            float _1616 = 0.0;
            float _1617 = 0.0;
            float _1618 = 0.0;
            uint _1619 = 0u;
            uint _1628;
            bool _1629;
            for (;;)
            {
                _1628 = texelFetch(g_lightClassification, int((((_1352 << 5u) + (_1338 << 9u)) + (_1619 << 2u)) >> 2u)).x;
                _1629 = _1628 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1629)
                {
                    frontier_phi_63_pred = _1618;
                    frontier_phi_63_pred_1 = _1617;
                    frontier_phi_63_pred_2 = _1616;
                }
                else
                {
                    float _1803;
                    float _1804;
                    float _1805;
                    uint _1806;
                    _1803 = _1616;
                    _1804 = _1617;
                    _1805 = _1618;
                    _1806 = _1628;
                    float _1710;
                    float _1711;
                    float _1712;
                    for (;;)
                    {
                        uint _1810 = uint(findLSB(_1806)) + (_1619 << 5u);
                        uint _1807 = (_1806 + 4294967295u) & _1806;
                        uint _1812 = _1810 * 48u;
                        vec4 _1826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1812)).x, texelFetch(g_PointLightRenderingBuffer, int(_1812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1812 + 3u)).x));
                        uint _1843 = (_1810 * 48u) + 8u;
                        vec3 _1854 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1843)).x, texelFetch(g_PointLightRenderingBuffer, int(_1843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1843 + 2u)).x));
                        float _1858 = _1826.x - _1312;
                        float _1859 = _1826.y - _1313;
                        float _1860 = _1826.z - _1314;
                        float _1861 = dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860));
                        float _1864 = inversesqrt(_1861);
                        float _1873 = 1.0 - (_1861 * _1826.w);
                        float _2560 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
                        float _1875 = sqrt(_1861) * uintBitsToFloat(uvec4(_1833, _1834, _1835, texelFetch(g_PointLightRenderingBuffer, int(((_1810 * 48u) + 4u) + 3u)).x)).w;
                        float _1878 = 1.39999997615814208984375 / (_1875 + 1.39999997615814208984375);
                        float _1879 = _1878 * _1878;
                        float _1882 = ((1.0 - _1879) * dot(vec3(0.0), vec3(_1864 * _1858, _1864 * _1859, _1864 * _1860))) + _1879;
                        float _1884 = (-0.0) - _1312;
                        float _1885 = (-0.0) - _1313;
                        float _1886 = (-0.0) - _1314;
                        float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
                        float _1894 = dot(vec3(0.0), vec3(_1890 * _1884, _1890 * _1885, _1890 * _1886));
                        float _2571 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
                        float _2582 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
                        float _1898 = isnan(1.0) ? _2582 : (isnan(_2582) ? 1.0 : min(_2582, 1.0));
                        float _1902 = (0.5 / (((isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0))) + 9.9999999392252902907785028219223e-09) + _1898)) * _1898;
                        float _2593 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
                        float _1911 = (((isnan(1.0) ? _2593 : (isnan(_2593) ? 1.0 : min(_2593, 1.0))) * 3.1415927410125732421875) / (((_1875 * _1875) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0)));
                        _1710 = (_1911 * _1854.x) + _1803;
                        _1711 = (_1911 * _1854.y) + _1804;
                        _1712 = (_1911 * _1854.z) + _1805;
                        if (_1807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1803 = _1710;
                            _1804 = _1711;
                            _1805 = _1712;
                            _1806 = _1807;
                        }
                    }
                    frontier_phi_63_pred = _1712;
                    frontier_phi_63_pred_1 = _1711;
                    frontier_phi_63_pred_2 = _1710;
                }
                _1453 = frontier_phi_63_pred;
                _1451 = frontier_phi_63_pred_1;
                _1449 = frontier_phi_63_pred_2;
                uint _1620 = _1619 + 1u;
                if (_1620 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1616 = _1449;
                    _1617 = _1451;
                    _1618 = _1453;
                    _1619 = _1620;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1448 = _1449;
            _1450 = _1451;
            _1452 = _1453;
        }
        uvec4 _1456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1457 = _1456.z;
        uint _1459 = (_1457 >> 8u) & 15u;
        float _1596;
        float _1598;
        float _1600;
        if (((4294967295u << _1459) & _1358) == 0u)
        {
            _1596 = _1448;
            _1598 = _1450;
            _1600 = _1452;
        }
        else
        {
            float _1612 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1459 < ((_1457 >> 12u) & 15u))
            {
                float _1597;
                float _1599;
                float _1601;
                float _1789 = _1448;
                float _1790 = _1450;
                float _1791 = _1452;
                uint _1792 = _1459;
                uint _1801;
                bool _1802;
                for (;;)
                {
                    _1801 = texelFetch(g_lightClassification, int((((_1352 << 5u) + (_1338 << 9u)) + (_1792 << 2u)) >> 2u)).x;
                    _1802 = _1801 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1802)
                    {
                        frontier_phi_77_pred = _1790;
                        frontier_phi_77_pred_1 = _1789;
                        frontier_phi_77_pred_2 = _1791;
                    }
                    else
                    {
                        float _1946;
                        float _1947;
                        float _1948;
                        float _2168;
                        float _2169;
                        float _2170;
                        float _1956 = _1789;
                        float _1957 = _1790;
                        float _1958 = _1791;
                        uint _1959 = _1801;
                        uint _1960;
                        uint _1970;
                        vec4 _1985;
                        float _1986;
                        vec3 _1998;
                        vec4 _2013;
                        vec4 _2029;
                        float _2075;
                        bool _2076;
                        for (;;)
                        {
                            _1970 = ((_1792 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1959));
                            _1960 = (_1959 + 4294967295u) & _1959;
                            uint _1972 = _1970 * 40u;
                            _1985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1972 + 3u)).x));
                            _1986 = _1985.w;
                            uint _1988 = (_1970 * 40u) + 8u;
                            _1998 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 2u)).x));
                            uint _2000 = (_1970 * 40u) + 16u;
                            _2013 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2000)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2000 + 3u)).x));
                            uint _2016 = (_1970 * 40u) + 20u;
                            _2029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 3u)).x));
                            uint _2031 = (_1970 * 40u) + 24u;
                            vec4 _2044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 3u)).x));
                            uint _2050 = (_1970 * 40u) + 28u;
                            vec4 _2063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2050 + 3u)).x));
                            _2075 = fma(_1314, _2063.z, fma(_1313, _2063.y, _2063.x * _1312)) + _2063.w;
                            _2076 = !((fma(_1314, _2044.z, fma(_1313, _2044.y, _2044.x * _1312)) + _2044.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2076)
                            {
                                float _2110 = _1985.x - _1312;
                                float _2111 = _1985.y - _1313;
                                float _2112 = _1985.z - _1314;
                                float _2113 = dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112));
                                float _2116 = inversesqrt(_2113);
                                float _2123 = 1.0 - (_2113 / (_1986 * _1986));
                                float _2604 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
                                float _2125 = sqrt(_2113) * uintBitsToFloat(uvec4(_2079, _2080, _2081, texelFetch(g_SpotLightRenderingBuffer, int(((_1970 * 40u) + 4u) + 3u)).x)).w;
                                float _2127 = 1.39999997615814208984375 / (_2125 + 1.39999997615814208984375);
                                float _2128 = _2127 * _2127;
                                float _2131 = (fma(_1314, _2013.z, fma(_1313, _2013.y, _2013.x * _1312)) + _2013.w) / _2075;
                                float _2132 = (fma(_1314, _2029.z, fma(_1313, _2029.y, _2029.x * _1312)) + _2029.w) / _2075;
                                float _2136 = 1.0 - dot(vec2(_2131, _2132), vec2(_2131, _2132));
                                float _2615 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
                                float _2144 = dot(vec3(0.0), vec3((-0.0) - (_1312 * _1612), (-0.0) - (_1313 * _1612), (-0.0) - (_1314 * _1612)));
                                float _2626 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
                                float _2152 = ((1.0 - _2128) * dot(vec3(0.0), vec3(_2116 * _2110, _2116 * _2111, _2116 * _2112))) + _2128;
                                float _2637 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
                                float _2153 = isnan(1.0) ? _2637 : (isnan(_2637) ? 1.0 : min(_2637, 1.0));
                                float _2157 = (0.5 / (((isnan(1.0) ? _2626 : (isnan(_2626) ? 1.0 : min(_2626, 1.0))) + 9.9999999392252902907785028219223e-09) + _2153)) * _2153;
                                float _2648 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
                                float _2164 = ((isnan(1.0) ? _2615 : (isnan(_2615) ? 1.0 : min(_2615, 1.0))) * (isnan(1.0) ? _2604 : (isnan(_2604) ? 1.0 : min(_2604, 1.0)))) * (((isnan(1.0) ? _2648 : (isnan(_2648) ? 1.0 : min(_2648, 1.0))) * 3.1415927410125732421875) / (((_2125 * _2125) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2164 * _1998.z;
                                frontier_phi_83_pred_1 = _2164 * _1998.y;
                                frontier_phi_83_pred_2 = _2164 * _1998.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2170 = frontier_phi_83_pred;
                            _2169 = frontier_phi_83_pred_1;
                            _2168 = frontier_phi_83_pred_2;
                            _1946 = _2168 + _1956;
                            _1947 = _2169 + _1957;
                            _1948 = _2170 + _1958;
                            if (_1960 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1956 = _1946;
                                _1957 = _1947;
                                _1958 = _1948;
                                _1959 = _1960;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1947;
                        frontier_phi_77_pred_1 = _1946;
                        frontier_phi_77_pred_2 = _1948;
                    }
                    _1599 = frontier_phi_77_pred;
                    _1597 = frontier_phi_77_pred_1;
                    _1601 = frontier_phi_77_pred_2;
                    uint _1793 = _1792 + 1u;
                    if (_1793 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1789 = _1597;
                        _1790 = _1599;
                        _1791 = _1601;
                        _1792 = _1793;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1601;
                frontier_phi_52_53_ladder_1 = _1599;
                frontier_phi_52_53_ladder_2 = _1597;
            }
            else
            {
                frontier_phi_52_53_ladder = _1452;
                frontier_phi_52_53_ladder_1 = _1450;
                frontier_phi_52_53_ladder_2 = _1448;
            }
            _1596 = frontier_phi_52_53_ladder_2;
            _1598 = frontier_phi_52_53_ladder_1;
            _1600 = frontier_phi_52_53_ladder;
        }
        float _1605 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
        _1371 = ((_1596 * 0.039999999105930328369140625) * _1605) + _1253;
        _1373 = ((_1598 * 0.039999999105930328369140625) * _1605) + _1254;
        _1375 = ((_1600 * 0.039999999105930328369140625) * _1605) + _1255;
    }
    else
    {
        _1371 = _1253;
        _1373 = _1254;
        _1375 = _1255;
    }
    uint _1381 = _1120 + 9u;
    uint _1382 = _1381 + uint(cbMatDynParam._m0[0u].w);
    float _1397 = ((cbMtdParam._m0[9u].x * _369.x) * cbInstanceData._m0[_1382].x) + ((_1371 + ((isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0))) * _862)) * cbPerFrame._m0[3u].x);
    float _1398 = ((cbMtdParam._m0[9u].y * _369.y) * cbInstanceData._m0[_1382].y) + ((_1373 + ((isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0))) * _862)) * cbPerFrame._m0[3u].x);
    float _1399 = ((cbMtdParam._m0[9u].z * _369.z) * cbInstanceData._m0[_1382].z) + ((_1375 + ((isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0))) * _862)) * cbPerFrame._m0[3u].x);
    float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1401 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
    float _1402 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
    uint _1403 = _1120 + 6u;
    float _1411 = _425 / cbSceneParam._m0[86u].x;
    float _1412 = _426 / cbSceneParam._m0[86u].y;
    vec4 _1426 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1411, _1412, (log2((isnan(cbSceneParam._m0[77u].w) ? _398 : (isnan(_398) ? cbSceneParam._m0[77u].w : min(_398, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1428 = _1426.x;
    float _1429 = _1426.y;
    float _1430 = _1426.z;
    float _1431 = _1426.w;
    float _1505;
    float _1507;
    float _1509;
    float _1511;
    if (_398 > cbSceneParam._m0[78u].w)
    {
        float _1467 = isnan(_398) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _398 : min(cbSceneParam._m0[80u].w, _398));
        float _1468 = _1467 / _398;
        float _1479 = _1468 * _252;
        float _1480 = _253 * _1468;
        float _1481 = (-0.0) - _1480;
        float _1482 = _1468 * _254;
        float _1484 = (cbSceneParam._m0[77u].w * _1481) / _1467;
        float _1485 = _1484 + cbSceneParam._m0[79u].w;
        float _1486 = cbSceneParam._m0[79u].w - _1480;
        float _1492 = sqrt(((_1479 * _1479) + (_1480 * _1480)) + (_1482 * _1482));
        float _1495 = (1.0 - (cbSceneParam._m0[77u].w / _1467)) * _1492;
        float _1501 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1503 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1720;
        if (abs((_1481 - _1484) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1720 = ((((_1485 > 0.0) ? exp2(_1501 * _1485) : (2.0 - exp2(_1503 * _1485))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1495;
        }
        else
        {
            float _1642 = 1.0 / cbSceneParam._m0[80u].x;
            float _1643 = isnan(_1486) ? _1485 : (isnan(_1485) ? _1486 : max(_1485, _1486));
            float _1644 = isnan(_1486) ? _1485 : (isnan(_1485) ? _1486 : min(_1485, _1486));
            float _1653 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : min(_1643, 0.0));
            float _1654 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : min(_1644, 0.0));
            _1720 = ((abs(_1492 / _1481) * cbSceneParam._m0[80u].y) * ((((_1653 - _1654) * 2.0) - ((exp2(_1501 * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)))) - exp2(_1501 * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))))) * _1642)) - ((exp2(_1503 * _1653) - exp2(_1503 * _1654)) * _1642))) + (_1495 * cbSceneParam._m0[80u].z);
        }
        vec4 _1722 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1411, _1412, 1.0), 0.0);
        float _1731 = exp2((_1720 * (-1.44269502162933349609375)) * (1.0 - _1722.w));
        float _1732 = log2(_1731);
        float _1748 = log2(_1431);
        _1505 = (exp2(_1748 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1732 * cbSceneParam._m0[78u].x)) * _1722.x) / cbSceneParam._m0[78u].x)) + _1428;
        _1507 = (exp2(_1748 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1732 * cbSceneParam._m0[78u].y)) * _1722.y) / cbSceneParam._m0[78u].y)) + _1429;
        _1509 = (exp2(_1748 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1732 * cbSceneParam._m0[78u].z)) * _1722.z) / cbSceneParam._m0[78u].z)) + _1430;
        _1511 = _1731 * _1431;
    }
    else
    {
        _1505 = _1428;
        _1507 = _1429;
        _1509 = _1430;
        _1511 = _1431;
    }
    bool _1758;
    vec4 _1521;
    vec4 _1544;
    float _1546;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    bool _1564;
    for (;;)
    {
        _1521 = cbMatDynParam._m0[0u];
        float _1523 = roundEven(_1521.y);
        bool _1524 = _1523 == 3.0;
        float _1526 = log2(_1511);
        float _1533 = exp2(_1526 * cbSceneParam._m0[78u].x) * _1400;
        float _1534 = exp2(_1526 * cbSceneParam._m0[78u].y) * _1401;
        float _1535 = exp2(_1526 * cbSceneParam._m0[78u].z) * _1402;
        float _1542 = _412 + (-0.5);
        _1544 = cbMtdParam._m0[1u];
        _1546 = _1544.y * _1542;
        float _1549 = (_1523 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1550 = _1549 * (_1524 ? _1533 : (_1533 + (cbSceneParam._m0[72u].w * _1505)));
        _1551 = _1549 * (_1524 ? _1534 : (_1534 + (cbSceneParam._m0[72u].w * _1507)));
        _1552 = _1549 * (_1524 ? _1535 : (_1535 + (cbSceneParam._m0[72u].w * _1509)));
        _1553 = _1542 * 0.999000012874603271484375;
        _1564 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1564)
        {
            if ((cbInstanceData._m0[_1120 + 7u].x + _1553) < 0.5)
            {
                _1758 = true;
                break;
            }
        }
        uint _1677 = _1381 + uint(_1521.w);
        if ((cbInstanceData._m0[_1677].w < 1.0) && ((cbInstanceData._m0[_1677].w + _1553) < 0.5))
        {
            _1758 = true;
            break;
        }
        if ((_1546 + 1.0) < _1544.x)
        {
            _1758 = true;
            break;
        }
        _1758 = false;
        break;
    }
    float _1916;
    if (_1758)
    {
        discard_state = true;
        _1916 = 0.0;
    }
    else
    {
        _1916 = cbInstanceData._m0[_1403].w;
    }
    SV_Target.x = _1550;
    SV_Target.y = _1551;
    SV_Target.z = _1552;
    SV_Target.w = _1916;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1403].w;
    discard_exit();
}


