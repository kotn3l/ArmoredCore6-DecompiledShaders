#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _426;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _425;
            frontier_phi_3_2_ladder_2 = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _426;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder_1;
        _427 = frontier_phi_3_2_ladder_2;
        _429 = frontier_phi_3_2_ladder;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _427;
            frontier_phi_8_5_ladder_1 = _424;
            frontier_phi_8_5_ladder_2 = _429;
        }
        _455 = frontier_phi_8_5_ladder_1;
        _457 = frontier_phi_8_5_ladder;
        _459 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_456 * _396) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _427;
                frontier_phi_8_6_ladder_9_ladder_1 = _424;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _427;
            frontier_phi_8_6_ladder_1 = _424;
            frontier_phi_8_6_ladder_2 = _429;
        }
        _455 = frontier_phi_8_6_ladder_1;
        _457 = frontier_phi_8_6_ladder;
        _459 = frontier_phi_8_6_ladder_2;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    vec4 _504 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _506 = _504.x;
    vec4 _518 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _522 = _518.z;
    float _525 = (_518.x * 2.0) + (-1.0);
    float _526 = (_518.y * 2.0) + (-1.0);
    float _527 = dot(vec2(_525, _526), vec2(_525, _526));
    float _3191 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _532 = sqrt(1.0 - (isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))));
    float _533 = _522 * _288;
    float _543 = (cbMtdParam._m0[15u].w * ((_345 - _533) + ((_522 - _345) * _288))) + _533;
    float _551 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _525;
    float _552 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _526;
    float _555 = fma(_532, _197, fma(_552, _204, _551 * _190));
    float _558 = fma(_532, _198, fma(_552, _205, _551 * _191));
    float _561 = fma(_532, _199, fma(_552, _206, _551 * _192));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3202 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _569 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _3213 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3224 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3235 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3246 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _573 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _593 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _594 = _261 * _593;
    float _595 = _262 * _593;
    float _596 = _263 * _593;
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _623 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _626 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _629 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _642 = uint(roundEven(NORMAL.w)) * 13u;
    uint _643 = _642 + 9u;
    uint _644 = _643 + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3257 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _656 = 1.0 - _573;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _573;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _573;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _573;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _682 = _679.x * TEXCOORD.z;
    float _683 = dot(vec3(_566, _567, _568), vec3(_594, _595, _596));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _566) - _594;
    float _691 = (_686 * _567) - _595;
    float _692 = (_686 * _568) - _596;
    float _696 = abs(dot(vec3(_594, _595, _596), vec3(_566, _567, _568)));
    float _3290 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_569);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _791 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _795 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _819 = _746 + _566;
        float _820 = _750 + _567;
        float _821 = _754 + _568;
        float _831 = fma(_821, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _819)) - _787;
        float _832 = fma(_821, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _819)) - _791;
        float _833 = fma(_821, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _819)) - _795;
        float _837 = inversesqrt(dot(vec3(_831, _832, _833), vec3(_831, _832, _833)));
        float _850 = ((_837 * _831) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_837 * _832) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_837 * _833) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _855 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_850, _851, _852), 0.0);
        float _889 = exp2((_855.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_855.x + (-0.5));
        float _891 = _889 * (_855.y + (-0.5));
        float _892 = _889 * (_855.z + (-0.5));
        float _899 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_862.x + (-0.5));
        float _901 = _899 * (_862.y + (-0.5));
        float _902 = _899 * (_862.z + (-0.5));
        float _909 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_869.x + (-0.5));
        float _911 = _909 * (_869.y + (-0.5));
        float _912 = _909 * (_869.z + (-0.5));
        float _919 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_876.x + (-0.5));
        float _921 = _919 * (_876.y + (-0.5));
        float _922 = _919 * (_876.z + (-0.5));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = _890 * 0.5;
        float _927 = _900 * 0.5;
        float _928 = _910 * 0.5;
        float _929 = dot(vec3(_926, _927, _928), vec3(_926, _927, _928));
        float _934 = (_929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_929);
        float _943 = (dot(vec3(_566, _567, _568), vec3(_934 * _926, _934 * _927, _934 * _928)) + 1.0) * 0.5;
        float _3316 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _953 = sqrt(((_927 * _927) + (_926 * _926)) + (_928 * _928)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3327 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _955 = _954 * 2.0;
        float _959 = (1.0 - _954) / (_954 + 1.0);
        float _3338 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _969 = ((((1.0 - _960) * (_955 + 2.0)) * exp2(log2(isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0))) * (_955 + 1.0))) + _960) * _923;
        float _970 = _891 * 0.5;
        float _971 = _901 * 0.5;
        float _972 = _911 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _986 = (dot(vec3(_566, _567, _568), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _995 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _997 = _996 * 2.0;
        float _1001 = (1.0 - _996) / (_996 + 1.0);
        float _3371 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1011 = ((((1.0 - _1002) * (_997 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_997 + 1.0))) + _1002) * _924;
        float _1012 = _892 * 0.5;
        float _1013 = _902 * 0.5;
        float _1014 = _912 * 0.5;
        float _1015 = dot(vec3(_1012, _1013, _1014), vec3(_1012, _1013, _1014));
        float _1020 = (_1015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1015);
        float _1028 = (dot(vec3(_566, _567, _568), vec3(_1020 * _1012, _1020 * _1013, _1020 * _1014)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1037 = sqrt(((_1013 * _1013) + (_1012 * _1012)) + (_1014 * _1014)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3404 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_1039 + 1.0))) + _1044) * _925;
        _1061 = _892;
        _1062 = _891;
        _1063 = _890;
        _1064 = _902;
        _1065 = _901;
        _1066 = _900;
        _1067 = _912;
        _1068 = _911;
        _1069 = _910;
        _1070 = _925;
        _1071 = _924;
        _1072 = _923;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
    }
    else
    {
        _1061 = _426;
        _1062 = _426;
        _1063 = _426;
        _1064 = _426;
        _1065 = _426;
        _1066 = _426;
        _1067 = _426;
        _1068 = _426;
        _1069 = _426;
        _1070 = _426;
        _1071 = _426;
        _1072 = _426;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1105 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1109 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1132 = _746 + _566;
        float _1133 = _750 + _567;
        float _1134 = _754 + _568;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_566, _567, _568), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3445 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3456 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3467 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_566, _567, _568), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3500 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_566, _567, _568), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3533 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _426;
        _1371 = _426;
        _1372 = _426;
        _1373 = _426;
        _1374 = _426;
        _1375 = _426;
        _1376 = _426;
        _1377 = _426;
        _1378 = _426;
        _1379 = _426;
        _1380 = _426;
        _1381 = _426;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _690 * 0.5;
    float _1439 = _691 * 0.5;
    float _1440 = _692 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1569 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1572 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1600 = frontier_phi_26_24_ladder;
        }
        float _1986;
        if (_1569 > 0.0)
        {
            _1986 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1986 = frontier_phi_35_31_ladder;
        }
        float _2302;
        if (_1572 > 0.0)
        {
            _2302 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2302 = frontier_phi_49_42_ladder;
        }
        float _2304 = isnan(_1986) ? _1600 : (isnan(_1600) ? _1986 : min(_1600, _1986));
        float _2305 = isnan(_2302) ? _2304 : (isnan(_2304) ? _2302 : min(_2304, _2302));
        float _2309 = (_2305 * _1566) + _1555;
        float _2310 = (_2305 * _1569) + _1559;
        float _2311 = (_2305 * _1572) + _1563;
        float _2312 = _2305 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2312;
        float _2315 = _2312 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2311 > _2315) || ((_2311 < _2313) || ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 < _2313) || (_2309 > _2315))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2311, cbModelParam._m0[9u].z, fma(_2310, cbModelParam._m0[9u].y, _2309 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2311, cbModelParam._m0[10u].z, fma(_2310, cbModelParam._m0[10u].y, _2309 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2311, cbModelParam._m0[11u].z, fma(_2310, cbModelParam._m0[11u].y, _2309 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_25_49_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_25_49_ladder_2;
        _1590 = frontier_phi_25_49_ladder_1;
        _1592 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1507);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1666 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1669 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _1991;
        if (_1663 > 0.0)
        {
            _1991 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1991 = frontier_phi_37_33_ladder;
        }
        float _2328;
        if (_1666 > 0.0)
        {
            _2328 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2328 = frontier_phi_51_44_ladder;
        }
        float _2497;
        if (_1669 > 0.0)
        {
            _2497 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2497 = frontier_phi_65_60_ladder;
        }
        float _2499 = isnan(_2328) ? _1991 : (isnan(_1991) ? _2328 : min(_1991, _2328));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1663) + _1652;
        float _2505 = (_2500 * _1666) + _1656;
        float _2506 = (_2500 * _1669) + _1660;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_34_65_ladder = _2739.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2739.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2739.z * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_34_65_ladder_1;
        _1690 = frontier_phi_34_65_ladder;
        _1692 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1597);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1705 = (((_717 * _667) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1688 - _1588)) + _1588);
    float _1707 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1709 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    vec4 _1726 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_602, _603));
    float _1728 = _1726.w;
    float _1740 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1728);
    float _1741 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1728);
    float _1742 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1728);
    uvec4 _1746 = floatBitsToUint(cbInstanceData._m0[_642 + 5u]);
    uint _1748 = _1746.x * 14u;
    uint _1749 = _1748 + 13u;
    float _1754 = _682 + (-1.0);
    float _1757 = (cbLight._m0[_1749].x * _1754) + 1.0;
    float _1758 = (cbLight._m0[_1749].y * _1754) + 1.0;
    uint _1759 = _1748 + 5u;
    float _1765 = isnan(1.0) ? _1758 : (isnan(_1758) ? 1.0 : min(_1758, 1.0));
    uint _1769 = _1748 + 4u;
    float _1779 = isnan(1.0) ? _1757 : (isnan(_1757) ? 1.0 : min(_1757, 1.0));
    uint _1783 = _1748 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_566, _567, _568));
    float _1797 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_566, _567, _568));
    float _3669 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _3680 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1802 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.3183098733425140380859375;
    float _1804 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
    float _1811 = ((cbLight._m0[_1759].x * _1765) * _1804) + (((cbLight._m0[_1769].x * _1740) * _1779) * _1802);
    float _1812 = ((_1765 * cbLight._m0[_1759].y) * _1804) + (((cbLight._m0[_1769].y * _1741) * _1779) * _1802);
    float _1813 = ((_1765 * cbLight._m0[_1759].z) * _1804) + (((cbLight._m0[_1769].z * _1742) * _1779) * _1802);
    uint _1815 = _1748 + 8u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _569) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1748].x + _594;
    float _1831 = cbLight._m0[_1748].y + _595;
    float _1832 = cbLight._m0[_1748].z + _596;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1748].xyz));
    float _3691 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
    float _3702 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _1844 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
    float _1845 = dot(vec3(_566, _567, _568), vec3(_1837, _1838, _1839));
    float _3713 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1837, _1838, _1839));
    float _3724 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1853 = _1829 * _1829;
    float _1857 = ((_1848 * _1848) * (_1853 + (-1.0))) + 1.0;
    float _1865 = exp2(log2(1.0 - (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0)))) * 5.0);
    float _1866 = 0.959999978542327880859375 - _664;
    float _1868 = 0.959999978542327880859375 - _665;
    float _1869 = 0.959999978542327880859375 - _666;
    float _1876 = 1.0 - _1829;
    float _1887 = (0.5 / (((_1844 * ((_1843 * _1876) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1876) + _1829) * _1843))) * _1843;
    float _3735 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1853 / ((_1857 * _1857) * 3.141590118408203125));
    uint _1903 = _1748 + 9u;
    float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _569) * 0.949999988079071044921875);
    float _1915 = _1914 * _1914;
    float _1916 = cbLight._m0[_1783].x + _594;
    float _1917 = cbLight._m0[_1783].y + _595;
    float _1918 = cbLight._m0[_1783].z + _596;
    float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
    float _1923 = _1922 * _1916;
    float _1924 = _1922 * _1917;
    float _1925 = _1922 * _1918;
    float _1926 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1783].xyz));
    float _3746 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1930 = dot(vec3(_566, _567, _568), vec3(_1923, _1924, _1925));
    float _3757 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1923, _1924, _1925));
    float _3768 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1915 * _1915;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1949 = exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0);
    float _1956 = 1.0 - _1915;
    float _1966 = (0.5 / (((_1844 * ((_1929 * _1956) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1956) + _1915) * _1929))) * _1929;
    float _3779 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    float _1978 = (((((_1949 * _1866) + _667) * cbLight._m0[_1903].x) * _1968) * _1765) + ((((cbLight._m0[_1815].x * _1740) * ((_1865 * _1866) + _667)) * _1889) * _1779);
    float _1979 = (((((_1949 * _1868) + _669) * cbLight._m0[_1903].y) * _1968) * _1765) + ((((cbLight._m0[_1815].y * _1741) * ((_1865 * _1868) + _669)) * _1889) * _1779);
    float _1980 = (((((_1949 * _1869) + _670) * cbLight._m0[_1903].z) * _1968) * _1765) + ((((cbLight._m0[_1815].z * _1742) * ((_1865 * _1869) + _670)) * _1889) * _1779);
    float _2095;
    float _2097;
    float _2099;
    float _2101;
    float _2103;
    float _2105;
    if (_1746.y == 0u)
    {
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2036 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2035;
        float _2037 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2035;
        float _2038 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2035;
        uvec4 _2050 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2051 = _2050.x;
        uint _2062 = uint((float(_2050.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2051))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2051)));
        float _2072 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2073 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        uint _2076 = uint(isnan(14.0) ? _2073 : (isnan(_2073) ? 14.0 : min(_2073, 14.0)));
        uvec4 _2081 = texelFetch(g_lightClusterGridBuffer, int(((_2076 << 2u) + (_2062 << 6u)) >> 2u));
        uint _2082 = _2081.x;
        uint _2083 = _2050.z;
        float _2189;
        float _2191;
        float _2193;
        float _2195;
        float _2197;
        float _2199;
        if (((((1u << ((_2083 >> 4u) & 15u)) + 4294967295u) & _2082) == 0u) || ((_2083 & 240u) == 0u))
        {
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
            _2195 = 0.0;
            _2197 = 0.0;
            _2199 = 0.0;
        }
        else
        {
            float _2190;
            float _2192;
            float _2194;
            float _2196;
            float _2198;
            float _2200;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            float _2370 = 0.0;
            uint _2371 = 0u;
            uint _2380;
            bool _2381;
            for (;;)
            {
                _2380 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2371 << 2u)) >> 2u)).x;
                _2381 = _2380 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2381)
                {
                    frontier_phi_62_pred = _2366;
                    frontier_phi_62_pred_1 = _2365;
                    frontier_phi_62_pred_2 = _2367;
                    frontier_phi_62_pred_3 = _2370;
                    frontier_phi_62_pred_4 = _2369;
                    frontier_phi_62_pred_5 = _2368;
                }
                else
                {
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    uint _2546;
                    _2540 = _2365;
                    _2541 = _2366;
                    _2542 = _2367;
                    _2543 = _2368;
                    _2544 = _2369;
                    _2545 = _2370;
                    _2546 = _2380;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    for (;;)
                    {
                        uint _2550 = uint(findLSB(_2546)) + (_2371 << 5u);
                        uint _2547 = (_2546 + 4294967295u) & _2546;
                        uint _2552 = _2550 * 48u;
                        vec4 _2566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 3u)).x));
                        uint _2572 = (_2550 * 48u) + 4u;
                        vec4 _2585 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2591 = (_2550 * 48u) + 8u;
                        vec3 _2602 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x));
                        float _2606 = _2566.x - _2036;
                        float _2607 = _2566.y - _2037;
                        float _2608 = _2566.z - _2038;
                        float _2609 = dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608));
                        float _2612 = inversesqrt(_2609);
                        float _2613 = _2612 * _2606;
                        float _2614 = _2612 * _2607;
                        float _2615 = _2612 * _2608;
                        float _2616 = dot(vec3(_623, _626, _629), vec3(_2613, _2614, _2615));
                        float _2621 = 1.0 - (_2609 * _2566.w);
                        float _3800 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2622 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                        float _2623 = sqrt(_2609) * _2585.w;
                        float _2626 = 1.39999997615814208984375 / (_2623 + 1.39999997615814208984375);
                        float _2627 = _2626 * _2626;
                        float _2630 = ((1.0 - _2627) * _2616) + _2627;
                        float _2633 = _2623 * _2623;
                        float _2637 = ((isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))) * _2622) / ((_2633 * 0.699999988079071044921875) + 1.0);
                        float _2641 = (-0.0) - _2036;
                        float _2642 = (-0.0) - _2037;
                        float _2643 = (-0.0) - _2038;
                        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
                        float _2648 = _2647 * _2641;
                        float _2649 = _2647 * _2642;
                        float _2650 = _2647 * _2643;
                        float _2658 = exp2(log2(1.0 / ((_2633 * 3.5) + 5.0)) * 0.25);
                        float _2659 = 1.0 - _698;
                        float _2666 = sqrt(1.0 - ((1.0 - (_2659 * _2659)) * (1.0 - (_2658 * _2658))));
                        float _2667 = _2666 * _2666;
                        float _2668 = _2667 * _2667;
                        float _2669 = _2648 + _2613;
                        float _2670 = _2649 + _2614;
                        float _2671 = _2650 + _2615;
                        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                        float _2679 = dot(vec3(_623, _626, _629), vec3(_2648, _2649, _2650));
                        float _3816 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2682 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2683 = dot(vec3(_623, _626, _629), vec3(_2675 * _2669, _2675 * _2670, _2675 * _2671));
                        float _3827 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2686 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
                        float _2690 = ((_2686 * _2686) * (_2668 + (-1.0))) + 1.0;
                        float _2691 = _2626 * _2667;
                        float _2692 = _2691 * _2691;
                        float _2695 = ((1.0 - _2692) * _2616) + _2692;
                        float _3838 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2696 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                        float _2697 = 1.0 - _2667;
                        float _2707 = (0.5 / (((_2696 * ((_2682 * _2697) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2697) + _2667) * _2682))) * _2696;
                        float _3849 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2718 = (((_2668 * 3.1415927410125732421875) * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) / ((_2690 * _2690) * ((_2633 * 2.1991131305694580078125) + 3.141590118408203125))) * _2622;
                        _2449 = (_2637 * _2585.x) + _2543;
                        _2450 = (_2637 * _2585.y) + _2544;
                        _2451 = (_2637 * _2585.z) + _2545;
                        _2446 = (_2718 * _2602.x) + _2540;
                        _2447 = (_2718 * _2602.y) + _2541;
                        _2448 = (_2718 * _2602.z) + _2542;
                        if (_2547 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2540 = _2446;
                            _2541 = _2447;
                            _2542 = _2448;
                            _2543 = _2449;
                            _2544 = _2450;
                            _2545 = _2451;
                            _2546 = _2547;
                        }
                    }
                    frontier_phi_62_pred = _2447;
                    frontier_phi_62_pred_1 = _2446;
                    frontier_phi_62_pred_2 = _2448;
                    frontier_phi_62_pred_3 = _2451;
                    frontier_phi_62_pred_4 = _2450;
                    frontier_phi_62_pred_5 = _2449;
                }
                _2192 = frontier_phi_62_pred;
                _2190 = frontier_phi_62_pred_1;
                _2194 = frontier_phi_62_pred_2;
                _2200 = frontier_phi_62_pred_3;
                _2198 = frontier_phi_62_pred_4;
                _2196 = frontier_phi_62_pred_5;
                uint _2372 = _2371 + 1u;
                if (_2372 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2365 = _2190;
                    _2366 = _2192;
                    _2367 = _2194;
                    _2368 = _2196;
                    _2369 = _2198;
                    _2370 = _2200;
                    _2371 = _2372;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
            _2195 = _2196;
            _2197 = _2198;
            _2199 = _2200;
        }
        uvec4 _2203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2204 = _2203.z;
        uint _2206 = (_2204 >> 8u) & 15u;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((4294967295u << _2206) & _2082) == 0u)
        {
            _2333 = _2189;
            _2335 = _2191;
            _2337 = _2193;
            _2339 = _2195;
            _2341 = _2197;
            _2343 = _2199;
        }
        else
        {
            float _2358 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _2359 = _2358 * _2036;
            float _2360 = _2358 * _2037;
            float _2361 = _2358 * _2038;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2206 < ((_2204 >> 12u) & 15u))
            {
                float _2334;
                float _2336;
                float _2338;
                float _2340;
                float _2342;
                float _2344;
                float _2523 = _2189;
                float _2524 = _2191;
                float _2525 = _2193;
                float _2526 = _2195;
                float _2527 = _2197;
                float _2528 = _2199;
                uint _2529 = _2206;
                uint _2538;
                bool _2539;
                for (;;)
                {
                    _2538 = texelFetch(g_lightClassification, int((((_2076 << 5u) + (_2062 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                    _2539 = _2538 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2539)
                    {
                        frontier_phi_71_pred = _2524;
                        frontier_phi_71_pred_1 = _2523;
                        frontier_phi_71_pred_2 = _2528;
                        frontier_phi_71_pred_3 = _2527;
                        frontier_phi_71_pred_4 = _2526;
                        frontier_phi_71_pred_5 = _2525;
                    }
                    else
                    {
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _2749;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _2757 = _2523;
                        float _2758 = _2524;
                        float _2759 = _2525;
                        float _2760 = _2526;
                        float _2761 = _2527;
                        float _2762 = _2528;
                        uint _2763 = _2538;
                        uint _2764;
                        vec4 _2789;
                        float _2790;
                        vec4 _2805;
                        vec3 _2817;
                        vec4 _2832;
                        vec4 _2847;
                        float _2893;
                        bool _2894;
                        for (;;)
                        {
                            uint _2774 = ((_2529 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2763));
                            _2764 = (_2763 + 4294967295u) & _2763;
                            uint _2776 = _2774 * 40u;
                            _2789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 3u)).x));
                            _2790 = _2789.w;
                            uint _2792 = (_2774 * 40u) + 4u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2807 = (_2774 * 40u) + 8u;
                            _2817 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x));
                            uint _2819 = (_2774 * 40u) + 16u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2834 = (_2774 * 40u) + 20u;
                            _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2849 = (_2774 * 40u) + 24u;
                            vec4 _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2868 = (_2774 * 40u) + 28u;
                            vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            _2893 = fma(_2038, _2881.z, fma(_2037, _2881.y, _2881.x * _2036)) + _2881.w;
                            _2894 = !((fma(_2038, _2862.z, fma(_2037, _2862.y, _2862.x * _2036)) + _2862.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2894)
                            {
                                float _2921 = _2789.x - _2036;
                                float _2922 = _2789.y - _2037;
                                float _2923 = _2789.z - _2038;
                                float _2924 = dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923));
                                float _2927 = inversesqrt(_2924);
                                float _2928 = _2927 * _2921;
                                float _2929 = _2927 * _2922;
                                float _2930 = _2927 * _2923;
                                float _2934 = 1.0 - (_2924 / (_2790 * _2790));
                                float _3860 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                                float _2939 = sqrt(_2924) * _2805.w;
                                float _2941 = 1.39999997615814208984375 / (_2939 + 1.39999997615814208984375);
                                float _2942 = _2941 * _2941;
                                float _2945 = ((1.0 - _2942) * dot(vec3(_2928, _2929, _2930), vec3(_623, _626, _629))) + _2942;
                                float _2948 = _2939 * _2939;
                                float _2952 = (fma(_2038, _2832.z, fma(_2037, _2832.y, _2832.x * _2036)) + _2832.w) / _2893;
                                float _2953 = (fma(_2038, _2847.z, fma(_2037, _2847.y, _2847.x * _2036)) + _2847.w) / _2893;
                                float _2957 = 1.0 - dot(vec2(_2952, _2953), vec2(_2952, _2953));
                                float _3876 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                                float _2959 = _2958 * (((isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))) * _2935) / ((_2948 * 0.699999988079071044921875) + 1.0));
                                float _2971 = exp2(log2(1.0 / ((_2948 * 3.5) + 5.0)) * 0.25);
                                float _2972 = 1.0 - _698;
                                float _2979 = sqrt(1.0 - ((1.0 - (_2972 * _2972)) * (1.0 - (_2971 * _2971))));
                                float _2980 = _2979 * _2979;
                                float _2981 = _2980 * _2980;
                                float _2982 = _2928 - _2359;
                                float _2983 = _2929 - _2360;
                                float _2984 = _2930 - _2361;
                                float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
                                float _2992 = dot(vec3(_623, _626, _629), vec3((-0.0) - _2359, (-0.0) - _2360, (-0.0) - _2361));
                                float _3887 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2995 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2996 = dot(vec3(_623, _626, _629), vec3(_2988 * _2982, _2988 * _2983, _2988 * _2984));
                                float _3898 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                                float _3003 = ((_2999 * _2999) * (_2981 + (-1.0))) + 1.0;
                                float _3004 = _2941 * _2980;
                                float _3005 = _3004 * _3004;
                                float _3011 = ((1.0 - _3005) * dot(vec3(_623, _626, _629), vec3(_2928, _2929, _2930))) + _3005;
                                float _3909 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3012 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                                float _3013 = 1.0 - _2980;
                                float _3023 = (0.5 / (((_3012 * ((_2995 * _3013) + _2980)) + 9.9999999392252902907785028219223e-09) + (((_3012 * _3013) + _2980) * _2995))) * _3012;
                                float _3920 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3033 = (_2958 * _2935) * (((_2981 * 3.1415927410125732421875) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) / ((_3003 * _3003) * ((_2948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3033 * _2817.y;
                                frontier_phi_77_pred_1 = _3033 * _2817.x;
                                frontier_phi_77_pred_2 = _2959 * _2805.z;
                                frontier_phi_77_pred_3 = _2959 * _2805.y;
                                frontier_phi_77_pred_4 = _2959 * _2805.x;
                                frontier_phi_77_pred_5 = _3033 * _2817.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3038 = frontier_phi_77_pred;
                            _3037 = frontier_phi_77_pred_1;
                            _3042 = frontier_phi_77_pred_2;
                            _3041 = frontier_phi_77_pred_3;
                            _3040 = frontier_phi_77_pred_4;
                            _3039 = frontier_phi_77_pred_5;
                            _2747 = _3040 + _2760;
                            _2748 = _3041 + _2761;
                            _2749 = _3042 + _2762;
                            _2744 = _3037 + _2757;
                            _2745 = _3038 + _2758;
                            _2746 = _3039 + _2759;
                            if (_2764 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2764;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2745;
                        frontier_phi_71_pred_1 = _2744;
                        frontier_phi_71_pred_2 = _2749;
                        frontier_phi_71_pred_3 = _2748;
                        frontier_phi_71_pred_4 = _2747;
                        frontier_phi_71_pred_5 = _2746;
                    }
                    _2336 = frontier_phi_71_pred;
                    _2334 = frontier_phi_71_pred_1;
                    _2344 = frontier_phi_71_pred_2;
                    _2342 = frontier_phi_71_pred_3;
                    _2340 = frontier_phi_71_pred_4;
                    _2338 = frontier_phi_71_pred_5;
                    uint _2530 = _2529 + 1u;
                    if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2523 = _2334;
                        _2524 = _2336;
                        _2525 = _2338;
                        _2526 = _2340;
                        _2527 = _2342;
                        _2528 = _2344;
                        _2529 = _2530;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2344;
                frontier_phi_53_54_ladder_1 = _2340;
                frontier_phi_53_54_ladder_2 = _2338;
                frontier_phi_53_54_ladder_3 = _2336;
                frontier_phi_53_54_ladder_4 = _2334;
                frontier_phi_53_54_ladder_5 = _2342;
            }
            else
            {
                frontier_phi_53_54_ladder = _2199;
                frontier_phi_53_54_ladder_1 = _2195;
                frontier_phi_53_54_ladder_2 = _2193;
                frontier_phi_53_54_ladder_3 = _2191;
                frontier_phi_53_54_ladder_4 = _2189;
                frontier_phi_53_54_ladder_5 = _2197;
            }
            _2333 = frontier_phi_53_54_ladder_4;
            _2335 = frontier_phi_53_54_ladder_3;
            _2337 = frontier_phi_53_54_ladder_2;
            _2339 = frontier_phi_53_54_ladder_1;
            _2341 = frontier_phi_53_54_ladder_5;
            _2343 = frontier_phi_53_54_ladder;
        }
        float _2348 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2095 = (_2348 * _2339) + _1811;
        _2097 = (_2348 * _2341) + _1812;
        _2099 = (_2348 * _2343) + _1813;
        _2101 = ((_2333 * _667) * _2348) + _1978;
        _2103 = ((_2335 * _669) * _2348) + _1979;
        _2105 = ((_2337 * _670) * _2348) + _1980;
    }
    else
    {
        _2095 = _1811;
        _2097 = _1812;
        _2099 = _1813;
        _2101 = _1978;
        _2103 = _1979;
        _2105 = _1980;
    }
    uint _2111 = _643 + uint(cbMatDynParam._m0[0u].w);
    float _3936 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3947 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _3958 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2136 = (((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_2095 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _682))) + ((_2101 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2111].x * (_484 - (_484 * _288)));
    float _2138 = ((cbInstanceData._m0[_2111].y * (_485 - (_485 * _288))) + ((_2103 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_2097 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _682)));
    float _2140 = ((cbInstanceData._m0[_2111].z * (_486 - (_486 * _288))) + ((_2105 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1496)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2099 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _682)));
    uint _2144 = _642 + 6u;
    float _2152 = _602 / cbSceneParam._m0[86u].x;
    float _2153 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2167 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2152, _2153, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2169 = _2167.x;
    float _2170 = _2167.y;
    float _2171 = _2167.z;
    float _2172 = _2167.w;
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2214 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2215 = _2214 / _589;
        float _2226 = _2215 * _261;
        float _2227 = _262 * _2215;
        float _2228 = (-0.0) - _2227;
        float _2229 = _2215 * _263;
        float _2231 = (cbSceneParam._m0[77u].w * _2228) / _2214;
        float _2232 = _2231 + cbSceneParam._m0[79u].w;
        float _2233 = cbSceneParam._m0[79u].w - _2227;
        float _2239 = sqrt(((_2226 * _2226) + (_2227 * _2227)) + (_2229 * _2229));
        float _2242 = (1.0 - (cbSceneParam._m0[77u].w / _2214)) * _2239;
        float _2248 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2250 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2459;
        if (abs((_2228 - _2231) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2459 = ((((_2232 > 0.0) ? exp2(_2248 * _2232) : (2.0 - exp2(_2250 * _2232))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2242;
        }
        else
        {
            float _2394 = 1.0 / cbSceneParam._m0[80u].x;
            float _2395 = isnan(_2233) ? _2232 : (isnan(_2232) ? _2233 : max(_2232, _2233));
            float _2396 = isnan(_2233) ? _2232 : (isnan(_2232) ? _2233 : min(_2232, _2233));
            float _2405 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : min(_2395, 0.0));
            float _2406 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : min(_2396, 0.0));
            _2459 = ((abs(_2239 / _2228) * cbSceneParam._m0[80u].y) * ((((_2405 - _2406) * 2.0) - ((exp2(_2248 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)))) - exp2(_2248 * (isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))))) * _2394)) - ((exp2(_2250 * _2405) - exp2(_2250 * _2406)) * _2394))) + (_2242 * cbSceneParam._m0[80u].z);
        }
        vec4 _2461 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2152, _2153, 1.0), 0.0);
        float _2470 = exp2((_2459 * (-1.44269502162933349609375)) * (1.0 - _2461.w));
        float _2471 = log2(_2470);
        float _2487 = log2(_2172);
        _2252 = (exp2(_2487 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].x)) * _2461.x) / cbSceneParam._m0[78u].x)) + _2169;
        _2254 = (exp2(_2487 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].y)) * _2461.y) / cbSceneParam._m0[78u].y)) + _2170;
        _2256 = (exp2(_2487 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].z)) * _2461.z) / cbSceneParam._m0[78u].z)) + _2171;
        _2258 = _2470 * _2172;
    }
    else
    {
        _2252 = _2169;
        _2254 = _2170;
        _2256 = _2171;
        _2258 = _2172;
    }
    float _2270 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2271 = _2270 == 3.0;
    float _2272 = log2(_2258);
    float _2279 = exp2(_2272 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0)));
    float _2280 = exp2(_2272 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0)));
    float _2281 = exp2(_2272 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0)));
    float _2290 = (_2270 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2290 * (_2271 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2252)));
    SV_Target.y = _2290 * (_2271 ? _2280 : (_2280 + (cbSceneParam._m0[72u].w * _2254)));
    SV_Target.z = _2290 * (_2271 ? _2281 : (_2281 + (cbSceneParam._m0[72u].w * _2256)));
    SV_Target.w = cbInstanceData._m0[_2144].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2144].w;
}


