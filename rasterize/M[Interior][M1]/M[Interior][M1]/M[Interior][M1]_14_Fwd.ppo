#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _990;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    float _374 = (_350 > 0.0) ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_355 + (-0.5)) + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_356 + (-0.5)) + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _432 = 0.5 - (_284 * 0.5);
    float _439 = ((((_414 - (_414 * _284)) * cbMtdParam._m0[9u].x) - _297) * _432) + _297;
    float _440 = ((((_415 - (_415 * _284)) * cbMtdParam._m0[9u].y) - _299) * _432) + _299;
    float _441 = (((cbMtdParam._m0[9u].z * (_416 - (_416 * _284))) - _301) * _432) + _301;
    vec4 _453 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _455 = _453.x;
    vec4 _467 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _475 = (_467.x * 2.0) + (-1.0);
    float _477 = (_467.y * 2.0) + (-1.0);
    float _478 = dot(vec2(_475, _477), vec2(_475, _477));
    float _3072 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _483 = sqrt(1.0 - (isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))));
    float _484 = _467.z * _284;
    float _487 = fma(_483, _193, fma(_477, _200, _475 * _186));
    float _490 = fma(_483, _194, fma(_477, _201, _475 * _187));
    float _493 = fma(_483, _195, fma(_477, _202, _475 * _188));
    float _497 = inversesqrt(dot(vec3(_487, _490, _493), vec3(_487, _490, _493)));
    float _498 = _497 * _487;
    float _499 = _497 * _490;
    float _500 = _497 * _493;
    float _3083 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _501 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
    float _3094 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _3105 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _3116 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3127 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _505 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
    float _521 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _525 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _526 = _257 * _525;
    float _527 = _258 * _525;
    float _528 = _259 * _525;
    float _534 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _535 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _556 = fma(_500, cbSceneParam._m0[5u].z, fma(_499, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _498));
    float _559 = fma(_500, cbSceneParam._m0[6u].z, fma(_499, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _498));
    float _562 = fma(_500, cbSceneParam._m0[7u].z, fma(_499, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _498));
    uint _575 = uint(roundEven(NORMAL.w)) * 13u;
    uint _578 = (_575 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _584 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0)))) * cbInstanceData._m0[_578].x;
    float _585 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0)))) * cbInstanceData._m0[_578].y;
    float _586 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0)))) * cbInstanceData._m0[_578].z;
    float _3138 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _587 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
    float _3149 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _588 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    float _3160 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _589 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
    float _590 = 1.0 - _505;
    float _591 = _587 * _590;
    float _592 = _588 * _590;
    float _593 = _589 * _590;
    float _598 = (_587 + (-0.039999999105930328369140625)) * _505;
    float _599 = (_588 + (-0.039999999105930328369140625)) * _505;
    float _600 = (_589 + (-0.039999999105930328369140625)) * _505;
    float _601 = _598 + 0.039999999105930328369140625;
    float _603 = _599 + 0.039999999105930328369140625;
    float _604 = _600 + 0.039999999105930328369140625;
    vec4 _613 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _534, cbSceneParam._m0[86u].y * _535));
    float _616 = _613.x * TEXCOORD.z;
    float _617 = dot(vec3(_498, _499, _500), vec3(_526, _527, _528));
    float _620 = _617 * 2.0;
    float _624 = (_620 * _498) - _526;
    float _625 = (_620 * _499) - _527;
    float _626 = (_620 * _500) - _528;
    float _630 = abs(dot(vec3(_526, _527, _528), vec3(_498, _499, _500)));
    float _3171 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _632 = sqrt(_501);
    float _645 = exp2((_632 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_632 * 3.0));
    float _651 = (1.0 - _645) * ((_632 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _652 = _645 * _632;
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _989;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_688, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680));
        float _720 = fma(_688, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680));
        float _724 = fma(_688, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680));
        float _747 = _680 + _498;
        float _748 = _684 + _499;
        float _749 = _688 + _500;
        float _759 = fma(_749, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747)) - _716;
        float _760 = fma(_749, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747)) - _720;
        float _761 = fma(_749, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747)) - _724;
        float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
        float _778 = ((_765 * _759) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_765 * _760) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_765 * _761) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        float _817 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_783.x + (-0.5));
        float _819 = _817 * (_783.y + (-0.5));
        float _820 = _817 * (_783.z + (-0.5));
        float _827 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_790.x + (-0.5));
        float _829 = _827 * (_790.y + (-0.5));
        float _830 = _827 * (_790.z + (-0.5));
        float _837 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_797.x + (-0.5));
        float _839 = _837 * (_797.y + (-0.5));
        float _840 = _837 * (_797.z + (-0.5));
        float _847 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_804.x + (-0.5));
        float _849 = _847 * (_804.y + (-0.5));
        float _850 = _847 * (_804.z + (-0.5));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = _818 * 0.5;
        float _855 = _828 * 0.5;
        float _856 = _838 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _871 = (dot(vec3(_498, _499, _500), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3197 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _881 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3208 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3219 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0))) * (_883 + 1.0))) + _888) * _851;
        float _898 = _819 * 0.5;
        float _899 = _829 * 0.5;
        float _900 = _839 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_498, _499, _500), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3230 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3241 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3252 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))) * (_925 + 1.0))) + _930) * _852;
        float _940 = _820 * 0.5;
        float _941 = _830 * 0.5;
        float _942 = _840 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_498, _499, _500), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3263 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3274 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3285 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0))) * (_967 + 1.0))) + _972) * _853;
        _989 = _820;
        _991 = _819;
        _992 = _818;
        _993 = _830;
        _994 = _829;
        _995 = _828;
        _996 = _840;
        _997 = _839;
        _998 = _838;
        _999 = _853;
        _1000 = _852;
        _1001 = _851;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
    }
    else
    {
        _989 = _990;
        _991 = _990;
        _992 = _990;
        _993 = _990;
        _994 = _990;
        _995 = _990;
        _996 = _990;
        _997 = _990;
        _998 = _990;
        _999 = _990;
        _1000 = _990;
        _1001 = _990;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_688, cbModelParam._m0[30u].z, fma(_684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _680));
        float _1034 = fma(_688, cbModelParam._m0[31u].z, fma(_684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _680));
        float _1038 = fma(_688, cbModelParam._m0[32u].z, fma(_684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _680));
        float _1061 = _680 + _498;
        float _1062 = _684 + _499;
        float _1063 = _688 + _500;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_498, _499, _500), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3348 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_498, _499, _500), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3359 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3370 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3381 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_498, _499, _500), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3414 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _990;
        _1300 = _990;
        _1301 = _990;
        _1302 = _990;
        _1303 = _990;
        _1304 = _990;
        _1305 = _990;
        _1306 = _990;
        _1307 = _990;
        _1308 = _990;
        _1309 = _990;
        _1310 = _990;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _624 * 0.5;
    float _1368 = _625 * 0.5;
    float _1369 = _626 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_989, _993, _996, _999));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_991, _994, _997, _1000));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_992, _995, _998, _1001));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _501);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1517;
    float _1519;
    float _1521;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1484 = fma(_688, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680)) + cbModelParam._m0[13u].w;
        float _1488 = fma(_688, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680)) + cbModelParam._m0[14u].w;
        float _1492 = fma(_688, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680)) + cbModelParam._m0[15u].w;
        float _1495 = fma(_626, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _624));
        float _1498 = fma(_626, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _624));
        float _1501 = fma(_626, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _624));
        float _1529;
        if (_1495 > 0.0)
        {
            _1529 = abs((1.0 - _1484) / _1495);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1484 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1529 = frontier_phi_22_20_ladder;
        }
        float _1888;
        if (_1498 > 0.0)
        {
            _1888 = abs((1.0 - _1488) / _1498);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1488 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1888 = frontier_phi_31_27_ladder;
        }
        float _2188;
        if (_1501 > 0.0)
        {
            _2188 = abs((1.0 - _1492) / _1501);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1492 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2188 = frontier_phi_45_38_ladder;
        }
        float _2190 = isnan(_1888) ? _1529 : (isnan(_1529) ? _1888 : min(_1529, _1888));
        float _2191 = isnan(_2188) ? _2190 : (isnan(_2190) ? _2188 : min(_2190, _2188));
        float _2195 = (_2191 * _1495) + _1484;
        float _2196 = (_2191 * _1498) + _1488;
        float _2197 = (_2191 * _1501) + _1492;
        float _2198 = _2191 * 9.9999997473787516355514526367188e-05;
        float _2199 = (-1.0) - _2198;
        float _2201 = _2198 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2197 > _2201) || ((_2197 < _2199) || ((_2196 > _2201) || ((_2196 < _2199) || ((_2195 < _2199) || (_2195 > _2201))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2323 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2197, cbModelParam._m0[9u].z, fma(_2196, cbModelParam._m0[9u].y, _2195 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2197, cbModelParam._m0[10u].z, fma(_2196, cbModelParam._m0[10u].y, _2195 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2197, cbModelParam._m0[11u].z, fma(_2196, cbModelParam._m0[11u].y, _2195 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_21_45_ladder = _2323.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2323.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2323.x * cbModelParam._m0[1u].y;
        }
        _1517 = frontier_phi_21_45_ladder_2;
        _1519 = frontier_phi_21_45_ladder_1;
        _1521 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_624, _625, _626), _1436);
        _1517 = _1505.x * cbModelParam._m0[1u].y;
        _1519 = _1505.y * cbModelParam._m0[1u].y;
        _1521 = _1505.z * cbModelParam._m0[1u].y;
    }
    float _1525 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _501);
    float _1526 = isnan(_1525) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1525 : min(cbModelParam._m0[25u].w, _1525));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1579 = fma(_688, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680)) + cbModelParam._m0[21u].w;
        float _1583 = fma(_688, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680)) + cbModelParam._m0[22u].w;
        float _1587 = fma(_688, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680)) + cbModelParam._m0[23u].w;
        float _1590 = fma(_626, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _624));
        float _1593 = fma(_626, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _624));
        float _1596 = fma(_626, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _624));
        float _1893;
        if (_1590 > 0.0)
        {
            _1893 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1893 = frontier_phi_33_29_ladder;
        }
        float _2214;
        if (_1593 > 0.0)
        {
            _2214 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2214 = frontier_phi_47_40_ladder;
        }
        float _2383;
        if (_1596 > 0.0)
        {
            _2383 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2383 = frontier_phi_61_56_ladder;
        }
        float _2385 = isnan(_2214) ? _1893 : (isnan(_1893) ? _2214 : min(_1893, _2214));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1590) + _1579;
        float _2391 = (_2386 * _1593) + _1583;
        float _2392 = (_2386 * _1596) + _1587;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2625 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2392, cbModelParam._m0[17u].z, fma(_2391, cbModelParam._m0[17u].y, _2390 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2392, cbModelParam._m0[18u].z, fma(_2391, cbModelParam._m0[18u].y, _2390 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2392, cbModelParam._m0[19u].z, fma(_2391, cbModelParam._m0[19u].y, _2390 * cbModelParam._m0[19u].x))), _1526);
            frontier_phi_30_61_ladder = _2625.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2625.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2625.x * cbModelParam._m0[1u].z;
        }
        _1615 = frontier_phi_30_61_ladder_2;
        _1617 = frontier_phi_30_61_ladder_1;
        _1619 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_624, _625, _626), _1526);
        _1615 = _1599.x * cbModelParam._m0[1u].z;
        _1617 = _1599.y * cbModelParam._m0[1u].z;
        _1619 = _1599.z * cbModelParam._m0[1u].z;
    }
    float _1632 = (((_651 * _601) + _652) * _616) * ((cbModelParam._m0[1u].w * (_1615 - _1517)) + _1517);
    float _1634 = (((_651 * _603) + _652) * _616) * ((cbModelParam._m0[1u].w * (_1617 - _1519)) + _1519);
    float _1636 = (((_651 * _604) + _652) * _616) * ((cbModelParam._m0[1u].w * (_1619 - _1521)) + _1521);
    float _1639 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, _1632 * cbSceneParam._m0[91u].x));
    uvec4 _1655 = floatBitsToUint(cbInstanceData._m0[_575 + 5u]);
    uint _1657 = _1655.x * 14u;
    uint _1658 = _1657 + 13u;
    float _1663 = _616 + (-1.0);
    float _1666 = (cbLight._m0[_1658].x * _1663) + 1.0;
    float _1667 = (cbLight._m0[_1658].y * _1663) + 1.0;
    uint _1668 = _1657 + 5u;
    float _1674 = isnan(1.0) ? _1667 : (isnan(_1667) ? 1.0 : min(_1667, 1.0));
    uint _1678 = _1657 + 4u;
    float _1684 = isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0));
    uint _1688 = _1657 | 1u;
    float _1699 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_498, _499, _500));
    float _1702 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_498, _499, _500));
    float _3550 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _3561 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
    float _1707 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.3183098733425140380859375;
    float _1709 = (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * 0.3183098733425140380859375;
    float _1716 = ((cbLight._m0[_1668].x * _1674) * _1709) + ((cbLight._m0[_1678].x * _1684) * _1707);
    float _1717 = ((_1674 * cbLight._m0[_1668].y) * _1709) + ((_1684 * cbLight._m0[_1678].y) * _1707);
    float _1718 = ((_1674 * cbLight._m0[_1668].z) * _1709) + ((_1684 * cbLight._m0[_1678].z) * _1707);
    uint _1720 = _1657 + 8u;
    float _1733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1657].w)) * _501) * 0.949999988079071044921875);
    float _1734 = _1733 * _1733;
    float _1735 = cbLight._m0[_1657].x + _526;
    float _1736 = cbLight._m0[_1657].y + _527;
    float _1737 = cbLight._m0[_1657].z + _528;
    float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
    float _1742 = _1741 * _1735;
    float _1743 = _1741 * _1736;
    float _1744 = _1741 * _1737;
    float _1745 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1657].xyz));
    float _3572 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
    float _1748 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _3583 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _1749 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _1750 = dot(vec3(_498, _499, _500), vec3(_1742, _1743, _1744));
    float _3594 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1753 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _1754 = dot(vec3(cbLight._m0[_1657].xyz), vec3(_1742, _1743, _1744));
    float _3605 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1758 = _1734 * _1734;
    float _1762 = ((_1753 * _1753) * (_1758 + (-1.0))) + 1.0;
    float _1770 = exp2(log2(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * 5.0);
    float _1771 = 0.959999978542327880859375 - _598;
    float _1773 = 0.959999978542327880859375 - _599;
    float _1774 = 0.959999978542327880859375 - _600;
    float _1781 = 1.0 - _1734;
    float _1792 = (0.5 / (((_1749 * ((_1748 * _1781) + _1734)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1781) + _1734) * _1748))) * _1748;
    float _3616 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1758 / ((_1762 * _1762) * 3.141590118408203125));
    uint _1805 = _1657 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1688].w)) * _501) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1688].x + _526;
    float _1819 = cbLight._m0[_1688].y + _527;
    float _1820 = cbLight._m0[_1688].z + _528;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_498, _499, _500), vec3(cbLight._m0[_1688].xyz));
    float _3627 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _1832 = dot(vec3(_498, _499, _500), vec3(_1825, _1826, _1827));
    float _3638 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1688].xyz), vec3(_1825, _1826, _1827));
    float _3649 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * 5.0);
    float _1858 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1749 * ((_1831 * _1858) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1749 * _1858) + _1817) * _1831))) * _1831;
    float _3660 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1880 = (((((_1851 * _1771) + _601) * cbLight._m0[_1805].x) * _1870) * _1674) + (((((_1770 * _1771) + _601) * cbLight._m0[_1720].x) * _1794) * _1684);
    float _1881 = (((((_1851 * _1773) + _603) * cbLight._m0[_1805].y) * _1870) * _1674) + (((((_1770 * _1773) + _603) * cbLight._m0[_1720].y) * _1794) * _1684);
    float _1882 = (((((_1851 * _1774) + _604) * cbLight._m0[_1805].z) * _1870) * _1674) + (((((_1770 * _1774) + _604) * cbLight._m0[_1720].z) * _1794) * _1684);
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    if (_1655.y == 0u)
    {
        float _1937 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1938 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1937;
        float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1937;
        float _1940 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1937;
        uvec4 _1952 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1953 = _1952.x;
        uint _1964 = uint((float(_1952.y) * floor(float(uint(cbSceneParam._m0[85u].y * _535) / _1953))) + floor(float(uint(cbSceneParam._m0[85u].x * _534) / _1953)));
        float _1974 = (log2(_1940 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1975 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        uint _1978 = uint(isnan(14.0) ? _1975 : (isnan(_1975) ? 14.0 : min(_1975, 14.0)));
        uvec4 _1983 = texelFetch(g_lightClusterGridBuffer, int(((_1978 << 2u) + (_1964 << 6u)) >> 2u));
        uint _1984 = _1983.x;
        uint _1985 = _1952.z;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        if (((((1u << ((_1985 >> 4u) & 15u)) + 4294967295u) & _1984) == 0u) || ((_1985 & 240u) == 0u))
        {
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
        }
        else
        {
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2251 = 0.0;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            uint _2257 = 0u;
            uint _2266;
            bool _2267;
            for (;;)
            {
                _2266 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2257 << 2u)) >> 2u)).x;
                _2267 = _2266 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2267)
                {
                    frontier_phi_58_pred = _2252;
                    frontier_phi_58_pred_1 = _2256;
                    frontier_phi_58_pred_2 = _2255;
                    frontier_phi_58_pred_3 = _2254;
                    frontier_phi_58_pred_4 = _2253;
                    frontier_phi_58_pred_5 = _2251;
                }
                else
                {
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    uint _2432;
                    _2426 = _2251;
                    _2427 = _2252;
                    _2428 = _2253;
                    _2429 = _2254;
                    _2430 = _2255;
                    _2431 = _2256;
                    _2432 = _2266;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    float _2337;
                    for (;;)
                    {
                        uint _2436 = uint(findLSB(_2432)) + (_2257 << 5u);
                        uint _2433 = (_2432 + 4294967295u) & _2432;
                        uint _2438 = _2436 * 48u;
                        vec4 _2452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2438)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2438 + 3u)).x));
                        uint _2458 = (_2436 * 48u) + 4u;
                        vec4 _2471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 3u)).x));
                        uint _2477 = (_2436 * 48u) + 8u;
                        vec3 _2488 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2477)).x, texelFetch(g_PointLightRenderingBuffer, int(_2477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2477 + 2u)).x));
                        float _2492 = _2452.x - _1938;
                        float _2493 = _2452.y - _1939;
                        float _2494 = _2452.z - _1940;
                        float _2495 = dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494));
                        float _2498 = inversesqrt(_2495);
                        float _2499 = _2498 * _2492;
                        float _2500 = _2498 * _2493;
                        float _2501 = _2498 * _2494;
                        float _2502 = dot(vec3(_556, _559, _562), vec3(_2499, _2500, _2501));
                        float _2507 = 1.0 - (_2495 * _2452.w);
                        float _3681 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
                        float _2508 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2509 = sqrt(_2495) * _2471.w;
                        float _2512 = 1.39999997615814208984375 / (_2509 + 1.39999997615814208984375);
                        float _2513 = _2512 * _2512;
                        float _2516 = ((1.0 - _2513) * _2502) + _2513;
                        float _2519 = _2509 * _2509;
                        float _2523 = ((isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0))) * _2508) / ((_2519 * 0.699999988079071044921875) + 1.0);
                        float _2527 = (-0.0) - _1938;
                        float _2528 = (-0.0) - _1939;
                        float _2529 = (-0.0) - _1940;
                        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
                        float _2534 = _2533 * _2527;
                        float _2535 = _2533 * _2528;
                        float _2536 = _2533 * _2529;
                        float _2544 = exp2(log2(1.0 / ((_2519 * 3.5) + 5.0)) * 0.25);
                        float _2545 = 1.0 - _632;
                        float _2552 = sqrt(1.0 - ((1.0 - (_2545 * _2545)) * (1.0 - (_2544 * _2544))));
                        float _2553 = _2552 * _2552;
                        float _2554 = _2553 * _2553;
                        float _2555 = _2534 + _2499;
                        float _2556 = _2535 + _2500;
                        float _2557 = _2536 + _2501;
                        float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
                        float _2565 = dot(vec3(_556, _559, _562), vec3(_2534, _2535, _2536));
                        float _3697 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2568 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                        float _2569 = dot(vec3(_556, _559, _562), vec3(_2561 * _2555, _2561 * _2556, _2561 * _2557));
                        float _3708 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                        float _2572 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                        float _2576 = ((_2572 * _2572) * (_2554 + (-1.0))) + 1.0;
                        float _2577 = _2512 * _2553;
                        float _2578 = _2577 * _2577;
                        float _2581 = ((1.0 - _2578) * _2502) + _2578;
                        float _3719 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
                        float _2582 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
                        float _2583 = 1.0 - _2553;
                        float _2593 = (0.5 / (((_2582 * ((_2568 * _2583) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2582 * _2583) + _2553) * _2568))) * _2582;
                        float _3730 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
                        float _2604 = (((_2554 * 3.1415927410125732421875) * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) / ((_2576 * _2576) * ((_2519 * 2.1991131305694580078125) + 3.141590118408203125))) * _2508;
                        _2335 = (_2523 * _2471.x) + _2429;
                        _2336 = (_2523 * _2471.y) + _2430;
                        _2337 = (_2523 * _2471.z) + _2431;
                        _2332 = (_2604 * _2488.x) + _2426;
                        _2333 = (_2604 * _2488.y) + _2427;
                        _2334 = (_2604 * _2488.z) + _2428;
                        if (_2433 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2426 = _2332;
                            _2427 = _2333;
                            _2428 = _2334;
                            _2429 = _2335;
                            _2430 = _2336;
                            _2431 = _2337;
                            _2432 = _2433;
                        }
                    }
                    frontier_phi_58_pred = _2333;
                    frontier_phi_58_pred_1 = _2337;
                    frontier_phi_58_pred_2 = _2336;
                    frontier_phi_58_pred_3 = _2335;
                    frontier_phi_58_pred_4 = _2334;
                    frontier_phi_58_pred_5 = _2332;
                }
                _2078 = frontier_phi_58_pred;
                _2086 = frontier_phi_58_pred_1;
                _2084 = frontier_phi_58_pred_2;
                _2082 = frontier_phi_58_pred_3;
                _2080 = frontier_phi_58_pred_4;
                _2076 = frontier_phi_58_pred_5;
                uint _2258 = _2257 + 1u;
                if (_2258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2251 = _2076;
                    _2252 = _2078;
                    _2253 = _2080;
                    _2254 = _2082;
                    _2255 = _2084;
                    _2256 = _2086;
                    _2257 = _2258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
        }
        uvec4 _2089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2090 = _2089.z;
        uint _2092 = (_2090 >> 8u) & 15u;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        float _2227;
        float _2229;
        if (((4294967295u << _2092) & _1984) == 0u)
        {
            _2219 = _2075;
            _2221 = _2077;
            _2223 = _2079;
            _2225 = _2081;
            _2227 = _2083;
            _2229 = _2085;
        }
        else
        {
            float _2244 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
            float _2245 = _2244 * _1938;
            float _2246 = _2244 * _1939;
            float _2247 = _2244 * _1940;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2092 < ((_2090 >> 12u) & 15u))
            {
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2228;
                float _2230;
                float _2409 = _2075;
                float _2410 = _2077;
                float _2411 = _2079;
                float _2412 = _2081;
                float _2413 = _2083;
                float _2414 = _2085;
                uint _2415 = _2092;
                uint _2424;
                bool _2425;
                for (;;)
                {
                    _2424 = texelFetch(g_lightClassification, int((((_1978 << 5u) + (_1964 << 9u)) + (_2415 << 2u)) >> 2u)).x;
                    _2425 = _2424 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2425)
                    {
                        frontier_phi_67_pred = _2414;
                        frontier_phi_67_pred_1 = _2413;
                        frontier_phi_67_pred_2 = _2412;
                        frontier_phi_67_pred_3 = _2411;
                        frontier_phi_67_pred_4 = _2410;
                        frontier_phi_67_pred_5 = _2409;
                    }
                    else
                    {
                        float _2630;
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2635;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2643 = _2409;
                        float _2644 = _2410;
                        float _2645 = _2411;
                        float _2646 = _2412;
                        float _2647 = _2413;
                        float _2648 = _2414;
                        uint _2649 = _2424;
                        uint _2650;
                        vec4 _2675;
                        float _2676;
                        vec4 _2691;
                        vec3 _2703;
                        vec4 _2718;
                        vec4 _2734;
                        float _2780;
                        bool _2781;
                        for (;;)
                        {
                            uint _2660 = ((_2415 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2649));
                            _2650 = (_2649 + 4294967295u) & _2649;
                            uint _2662 = _2660 * 40u;
                            _2675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2662 + 3u)).x));
                            _2676 = _2675.w;
                            uint _2678 = (_2660 * 40u) + 4u;
                            _2691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2678 + 3u)).x));
                            uint _2693 = (_2660 * 40u) + 8u;
                            _2703 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2693 + 2u)).x));
                            uint _2705 = (_2660 * 40u) + 16u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2721 = (_2660 * 40u) + 20u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2736 = (_2660 * 40u) + 24u;
                            vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2755 = (_2660 * 40u) + 28u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            _2780 = fma(_1940, _2768.z, fma(_1939, _2768.y, _2768.x * _1938)) + _2768.w;
                            _2781 = !((fma(_1940, _2749.z, fma(_1939, _2749.y, _2749.x * _1938)) + _2749.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2781)
                            {
                                float _2808 = _2675.x - _1938;
                                float _2809 = _2675.y - _1939;
                                float _2810 = _2675.z - _1940;
                                float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                                float _2814 = inversesqrt(_2811);
                                float _2815 = _2814 * _2808;
                                float _2816 = _2814 * _2809;
                                float _2817 = _2814 * _2810;
                                float _2821 = 1.0 - (_2811 / (_2676 * _2676));
                                float _3741 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                                float _2822 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2826 = sqrt(_2811) * _2691.w;
                                float _2828 = 1.39999997615814208984375 / (_2826 + 1.39999997615814208984375);
                                float _2829 = _2828 * _2828;
                                float _2832 = ((1.0 - _2829) * dot(vec3(_2815, _2816, _2817), vec3(_556, _559, _562))) + _2829;
                                float _2835 = _2826 * _2826;
                                float _2839 = (fma(_1940, _2718.z, fma(_1939, _2718.y, _2718.x * _1938)) + _2718.w) / _2780;
                                float _2840 = (fma(_1940, _2734.z, fma(_1939, _2734.y, _2734.x * _1938)) + _2734.w) / _2780;
                                float _2844 = 1.0 - dot(vec2(_2839, _2840), vec2(_2839, _2840));
                                float _3757 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2845 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2846 = _2845 * (((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2822) / ((_2835 * 0.699999988079071044921875) + 1.0));
                                float _2858 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                                float _2859 = 1.0 - _632;
                                float _2866 = sqrt(1.0 - ((1.0 - (_2859 * _2859)) * (1.0 - (_2858 * _2858))));
                                float _2867 = _2866 * _2866;
                                float _2868 = _2867 * _2867;
                                float _2869 = _2815 - _2245;
                                float _2870 = _2816 - _2246;
                                float _2871 = _2817 - _2247;
                                float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                                float _2879 = dot(vec3(_556, _559, _562), vec3((-0.0) - _2245, (-0.0) - _2246, (-0.0) - _2247));
                                float _3768 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2882 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                                float _2883 = dot(vec3(_556, _559, _562), vec3(_2875 * _2869, _2875 * _2870, _2875 * _2871));
                                float _3779 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2886 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                                float _2890 = ((_2886 * _2886) * (_2868 + (-1.0))) + 1.0;
                                float _2891 = _2828 * _2867;
                                float _2892 = _2891 * _2891;
                                float _2898 = ((1.0 - _2892) * dot(vec3(_556, _559, _562), vec3(_2815, _2816, _2817))) + _2892;
                                float _3790 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                                float _2900 = 1.0 - _2867;
                                float _2910 = (0.5 / (((_2899 * ((_2882 * _2900) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2899 * _2900) + _2867) * _2882))) * _2899;
                                float _3801 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2920 = (_2845 * _2822) * (((_2868 * 3.1415927410125732421875) * (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) / ((_2890 * _2890) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2846 * _2691.z;
                                frontier_phi_73_pred_1 = _2846 * _2691.y;
                                frontier_phi_73_pred_2 = _2846 * _2691.x;
                                frontier_phi_73_pred_3 = _2920 * _2703.z;
                                frontier_phi_73_pred_4 = _2920 * _2703.y;
                                frontier_phi_73_pred_5 = _2920 * _2703.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2929 = frontier_phi_73_pred;
                            _2928 = frontier_phi_73_pred_1;
                            _2927 = frontier_phi_73_pred_2;
                            _2926 = frontier_phi_73_pred_3;
                            _2925 = frontier_phi_73_pred_4;
                            _2924 = frontier_phi_73_pred_5;
                            _2633 = _2927 + _2646;
                            _2634 = _2928 + _2647;
                            _2635 = _2929 + _2648;
                            _2630 = _2924 + _2643;
                            _2631 = _2925 + _2644;
                            _2632 = _2926 + _2645;
                            if (_2650 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2650;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2635;
                        frontier_phi_67_pred_1 = _2634;
                        frontier_phi_67_pred_2 = _2633;
                        frontier_phi_67_pred_3 = _2632;
                        frontier_phi_67_pred_4 = _2631;
                        frontier_phi_67_pred_5 = _2630;
                    }
                    _2230 = frontier_phi_67_pred;
                    _2228 = frontier_phi_67_pred_1;
                    _2226 = frontier_phi_67_pred_2;
                    _2224 = frontier_phi_67_pred_3;
                    _2222 = frontier_phi_67_pred_4;
                    _2220 = frontier_phi_67_pred_5;
                    uint _2416 = _2415 + 1u;
                    if (_2416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2409 = _2220;
                        _2410 = _2222;
                        _2411 = _2224;
                        _2412 = _2226;
                        _2413 = _2228;
                        _2414 = _2230;
                        _2415 = _2416;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2226;
                frontier_phi_49_50_ladder_1 = _2230;
                frontier_phi_49_50_ladder_2 = _2228;
                frontier_phi_49_50_ladder_3 = _2224;
                frontier_phi_49_50_ladder_4 = _2222;
                frontier_phi_49_50_ladder_5 = _2220;
            }
            else
            {
                frontier_phi_49_50_ladder = _2081;
                frontier_phi_49_50_ladder_1 = _2085;
                frontier_phi_49_50_ladder_2 = _2083;
                frontier_phi_49_50_ladder_3 = _2079;
                frontier_phi_49_50_ladder_4 = _2077;
                frontier_phi_49_50_ladder_5 = _2075;
            }
            _2219 = frontier_phi_49_50_ladder_5;
            _2221 = frontier_phi_49_50_ladder_4;
            _2223 = frontier_phi_49_50_ladder_3;
            _2225 = frontier_phi_49_50_ladder;
            _2227 = frontier_phi_49_50_ladder_2;
            _2229 = frontier_phi_49_50_ladder_1;
        }
        float _2234 = isnan(1.0) ? _616 : (isnan(_616) ? 1.0 : min(_616, 1.0));
        _1997 = (_2234 * _2225) + _1716;
        _1999 = (_2234 * _2227) + _1717;
        _2001 = (_2234 * _2229) + _1718;
        _2003 = ((_2219 * _601) * _2234) + _1880;
        _2005 = ((_2221 * _603) * _2234) + _1881;
        _2007 = ((_2223 * _604) * _2234) + _1882;
    }
    else
    {
        _1997 = _1716;
        _1999 = _1717;
        _2001 = _1718;
        _2003 = _1880;
        _2005 = _1881;
        _2007 = _1882;
    }
    float _3817 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _3828 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _3839 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _2024 = ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1997 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _616))) + ((_2003 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2025 = ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1999 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _616))) + ((_2005 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    float _2026 = ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_2001 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _616))) + ((_2007 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1425)) * cbPerFrame._m0[3u].x);
    uint _2030 = _575 + 6u;
    float _2038 = _534 / cbSceneParam._m0[86u].x;
    float _2039 = _535 / cbSceneParam._m0[86u].y;
    vec4 _2053 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, (log2((isnan(cbSceneParam._m0[77u].w) ? _521 : (isnan(_521) ? cbSceneParam._m0[77u].w : min(_521, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2055 = _2053.x;
    float _2056 = _2053.y;
    float _2057 = _2053.z;
    float _2058 = _2053.w;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    if (_521 > cbSceneParam._m0[78u].w)
    {
        float _2100 = isnan(_521) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _521 : min(cbSceneParam._m0[80u].w, _521));
        float _2101 = _2100 / _521;
        float _2112 = _2101 * _257;
        float _2113 = _258 * _2101;
        float _2114 = (-0.0) - _2113;
        float _2115 = _2101 * _259;
        float _2117 = (cbSceneParam._m0[77u].w * _2114) / _2100;
        float _2118 = _2117 + cbSceneParam._m0[79u].w;
        float _2119 = cbSceneParam._m0[79u].w - _2113;
        float _2125 = sqrt(((_2112 * _2112) + (_2113 * _2113)) + (_2115 * _2115));
        float _2128 = (1.0 - (cbSceneParam._m0[77u].w / _2100)) * _2125;
        float _2134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2345;
        if (abs((_2114 - _2117) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2345 = ((((_2118 > 0.0) ? exp2(_2134 * _2118) : (2.0 - exp2(_2136 * _2118))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2128;
        }
        else
        {
            float _2280 = 1.0 / cbSceneParam._m0[80u].x;
            float _2281 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : max(_2118, _2119));
            float _2282 = isnan(_2119) ? _2118 : (isnan(_2118) ? _2119 : min(_2118, _2119));
            float _2291 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : min(_2281, 0.0));
            float _2292 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : min(_2282, 0.0));
            _2345 = ((abs(_2125 / _2114) * cbSceneParam._m0[80u].y) * ((((_2291 - _2292) * 2.0) - ((exp2(_2134 * (isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0)))) - exp2(_2134 * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0))))) * _2280)) - ((exp2(_2136 * _2291) - exp2(_2136 * _2292)) * _2280))) + (_2128 * cbSceneParam._m0[80u].z);
        }
        vec4 _2347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2038, _2039, 1.0), 0.0);
        float _2356 = exp2((_2345 * (-1.44269502162933349609375)) * (1.0 - _2347.w));
        float _2357 = log2(_2356);
        float _2373 = log2(_2058);
        _2138 = (exp2(_2373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2357 * cbSceneParam._m0[78u].x)) * _2347.x) / cbSceneParam._m0[78u].x)) + _2055;
        _2140 = (exp2(_2373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2357 * cbSceneParam._m0[78u].y)) * _2347.y) / cbSceneParam._m0[78u].y)) + _2056;
        _2142 = (exp2(_2373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2357 * cbSceneParam._m0[78u].z)) * _2347.z) / cbSceneParam._m0[78u].z)) + _2057;
        _2144 = _2356 * _2058;
    }
    else
    {
        _2138 = _2055;
        _2140 = _2056;
        _2142 = _2057;
        _2144 = _2058;
    }
    float _2156 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2157 = _2156 == 3.0;
    float _2158 = log2(_2144);
    float _2165 = exp2(_2158 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)));
    float _2166 = exp2(_2158 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2167 = exp2(_2158 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0)));
    float _2176 = (_2156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2176 * (_2157 ? _2165 : (_2165 + (cbSceneParam._m0[72u].w * _2138)));
    SV_Target.y = _2176 * (_2157 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2140)));
    SV_Target.z = _2176 * (_2157 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2142)));
    SV_Target.w = cbInstanceData._m0[_2030].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2030].w;
}


