#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1300;
float _3471;
float _3472;
float _3473;
float _3474;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    float _335 = cbMtdParam._m0[22u].y + _265;
    float _336 = cbMtdParam._m0[22u].z + _266;
    float _337 = cbMtdParam._m0[22u].w + _267;
    float _351 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_194, _195, _196));
    float _352 = (-0.0) - dot(vec3(_335, _336, _337), vec3(_208, _209, _210));
    float _353 = (-0.0) - dot(vec3(_335, _336, _337), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _357 = inversesqrt(dot(vec3(_351, _352, _353), vec3(_351, _352, _353)));
    float _358 = _357 * _353;
    float _360 = (cbMtdParam._m0[19u].x * _351) * _357;
    float _362 = (cbMtdParam._m0[18u].w * _352) * _357;
    float _363 = fract(TEXCOORD.x);
    float _364 = fract(TEXCOORD.y);
    float _370;
    if (_360 > 0.0)
    {
        _370 = (1.0 - _363) / _360;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _363) / _360;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _370 = frontier_phi_3_2_ladder;
    }
    float _378;
    if (_362 > 0.0)
    {
        _378 = (1.0 - _364) / _362;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _364) / _362;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _378 = frontier_phi_7_6_ladder;
    }
    bool _380 = _358 > 0.0;
    float _382 = _380 ? (cbMtdParam._m0[15u].x / _358) : 5000.0;
    float _383 = isnan(_378) ? _370 : (isnan(_370) ? _378 : min(_370, _378));
    float _384 = isnan(_382) ? _383 : (isnan(_383) ? _382 : min(_383, _382));
    float _388 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _389 = _363 + (-0.5);
    float _392 = _364 + (-0.5);
    float _395 = ((_384 * _358) + _388) / _388;
    vec4 _420 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_389 + (_384 * _360)) / _395) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_392 + (_384 * _362)) / _395) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _422 = _420.x;
    float _423 = _420.y;
    float _424 = _420.z;
    float _436 = (_422 - (_422 * _292)) * cbMtdParam._m0[9u].x;
    float _437 = (_423 - (_423 * _292)) * cbMtdParam._m0[9u].y;
    float _438 = cbMtdParam._m0[9u].z * (_424 - (_424 * _292));
    float _460 = (cbMtdParam._m0[21u].x * _351) * _357;
    float _462 = (cbMtdParam._m0[20u].w * _352) * _357;
    bool _463 = _460 > 0.0;
    float _468;
    if (_463)
    {
        _468 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _468 = frontier_phi_11_10_ladder;
    }
    bool _470 = _462 > 0.0;
    float _475;
    if (_470)
    {
        _475 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _475 = frontier_phi_15_14_ladder;
    }
    float _478 = _380 ? (cbMtdParam._m0[16u].z / _358) : 5000.0;
    float _479 = isnan(_475) ? _468 : (isnan(_468) ? _475 : min(_468, _475));
    float _480 = isnan(_478) ? _479 : (isnan(_479) ? _478 : min(_479, _478));
    float _484 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _488 = ((_480 * _358) + _484) / _484;
    float _493 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _495 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _511 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_480 * _460)) / _488) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_480 * _462)) / _488) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _516 = _511.x * cbMtdParam._m0[10u].x;
    float _517 = _511.y * cbMtdParam._m0[10u].y;
    float _518 = _511.z * cbMtdParam._m0[10u].z;
    float _526;
    if (_463)
    {
        _526 = (1.0 - _363) / _460;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _363) / _460;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _526 = frontier_phi_19_18_ladder;
    }
    float _532;
    if (_470)
    {
        _532 = (1.0 - _364) / _462;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _364) / _462;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _532 = frontier_phi_23_22_ladder;
    }
    float _534 = isnan(_532) ? _526 : (isnan(_526) ? _532 : min(_526, _532));
    float _535 = isnan(_478) ? _534 : (isnan(_534) ? _478 : min(_534, _478));
    float _542 = ((_535 * _358) + _484) / _484;
    vec4 _556 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_389 + (_535 * _460)) / _542) + 0.5) + _493) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_392 + (_535 * _462)) / _542) + 0.5) + _495) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _558 = _556.w;
    float _560 = _558 - (_558 * _292);
    float _570 = (_560 * ((_516 - _436) - (_516 * _292))) + _436;
    float _571 = (_560 * ((_517 - _437) - (_517 * _292))) + _437;
    float _572 = (_560 * ((_518 - _438) - (_518 * _292))) + _438;
    float _587 = (cbMtdParam._m0[21u].z * _351) * _357;
    float _589 = (cbMtdParam._m0[21u].y * _352) * _357;
    bool _590 = _587 > 0.0;
    float _595;
    if (_590)
    {
        _595 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _595 = frontier_phi_27_26_ladder;
    }
    bool _597 = _589 > 0.0;
    float _602;
    if (_597)
    {
        _602 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _602 = frontier_phi_31_30_ladder;
    }
    float _605 = _380 ? (cbMtdParam._m0[18u].x / _358) : 5000.0;
    float _606 = isnan(_602) ? _595 : (isnan(_595) ? _602 : min(_595, _602));
    float _607 = isnan(_605) ? _606 : (isnan(_606) ? _605 : min(_606, _605));
    float _611 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _615 = ((_607 * _358) + _611) / _611;
    float _620 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _622 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _639 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_607 * _587)) / _615) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_607 * _589)) / _615) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _644 = _639.x * cbMtdParam._m0[14u].x;
    float _645 = _639.y * cbMtdParam._m0[14u].y;
    float _646 = _639.z * cbMtdParam._m0[14u].z;
    float _654;
    if (_590)
    {
        _654 = (1.0 - _363) / _587;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _363) / _587;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _654 = frontier_phi_35_34_ladder;
    }
    float _660;
    if (_597)
    {
        _660 = (1.0 - _364) / _589;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_589 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _364) / _589;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _660 = frontier_phi_39_38_ladder;
    }
    float _662 = isnan(_660) ? _654 : (isnan(_654) ? _660 : min(_654, _660));
    float _663 = isnan(_605) ? _662 : (isnan(_662) ? _605 : min(_662, _605));
    float _670 = ((_663 * _358) + _611) / _611;
    vec4 _684 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_389 + (_663 * _587)) / _670) + 0.5) + _620) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_392 + (_663 * _589)) / _670) + 0.5) + _622) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _686 = _684.w;
    float _688 = _686 - (_686 * _292);
    float _699 = 0.5 - (_292 * 0.5);
    float _709 = (((_570 - _305) + (_688 * ((_644 - _570) - (_644 * _292)))) * _699) + _305;
    float _710 = (((_571 - _307) + (_688 * ((_645 - _571) - (_645 * _292)))) * _699) + _307;
    float _711 = (((_572 - _309) + (_688 * ((_646 - _572) - (_646 * _292)))) * _699) + _309;
    vec4 _723 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _725 = _723.x;
    vec4 _737 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _745 = (_737.x * 2.0) + (-1.0);
    float _747 = (_737.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_745, _747), vec2(_745, _747));
    float _3533 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))));
    float _754 = _737.z * _292;
    float _757 = fma(_753, _201, fma(_747, _208, _745 * _194));
    float _760 = fma(_753, _202, fma(_747, _209, _745 * _195));
    float _763 = fma(_753, _203, fma(_747, _210, _745 * _196));
    float _767 = inversesqrt(dot(vec3(_757, _760, _763), vec3(_757, _760, _763)));
    float _768 = _767 * _757;
    float _769 = _767 * _760;
    float _770 = _767 * _763;
    float _3544 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _771 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _3566 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _3577 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _3588 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _775 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _795 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _796 = _265 * _795;
    float _797 = _266 * _795;
    float _798 = _267 * _795;
    vec4 _803 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _805 = _803.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _981 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _987 = (cbMatDynParam._m0[5u].x * _981) + cbMatDynParam._m0[5u].y;
        float _3599 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _992 = (cbMatDynParam._m0[5u].z * _981) + cbMatDynParam._m0[5u].w;
        float _3610 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) - _988)) + _988) < ((_805 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _838 = fma(_770, cbSceneParam._m0[5u].z, fma(_769, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _768));
    float _841 = fma(_770, cbSceneParam._m0[6u].z, fma(_769, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _768));
    float _844 = fma(_770, cbSceneParam._m0[7u].z, fma(_769, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _768));
    uint _857 = uint(roundEven(NORMAL.w)) * 13u;
    uint _859 = _857 + 9u;
    uint _860 = _859 + uint(cbMatDynParam._m0[0u].w);
    float _866 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0)))) * cbInstanceData._m0[_860].x;
    float _867 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_860].y;
    float _868 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_860].z;
    float _3621 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _3632 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _870 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _872 = 1.0 - _775;
    float _873 = _869 * _872;
    float _874 = _870 * _872;
    float _875 = _871 * _872;
    float _880 = (_869 + (-0.039999999105930328369140625)) * _775;
    float _881 = (_870 + (-0.039999999105930328369140625)) * _775;
    float _882 = (_871 + (-0.039999999105930328369140625)) * _775;
    float _883 = _880 + 0.039999999105930328369140625;
    float _885 = _881 + 0.039999999105930328369140625;
    float _886 = _882 + 0.039999999105930328369140625;
    vec4 _895 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _898 = _895.x * TEXCOORD.z;
    float _899 = dot(vec3(_768, _769, _770), vec3(_796, _797, _798));
    float _902 = _899 * 2.0;
    float _906 = (_902 * _768) - _796;
    float _907 = (_902 * _769) - _797;
    float _908 = (_902 * _770) - _798;
    float _912 = abs(dot(vec3(_796, _797, _798), vec3(_768, _769, _770)));
    float _3654 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _914 = sqrt(_771);
    float _927 = exp2((_914 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_914 * 3.0));
    float _933 = (1.0 - _927) * ((_914 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _934 = _927 * _914;
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1026 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1030 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1034 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1057 = _962 + _768;
        float _1058 = _966 + _769;
        float _1059 = _970 + _770;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1026 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1030 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1034 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_768, _769, _770), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3680 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3691 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3702 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_768, _769, _770), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3713 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3724 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3735 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_768, _769, _770), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3746 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3757 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3768 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1347 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1351 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1374 = _962 + _768;
        float _1375 = _966 + _769;
        float _1376 = _970 + _770;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_768, _769, _770), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3809 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _3820 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3831 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_768, _769, _770), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3842 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _3853 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _3864 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_768, _769, _770), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _3897 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = _1300;
        _1621 = _1300;
        _1622 = _1300;
        _1623 = _1300;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _906 * 0.5;
    float _1681 = _907 * 0.5;
    float _1682 = _908 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _771);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_908, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _906));
        float _1810 = fma(_908, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _906));
        float _1813 = fma(_908, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _906));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1841 = frontier_phi_57_55_ladder;
        }
        float _2199;
        if (_1810 > 0.0)
        {
            _2199 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2199 = frontier_phi_66_62_ladder;
        }
        float _2507;
        if (_1813 > 0.0)
        {
            _2507 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2507 = frontier_phi_80_73_ladder;
        }
        float _2509 = isnan(_2199) ? _1841 : (isnan(_1841) ? _2199 : min(_1841, _2199));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1807) + _1796;
        float _2515 = (_2510 * _1810) + _1800;
        float _2516 = (_2510 * _1813) + _1804;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2516, cbModelParam._m0[9u].z, fma(_2515, cbModelParam._m0[9u].y, _2514 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2516, cbModelParam._m0[10u].z, fma(_2515, cbModelParam._m0[10u].y, _2514 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2516, cbModelParam._m0[11u].z, fma(_2515, cbModelParam._m0[11u].y, _2514 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_56_80_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_56_80_ladder_2;
        _1831 = frontier_phi_56_80_ladder_1;
        _1833 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_906, _907, _908), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _771);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1890 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1894 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1898 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1901 = fma(_908, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _906));
        float _1904 = fma(_908, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _906));
        float _1907 = fma(_908, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _906));
        float _2204;
        if (_1901 > 0.0)
        {
            _2204 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2204 = frontier_phi_68_64_ladder;
        }
        float _2533;
        if (_1904 > 0.0)
        {
            _2533 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2533 = frontier_phi_82_75_ladder;
        }
        float _2723;
        if (_1907 > 0.0)
        {
            _2723 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2723 = frontier_phi_100_93_ladder;
        }
        float _2725 = isnan(_2533) ? _2204 : (isnan(_2204) ? _2533 : min(_2204, _2533));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _1901) + _1890;
        float _2731 = (_2726 * _1904) + _1894;
        float _2732 = (_2726 * _1907) + _1898;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2734 = (-1.0) - _2733;
        float _2736 = _2733 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2732 > _2736) || ((_2732 < _2734) || ((_2731 > _2736) || ((_2731 < _2734) || ((_2730 < _2734) || (_2730 > _2736))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2732, cbModelParam._m0[17u].z, fma(_2731, cbModelParam._m0[17u].y, _2730 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2732, cbModelParam._m0[18u].z, fma(_2731, cbModelParam._m0[18u].y, _2730 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2732, cbModelParam._m0[19u].z, fma(_2731, cbModelParam._m0[19u].y, _2730 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_65_100_ladder = _2974.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2974.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2974.z * cbModelParam._m0[1u].z;
        }
        _1926 = frontier_phi_65_100_ladder_1;
        _1928 = frontier_phi_65_100_ladder;
        _1930 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1910 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_906, _907, _908), _1838);
        _1926 = _1910.x * cbModelParam._m0[1u].z;
        _1928 = _1910.y * cbModelParam._m0[1u].z;
        _1930 = _1910.z * cbModelParam._m0[1u].z;
    }
    float _1943 = (((_933 * _883) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1926 - _1829)) + _1829);
    float _1945 = (((_933 * _885) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1928 - _1831)) + _1831);
    float _1947 = (((_933 * _886) + _934) * _898) * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1950 = fma(_1947, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1943 * cbSceneParam._m0[89u].x));
    float _1953 = fma(_1947, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1943 * cbSceneParam._m0[90u].x));
    float _1956 = fma(_1947, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1943 * cbSceneParam._m0[91u].x));
    uvec4 _1966 = floatBitsToUint(cbInstanceData._m0[_857 + 5u]);
    uint _1968 = _1966.x * 14u;
    uint _1969 = _1968 + 13u;
    float _1974 = _898 + (-1.0);
    float _1977 = (cbLight._m0[_1969].x * _1974) + 1.0;
    float _1978 = (cbLight._m0[_1969].y * _1974) + 1.0;
    uint _1979 = _1968 + 5u;
    float _1985 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _1989 = _1968 + 4u;
    float _1995 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _1999 = _1968 | 1u;
    float _2010 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_768, _769, _770));
    float _2013 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_768, _769, _770));
    float _4033 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _4044 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2018 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * 0.3183098733425140380859375;
    float _2020 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _2027 = ((cbLight._m0[_1979].x * _1985) * _2020) + ((cbLight._m0[_1989].x * _1995) * _2018);
    float _2028 = ((_1985 * cbLight._m0[_1979].y) * _2020) + ((_1995 * cbLight._m0[_1989].y) * _2018);
    float _2029 = ((_1985 * cbLight._m0[_1979].z) * _2020) + ((_1995 * cbLight._m0[_1989].z) * _2018);
    uint _2031 = _1968 + 8u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _771) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1968].x + _796;
    float _2047 = cbLight._m0[_1968].y + _797;
    float _2048 = cbLight._m0[_1968].z + _798;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_1968].xyz));
    float _4055 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _4066 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2060 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _2061 = dot(vec3(_768, _769, _770), vec3(_2053, _2054, _2055));
    float _4077 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _2065 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_2053, _2054, _2055));
    float _4088 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2069 = _2045 * _2045;
    float _2073 = ((_2064 * _2064) * (_2069 + (-1.0))) + 1.0;
    float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) * 5.0);
    float _2082 = 0.959999978542327880859375 - _880;
    float _2084 = 0.959999978542327880859375 - _881;
    float _2085 = 0.959999978542327880859375 - _882;
    float _2092 = 1.0 - _2045;
    float _2103 = (0.5 / (((_2060 * ((_2059 * _2092) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2092) + _2045) * _2059))) * _2059;
    float _4099 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2105 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2069 / ((_2073 * _2073) * 3.141590118408203125));
    uint _2116 = _1968 + 9u;
    float _2127 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1999].w)) * _771) * 0.949999988079071044921875);
    float _2128 = _2127 * _2127;
    float _2129 = cbLight._m0[_1999].x + _796;
    float _2130 = cbLight._m0[_1999].y + _797;
    float _2131 = cbLight._m0[_1999].z + _798;
    float _2135 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
    float _2136 = _2135 * _2129;
    float _2137 = _2135 * _2130;
    float _2138 = _2135 * _2131;
    float _2139 = dot(vec3(_768, _769, _770), vec3(cbLight._m0[_1999].xyz));
    float _4110 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _2143 = dot(vec3(_768, _769, _770), vec3(_2136, _2137, _2138));
    float _4121 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1999].xyz), vec3(_2136, _2137, _2138));
    float _4132 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2128 * _2128;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) * 5.0);
    float _2169 = 1.0 - _2128;
    float _2179 = (0.5 / (((_2060 * ((_2142 * _2169) + _2128)) + 9.9999999392252902907785028219223e-09) + (((_2060 * _2169) + _2128) * _2142))) * _2142;
    float _4143 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2181 = (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    float _2191 = (((((_2162 * _2082) + _883) * cbLight._m0[_2116].x) * _2181) * _1985) + (((((_2081 * _2082) + _883) * cbLight._m0[_2031].x) * _2105) * _1995);
    float _2192 = (((((_2162 * _2084) + _885) * cbLight._m0[_2116].y) * _2181) * _1985) + (((((_2081 * _2084) + _885) * cbLight._m0[_2031].y) * _2105) * _1995);
    float _2193 = (((((_2162 * _2085) + _886) * cbLight._m0[_2116].z) * _2181) * _1985) + (((((_2081 * _2085) + _886) * cbLight._m0[_2031].z) * _2105) * _1995);
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1966.y == 0u)
    {
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2248;
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2248;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2248;
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.x;
        uint _2275 = uint((float(_2263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2264))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2264)));
        float _2285 = (log2(_2251 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2286 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        uint _2289 = uint(isnan(14.0) ? _2286 : (isnan(_2286) ? 14.0 : min(_2286, 14.0)));
        uvec4 _2294 = texelFetch(g_lightClusterGridBuffer, int(((_2289 << 2u) + (_2275 << 6u)) >> 2u));
        uint _2295 = _2294.x;
        uint _2296 = _2263.z;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        if (((((1u << ((_2296 >> 4u) & 15u)) + 4294967295u) & _2295) == 0u) || ((_2296 & 240u) == 0u))
        {
            _2386 = 0.0;
            _2388 = 0.0;
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
        }
        else
        {
            float _2387;
            float _2389;
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            uint _2576 = 0u;
            uint _2585;
            bool _2586;
            for (;;)
            {
                _2585 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                _2586 = _2585 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2586)
                {
                    frontier_phi_95_pred = _2571;
                    frontier_phi_95_pred_1 = _2570;
                    frontier_phi_95_pred_2 = _2572;
                    frontier_phi_95_pred_3 = _2575;
                    frontier_phi_95_pred_4 = _2574;
                    frontier_phi_95_pred_5 = _2573;
                }
                else
                {
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    uint _2772;
                    _2766 = _2570;
                    _2767 = _2571;
                    _2768 = _2572;
                    _2769 = _2573;
                    _2770 = _2574;
                    _2771 = _2575;
                    _2772 = _2585;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    float _2672;
                    for (;;)
                    {
                        uint _2776 = uint(findLSB(_2772)) + (_2576 << 5u);
                        uint _2773 = (_2772 + 4294967295u) & _2772;
                        uint _2778 = _2776 * 48u;
                        vec4 _2792 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 3u)).x));
                        uint _2798 = (_2776 * 48u) + 4u;
                        vec4 _2811 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2798)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2798 + 3u)).x));
                        uint _2817 = (_2776 * 48u) + 8u;
                        vec3 _2828 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2817)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2817 + 2u)).x));
                        float _2832 = _2792.x - _2249;
                        float _2833 = _2792.y - _2250;
                        float _2834 = _2792.z - _2251;
                        float _2835 = dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834));
                        float _2838 = inversesqrt(_2835);
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2842 = dot(vec3(_838, _841, _844), vec3(_2839, _2840, _2841));
                        float _2847 = 1.0 - (_2835 * _2792.w);
                        float _4164 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
                        float _2849 = sqrt(_2835) * _2811.w;
                        float _2852 = 1.39999997615814208984375 / (_2849 + 1.39999997615814208984375);
                        float _2853 = _2852 * _2852;
                        float _2856 = ((1.0 - _2853) * _2842) + _2853;
                        float _2859 = _2849 * _2849;
                        float _2863 = ((isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0))) * _2848) / ((_2859 * 0.699999988079071044921875) + 1.0);
                        float _2867 = (-0.0) - _2249;
                        float _2868 = (-0.0) - _2250;
                        float _2869 = (-0.0) - _2251;
                        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
                        float _2874 = _2873 * _2867;
                        float _2875 = _2873 * _2868;
                        float _2876 = _2873 * _2869;
                        float _2884 = exp2(log2(1.0 / ((_2859 * 3.5) + 5.0)) * 0.25);
                        float _2885 = 1.0 - _914;
                        float _2892 = sqrt(1.0 - ((1.0 - (_2885 * _2885)) * (1.0 - (_2884 * _2884))));
                        float _2893 = _2892 * _2892;
                        float _2894 = _2893 * _2893;
                        float _2895 = _2874 + _2839;
                        float _2896 = _2875 + _2840;
                        float _2897 = _2876 + _2841;
                        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                        float _2905 = dot(vec3(_838, _841, _844), vec3(_2874, _2875, _2876));
                        float _4180 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2908 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2909 = dot(vec3(_838, _841, _844), vec3(_2901 * _2895, _2901 * _2896, _2901 * _2897));
                        float _4191 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                        float _2912 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2916 = ((_2912 * _2912) * (_2894 + (-1.0))) + 1.0;
                        float _2917 = _2852 * _2893;
                        float _2918 = _2917 * _2917;
                        float _2921 = ((1.0 - _2918) * _2842) + _2918;
                        float _4202 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
                        float _2922 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
                        float _2923 = 1.0 - _2893;
                        float _2933 = (0.5 / (((_2922 * ((_2908 * _2923) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2922 * _2923) + _2893) * _2908))) * _2922;
                        float _4213 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                        float _2944 = (((_2894 * 3.1415927410125732421875) * (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0)))) / ((_2916 * _2916) * ((_2859 * 2.1991131305694580078125) + 3.141590118408203125))) * _2848;
                        _2670 = (_2863 * _2811.x) + _2769;
                        _2671 = (_2863 * _2811.y) + _2770;
                        _2672 = (_2863 * _2811.z) + _2771;
                        _2667 = (_2944 * _2828.x) + _2766;
                        _2668 = (_2944 * _2828.y) + _2767;
                        _2669 = (_2944 * _2828.z) + _2768;
                        if (_2773 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2766 = _2667;
                            _2767 = _2668;
                            _2768 = _2669;
                            _2769 = _2670;
                            _2770 = _2671;
                            _2771 = _2672;
                            _2772 = _2773;
                        }
                    }
                    frontier_phi_95_pred = _2668;
                    frontier_phi_95_pred_1 = _2667;
                    frontier_phi_95_pred_2 = _2669;
                    frontier_phi_95_pred_3 = _2672;
                    frontier_phi_95_pred_4 = _2671;
                    frontier_phi_95_pred_5 = _2670;
                }
                _2389 = frontier_phi_95_pred;
                _2387 = frontier_phi_95_pred_1;
                _2391 = frontier_phi_95_pred_2;
                _2397 = frontier_phi_95_pred_3;
                _2395 = frontier_phi_95_pred_4;
                _2393 = frontier_phi_95_pred_5;
                uint _2577 = _2576 + 1u;
                if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2570 = _2387;
                    _2571 = _2389;
                    _2572 = _2391;
                    _2573 = _2393;
                    _2574 = _2395;
                    _2575 = _2397;
                    _2576 = _2577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2386 = _2387;
            _2388 = _2389;
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
        }
        uvec4 _2400 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2401 = _2400.z;
        uint _2403 = (_2401 >> 8u) & 15u;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((4294967295u << _2403) & _2295) == 0u)
        {
            _2538 = _2386;
            _2540 = _2388;
            _2542 = _2390;
            _2544 = _2392;
            _2546 = _2394;
            _2548 = _2396;
        }
        else
        {
            float _2563 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
            float _2564 = _2563 * _2249;
            float _2565 = _2563 * _2250;
            float _2566 = _2563 * _2251;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2403 < ((_2401 >> 12u) & 15u))
            {
                float _2539;
                float _2541;
                float _2543;
                float _2545;
                float _2547;
                float _2549;
                float _2749 = _2386;
                float _2750 = _2388;
                float _2751 = _2390;
                float _2752 = _2392;
                float _2753 = _2394;
                float _2754 = _2396;
                uint _2755 = _2403;
                uint _2764;
                bool _2765;
                for (;;)
                {
                    _2764 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                    _2765 = _2764 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2765)
                    {
                        frontier_phi_109_pred = _2750;
                        frontier_phi_109_pred_1 = _2749;
                        frontier_phi_109_pred_2 = _2754;
                        frontier_phi_109_pred_3 = _2753;
                        frontier_phi_109_pred_4 = _2752;
                        frontier_phi_109_pred_5 = _2751;
                    }
                    else
                    {
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2984;
                        float _3272;
                        float _3273;
                        float _3274;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _2992 = _2749;
                        float _2993 = _2750;
                        float _2994 = _2751;
                        float _2995 = _2752;
                        float _2996 = _2753;
                        float _2997 = _2754;
                        uint _2998 = _2764;
                        uint _2999;
                        vec4 _3024;
                        float _3025;
                        vec4 _3040;
                        vec3 _3052;
                        vec4 _3067;
                        vec4 _3082;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _3009 = ((_2755 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2998));
                            _2999 = (_2998 + 4294967295u) & _2998;
                            uint _3011 = _3009 * 40u;
                            _3024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 3u)).x));
                            _3025 = _3024.w;
                            uint _3027 = (_3009 * 40u) + 4u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3042 = (_3009 * 40u) + 8u;
                            _3052 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 2u)).x));
                            uint _3054 = (_3009 * 40u) + 16u;
                            _3067 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 3u)).x));
                            uint _3069 = (_3009 * 40u) + 20u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3009 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_3009 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_2251, _3116.z, fma(_2250, _3116.y, _3116.x * _2249)) + _3116.w;
                            _3129 = !((fma(_2251, _3097.z, fma(_2250, _3097.y, _3097.x * _2249)) + _3097.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3129)
                            {
                                float _3156 = _3024.x - _2249;
                                float _3157 = _3024.y - _2250;
                                float _3158 = _3024.z - _2251;
                                float _3159 = dot(vec3(_3156, _3157, _3158), vec3(_3156, _3157, _3158));
                                float _3162 = inversesqrt(_3159);
                                float _3163 = _3162 * _3156;
                                float _3164 = _3162 * _3157;
                                float _3165 = _3162 * _3158;
                                float _3169 = 1.0 - (_3159 / (_3025 * _3025));
                                float _4224 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3170 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                                float _3174 = sqrt(_3159) * _3040.w;
                                float _3176 = 1.39999997615814208984375 / (_3174 + 1.39999997615814208984375);
                                float _3177 = _3176 * _3176;
                                float _3180 = ((1.0 - _3177) * dot(vec3(_3163, _3164, _3165), vec3(_838, _841, _844))) + _3177;
                                float _3183 = _3174 * _3174;
                                float _3187 = (fma(_2251, _3067.z, fma(_2250, _3067.y, _3067.x * _2249)) + _3067.w) / _3128;
                                float _3188 = (fma(_2251, _3082.z, fma(_2250, _3082.y, _3082.x * _2249)) + _3082.w) / _3128;
                                float _3192 = 1.0 - dot(vec2(_3187, _3188), vec2(_3187, _3188));
                                float _4240 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                                float _3193 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
                                float _3194 = _3193 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3170) / ((_3183 * 0.699999988079071044921875) + 1.0));
                                float _3206 = exp2(log2(1.0 / ((_3183 * 3.5) + 5.0)) * 0.25);
                                float _3207 = 1.0 - _914;
                                float _3214 = sqrt(1.0 - ((1.0 - (_3207 * _3207)) * (1.0 - (_3206 * _3206))));
                                float _3215 = _3214 * _3214;
                                float _3216 = _3215 * _3215;
                                float _3217 = _3163 - _2564;
                                float _3218 = _3164 - _2565;
                                float _3219 = _3165 - _2566;
                                float _3223 = inversesqrt(dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219)));
                                float _3227 = dot(vec3(_838, _841, _844), vec3((-0.0) - _2564, (-0.0) - _2565, (-0.0) - _2566));
                                float _4251 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3230 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3231 = dot(vec3(_838, _841, _844), vec3(_3223 * _3217, _3223 * _3218, _3223 * _3219));
                                float _4262 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3234 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                                float _3238 = ((_3234 * _3234) * (_3216 + (-1.0))) + 1.0;
                                float _3239 = _3176 * _3215;
                                float _3240 = _3239 * _3239;
                                float _3246 = ((1.0 - _3240) * dot(vec3(_838, _841, _844), vec3(_3163, _3164, _3165))) + _3240;
                                float _4273 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3248 = 1.0 - _3215;
                                float _3258 = (0.5 / (((_3247 * ((_3230 * _3248) + _3215)) + 9.9999999392252902907785028219223e-09) + (((_3247 * _3248) + _3215) * _3230))) * _3247;
                                float _4284 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3268 = (_3193 * _3170) * (((_3216 * 3.1415927410125732421875) * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) / ((_3238 * _3238) * ((_3183 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3194 * _3040.y;
                                frontier_phi_115_pred_1 = _3194 * _3040.x;
                                frontier_phi_115_pred_2 = _3268 * _3052.z;
                                frontier_phi_115_pred_3 = _3268 * _3052.y;
                                frontier_phi_115_pred_4 = _3268 * _3052.x;
                                frontier_phi_115_pred_5 = _3194 * _3040.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3276 = frontier_phi_115_pred;
                            _3275 = frontier_phi_115_pred_1;
                            _3274 = frontier_phi_115_pred_2;
                            _3273 = frontier_phi_115_pred_3;
                            _3272 = frontier_phi_115_pred_4;
                            _3277 = frontier_phi_115_pred_5;
                            _2982 = _3275 + _2995;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            _2979 = _3272 + _2992;
                            _2980 = _3273 + _2993;
                            _2981 = _3274 + _2994;
                            if (_2999 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2992 = _2979;
                                _2993 = _2980;
                                _2994 = _2981;
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2999;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2980;
                        frontier_phi_109_pred_1 = _2979;
                        frontier_phi_109_pred_2 = _2984;
                        frontier_phi_109_pred_3 = _2983;
                        frontier_phi_109_pred_4 = _2982;
                        frontier_phi_109_pred_5 = _2981;
                    }
                    _2541 = frontier_phi_109_pred;
                    _2539 = frontier_phi_109_pred_1;
                    _2549 = frontier_phi_109_pred_2;
                    _2547 = frontier_phi_109_pred_3;
                    _2545 = frontier_phi_109_pred_4;
                    _2543 = frontier_phi_109_pred_5;
                    uint _2756 = _2755 + 1u;
                    if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2749 = _2539;
                        _2750 = _2541;
                        _2751 = _2543;
                        _2752 = _2545;
                        _2753 = _2547;
                        _2754 = _2549;
                        _2755 = _2756;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2539;
                frontier_phi_84_85_ladder_1 = _2543;
                frontier_phi_84_85_ladder_2 = _2549;
                frontier_phi_84_85_ladder_3 = _2547;
                frontier_phi_84_85_ladder_4 = _2545;
                frontier_phi_84_85_ladder_5 = _2541;
            }
            else
            {
                frontier_phi_84_85_ladder = _2386;
                frontier_phi_84_85_ladder_1 = _2390;
                frontier_phi_84_85_ladder_2 = _2396;
                frontier_phi_84_85_ladder_3 = _2394;
                frontier_phi_84_85_ladder_4 = _2392;
                frontier_phi_84_85_ladder_5 = _2388;
            }
            _2538 = frontier_phi_84_85_ladder;
            _2540 = frontier_phi_84_85_ladder_5;
            _2542 = frontier_phi_84_85_ladder_1;
            _2544 = frontier_phi_84_85_ladder_4;
            _2546 = frontier_phi_84_85_ladder_3;
            _2548 = frontier_phi_84_85_ladder_2;
        }
        float _2553 = isnan(1.0) ? _898 : (isnan(_898) ? 1.0 : min(_898, 1.0));
        _2308 = (_2553 * _2544) + _2027;
        _2310 = (_2553 * _2546) + _2028;
        _2312 = (_2553 * _2548) + _2029;
        _2314 = ((_2538 * _883) * _2553) + _2191;
        _2316 = ((_2540 * _885) * _2553) + _2192;
        _2318 = ((_2542 * _886) * _2553) + _2193;
    }
    else
    {
        _2308 = _2027;
        _2310 = _2028;
        _2312 = _2029;
        _2314 = _2191;
        _2316 = _2192;
        _2318 = _2193;
    }
    float _4300 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4311 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4322 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2335 = ((isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2308 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _898))) + ((_2314 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2336 = ((isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_2310 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _898))) + ((_2316 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_2312 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _898))) + ((_2318 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1738)) * cbPerFrame._m0[3u].x);
    float _2338 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2339 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    uint _2341 = _857 + 6u;
    float _2349 = _818 / cbSceneParam._m0[86u].x;
    float _2350 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2364 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2366 = _2364.x;
    float _2367 = _2364.y;
    float _2368 = _2364.z;
    float _2369 = _2364.w;
    float _2449;
    float _2451;
    float _2453;
    float _2455;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2411 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2412 = _2411 / _791;
        float _2423 = _2412 * _265;
        float _2424 = _266 * _2412;
        float _2425 = (-0.0) - _2424;
        float _2426 = _2412 * _267;
        float _2428 = (cbSceneParam._m0[77u].w * _2425) / _2411;
        float _2429 = _2428 + cbSceneParam._m0[79u].w;
        float _2430 = cbSceneParam._m0[79u].w - _2424;
        float _2436 = sqrt(((_2423 * _2423) + (_2424 * _2424)) + (_2426 * _2426));
        float _2439 = (1.0 - (cbSceneParam._m0[77u].w / _2411)) * _2436;
        float _2445 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2447 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2680;
        if (abs((_2425 - _2428) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2680 = ((((_2429 > 0.0) ? exp2(_2445 * _2429) : (2.0 - exp2(_2447 * _2429))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2439;
        }
        else
        {
            float _2599 = 1.0 / cbSceneParam._m0[80u].x;
            float _2600 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : max(_2429, _2430));
            float _2601 = isnan(_2430) ? _2429 : (isnan(_2429) ? _2430 : min(_2429, _2430));
            float _2610 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : min(_2600, 0.0));
            float _2611 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : min(_2601, 0.0));
            _2680 = ((abs(_2436 / _2425) * cbSceneParam._m0[80u].y) * ((((_2610 - _2611) * 2.0) - ((exp2(_2445 * (isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0)))) - exp2(_2445 * (isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0))))) * _2599)) - ((exp2(_2447 * _2610) - exp2(_2447 * _2611)) * _2599))) + (_2439 * cbSceneParam._m0[80u].z);
        }
        vec4 _2682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2349, _2350, 1.0), 0.0);
        float _2691 = exp2((_2680 * (-1.44269502162933349609375)) * (1.0 - _2682.w));
        float _2692 = log2(_2691);
        float _2708 = log2(_2369);
        _2449 = (exp2(_2708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].x)) * _2682.x) / cbSceneParam._m0[78u].x)) + _2366;
        _2451 = (exp2(_2708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].y)) * _2682.y) / cbSceneParam._m0[78u].y)) + _2367;
        _2453 = (exp2(_2708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2692 * cbSceneParam._m0[78u].z)) * _2682.z) / cbSceneParam._m0[78u].z)) + _2368;
        _2455 = _2691 * _2369;
    }
    else
    {
        _2449 = _2366;
        _2451 = _2367;
        _2453 = _2368;
        _2455 = _2369;
    }
    bool _2718;
    vec4 _2465;
    vec4 _2487;
    float _2489;
    float _2493;
    float _2494;
    float _2495;
    float _2496;
    bool _2506;
    for (;;)
    {
        _2465 = cbMatDynParam._m0[0u];
        float _2467 = roundEven(_2465.y);
        bool _2468 = _2467 == 3.0;
        float _2469 = log2(_2455);
        float _2476 = exp2(_2469 * cbSceneParam._m0[78u].x) * _2338;
        float _2477 = exp2(_2469 * cbSceneParam._m0[78u].y) * _2339;
        float _2478 = exp2(_2469 * cbSceneParam._m0[78u].z) * _2340;
        float _2485 = _805 + (-0.5);
        _2487 = cbMtdParam._m0[1u];
        _2489 = _2487.y * _2485;
        float _2492 = (_2467 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2493 = _2492 * (_2468 ? _2476 : (_2476 + (cbSceneParam._m0[72u].w * _2449)));
        _2494 = _2492 * (_2468 ? _2477 : (_2477 + (cbSceneParam._m0[72u].w * _2451)));
        _2495 = _2492 * (_2468 ? _2478 : (_2478 + (cbSceneParam._m0[72u].w * _2453)));
        _2496 = _2485 * 0.999000012874603271484375;
        _2506 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2506)
        {
            if ((cbInstanceData._m0[_857 + 7u].x + _2496) < 0.5)
            {
                _2718 = true;
                break;
            }
        }
        uint _2634 = _859 + uint(_2465.w);
        if ((cbInstanceData._m0[_2634].w < 1.0) && ((cbInstanceData._m0[_2634].w + _2496) < 0.5))
        {
            _2718 = true;
            break;
        }
        if ((_2489 + 1.0) < _2487.x)
        {
            _2718 = true;
            break;
        }
        _2718 = false;
        break;
    }
    float _2949;
    if (_2718)
    {
        discard_state = true;
        _2949 = 0.0;
    }
    else
    {
        _2949 = cbInstanceData._m0[_2341].w;
    }
    SV_Target.x = _2493;
    SV_Target.y = _2494;
    SV_Target.z = _2495;
    SV_Target.w = _2949;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2341].w;
    discard_exit();
}


