#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _428;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _427;
            frontier_phi_3_2_ladder_2 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _428;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder_1;
        _429 = frontier_phi_3_2_ladder;
        _431 = frontier_phi_3_2_ladder_2;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    float _493 = 0.5 - (_290 * 0.5);
    float _503 = (((_486 - _303) - (_486 * _290)) * _493) + _303;
    float _504 = (((_487 - _305) - (_487 * _290)) * _493) + _305;
    float _505 = (((_488 - _307) - (_488 * _290)) * _493) + _307;
    vec4 _517 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _519 = _517.x;
    vec4 _531 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _535 = _531.z;
    float _538 = (_531.x * 2.0) + (-1.0);
    float _539 = (_531.y * 2.0) + (-1.0);
    float _540 = dot(vec2(_538, _539), vec2(_538, _539));
    float _3447 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _545 = sqrt(1.0 - (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))));
    float _546 = _535 * _290;
    float _556 = (cbMtdParam._m0[15u].w * ((_347 - _546) + ((_535 - _347) * _290))) + _546;
    float _564 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _538;
    float _565 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _539;
    float _568 = fma(_545, _199, fma(_565, _206, _564 * _192));
    float _571 = fma(_545, _200, fma(_565, _207, _564 * _193));
    float _574 = fma(_545, _201, fma(_565, _208, _564 * _194));
    float _578 = inversesqrt(dot(vec3(_568, _571, _574), vec3(_568, _571, _574)));
    float _579 = _578 * _568;
    float _580 = _578 * _571;
    float _581 = _578 * _574;
    float _3458 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _582 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    float _3469 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3480 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _3491 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3502 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _586 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _602 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _607 = _263 * _606;
    float _608 = _264 * _606;
    float _609 = _265 * _606;
    float _615 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _616 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _636 = fma(_581, cbSceneParam._m0[5u].z, fma(_580, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _579));
    float _639 = fma(_581, cbSceneParam._m0[6u].z, fma(_580, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _579));
    float _642 = fma(_581, cbSceneParam._m0[7u].z, fma(_580, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _579));
    uint _655 = uint(roundEven(NORMAL.w)) * 13u;
    uint _657 = (_655 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _663 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_657].x;
    float _664 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0)))) * cbInstanceData._m0[_657].y;
    float _665 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_657].z;
    float _3513 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _3524 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _667 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _668 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _669 = 1.0 - _586;
    float _670 = _666 * _669;
    float _671 = _667 * _669;
    float _672 = _668 * _669;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _586;
    float _678 = (_667 + (-0.039999999105930328369140625)) * _586;
    float _679 = (_668 + (-0.039999999105930328369140625)) * _586;
    float _680 = _677 + 0.039999999105930328369140625;
    float _682 = _678 + 0.039999999105930328369140625;
    float _683 = _679 + 0.039999999105930328369140625;
    vec4 _692 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _615, cbSceneParam._m0[86u].y * _616));
    float _695 = _692.x * TEXCOORD.z;
    float _696 = dot(vec3(_579, _580, _581), vec3(_607, _608, _609));
    float _699 = _696 * 2.0;
    float _703 = (_699 * _579) - _607;
    float _704 = (_699 * _580) - _608;
    float _705 = (_699 * _581) - _609;
    float _709 = abs(dot(vec3(_607, _608, _609), vec3(_579, _580, _581)));
    float _3546 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _711 = sqrt(_582);
    float _724 = exp2((_711 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_711 * 3.0));
    float _730 = (1.0 - _724) * ((_711 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _731 = _724 * _711;
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _800 = fma(_767, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _759));
        float _804 = fma(_767, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _759));
        float _808 = fma(_767, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _759));
        float _832 = _759 + _579;
        float _833 = _763 + _580;
        float _834 = _767 + _581;
        float _844 = fma(_834, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832)) - _800;
        float _845 = fma(_834, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832)) - _804;
        float _846 = fma(_834, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832)) - _808;
        float _850 = inversesqrt(dot(vec3(_844, _845, _846), vec3(_844, _845, _846)));
        float _863 = ((_850 * _844) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_800 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _864 = ((_850 * _845) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_804 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _865 = ((_850 * _846) / cbModelParam._m0[34u].z) + ((((((_808 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_863, _864, _865), 0.0);
        float _902 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_868.x + (-0.5));
        float _904 = _902 * (_868.y + (-0.5));
        float _905 = _902 * (_868.z + (-0.5));
        float _912 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_875.x + (-0.5));
        float _914 = _912 * (_875.y + (-0.5));
        float _915 = _912 * (_875.z + (-0.5));
        float _922 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_882.x + (-0.5));
        float _924 = _922 * (_882.y + (-0.5));
        float _925 = _922 * (_882.z + (-0.5));
        float _932 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_889.x + (-0.5));
        float _934 = _932 * (_889.y + (-0.5));
        float _935 = _932 * (_889.z + (-0.5));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _938 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _939 = _903 * 0.5;
        float _940 = _913 * 0.5;
        float _941 = _923 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _956 = (dot(vec3(_579, _580, _581), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _966 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3594 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_968 + 1.0))) + _973) * _936;
        float _983 = _904 * 0.5;
        float _984 = _914 * 0.5;
        float _985 = _924 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_579, _580, _581), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_937 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3627 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1010 + 1.0))) + _1015) * _937;
        float _1025 = _905 * 0.5;
        float _1026 = _915 * 0.5;
        float _1027 = _925 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_579, _580, _581), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_938 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3660 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1052 + 1.0))) + _1057) * _938;
        _1074 = _905;
        _1075 = _904;
        _1076 = _903;
        _1077 = _915;
        _1078 = _914;
        _1079 = _913;
        _1080 = _925;
        _1081 = _924;
        _1082 = _923;
        _1083 = _938;
        _1084 = _937;
        _1085 = _936;
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1088 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
    }
    else
    {
        _1074 = _428;
        _1075 = _428;
        _1076 = _428;
        _1077 = _428;
        _1078 = _428;
        _1079 = _428;
        _1080 = _428;
        _1081 = _428;
        _1082 = _428;
        _1083 = _428;
        _1084 = _428;
        _1085 = _428;
        _1086 = 0.0;
        _1087 = 0.0;
        _1088 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_767, cbModelParam._m0[30u].z, fma(_763, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _759));
        float _1118 = fma(_767, cbModelParam._m0[31u].z, fma(_763, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _759));
        float _1122 = fma(_767, cbModelParam._m0[32u].z, fma(_763, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _759));
        float _1145 = _759 + _579;
        float _1146 = _763 + _580;
        float _1147 = _767 + _581;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_579, _580, _581), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3723 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_579, _580, _581), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3756 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_579, _580, _581), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3789 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _428;
        _1384 = _428;
        _1385 = _428;
        _1386 = _428;
        _1387 = _428;
        _1388 = _428;
        _1389 = _428;
        _1390 = _428;
        _1391 = _428;
        _1392 = _428;
        _1393 = _428;
        _1394 = _428;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1086)) + _1086;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1087)) + _1087;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1088)) + _1088;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _703 * 0.5;
    float _1452 = _704 * 0.5;
    float _1453 = _705 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1076, _1079, _1082, _1085));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _582);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_767, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _759)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_767, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _759)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_767, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _759)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_705, cbModelParam._m0[13u].z, fma(_704, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _703));
        float _1582 = fma(_705, cbModelParam._m0[14u].z, fma(_704, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _703));
        float _1585 = fma(_705, cbModelParam._m0[15u].z, fma(_704, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _703));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1613 = frontier_phi_26_24_ladder;
        }
        float _1786;
        if (_1582 > 0.0)
        {
            _1786 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1786 = frontier_phi_35_31_ladder;
        }
        float _2242;
        if (_1585 > 0.0)
        {
            _2242 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2242 = frontier_phi_47_42_ladder;
        }
        float _2244 = isnan(_1786) ? _1613 : (isnan(_1613) ? _1786 : min(_1613, _1786));
        float _2245 = isnan(_2242) ? _2244 : (isnan(_2244) ? _2242 : min(_2244, _2242));
        float _2249 = (_2245 * _1579) + _1568;
        float _2250 = (_2245 * _1582) + _1572;
        float _2251 = (_2245 * _1585) + _1576;
        float _2252 = _2245 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2252;
        float _2256 = _2252 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 > _2256) || ((_2250 < _2254) || ((_2249 < _2254) || (_2249 > _2256))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2485 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2251, cbModelParam._m0[9u].z, fma(_2250, cbModelParam._m0[9u].y, _2249 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2251, cbModelParam._m0[10u].z, fma(_2250, cbModelParam._m0[10u].y, _2249 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2251, cbModelParam._m0[11u].z, fma(_2250, cbModelParam._m0[11u].y, _2249 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_25_47_ladder = _2485.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2485.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2485.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_25_47_ladder_2;
        _1603 = frontier_phi_25_47_ladder_1;
        _1605 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_703, _704, _705), _1520);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _582);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_767, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _759)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_767, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _759)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_767, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _759)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_705, cbModelParam._m0[21u].z, fma(_704, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _703));
        float _1679 = fma(_705, cbModelParam._m0[22u].z, fma(_704, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _703));
        float _1682 = fma(_705, cbModelParam._m0[23u].z, fma(_704, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _703));
        float _1791;
        if (_1676 > 0.0)
        {
            _1791 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1791 = frontier_phi_37_33_ladder;
        }
        float _2269;
        if (_1679 > 0.0)
        {
            _2269 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2269 = frontier_phi_49_44_ladder;
        }
        float _2606;
        if (_1682 > 0.0)
        {
            _2606 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2606 = frontier_phi_61_56_ladder;
        }
        float _2608 = isnan(_2269) ? _1791 : (isnan(_1791) ? _2269 : min(_1791, _2269));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1676) + _1665;
        float _2614 = (_2609 * _1679) + _1669;
        float _2615 = (_2609 * _1682) + _1673;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_34_61_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_34_61_ladder_2;
        _1703 = frontier_phi_34_61_ladder_1;
        _1705 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_703, _704, _705), _1610);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1718 = (((_730 * _680) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_730 * _682) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1722 = (((_730 * _683) + _731) * _695) * ((cbModelParam._m0[1u].w * (_1705 - _1605)) + _1605);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1773 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1778 = _1765 / _1777;
    float _1779 = _1769 / _1777;
    float _1780 = _1773 / _1777;
    float _1927;
    float _1928;
    float _1929;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1807 = ((uint(_1780 > cbSceneParam._m0[59u].y) + uint(_1780 > cbSceneParam._m0[59u].x)) + uint(_1780 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1808 = _1807 + 43u;
        uint _1816 = _1807 + 44u;
        uint _1824 = _1807 + 45u;
        uint _1832 = _1807 + 46u;
        float _1843 = fma(_1777, cbSceneParam._m0[_1808].w, fma(_1773, cbSceneParam._m0[_1808].z, fma(_1769, cbSceneParam._m0[_1808].y, _1765 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1777, cbSceneParam._m0[_1816].w, fma(_1773, cbSceneParam._m0[_1816].z, fma(_1769, cbSceneParam._m0[_1816].y, _1765 * cbSceneParam._m0[_1816].x)));
        float _1855 = fma(_1777, cbSceneParam._m0[_1832].w, fma(_1773, cbSceneParam._m0[_1832].z, fma(_1769, cbSceneParam._m0[_1832].y, _1765 * cbSceneParam._m0[_1832].x)));
        float _1860 = cbSceneParam._m0[33u].z * _1855;
        float _1862 = cbSceneParam._m0[33u].w * _1855;
        float _1865 = fma(_1777, cbSceneParam._m0[_1824].w, fma(_1773, cbSceneParam._m0[_1824].z, fma(_1769, cbSceneParam._m0[_1824].y, _1765 * cbSceneParam._m0[_1824].x))) / _1855;
        float _1913 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
        float _3915 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1920 = (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1860 + _1843) / _1855, (_1862 + _1847) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1862 + _1843) / _1855, (_1847 - _1860) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1860) / _1855, (_1847 - _1862) / _1855), _1865), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 - _1862) / _1855, (_1860 + _1847) / _1855), _1865), 0.0)).x), vec4(0.25)));
        _1927 = 1.0 - (_1920 * cbSceneParam._m0[34u].x);
        _1928 = 1.0 - (_1920 * cbSceneParam._m0[34u].y);
        _1929 = 1.0 - (_1920 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1927 = 1.0;
        _1928 = 1.0;
        _1929 = 1.0;
    }
    float _1993;
    float _1995;
    float _1997;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1981 = fma(_1777, cbSceneParam._m0[63u].w, fma(_1773, cbSceneParam._m0[63u].z, fma(_1769, cbSceneParam._m0[63u].y, _1765 * cbSceneParam._m0[63u].x)));
        float _1982 = fma(_1777, cbSceneParam._m0[60u].w, fma(_1773, cbSceneParam._m0[60u].z, fma(_1769, cbSceneParam._m0[60u].y, _1765 * cbSceneParam._m0[60u].x))) / _1981;
        float _1983 = fma(_1777, cbSceneParam._m0[61u].w, fma(_1773, cbSceneParam._m0[61u].z, fma(_1769, cbSceneParam._m0[61u].y, _1765 * cbSceneParam._m0[61u].x))) / _1981;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1982 >= cbSceneParam._m0[64u].x) && (_1983 >= cbSceneParam._m0[64u].y)) && (_1982 <= cbSceneParam._m0[64u].z)) && (_1983 <= cbSceneParam._m0[64u].w))
        {
            float _2282 = fma(_1777, cbSceneParam._m0[62u].w, fma(_1773, cbSceneParam._m0[62u].z, fma(_1769, cbSceneParam._m0[62u].y, _1765 * cbSceneParam._m0[62u].x))) / _1981;
            float _2286 = isnan(cbSceneParam._m0[41u].w) ? _2282 : (isnan(_2282) ? cbSceneParam._m0[41u].w : max(_2282, cbSceneParam._m0[41u].w));
            float _2329 = (cbSceneParam._m0[33u].x - sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780))) * cbSceneParam._m0[33u].y;
            float _3931 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
            float _2336 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1982, cbSceneParam._m0[33u].w + _1983), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1982, _1983 - cbSceneParam._m0[33u].z), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].z, _1983 - cbSceneParam._m0[33u].w), _2286), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1982 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1983), _2286), 0.0)).x), vec4(0.25)));
            float _2340 = 1.0 - (_2336 * cbSceneParam._m0[34u].x);
            float _2341 = 1.0 - (_2336 * cbSceneParam._m0[34u].y);
            float _2342 = 1.0 - (_2336 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2342) ? _1929 : (isnan(_1929) ? _2342 : min(_1929, _2342));
            frontier_phi_46_45_ladder_1 = isnan(_2341) ? _1928 : (isnan(_1928) ? _2341 : min(_1928, _2341));
            frontier_phi_46_45_ladder_2 = isnan(_2340) ? _1927 : (isnan(_1927) ? _2340 : min(_1927, _2340));
        }
        else
        {
            frontier_phi_46_45_ladder = _1929;
            frontier_phi_46_45_ladder_1 = _1928;
            frontier_phi_46_45_ladder_2 = _1927;
        }
        _1993 = frontier_phi_46_45_ladder_2;
        _1995 = frontier_phi_46_45_ladder_1;
        _1997 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1993 = _1927;
        _1995 = _1928;
        _1997 = _1929;
    }
    uvec4 _2002 = floatBitsToUint(cbInstanceData._m0[_655 + 5u]);
    uint _2004 = _2002.x * 14u;
    uint _2005 = _2004 + 13u;
    float _2010 = _695 + (-1.0);
    float _2013 = (cbLight._m0[_2005].x * _2010) + 1.0;
    float _2014 = (cbLight._m0[_2005].y * _2010) + 1.0;
    uint _2015 = _2004 + 5u;
    float _2021 = isnan(1.0) ? _2014 : (isnan(_2014) ? 1.0 : min(_2014, 1.0));
    uint _2025 = _2004 + 4u;
    float _2035 = isnan(1.0) ? _2013 : (isnan(_2013) ? 1.0 : min(_2013, 1.0));
    uint _2039 = _2004 | 1u;
    float _2050 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_579, _580, _581));
    float _2053 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_579, _580, _581));
    float _3967 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _3978 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
    float _2058 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _2060 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.3183098733425140380859375;
    float _2067 = ((cbLight._m0[_2015].x * _2021) * _2060) + (((cbLight._m0[_2025].x * _1993) * _2035) * _2058);
    float _2068 = ((_2021 * cbLight._m0[_2015].y) * _2060) + (((cbLight._m0[_2025].y * _1995) * _2035) * _2058);
    float _2069 = ((_2021 * cbLight._m0[_2015].z) * _2060) + (((cbLight._m0[_2025].z * _1997) * _2035) * _2058);
    uint _2071 = _2004 + 8u;
    float _2084 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _582) * 0.949999988079071044921875);
    float _2085 = _2084 * _2084;
    float _2086 = cbLight._m0[_2004].x + _607;
    float _2087 = cbLight._m0[_2004].y + _608;
    float _2088 = cbLight._m0[_2004].z + _609;
    float _2092 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
    float _2093 = _2092 * _2086;
    float _2094 = _2092 * _2087;
    float _2095 = _2092 * _2088;
    float _2096 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2004].xyz));
    float _3989 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _4000 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _2100 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _2101 = dot(vec3(_579, _580, _581), vec3(_2093, _2094, _2095));
    float _4011 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2104 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _2105 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2093, _2094, _2095));
    float _4022 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2109 = _2085 * _2085;
    float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
    float _2122 = 0.959999978542327880859375 - _677;
    float _2124 = 0.959999978542327880859375 - _678;
    float _2125 = 0.959999978542327880859375 - _679;
    float _2132 = 1.0 - _2085;
    float _2143 = (0.5 / (((_2100 * ((_2099 * _2132) + _2085)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2132) + _2085) * _2099))) * _2099;
    float _4033 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2145 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
    uint _2159 = _2004 + 9u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2039].w)) * _582) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2039].x + _607;
    float _2173 = cbLight._m0[_2039].y + _608;
    float _2174 = cbLight._m0[_2039].z + _609;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_579, _580, _581), vec3(cbLight._m0[_2039].xyz));
    float _4044 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
    float _2186 = dot(vec3(_579, _580, _581), vec3(_2179, _2180, _2181));
    float _4055 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _2190 = dot(vec3(cbLight._m0[_2039].xyz), vec3(_2179, _2180, _2181));
    float _4066 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2194 = _2171 * _2171;
    float _2198 = ((_2189 * _2189) * (_2194 + (-1.0))) + 1.0;
    float _2205 = exp2(log2(1.0 - (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * 5.0);
    float _2212 = 1.0 - _2171;
    float _2222 = (0.5 / (((_2100 * ((_2185 * _2212) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2100 * _2212) + _2171) * _2185))) * _2185;
    float _4077 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2224 = (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_2194 / ((_2198 * _2198) * 3.141590118408203125));
    float _2234 = (((((_2205 * _2122) + _680) * cbLight._m0[_2159].x) * _2224) * _2021) + ((((cbLight._m0[_2071].x * _1993) * ((_2121 * _2122) + _680)) * _2145) * _2035);
    float _2235 = (((((_2205 * _2124) + _682) * cbLight._m0[_2159].y) * _2224) * _2021) + ((((cbLight._m0[_2071].y * _1995) * ((_2121 * _2124) + _682)) * _2145) * _2035);
    float _2236 = (((((_2205 * _2125) + _683) * cbLight._m0[_2159].z) * _2224) * _2021) + ((((cbLight._m0[_2071].z * _1997) * ((_2121 * _2125) + _683)) * _2145) * _2035);
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    float _2407;
    float _2409;
    if (_2002.y == 0u)
    {
        uvec4 _2354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2355 = _2354.x;
        uint _2366 = uint((float(_2354.y) * floor(float(uint(cbSceneParam._m0[85u].y * _616) / _2355))) + floor(float(uint(cbSceneParam._m0[85u].x * _615) / _2355)));
        float _2376 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2377 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        uint _2380 = uint(isnan(14.0) ? _2377 : (isnan(_2377) ? 14.0 : min(_2377, 14.0)));
        uvec4 _2385 = texelFetch(g_lightClusterGridBuffer, int(((_2380 << 2u) + (_2366 << 6u)) >> 2u));
        uint _2386 = _2385.x;
        uint _2387 = _2354.z;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        if (((((1u << ((_2387 >> 4u) & 15u)) + 4294967295u) & _2386) == 0u) || ((_2387 & 240u) == 0u))
        {
            _2494 = 0.0;
            _2496 = 0.0;
            _2498 = 0.0;
            _2500 = 0.0;
            _2502 = 0.0;
            _2504 = 0.0;
        }
        else
        {
            float _2495;
            float _2497;
            float _2499;
            float _2501;
            float _2503;
            float _2505;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2680)
                {
                    frontier_phi_70_pred = _2667;
                    frontier_phi_70_pred_1 = _2669;
                    frontier_phi_70_pred_2 = _2668;
                    frontier_phi_70_pred_3 = _2666;
                    frontier_phi_70_pred_4 = _2665;
                    frontier_phi_70_pred_5 = _2664;
                }
                else
                {
                    float _2809;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    uint _2815;
                    _2809 = _2664;
                    _2810 = _2665;
                    _2811 = _2666;
                    _2812 = _2667;
                    _2813 = _2668;
                    _2814 = _2669;
                    _2815 = _2679;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    for (;;)
                    {
                        uint _2819 = uint(findLSB(_2815)) + (_2670 << 5u);
                        uint _2816 = (_2815 + 4294967295u) & _2815;
                        uint _2821 = _2819 * 48u;
                        vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2821)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2821 + 3u)).x));
                        uint _2841 = (_2819 * 48u) + 4u;
                        vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2860 = (_2819 * 48u) + 8u;
                        vec3 _2871 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x));
                        float _2875 = _2835.x - _1778;
                        float _2876 = _2835.y - _1779;
                        float _2877 = _2835.z - _1780;
                        float _2878 = dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877));
                        float _2881 = inversesqrt(_2878);
                        float _2882 = _2881 * _2875;
                        float _2883 = _2881 * _2876;
                        float _2884 = _2881 * _2877;
                        float _2885 = dot(vec3(_636, _639, _642), vec3(_2882, _2883, _2884));
                        float _2890 = 1.0 - (_2878 * _2835.w);
                        float _4098 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
                        float _2891 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                        float _2892 = sqrt(_2878) * _2854.w;
                        float _2895 = 1.39999997615814208984375 / (_2892 + 1.39999997615814208984375);
                        float _2896 = _2895 * _2895;
                        float _2899 = ((1.0 - _2896) * _2885) + _2896;
                        float _2902 = _2892 * _2892;
                        float _2906 = ((isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))) * _2891) / ((_2902 * 0.699999988079071044921875) + 1.0);
                        float _2910 = (-0.0) - _1778;
                        float _2911 = (-0.0) - _1779;
                        float _2912 = (-0.0) - _1780;
                        float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                        float _2917 = _2916 * _2910;
                        float _2918 = _2916 * _2911;
                        float _2919 = _2916 * _2912;
                        float _2926 = exp2(log2(1.0 / ((_2902 * 3.5) + 5.0)) * 0.25);
                        float _2927 = 1.0 - _711;
                        float _2934 = sqrt(1.0 - ((1.0 - (_2927 * _2927)) * (1.0 - (_2926 * _2926))));
                        float _2935 = _2934 * _2934;
                        float _2936 = _2935 * _2935;
                        float _2937 = _2917 + _2882;
                        float _2938 = _2918 + _2883;
                        float _2939 = _2919 + _2884;
                        float _2943 = inversesqrt(dot(vec3(_2937, _2938, _2939), vec3(_2937, _2938, _2939)));
                        float _2947 = dot(vec3(_636, _639, _642), vec3(_2917, _2918, _2919));
                        float _4114 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2950 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                        float _2951 = dot(vec3(_636, _639, _642), vec3(_2943 * _2937, _2943 * _2938, _2943 * _2939));
                        float _4125 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                        float _2954 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                        float _2958 = ((_2954 * _2954) * (_2936 + (-1.0))) + 1.0;
                        float _2959 = _2895 * _2935;
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2885) + _2960;
                        float _4136 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
                        float _2964 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                        float _2965 = 1.0 - _2935;
                        float _2975 = (0.5 / (((_2964 * ((_2950 * _2965) + _2935)) + 9.9999999392252902907785028219223e-09) + (((_2964 * _2965) + _2935) * _2950))) * _2964;
                        float _4147 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2986 = (((_2936 * 3.1415927410125732421875) * (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) / ((_2958 * _2958) * ((_2902 * 2.1991131305694580078125) + 3.141590118408203125))) * _2891;
                        _2744 = (_2906 * _2854.x) + _2812;
                        _2745 = (_2906 * _2854.y) + _2813;
                        _2746 = (_2906 * _2854.z) + _2814;
                        _2741 = (_2986 * _2871.x) + _2809;
                        _2742 = (_2986 * _2871.y) + _2810;
                        _2743 = (_2986 * _2871.z) + _2811;
                        if (_2816 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2809 = _2741;
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2816;
                        }
                    }
                    frontier_phi_70_pred = _2744;
                    frontier_phi_70_pred_1 = _2746;
                    frontier_phi_70_pred_2 = _2745;
                    frontier_phi_70_pred_3 = _2743;
                    frontier_phi_70_pred_4 = _2742;
                    frontier_phi_70_pred_5 = _2741;
                }
                _2501 = frontier_phi_70_pred;
                _2505 = frontier_phi_70_pred_1;
                _2503 = frontier_phi_70_pred_2;
                _2499 = frontier_phi_70_pred_3;
                _2497 = frontier_phi_70_pred_4;
                _2495 = frontier_phi_70_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2495;
                    _2665 = _2497;
                    _2666 = _2499;
                    _2667 = _2501;
                    _2668 = _2503;
                    _2669 = _2505;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2494 = _2495;
            _2496 = _2497;
            _2498 = _2499;
            _2500 = _2501;
            _2502 = _2503;
            _2504 = _2505;
        }
        uvec4 _2508 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2509 = _2508.z;
        uint _2511 = (_2509 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2511) & _2386) == 0u)
        {
            _2632 = _2494;
            _2634 = _2496;
            _2636 = _2498;
            _2638 = _2500;
            _2640 = _2502;
            _2642 = _2504;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float _2658 = _2657 * _1778;
            float _2659 = _2657 * _1779;
            float _2660 = _2657 * _1780;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2511 < ((_2509 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2792 = _2494;
                float _2793 = _2496;
                float _2794 = _2498;
                float _2795 = _2500;
                float _2796 = _2502;
                float _2797 = _2504;
                uint _2798 = _2511;
                uint _2807;
                bool _2808;
                for (;;)
                {
                    _2807 = texelFetch(g_lightClassification, int((((_2380 << 5u) + (_2366 << 9u)) + (_2798 << 2u)) >> 2u)).x;
                    _2808 = _2807 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2808)
                    {
                        frontier_phi_76_pred = _2797;
                        frontier_phi_76_pred_1 = _2796;
                        frontier_phi_76_pred_2 = _2795;
                        frontier_phi_76_pred_3 = _2794;
                        frontier_phi_76_pred_4 = _2793;
                        frontier_phi_76_pred_5 = _2792;
                    }
                    else
                    {
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3004 = _2792;
                        float _3005 = _2793;
                        float _3006 = _2794;
                        float _3007 = _2795;
                        float _3008 = _2796;
                        float _3009 = _2797;
                        uint _3010 = _2807;
                        uint _3011;
                        vec4 _3036;
                        float _3037;
                        vec4 _3052;
                        vec3 _3064;
                        vec4 _3079;
                        vec4 _3094;
                        float _3140;
                        bool _3141;
                        for (;;)
                        {
                            uint _3021 = ((_2798 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3010));
                            _3011 = (_3010 + 4294967295u) & _3010;
                            uint _3023 = _3021 * 40u;
                            _3036 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 3u)).x));
                            _3037 = _3036.w;
                            uint _3039 = (_3021 * 40u) + 4u;
                            _3052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3039 + 3u)).x));
                            uint _3054 = (_3021 * 40u) + 8u;
                            _3064 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3054)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3054 + 2u)).x));
                            uint _3066 = (_3021 * 40u) + 16u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3081 = (_3021 * 40u) + 20u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            uint _3096 = (_3021 * 40u) + 24u;
                            vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3115 = (_3021 * 40u) + 28u;
                            vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3140 = fma(_1780, _3128.z, fma(_1779, _3128.y, _3128.x * _1778)) + _3128.w;
                            _3141 = !((fma(_1780, _3109.z, fma(_1779, _3109.y, _3109.x * _1778)) + _3109.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3141)
                            {
                                float _3168 = _3036.x - _1778;
                                float _3169 = _3036.y - _1779;
                                float _3170 = _3036.z - _1780;
                                float _3171 = dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170));
                                float _3174 = inversesqrt(_3171);
                                float _3175 = _3174 * _3168;
                                float _3176 = _3174 * _3169;
                                float _3177 = _3174 * _3170;
                                float _3181 = 1.0 - (_3171 / (_3037 * _3037));
                                float _4158 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3186 = sqrt(_3171) * _3052.w;
                                float _3188 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                                float _3189 = _3188 * _3188;
                                float _3192 = ((1.0 - _3189) * dot(vec3(_3175, _3176, _3177), vec3(_636, _639, _642))) + _3189;
                                float _3195 = _3186 * _3186;
                                float _3199 = (fma(_1780, _3079.z, fma(_1779, _3079.y, _3079.x * _1778)) + _3079.w) / _3140;
                                float _3200 = (fma(_1780, _3094.z, fma(_1779, _3094.y, _3094.x * _1778)) + _3094.w) / _3140;
                                float _3204 = 1.0 - dot(vec2(_3199, _3200), vec2(_3199, _3200));
                                float _4174 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                                float _3205 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3206 = _3205 * (((isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0))) * _3182) / ((_3195 * 0.699999988079071044921875) + 1.0));
                                float _3218 = exp2(log2(1.0 / ((_3195 * 3.5) + 5.0)) * 0.25);
                                float _3219 = 1.0 - _711;
                                float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                                float _3227 = _3226 * _3226;
                                float _3228 = _3227 * _3227;
                                float _3229 = _3175 - _2658;
                                float _3230 = _3176 - _2659;
                                float _3231 = _3177 - _2660;
                                float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                                float _3239 = dot(vec3(_636, _639, _642), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4185 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3242 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                                float _3243 = dot(vec3(_636, _639, _642), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                                float _4196 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                                float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                                float _3251 = _3188 * _3227;
                                float _3252 = _3251 * _3251;
                                float _3258 = ((1.0 - _3252) * dot(vec3(_636, _639, _642), vec3(_3175, _3176, _3177))) + _3252;
                                float _4207 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                                float _3259 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3260 = 1.0 - _3227;
                                float _3270 = (0.5 / (((_3259 * ((_3242 * _3260) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3227) * _3242))) * _3259;
                                float _4218 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3280 = (_3205 * _3182) * (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) / ((_3250 * _3250) * ((_3195 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3206 * _3052.z;
                                frontier_phi_82_pred_1 = _3206 * _3052.y;
                                frontier_phi_82_pred_2 = _3206 * _3052.x;
                                frontier_phi_82_pred_3 = _3280 * _3064.z;
                                frontier_phi_82_pred_4 = _3280 * _3064.y;
                                frontier_phi_82_pred_5 = _3280 * _3064.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3289 = frontier_phi_82_pred;
                            _3288 = frontier_phi_82_pred_1;
                            _3287 = frontier_phi_82_pred_2;
                            _3286 = frontier_phi_82_pred_3;
                            _3285 = frontier_phi_82_pred_4;
                            _3284 = frontier_phi_82_pred_5;
                            _2994 = _3287 + _3007;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            _2991 = _3284 + _3004;
                            _2992 = _3285 + _3005;
                            _2993 = _3286 + _3006;
                            if (_3011 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _3011;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2996;
                        frontier_phi_76_pred_1 = _2995;
                        frontier_phi_76_pred_2 = _2994;
                        frontier_phi_76_pred_3 = _2993;
                        frontier_phi_76_pred_4 = _2992;
                        frontier_phi_76_pred_5 = _2991;
                    }
                    _2643 = frontier_phi_76_pred;
                    _2641 = frontier_phi_76_pred_1;
                    _2639 = frontier_phi_76_pred_2;
                    _2637 = frontier_phi_76_pred_3;
                    _2635 = frontier_phi_76_pred_4;
                    _2633 = frontier_phi_76_pred_5;
                    uint _2799 = _2798 + 1u;
                    if (_2799 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2792 = _2633;
                        _2793 = _2635;
                        _2794 = _2637;
                        _2795 = _2639;
                        _2796 = _2641;
                        _2797 = _2643;
                        _2798 = _2799;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2641;
                frontier_phi_63_64_ladder_1 = _2643;
                frontier_phi_63_64_ladder_2 = _2639;
                frontier_phi_63_64_ladder_3 = _2637;
                frontier_phi_63_64_ladder_4 = _2635;
                frontier_phi_63_64_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_63_64_ladder = _2502;
                frontier_phi_63_64_ladder_1 = _2504;
                frontier_phi_63_64_ladder_2 = _2500;
                frontier_phi_63_64_ladder_3 = _2498;
                frontier_phi_63_64_ladder_4 = _2496;
                frontier_phi_63_64_ladder_5 = _2494;
            }
            _2632 = frontier_phi_63_64_ladder_5;
            _2634 = frontier_phi_63_64_ladder_4;
            _2636 = frontier_phi_63_64_ladder_3;
            _2638 = frontier_phi_63_64_ladder_2;
            _2640 = frontier_phi_63_64_ladder;
            _2642 = frontier_phi_63_64_ladder_1;
        }
        float _2647 = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
        _2399 = (_2647 * _2638) + _2067;
        _2401 = (_2647 * _2640) + _2068;
        _2403 = (_2647 * _2642) + _2069;
        _2405 = ((_2632 * _680) * _2647) + _2234;
        _2407 = ((_2634 * _682) * _2647) + _2235;
        _2409 = ((_2636 * _683) * _2647) + _2236;
    }
    else
    {
        _2399 = _2067;
        _2401 = _2068;
        _2403 = _2069;
        _2405 = _2234;
        _2407 = _2235;
        _2409 = _2236;
    }
    float _4234 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _4245 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _4256 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _2426 = ((isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_2399 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _695))) + ((_2405 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1509)) * cbPerFrame._m0[3u].x);
    float _2427 = ((isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2401 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _695))) + ((_2407 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1509)) * cbPerFrame._m0[3u].x);
    float _2428 = ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2403 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _695))) + ((_2409 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1509)) * cbPerFrame._m0[3u].x);
    uint _2432 = _655 + 6u;
    float _2440 = _615 / cbSceneParam._m0[86u].x;
    float _2441 = _616 / cbSceneParam._m0[86u].y;
    vec4 _2455 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, (log2((isnan(cbSceneParam._m0[77u].w) ? _602 : (isnan(_602) ? cbSceneParam._m0[77u].w : min(_602, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2457 = _2455.x;
    float _2458 = _2455.y;
    float _2459 = _2455.z;
    float _2460 = _2455.w;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_602 > cbSceneParam._m0[78u].w)
    {
        float _2519 = isnan(_602) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _602 : min(cbSceneParam._m0[80u].w, _602));
        float _2520 = _2519 / _602;
        float _2531 = _2520 * _263;
        float _2532 = _264 * _2520;
        float _2533 = (-0.0) - _2532;
        float _2534 = _2520 * _265;
        float _2536 = (cbSceneParam._m0[77u].w * _2533) / _2519;
        float _2537 = _2536 + cbSceneParam._m0[79u].w;
        float _2538 = cbSceneParam._m0[79u].w - _2532;
        float _2544 = sqrt(((_2531 * _2531) + (_2532 * _2532)) + (_2534 * _2534));
        float _2547 = (1.0 - (cbSceneParam._m0[77u].w / _2519)) * _2544;
        float _2552 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2554 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2754;
        if (abs((_2533 - _2536) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2754 = ((((_2537 > 0.0) ? exp2(_2552 * _2537) : (2.0 - exp2(_2554 * _2537))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2547;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : max(_2537, _2538));
            float _2695 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : min(_2537, _2538));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2754 = ((abs(_2544 / _2533) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2552 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2552 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2554 * _2704) - exp2(_2554 * _2705)) * _2693))) + (_2547 * cbSceneParam._m0[80u].z);
        }
        vec4 _2756 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2440, _2441, 1.0), 0.0);
        float _2765 = exp2((_2754 * (-1.44269502162933349609375)) * (1.0 - _2756.w));
        float _2766 = log2(_2765);
        float _2782 = log2(_2460);
        _2556 = (exp2(_2782 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].x)) * _2756.x) / cbSceneParam._m0[78u].x)) + _2457;
        _2558 = (exp2(_2782 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].y)) * _2756.y) / cbSceneParam._m0[78u].y)) + _2458;
        _2560 = (exp2(_2782 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2766 * cbSceneParam._m0[78u].z)) * _2756.z) / cbSceneParam._m0[78u].z)) + _2459;
        _2562 = _2765 * _2460;
    }
    else
    {
        _2556 = _2457;
        _2558 = _2458;
        _2560 = _2459;
        _2562 = _2460;
    }
    float _2574 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2575 = _2574 == 3.0;
    float _2576 = log2(_2562);
    float _2583 = exp2(_2576 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0)));
    float _2584 = exp2(_2576 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0)));
    float _2585 = exp2(_2576 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0)));
    float _2594 = (_2574 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2594 * (_2575 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2556)));
    SV_Target.y = _2594 * (_2575 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.z = _2594 * (_2575 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.w = cbInstanceData._m0[_2432].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2432].w;
}


