#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1331;
float _3542;
float _3543;
float _3544;
float _3545;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.w;
    float _309 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _296) + cbMtdParam._m0[11u].x) * _290.x;
    float _311 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _296) + cbMtdParam._m0[11u].y) * _290.y;
    float _313 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _296) + cbMtdParam._m0[11u].z) * _290.z;
    vec4 _331 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _335 = _331.z;
    float _358 = (_331.x * 2.0) + (-1.0);
    float _360 = (_331.y * 2.0) + (-1.0);
    float _363 = _358 - (_358 * _296);
    float _364 = _360 - (_360 * _296);
    float _373 = cbMtdParam._m0[22u].y + _269;
    float _374 = cbMtdParam._m0[22u].z + _270;
    float _375 = cbMtdParam._m0[22u].w + _271;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_198, _199, _200));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_212, _213, _214));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _395 * _391;
    float _399 = (_395 * _389) + (_363 * cbMtdParam._m0[20u].y);
    float _400 = (_395 * _390) + (_364 * cbMtdParam._m0[20u].z);
    float _401 = _399 * cbMtdParam._m0[19u].x;
    float _402 = _400 * cbMtdParam._m0[18u].w;
    float _403 = fract(TEXCOORD.x);
    float _404 = fract(TEXCOORD.y);
    float _410;
    if (_401 > 0.0)
    {
        _410 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _410 = frontier_phi_3_2_ladder;
    }
    float _418;
    if (_402 > 0.0)
    {
        _418 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _418 = frontier_phi_7_6_ladder;
    }
    bool _420 = _398 > 0.0;
    float _422 = _420 ? (cbMtdParam._m0[15u].x / _398) : 5000.0;
    float _423 = isnan(_418) ? _410 : (isnan(_410) ? _418 : min(_410, _418));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = _403 + (-0.5);
    float _432 = _404 + (-0.5);
    float _435 = ((_424 * _398) + _428) / _428;
    vec4 _460 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_429 + (_424 * _401)) / _435) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_432 + (_424 * _402)) / _435) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _476 = (_462 - (_462 * _296)) * cbMtdParam._m0[9u].x;
    float _477 = (_463 - (_463 * _296)) * cbMtdParam._m0[9u].y;
    float _478 = cbMtdParam._m0[9u].z * (_464 - (_464 * _296));
    float _496 = _399 * cbMtdParam._m0[21u].x;
    float _497 = _400 * cbMtdParam._m0[20u].w;
    bool _498 = _496 > 0.0;
    float _503;
    if (_498)
    {
        _503 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _503 = frontier_phi_11_10_ladder;
    }
    bool _505 = _497 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _510 = frontier_phi_15_14_ladder;
    }
    float _513 = _420 ? (cbMtdParam._m0[16u].z / _398) : 5000.0;
    float _514 = isnan(_510) ? _503 : (isnan(_503) ? _510 : min(_503, _510));
    float _515 = isnan(_513) ? _514 : (isnan(_514) ? _513 : min(_514, _513));
    float _519 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _523 = ((_515 * _398) + _519) / _519;
    float _528 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _530 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _546 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_515 * _496)) / _523) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_515 * _497)) / _523) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _551 = _546.x * cbMtdParam._m0[10u].x;
    float _552 = _546.y * cbMtdParam._m0[10u].y;
    float _553 = _546.z * cbMtdParam._m0[10u].z;
    float _561;
    if (_498)
    {
        _561 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _561 = frontier_phi_19_18_ladder;
    }
    float _567;
    if (_505)
    {
        _567 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _567 = frontier_phi_23_22_ladder;
    }
    float _569 = isnan(_567) ? _561 : (isnan(_561) ? _567 : min(_561, _567));
    float _570 = isnan(_513) ? _569 : (isnan(_569) ? _513 : min(_569, _513));
    float _577 = ((_570 * _398) + _519) / _519;
    vec4 _591 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_570 * _496)) / _577) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_570 * _497)) / _577) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _593 = _591.w;
    float _595 = _593 - (_593 * _296);
    float _605 = (_595 * ((_551 - _476) - (_551 * _296))) + _476;
    float _606 = (_595 * ((_552 - _477) - (_552 * _296))) + _477;
    float _607 = (_595 * ((_553 - _478) - (_553 * _296))) + _478;
    float _621 = _399 * cbMtdParam._m0[21u].z;
    float _622 = _400 * cbMtdParam._m0[21u].y;
    bool _623 = _621 > 0.0;
    float _628;
    if (_623)
    {
        _628 = (1.0 - _403) / _621;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_621 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _403) / _621;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _628 = frontier_phi_27_26_ladder;
    }
    bool _630 = _622 > 0.0;
    float _635;
    if (_630)
    {
        _635 = (1.0 - _404) / _622;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_622 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _404) / _622;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _635 = frontier_phi_31_30_ladder;
    }
    float _638 = _420 ? (cbMtdParam._m0[18u].x / _398) : 5000.0;
    float _639 = isnan(_635) ? _628 : (isnan(_628) ? _635 : min(_628, _635));
    float _640 = isnan(_638) ? _639 : (isnan(_639) ? _638 : min(_639, _638));
    float _644 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _648 = ((_640 * _398) + _644) / _644;
    float _653 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _655 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _672 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_429 + (_640 * _621)) / _648) + 0.5) + _653) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_432 + (_640 * _622)) / _648) + 0.5) + _655) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _677 = _672.x * cbMtdParam._m0[14u].x;
    float _678 = _672.y * cbMtdParam._m0[14u].y;
    float _679 = _672.z * cbMtdParam._m0[14u].z;
    float _687;
    if (_623)
    {
        _687 = (1.0 - _403) / _621;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_621 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _403) / _621;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _687 = frontier_phi_35_34_ladder;
    }
    float _693;
    if (_630)
    {
        _693 = (1.0 - _404) / _622;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_622 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _404) / _622;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _693 = frontier_phi_39_38_ladder;
    }
    float _695 = isnan(_693) ? _687 : (isnan(_687) ? _693 : min(_687, _693));
    float _696 = isnan(_638) ? _695 : (isnan(_695) ? _638 : min(_695, _638));
    float _703 = ((_696 * _398) + _644) / _644;
    vec4 _717 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_429 + (_696 * _621)) / _703) + 0.5) + _653) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_432 + (_696 * _622)) / _703) + 0.5) + _655) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _719 = _717.w;
    float _721 = _719 - (_719 * _296);
    vec4 _745 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _747 = _745.x;
    vec4 _759 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _763 = _759.z;
    float _766 = (_759.x * 2.0) + (-1.0);
    float _767 = (_759.y * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _3604 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))));
    float _774 = _763 * _296;
    float _781 = (cbMtdParam._m0[15u].w * ((_335 - _774) + ((_763 - _335) * _296))) + _774;
    float _785 = (cbMtdParam._m0[16u].x * _363) + _766;
    float _786 = (cbMtdParam._m0[16u].x * _364) + _767;
    float _789 = fma(_773, _205, fma(_786, _212, _785 * _198));
    float _792 = fma(_773, _206, fma(_786, _213, _785 * _199));
    float _795 = fma(_773, _207, fma(_786, _214, _785 * _200));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _3615 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _803 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _3626 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3637 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3648 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3659 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _807 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _828 = _269 * _827;
    float _829 = _270 * _827;
    float _830 = _271 * _827;
    vec4 _835 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _837 = _835.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1012 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _1018 = (cbMatDynParam._m0[5u].x * _1012) + cbMatDynParam._m0[5u].y;
        float _3670 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1023 = (cbMatDynParam._m0[5u].z * _1012) + cbMatDynParam._m0[5u].w;
        float _3681 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) - _1019)) + _1019) < ((_837 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _850 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _851 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _869 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _872 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _875 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _888 = uint(roundEven(NORMAL.w)) * 13u;
    uint _890 = _888 + 9u;
    uint _891 = _890 + uint(cbMatDynParam._m0[0u].w);
    float _897 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0)))) * cbInstanceData._m0[_891].x;
    float _898 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * cbInstanceData._m0[_891].y;
    float _899 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0)))) * cbInstanceData._m0[_891].z;
    float _3692 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _3703 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _3714 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _903 = 1.0 - _807;
    float _904 = _900 * _903;
    float _905 = _901 * _903;
    float _906 = _902 * _903;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _807;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _807;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _807;
    float _914 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    float _917 = _913 + 0.039999999105930328369140625;
    vec4 _926 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _850, cbSceneParam._m0[86u].y * _851));
    float _929 = _926.x * TEXCOORD.z;
    float _930 = dot(vec3(_800, _801, _802), vec3(_828, _829, _830));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _800) - _828;
    float _938 = (_933 * _801) - _829;
    float _939 = (_933 * _802) - _830;
    float _943 = abs(dot(vec3(_828, _829, _830), vec3(_800, _801, _802)));
    float _3725 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_803);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _964 = (1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _945;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1061 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1065 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1088 = _993 + _800;
        float _1089 = _997 + _801;
        float _1090 = _1001 + _802;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_800, _801, _802), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3751 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3762 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3773 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_800, _801, _802), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3784 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _3795 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3806 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_800, _801, _802), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3817 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3828 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3839 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1374 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1378 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1382 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1405 = _993 + _800;
        float _1406 = _997 + _801;
        float _1407 = _1001 + _802;
        float _1417 = fma(_1407, cbModelParam._m0[30u].z, fma(_1406, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405)) - _1374;
        float _1418 = fma(_1407, cbModelParam._m0[31u].z, fma(_1406, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405)) - _1378;
        float _1419 = fma(_1407, cbModelParam._m0[32u].z, fma(_1406, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405)) - _1382;
        float _1423 = inversesqrt(dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419)));
        float _1436 = ((_1423 * _1417) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1374 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1423 * _1418) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1378 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1438 = ((_1423 * _1419) / cbModelParam._m0[35u].z) + ((((((_1382 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1436, _1437, _1438), 0.0);
        float _1473 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1440.x + (-0.5));
        float _1475 = _1473 * (_1440.y + (-0.5));
        float _1476 = _1473 * (_1440.z + (-0.5));
        float _1483 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1447.x + (-0.5));
        float _1485 = _1483 * (_1447.y + (-0.5));
        float _1486 = _1483 * (_1447.z + (-0.5));
        float _1493 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1454.x + (-0.5));
        float _1495 = _1493 * (_1454.y + (-0.5));
        float _1496 = _1493 * (_1454.z + (-0.5));
        float _1503 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1461.x + (-0.5));
        float _1505 = _1503 * (_1461.y + (-0.5));
        float _1506 = _1503 * (_1461.z + (-0.5));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = _1474 * 0.5;
        float _1511 = _1484 * 0.5;
        float _1512 = _1494 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_800, _801, _802), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _3880 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _3891 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _3902 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_1537 + 1.0))) + _1542) * _1507;
        float _1552 = _1475 * 0.5;
        float _1553 = _1485 * 0.5;
        float _1554 = _1495 * 0.5;
        float _1555 = dot(vec3(_1552, _1553, _1554), vec3(_1552, _1553, _1554));
        float _1560 = (_1555 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1555);
        float _1568 = (dot(vec3(_800, _801, _802), vec3(_1560 * _1552, _1560 * _1553, _1560 * _1554)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1577 = sqrt(((_1553 * _1553) + (_1552 * _1552)) + (_1554 * _1554)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1579 = _1578 * 2.0;
        float _1583 = (1.0 - _1578) / (_1578 + 1.0);
        float _3935 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1593 = ((((1.0 - _1584) * (_1579 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1579 + 1.0))) + _1584) * _1508;
        float _1594 = _1476 * 0.5;
        float _1595 = _1486 * 0.5;
        float _1596 = _1496 * 0.5;
        float _1597 = dot(vec3(_1594, _1595, _1596), vec3(_1594, _1595, _1596));
        float _1602 = (_1597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1597);
        float _1610 = (dot(vec3(_800, _801, _802), vec3(_1602 * _1594, _1602 * _1595, _1602 * _1596)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1619 = sqrt(((_1595 * _1595) + (_1594 * _1594)) + (_1596 * _1596)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1621 = _1620 * 2.0;
        float _1625 = (1.0 - _1620) / (_1620 + 1.0);
        float _3968 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1635 = ((((1.0 - _1626) * (_1621 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1621 + 1.0))) + _1626) * _1509;
        _1643 = _1476;
        _1644 = _1475;
        _1645 = _1474;
        _1646 = _1486;
        _1647 = _1485;
        _1648 = _1484;
        _1649 = _1496;
        _1650 = _1495;
        _1651 = _1494;
        _1652 = _1509;
        _1653 = _1508;
        _1654 = _1507;
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0)));
        _1657 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)));
    }
    else
    {
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = _1331;
        _1652 = _1331;
        _1653 = _1331;
        _1654 = _1331;
        _1655 = 0.0;
        _1656 = 0.0;
        _1657 = 0.0;
    }
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1343)) + _1343;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1344)) + _1344;
    float _1669 = (cbModelParam._m0[1u].x * (_1657 - _1345)) + _1345;
    float _1690 = fma(_1669, cbSceneParam._m0[89u].z, fma(_1668, cbSceneParam._m0[89u].y, _1667 * cbSceneParam._m0[89u].x));
    float _1693 = fma(_1669, cbSceneParam._m0[90u].z, fma(_1668, cbSceneParam._m0[90u].y, _1667 * cbSceneParam._m0[90u].x));
    float _1696 = fma(_1669, cbSceneParam._m0[91u].z, fma(_1668, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1667));
    float _1711 = _937 * 0.5;
    float _1712 = _938 * 0.5;
    float _1713 = _939 * 0.5;
    float _1714 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1645, _1648, _1651, _1654));
    float _1717 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1720 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1754;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1727 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1731 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1735 = dot(vec4(_1711, _1712, _1713, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1742 = dot(vec4(cbModelParam._m0[39u]), vec4(_1711, _1712, _1713, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1765;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1756 = dot(vec4(cbModelParam._m0[40u]), vec4(_1711, _1712, _1713, 1.0));
        _1765 = dot(vec3(isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1756) ? 0.0 : (isnan(0.0) ? _1756 : max(0.0, _1756))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1765 = 1.0;
    }
    float _1769 = (_1765 * cbModelParam._m0[1u].x) + (_1754 * (1.0 - cbModelParam._m0[1u].x));
    float _1779 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1780 = isnan(_1779) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1779 : min(cbModelParam._m0[25u].z, _1779));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1841 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1844 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1872 = frontier_phi_57_55_ladder;
        }
        float _2254;
        if (_1841 > 0.0)
        {
            _2254 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2254 = frontier_phi_66_62_ladder;
        }
        float _2578;
        if (_1844 > 0.0)
        {
            _2578 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2578 = frontier_phi_80_73_ladder;
        }
        float _2580 = isnan(_2254) ? _1872 : (isnan(_1872) ? _2254 : min(_1872, _2254));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1838) + _1827;
        float _2586 = (_2581 * _1841) + _1831;
        float _2587 = (_2581 * _1844) + _1835;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2729 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2587, cbModelParam._m0[9u].z, fma(_2586, cbModelParam._m0[9u].y, _2585 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2587, cbModelParam._m0[10u].z, fma(_2586, cbModelParam._m0[10u].y, _2585 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2587, cbModelParam._m0[11u].z, fma(_2586, cbModelParam._m0[11u].y, _2585 * cbModelParam._m0[11u].x))), _1780);
            frontier_phi_56_80_ladder = _2729.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2729.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2729.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_56_80_ladder_2;
        _1862 = frontier_phi_56_80_ladder_1;
        _1864 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1780);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1921 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1925 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1929 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1932 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1935 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1938 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2259;
        if (_1932 > 0.0)
        {
            _2259 = abs((1.0 - _1921) / _1932);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1921 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2259 = frontier_phi_68_64_ladder;
        }
        float _2604;
        if (_1935 > 0.0)
        {
            _2604 = abs((1.0 - _1925) / _1935);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1925 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2604 = frontier_phi_82_75_ladder;
        }
        float _2794;
        if (_1938 > 0.0)
        {
            _2794 = abs((1.0 - _1929) / _1938);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1929 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2794 = frontier_phi_100_93_ladder;
        }
        float _2796 = isnan(_2604) ? _2259 : (isnan(_2259) ? _2604 : min(_2259, _2604));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _1932) + _1921;
        float _2802 = (_2797 * _1935) + _1925;
        float _2803 = (_2797 * _1938) + _1929;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3045 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_65_100_ladder = _3045.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3045.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3045.z * cbModelParam._m0[1u].z;
        }
        _1957 = frontier_phi_65_100_ladder_1;
        _1959 = frontier_phi_65_100_ladder;
        _1961 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1869);
        _1957 = _1941.x * cbModelParam._m0[1u].z;
        _1959 = _1941.y * cbModelParam._m0[1u].z;
        _1961 = _1941.z * cbModelParam._m0[1u].z;
    }
    float _1974 = (((_964 * _914) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1957 - _1860)) + _1860);
    float _1976 = (((_964 * _916) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1959 - _1862)) + _1862);
    float _1978 = (((_964 * _917) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1961 - _1864)) + _1864);
    float _1981 = fma(_1978, cbSceneParam._m0[89u].z, fma(_1976, cbSceneParam._m0[89u].y, _1974 * cbSceneParam._m0[89u].x));
    float _1984 = fma(_1978, cbSceneParam._m0[90u].z, fma(_1976, cbSceneParam._m0[90u].y, _1974 * cbSceneParam._m0[90u].x));
    float _1987 = fma(_1978, cbSceneParam._m0[91u].z, fma(_1976, cbSceneParam._m0[91u].y, _1974 * cbSceneParam._m0[91u].x));
    vec4 _1995 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_850, _851));
    float _1997 = _1995.w;
    float _2009 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1997);
    float _2010 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1997);
    float _2011 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1997);
    uvec4 _2015 = floatBitsToUint(cbInstanceData._m0[_888 + 5u]);
    uint _2017 = _2015.x * 14u;
    uint _2018 = _2017 + 13u;
    float _2023 = _929 + (-1.0);
    float _2026 = (cbLight._m0[_2018].x * _2023) + 1.0;
    float _2027 = (cbLight._m0[_2018].y * _2023) + 1.0;
    uint _2028 = _2017 + 5u;
    float _2034 = isnan(1.0) ? _2027 : (isnan(_2027) ? 1.0 : min(_2027, 1.0));
    uint _2038 = _2017 + 4u;
    float _2047 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
    uint _2051 = _2017 | 1u;
    float _2062 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_800, _801, _802));
    float _2065 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_800, _801, _802));
    float _4104 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _4115 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2070 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _2072 = (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.3183098733425140380859375;
    float _2079 = ((cbLight._m0[_2028].x * _2034) * _2072) + (((cbLight._m0[_2038].x * _2009) * _2047) * _2070);
    float _2080 = ((_2034 * cbLight._m0[_2028].y) * _2072) + (((cbLight._m0[_2038].y * _2010) * _2047) * _2070);
    float _2081 = ((_2034 * cbLight._m0[_2028].z) * _2072) + (((cbLight._m0[_2038].z * _2011) * _2047) * _2070);
    uint _2083 = _2017 + 8u;
    float _2096 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _803) * 0.949999988079071044921875);
    float _2097 = _2096 * _2096;
    float _2098 = cbLight._m0[_2017].x + _828;
    float _2099 = cbLight._m0[_2017].y + _829;
    float _2100 = cbLight._m0[_2017].z + _830;
    float _2104 = inversesqrt(dot(vec3(_2098, _2099, _2100), vec3(_2098, _2099, _2100)));
    float _2105 = _2104 * _2098;
    float _2106 = _2104 * _2099;
    float _2107 = _2104 * _2100;
    float _2108 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2017].xyz));
    float _4126 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2112 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _2113 = dot(vec3(_800, _801, _802), vec3(_2105, _2106, _2107));
    float _4148 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2116 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _2117 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2105, _2106, _2107));
    float _4159 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2121 = _2097 * _2097;
    float _2125 = ((_2116 * _2116) * (_2121 + (-1.0))) + 1.0;
    float _2133 = exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0);
    float _2134 = 0.959999978542327880859375 - _911;
    float _2136 = 0.959999978542327880859375 - _912;
    float _2137 = 0.959999978542327880859375 - _913;
    float _2144 = 1.0 - _2097;
    float _2155 = (0.5 / (((_2112 * ((_2111 * _2144) + _2097)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2144) + _2097) * _2111))) * _2111;
    float _4170 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2121 / ((_2125 * _2125) * 3.141590118408203125));
    uint _2171 = _2017 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _803) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_2051].x + _828;
    float _2185 = cbLight._m0[_2051].y + _829;
    float _2186 = cbLight._m0[_2051].z + _830;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2051].xyz));
    float _4181 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _2198 = dot(vec3(_800, _801, _802), vec3(_2191, _2192, _2193));
    float _4192 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2191, _2192, _2193));
    float _4203 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2217 = exp2(log2(1.0 - (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * 5.0);
    float _2224 = 1.0 - _2183;
    float _2234 = (0.5 / (((_2112 * ((_2197 * _2224) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2112 * _2224) + _2183) * _2197))) * _2197;
    float _4214 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2236 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2246 = (((((_2217 * _2134) + _914) * cbLight._m0[_2171].x) * _2236) * _2034) + ((((cbLight._m0[_2083].x * _2009) * ((_2133 * _2134) + _914)) * _2157) * _2047);
    float _2247 = (((((_2217 * _2136) + _916) * cbLight._m0[_2171].y) * _2236) * _2034) + ((((cbLight._m0[_2083].y * _2010) * ((_2133 * _2136) + _916)) * _2157) * _2047);
    float _2248 = (((((_2217 * _2137) + _917) * cbLight._m0[_2171].z) * _2236) * _2034) + ((((cbLight._m0[_2083].z * _2011) * ((_2133 * _2137) + _917)) * _2157) * _2047);
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    if (_2015.y == 0u)
    {
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2303;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2303;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2303;
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.x;
        uint _2330 = uint((float(_2318.y) * floor(float(uint(cbSceneParam._m0[85u].y * _851) / _2319))) + floor(float(uint(cbSceneParam._m0[85u].x * _850) / _2319)));
        float _2340 = (log2(_2306 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2341 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        uint _2344 = uint(isnan(14.0) ? _2341 : (isnan(_2341) ? 14.0 : min(_2341, 14.0)));
        uvec4 _2349 = texelFetch(g_lightClusterGridBuffer, int(((_2344 << 2u) + (_2330 << 6u)) >> 2u));
        uint _2350 = _2349.x;
        uint _2351 = _2318.z;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        if (((((1u << ((_2351 >> 4u) & 15u)) + 4294967295u) & _2350) == 0u) || ((_2351 & 240u) == 0u))
        {
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
        }
        else
        {
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2468;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            float _2644 = 0.0;
            float _2645 = 0.0;
            float _2646 = 0.0;
            uint _2647 = 0u;
            uint _2656;
            bool _2657;
            for (;;)
            {
                _2656 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2647 << 2u)) >> 2u)).x;
                _2657 = _2656 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2657)
                {
                    frontier_phi_95_pred = _2642;
                    frontier_phi_95_pred_1 = _2641;
                    frontier_phi_95_pred_2 = _2643;
                    frontier_phi_95_pred_3 = _2646;
                    frontier_phi_95_pred_4 = _2645;
                    frontier_phi_95_pred_5 = _2644;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2641;
                    _2838 = _2642;
                    _2839 = _2643;
                    _2840 = _2644;
                    _2841 = _2645;
                    _2842 = _2646;
                    _2843 = _2656;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2647 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _2304;
                        float _2904 = _2863.y - _2305;
                        float _2905 = _2863.z - _2306;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_869, _872, _875), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4235 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _2304;
                        float _2939 = (-0.0) - _2305;
                        float _2940 = (-0.0) - _2306;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2955 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2956 = 1.0 - _945;
                        float _2963 = sqrt(1.0 - ((1.0 - (_2956 * _2956)) * (1.0 - (_2955 * _2955))));
                        float _2964 = _2963 * _2963;
                        float _2965 = _2964 * _2964;
                        float _2966 = _2945 + _2910;
                        float _2967 = _2946 + _2911;
                        float _2968 = _2947 + _2912;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2976 = dot(vec3(_869, _872, _875), vec3(_2945, _2946, _2947));
                        float _4251 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                        float _2980 = dot(vec3(_869, _872, _875), vec3(_2972 * _2966, _2972 * _2967, _2972 * _2968));
                        float _4262 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
                        float _2987 = ((_2983 * _2983) * (_2965 + (-1.0))) + 1.0;
                        float _2988 = _2923 * _2964;
                        float _2989 = _2988 * _2988;
                        float _2992 = ((1.0 - _2989) * _2913) + _2989;
                        float _4273 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                        float _2994 = 1.0 - _2964;
                        float _3004 = (0.5 / (((_2993 * ((_2979 * _2994) + _2964)) + 9.9999999392252902907785028219223e-09) + (((_2993 * _2994) + _2964) * _2979))) * _2993;
                        float _4284 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3015 = (((_2965 * 3.1415927410125732421875) * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) / ((_2987 * _2987) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2741 = (_2934 * _2882.x) + _2840;
                        _2742 = (_2934 * _2882.y) + _2841;
                        _2743 = (_2934 * _2882.z) + _2842;
                        _2738 = (_3015 * _2899.x) + _2837;
                        _2739 = (_3015 * _2899.y) + _2838;
                        _2740 = (_3015 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2738;
                            _2838 = _2739;
                            _2839 = _2740;
                            _2840 = _2741;
                            _2841 = _2742;
                            _2842 = _2743;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_95_pred = _2739;
                    frontier_phi_95_pred_1 = _2738;
                    frontier_phi_95_pred_2 = _2740;
                    frontier_phi_95_pred_3 = _2743;
                    frontier_phi_95_pred_4 = _2742;
                    frontier_phi_95_pred_5 = _2741;
                }
                _2460 = frontier_phi_95_pred;
                _2458 = frontier_phi_95_pred_1;
                _2462 = frontier_phi_95_pred_2;
                _2468 = frontier_phi_95_pred_3;
                _2466 = frontier_phi_95_pred_4;
                _2464 = frontier_phi_95_pred_5;
                uint _2648 = _2647 + 1u;
                if (_2648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2641 = _2458;
                    _2642 = _2460;
                    _2643 = _2462;
                    _2644 = _2464;
                    _2645 = _2466;
                    _2646 = _2468;
                    _2647 = _2648;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
        }
        uvec4 _2471 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2472 = _2471.z;
        uint _2474 = (_2472 >> 8u) & 15u;
        float _2609;
        float _2611;
        float _2613;
        float _2615;
        float _2617;
        float _2619;
        if (((4294967295u << _2474) & _2350) == 0u)
        {
            _2609 = _2457;
            _2611 = _2459;
            _2613 = _2461;
            _2615 = _2463;
            _2617 = _2465;
            _2619 = _2467;
        }
        else
        {
            float _2634 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
            float _2635 = _2634 * _2304;
            float _2636 = _2634 * _2305;
            float _2637 = _2634 * _2306;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2474 < ((_2472 >> 12u) & 15u))
            {
                float _2610;
                float _2612;
                float _2614;
                float _2616;
                float _2618;
                float _2620;
                float _2820 = _2457;
                float _2821 = _2459;
                float _2822 = _2461;
                float _2823 = _2463;
                float _2824 = _2465;
                float _2825 = _2467;
                uint _2826 = _2474;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2836)
                    {
                        frontier_phi_109_pred = _2821;
                        frontier_phi_109_pred_1 = _2820;
                        frontier_phi_109_pred_2 = _2825;
                        frontier_phi_109_pred_3 = _2824;
                        frontier_phi_109_pred_4 = _2823;
                        frontier_phi_109_pred_5 = _2822;
                    }
                    else
                    {
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3063 = _2820;
                        float _3064 = _2821;
                        float _3065 = _2822;
                        float _3066 = _2823;
                        float _3067 = _2824;
                        float _3068 = _2825;
                        uint _3069 = _2835;
                        uint _3070;
                        vec4 _3095;
                        float _3096;
                        vec4 _3111;
                        vec3 _3123;
                        vec4 _3138;
                        vec4 _3153;
                        float _3199;
                        bool _3200;
                        for (;;)
                        {
                            uint _3080 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3069));
                            _3070 = (_3069 + 4294967295u) & _3069;
                            uint _3082 = _3080 * 40u;
                            _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            _3096 = _3095.w;
                            uint _3098 = (_3080 * 40u) + 4u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3080 * 40u) + 8u;
                            _3123 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x));
                            uint _3125 = (_3080 * 40u) + 16u;
                            _3138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3125 + 3u)).x));
                            uint _3140 = (_3080 * 40u) + 20u;
                            _3153 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3140)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3140 + 3u)).x));
                            uint _3155 = (_3080 * 40u) + 24u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            uint _3174 = (_3080 * 40u) + 28u;
                            vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3174)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3174 + 3u)).x));
                            _3199 = fma(_2306, _3187.z, fma(_2305, _3187.y, _3187.x * _2304)) + _3187.w;
                            _3200 = !((fma(_2306, _3168.z, fma(_2305, _3168.y, _3168.x * _2304)) + _3168.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3200)
                            {
                                float _3227 = _3095.x - _2304;
                                float _3228 = _3095.y - _2305;
                                float _3229 = _3095.z - _2306;
                                float _3230 = dot(vec3(_3227, _3228, _3229), vec3(_3227, _3228, _3229));
                                float _3233 = inversesqrt(_3230);
                                float _3234 = _3233 * _3227;
                                float _3235 = _3233 * _3228;
                                float _3236 = _3233 * _3229;
                                float _3240 = 1.0 - (_3230 / (_3096 * _3096));
                                float _4295 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                                float _3241 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3245 = sqrt(_3230) * _3111.w;
                                float _3247 = 1.39999997615814208984375 / (_3245 + 1.39999997615814208984375);
                                float _3248 = _3247 * _3247;
                                float _3251 = ((1.0 - _3248) * dot(vec3(_3234, _3235, _3236), vec3(_869, _872, _875))) + _3248;
                                float _3254 = _3245 * _3245;
                                float _3258 = (fma(_2306, _3138.z, fma(_2305, _3138.y, _3138.x * _2304)) + _3138.w) / _3199;
                                float _3259 = (fma(_2306, _3153.z, fma(_2305, _3153.y, _3153.x * _2304)) + _3153.w) / _3199;
                                float _3263 = 1.0 - dot(vec2(_3258, _3259), vec2(_3258, _3259));
                                float _4311 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
                                float _3265 = _3264 * (((isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0))) * _3241) / ((_3254 * 0.699999988079071044921875) + 1.0));
                                float _3277 = exp2(log2(1.0 / ((_3254 * 3.5) + 5.0)) * 0.25);
                                float _3278 = 1.0 - _945;
                                float _3285 = sqrt(1.0 - ((1.0 - (_3278 * _3278)) * (1.0 - (_3277 * _3277))));
                                float _3286 = _3285 * _3285;
                                float _3287 = _3286 * _3286;
                                float _3288 = _3234 - _2635;
                                float _3289 = _3235 - _2636;
                                float _3290 = _3236 - _2637;
                                float _3294 = inversesqrt(dot(vec3(_3288, _3289, _3290), vec3(_3288, _3289, _3290)));
                                float _3298 = dot(vec3(_869, _872, _875), vec3((-0.0) - _2635, (-0.0) - _2636, (-0.0) - _2637));
                                float _4322 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3301 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
                                float _3302 = dot(vec3(_869, _872, _875), vec3(_3294 * _3288, _3294 * _3289, _3294 * _3290));
                                float _4333 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3305 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
                                float _3309 = ((_3305 * _3305) * (_3287 + (-1.0))) + 1.0;
                                float _3310 = _3247 * _3286;
                                float _3311 = _3310 * _3310;
                                float _3317 = ((1.0 - _3311) * dot(vec3(_869, _872, _875), vec3(_3234, _3235, _3236))) + _3311;
                                float _4344 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3319 = 1.0 - _3286;
                                float _3329 = (0.5 / (((_3318 * ((_3301 * _3319) + _3286)) + 9.9999999392252902907785028219223e-09) + (((_3318 * _3319) + _3286) * _3301))) * _3318;
                                float _4355 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3339 = (_3264 * _3241) * (((_3287 * 3.1415927410125732421875) * (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0)))) / ((_3309 * _3309) * ((_3254 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3265 * _3111.y;
                                frontier_phi_115_pred_1 = _3265 * _3111.x;
                                frontier_phi_115_pred_2 = _3339 * _3123.z;
                                frontier_phi_115_pred_3 = _3339 * _3123.y;
                                frontier_phi_115_pred_4 = _3339 * _3123.x;
                                frontier_phi_115_pred_5 = _3265 * _3111.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3347 = frontier_phi_115_pred;
                            _3346 = frontier_phi_115_pred_1;
                            _3345 = frontier_phi_115_pred_2;
                            _3344 = frontier_phi_115_pred_3;
                            _3343 = frontier_phi_115_pred_4;
                            _3348 = frontier_phi_115_pred_5;
                            _3053 = _3346 + _3066;
                            _3054 = _3347 + _3067;
                            _3055 = _3348 + _3068;
                            _3050 = _3343 + _3063;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            if (_3070 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3070;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3051;
                        frontier_phi_109_pred_1 = _3050;
                        frontier_phi_109_pred_2 = _3055;
                        frontier_phi_109_pred_3 = _3054;
                        frontier_phi_109_pred_4 = _3053;
                        frontier_phi_109_pred_5 = _3052;
                    }
                    _2612 = frontier_phi_109_pred;
                    _2610 = frontier_phi_109_pred_1;
                    _2620 = frontier_phi_109_pred_2;
                    _2618 = frontier_phi_109_pred_3;
                    _2616 = frontier_phi_109_pred_4;
                    _2614 = frontier_phi_109_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2610;
                        _2821 = _2612;
                        _2822 = _2614;
                        _2823 = _2616;
                        _2824 = _2618;
                        _2825 = _2620;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2610;
                frontier_phi_84_85_ladder_1 = _2614;
                frontier_phi_84_85_ladder_2 = _2620;
                frontier_phi_84_85_ladder_3 = _2618;
                frontier_phi_84_85_ladder_4 = _2616;
                frontier_phi_84_85_ladder_5 = _2612;
            }
            else
            {
                frontier_phi_84_85_ladder = _2457;
                frontier_phi_84_85_ladder_1 = _2461;
                frontier_phi_84_85_ladder_2 = _2467;
                frontier_phi_84_85_ladder_3 = _2465;
                frontier_phi_84_85_ladder_4 = _2463;
                frontier_phi_84_85_ladder_5 = _2459;
            }
            _2609 = frontier_phi_84_85_ladder;
            _2611 = frontier_phi_84_85_ladder_5;
            _2613 = frontier_phi_84_85_ladder_1;
            _2615 = frontier_phi_84_85_ladder_4;
            _2617 = frontier_phi_84_85_ladder_3;
            _2619 = frontier_phi_84_85_ladder_2;
        }
        float _2624 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2363 = (_2624 * _2615) + _2079;
        _2365 = (_2624 * _2617) + _2080;
        _2367 = (_2624 * _2619) + _2081;
        _2369 = ((_2609 * _914) * _2624) + _2246;
        _2371 = ((_2611 * _916) * _2624) + _2247;
        _2373 = ((_2613 * _917) * _2624) + _2248;
    }
    else
    {
        _2363 = _2079;
        _2365 = _2080;
        _2367 = _2081;
        _2369 = _2246;
        _2371 = _2247;
        _2373 = _2248;
    }
    uint _2379 = _890 + uint(cbMatDynParam._m0[0u].w);
    float _4371 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4382 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4393 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2404 = (((isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_2363 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _929))) + ((_2369 + ((isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2379].x * ((_721 * ((_677 - _605) - (_677 * _296))) + _605));
    float _2406 = ((cbInstanceData._m0[_2379].y * ((_721 * ((_678 - _606) - (_678 * _296))) + _606)) + ((_2371 + ((isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * (_2365 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _929)));
    float _2408 = ((cbInstanceData._m0[_2379].z * ((_721 * ((_679 - _607) - (_679 * _296))) + _607)) + ((_2373 + ((isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0))) * _1769)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_2367 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _929)));
    float _2409 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
    float _2410 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2411 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    uint _2412 = _888 + 6u;
    float _2420 = _850 / cbSceneParam._m0[86u].x;
    float _2421 = _851 / cbSceneParam._m0[86u].y;
    vec4 _2435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2437 = _2435.x;
    float _2438 = _2435.y;
    float _2439 = _2435.z;
    float _2440 = _2435.w;
    float _2520;
    float _2522;
    float _2524;
    float _2526;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2482 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2483 = _2482 / _823;
        float _2494 = _2483 * _269;
        float _2495 = _270 * _2483;
        float _2496 = (-0.0) - _2495;
        float _2497 = _2483 * _271;
        float _2499 = (cbSceneParam._m0[77u].w * _2496) / _2482;
        float _2500 = _2499 + cbSceneParam._m0[79u].w;
        float _2501 = cbSceneParam._m0[79u].w - _2495;
        float _2507 = sqrt(((_2494 * _2494) + (_2495 * _2495)) + (_2497 * _2497));
        float _2510 = (1.0 - (cbSceneParam._m0[77u].w / _2482)) * _2507;
        float _2516 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2518 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2751;
        if (abs((_2496 - _2499) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2751 = ((((_2500 > 0.0) ? exp2(_2516 * _2500) : (2.0 - exp2(_2518 * _2500))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2510;
        }
        else
        {
            float _2670 = 1.0 / cbSceneParam._m0[80u].x;
            float _2671 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : max(_2500, _2501));
            float _2672 = isnan(_2501) ? _2500 : (isnan(_2500) ? _2501 : min(_2500, _2501));
            float _2681 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : min(_2671, 0.0));
            float _2682 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : min(_2672, 0.0));
            _2751 = ((abs(_2507 / _2496) * cbSceneParam._m0[80u].y) * ((((_2681 - _2682) * 2.0) - ((exp2(_2516 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0)))) - exp2(_2516 * (isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0))))) * _2670)) - ((exp2(_2518 * _2681) - exp2(_2518 * _2682)) * _2670))) + (_2510 * cbSceneParam._m0[80u].z);
        }
        vec4 _2753 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2420, _2421, 1.0), 0.0);
        float _2762 = exp2((_2751 * (-1.44269502162933349609375)) * (1.0 - _2753.w));
        float _2763 = log2(_2762);
        float _2779 = log2(_2440);
        _2520 = (exp2(_2779 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].x)) * _2753.x) / cbSceneParam._m0[78u].x)) + _2437;
        _2522 = (exp2(_2779 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].y)) * _2753.y) / cbSceneParam._m0[78u].y)) + _2438;
        _2524 = (exp2(_2779 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2763 * cbSceneParam._m0[78u].z)) * _2753.z) / cbSceneParam._m0[78u].z)) + _2439;
        _2526 = _2762 * _2440;
    }
    else
    {
        _2520 = _2437;
        _2522 = _2438;
        _2524 = _2439;
        _2526 = _2440;
    }
    bool _2789;
    vec4 _2536;
    vec4 _2558;
    float _2560;
    float _2564;
    float _2565;
    float _2566;
    float _2567;
    bool _2577;
    for (;;)
    {
        _2536 = cbMatDynParam._m0[0u];
        float _2538 = roundEven(_2536.y);
        bool _2539 = _2538 == 3.0;
        float _2540 = log2(_2526);
        float _2547 = exp2(_2540 * cbSceneParam._m0[78u].x) * _2409;
        float _2548 = exp2(_2540 * cbSceneParam._m0[78u].y) * _2410;
        float _2549 = exp2(_2540 * cbSceneParam._m0[78u].z) * _2411;
        float _2556 = _837 + (-0.5);
        _2558 = cbMtdParam._m0[1u];
        _2560 = _2558.y * _2556;
        float _2563 = (_2538 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2564 = _2563 * (_2539 ? _2547 : (_2547 + (cbSceneParam._m0[72u].w * _2520)));
        _2565 = _2563 * (_2539 ? _2548 : (_2548 + (cbSceneParam._m0[72u].w * _2522)));
        _2566 = _2563 * (_2539 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2524)));
        _2567 = _2556 * 0.999000012874603271484375;
        _2577 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2577)
        {
            if ((cbInstanceData._m0[_888 + 7u].x + _2567) < 0.5)
            {
                _2789 = true;
                break;
            }
        }
        uint _2705 = _890 + uint(_2536.w);
        if ((cbInstanceData._m0[_2705].w < 1.0) && ((cbInstanceData._m0[_2705].w + _2567) < 0.5))
        {
            _2789 = true;
            break;
        }
        if ((_2560 + 1.0) < _2558.x)
        {
            _2789 = true;
            break;
        }
        _2789 = false;
        break;
    }
    float _3020;
    if (_2789)
    {
        discard_state = true;
        _3020 = 0.0;
    }
    else
    {
        _3020 = cbInstanceData._m0[_2412].w;
    }
    SV_Target.x = _2564;
    SV_Target.y = _2565;
    SV_Target.z = _2566;
    SV_Target.w = _3020;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2412].w;
    discard_exit();
}


