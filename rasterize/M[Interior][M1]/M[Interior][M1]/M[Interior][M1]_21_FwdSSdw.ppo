#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1159;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    vec4 _613 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _615 = _613.x;
    vec4 _627 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _631 = _627.z;
    float _634 = (_627.x * 2.0) + (-1.0);
    float _635 = (_627.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3323 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))));
    float _642 = _631 * _290;
    float _649 = (cbMtdParam._m0[15u].w * ((_329 - _642) + ((_631 - _329) * _290))) + _642;
    float _653 = (cbMtdParam._m0[16u].x * _357) + _634;
    float _654 = (cbMtdParam._m0[16u].x * _358) + _635;
    float _657 = fma(_641, _199, fma(_654, _206, _653 * _192));
    float _660 = fma(_641, _200, fma(_654, _207, _653 * _193));
    float _663 = fma(_641, _201, fma(_654, _208, _653 * _194));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3334 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _671 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3356 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3367 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3378 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _675 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _696 = _263 * _695;
    float _697 = _264 * _695;
    float _698 = _265 * _695;
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _728 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _731 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _746 = _744 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3389 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _759 = 1.0 - _675;
    float _760 = _756 * _759;
    float _761 = _757 * _759;
    float _762 = _758 * _759;
    float _767 = (_756 + (-0.039999999105930328369140625)) * _675;
    float _768 = (_757 + (-0.039999999105930328369140625)) * _675;
    float _769 = (_758 + (-0.039999999105930328369140625)) * _675;
    float _770 = _767 + 0.039999999105930328369140625;
    float _772 = _768 + 0.039999999105930328369140625;
    float _773 = _769 + 0.039999999105930328369140625;
    vec4 _782 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _704, cbSceneParam._m0[86u].y * _705));
    float _785 = _782.x * TEXCOORD.z;
    float _786 = dot(vec3(_668, _669, _670), vec3(_696, _697, _698));
    float _789 = _786 * 2.0;
    float _793 = (_789 * _668) - _696;
    float _794 = (_789 * _669) - _697;
    float _795 = (_789 * _670) - _698;
    float _799 = abs(dot(vec3(_696, _697, _698), vec3(_668, _669, _670)));
    float _3422 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _801 = sqrt(_671);
    float _814 = exp2((_801 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_801 * 3.0));
    float _820 = (1.0 - _814) * ((_801 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _821 = _814 * _801;
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _885 = fma(_857, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849));
        float _889 = fma(_857, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849));
        float _893 = fma(_857, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849));
        float _916 = _849 + _668;
        float _917 = _853 + _669;
        float _918 = _857 + _670;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_885 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_889 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_893 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_668, _669, _670), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3470 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_668, _669, _670), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3503 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_668, _669, _670), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3536 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1160 = _988;
        _1161 = _987;
        _1162 = _999;
        _1163 = _998;
        _1164 = _997;
        _1165 = _1009;
        _1166 = _1008;
        _1167 = _1007;
        _1168 = _1022;
        _1169 = _1021;
        _1170 = _1020;
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _1159;
        _1160 = _1159;
        _1161 = _1159;
        _1162 = _1159;
        _1163 = _1159;
        _1164 = _1159;
        _1165 = _1159;
        _1166 = _1159;
        _1167 = _1159;
        _1168 = _1159;
        _1169 = _1159;
        _1170 = _1159;
        _1171 = 0.0;
        _1172 = 0.0;
        _1173 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_857, cbModelParam._m0[30u].z, fma(_853, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849));
        float _1203 = fma(_857, cbModelParam._m0[31u].z, fma(_853, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849));
        float _1207 = fma(_857, cbModelParam._m0[32u].z, fma(_853, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849));
        float _1230 = _849 + _668;
        float _1231 = _853 + _669;
        float _1232 = _857 + _670;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_668, _669, _670), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3599 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_668, _669, _670), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3632 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_668, _669, _670), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3665 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1159;
        _1469 = _1159;
        _1470 = _1159;
        _1471 = _1159;
        _1472 = _1159;
        _1473 = _1159;
        _1474 = _1159;
        _1475 = _1159;
        _1476 = _1159;
        _1477 = _1159;
        _1478 = _1159;
        _1479 = _1159;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1171)) + _1171;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1172)) + _1172;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1173)) + _1173;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _793 * 0.5;
    float _1537 = _794 * 0.5;
    float _1538 = _795 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1162, _1165, _1168));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_857, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _849)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_857, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _849)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_857, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _849)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_795, cbModelParam._m0[13u].z, fma(_794, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _793));
        float _1667 = fma(_795, cbModelParam._m0[14u].z, fma(_794, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _793));
        float _1670 = fma(_795, cbModelParam._m0[15u].z, fma(_794, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _793));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1698 = frontier_phi_38_36_ladder;
        }
        float _2080;
        if (_1667 > 0.0)
        {
            _2080 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2080 = frontier_phi_47_43_ladder;
        }
        float _2396;
        if (_1670 > 0.0)
        {
            _2396 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2396 = frontier_phi_61_54_ladder;
        }
        float _2398 = isnan(_2080) ? _1698 : (isnan(_1698) ? _2080 : min(_1698, _2080));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1664) + _1653;
        float _2404 = (_2399 * _1667) + _1657;
        float _2405 = (_2399 * _1670) + _1661;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2406;
        float _2409 = _2406 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2405 > _2409) || ((_2405 < _2407) || ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 < _2407) || (_2403 > _2409))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_37_61_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_37_61_ladder_2;
        _1688 = frontier_phi_37_61_ladder_1;
        _1690 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_793, _794, _795), _1605);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1783;
    float _1785;
    float _1787;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1747 = fma(_857, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _849)) + cbModelParam._m0[21u].w;
        float _1751 = fma(_857, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _849)) + cbModelParam._m0[22u].w;
        float _1755 = fma(_857, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _849)) + cbModelParam._m0[23u].w;
        float _1758 = fma(_795, cbModelParam._m0[21u].z, fma(_794, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _793));
        float _1761 = fma(_795, cbModelParam._m0[22u].z, fma(_794, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _793));
        float _1764 = fma(_795, cbModelParam._m0[23u].z, fma(_794, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _793));
        float _2085;
        if (_1758 > 0.0)
        {
            _2085 = abs((1.0 - _1747) / _1758);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1758 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1747 + 1.0) / _1758);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2085 = frontier_phi_49_45_ladder;
        }
        float _2422;
        if (_1761 > 0.0)
        {
            _2422 = abs((1.0 - _1751) / _1761);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1751 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2422 = frontier_phi_63_56_ladder;
        }
        float _2591;
        if (_1764 > 0.0)
        {
            _2591 = abs((1.0 - _1755) / _1764);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1755 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2591 = frontier_phi_77_72_ladder;
        }
        float _2593 = isnan(_2422) ? _2085 : (isnan(_2085) ? _2422 : min(_2085, _2422));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _1758) + _1747;
        float _2599 = (_2594 * _1761) + _1751;
        float _2600 = (_2594 * _1764) + _1755;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2602 = (-1.0) - _2601;
        float _2604 = _2601 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2600 > _2604) || ((_2600 < _2602) || ((_2599 > _2604) || ((_2599 < _2602) || ((_2598 < _2602) || (_2598 > _2604))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2600, cbModelParam._m0[17u].z, fma(_2599, cbModelParam._m0[17u].y, _2598 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2600, cbModelParam._m0[18u].z, fma(_2599, cbModelParam._m0[18u].y, _2598 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2600, cbModelParam._m0[19u].z, fma(_2599, cbModelParam._m0[19u].y, _2598 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_46_77_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1783 = frontier_phi_46_77_ladder_2;
        _1785 = frontier_phi_46_77_ladder_1;
        _1787 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1767 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_793, _794, _795), _1695);
        _1783 = _1767.x * cbModelParam._m0[1u].z;
        _1785 = _1767.y * cbModelParam._m0[1u].z;
        _1787 = _1767.z * cbModelParam._m0[1u].z;
    }
    float _1800 = (((_820 * _770) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1783 - _1686)) + _1686);
    float _1802 = (((_820 * _772) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1785 - _1688)) + _1688);
    float _1804 = (((_820 * _773) + _821) * _785) * ((cbModelParam._m0[1u].w * (_1787 - _1690)) + _1690);
    float _1807 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1800 * cbSceneParam._m0[91u].x));
    vec4 _1821 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_704, _705));
    float _1823 = _1821.w;
    float _1835 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1823);
    float _1836 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1823);
    float _1837 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1823);
    uvec4 _1841 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _1843 = _1841.x * 14u;
    uint _1844 = _1843 + 13u;
    float _1849 = _785 + (-1.0);
    float _1852 = (cbLight._m0[_1844].x * _1849) + 1.0;
    float _1853 = (cbLight._m0[_1844].y * _1849) + 1.0;
    uint _1854 = _1843 + 5u;
    float _1860 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1864 = _1843 + 4u;
    float _1873 = isnan(1.0) ? _1852 : (isnan(_1852) ? 1.0 : min(_1852, 1.0));
    uint _1877 = _1843 | 1u;
    float _1888 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_668, _669, _670));
    float _1891 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_668, _669, _670));
    float _3801 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _3812 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1896 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1898 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
    float _1905 = ((cbLight._m0[_1854].x * _1860) * _1898) + (((cbLight._m0[_1864].x * _1835) * _1873) * _1896);
    float _1906 = ((_1860 * cbLight._m0[_1854].y) * _1898) + (((cbLight._m0[_1864].y * _1836) * _1873) * _1896);
    float _1907 = ((_1860 * cbLight._m0[_1854].z) * _1898) + (((cbLight._m0[_1864].z * _1837) * _1873) * _1896);
    uint _1909 = _1843 + 8u;
    float _1922 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _671) * 0.949999988079071044921875);
    float _1923 = _1922 * _1922;
    float _1924 = cbLight._m0[_1843].x + _696;
    float _1925 = cbLight._m0[_1843].y + _697;
    float _1926 = cbLight._m0[_1843].z + _698;
    float _1930 = inversesqrt(dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926)));
    float _1931 = _1930 * _1924;
    float _1932 = _1930 * _1925;
    float _1933 = _1930 * _1926;
    float _1934 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1843].xyz));
    float _3823 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1937 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _1938 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1939 = dot(vec3(_668, _669, _670), vec3(_1931, _1932, _1933));
    float _3845 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1942 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _1943 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1931, _1932, _1933));
    float _3856 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1947 = _1923 * _1923;
    float _1951 = ((_1942 * _1942) * (_1947 + (-1.0))) + 1.0;
    float _1959 = exp2(log2(1.0 - (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * 5.0);
    float _1960 = 0.959999978542327880859375 - _767;
    float _1962 = 0.959999978542327880859375 - _768;
    float _1963 = 0.959999978542327880859375 - _769;
    float _1970 = 1.0 - _1923;
    float _1981 = (0.5 / (((_1938 * ((_1937 * _1970) + _1923)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _1970) + _1923) * _1937))) * _1937;
    float _3867 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1983 = (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1947 / ((_1951 * _1951) * 3.141590118408203125));
    uint _1997 = _1843 + 9u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1877].w)) * _671) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1877].x + _696;
    float _2011 = cbLight._m0[_1877].y + _697;
    float _2012 = cbLight._m0[_1877].z + _698;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1877].xyz));
    float _3878 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _2024 = dot(vec3(_668, _669, _670), vec3(_2017, _2018, _2019));
    float _3889 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2027 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _2028 = dot(vec3(cbLight._m0[_1877].xyz), vec3(_2017, _2018, _2019));
    float _3900 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = _2009 * _2009;
    float _2036 = ((_2027 * _2027) * (_2032 + (-1.0))) + 1.0;
    float _2043 = exp2(log2(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * 5.0);
    float _2050 = 1.0 - _2009;
    float _2060 = (0.5 / (((_1938 * ((_2023 * _2050) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_1938 * _2050) + _2009) * _2023))) * _2023;
    float _3911 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_2032 / ((_2036 * _2036) * 3.141590118408203125));
    float _2072 = (((((_2043 * _1960) + _770) * cbLight._m0[_1997].x) * _2062) * _1860) + ((((cbLight._m0[_1909].x * _1835) * ((_1959 * _1960) + _770)) * _1983) * _1873);
    float _2073 = (((((_2043 * _1962) + _772) * cbLight._m0[_1997].y) * _2062) * _1860) + ((((cbLight._m0[_1909].y * _1836) * ((_1959 * _1962) + _772)) * _1983) * _1873);
    float _2074 = (((((_2043 * _1963) + _773) * cbLight._m0[_1997].z) * _2062) * _1860) + ((((cbLight._m0[_1909].z * _1837) * ((_1959 * _1963) + _773)) * _1983) * _1873);
    float _2189;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    float _2199;
    if (_1841.y == 0u)
    {
        float _2129 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2130 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2129;
        float _2131 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2129;
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2129;
        uvec4 _2144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2145 = _2144.x;
        uint _2156 = uint((float(_2144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _2145))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _2145)));
        float _2166 = (log2(_2132 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2167 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        uint _2170 = uint(isnan(14.0) ? _2167 : (isnan(_2167) ? 14.0 : min(_2167, 14.0)));
        uvec4 _2175 = texelFetch(g_lightClusterGridBuffer, int(((_2170 << 2u) + (_2156 << 6u)) >> 2u));
        uint _2176 = _2175.x;
        uint _2177 = _2144.z;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        if (((((1u << ((_2177 >> 4u) & 15u)) + 4294967295u) & _2176) == 0u) || ((_2177 & 240u) == 0u))
        {
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
        }
        else
        {
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2294;
            float _2459 = 0.0;
            float _2460 = 0.0;
            float _2461 = 0.0;
            float _2462 = 0.0;
            float _2463 = 0.0;
            float _2464 = 0.0;
            uint _2465 = 0u;
            uint _2474;
            bool _2475;
            for (;;)
            {
                _2474 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2465 << 2u)) >> 2u)).x;
                _2475 = _2474 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2475)
                {
                    frontier_phi_74_pred = _2462;
                    frontier_phi_74_pred_1 = _2461;
                    frontier_phi_74_pred_2 = _2460;
                    frontier_phi_74_pred_3 = _2459;
                    frontier_phi_74_pred_4 = _2463;
                    frontier_phi_74_pred_5 = _2464;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2459;
                    _2635 = _2460;
                    _2636 = _2461;
                    _2637 = _2462;
                    _2638 = _2463;
                    _2639 = _2464;
                    _2640 = _2474;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2465 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2130;
                        float _2701 = _2660.y - _2131;
                        float _2702 = _2660.z - _2132;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_725, _728, _731), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _3932 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2130;
                        float _2736 = (-0.0) - _2131;
                        float _2737 = (-0.0) - _2132;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _801;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_725, _728, _731), vec3(_2742, _2743, _2744));
                        float _3948 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2777 = dot(vec3(_725, _728, _731), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _3959 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _3970 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _3981 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2543 = (_2731 * _2679.x) + _2637;
                        _2544 = (_2731 * _2679.y) + _2638;
                        _2545 = (_2731 * _2679.z) + _2639;
                        _2540 = (_2812 * _2696.x) + _2634;
                        _2541 = (_2812 * _2696.y) + _2635;
                        _2542 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2540;
                            _2635 = _2541;
                            _2636 = _2542;
                            _2637 = _2543;
                            _2638 = _2544;
                            _2639 = _2545;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_74_pred = _2543;
                    frontier_phi_74_pred_1 = _2542;
                    frontier_phi_74_pred_2 = _2541;
                    frontier_phi_74_pred_3 = _2540;
                    frontier_phi_74_pred_4 = _2544;
                    frontier_phi_74_pred_5 = _2545;
                }
                _2290 = frontier_phi_74_pred;
                _2288 = frontier_phi_74_pred_1;
                _2286 = frontier_phi_74_pred_2;
                _2284 = frontier_phi_74_pred_3;
                _2292 = frontier_phi_74_pred_4;
                _2294 = frontier_phi_74_pred_5;
                uint _2466 = _2465 + 1u;
                if (_2466 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2459 = _2284;
                    _2460 = _2286;
                    _2461 = _2288;
                    _2462 = _2290;
                    _2463 = _2292;
                    _2464 = _2294;
                    _2465 = _2466;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
        }
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.z;
        uint _2300 = (_2298 >> 8u) & 15u;
        float _2427;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        if (((4294967295u << _2300) & _2176) == 0u)
        {
            _2427 = _2283;
            _2429 = _2285;
            _2431 = _2287;
            _2433 = _2289;
            _2435 = _2291;
            _2437 = _2293;
        }
        else
        {
            float _2452 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
            float _2453 = _2452 * _2130;
            float _2454 = _2452 * _2131;
            float _2455 = _2452 * _2132;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2300 < ((_2298 >> 12u) & 15u))
            {
                float _2428;
                float _2430;
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2617 = _2283;
                float _2618 = _2285;
                float _2619 = _2287;
                float _2620 = _2289;
                float _2621 = _2291;
                float _2622 = _2293;
                uint _2623 = _2300;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2170 << 5u) + (_2156 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2633)
                    {
                        frontier_phi_83_pred = _2620;
                        frontier_phi_83_pred_1 = _2619;
                        frontier_phi_83_pred_2 = _2618;
                        frontier_phi_83_pred_3 = _2617;
                        frontier_phi_83_pred_4 = _2622;
                        frontier_phi_83_pred_5 = _2621;
                    }
                    else
                    {
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _2851 = _2617;
                        float _2852 = _2618;
                        float _2853 = _2619;
                        float _2854 = _2620;
                        float _2855 = _2621;
                        float _2856 = _2622;
                        uint _2857 = _2632;
                        uint _2858;
                        vec4 _2883;
                        float _2884;
                        vec4 _2899;
                        vec3 _2911;
                        vec4 _2926;
                        vec4 _2941;
                        float _2987;
                        bool _2988;
                        for (;;)
                        {
                            uint _2868 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2857));
                            _2858 = (_2857 + 4294967295u) & _2857;
                            uint _2870 = _2868 * 40u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2884 = _2883.w;
                            uint _2886 = (_2868 * 40u) + 4u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2868 * 40u) + 8u;
                            _2911 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x));
                            uint _2913 = (_2868 * 40u) + 16u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2928 = (_2868 * 40u) + 20u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2868 * 40u) + 24u;
                            vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2962 = (_2868 * 40u) + 28u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            _2987 = fma(_2132, _2975.z, fma(_2131, _2975.y, _2975.x * _2130)) + _2975.w;
                            _2988 = !((fma(_2132, _2956.z, fma(_2131, _2956.y, _2956.x * _2130)) + _2956.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2988)
                            {
                                float _3015 = _2883.x - _2130;
                                float _3016 = _2883.y - _2131;
                                float _3017 = _2883.z - _2132;
                                float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                                float _3021 = inversesqrt(_3018);
                                float _3022 = _3021 * _3015;
                                float _3023 = _3021 * _3016;
                                float _3024 = _3021 * _3017;
                                float _3028 = 1.0 - (_3018 / (_2884 * _2884));
                                float _3992 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                                float _3029 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                                float _3033 = sqrt(_3018) * _2899.w;
                                float _3035 = 1.39999997615814208984375 / (_3033 + 1.39999997615814208984375);
                                float _3036 = _3035 * _3035;
                                float _3039 = ((1.0 - _3036) * dot(vec3(_3022, _3023, _3024), vec3(_725, _728, _731))) + _3036;
                                float _3042 = _3033 * _3033;
                                float _3046 = (fma(_2132, _2926.z, fma(_2131, _2926.y, _2926.x * _2130)) + _2926.w) / _2987;
                                float _3047 = (fma(_2132, _2941.z, fma(_2131, _2941.y, _2941.x * _2130)) + _2941.w) / _2987;
                                float _3051 = 1.0 - dot(vec2(_3046, _3047), vec2(_3046, _3047));
                                float _4008 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _3053 = _3052 * (((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3029) / ((_3042 * 0.699999988079071044921875) + 1.0));
                                float _3065 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                                float _3066 = 1.0 - _801;
                                float _3073 = sqrt(1.0 - ((1.0 - (_3066 * _3066)) * (1.0 - (_3065 * _3065))));
                                float _3074 = _3073 * _3073;
                                float _3075 = _3074 * _3074;
                                float _3076 = _3022 - _2453;
                                float _3077 = _3023 - _2454;
                                float _3078 = _3024 - _2455;
                                float _3082 = inversesqrt(dot(vec3(_3076, _3077, _3078), vec3(_3076, _3077, _3078)));
                                float _3086 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2453, (-0.0) - _2454, (-0.0) - _2455));
                                float _4019 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3089 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3090 = dot(vec3(_725, _728, _731), vec3(_3082 * _3076, _3082 * _3077, _3082 * _3078));
                                float _4030 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3093 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3097 = ((_3093 * _3093) * (_3075 + (-1.0))) + 1.0;
                                float _3098 = _3035 * _3074;
                                float _3099 = _3098 * _3098;
                                float _3105 = ((1.0 - _3099) * dot(vec3(_725, _728, _731), vec3(_3022, _3023, _3024))) + _3099;
                                float _4041 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3106 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3107 = 1.0 - _3074;
                                float _3117 = (0.5 / (((_3106 * ((_3089 * _3107) + _3074)) + 9.9999999392252902907785028219223e-09) + (((_3106 * _3107) + _3074) * _3089))) * _3106;
                                float _4052 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3127 = (_3052 * _3029) * (((_3075 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_3097 * _3097) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3053 * _2899.x;
                                frontier_phi_89_pred_1 = _3127 * _2911.z;
                                frontier_phi_89_pred_2 = _3127 * _2911.y;
                                frontier_phi_89_pred_3 = _3127 * _2911.x;
                                frontier_phi_89_pred_4 = _3053 * _2899.z;
                                frontier_phi_89_pred_5 = _3053 * _2899.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3134 = frontier_phi_89_pred;
                            _3133 = frontier_phi_89_pred_1;
                            _3132 = frontier_phi_89_pred_2;
                            _3131 = frontier_phi_89_pred_3;
                            _3136 = frontier_phi_89_pred_4;
                            _3135 = frontier_phi_89_pred_5;
                            _2841 = _3134 + _2854;
                            _2842 = _3135 + _2855;
                            _2843 = _3136 + _2856;
                            _2838 = _3131 + _2851;
                            _2839 = _3132 + _2852;
                            _2840 = _3133 + _2853;
                            if (_2858 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2858;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2841;
                        frontier_phi_83_pred_1 = _2840;
                        frontier_phi_83_pred_2 = _2839;
                        frontier_phi_83_pred_3 = _2838;
                        frontier_phi_83_pred_4 = _2843;
                        frontier_phi_83_pred_5 = _2842;
                    }
                    _2434 = frontier_phi_83_pred;
                    _2432 = frontier_phi_83_pred_1;
                    _2430 = frontier_phi_83_pred_2;
                    _2428 = frontier_phi_83_pred_3;
                    _2438 = frontier_phi_83_pred_4;
                    _2436 = frontier_phi_83_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2428;
                        _2618 = _2430;
                        _2619 = _2432;
                        _2620 = _2434;
                        _2621 = _2436;
                        _2622 = _2438;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2438;
                frontier_phi_65_66_ladder_1 = _2436;
                frontier_phi_65_66_ladder_2 = _2432;
                frontier_phi_65_66_ladder_3 = _2430;
                frontier_phi_65_66_ladder_4 = _2434;
                frontier_phi_65_66_ladder_5 = _2428;
            }
            else
            {
                frontier_phi_65_66_ladder = _2293;
                frontier_phi_65_66_ladder_1 = _2291;
                frontier_phi_65_66_ladder_2 = _2287;
                frontier_phi_65_66_ladder_3 = _2285;
                frontier_phi_65_66_ladder_4 = _2289;
                frontier_phi_65_66_ladder_5 = _2283;
            }
            _2427 = frontier_phi_65_66_ladder_5;
            _2429 = frontier_phi_65_66_ladder_3;
            _2431 = frontier_phi_65_66_ladder_2;
            _2433 = frontier_phi_65_66_ladder_4;
            _2435 = frontier_phi_65_66_ladder_1;
            _2437 = frontier_phi_65_66_ladder;
        }
        float _2442 = isnan(1.0) ? _785 : (isnan(_785) ? 1.0 : min(_785, 1.0));
        _2189 = (_2442 * _2433) + _1905;
        _2191 = (_2442 * _2435) + _1906;
        _2193 = (_2442 * _2437) + _1907;
        _2195 = ((_2427 * _770) * _2442) + _2072;
        _2197 = ((_2429 * _772) * _2442) + _2073;
        _2199 = ((_2431 * _773) * _2442) + _2074;
    }
    else
    {
        _2189 = _1905;
        _2191 = _1906;
        _2193 = _1907;
        _2195 = _2072;
        _2197 = _2073;
        _2199 = _2074;
    }
    uint _2205 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _4068 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4079 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4090 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _2230 = (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2189 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _785))) + ((_2195 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2205].x * ((_589 * ((_545 - _470) - (_545 * _290))) + _470));
    float _2232 = ((cbInstanceData._m0[_2205].y * ((_589 * ((_546 - _471) - (_546 * _290))) + _471)) + ((_2197 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2191 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _785)));
    float _2234 = ((cbInstanceData._m0[_2205].z * ((_589 * ((_547 - _472) - (_547 * _290))) + _472)) + ((_2199 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1594)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2193 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _785)));
    uint _2238 = _744 + 6u;
    float _2246 = _704 / cbSceneParam._m0[86u].x;
    float _2247 = _705 / cbSceneParam._m0[86u].y;
    vec4 _2261 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2263 = _2261.x;
    float _2264 = _2261.y;
    float _2265 = _2261.z;
    float _2266 = _2261.w;
    float _2346;
    float _2348;
    float _2350;
    float _2352;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2308 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2309 = _2308 / _691;
        float _2320 = _2309 * _263;
        float _2321 = _264 * _2309;
        float _2322 = (-0.0) - _2321;
        float _2323 = _2309 * _265;
        float _2325 = (cbSceneParam._m0[77u].w * _2322) / _2308;
        float _2326 = _2325 + cbSceneParam._m0[79u].w;
        float _2327 = cbSceneParam._m0[79u].w - _2321;
        float _2333 = sqrt(((_2320 * _2320) + (_2321 * _2321)) + (_2323 * _2323));
        float _2336 = (1.0 - (cbSceneParam._m0[77u].w / _2308)) * _2333;
        float _2342 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2344 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2553;
        if (abs((_2322 - _2325) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2553 = ((((_2326 > 0.0) ? exp2(_2342 * _2326) : (2.0 - exp2(_2344 * _2326))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2336;
        }
        else
        {
            float _2488 = 1.0 / cbSceneParam._m0[80u].x;
            float _2489 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : max(_2326, _2327));
            float _2490 = isnan(_2327) ? _2326 : (isnan(_2326) ? _2327 : min(_2326, _2327));
            float _2499 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : min(_2489, 0.0));
            float _2500 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : min(_2490, 0.0));
            _2553 = ((abs(_2333 / _2322) * cbSceneParam._m0[80u].y) * ((((_2499 - _2500) * 2.0) - ((exp2(_2342 * (isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0)))) - exp2(_2342 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0))))) * _2488)) - ((exp2(_2344 * _2499) - exp2(_2344 * _2500)) * _2488))) + (_2336 * cbSceneParam._m0[80u].z);
        }
        vec4 _2555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2246, _2247, 1.0), 0.0);
        float _2564 = exp2((_2553 * (-1.44269502162933349609375)) * (1.0 - _2555.w));
        float _2565 = log2(_2564);
        float _2581 = log2(_2266);
        _2346 = (exp2(_2581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].x)) * _2555.x) / cbSceneParam._m0[78u].x)) + _2263;
        _2348 = (exp2(_2581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].y)) * _2555.y) / cbSceneParam._m0[78u].y)) + _2264;
        _2350 = (exp2(_2581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2565 * cbSceneParam._m0[78u].z)) * _2555.z) / cbSceneParam._m0[78u].z)) + _2265;
        _2352 = _2564 * _2266;
    }
    else
    {
        _2346 = _2263;
        _2348 = _2264;
        _2350 = _2265;
        _2352 = _2266;
    }
    float _2364 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2365 = _2364 == 3.0;
    float _2366 = log2(_2352);
    float _2373 = exp2(_2366 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0)));
    float _2374 = exp2(_2366 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0)));
    float _2375 = exp2(_2366 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0)));
    float _2384 = (_2364 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2384 * (_2365 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2346)));
    SV_Target.y = _2384 * (_2365 ? _2374 : (_2374 + (cbSceneParam._m0[72u].w * _2348)));
    SV_Target.z = _2384 * (_2365 ? _2375 : (_2375 + (cbSceneParam._m0[72u].w * _2350)));
    SV_Target.w = cbInstanceData._m0[_2238].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2238].w;
}


