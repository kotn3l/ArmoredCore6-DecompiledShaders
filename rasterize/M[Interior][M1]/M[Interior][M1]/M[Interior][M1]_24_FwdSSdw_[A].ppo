#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1084;
float _3233;
float _3234;
float _3235;
float _3236;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _397 = ((_391 * _385) + (_359 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _398 = ((_391 * _386) + (_360 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    float _418 = (_394 > 0.0) ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_399 + (-0.5)) + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_400 + (-0.5)) + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    float _476 = 0.5 - (_292 * 0.5);
    float _483 = ((((_458 - (_458 * _292)) * cbMtdParam._m0[9u].x) - _305) * _476) + _305;
    float _484 = ((((_459 - (_459 * _292)) * cbMtdParam._m0[9u].y) - _307) * _476) + _307;
    float _485 = (((cbMtdParam._m0[9u].z * (_460 - (_460 * _292))) - _309) * _476) + _309;
    vec4 _497 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _499 = _497.x;
    vec4 _511 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _515 = _511.z;
    float _518 = (_511.x * 2.0) + (-1.0);
    float _519 = (_511.y * 2.0) + (-1.0);
    float _520 = dot(vec2(_518, _519), vec2(_518, _519));
    float _3255 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0))));
    float _526 = _515 * _292;
    float _533 = (cbMtdParam._m0[15u].w * ((_331 - _526) + ((_515 - _331) * _292))) + _526;
    float _537 = (cbMtdParam._m0[16u].x * _359) + _518;
    float _538 = (cbMtdParam._m0[16u].x * _360) + _519;
    float _541 = fma(_525, _201, fma(_538, _208, _537 * _194));
    float _544 = fma(_525, _202, fma(_538, _209, _537 * _195));
    float _547 = fma(_525, _203, fma(_538, _210, _537 * _196));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3266 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _555 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3288 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3299 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3310 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _559 = isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0));
    float _575 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _579 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _580 = _265 * _579;
    float _581 = _266 * _579;
    float _582 = _267 * _579;
    vec4 _587 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _589 = _587.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _765 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _771 = (cbMatDynParam._m0[5u].x * _765) + cbMatDynParam._m0[5u].y;
        float _3321 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _776 = (cbMatDynParam._m0[5u].z * _765) + cbMatDynParam._m0[5u].w;
        float _3332 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) - _772)) + _772) < ((_589 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _602 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _603 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _622 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _625 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _628 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _641 = uint(roundEven(NORMAL.w)) * 13u;
    uint _643 = _641 + 9u;
    uint _644 = _643 + uint(cbMatDynParam._m0[0u].w);
    float _650 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0)))) * cbInstanceData._m0[_644].x;
    float _651 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0)))) * cbInstanceData._m0[_644].y;
    float _652 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0)))) * cbInstanceData._m0[_644].z;
    float _3343 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
    float _3354 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _654 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
    float _3365 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _656 = 1.0 - _559;
    float _657 = _653 * _656;
    float _658 = _654 * _656;
    float _659 = _655 * _656;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _559;
    float _665 = (_654 + (-0.039999999105930328369140625)) * _559;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _559;
    float _667 = _664 + 0.039999999105930328369140625;
    float _669 = _665 + 0.039999999105930328369140625;
    float _670 = _666 + 0.039999999105930328369140625;
    vec4 _679 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _602, cbSceneParam._m0[86u].y * _603));
    float _682 = _679.x * TEXCOORD.z;
    float _683 = dot(vec3(_552, _553, _554), vec3(_580, _581, _582));
    float _686 = _683 * 2.0;
    float _690 = (_686 * _552) - _580;
    float _691 = (_686 * _553) - _581;
    float _692 = (_686 * _554) - _582;
    float _696 = abs(dot(vec3(_580, _581, _582), vec3(_552, _553, _554)));
    float _3376 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _698 = sqrt(_555);
    float _711 = exp2((_698 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_698 * 3.0));
    float _717 = (1.0 - _711) * ((_698 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _718 = _711 * _698;
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1083;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _810 = fma(_754, cbModelParam._m0[26u].z, fma(_750, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _746));
        float _814 = fma(_754, cbModelParam._m0[27u].z, fma(_750, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _746));
        float _818 = fma(_754, cbModelParam._m0[28u].z, fma(_750, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _746));
        float _841 = _746 + _552;
        float _842 = _750 + _553;
        float _843 = _754 + _554;
        float _853 = fma(_843, cbModelParam._m0[26u].z, fma(_842, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _841)) - _810;
        float _854 = fma(_843, cbModelParam._m0[27u].z, fma(_842, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _841)) - _814;
        float _855 = fma(_843, cbModelParam._m0[28u].z, fma(_842, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _841)) - _818;
        float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
        float _872 = ((_859 * _853) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_810 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _873 = ((_859 * _854) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_814 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _874 = ((_859 * _855) / cbModelParam._m0[34u].z) + ((((((_818 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_872, _873, _874), 0.0);
        float _911 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_877.x + (-0.5));
        float _913 = _911 * (_877.y + (-0.5));
        float _914 = _911 * (_877.z + (-0.5));
        float _921 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_884.x + (-0.5));
        float _923 = _921 * (_884.y + (-0.5));
        float _924 = _921 * (_884.z + (-0.5));
        float _931 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_891.x + (-0.5));
        float _933 = _931 * (_891.y + (-0.5));
        float _934 = _931 * (_891.z + (-0.5));
        float _941 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_898.x + (-0.5));
        float _943 = _941 * (_898.y + (-0.5));
        float _944 = _941 * (_898.z + (-0.5));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = _912 * 0.5;
        float _949 = _922 * 0.5;
        float _950 = _932 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _965 = (dot(vec3(_552, _553, _554), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _975 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3424 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_977 + 1.0))) + _982) * _945;
        float _992 = _913 * 0.5;
        float _993 = _923 * 0.5;
        float _994 = _933 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_552, _553, _554), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3435 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3446 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3457 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0))) * (_1019 + 1.0))) + _1024) * _946;
        float _1034 = _914 * 0.5;
        float _1035 = _924 * 0.5;
        float _1036 = _934 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_552, _553, _554), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3490 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1061 + 1.0))) + _1066) * _947;
        _1083 = _914;
        _1085 = _913;
        _1086 = _912;
        _1087 = _924;
        _1088 = _923;
        _1089 = _922;
        _1090 = _934;
        _1091 = _933;
        _1092 = _932;
        _1093 = _947;
        _1094 = _946;
        _1095 = _945;
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1097 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1098 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _1084;
        _1085 = _1084;
        _1086 = _1084;
        _1087 = _1084;
        _1088 = _1084;
        _1089 = _1084;
        _1090 = _1084;
        _1091 = _1084;
        _1092 = _1084;
        _1093 = _1084;
        _1094 = _1084;
        _1095 = _1084;
        _1096 = 0.0;
        _1097 = 0.0;
        _1098 = 0.0;
    }
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1127 = fma(_754, cbModelParam._m0[30u].z, fma(_750, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _746));
        float _1131 = fma(_754, cbModelParam._m0[31u].z, fma(_750, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _746));
        float _1135 = fma(_754, cbModelParam._m0[32u].z, fma(_750, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _746));
        float _1158 = _746 + _552;
        float _1159 = _750 + _553;
        float _1160 = _754 + _554;
        float _1170 = fma(_1160, cbModelParam._m0[30u].z, fma(_1159, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1158)) - _1127;
        float _1171 = fma(_1160, cbModelParam._m0[31u].z, fma(_1159, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1158)) - _1131;
        float _1172 = fma(_1160, cbModelParam._m0[32u].z, fma(_1159, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1158)) - _1135;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1127 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1131 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[35u].z) + ((((((_1135 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1226 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1193.x + (-0.5));
        float _1228 = _1226 * (_1193.y + (-0.5));
        float _1229 = _1226 * (_1193.z + (-0.5));
        float _1236 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1200.x + (-0.5));
        float _1238 = _1236 * (_1200.y + (-0.5));
        float _1239 = _1236 * (_1200.z + (-0.5));
        float _1246 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1207.x + (-0.5));
        float _1248 = _1246 * (_1207.y + (-0.5));
        float _1249 = _1246 * (_1207.z + (-0.5));
        float _1256 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1214.x + (-0.5));
        float _1258 = _1256 * (_1214.y + (-0.5));
        float _1259 = _1256 * (_1214.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_552, _553, _554), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3553 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1290 + 1.0))) + _1295) * _1260;
        float _1305 = _1228 * 0.5;
        float _1306 = _1238 * 0.5;
        float _1307 = _1248 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_552, _553, _554), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3586 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1332 + 1.0))) + _1337) * _1261;
        float _1347 = _1229 * 0.5;
        float _1348 = _1239 * 0.5;
        float _1349 = _1249 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_552, _553, _554), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _3619 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1374 + 1.0))) + _1379) * _1262;
        _1396 = _1229;
        _1397 = _1228;
        _1398 = _1227;
        _1399 = _1239;
        _1400 = _1238;
        _1401 = _1237;
        _1402 = _1249;
        _1403 = _1248;
        _1404 = _1247;
        _1405 = _1262;
        _1406 = _1261;
        _1407 = _1260;
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1084;
        _1397 = _1084;
        _1398 = _1084;
        _1399 = _1084;
        _1400 = _1084;
        _1401 = _1084;
        _1402 = _1084;
        _1403 = _1084;
        _1404 = _1084;
        _1405 = _1084;
        _1406 = _1084;
        _1407 = _1084;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1097)) + _1097;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1098)) + _1098;
    float _1443 = fma(_1422, cbSceneParam._m0[89u].z, fma(_1421, cbSceneParam._m0[89u].y, _1420 * cbSceneParam._m0[89u].x));
    float _1446 = fma(_1422, cbSceneParam._m0[90u].z, fma(_1421, cbSceneParam._m0[90u].y, _1420 * cbSceneParam._m0[90u].x));
    float _1449 = fma(_1422, cbSceneParam._m0[91u].z, fma(_1421, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1420));
    float _1464 = _690 * 0.5;
    float _1465 = _691 * 0.5;
    float _1466 = _692 * 0.5;
    float _1467 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1470 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1473 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1507;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1480 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1083, _1087, _1090, _1093));
        float _1484 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1085, _1088, _1091, _1094));
        float _1488 = dot(vec4(_1464, _1465, _1466, 1.0), vec4(_1086, _1089, _1092, _1095));
        float _1495 = dot(vec4(cbModelParam._m0[39u]), vec4(_1464, _1465, _1466, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1495) ? 0.0 : (isnan(0.0) ? _1495 : max(0.0, _1495))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1518;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1509 = dot(vec4(cbModelParam._m0[40u]), vec4(_1464, _1465, _1466, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)), isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1509) ? 0.0 : (isnan(0.0) ? _1509 : max(0.0, _1509))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1522 = (_1518 * cbModelParam._m0[1u].x) + (_1507 * (1.0 - cbModelParam._m0[1u].x));
    float _1532 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1533 = isnan(_1532) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1532 : min(cbModelParam._m0[25u].z, _1532));
    float _1614;
    float _1616;
    float _1618;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1581 = fma(_754, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746)) + cbModelParam._m0[13u].w;
        float _1585 = fma(_754, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746)) + cbModelParam._m0[14u].w;
        float _1589 = fma(_754, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746)) + cbModelParam._m0[15u].w;
        float _1592 = fma(_692, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _690));
        float _1595 = fma(_692, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _690));
        float _1598 = fma(_692, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _690));
        float _1626;
        if (_1592 > 0.0)
        {
            _1626 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1626 = frontier_phi_25_23_ladder;
        }
        float _2009;
        if (_1595 > 0.0)
        {
            _2009 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _2009 = frontier_phi_34_30_ladder;
        }
        float _2317;
        if (_1598 > 0.0)
        {
            _2317 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2317 = frontier_phi_48_41_ladder;
        }
        float _2319 = isnan(_2009) ? _1626 : (isnan(_1626) ? _2009 : min(_1626, _2009));
        float _2320 = isnan(_2317) ? _2319 : (isnan(_2319) ? _2317 : min(_2319, _2317));
        float _2324 = (_2320 * _1592) + _1581;
        float _2325 = (_2320 * _1595) + _1585;
        float _2326 = (_2320 * _1598) + _1589;
        float _2327 = _2320 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2327;
        float _2330 = _2327 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2326 > _2330) || ((_2326 < _2328) || ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 < _2328) || (_2324 > _2330))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2468 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2326, cbModelParam._m0[9u].z, fma(_2325, cbModelParam._m0[9u].y, _2324 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2326, cbModelParam._m0[10u].z, fma(_2325, cbModelParam._m0[10u].y, _2324 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2326, cbModelParam._m0[11u].z, fma(_2325, cbModelParam._m0[11u].y, _2324 * cbModelParam._m0[11u].x))), _1533);
            frontier_phi_24_48_ladder = _2468.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2468.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2468.x * cbModelParam._m0[1u].y;
        }
        _1614 = frontier_phi_24_48_ladder_2;
        _1616 = frontier_phi_24_48_ladder_1;
        _1618 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1602 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_690, _691, _692), _1533);
        _1614 = _1602.x * cbModelParam._m0[1u].y;
        _1616 = _1602.y * cbModelParam._m0[1u].y;
        _1618 = _1602.z * cbModelParam._m0[1u].y;
    }
    float _1622 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1622 : min(cbModelParam._m0[25u].w, _1622));
    float _1712;
    float _1714;
    float _1716;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1676 = fma(_754, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746)) + cbModelParam._m0[21u].w;
        float _1680 = fma(_754, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746)) + cbModelParam._m0[22u].w;
        float _1684 = fma(_754, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746)) + cbModelParam._m0[23u].w;
        float _1687 = fma(_692, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _690));
        float _1690 = fma(_692, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _690));
        float _1693 = fma(_692, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _690));
        float _2014;
        if (_1687 > 0.0)
        {
            _2014 = abs((1.0 - _1676) / _1687);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1676 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2014 = frontier_phi_36_32_ladder;
        }
        float _2343;
        if (_1690 > 0.0)
        {
            _2343 = abs((1.0 - _1680) / _1690);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1690 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1680 + 1.0) / _1690);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2343 = frontier_phi_50_43_ladder;
        }
        float _2533;
        if (_1693 > 0.0)
        {
            _2533 = abs((1.0 - _1684) / _1693);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1684 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2533 = frontier_phi_68_61_ladder;
        }
        float _2535 = isnan(_2343) ? _2014 : (isnan(_2014) ? _2343 : min(_2014, _2343));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _1687) + _1676;
        float _2541 = (_2536 * _1690) + _1680;
        float _2542 = (_2536 * _1693) + _1684;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2544 = (-1.0) - _2543;
        float _2546 = _2543 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2542 > _2546) || ((_2542 < _2544) || ((_2541 > _2546) || ((_2541 < _2544) || ((_2540 < _2544) || (_2540 > _2546))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2784 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2542, cbModelParam._m0[17u].z, fma(_2541, cbModelParam._m0[17u].y, _2540 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2542, cbModelParam._m0[18u].z, fma(_2541, cbModelParam._m0[18u].y, _2540 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2542, cbModelParam._m0[19u].z, fma(_2541, cbModelParam._m0[19u].y, _2540 * cbModelParam._m0[19u].x))), _1623);
            frontier_phi_33_68_ladder = _2784.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2784.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2784.x * cbModelParam._m0[1u].z;
        }
        _1712 = frontier_phi_33_68_ladder_2;
        _1714 = frontier_phi_33_68_ladder;
        _1716 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_690, _691, _692), _1623);
        _1712 = _1696.x * cbModelParam._m0[1u].z;
        _1714 = _1696.y * cbModelParam._m0[1u].z;
        _1716 = _1696.z * cbModelParam._m0[1u].z;
    }
    float _1729 = (((_717 * _667) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1712 - _1614)) + _1614);
    float _1731 = (((_717 * _669) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1714 - _1616)) + _1616);
    float _1733 = (((_717 * _670) + _718) * _682) * ((cbModelParam._m0[1u].w * (_1716 - _1618)) + _1618);
    float _1736 = fma(_1733, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1729 * cbSceneParam._m0[89u].x));
    float _1739 = fma(_1733, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1729 * cbSceneParam._m0[90u].x));
    float _1742 = fma(_1733, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, _1729 * cbSceneParam._m0[91u].x));
    vec4 _1750 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_602, _603));
    float _1752 = _1750.w;
    float _1764 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1752);
    float _1765 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1752);
    float _1766 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1752);
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_641 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1778 = _682 + (-1.0);
    float _1781 = (cbLight._m0[_1773].x * _1778) + 1.0;
    float _1782 = (cbLight._m0[_1773].y * _1778) + 1.0;
    uint _1783 = _1772 + 5u;
    float _1789 = isnan(1.0) ? _1782 : (isnan(_1782) ? 1.0 : min(_1782, 1.0));
    uint _1793 = _1772 + 4u;
    float _1802 = isnan(1.0) ? _1781 : (isnan(_1781) ? 1.0 : min(_1781, 1.0));
    uint _1806 = _1772 | 1u;
    float _1817 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_552, _553, _554));
    float _1820 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_552, _553, _554));
    float _3755 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _3766 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1825 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.3183098733425140380859375;
    float _1827 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.3183098733425140380859375;
    float _1834 = ((cbLight._m0[_1783].x * _1789) * _1827) + (((cbLight._m0[_1793].x * _1764) * _1802) * _1825);
    float _1835 = ((_1789 * cbLight._m0[_1783].y) * _1827) + (((cbLight._m0[_1793].y * _1765) * _1802) * _1825);
    float _1836 = ((_1789 * cbLight._m0[_1783].z) * _1827) + (((cbLight._m0[_1793].z * _1766) * _1802) * _1825);
    uint _1838 = _1772 + 8u;
    float _1851 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _555) * 0.949999988079071044921875);
    float _1852 = _1851 * _1851;
    float _1853 = cbLight._m0[_1772].x + _580;
    float _1854 = cbLight._m0[_1772].y + _581;
    float _1855 = cbLight._m0[_1772].z + _582;
    float _1859 = inversesqrt(dot(vec3(_1853, _1854, _1855), vec3(_1853, _1854, _1855)));
    float _1860 = _1859 * _1853;
    float _1861 = _1859 * _1854;
    float _1862 = _1859 * _1855;
    float _1863 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1772].xyz));
    float _3777 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1866 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _1867 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _1868 = dot(vec3(_552, _553, _554), vec3(_1860, _1861, _1862));
    float _3799 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1860, _1861, _1862));
    float _3810 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1852 * _1852;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * 5.0);
    float _1889 = 0.959999978542327880859375 - _664;
    float _1891 = 0.959999978542327880859375 - _665;
    float _1892 = 0.959999978542327880859375 - _666;
    float _1899 = 1.0 - _1852;
    float _1910 = (0.5 / (((_1867 * ((_1866 * _1899) + _1852)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1899) + _1852) * _1866))) * _1866;
    float _3821 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    uint _1926 = _1772 + 9u;
    float _1937 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1806].w)) * _555) * 0.949999988079071044921875);
    float _1938 = _1937 * _1937;
    float _1939 = cbLight._m0[_1806].x + _580;
    float _1940 = cbLight._m0[_1806].y + _581;
    float _1941 = cbLight._m0[_1806].z + _582;
    float _1945 = inversesqrt(dot(vec3(_1939, _1940, _1941), vec3(_1939, _1940, _1941)));
    float _1946 = _1945 * _1939;
    float _1947 = _1945 * _1940;
    float _1948 = _1945 * _1941;
    float _1949 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_1806].xyz));
    float _3832 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _1953 = dot(vec3(_552, _553, _554), vec3(_1946, _1947, _1948));
    float _3843 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1806].xyz), vec3(_1946, _1947, _1948));
    float _3854 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1938 * _1938;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1972 = exp2(log2(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * 5.0);
    float _1979 = 1.0 - _1938;
    float _1989 = (0.5 / (((_1867 * ((_1952 * _1979) + _1938)) + 9.9999999392252902907785028219223e-09) + (((_1867 * _1979) + _1938) * _1952))) * _1952;
    float _3865 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    float _2001 = (((((_1972 * _1889) + _667) * cbLight._m0[_1926].x) * _1991) * _1789) + ((((cbLight._m0[_1838].x * _1764) * ((_1888 * _1889) + _667)) * _1912) * _1802);
    float _2002 = (((((_1972 * _1891) + _669) * cbLight._m0[_1926].y) * _1991) * _1789) + ((((cbLight._m0[_1838].y * _1765) * ((_1888 * _1891) + _669)) * _1912) * _1802);
    float _2003 = (((((_1972 * _1892) + _670) * cbLight._m0[_1926].z) * _1991) * _1789) + ((((cbLight._m0[_1838].z * _1766) * ((_1888 * _1892) + _670)) * _1912) * _1802);
    float _2118;
    float _2120;
    float _2122;
    float _2124;
    float _2126;
    float _2128;
    if (_1770.y == 0u)
    {
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2058;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2058;
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2058;
        uvec4 _2073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2074 = _2073.x;
        uint _2085 = uint((float(_2073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _603) / _2074))) + floor(float(uint(cbSceneParam._m0[85u].x * _602) / _2074)));
        float _2095 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2096 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        uint _2099 = uint(isnan(14.0) ? _2096 : (isnan(_2096) ? 14.0 : min(_2096, 14.0)));
        uvec4 _2104 = texelFetch(g_lightClusterGridBuffer, int(((_2099 << 2u) + (_2085 << 6u)) >> 2u));
        uint _2105 = _2104.x;
        uint _2106 = _2073.z;
        float _2196;
        float _2198;
        float _2200;
        float _2202;
        float _2204;
        float _2206;
        if (((((1u << ((_2106 >> 4u) & 15u)) + 4294967295u) & _2105) == 0u) || ((_2106 & 240u) == 0u))
        {
            _2196 = 0.0;
            _2198 = 0.0;
            _2200 = 0.0;
            _2202 = 0.0;
            _2204 = 0.0;
            _2206 = 0.0;
        }
        else
        {
            float _2197;
            float _2199;
            float _2201;
            float _2203;
            float _2205;
            float _2207;
            float _2380 = 0.0;
            float _2381 = 0.0;
            float _2382 = 0.0;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            uint _2386 = 0u;
            uint _2395;
            bool _2396;
            for (;;)
            {
                _2395 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2386 << 2u)) >> 2u)).x;
                _2396 = _2395 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2396)
                {
                    frontier_phi_63_pred = _2382;
                    frontier_phi_63_pred_1 = _2385;
                    frontier_phi_63_pred_2 = _2384;
                    frontier_phi_63_pred_3 = _2383;
                    frontier_phi_63_pred_4 = _2381;
                    frontier_phi_63_pred_5 = _2380;
                }
                else
                {
                    float _2576;
                    float _2577;
                    float _2578;
                    float _2579;
                    float _2580;
                    float _2581;
                    uint _2582;
                    _2576 = _2380;
                    _2577 = _2381;
                    _2578 = _2382;
                    _2579 = _2383;
                    _2580 = _2384;
                    _2581 = _2385;
                    _2582 = _2395;
                    float _2477;
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    for (;;)
                    {
                        uint _2586 = uint(findLSB(_2582)) + (_2386 << 5u);
                        uint _2583 = (_2582 + 4294967295u) & _2582;
                        uint _2588 = _2586 * 48u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 3u)).x));
                        uint _2608 = (_2586 * 48u) + 4u;
                        vec4 _2621 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 3u)).x));
                        uint _2627 = (_2586 * 48u) + 8u;
                        vec3 _2638 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x));
                        float _2642 = _2602.x - _2059;
                        float _2643 = _2602.y - _2060;
                        float _2644 = _2602.z - _2061;
                        float _2645 = dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644));
                        float _2648 = inversesqrt(_2645);
                        float _2649 = _2648 * _2642;
                        float _2650 = _2648 * _2643;
                        float _2651 = _2648 * _2644;
                        float _2652 = dot(vec3(_622, _625, _628), vec3(_2649, _2650, _2651));
                        float _2657 = 1.0 - (_2645 * _2602.w);
                        float _3886 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2658 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2659 = sqrt(_2645) * _2621.w;
                        float _2662 = 1.39999997615814208984375 / (_2659 + 1.39999997615814208984375);
                        float _2663 = _2662 * _2662;
                        float _2666 = ((1.0 - _2663) * _2652) + _2663;
                        float _2669 = _2659 * _2659;
                        float _2673 = ((isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0))) * _2658) / ((_2669 * 0.699999988079071044921875) + 1.0);
                        float _2677 = (-0.0) - _2059;
                        float _2678 = (-0.0) - _2060;
                        float _2679 = (-0.0) - _2061;
                        float _2683 = inversesqrt(dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679)));
                        float _2684 = _2683 * _2677;
                        float _2685 = _2683 * _2678;
                        float _2686 = _2683 * _2679;
                        float _2694 = exp2(log2(1.0 / ((_2669 * 3.5) + 5.0)) * 0.25);
                        float _2695 = 1.0 - _698;
                        float _2702 = sqrt(1.0 - ((1.0 - (_2695 * _2695)) * (1.0 - (_2694 * _2694))));
                        float _2703 = _2702 * _2702;
                        float _2704 = _2703 * _2703;
                        float _2705 = _2684 + _2649;
                        float _2706 = _2685 + _2650;
                        float _2707 = _2686 + _2651;
                        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
                        float _2715 = dot(vec3(_622, _625, _628), vec3(_2684, _2685, _2686));
                        float _3902 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2718 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
                        float _2719 = dot(vec3(_622, _625, _628), vec3(_2711 * _2705, _2711 * _2706, _2711 * _2707));
                        float _3913 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                        float _2722 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
                        float _2726 = ((_2722 * _2722) * (_2704 + (-1.0))) + 1.0;
                        float _2727 = _2662 * _2703;
                        float _2728 = _2727 * _2727;
                        float _2731 = ((1.0 - _2728) * _2652) + _2728;
                        float _3924 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2732 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
                        float _2733 = 1.0 - _2703;
                        float _2743 = (0.5 / (((_2732 * ((_2718 * _2733) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2733) + _2703) * _2718))) * _2732;
                        float _3935 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
                        float _2754 = (((_2704 * 3.1415927410125732421875) * (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) / ((_2726 * _2726) * ((_2669 * 2.1991131305694580078125) + 3.141590118408203125))) * _2658;
                        _2480 = (_2673 * _2621.x) + _2579;
                        _2481 = (_2673 * _2621.y) + _2580;
                        _2482 = (_2673 * _2621.z) + _2581;
                        _2477 = (_2754 * _2638.x) + _2576;
                        _2478 = (_2754 * _2638.y) + _2577;
                        _2479 = (_2754 * _2638.z) + _2578;
                        if (_2583 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2576 = _2477;
                            _2577 = _2478;
                            _2578 = _2479;
                            _2579 = _2480;
                            _2580 = _2481;
                            _2581 = _2482;
                            _2582 = _2583;
                        }
                    }
                    frontier_phi_63_pred = _2479;
                    frontier_phi_63_pred_1 = _2482;
                    frontier_phi_63_pred_2 = _2481;
                    frontier_phi_63_pred_3 = _2480;
                    frontier_phi_63_pred_4 = _2478;
                    frontier_phi_63_pred_5 = _2477;
                }
                _2201 = frontier_phi_63_pred;
                _2207 = frontier_phi_63_pred_1;
                _2205 = frontier_phi_63_pred_2;
                _2203 = frontier_phi_63_pred_3;
                _2199 = frontier_phi_63_pred_4;
                _2197 = frontier_phi_63_pred_5;
                uint _2387 = _2386 + 1u;
                if (_2387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2380 = _2197;
                    _2381 = _2199;
                    _2382 = _2201;
                    _2383 = _2203;
                    _2384 = _2205;
                    _2385 = _2207;
                    _2386 = _2387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2196 = _2197;
            _2198 = _2199;
            _2200 = _2201;
            _2202 = _2203;
            _2204 = _2205;
            _2206 = _2207;
        }
        uvec4 _2210 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2211 = _2210.z;
        uint _2213 = (_2211 >> 8u) & 15u;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        if (((4294967295u << _2213) & _2105) == 0u)
        {
            _2348 = _2196;
            _2350 = _2198;
            _2352 = _2200;
            _2354 = _2202;
            _2356 = _2204;
            _2358 = _2206;
        }
        else
        {
            float _2373 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _2374 = _2373 * _2059;
            float _2375 = _2373 * _2060;
            float _2376 = _2373 * _2061;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2213 < ((_2211 >> 12u) & 15u))
            {
                float _2349;
                float _2351;
                float _2353;
                float _2355;
                float _2357;
                float _2359;
                float _2559 = _2196;
                float _2560 = _2198;
                float _2561 = _2200;
                float _2562 = _2202;
                float _2563 = _2204;
                float _2564 = _2206;
                uint _2565 = _2213;
                uint _2574;
                bool _2575;
                for (;;)
                {
                    _2574 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2565 << 2u)) >> 2u)).x;
                    _2575 = _2574 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2575)
                    {
                        frontier_phi_77_pred = _2564;
                        frontier_phi_77_pred_1 = _2563;
                        frontier_phi_77_pred_2 = _2562;
                        frontier_phi_77_pred_3 = _2561;
                        frontier_phi_77_pred_4 = _2560;
                        frontier_phi_77_pred_5 = _2559;
                    }
                    else
                    {
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _2802 = _2559;
                        float _2803 = _2560;
                        float _2804 = _2561;
                        float _2805 = _2562;
                        float _2806 = _2563;
                        float _2807 = _2564;
                        uint _2808 = _2574;
                        uint _2809;
                        vec4 _2834;
                        float _2835;
                        vec4 _2850;
                        vec3 _2862;
                        vec4 _2877;
                        vec4 _2892;
                        float _2938;
                        bool _2939;
                        for (;;)
                        {
                            uint _2819 = ((_2565 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2808));
                            _2809 = (_2808 + 4294967295u) & _2808;
                            uint _2821 = _2819 * 40u;
                            _2834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 3u)).x));
                            _2835 = _2834.w;
                            uint _2837 = (_2819 * 40u) + 4u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2819 * 40u) + 8u;
                            _2862 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x));
                            uint _2864 = (_2819 * 40u) + 16u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2879 = (_2819 * 40u) + 20u;
                            _2892 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2879)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2879 + 3u)).x));
                            uint _2894 = (_2819 * 40u) + 24u;
                            vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            uint _2913 = (_2819 * 40u) + 28u;
                            vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            _2938 = fma(_2061, _2926.z, fma(_2060, _2926.y, _2926.x * _2059)) + _2926.w;
                            _2939 = !((fma(_2061, _2907.z, fma(_2060, _2907.y, _2907.x * _2059)) + _2907.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2939)
                            {
                                float _2966 = _2834.x - _2059;
                                float _2967 = _2834.y - _2060;
                                float _2968 = _2834.z - _2061;
                                float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                                float _2972 = inversesqrt(_2969);
                                float _2973 = _2972 * _2966;
                                float _2974 = _2972 * _2967;
                                float _2975 = _2972 * _2968;
                                float _2979 = 1.0 - (_2969 / (_2835 * _2835));
                                float _3946 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _2984 = sqrt(_2969) * _2850.w;
                                float _2986 = 1.39999997615814208984375 / (_2984 + 1.39999997615814208984375);
                                float _2987 = _2986 * _2986;
                                float _2990 = ((1.0 - _2987) * dot(vec3(_2973, _2974, _2975), vec3(_622, _625, _628))) + _2987;
                                float _2993 = _2984 * _2984;
                                float _2997 = (fma(_2061, _2877.z, fma(_2060, _2877.y, _2877.x * _2059)) + _2877.w) / _2938;
                                float _2998 = (fma(_2061, _2892.z, fma(_2060, _2892.y, _2892.x * _2059)) + _2892.w) / _2938;
                                float _3002 = 1.0 - dot(vec2(_2997, _2998), vec2(_2997, _2998));
                                float _3962 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                                float _3003 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
                                float _3004 = _3003 * (((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2980) / ((_2993 * 0.699999988079071044921875) + 1.0));
                                float _3016 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                                float _3017 = 1.0 - _698;
                                float _3024 = sqrt(1.0 - ((1.0 - (_3017 * _3017)) * (1.0 - (_3016 * _3016))));
                                float _3025 = _3024 * _3024;
                                float _3026 = _3025 * _3025;
                                float _3027 = _2973 - _2374;
                                float _3028 = _2974 - _2375;
                                float _3029 = _2975 - _2376;
                                float _3033 = inversesqrt(dot(vec3(_3027, _3028, _3029), vec3(_3027, _3028, _3029)));
                                float _3037 = dot(vec3(_622, _625, _628), vec3((-0.0) - _2374, (-0.0) - _2375, (-0.0) - _2376));
                                float _3973 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3040 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
                                float _3041 = dot(vec3(_622, _625, _628), vec3(_3033 * _3027, _3033 * _3028, _3033 * _3029));
                                float _3984 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
                                float _3048 = ((_3044 * _3044) * (_3026 + (-1.0))) + 1.0;
                                float _3049 = _2986 * _3025;
                                float _3050 = _3049 * _3049;
                                float _3056 = ((1.0 - _3050) * dot(vec3(_622, _625, _628), vec3(_2973, _2974, _2975))) + _3050;
                                float _3995 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
                                float _3057 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
                                float _3058 = 1.0 - _3025;
                                float _3068 = (0.5 / (((_3057 * ((_3040 * _3058) + _3025)) + 9.9999999392252902907785028219223e-09) + (((_3057 * _3058) + _3025) * _3040))) * _3057;
                                float _4006 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                                float _3078 = (_3003 * _2980) * (((_3026 * 3.1415927410125732421875) * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) / ((_3048 * _3048) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3004 * _2850.x;
                                frontier_phi_83_pred_1 = _3004 * _2850.z;
                                frontier_phi_83_pred_2 = _3004 * _2850.y;
                                frontier_phi_83_pred_3 = _3078 * _2862.z;
                                frontier_phi_83_pred_4 = _3078 * _2862.y;
                                frontier_phi_83_pred_5 = _3078 * _2862.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3085 = frontier_phi_83_pred;
                            _3087 = frontier_phi_83_pred_1;
                            _3086 = frontier_phi_83_pred_2;
                            _3084 = frontier_phi_83_pred_3;
                            _3083 = frontier_phi_83_pred_4;
                            _3082 = frontier_phi_83_pred_5;
                            _2792 = _3085 + _2805;
                            _2793 = _3086 + _2806;
                            _2794 = _3087 + _2807;
                            _2789 = _3082 + _2802;
                            _2790 = _3083 + _2803;
                            _2791 = _3084 + _2804;
                            if (_2809 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2809;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2794;
                        frontier_phi_77_pred_1 = _2793;
                        frontier_phi_77_pred_2 = _2792;
                        frontier_phi_77_pred_3 = _2791;
                        frontier_phi_77_pred_4 = _2790;
                        frontier_phi_77_pred_5 = _2789;
                    }
                    _2359 = frontier_phi_77_pred;
                    _2357 = frontier_phi_77_pred_1;
                    _2355 = frontier_phi_77_pred_2;
                    _2353 = frontier_phi_77_pred_3;
                    _2351 = frontier_phi_77_pred_4;
                    _2349 = frontier_phi_77_pred_5;
                    uint _2566 = _2565 + 1u;
                    if (_2566 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2559 = _2349;
                        _2560 = _2351;
                        _2561 = _2353;
                        _2562 = _2355;
                        _2563 = _2357;
                        _2564 = _2359;
                        _2565 = _2566;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2351;
                frontier_phi_52_53_ladder_1 = _2359;
                frontier_phi_52_53_ladder_2 = _2357;
                frontier_phi_52_53_ladder_3 = _2355;
                frontier_phi_52_53_ladder_4 = _2353;
                frontier_phi_52_53_ladder_5 = _2349;
            }
            else
            {
                frontier_phi_52_53_ladder = _2198;
                frontier_phi_52_53_ladder_1 = _2206;
                frontier_phi_52_53_ladder_2 = _2204;
                frontier_phi_52_53_ladder_3 = _2202;
                frontier_phi_52_53_ladder_4 = _2200;
                frontier_phi_52_53_ladder_5 = _2196;
            }
            _2348 = frontier_phi_52_53_ladder_5;
            _2350 = frontier_phi_52_53_ladder;
            _2352 = frontier_phi_52_53_ladder_4;
            _2354 = frontier_phi_52_53_ladder_3;
            _2356 = frontier_phi_52_53_ladder_2;
            _2358 = frontier_phi_52_53_ladder_1;
        }
        float _2363 = isnan(1.0) ? _682 : (isnan(_682) ? 1.0 : min(_682, 1.0));
        _2118 = (_2363 * _2354) + _1834;
        _2120 = (_2363 * _2356) + _1835;
        _2122 = (_2363 * _2358) + _1836;
        _2124 = ((_2348 * _667) * _2363) + _2001;
        _2126 = ((_2350 * _669) * _2363) + _2002;
        _2128 = ((_2352 * _670) * _2363) + _2003;
    }
    else
    {
        _2118 = _1834;
        _2120 = _1835;
        _2122 = _1836;
        _2124 = _2001;
        _2126 = _2002;
        _2128 = _2003;
    }
    float _4022 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4033 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _4044 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _2145 = ((isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0))) * (_2118 + ((isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))) * _682))) + ((_2124 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2146 = ((isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2120 + ((isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))) * _682))) + ((_2126 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2147 = ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2122 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _682))) + ((_2128 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1522)) * cbPerFrame._m0[3u].x);
    float _2148 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    uint _2151 = _641 + 6u;
    float _2159 = _602 / cbSceneParam._m0[86u].x;
    float _2160 = _603 / cbSceneParam._m0[86u].y;
    vec4 _2174 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2159, _2160, (log2((isnan(cbSceneParam._m0[77u].w) ? _575 : (isnan(_575) ? cbSceneParam._m0[77u].w : min(_575, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2176 = _2174.x;
    float _2177 = _2174.y;
    float _2178 = _2174.z;
    float _2179 = _2174.w;
    float _2259;
    float _2261;
    float _2263;
    float _2265;
    if (_575 > cbSceneParam._m0[78u].w)
    {
        float _2221 = isnan(_575) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _575 : min(cbSceneParam._m0[80u].w, _575));
        float _2222 = _2221 / _575;
        float _2233 = _2222 * _265;
        float _2234 = _266 * _2222;
        float _2235 = (-0.0) - _2234;
        float _2236 = _2222 * _267;
        float _2238 = (cbSceneParam._m0[77u].w * _2235) / _2221;
        float _2239 = _2238 + cbSceneParam._m0[79u].w;
        float _2240 = cbSceneParam._m0[79u].w - _2234;
        float _2246 = sqrt(((_2233 * _2233) + (_2234 * _2234)) + (_2236 * _2236));
        float _2249 = (1.0 - (cbSceneParam._m0[77u].w / _2221)) * _2246;
        float _2255 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2257 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2490;
        if (abs((_2235 - _2238) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2490 = ((((_2239 > 0.0) ? exp2(_2255 * _2239) : (2.0 - exp2(_2257 * _2239))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2249;
        }
        else
        {
            float _2409 = 1.0 / cbSceneParam._m0[80u].x;
            float _2410 = isnan(_2240) ? _2239 : (isnan(_2239) ? _2240 : max(_2239, _2240));
            float _2411 = isnan(_2240) ? _2239 : (isnan(_2239) ? _2240 : min(_2239, _2240));
            float _2420 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : min(_2410, 0.0));
            float _2421 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : min(_2411, 0.0));
            _2490 = ((abs(_2246 / _2235) * cbSceneParam._m0[80u].y) * ((((_2420 - _2421) * 2.0) - ((exp2(_2255 * (isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0)))) - exp2(_2255 * (isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0))))) * _2409)) - ((exp2(_2257 * _2420) - exp2(_2257 * _2421)) * _2409))) + (_2249 * cbSceneParam._m0[80u].z);
        }
        vec4 _2492 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2159, _2160, 1.0), 0.0);
        float _2501 = exp2((_2490 * (-1.44269502162933349609375)) * (1.0 - _2492.w));
        float _2502 = log2(_2501);
        float _2518 = log2(_2179);
        _2259 = (exp2(_2518 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].x)) * _2492.x) / cbSceneParam._m0[78u].x)) + _2176;
        _2261 = (exp2(_2518 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].y)) * _2492.y) / cbSceneParam._m0[78u].y)) + _2177;
        _2263 = (exp2(_2518 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2502 * cbSceneParam._m0[78u].z)) * _2492.z) / cbSceneParam._m0[78u].z)) + _2178;
        _2265 = _2501 * _2179;
    }
    else
    {
        _2259 = _2176;
        _2261 = _2177;
        _2263 = _2178;
        _2265 = _2179;
    }
    bool _2528;
    vec4 _2275;
    vec4 _2297;
    float _2299;
    float _2303;
    float _2304;
    float _2305;
    float _2306;
    bool _2316;
    for (;;)
    {
        _2275 = cbMatDynParam._m0[0u];
        float _2277 = roundEven(_2275.y);
        bool _2278 = _2277 == 3.0;
        float _2279 = log2(_2265);
        float _2286 = exp2(_2279 * cbSceneParam._m0[78u].x) * _2148;
        float _2287 = exp2(_2279 * cbSceneParam._m0[78u].y) * _2149;
        float _2288 = exp2(_2279 * cbSceneParam._m0[78u].z) * _2150;
        float _2295 = _589 + (-0.5);
        _2297 = cbMtdParam._m0[1u];
        _2299 = _2297.y * _2295;
        float _2302 = (_2277 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2303 = _2302 * (_2278 ? _2286 : (_2286 + (cbSceneParam._m0[72u].w * _2259)));
        _2304 = _2302 * (_2278 ? _2287 : (_2287 + (cbSceneParam._m0[72u].w * _2261)));
        _2305 = _2302 * (_2278 ? _2288 : (_2288 + (cbSceneParam._m0[72u].w * _2263)));
        _2306 = _2295 * 0.999000012874603271484375;
        _2316 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2316)
        {
            if ((cbInstanceData._m0[_641 + 7u].x + _2306) < 0.5)
            {
                _2528 = true;
                break;
            }
        }
        uint _2444 = _643 + uint(_2275.w);
        if ((cbInstanceData._m0[_2444].w < 1.0) && ((cbInstanceData._m0[_2444].w + _2306) < 0.5))
        {
            _2528 = true;
            break;
        }
        if ((_2299 + 1.0) < _2297.x)
        {
            _2528 = true;
            break;
        }
        _2528 = false;
        break;
    }
    float _2759;
    if (_2528)
    {
        discard_state = true;
        _2759 = 0.0;
    }
    else
    {
        _2759 = cbInstanceData._m0[_2151].w;
    }
    SV_Target.x = _2303;
    SV_Target.y = _2304;
    SV_Target.z = _2305;
    SV_Target.w = _2759;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2151].w;
    discard_exit();
}


