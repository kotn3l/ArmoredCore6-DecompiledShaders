#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1204;
float _3392;
float _3393;
float _3394;
float _3395;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    vec4 _617 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _619 = _617.x;
    vec4 _631 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _635 = _631.z;
    float _638 = (_631.x * 2.0) + (-1.0);
    float _639 = (_631.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3434 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))));
    float _646 = _635 * _294;
    float _653 = (cbMtdParam._m0[15u].w * ((_333 - _646) + ((_635 - _333) * _294))) + _646;
    float _657 = (cbMtdParam._m0[16u].x * _361) + _638;
    float _658 = (cbMtdParam._m0[16u].x * _362) + _639;
    float _661 = fma(_645, _203, fma(_658, _210, _657 * _196));
    float _664 = fma(_645, _204, fma(_658, _211, _657 * _197));
    float _667 = fma(_645, _205, fma(_658, _212, _657 * _198));
    float _671 = inversesqrt(dot(vec3(_661, _664, _667), vec3(_661, _664, _667)));
    float _672 = _671 * _661;
    float _673 = _671 * _664;
    float _674 = _671 * _667;
    float _3445 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _675 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3467 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3478 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3489 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _679 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _695 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _699 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _700 = _267 * _699;
    float _701 = _268 * _699;
    float _702 = _269 * _699;
    vec4 _707 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _709 = _707.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _885 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _891 = (cbMatDynParam._m0[5u].x * _885) + cbMatDynParam._m0[5u].y;
        float _3500 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _896 = (cbMatDynParam._m0[5u].z * _885) + cbMatDynParam._m0[5u].w;
        float _3511 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) - _892)) + _892) < ((_709 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _742 = fma(_674, cbSceneParam._m0[5u].z, fma(_673, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _672));
    float _745 = fma(_674, cbSceneParam._m0[6u].z, fma(_673, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _672));
    float _748 = fma(_674, cbSceneParam._m0[7u].z, fma(_673, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _672));
    uint _761 = uint(roundEven(NORMAL.w)) * 13u;
    uint _763 = _761 + 9u;
    uint _764 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _770 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_764].x;
    float _771 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_764].y;
    float _772 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0)))) * cbInstanceData._m0[_764].z;
    float _3522 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _773 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _774 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _3544 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _775 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _776 = 1.0 - _679;
    float _777 = _773 * _776;
    float _778 = _774 * _776;
    float _779 = _775 * _776;
    float _784 = (_773 + (-0.039999999105930328369140625)) * _679;
    float _785 = (_774 + (-0.039999999105930328369140625)) * _679;
    float _786 = (_775 + (-0.039999999105930328369140625)) * _679;
    float _787 = _784 + 0.039999999105930328369140625;
    float _789 = _785 + 0.039999999105930328369140625;
    float _790 = _786 + 0.039999999105930328369140625;
    vec4 _799 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _802 = _799.x * TEXCOORD.z;
    float _803 = dot(vec3(_672, _673, _674), vec3(_700, _701, _702));
    float _806 = _803 * 2.0;
    float _810 = (_806 * _672) - _700;
    float _811 = (_806 * _673) - _701;
    float _812 = (_806 * _674) - _702;
    float _816 = abs(dot(vec3(_700, _701, _702), vec3(_672, _673, _674)));
    float _3555 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _818 = sqrt(_675);
    float _831 = exp2((_818 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_818 * 3.0));
    float _837 = (1.0 - _831) * ((_818 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _838 = _831 * _818;
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1203;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _930 = fma(_874, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _866));
        float _934 = fma(_874, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _866));
        float _938 = fma(_874, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _866));
        float _961 = _866 + _672;
        float _962 = _870 + _673;
        float _963 = _874 + _674;
        float _973 = fma(_963, cbModelParam._m0[26u].z, fma(_962, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961)) - _930;
        float _974 = fma(_963, cbModelParam._m0[27u].z, fma(_962, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961)) - _934;
        float _975 = fma(_963, cbModelParam._m0[28u].z, fma(_962, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961)) - _938;
        float _979 = inversesqrt(dot(vec3(_973, _974, _975), vec3(_973, _974, _975)));
        float _992 = ((_979 * _973) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_930 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _993 = ((_979 * _974) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_934 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _994 = ((_979 * _975) / cbModelParam._m0[34u].z) + ((((((_938 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_992, _993, _994), 0.0);
        float _1031 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_997.x + (-0.5));
        float _1033 = _1031 * (_997.y + (-0.5));
        float _1034 = _1031 * (_997.z + (-0.5));
        float _1041 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1004.x + (-0.5));
        float _1043 = _1041 * (_1004.y + (-0.5));
        float _1044 = _1041 * (_1004.z + (-0.5));
        float _1051 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1011.x + (-0.5));
        float _1053 = _1051 * (_1011.y + (-0.5));
        float _1054 = _1051 * (_1011.z + (-0.5));
        float _1061 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1018.x + (-0.5));
        float _1063 = _1061 * (_1018.y + (-0.5));
        float _1064 = _1061 * (_1018.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1085 = (dot(vec3(_672, _673, _674), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1095 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3603 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1097 + 1.0))) + _1102) * _1065;
        float _1112 = _1033 * 0.5;
        float _1113 = _1043 * 0.5;
        float _1114 = _1053 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_672, _673, _674), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3636 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1139 + 1.0))) + _1144) * _1066;
        float _1154 = _1034 * 0.5;
        float _1155 = _1044 * 0.5;
        float _1156 = _1054 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_672, _673, _674), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3669 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1181 + 1.0))) + _1186) * _1067;
        _1203 = _1034;
        _1205 = _1033;
        _1206 = _1032;
        _1207 = _1044;
        _1208 = _1043;
        _1209 = _1042;
        _1210 = _1054;
        _1211 = _1053;
        _1212 = _1052;
        _1213 = _1067;
        _1214 = _1066;
        _1215 = _1065;
        _1216 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1217 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1218 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _1204;
        _1205 = _1204;
        _1206 = _1204;
        _1207 = _1204;
        _1208 = _1204;
        _1209 = _1204;
        _1210 = _1204;
        _1211 = _1204;
        _1212 = _1204;
        _1213 = _1204;
        _1214 = _1204;
        _1215 = _1204;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1247 = fma(_874, cbModelParam._m0[30u].z, fma(_870, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _866));
        float _1251 = fma(_874, cbModelParam._m0[31u].z, fma(_870, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _866));
        float _1255 = fma(_874, cbModelParam._m0[32u].z, fma(_870, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _866));
        float _1278 = _866 + _672;
        float _1279 = _870 + _673;
        float _1280 = _874 + _674;
        float _1290 = fma(_1280, cbModelParam._m0[30u].z, fma(_1279, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1278)) - _1247;
        float _1291 = fma(_1280, cbModelParam._m0[31u].z, fma(_1279, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1278)) - _1251;
        float _1292 = fma(_1280, cbModelParam._m0[32u].z, fma(_1279, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1278)) - _1255;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1309 = ((_1296 * _1290) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1247 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1291) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1251 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1296 * _1292) / cbModelParam._m0[35u].z) + ((((((_1255 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1309, _1310, _1311), 0.0);
        float _1346 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1313.x + (-0.5));
        float _1348 = _1346 * (_1313.y + (-0.5));
        float _1349 = _1346 * (_1313.z + (-0.5));
        float _1356 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1320.x + (-0.5));
        float _1358 = _1356 * (_1320.y + (-0.5));
        float _1359 = _1356 * (_1320.z + (-0.5));
        float _1366 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1327.x + (-0.5));
        float _1368 = _1366 * (_1327.y + (-0.5));
        float _1369 = _1366 * (_1327.z + (-0.5));
        float _1376 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1334.x + (-0.5));
        float _1378 = _1376 * (_1334.y + (-0.5));
        float _1379 = _1376 * (_1334.z + (-0.5));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = _1347 * 0.5;
        float _1384 = _1357 * 0.5;
        float _1385 = _1367 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_672, _673, _674), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _3732 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_1410 + 1.0))) + _1415) * _1380;
        float _1425 = _1348 * 0.5;
        float _1426 = _1358 * 0.5;
        float _1427 = _1368 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_672, _673, _674), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _3765 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1452 + 1.0))) + _1457) * _1381;
        float _1467 = _1349 * 0.5;
        float _1468 = _1359 * 0.5;
        float _1469 = _1369 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_672, _673, _674), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _3798 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1494 + 1.0))) + _1499) * _1382;
        _1516 = _1349;
        _1517 = _1348;
        _1518 = _1347;
        _1519 = _1359;
        _1520 = _1358;
        _1521 = _1357;
        _1522 = _1369;
        _1523 = _1368;
        _1524 = _1367;
        _1525 = _1382;
        _1526 = _1381;
        _1527 = _1380;
        _1528 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1529 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1530 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
    }
    else
    {
        _1516 = _1204;
        _1517 = _1204;
        _1518 = _1204;
        _1519 = _1204;
        _1520 = _1204;
        _1521 = _1204;
        _1522 = _1204;
        _1523 = _1204;
        _1524 = _1204;
        _1525 = _1204;
        _1526 = _1204;
        _1527 = _1204;
        _1528 = 0.0;
        _1529 = 0.0;
        _1530 = 0.0;
    }
    float _1540 = (cbModelParam._m0[1u].x * (_1528 - _1216)) + _1216;
    float _1541 = (cbModelParam._m0[1u].x * (_1529 - _1217)) + _1217;
    float _1542 = (cbModelParam._m0[1u].x * (_1530 - _1218)) + _1218;
    float _1563 = fma(_1542, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1542, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1542, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1540));
    float _1584 = _810 * 0.5;
    float _1585 = _811 * 0.5;
    float _1586 = _812 * 0.5;
    float _1587 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1518, _1521, _1524, _1527));
    float _1590 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1517, _1520, _1523, _1526));
    float _1593 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1516, _1519, _1522, _1525));
    float _1627;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1600 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1203, _1207, _1210, _1213));
        float _1604 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1205, _1208, _1211, _1214));
        float _1608 = dot(vec4(_1584, _1585, _1586, 1.0), vec4(_1206, _1209, _1212, _1215));
        float _1615 = dot(vec4(cbModelParam._m0[39u]), vec4(_1584, _1585, _1586, 1.0));
        _1627 = dot(vec3(isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1615) ? 0.0 : (isnan(0.0) ? _1615 : max(0.0, _1615))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1627 = 1.0;
    }
    float _1638;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1629 = dot(vec4(cbModelParam._m0[40u]), vec4(_1584, _1585, _1586, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1629) ? 0.0 : (isnan(0.0) ? _1629 : max(0.0, _1629))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1642 = (_1638 * cbModelParam._m0[1u].x) + (_1627 * (1.0 - cbModelParam._m0[1u].x));
    float _1652 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _675);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1652 : min(cbModelParam._m0[25u].z, _1652));
    float _1734;
    float _1736;
    float _1738;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1701 = fma(_874, cbModelParam._m0[13u].z, fma(_870, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866)) + cbModelParam._m0[13u].w;
        float _1705 = fma(_874, cbModelParam._m0[14u].z, fma(_870, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866)) + cbModelParam._m0[14u].w;
        float _1709 = fma(_874, cbModelParam._m0[15u].z, fma(_870, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866)) + cbModelParam._m0[15u].w;
        float _1712 = fma(_812, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _810));
        float _1715 = fma(_812, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _810));
        float _1718 = fma(_812, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _810));
        float _1746;
        if (_1712 > 0.0)
        {
            _1746 = abs((1.0 - _1701) / _1712);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1712 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1701 + 1.0) / _1712);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1746 = frontier_phi_41_39_ladder;
        }
        float _2128;
        if (_1715 > 0.0)
        {
            _2128 = abs((1.0 - _1705) / _1715);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1705 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2128 = frontier_phi_50_46_ladder;
        }
        float _2452;
        if (_1718 > 0.0)
        {
            _2452 = abs((1.0 - _1709) / _1718);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1709 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2452 = frontier_phi_64_57_ladder;
        }
        float _2454 = isnan(_2128) ? _1746 : (isnan(_1746) ? _2128 : min(_1746, _2128));
        float _2455 = isnan(_2452) ? _2454 : (isnan(_2454) ? _2452 : min(_2454, _2452));
        float _2459 = (_2455 * _1712) + _1701;
        float _2460 = (_2455 * _1715) + _1705;
        float _2461 = (_2455 * _1718) + _1709;
        float _2462 = _2455 * 9.9999997473787516355514526367188e-05;
        float _2463 = (-1.0) - _2462;
        float _2465 = _2462 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2461 > _2465) || ((_2461 < _2463) || ((_2460 > _2465) || ((_2460 < _2463) || ((_2459 < _2463) || (_2459 > _2465))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2461, cbModelParam._m0[9u].z, fma(_2460, cbModelParam._m0[9u].y, _2459 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2461, cbModelParam._m0[10u].z, fma(_2460, cbModelParam._m0[10u].y, _2459 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2461, cbModelParam._m0[11u].z, fma(_2460, cbModelParam._m0[11u].y, _2459 * cbModelParam._m0[11u].x))), _1653);
            frontier_phi_40_64_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1734 = frontier_phi_40_64_ladder_2;
        _1736 = frontier_phi_40_64_ladder_1;
        _1738 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_810, _811, _812), _1653);
        _1734 = _1722.x * cbModelParam._m0[1u].y;
        _1736 = _1722.y * cbModelParam._m0[1u].y;
        _1738 = _1722.z * cbModelParam._m0[1u].y;
    }
    float _1742 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _675);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1742 : min(cbModelParam._m0[25u].w, _1742));
    float _1831;
    float _1833;
    float _1835;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1795 = fma(_874, cbModelParam._m0[21u].z, fma(_870, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866)) + cbModelParam._m0[21u].w;
        float _1799 = fma(_874, cbModelParam._m0[22u].z, fma(_870, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866)) + cbModelParam._m0[22u].w;
        float _1803 = fma(_874, cbModelParam._m0[23u].z, fma(_870, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866)) + cbModelParam._m0[23u].w;
        float _1806 = fma(_812, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _810));
        float _1809 = fma(_812, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _810));
        float _1812 = fma(_812, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _810));
        float _2133;
        if (_1806 > 0.0)
        {
            _2133 = abs((1.0 - _1795) / _1806);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1795 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2133 = frontier_phi_52_48_ladder;
        }
        float _2478;
        if (_1809 > 0.0)
        {
            _2478 = abs((1.0 - _1799) / _1809);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1809 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1799 + 1.0) / _1809);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2478 = frontier_phi_66_59_ladder;
        }
        float _2668;
        if (_1812 > 0.0)
        {
            _2668 = abs((1.0 - _1803) / _1812);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1803 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2668 = frontier_phi_84_77_ladder;
        }
        float _2670 = isnan(_2478) ? _2133 : (isnan(_2133) ? _2478 : min(_2133, _2478));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1806) + _1795;
        float _2676 = (_2671 * _1809) + _1799;
        float _2677 = (_2671 * _1812) + _1803;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1743);
            frontier_phi_49_84_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _1831 = frontier_phi_49_84_ladder_2;
        _1833 = frontier_phi_49_84_ladder_1;
        _1835 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_810, _811, _812), _1743);
        _1831 = _1815.x * cbModelParam._m0[1u].z;
        _1833 = _1815.y * cbModelParam._m0[1u].z;
        _1835 = _1815.z * cbModelParam._m0[1u].z;
    }
    float _1848 = (((_837 * _787) + _838) * _802) * ((cbModelParam._m0[1u].w * (_1831 - _1734)) + _1734);
    float _1850 = (((_837 * _789) + _838) * _802) * ((cbModelParam._m0[1u].w * (_1833 - _1736)) + _1736);
    float _1852 = (((_837 * _790) + _838) * _802) * ((cbModelParam._m0[1u].w * (_1835 - _1738)) + _1738);
    float _1855 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1850, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1858 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1850, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1861 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1850, cbSceneParam._m0[91u].y, _1848 * cbSceneParam._m0[91u].x));
    vec4 _1869 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_722, _723));
    float _1871 = _1869.w;
    float _1883 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1871);
    float _1884 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1871);
    float _1885 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1871);
    uvec4 _1889 = floatBitsToUint(cbInstanceData._m0[_761 + 5u]);
    uint _1891 = _1889.x * 14u;
    uint _1892 = _1891 + 13u;
    float _1897 = _802 + (-1.0);
    float _1900 = (cbLight._m0[_1892].x * _1897) + 1.0;
    float _1901 = (cbLight._m0[_1892].y * _1897) + 1.0;
    uint _1902 = _1891 + 5u;
    float _1908 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1912 = _1891 + 4u;
    float _1921 = isnan(1.0) ? _1900 : (isnan(_1900) ? 1.0 : min(_1900, 1.0));
    uint _1925 = _1891 | 1u;
    float _1936 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_672, _673, _674));
    float _1939 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_672, _673, _674));
    float _3934 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _3945 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1944 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1946 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * 0.3183098733425140380859375;
    float _1953 = ((cbLight._m0[_1902].x * _1908) * _1946) + (((cbLight._m0[_1912].x * _1883) * _1921) * _1944);
    float _1954 = ((_1908 * cbLight._m0[_1902].y) * _1946) + (((cbLight._m0[_1912].y * _1884) * _1921) * _1944);
    float _1955 = ((_1908 * cbLight._m0[_1902].z) * _1946) + (((cbLight._m0[_1912].z * _1885) * _1921) * _1944);
    uint _1957 = _1891 + 8u;
    float _1970 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _675) * 0.949999988079071044921875);
    float _1971 = _1970 * _1970;
    float _1972 = cbLight._m0[_1891].x + _700;
    float _1973 = cbLight._m0[_1891].y + _701;
    float _1974 = cbLight._m0[_1891].z + _702;
    float _1978 = inversesqrt(dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974)));
    float _1979 = _1978 * _1972;
    float _1980 = _1978 * _1973;
    float _1981 = _1978 * _1974;
    float _1982 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1891].xyz));
    float _3956 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _1986 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1987 = dot(vec3(_672, _673, _674), vec3(_1979, _1980, _1981));
    float _3978 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1990 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1991 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_1979, _1980, _1981));
    float _3989 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
    float _1995 = _1971 * _1971;
    float _1999 = ((_1990 * _1990) * (_1995 + (-1.0))) + 1.0;
    float _2007 = exp2(log2(1.0 - (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0)))) * 5.0);
    float _2008 = 0.959999978542327880859375 - _784;
    float _2010 = 0.959999978542327880859375 - _785;
    float _2011 = 0.959999978542327880859375 - _786;
    float _2018 = 1.0 - _1971;
    float _2029 = (0.5 / (((_1986 * ((_1985 * _2018) + _1971)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2018) + _1971) * _1985))) * _1985;
    float _4000 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1995 / ((_1999 * _1999) * 3.141590118408203125));
    uint _2045 = _1891 + 9u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _675) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1925].x + _700;
    float _2059 = cbLight._m0[_1925].y + _701;
    float _2060 = cbLight._m0[_1925].z + _702;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_672, _673, _674), vec3(cbLight._m0[_1925].xyz));
    float _4011 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
    float _2072 = dot(vec3(_672, _673, _674), vec3(_2065, _2066, _2067));
    float _4022 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2075 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
    float _2076 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2065, _2066, _2067));
    float _4033 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2080 = _2057 * _2057;
    float _2084 = ((_2075 * _2075) * (_2080 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) * 5.0);
    float _2098 = 1.0 - _2057;
    float _2108 = (0.5 / (((_1986 * ((_2071 * _2098) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_1986 * _2098) + _2057) * _2071))) * _2071;
    float _4044 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * (_2080 / ((_2084 * _2084) * 3.141590118408203125));
    float _2120 = (((((_2091 * _2008) + _787) * cbLight._m0[_2045].x) * _2110) * _1908) + ((((cbLight._m0[_1957].x * _1883) * ((_2007 * _2008) + _787)) * _2031) * _1921);
    float _2121 = (((((_2091 * _2010) + _789) * cbLight._m0[_2045].y) * _2110) * _1908) + ((((cbLight._m0[_1957].y * _1884) * ((_2007 * _2010) + _789)) * _2031) * _1921);
    float _2122 = (((((_2091 * _2011) + _790) * cbLight._m0[_2045].z) * _2110) * _1908) + ((((cbLight._m0[_1957].z * _1885) * ((_2007 * _2011) + _790)) * _2031) * _1921);
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1889.y == 0u)
    {
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2177;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2177;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2177;
        uvec4 _2192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2193 = _2192.x;
        uint _2204 = uint((float(_2192.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _2193))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _2193)));
        float _2214 = (log2(_2180 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2215 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        uint _2218 = uint(isnan(14.0) ? _2215 : (isnan(_2215) ? 14.0 : min(_2215, 14.0)));
        uvec4 _2223 = texelFetch(g_lightClusterGridBuffer, int(((_2218 << 2u) + (_2204 << 6u)) >> 2u));
        uint _2224 = _2223.x;
        uint _2225 = _2192.z;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        if (((((1u << ((_2225 >> 4u) & 15u)) + 4294967295u) & _2224) == 0u) || ((_2225 & 240u) == 0u))
        {
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
        }
        else
        {
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            uint _2521 = 0u;
            uint _2530;
            bool _2531;
            for (;;)
            {
                _2530 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                _2531 = _2530 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2531)
                {
                    frontier_phi_79_pred = _2520;
                    frontier_phi_79_pred_1 = _2519;
                    frontier_phi_79_pred_2 = _2518;
                    frontier_phi_79_pred_3 = _2517;
                    frontier_phi_79_pred_4 = _2516;
                    frontier_phi_79_pred_5 = _2515;
                }
                else
                {
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    uint _2717;
                    _2711 = _2515;
                    _2712 = _2516;
                    _2713 = _2517;
                    _2714 = _2518;
                    _2715 = _2519;
                    _2716 = _2520;
                    _2717 = _2530;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    for (;;)
                    {
                        uint _2721 = uint(findLSB(_2717)) + (_2521 << 5u);
                        uint _2718 = (_2717 + 4294967295u) & _2717;
                        uint _2723 = _2721 * 48u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2723)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2723 + 3u)).x));
                        uint _2743 = (_2721 * 48u) + 4u;
                        vec4 _2756 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2762 = (_2721 * 48u) + 8u;
                        vec3 _2773 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2762)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2762 + 2u)).x));
                        float _2777 = _2737.x - _2178;
                        float _2778 = _2737.y - _2179;
                        float _2779 = _2737.z - _2180;
                        float _2780 = dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779));
                        float _2783 = inversesqrt(_2780);
                        float _2784 = _2783 * _2777;
                        float _2785 = _2783 * _2778;
                        float _2786 = _2783 * _2779;
                        float _2787 = dot(vec3(_742, _745, _748), vec3(_2784, _2785, _2786));
                        float _2792 = 1.0 - (_2780 * _2737.w);
                        float _4065 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2794 = sqrt(_2780) * _2756.w;
                        float _2797 = 1.39999997615814208984375 / (_2794 + 1.39999997615814208984375);
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2787) + _2798;
                        float _2804 = _2794 * _2794;
                        float _2808 = ((isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0))) * _2793) / ((_2804 * 0.699999988079071044921875) + 1.0);
                        float _2812 = (-0.0) - _2178;
                        float _2813 = (-0.0) - _2179;
                        float _2814 = (-0.0) - _2180;
                        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
                        float _2819 = _2818 * _2812;
                        float _2820 = _2818 * _2813;
                        float _2821 = _2818 * _2814;
                        float _2829 = exp2(log2(1.0 / ((_2804 * 3.5) + 5.0)) * 0.25);
                        float _2830 = 1.0 - _818;
                        float _2837 = sqrt(1.0 - ((1.0 - (_2830 * _2830)) * (1.0 - (_2829 * _2829))));
                        float _2838 = _2837 * _2837;
                        float _2839 = _2838 * _2838;
                        float _2840 = _2819 + _2784;
                        float _2841 = _2820 + _2785;
                        float _2842 = _2821 + _2786;
                        float _2846 = inversesqrt(dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842)));
                        float _2850 = dot(vec3(_742, _745, _748), vec3(_2819, _2820, _2821));
                        float _4081 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2853 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                        float _2854 = dot(vec3(_742, _745, _748), vec3(_2846 * _2840, _2846 * _2841, _2846 * _2842));
                        float _4092 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2857 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                        float _2861 = ((_2857 * _2857) * (_2839 + (-1.0))) + 1.0;
                        float _2862 = _2797 * _2838;
                        float _2863 = _2862 * _2862;
                        float _2866 = ((1.0 - _2863) * _2787) + _2863;
                        float _4103 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2867 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2868 = 1.0 - _2838;
                        float _2878 = (0.5 / (((_2867 * ((_2853 * _2868) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2867 * _2868) + _2838) * _2853))) * _2867;
                        float _4114 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2889 = (((_2839 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_2861 * _2861) * ((_2804 * 2.1991131305694580078125) + 3.141590118408203125))) * _2793;
                        _2615 = (_2808 * _2756.x) + _2714;
                        _2616 = (_2808 * _2756.y) + _2715;
                        _2617 = (_2808 * _2756.z) + _2716;
                        _2612 = (_2889 * _2773.x) + _2711;
                        _2613 = (_2889 * _2773.y) + _2712;
                        _2614 = (_2889 * _2773.z) + _2713;
                        if (_2718 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2711 = _2612;
                            _2712 = _2613;
                            _2713 = _2614;
                            _2714 = _2615;
                            _2715 = _2616;
                            _2716 = _2617;
                            _2717 = _2718;
                        }
                    }
                    frontier_phi_79_pred = _2617;
                    frontier_phi_79_pred_1 = _2616;
                    frontier_phi_79_pred_2 = _2615;
                    frontier_phi_79_pred_3 = _2614;
                    frontier_phi_79_pred_4 = _2613;
                    frontier_phi_79_pred_5 = _2612;
                }
                _2342 = frontier_phi_79_pred;
                _2340 = frontier_phi_79_pred_1;
                _2338 = frontier_phi_79_pred_2;
                _2336 = frontier_phi_79_pred_3;
                _2334 = frontier_phi_79_pred_4;
                _2332 = frontier_phi_79_pred_5;
                uint _2522 = _2521 + 1u;
                if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2515 = _2332;
                    _2516 = _2334;
                    _2517 = _2336;
                    _2518 = _2338;
                    _2519 = _2340;
                    _2520 = _2342;
                    _2521 = _2522;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
        }
        uvec4 _2345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2346 = _2345.z;
        uint _2348 = (_2346 >> 8u) & 15u;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        if (((4294967295u << _2348) & _2224) == 0u)
        {
            _2483 = _2331;
            _2485 = _2333;
            _2487 = _2335;
            _2489 = _2337;
            _2491 = _2339;
            _2493 = _2341;
        }
        else
        {
            float _2508 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
            float _2509 = _2508 * _2178;
            float _2510 = _2508 * _2179;
            float _2511 = _2508 * _2180;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2348 < ((_2346 >> 12u) & 15u))
            {
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2694 = _2331;
                float _2695 = _2333;
                float _2696 = _2335;
                float _2697 = _2337;
                float _2698 = _2339;
                float _2699 = _2341;
                uint _2700 = _2348;
                uint _2709;
                bool _2710;
                for (;;)
                {
                    _2709 = texelFetch(g_lightClassification, int((((_2218 << 5u) + (_2204 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                    _2710 = _2709 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2710)
                    {
                        frontier_phi_93_pred = _2698;
                        frontier_phi_93_pred_1 = _2697;
                        frontier_phi_93_pred_2 = _2696;
                        frontier_phi_93_pred_3 = _2695;
                        frontier_phi_93_pred_4 = _2694;
                        frontier_phi_93_pred_5 = _2699;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _2937 = _2694;
                        float _2938 = _2695;
                        float _2939 = _2696;
                        float _2940 = _2697;
                        float _2941 = _2698;
                        float _2942 = _2699;
                        uint _2943 = _2709;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3012;
                        vec4 _3027;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2954 = ((_2700 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _2999 = (_2954 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2954 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2954 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2954 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2180, _3061.z, fma(_2179, _3061.y, _3061.x * _2178)) + _3061.w;
                            _3074 = !((fma(_2180, _3042.z, fma(_2179, _3042.y, _3042.x * _2178)) + _3042.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3074)
                            {
                                float _3101 = _2969.x - _2178;
                                float _3102 = _2969.y - _2179;
                                float _3103 = _2969.z - _2180;
                                float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                                float _3107 = inversesqrt(_3104);
                                float _3108 = _3107 * _3101;
                                float _3109 = _3107 * _3102;
                                float _3110 = _3107 * _3103;
                                float _3114 = 1.0 - (_3104 / (_2970 * _2970));
                                float _4125 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3119 = sqrt(_3104) * _2985.w;
                                float _3121 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                                float _3122 = _3121 * _3121;
                                float _3125 = ((1.0 - _3122) * dot(vec3(_3108, _3109, _3110), vec3(_742, _745, _748))) + _3122;
                                float _3128 = _3119 * _3119;
                                float _3132 = (fma(_2180, _3012.z, fma(_2179, _3012.y, _3012.x * _2178)) + _3012.w) / _3073;
                                float _3133 = (fma(_2180, _3027.z, fma(_2179, _3027.y, _3027.x * _2178)) + _3027.w) / _3073;
                                float _3137 = 1.0 - dot(vec2(_3132, _3133), vec2(_3132, _3133));
                                float _4141 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                                float _3139 = _3138 * (((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3115) / ((_3128 * 0.699999988079071044921875) + 1.0));
                                float _3151 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                                float _3152 = 1.0 - _818;
                                float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                                float _3160 = _3159 * _3159;
                                float _3161 = _3160 * _3160;
                                float _3162 = _3108 - _2509;
                                float _3163 = _3109 - _2510;
                                float _3164 = _3110 - _2511;
                                float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                                float _3172 = dot(vec3(_742, _745, _748), vec3((-0.0) - _2509, (-0.0) - _2510, (-0.0) - _2511));
                                float _4152 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                                float _3176 = dot(vec3(_742, _745, _748), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                                float _4163 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                                float _3184 = _3121 * _3160;
                                float _3185 = _3184 * _3184;
                                float _3191 = ((1.0 - _3185) * dot(vec3(_742, _745, _748), vec3(_3108, _3109, _3110))) + _3185;
                                float _4174 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                                float _3193 = 1.0 - _3160;
                                float _3203 = (0.5 / (((_3192 * ((_3175 * _3193) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3160) * _3175))) * _3192;
                                float _4185 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3213 = (_3138 * _3115) * (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0)))) / ((_3183 * _3183) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3139 * _2985.z;
                                frontier_phi_99_pred_1 = _3139 * _2985.y;
                                frontier_phi_99_pred_2 = _3139 * _2985.x;
                                frontier_phi_99_pred_3 = _3213 * _2997.z;
                                frontier_phi_99_pred_4 = _3213 * _2997.y;
                                frontier_phi_99_pred_5 = _3213 * _2997.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3222 = frontier_phi_99_pred;
                            _3221 = frontier_phi_99_pred_1;
                            _3220 = frontier_phi_99_pred_2;
                            _3219 = frontier_phi_99_pred_3;
                            _3218 = frontier_phi_99_pred_4;
                            _3217 = frontier_phi_99_pred_5;
                            _2927 = _3220 + _2940;
                            _2928 = _3221 + _2941;
                            _2929 = _3222 + _2942;
                            _2924 = _3217 + _2937;
                            _2925 = _3218 + _2938;
                            _2926 = _3219 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2928;
                        frontier_phi_93_pred_1 = _2927;
                        frontier_phi_93_pred_2 = _2926;
                        frontier_phi_93_pred_3 = _2925;
                        frontier_phi_93_pred_4 = _2924;
                        frontier_phi_93_pred_5 = _2929;
                    }
                    _2492 = frontier_phi_93_pred;
                    _2490 = frontier_phi_93_pred_1;
                    _2488 = frontier_phi_93_pred_2;
                    _2486 = frontier_phi_93_pred_3;
                    _2484 = frontier_phi_93_pred_4;
                    _2494 = frontier_phi_93_pred_5;
                    uint _2701 = _2700 + 1u;
                    if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2694 = _2484;
                        _2695 = _2486;
                        _2696 = _2488;
                        _2697 = _2490;
                        _2698 = _2492;
                        _2699 = _2494;
                        _2700 = _2701;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2494;
                frontier_phi_68_69_ladder_1 = _2492;
                frontier_phi_68_69_ladder_2 = _2490;
                frontier_phi_68_69_ladder_3 = _2488;
                frontier_phi_68_69_ladder_4 = _2484;
                frontier_phi_68_69_ladder_5 = _2486;
            }
            else
            {
                frontier_phi_68_69_ladder = _2341;
                frontier_phi_68_69_ladder_1 = _2339;
                frontier_phi_68_69_ladder_2 = _2337;
                frontier_phi_68_69_ladder_3 = _2335;
                frontier_phi_68_69_ladder_4 = _2331;
                frontier_phi_68_69_ladder_5 = _2333;
            }
            _2483 = frontier_phi_68_69_ladder_4;
            _2485 = frontier_phi_68_69_ladder_5;
            _2487 = frontier_phi_68_69_ladder_3;
            _2489 = frontier_phi_68_69_ladder_2;
            _2491 = frontier_phi_68_69_ladder_1;
            _2493 = frontier_phi_68_69_ladder;
        }
        float _2498 = isnan(1.0) ? _802 : (isnan(_802) ? 1.0 : min(_802, 1.0));
        _2237 = (_2498 * _2489) + _1953;
        _2239 = (_2498 * _2491) + _1954;
        _2241 = (_2498 * _2493) + _1955;
        _2243 = ((_2483 * _787) * _2498) + _2120;
        _2245 = ((_2485 * _789) * _2498) + _2121;
        _2247 = ((_2487 * _790) * _2498) + _2122;
    }
    else
    {
        _2237 = _1953;
        _2239 = _1954;
        _2241 = _1955;
        _2243 = _2120;
        _2245 = _2121;
        _2247 = _2122;
    }
    uint _2253 = _763 + uint(cbMatDynParam._m0[0u].w);
    float _4201 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4212 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4223 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _2278 = (((isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2237 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _802))) + ((_2243 + ((isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2253].x * ((_593 * ((_549 - _474) - (_549 * _294))) + _474));
    float _2280 = ((cbInstanceData._m0[_2253].y * ((_593 * ((_550 - _475) - (_550 * _294))) + _475)) + ((_2245 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0))) * (_2239 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _802)));
    float _2282 = ((cbInstanceData._m0[_2253].z * ((_593 * ((_551 - _476) - (_551 * _294))) + _476)) + ((_2247 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1642)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2241 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _802)));
    float _2283 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _2284 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2285 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    uint _2286 = _761 + 6u;
    float _2294 = _722 / cbSceneParam._m0[86u].x;
    float _2295 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2309 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2294, _2295, (log2((isnan(cbSceneParam._m0[77u].w) ? _695 : (isnan(_695) ? cbSceneParam._m0[77u].w : min(_695, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2311 = _2309.x;
    float _2312 = _2309.y;
    float _2313 = _2309.z;
    float _2314 = _2309.w;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_695 > cbSceneParam._m0[78u].w)
    {
        float _2356 = isnan(_695) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _695 : min(cbSceneParam._m0[80u].w, _695));
        float _2357 = _2356 / _695;
        float _2368 = _2357 * _267;
        float _2369 = _268 * _2357;
        float _2370 = (-0.0) - _2369;
        float _2371 = _2357 * _269;
        float _2373 = (cbSceneParam._m0[77u].w * _2370) / _2356;
        float _2374 = _2373 + cbSceneParam._m0[79u].w;
        float _2375 = cbSceneParam._m0[79u].w - _2369;
        float _2381 = sqrt(((_2368 * _2368) + (_2369 * _2369)) + (_2371 * _2371));
        float _2384 = (1.0 - (cbSceneParam._m0[77u].w / _2356)) * _2381;
        float _2390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2625;
        if (abs((_2370 - _2373) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2625 = ((((_2374 > 0.0) ? exp2(_2390 * _2374) : (2.0 - exp2(_2392 * _2374))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2384;
        }
        else
        {
            float _2544 = 1.0 / cbSceneParam._m0[80u].x;
            float _2545 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : max(_2374, _2375));
            float _2546 = isnan(_2375) ? _2374 : (isnan(_2374) ? _2375 : min(_2374, _2375));
            float _2555 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : min(_2545, 0.0));
            float _2556 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : min(_2546, 0.0));
            _2625 = ((abs(_2381 / _2370) * cbSceneParam._m0[80u].y) * ((((_2555 - _2556) * 2.0) - ((exp2(_2390 * (isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0)))) - exp2(_2390 * (isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0))))) * _2544)) - ((exp2(_2392 * _2555) - exp2(_2392 * _2556)) * _2544))) + (_2384 * cbSceneParam._m0[80u].z);
        }
        vec4 _2627 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2294, _2295, 1.0), 0.0);
        float _2636 = exp2((_2625 * (-1.44269502162933349609375)) * (1.0 - _2627.w));
        float _2637 = log2(_2636);
        float _2653 = log2(_2314);
        _2394 = (exp2(_2653 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].x)) * _2627.x) / cbSceneParam._m0[78u].x)) + _2311;
        _2396 = (exp2(_2653 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].y)) * _2627.y) / cbSceneParam._m0[78u].y)) + _2312;
        _2398 = (exp2(_2653 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2637 * cbSceneParam._m0[78u].z)) * _2627.z) / cbSceneParam._m0[78u].z)) + _2313;
        _2400 = _2636 * _2314;
    }
    else
    {
        _2394 = _2311;
        _2396 = _2312;
        _2398 = _2313;
        _2400 = _2314;
    }
    bool _2663;
    vec4 _2410;
    vec4 _2432;
    float _2434;
    float _2438;
    float _2439;
    float _2440;
    float _2441;
    bool _2451;
    for (;;)
    {
        _2410 = cbMatDynParam._m0[0u];
        float _2412 = roundEven(_2410.y);
        bool _2413 = _2412 == 3.0;
        float _2414 = log2(_2400);
        float _2421 = exp2(_2414 * cbSceneParam._m0[78u].x) * _2283;
        float _2422 = exp2(_2414 * cbSceneParam._m0[78u].y) * _2284;
        float _2423 = exp2(_2414 * cbSceneParam._m0[78u].z) * _2285;
        float _2430 = _709 + (-0.5);
        _2432 = cbMtdParam._m0[1u];
        _2434 = _2432.y * _2430;
        float _2437 = (_2412 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2438 = _2437 * (_2413 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2394)));
        _2439 = _2437 * (_2413 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2396)));
        _2440 = _2437 * (_2413 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2398)));
        _2441 = _2430 * 0.999000012874603271484375;
        _2451 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2451)
        {
            if ((cbInstanceData._m0[_761 + 7u].x + _2441) < 0.5)
            {
                _2663 = true;
                break;
            }
        }
        uint _2579 = _763 + uint(_2410.w);
        if ((cbInstanceData._m0[_2579].w < 1.0) && ((cbInstanceData._m0[_2579].w + _2441) < 0.5))
        {
            _2663 = true;
            break;
        }
        if ((_2434 + 1.0) < _2432.x)
        {
            _2663 = true;
            break;
        }
        _2663 = false;
        break;
    }
    float _2894;
    if (_2663)
    {
        discard_state = true;
        _2894 = 0.0;
    }
    else
    {
        _2894 = cbInstanceData._m0[_2286].w;
    }
    SV_Target.x = _2438;
    SV_Target.y = _2439;
    SV_Target.z = _2440;
    SV_Target.w = _2894;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2286].w;
    discard_exit();
}


