#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1170;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _393 = (_389 * _383) + (_357 * cbMtdParam._m0[20u].y);
    float _394 = (_389 * _384) + (_358 * cbMtdParam._m0[20u].z);
    float _395 = _393 * cbMtdParam._m0[19u].x;
    float _396 = _394 * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    bool _414 = _392 > 0.0;
    float _416 = _414 ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _423 = _397 + (-0.5);
    float _426 = _398 + (-0.5);
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_423 + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_426 + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _470 = (_456 - (_456 * _290)) * cbMtdParam._m0[9u].x;
    float _471 = (_457 - (_457 * _290)) * cbMtdParam._m0[9u].y;
    float _472 = cbMtdParam._m0[9u].z * (_458 - (_458 * _290));
    float _490 = _393 * cbMtdParam._m0[21u].x;
    float _491 = _394 * cbMtdParam._m0[20u].w;
    bool _492 = _490 > 0.0;
    float _497;
    if (_492)
    {
        _497 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _497 = frontier_phi_11_10_ladder;
    }
    bool _499 = _491 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _504 = frontier_phi_15_14_ladder;
    }
    float _507 = _414 ? (cbMtdParam._m0[16u].z / _392) : 5000.0;
    float _508 = isnan(_504) ? _497 : (isnan(_497) ? _504 : min(_497, _504));
    float _509 = isnan(_507) ? _508 : (isnan(_508) ? _507 : min(_508, _507));
    float _513 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _517 = ((_509 * _392) + _513) / _513;
    float _522 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _524 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _540 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_509 * _490)) / _517) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_509 * _491)) / _517) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _545 = _540.x * cbMtdParam._m0[10u].x;
    float _546 = _540.y * cbMtdParam._m0[10u].y;
    float _547 = _540.z * cbMtdParam._m0[10u].z;
    float _555;
    if (_492)
    {
        _555 = (1.0 - _397) / _490;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_490 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _397) / _490;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _555 = frontier_phi_19_18_ladder;
    }
    float _561;
    if (_499)
    {
        _561 = (1.0 - _398) / _491;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_491 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _398) / _491;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _561 = frontier_phi_23_22_ladder;
    }
    float _563 = isnan(_561) ? _555 : (isnan(_555) ? _561 : min(_555, _561));
    float _564 = isnan(_507) ? _563 : (isnan(_563) ? _507 : min(_563, _507));
    float _571 = ((_564 * _392) + _513) / _513;
    vec4 _585 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_423 + (_564 * _490)) / _571) + 0.5) + _522) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_426 + (_564 * _491)) / _571) + 0.5) + _524) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _587 = _585.w;
    float _589 = _587 - (_587 * _290);
    float _600 = 0.5 - (_290 * 0.5);
    float _610 = (((_470 - _303) + (_589 * ((_545 - _470) - (_545 * _290)))) * _600) + _303;
    float _611 = (((_471 - _305) + (_589 * ((_546 - _471) - (_546 * _290)))) * _600) + _305;
    float _612 = (((_472 - _307) + (_589 * ((_547 - _472) - (_547 * _290)))) * _600) + _307;
    vec4 _624 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _626 = _624.x;
    vec4 _638 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _642 = _638.z;
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3318 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))));
    float _653 = _642 * _290;
    float _660 = (cbMtdParam._m0[15u].w * ((_329 - _653) + ((_642 - _329) * _290))) + _653;
    float _664 = (cbMtdParam._m0[16u].x * _357) + _645;
    float _665 = (cbMtdParam._m0[16u].x * _358) + _646;
    float _668 = fma(_652, _199, fma(_665, _206, _664 * _192));
    float _671 = fma(_652, _200, fma(_665, _207, _664 * _193));
    float _674 = fma(_652, _201, fma(_665, _208, _664 * _194));
    float _678 = inversesqrt(dot(vec3(_668, _671, _674), vec3(_668, _671, _674)));
    float _679 = _678 * _668;
    float _680 = _678 * _671;
    float _681 = _678 * _674;
    float _3329 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _682 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3351 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3362 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3373 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _686 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _702 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _706 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _707 = _263 * _706;
    float _708 = _264 * _706;
    float _709 = _265 * _706;
    float _715 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _716 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_681, cbSceneParam._m0[5u].z, fma(_680, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _679));
    float _739 = fma(_681, cbSceneParam._m0[6u].z, fma(_680, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _679));
    float _742 = fma(_681, cbSceneParam._m0[7u].z, fma(_680, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _679));
    uint _755 = uint(roundEven(NORMAL.w)) * 13u;
    uint _758 = (_755 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3384 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
    float _3395 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
    float _770 = 1.0 - _686;
    float _771 = _767 * _770;
    float _772 = _768 * _770;
    float _773 = _769 * _770;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _686;
    float _779 = (_768 + (-0.039999999105930328369140625)) * _686;
    float _780 = (_769 + (-0.039999999105930328369140625)) * _686;
    float _781 = _778 + 0.039999999105930328369140625;
    float _783 = _779 + 0.039999999105930328369140625;
    float _784 = _780 + 0.039999999105930328369140625;
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _715, cbSceneParam._m0[86u].y * _716));
    float _796 = _793.x * TEXCOORD.z;
    float _797 = dot(vec3(_679, _680, _681), vec3(_707, _708, _709));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _679) - _707;
    float _805 = (_800 * _680) - _708;
    float _806 = (_800 * _681) - _709;
    float _810 = abs(dot(vec3(_707, _708, _709), vec3(_679, _680, _681)));
    float _3417 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _812 = sqrt(_682);
    float _825 = exp2((_812 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_812 * 3.0));
    float _831 = (1.0 - _825) * ((_812 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _832 = _825 * _812;
    float _860 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1169;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_868, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _860));
        float _900 = fma(_868, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _860));
        float _904 = fma(_868, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _860));
        float _927 = _860 + _679;
        float _928 = _864 + _680;
        float _929 = _868 + _681;
        float _939 = fma(_929, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927)) - _896;
        float _940 = fma(_929, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927)) - _900;
        float _941 = fma(_929, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927)) - _904;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _997 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_963.x + (-0.5));
        float _999 = _997 * (_963.y + (-0.5));
        float _1000 = _997 * (_963.z + (-0.5));
        float _1007 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_970.x + (-0.5));
        float _1009 = _1007 * (_970.y + (-0.5));
        float _1010 = _1007 * (_970.z + (-0.5));
        float _1017 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_977.x + (-0.5));
        float _1019 = _1017 * (_977.y + (-0.5));
        float _1020 = _1017 * (_977.z + (-0.5));
        float _1027 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_984.x + (-0.5));
        float _1029 = _1027 * (_984.y + (-0.5));
        float _1030 = _1027 * (_984.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1051 = (dot(vec3(_679, _680, _681), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1061 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3465 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1063 + 1.0))) + _1068) * _1031;
        float _1078 = _999 * 0.5;
        float _1079 = _1009 * 0.5;
        float _1080 = _1019 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_679, _680, _681), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3498 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1105 + 1.0))) + _1110) * _1032;
        float _1120 = _1000 * 0.5;
        float _1121 = _1010 * 0.5;
        float _1122 = _1020 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_679, _680, _681), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3531 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1147 + 1.0))) + _1152) * _1033;
        _1169 = _1000;
        _1171 = _999;
        _1172 = _998;
        _1173 = _1010;
        _1174 = _1009;
        _1175 = _1008;
        _1176 = _1020;
        _1177 = _1019;
        _1178 = _1018;
        _1179 = _1033;
        _1180 = _1032;
        _1181 = _1031;
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _1170;
        _1171 = _1170;
        _1172 = _1170;
        _1173 = _1170;
        _1174 = _1170;
        _1175 = _1170;
        _1176 = _1170;
        _1177 = _1170;
        _1178 = _1170;
        _1179 = _1170;
        _1180 = _1170;
        _1181 = _1170;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1210 = fma(_868, cbModelParam._m0[30u].z, fma(_864, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _860));
        float _1214 = fma(_868, cbModelParam._m0[31u].z, fma(_864, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _860));
        float _1218 = fma(_868, cbModelParam._m0[32u].z, fma(_864, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _860));
        float _1241 = _860 + _679;
        float _1242 = _864 + _680;
        float _1243 = _868 + _681;
        float _1253 = fma(_1243, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1241)) - _1210;
        float _1254 = fma(_1243, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1241)) - _1214;
        float _1255 = fma(_1243, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1241)) - _1218;
        float _1259 = inversesqrt(dot(vec3(_1253, _1254, _1255), vec3(_1253, _1254, _1255)));
        float _1272 = ((_1259 * _1253) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1210 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1273 = ((_1259 * _1254) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1214 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1259 * _1255) / cbModelParam._m0[35u].z) + ((((((_1218 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1272, _1273, _1274), 0.0);
        float _1309 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1310 = _1309 * (_1276.x + (-0.5));
        float _1311 = _1309 * (_1276.y + (-0.5));
        float _1312 = _1309 * (_1276.z + (-0.5));
        float _1319 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1283.x + (-0.5));
        float _1321 = _1319 * (_1283.y + (-0.5));
        float _1322 = _1319 * (_1283.z + (-0.5));
        float _1329 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1290.x + (-0.5));
        float _1331 = _1329 * (_1290.y + (-0.5));
        float _1332 = _1329 * (_1290.z + (-0.5));
        float _1339 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1297.x + (-0.5));
        float _1341 = _1339 * (_1297.y + (-0.5));
        float _1342 = _1339 * (_1297.z + (-0.5));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = _1310 * 0.5;
        float _1347 = _1320 * 0.5;
        float _1348 = _1330 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_679, _680, _681), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3594 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1373 + 1.0))) + _1378) * _1343;
        float _1388 = _1311 * 0.5;
        float _1389 = _1321 * 0.5;
        float _1390 = _1331 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_679, _680, _681), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1344 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3627 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1415 + 1.0))) + _1420) * _1344;
        float _1430 = _1312 * 0.5;
        float _1431 = _1322 * 0.5;
        float _1432 = _1332 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_679, _680, _681), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _3660 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1457 + 1.0))) + _1462) * _1345;
        _1479 = _1312;
        _1480 = _1311;
        _1481 = _1310;
        _1482 = _1322;
        _1483 = _1321;
        _1484 = _1320;
        _1485 = _1332;
        _1486 = _1331;
        _1487 = _1330;
        _1488 = _1345;
        _1489 = _1344;
        _1490 = _1343;
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1492 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
    }
    else
    {
        _1479 = _1170;
        _1480 = _1170;
        _1481 = _1170;
        _1482 = _1170;
        _1483 = _1170;
        _1484 = _1170;
        _1485 = _1170;
        _1486 = _1170;
        _1487 = _1170;
        _1488 = _1170;
        _1489 = _1170;
        _1490 = _1170;
        _1491 = 0.0;
        _1492 = 0.0;
        _1493 = 0.0;
    }
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1182)) + _1182;
    float _1504 = (cbModelParam._m0[1u].x * (_1492 - _1183)) + _1183;
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1526 = fma(_1505, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1503 * cbSceneParam._m0[89u].x));
    float _1529 = fma(_1505, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1503 * cbSceneParam._m0[90u].x));
    float _1532 = fma(_1505, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1503));
    float _1547 = _804 * 0.5;
    float _1548 = _805 * 0.5;
    float _1549 = _806 * 0.5;
    float _1550 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1553 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1480, _1483, _1486, _1489));
    float _1556 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1590;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1563 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1169, _1173, _1176, _1179));
        float _1567 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1571 = dot(vec4(_1547, _1548, _1549, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1578 = dot(vec4(cbModelParam._m0[39u]), vec4(_1547, _1548, _1549, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1578) ? 0.0 : (isnan(0.0) ? _1578 : max(0.0, _1578))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1601;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1592 = dot(vec4(cbModelParam._m0[40u]), vec4(_1547, _1548, _1549, 1.0));
        _1601 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1592) ? 0.0 : (isnan(0.0) ? _1592 : max(0.0, _1592))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1601 = 1.0;
    }
    float _1605 = (_1601 * cbModelParam._m0[1u].x) + (_1590 * (1.0 - cbModelParam._m0[1u].x));
    float _1615 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _682);
    float _1616 = isnan(_1615) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1615 : min(cbModelParam._m0[25u].z, _1615));
    float _1697;
    float _1699;
    float _1701;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1664 = fma(_868, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _860)) + cbModelParam._m0[13u].w;
        float _1668 = fma(_868, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _860)) + cbModelParam._m0[14u].w;
        float _1672 = fma(_868, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _860)) + cbModelParam._m0[15u].w;
        float _1675 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1678 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1681 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1709;
        if (_1675 > 0.0)
        {
            _1709 = abs((1.0 - _1664) / _1675);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1675 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1664 + 1.0) / _1675);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1709 = frontier_phi_38_36_ladder;
        }
        float _2091;
        if (_1678 > 0.0)
        {
            _2091 = abs((1.0 - _1668) / _1678);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1668 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2091 = frontier_phi_47_43_ladder;
        }
        float _2391;
        if (_1681 > 0.0)
        {
            _2391 = abs((1.0 - _1672) / _1681);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1672 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2391 = frontier_phi_61_54_ladder;
        }
        float _2393 = isnan(_2091) ? _1709 : (isnan(_1709) ? _2091 : min(_1709, _2091));
        float _2394 = isnan(_2391) ? _2393 : (isnan(_2393) ? _2391 : min(_2393, _2391));
        float _2398 = (_2394 * _1675) + _1664;
        float _2399 = (_2394 * _1678) + _1668;
        float _2400 = (_2394 * _1681) + _1672;
        float _2401 = _2394 * 9.9999997473787516355514526367188e-05;
        float _2402 = (-1.0) - _2401;
        float _2404 = _2401 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2400 > _2404) || ((_2400 < _2402) || ((_2399 > _2404) || ((_2399 < _2402) || ((_2398 < _2402) || (_2398 > _2404))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2400, cbModelParam._m0[9u].z, fma(_2399, cbModelParam._m0[9u].y, _2398 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2400, cbModelParam._m0[10u].z, fma(_2399, cbModelParam._m0[10u].y, _2398 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2400, cbModelParam._m0[11u].z, fma(_2399, cbModelParam._m0[11u].y, _2398 * cbModelParam._m0[11u].x))), _1616);
            frontier_phi_37_61_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1697 = frontier_phi_37_61_ladder_2;
        _1699 = frontier_phi_37_61_ladder_1;
        _1701 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1616);
        _1697 = _1685.x * cbModelParam._m0[1u].y;
        _1699 = _1685.y * cbModelParam._m0[1u].y;
        _1701 = _1685.z * cbModelParam._m0[1u].y;
    }
    float _1705 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _682);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1705 : min(cbModelParam._m0[25u].w, _1705));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1758 = fma(_868, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _860)) + cbModelParam._m0[21u].w;
        float _1762 = fma(_868, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _860)) + cbModelParam._m0[22u].w;
        float _1766 = fma(_868, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _860)) + cbModelParam._m0[23u].w;
        float _1769 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1772 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1775 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _2096;
        if (_1769 > 0.0)
        {
            _2096 = abs((1.0 - _1758) / _1769);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1758 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2096 = frontier_phi_49_45_ladder;
        }
        float _2417;
        if (_1772 > 0.0)
        {
            _2417 = abs((1.0 - _1762) / _1772);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1762 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2417 = frontier_phi_63_56_ladder;
        }
        float _2586;
        if (_1775 > 0.0)
        {
            _2586 = abs((1.0 - _1766) / _1775);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1766 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2586 = frontier_phi_77_72_ladder;
        }
        float _2588 = isnan(_2417) ? _2096 : (isnan(_2096) ? _2417 : min(_2096, _2417));
        float _2589 = isnan(_2586) ? _2588 : (isnan(_2588) ? _2586 : min(_2588, _2586));
        float _2593 = (_2589 * _1769) + _1758;
        float _2594 = (_2589 * _1772) + _1762;
        float _2595 = (_2589 * _1775) + _1766;
        float _2596 = _2589 * 9.9999997473787516355514526367188e-05;
        float _2597 = (-1.0) - _2596;
        float _2599 = _2596 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2595 > _2599) || ((_2595 < _2597) || ((_2594 > _2599) || ((_2594 < _2597) || ((_2593 < _2597) || (_2593 > _2599))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2595, cbModelParam._m0[17u].z, fma(_2594, cbModelParam._m0[17u].y, _2593 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2595, cbModelParam._m0[18u].z, fma(_2594, cbModelParam._m0[18u].y, _2593 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2595, cbModelParam._m0[19u].z, fma(_2594, cbModelParam._m0[19u].y, _2593 * cbModelParam._m0[19u].x))), _1706);
            frontier_phi_46_77_ladder = _2828.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2828.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2828.x * cbModelParam._m0[1u].z;
        }
        _1794 = frontier_phi_46_77_ladder_2;
        _1796 = frontier_phi_46_77_ladder_1;
        _1798 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1706);
        _1794 = _1778.x * cbModelParam._m0[1u].z;
        _1796 = _1778.y * cbModelParam._m0[1u].z;
        _1798 = _1778.z * cbModelParam._m0[1u].z;
    }
    float _1811 = (((_831 * _781) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1794 - _1697)) + _1697);
    float _1813 = (((_831 * _783) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1796 - _1699)) + _1699);
    float _1815 = (((_831 * _784) + _832) * _796) * ((cbModelParam._m0[1u].w * (_1798 - _1701)) + _1701);
    float _1818 = fma(_1815, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1821 = fma(_1815, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1824 = fma(_1815, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, _1811 * cbSceneParam._m0[91u].x));
    vec4 _1832 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_715, _716));
    float _1834 = _1832.w;
    float _1846 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1834);
    float _1847 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1834);
    float _1848 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1834);
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_755 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1860 = _796 + (-1.0);
    float _1863 = (cbLight._m0[_1855].x * _1860) + 1.0;
    float _1864 = (cbLight._m0[_1855].y * _1860) + 1.0;
    uint _1865 = _1854 + 5u;
    float _1871 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1875 = _1854 + 4u;
    float _1884 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1888 = _1854 | 1u;
    float _1899 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_679, _680, _681));
    float _1902 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_679, _680, _681));
    float _3796 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _3807 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1907 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * 0.3183098733425140380859375;
    float _1909 = (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))) * 0.3183098733425140380859375;
    float _1916 = ((cbLight._m0[_1865].x * _1871) * _1909) + (((cbLight._m0[_1875].x * _1846) * _1884) * _1907);
    float _1917 = ((_1871 * cbLight._m0[_1865].y) * _1909) + (((cbLight._m0[_1875].y * _1847) * _1884) * _1907);
    float _1918 = ((_1871 * cbLight._m0[_1865].z) * _1909) + (((cbLight._m0[_1875].z * _1848) * _1884) * _1907);
    uint _1920 = _1854 + 8u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _682) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1854].x + _707;
    float _1936 = cbLight._m0[_1854].y + _708;
    float _1937 = cbLight._m0[_1854].z + _709;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1854].xyz));
    float _3818 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _1949 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1950 = dot(vec3(_679, _680, _681), vec3(_1942, _1943, _1944));
    float _3840 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1953 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1954 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1942, _1943, _1944));
    float _3851 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1958 = _1934 * _1934;
    float _1962 = ((_1953 * _1953) * (_1958 + (-1.0))) + 1.0;
    float _1970 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
    float _1971 = 0.959999978542327880859375 - _778;
    float _1973 = 0.959999978542327880859375 - _779;
    float _1974 = 0.959999978542327880859375 - _780;
    float _1981 = 1.0 - _1934;
    float _1992 = (0.5 / (((_1949 * ((_1948 * _1981) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _1981) + _1934) * _1948))) * _1948;
    float _3862 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1994 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1958 / ((_1962 * _1962) * 3.141590118408203125));
    uint _2008 = _1854 + 9u;
    float _2019 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1888].w)) * _682) * 0.949999988079071044921875);
    float _2020 = _2019 * _2019;
    float _2021 = cbLight._m0[_1888].x + _707;
    float _2022 = cbLight._m0[_1888].y + _708;
    float _2023 = cbLight._m0[_1888].z + _709;
    float _2027 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
    float _2028 = _2027 * _2021;
    float _2029 = _2027 * _2022;
    float _2030 = _2027 * _2023;
    float _2031 = dot(vec3(_679, _680, _681), vec3(cbLight._m0[_1888].xyz));
    float _3873 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _2035 = dot(vec3(_679, _680, _681), vec3(_2028, _2029, _2030));
    float _3884 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2038 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _2039 = dot(vec3(cbLight._m0[_1888].xyz), vec3(_2028, _2029, _2030));
    float _3895 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2043 = _2020 * _2020;
    float _2047 = ((_2038 * _2038) * (_2043 + (-1.0))) + 1.0;
    float _2054 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
    float _2061 = 1.0 - _2020;
    float _2071 = (0.5 / (((_1949 * ((_2034 * _2061) + _2020)) + 9.9999999392252902907785028219223e-09) + (((_1949 * _2061) + _2020) * _2034))) * _2034;
    float _3906 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2073 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_2043 / ((_2047 * _2047) * 3.141590118408203125));
    float _2083 = (((((_2054 * _1971) + _781) * cbLight._m0[_2008].x) * _2073) * _1871) + ((((cbLight._m0[_1920].x * _1846) * ((_1970 * _1971) + _781)) * _1994) * _1884);
    float _2084 = (((((_2054 * _1973) + _783) * cbLight._m0[_2008].y) * _2073) * _1871) + ((((cbLight._m0[_1920].y * _1847) * ((_1970 * _1973) + _783)) * _1994) * _1884);
    float _2085 = (((((_2054 * _1974) + _784) * cbLight._m0[_2008].z) * _2073) * _1871) + ((((cbLight._m0[_1920].z * _1848) * ((_1970 * _1974) + _784)) * _1994) * _1884);
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    float _2208;
    float _2210;
    if (_1852.y == 0u)
    {
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2141 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2140;
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2140;
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2140;
        uvec4 _2155 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2156 = _2155.x;
        uint _2167 = uint((float(_2155.y) * floor(float(uint(cbSceneParam._m0[85u].y * _716) / _2156))) + floor(float(uint(cbSceneParam._m0[85u].x * _715) / _2156)));
        float _2177 = (log2(_2143 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2178 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        uint _2181 = uint(isnan(14.0) ? _2178 : (isnan(_2178) ? 14.0 : min(_2178, 14.0)));
        uvec4 _2186 = texelFetch(g_lightClusterGridBuffer, int(((_2181 << 2u) + (_2167 << 6u)) >> 2u));
        uint _2187 = _2186.x;
        uint _2188 = _2155.z;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        if (((((1u << ((_2188 >> 4u) & 15u)) + 4294967295u) & _2187) == 0u) || ((_2188 & 240u) == 0u))
        {
            _2278 = 0.0;
            _2280 = 0.0;
            _2282 = 0.0;
            _2284 = 0.0;
            _2286 = 0.0;
            _2288 = 0.0;
        }
        else
        {
            float _2279;
            float _2281;
            float _2283;
            float _2285;
            float _2287;
            float _2289;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            float _2459 = 0.0;
            uint _2460 = 0u;
            uint _2469;
            bool _2470;
            for (;;)
            {
                _2469 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2460 << 2u)) >> 2u)).x;
                _2470 = _2469 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2470)
                {
                    frontier_phi_74_pred = _2457;
                    frontier_phi_74_pred_1 = _2456;
                    frontier_phi_74_pred_2 = _2455;
                    frontier_phi_74_pred_3 = _2454;
                    frontier_phi_74_pred_4 = _2458;
                    frontier_phi_74_pred_5 = _2459;
                }
                else
                {
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    uint _2635;
                    _2629 = _2454;
                    _2630 = _2455;
                    _2631 = _2456;
                    _2632 = _2457;
                    _2633 = _2458;
                    _2634 = _2459;
                    _2635 = _2469;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    for (;;)
                    {
                        uint _2639 = uint(findLSB(_2635)) + (_2460 << 5u);
                        uint _2636 = (_2635 + 4294967295u) & _2635;
                        uint _2641 = _2639 * 48u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 3u)).x));
                        uint _2661 = (_2639 * 48u) + 4u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2680 = (_2639 * 48u) + 8u;
                        vec3 _2691 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x));
                        float _2695 = _2655.x - _2141;
                        float _2696 = _2655.y - _2142;
                        float _2697 = _2655.z - _2143;
                        float _2698 = dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697));
                        float _2701 = inversesqrt(_2698);
                        float _2702 = _2701 * _2695;
                        float _2703 = _2701 * _2696;
                        float _2704 = _2701 * _2697;
                        float _2705 = dot(vec3(_736, _739, _742), vec3(_2702, _2703, _2704));
                        float _2710 = 1.0 - (_2698 * _2655.w);
                        float _3927 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                        float _2712 = sqrt(_2698) * _2674.w;
                        float _2715 = 1.39999997615814208984375 / (_2712 + 1.39999997615814208984375);
                        float _2716 = _2715 * _2715;
                        float _2719 = ((1.0 - _2716) * _2705) + _2716;
                        float _2722 = _2712 * _2712;
                        float _2726 = ((isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0))) * _2711) / ((_2722 * 0.699999988079071044921875) + 1.0);
                        float _2730 = (-0.0) - _2141;
                        float _2731 = (-0.0) - _2142;
                        float _2732 = (-0.0) - _2143;
                        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
                        float _2737 = _2736 * _2730;
                        float _2738 = _2736 * _2731;
                        float _2739 = _2736 * _2732;
                        float _2747 = exp2(log2(1.0 / ((_2722 * 3.5) + 5.0)) * 0.25);
                        float _2748 = 1.0 - _812;
                        float _2755 = sqrt(1.0 - ((1.0 - (_2748 * _2748)) * (1.0 - (_2747 * _2747))));
                        float _2756 = _2755 * _2755;
                        float _2757 = _2756 * _2756;
                        float _2758 = _2737 + _2702;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
                        float _2768 = dot(vec3(_736, _739, _742), vec3(_2737, _2738, _2739));
                        float _3943 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                        float _2772 = dot(vec3(_736, _739, _742), vec3(_2764 * _2758, _2764 * _2759, _2764 * _2760));
                        float _3954 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2775 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                        float _2779 = ((_2775 * _2775) * (_2757 + (-1.0))) + 1.0;
                        float _2780 = _2715 * _2756;
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2705) + _2781;
                        float _3965 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                        float _2786 = 1.0 - _2756;
                        float _2796 = (0.5 / (((_2785 * ((_2771 * _2786) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _2786) + _2756) * _2771))) * _2785;
                        float _3976 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2807 = (((_2757 * 3.1415927410125732421875) * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) / ((_2779 * _2779) * ((_2722 * 2.1991131305694580078125) + 3.141590118408203125))) * _2711;
                        _2538 = (_2726 * _2674.x) + _2632;
                        _2539 = (_2726 * _2674.y) + _2633;
                        _2540 = (_2726 * _2674.z) + _2634;
                        _2535 = (_2807 * _2691.x) + _2629;
                        _2536 = (_2807 * _2691.y) + _2630;
                        _2537 = (_2807 * _2691.z) + _2631;
                        if (_2636 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2629 = _2535;
                            _2630 = _2536;
                            _2631 = _2537;
                            _2632 = _2538;
                            _2633 = _2539;
                            _2634 = _2540;
                            _2635 = _2636;
                        }
                    }
                    frontier_phi_74_pred = _2538;
                    frontier_phi_74_pred_1 = _2537;
                    frontier_phi_74_pred_2 = _2536;
                    frontier_phi_74_pred_3 = _2535;
                    frontier_phi_74_pred_4 = _2539;
                    frontier_phi_74_pred_5 = _2540;
                }
                _2285 = frontier_phi_74_pred;
                _2283 = frontier_phi_74_pred_1;
                _2281 = frontier_phi_74_pred_2;
                _2279 = frontier_phi_74_pred_3;
                _2287 = frontier_phi_74_pred_4;
                _2289 = frontier_phi_74_pred_5;
                uint _2461 = _2460 + 1u;
                if (_2461 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2454 = _2279;
                    _2455 = _2281;
                    _2456 = _2283;
                    _2457 = _2285;
                    _2458 = _2287;
                    _2459 = _2289;
                    _2460 = _2461;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2278 = _2279;
            _2280 = _2281;
            _2282 = _2283;
            _2284 = _2285;
            _2286 = _2287;
            _2288 = _2289;
        }
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.z;
        uint _2295 = (_2293 >> 8u) & 15u;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        if (((4294967295u << _2295) & _2187) == 0u)
        {
            _2422 = _2278;
            _2424 = _2280;
            _2426 = _2282;
            _2428 = _2284;
            _2430 = _2286;
            _2432 = _2288;
        }
        else
        {
            float _2447 = inversesqrt(dot(vec3(_2141, _2142, _2143), vec3(_2141, _2142, _2143)));
            float _2448 = _2447 * _2141;
            float _2449 = _2447 * _2142;
            float _2450 = _2447 * _2143;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2295 < ((_2293 >> 12u) & 15u))
            {
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2433;
                float _2612 = _2278;
                float _2613 = _2280;
                float _2614 = _2282;
                float _2615 = _2284;
                float _2616 = _2286;
                float _2617 = _2288;
                uint _2618 = _2295;
                uint _2627;
                bool _2628;
                for (;;)
                {
                    _2627 = texelFetch(g_lightClassification, int((((_2181 << 5u) + (_2167 << 9u)) + (_2618 << 2u)) >> 2u)).x;
                    _2628 = _2627 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2628)
                    {
                        frontier_phi_83_pred = _2615;
                        frontier_phi_83_pred_1 = _2614;
                        frontier_phi_83_pred_2 = _2613;
                        frontier_phi_83_pred_3 = _2612;
                        frontier_phi_83_pred_4 = _2617;
                        frontier_phi_83_pred_5 = _2616;
                    }
                    else
                    {
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _2838;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _2846 = _2612;
                        float _2847 = _2613;
                        float _2848 = _2614;
                        float _2849 = _2615;
                        float _2850 = _2616;
                        float _2851 = _2617;
                        uint _2852 = _2627;
                        uint _2853;
                        vec4 _2878;
                        float _2879;
                        vec4 _2894;
                        vec3 _2906;
                        vec4 _2921;
                        vec4 _2936;
                        float _2982;
                        bool _2983;
                        for (;;)
                        {
                            uint _2863 = ((_2618 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2852));
                            _2853 = (_2852 + 4294967295u) & _2852;
                            uint _2865 = _2863 * 40u;
                            _2878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2865 + 3u)).x));
                            _2879 = _2878.w;
                            uint _2881 = (_2863 * 40u) + 4u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2896 = (_2863 * 40u) + 8u;
                            _2906 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x));
                            uint _2908 = (_2863 * 40u) + 16u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2923 = (_2863 * 40u) + 20u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2863 * 40u) + 24u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2957 = (_2863 * 40u) + 28u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            _2982 = fma(_2143, _2970.z, fma(_2142, _2970.y, _2970.x * _2141)) + _2970.w;
                            _2983 = !((fma(_2143, _2951.z, fma(_2142, _2951.y, _2951.x * _2141)) + _2951.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2983)
                            {
                                float _3010 = _2878.x - _2141;
                                float _3011 = _2878.y - _2142;
                                float _3012 = _2878.z - _2143;
                                float _3013 = dot(vec3(_3010, _3011, _3012), vec3(_3010, _3011, _3012));
                                float _3016 = inversesqrt(_3013);
                                float _3017 = _3016 * _3010;
                                float _3018 = _3016 * _3011;
                                float _3019 = _3016 * _3012;
                                float _3023 = 1.0 - (_3013 / (_2879 * _2879));
                                float _3987 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
                                float _3024 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _3028 = sqrt(_3013) * _2894.w;
                                float _3030 = 1.39999997615814208984375 / (_3028 + 1.39999997615814208984375);
                                float _3031 = _3030 * _3030;
                                float _3034 = ((1.0 - _3031) * dot(vec3(_3017, _3018, _3019), vec3(_736, _739, _742))) + _3031;
                                float _3037 = _3028 * _3028;
                                float _3041 = (fma(_2143, _2921.z, fma(_2142, _2921.y, _2921.x * _2141)) + _2921.w) / _2982;
                                float _3042 = (fma(_2143, _2936.z, fma(_2142, _2936.y, _2936.x * _2141)) + _2936.w) / _2982;
                                float _3046 = 1.0 - dot(vec2(_3041, _3042), vec2(_3041, _3042));
                                float _4003 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                                float _3048 = _3047 * (((isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0))) * _3024) / ((_3037 * 0.699999988079071044921875) + 1.0));
                                float _3060 = exp2(log2(1.0 / ((_3037 * 3.5) + 5.0)) * 0.25);
                                float _3061 = 1.0 - _812;
                                float _3068 = sqrt(1.0 - ((1.0 - (_3061 * _3061)) * (1.0 - (_3060 * _3060))));
                                float _3069 = _3068 * _3068;
                                float _3070 = _3069 * _3069;
                                float _3071 = _3017 - _2448;
                                float _3072 = _3018 - _2449;
                                float _3073 = _3019 - _2450;
                                float _3077 = inversesqrt(dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073)));
                                float _3081 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2448, (-0.0) - _2449, (-0.0) - _2450));
                                float _4014 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                                float _3085 = dot(vec3(_736, _739, _742), vec3(_3077 * _3071, _3077 * _3072, _3077 * _3073));
                                float _4025 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                                float _3088 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                                float _3092 = ((_3088 * _3088) * (_3070 + (-1.0))) + 1.0;
                                float _3093 = _3030 * _3069;
                                float _3094 = _3093 * _3093;
                                float _3100 = ((1.0 - _3094) * dot(vec3(_736, _739, _742), vec3(_3017, _3018, _3019))) + _3094;
                                float _4036 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3101 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                                float _3102 = 1.0 - _3069;
                                float _3112 = (0.5 / (((_3101 * ((_3084 * _3102) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_3101 * _3102) + _3069) * _3084))) * _3101;
                                float _4047 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3122 = (_3047 * _3024) * (((_3070 * 3.1415927410125732421875) * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) / ((_3092 * _3092) * ((_3037 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3048 * _2894.x;
                                frontier_phi_89_pred_1 = _3122 * _2906.z;
                                frontier_phi_89_pred_2 = _3122 * _2906.y;
                                frontier_phi_89_pred_3 = _3122 * _2906.x;
                                frontier_phi_89_pred_4 = _3048 * _2894.z;
                                frontier_phi_89_pred_5 = _3048 * _2894.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3129 = frontier_phi_89_pred;
                            _3128 = frontier_phi_89_pred_1;
                            _3127 = frontier_phi_89_pred_2;
                            _3126 = frontier_phi_89_pred_3;
                            _3131 = frontier_phi_89_pred_4;
                            _3130 = frontier_phi_89_pred_5;
                            _2836 = _3129 + _2849;
                            _2837 = _3130 + _2850;
                            _2838 = _3131 + _2851;
                            _2833 = _3126 + _2846;
                            _2834 = _3127 + _2847;
                            _2835 = _3128 + _2848;
                            if (_2853 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2853;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2836;
                        frontier_phi_83_pred_1 = _2835;
                        frontier_phi_83_pred_2 = _2834;
                        frontier_phi_83_pred_3 = _2833;
                        frontier_phi_83_pred_4 = _2838;
                        frontier_phi_83_pred_5 = _2837;
                    }
                    _2429 = frontier_phi_83_pred;
                    _2427 = frontier_phi_83_pred_1;
                    _2425 = frontier_phi_83_pred_2;
                    _2423 = frontier_phi_83_pred_3;
                    _2433 = frontier_phi_83_pred_4;
                    _2431 = frontier_phi_83_pred_5;
                    uint _2619 = _2618 + 1u;
                    if (_2619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2612 = _2423;
                        _2613 = _2425;
                        _2614 = _2427;
                        _2615 = _2429;
                        _2616 = _2431;
                        _2617 = _2433;
                        _2618 = _2619;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2433;
                frontier_phi_65_66_ladder_1 = _2431;
                frontier_phi_65_66_ladder_2 = _2427;
                frontier_phi_65_66_ladder_3 = _2425;
                frontier_phi_65_66_ladder_4 = _2429;
                frontier_phi_65_66_ladder_5 = _2423;
            }
            else
            {
                frontier_phi_65_66_ladder = _2288;
                frontier_phi_65_66_ladder_1 = _2286;
                frontier_phi_65_66_ladder_2 = _2282;
                frontier_phi_65_66_ladder_3 = _2280;
                frontier_phi_65_66_ladder_4 = _2284;
                frontier_phi_65_66_ladder_5 = _2278;
            }
            _2422 = frontier_phi_65_66_ladder_5;
            _2424 = frontier_phi_65_66_ladder_3;
            _2426 = frontier_phi_65_66_ladder_2;
            _2428 = frontier_phi_65_66_ladder_4;
            _2430 = frontier_phi_65_66_ladder_1;
            _2432 = frontier_phi_65_66_ladder;
        }
        float _2437 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2200 = (_2437 * _2428) + _1916;
        _2202 = (_2437 * _2430) + _1917;
        _2204 = (_2437 * _2432) + _1918;
        _2206 = ((_2422 * _781) * _2437) + _2083;
        _2208 = ((_2424 * _783) * _2437) + _2084;
        _2210 = ((_2426 * _784) * _2437) + _2085;
    }
    else
    {
        _2200 = _1916;
        _2202 = _1917;
        _2204 = _1918;
        _2206 = _2083;
        _2208 = _2084;
        _2210 = _2085;
    }
    float _4063 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _4074 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _4085 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _2227 = ((isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_2200 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _796))) + ((_2206 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2228 = ((isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_2202 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _796))) + ((_2208 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    float _2229 = ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_2204 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _796))) + ((_2210 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1605)) * cbPerFrame._m0[3u].x);
    uint _2233 = _755 + 6u;
    float _2241 = _715 / cbSceneParam._m0[86u].x;
    float _2242 = _716 / cbSceneParam._m0[86u].y;
    vec4 _2256 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, (log2((isnan(cbSceneParam._m0[77u].w) ? _702 : (isnan(_702) ? cbSceneParam._m0[77u].w : min(_702, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2258 = _2256.x;
    float _2259 = _2256.y;
    float _2260 = _2256.z;
    float _2261 = _2256.w;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_702 > cbSceneParam._m0[78u].w)
    {
        float _2303 = isnan(_702) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _702 : min(cbSceneParam._m0[80u].w, _702));
        float _2304 = _2303 / _702;
        float _2315 = _2304 * _263;
        float _2316 = _264 * _2304;
        float _2317 = (-0.0) - _2316;
        float _2318 = _2304 * _265;
        float _2320 = (cbSceneParam._m0[77u].w * _2317) / _2303;
        float _2321 = _2320 + cbSceneParam._m0[79u].w;
        float _2322 = cbSceneParam._m0[79u].w - _2316;
        float _2328 = sqrt(((_2315 * _2315) + (_2316 * _2316)) + (_2318 * _2318));
        float _2331 = (1.0 - (cbSceneParam._m0[77u].w / _2303)) * _2328;
        float _2337 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2339 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2548;
        if (abs((_2317 - _2320) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2548 = ((((_2321 > 0.0) ? exp2(_2337 * _2321) : (2.0 - exp2(_2339 * _2321))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2331;
        }
        else
        {
            float _2483 = 1.0 / cbSceneParam._m0[80u].x;
            float _2484 = isnan(_2322) ? _2321 : (isnan(_2321) ? _2322 : max(_2321, _2322));
            float _2485 = isnan(_2322) ? _2321 : (isnan(_2321) ? _2322 : min(_2321, _2322));
            float _2494 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : min(_2484, 0.0));
            float _2495 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : min(_2485, 0.0));
            _2548 = ((abs(_2328 / _2317) * cbSceneParam._m0[80u].y) * ((((_2494 - _2495) * 2.0) - ((exp2(_2337 * (isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0)))) - exp2(_2337 * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0))))) * _2483)) - ((exp2(_2339 * _2494) - exp2(_2339 * _2495)) * _2483))) + (_2331 * cbSceneParam._m0[80u].z);
        }
        vec4 _2550 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2241, _2242, 1.0), 0.0);
        float _2559 = exp2((_2548 * (-1.44269502162933349609375)) * (1.0 - _2550.w));
        float _2560 = log2(_2559);
        float _2576 = log2(_2261);
        _2341 = (exp2(_2576 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].x)) * _2550.x) / cbSceneParam._m0[78u].x)) + _2258;
        _2343 = (exp2(_2576 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].y)) * _2550.y) / cbSceneParam._m0[78u].y)) + _2259;
        _2345 = (exp2(_2576 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].z)) * _2550.z) / cbSceneParam._m0[78u].z)) + _2260;
        _2347 = _2559 * _2261;
    }
    else
    {
        _2341 = _2258;
        _2343 = _2259;
        _2345 = _2260;
        _2347 = _2261;
    }
    float _2359 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2360 = _2359 == 3.0;
    float _2361 = log2(_2347);
    float _2368 = exp2(_2361 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0)));
    float _2369 = exp2(_2361 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0)));
    float _2370 = exp2(_2361 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0)));
    float _2379 = (_2359 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2379 * (_2360 ? _2368 : (_2368 + (cbSceneParam._m0[72u].w * _2341)));
    SV_Target.y = _2379 * (_2360 ? _2369 : (_2369 + (cbSceneParam._m0[72u].w * _2343)));
    SV_Target.z = _2379 * (_2360 ? _2370 : (_2370 + (cbSceneParam._m0[72u].w * _2345)));
    SV_Target.w = cbInstanceData._m0[_2233].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2233].w;
}


