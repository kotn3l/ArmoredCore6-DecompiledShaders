#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _326 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _333 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _342 = cbMtdParam._m0[23u].x + _257;
    float _343 = cbMtdParam._m0[23u].y + _258;
    float _344 = cbMtdParam._m0[23u].z + _259;
    float _358 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_326 * _186, _326 * _187, _326 * _188));
    float _359 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_333 * _200, _333 * _201, _333 * _202));
    float _360 = (-0.0) - dot(vec3(_342, _343, _344), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _364 * _360;
    float _367 = (cbMtdParam._m0[19u].w * _358) * _364;
    float _369 = (cbMtdParam._m0[20u].x * _359) * _364;
    float _372 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _373 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _391;
    float _394;
    float _396;
    if (_367 > 0.0)
    {
        float _377 = (1.0 - _372) / _367;
        _391 = _377;
        _394 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_377 * _365)) * 0.16666667163372039794921875;
        _396 = (fract((_377 * _369) + _373) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _392 = ((-0.0) - _372) / _367;
            frontier_phi_3_2_ladder = (fract((_392 * _369) + _373) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = (fract(_392 * _365) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _391 = frontier_phi_3_2_ladder_1;
        _394 = frontier_phi_3_2_ladder_2;
        _396 = frontier_phi_3_2_ladder;
    }
    float _422;
    float _424;
    float _426;
    if (_369 > 0.0)
    {
        float _409 = (1.0 - _373) / _369;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_409 < _391)
        {
            frontier_phi_8_5_ladder = (fract((_409 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _409;
            frontier_phi_8_5_ladder_2 = (fract(_409 * _365) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _394;
            frontier_phi_8_5_ladder_1 = _391;
            frontier_phi_8_5_ladder_2 = _396;
        }
        _422 = frontier_phi_8_5_ladder_1;
        _424 = frontier_phi_8_5_ladder;
        _426 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_369 < 0.0)
        {
            float _423 = ((-0.0) - _373) / _369;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_423 < _391)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_423 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _423;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_423 * _365) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _394;
                frontier_phi_8_6_ladder_9_ladder_1 = _391;
                frontier_phi_8_6_ladder_9_ladder_2 = _396;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _394;
            frontier_phi_8_6_ladder_1 = _391;
            frontier_phi_8_6_ladder_2 = _396;
        }
        _422 = frontier_phi_8_6_ladder_1;
        _424 = frontier_phi_8_6_ladder;
        _426 = frontier_phi_8_6_ladder_2;
    }
    float _430 = (_365 > 0.0) ? (cbMtdParam._m0[16u].w / _365) : 5000.0;
    float _443;
    float _444;
    if (_430 < _422)
    {
        _443 = ((_372 + cbMtdParam._m0[17u].x) + (_430 * _367)) * 0.16666667163372039794921875;
        _444 = (((_430 * _369) + _373) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _443 = _424;
        _444 = _426;
    }
    vec4 _446 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_443, _444));
    float _451 = _446.x * cbMtdParam._m0[13u].x;
    float _452 = _446.y * cbMtdParam._m0[13u].y;
    float _453 = _446.z * cbMtdParam._m0[13u].z;
    vec4 _471 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _473 = _471.x;
    vec4 _485 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _493 = (_485.x * 2.0) + (-1.0);
    float _495 = (_485.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _3119 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))));
    float _502 = _485.z * _284;
    float _505 = fma(_501, _193, fma(_495, _200, _493 * _186));
    float _508 = fma(_501, _194, fma(_495, _201, _493 * _187));
    float _511 = fma(_501, _195, fma(_495, _202, _493 * _188));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _3130 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _519 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _3141 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3152 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3163 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3174 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _523 = isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _544 = _257 * _543;
    float _545 = _258 * _543;
    float _546 = _259 * _543;
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _577 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _580 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _594 = _593 + 9u;
    uint _595 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3185 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
    float _3196 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0));
    float _607 = 1.0 - _523;
    float _608 = _604 * _607;
    float _609 = _605 * _607;
    float _610 = _606 * _607;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _523;
    float _616 = (_605 + (-0.039999999105930328369140625)) * _523;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _523;
    float _618 = _615 + 0.039999999105930328369140625;
    float _620 = _616 + 0.039999999105930328369140625;
    float _621 = _617 + 0.039999999105930328369140625;
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _633 = _630.x * TEXCOORD.z;
    float _634 = dot(vec3(_516, _517, _518), vec3(_544, _545, _546));
    float _637 = _634 * 2.0;
    float _641 = (_637 * _516) - _544;
    float _642 = (_637 * _517) - _545;
    float _643 = (_637 * _518) - _546;
    float _647 = abs(dot(vec3(_544, _545, _546), vec3(_516, _517, _518)));
    float _3218 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _649 = sqrt(_519);
    float _662 = exp2((_649 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_649 * 3.0));
    float _668 = (1.0 - _662) * ((_649 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _669 = _662 * _649;
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _742 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _746 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _770 = _697 + _516;
        float _771 = _701 + _517;
        float _772 = _705 + _518;
        float _782 = fma(_772, cbModelParam._m0[26u].z, fma(_771, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770)) - _738;
        float _783 = fma(_772, cbModelParam._m0[27u].z, fma(_771, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770)) - _742;
        float _784 = fma(_772, cbModelParam._m0[28u].z, fma(_771, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770)) - _746;
        float _788 = inversesqrt(dot(vec3(_782, _783, _784), vec3(_782, _783, _784)));
        float _801 = ((_788 * _782) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _802 = ((_788 * _783) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_788 * _784) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        float _840 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_806.x + (-0.5));
        float _842 = _840 * (_806.y + (-0.5));
        float _843 = _840 * (_806.z + (-0.5));
        float _850 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _851 = _850 * (_813.x + (-0.5));
        float _852 = _850 * (_813.y + (-0.5));
        float _853 = _850 * (_813.z + (-0.5));
        float _860 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_820.x + (-0.5));
        float _862 = _860 * (_820.y + (-0.5));
        float _863 = _860 * (_820.z + (-0.5));
        float _870 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_827.x + (-0.5));
        float _872 = _870 * (_827.y + (-0.5));
        float _873 = _870 * (_827.z + (-0.5));
        float _874 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = _841 * 0.5;
        float _878 = _851 * 0.5;
        float _879 = _861 * 0.5;
        float _880 = dot(vec3(_877, _878, _879), vec3(_877, _878, _879));
        float _885 = (_880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_880);
        float _894 = (dot(vec3(_516, _517, _518), vec3(_885 * _877, _885 * _878, _885 * _879)) + 1.0) * 0.5;
        float _3244 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _904 = sqrt(((_878 * _878) + (_877 * _877)) + (_879 * _879)) / (_874 + 9.9999997473787516355514526367188e-06);
        float _3255 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
        float _906 = _905 * 2.0;
        float _910 = (1.0 - _905) / (_905 + 1.0);
        float _3266 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
        float _920 = ((((1.0 - _911) * (_906 + 2.0)) * exp2(log2(isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * (_906 + 1.0))) + _911) * _874;
        float _921 = _842 * 0.5;
        float _922 = _852 * 0.5;
        float _923 = _862 * 0.5;
        float _924 = dot(vec3(_921, _922, _923), vec3(_921, _922, _923));
        float _929 = (_924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_924);
        float _937 = (dot(vec3(_516, _517, _518), vec3(_929 * _921, _929 * _922, _929 * _923)) + 1.0) * 0.5;
        float _3277 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _946 = sqrt(((_922 * _922) + (_921 * _921)) + (_923 * _923)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3288 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0));
        float _948 = _947 * 2.0;
        float _952 = (1.0 - _947) / (_947 + 1.0);
        float _3299 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3299 : (isnan(_3299) ? 1.0 : min(_3299, 1.0));
        float _962 = ((((1.0 - _953) * (_948 + 2.0)) * exp2(log2(isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0))) * (_948 + 1.0))) + _953) * _875;
        float _963 = _843 * 0.5;
        float _964 = _853 * 0.5;
        float _965 = _863 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _979 = (dot(vec3(_516, _517, _518), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _988 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _990 = _989 * 2.0;
        float _994 = (1.0 - _989) / (_989 + 1.0);
        float _3332 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1004 = ((((1.0 - _995) * (_990 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_990 + 1.0))) + _995) * _876;
        _1012 = _843;
        _1013 = _842;
        _1014 = _841;
        _1015 = _853;
        _1016 = _852;
        _1017 = _851;
        _1018 = _863;
        _1019 = _862;
        _1020 = _861;
        _1021 = _876;
        _1022 = _875;
        _1023 = _874;
        _1024 = cbModelParam._m0[36u].z * (isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0)));
        _1025 = cbModelParam._m0[36u].z * (isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0)));
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0)));
    }
    else
    {
        _1012 = _393;
        _1013 = _393;
        _1014 = _393;
        _1015 = _393;
        _1016 = _393;
        _1017 = _393;
        _1018 = _393;
        _1019 = _393;
        _1020 = _393;
        _1021 = _393;
        _1022 = _393;
        _1023 = _393;
        _1024 = 0.0;
        _1025 = 0.0;
        _1026 = 0.0;
    }
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1052 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1056 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1060 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1083 = _697 + _516;
        float _1084 = _701 + _517;
        float _1085 = _705 + _518;
        float _1095 = fma(_1085, cbModelParam._m0[30u].z, fma(_1084, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1083)) - _1052;
        float _1096 = fma(_1085, cbModelParam._m0[31u].z, fma(_1084, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1083)) - _1056;
        float _1097 = fma(_1085, cbModelParam._m0[32u].z, fma(_1084, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1083)) - _1060;
        float _1101 = inversesqrt(dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097)));
        float _1114 = ((_1101 * _1095) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1052 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1115 = ((_1101 * _1096) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1056 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1116 = ((_1101 * _1097) / cbModelParam._m0[35u].z) + ((((((_1060 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1114, _1115, _1116), 0.0);
        float _1151 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1118.x + (-0.5));
        float _1153 = _1151 * (_1118.y + (-0.5));
        float _1154 = _1151 * (_1118.z + (-0.5));
        float _1161 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1125.x + (-0.5));
        float _1163 = _1161 * (_1125.y + (-0.5));
        float _1164 = _1161 * (_1125.z + (-0.5));
        float _1171 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1132.x + (-0.5));
        float _1173 = _1171 * (_1132.y + (-0.5));
        float _1174 = _1171 * (_1132.z + (-0.5));
        float _1181 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1139.x + (-0.5));
        float _1183 = _1181 * (_1139.y + (-0.5));
        float _1184 = _1181 * (_1139.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_516, _517, _518), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3395 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_1215 + 1.0))) + _1220) * _1185;
        float _1230 = _1153 * 0.5;
        float _1231 = _1163 * 0.5;
        float _1232 = _1173 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1246 = (dot(vec3(_516, _517, _518), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1255 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1257 = _1256 * 2.0;
        float _1261 = (1.0 - _1256) / (_1256 + 1.0);
        float _3428 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1271 = ((((1.0 - _1262) * (_1257 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1257 + 1.0))) + _1262) * _1186;
        float _1272 = _1154 * 0.5;
        float _1273 = _1164 * 0.5;
        float _1274 = _1174 * 0.5;
        float _1275 = dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274));
        float _1280 = (_1275 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1275);
        float _1288 = (dot(vec3(_516, _517, _518), vec3(_1280 * _1272, _1280 * _1273, _1280 * _1274)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1297 = sqrt(((_1273 * _1273) + (_1272 * _1272)) + (_1274 * _1274)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _3461 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1299 + 1.0))) + _1304) * _1187;
        _1321 = _1154;
        _1322 = _1153;
        _1323 = _1152;
        _1324 = _1164;
        _1325 = _1163;
        _1326 = _1162;
        _1327 = _1174;
        _1328 = _1173;
        _1329 = _1172;
        _1330 = _1187;
        _1331 = _1186;
        _1332 = _1185;
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
    }
    else
    {
        _1321 = _393;
        _1322 = _393;
        _1323 = _393;
        _1324 = _393;
        _1325 = _393;
        _1326 = _393;
        _1327 = _393;
        _1328 = _393;
        _1329 = _393;
        _1330 = _393;
        _1331 = _393;
        _1332 = _393;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1024)) + _1024;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1025)) + _1025;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1026)) + _1026;
    float _1368 = fma(_1347, cbSceneParam._m0[89u].z, fma(_1346, cbSceneParam._m0[89u].y, _1345 * cbSceneParam._m0[89u].x));
    float _1371 = fma(_1347, cbSceneParam._m0[90u].z, fma(_1346, cbSceneParam._m0[90u].y, _1345 * cbSceneParam._m0[90u].x));
    float _1374 = fma(_1347, cbSceneParam._m0[91u].z, fma(_1346, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1345));
    float _1389 = _641 * 0.5;
    float _1390 = _642 * 0.5;
    float _1391 = _643 * 0.5;
    float _1392 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1395 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1398 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1432;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1405 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1012, _1015, _1018, _1021));
        float _1409 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1013, _1016, _1019, _1022));
        float _1413 = dot(vec4(_1389, _1390, _1391, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1420 = dot(vec4(cbModelParam._m0[39u]), vec4(_1389, _1390, _1391, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1420) ? 0.0 : (isnan(0.0) ? _1420 : max(0.0, _1420))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1443;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1434 = dot(vec4(cbModelParam._m0[40u]), vec4(_1389, _1390, _1391, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)), isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1447 = (_1443 * cbModelParam._m0[1u].x) + (_1432 * (1.0 - cbModelParam._m0[1u].x));
    float _1457 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _519);
    float _1458 = isnan(_1457) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1457 : min(cbModelParam._m0[25u].z, _1457));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1507 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1511 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1515 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1518 = fma(_643, cbModelParam._m0[13u].z, fma(_642, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _641));
        float _1521 = fma(_643, cbModelParam._m0[14u].z, fma(_642, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _641));
        float _1524 = fma(_643, cbModelParam._m0[15u].z, fma(_642, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _641));
        float _1552;
        if (_1518 > 0.0)
        {
            _1552 = abs((1.0 - _1507) / _1518);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1507 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1552 = frontier_phi_26_24_ladder;
        }
        float _1914;
        if (_1521 > 0.0)
        {
            _1914 = abs((1.0 - _1511) / _1521);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1511 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1914 = frontier_phi_35_31_ladder;
        }
        float _2230;
        if (_1524 > 0.0)
        {
            _2230 = abs((1.0 - _1515) / _1524);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1515 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2230 = frontier_phi_49_42_ladder;
        }
        float _2232 = isnan(_1914) ? _1552 : (isnan(_1552) ? _1914 : min(_1552, _1914));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1518) + _1507;
        float _2238 = (_2233 * _1521) + _1511;
        float _2239 = (_2233 * _1524) + _1515;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2241 = (-1.0) - _2240;
        float _2243 = _2240 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2239 > _2243) || ((_2239 < _2241) || ((_2238 > _2243) || ((_2238 < _2241) || ((_2237 < _2241) || (_2237 > _2243))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1458);
            frontier_phi_25_49_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1540 = frontier_phi_25_49_ladder_2;
        _1542 = frontier_phi_25_49_ladder_1;
        _1544 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1528 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_641, _642, _643), _1458);
        _1540 = _1528.x * cbModelParam._m0[1u].y;
        _1542 = _1528.y * cbModelParam._m0[1u].y;
        _1544 = _1528.z * cbModelParam._m0[1u].y;
    }
    float _1548 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _519);
    float _1549 = isnan(_1548) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1548 : min(cbModelParam._m0[25u].w, _1548));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1604 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1608 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1612 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1615 = fma(_643, cbModelParam._m0[21u].z, fma(_642, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _641));
        float _1618 = fma(_643, cbModelParam._m0[22u].z, fma(_642, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _641));
        float _1621 = fma(_643, cbModelParam._m0[23u].z, fma(_642, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _641));
        float _1919;
        if (_1615 > 0.0)
        {
            _1919 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1919 = frontier_phi_37_33_ladder;
        }
        float _2256;
        if (_1618 > 0.0)
        {
            _2256 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2256 = frontier_phi_51_44_ladder;
        }
        float _2425;
        if (_1621 > 0.0)
        {
            _2425 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2425 = frontier_phi_65_60_ladder;
        }
        float _2427 = isnan(_2256) ? _1919 : (isnan(_1919) ? _2256 : min(_1919, _2256));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1615) + _1604;
        float _2433 = (_2428 * _1618) + _1608;
        float _2434 = (_2428 * _1621) + _1612;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2436 = (-1.0) - _2435;
        float _2438 = _2435 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2434 > _2438) || ((_2434 < _2436) || ((_2433 > _2438) || ((_2433 < _2436) || ((_2432 < _2436) || (_2432 > _2438))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2667 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2434, cbModelParam._m0[17u].z, fma(_2433, cbModelParam._m0[17u].y, _2432 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2434, cbModelParam._m0[18u].z, fma(_2433, cbModelParam._m0[18u].y, _2432 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2434, cbModelParam._m0[19u].z, fma(_2433, cbModelParam._m0[19u].y, _2432 * cbModelParam._m0[19u].x))), _1549);
            frontier_phi_34_65_ladder = _2667.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2667.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2667.z * cbModelParam._m0[1u].z;
        }
        _1640 = frontier_phi_34_65_ladder_1;
        _1642 = frontier_phi_34_65_ladder;
        _1644 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_641, _642, _643), _1549);
        _1640 = _1624.x * cbModelParam._m0[1u].z;
        _1642 = _1624.y * cbModelParam._m0[1u].z;
        _1644 = _1624.z * cbModelParam._m0[1u].z;
    }
    float _1657 = (((_668 * _618) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1640 - _1540)) + _1540);
    float _1659 = (((_668 * _620) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1642 - _1542)) + _1542);
    float _1661 = (((_668 * _621) + _669) * _633) * ((cbModelParam._m0[1u].w * (_1644 - _1544)) + _1544);
    float _1664 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1657 * cbSceneParam._m0[89u].x));
    float _1667 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1657 * cbSceneParam._m0[90u].x));
    float _1670 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1657 * cbSceneParam._m0[91u].x));
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1688 = _633 + (-1.0);
    float _1691 = (cbLight._m0[_1683].x * _1688) + 1.0;
    float _1692 = (cbLight._m0[_1683].y * _1688) + 1.0;
    uint _1693 = _1682 + 5u;
    float _1699 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1703 = _1682 + 4u;
    float _1710 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1714 = _1682 | 1u;
    float _1725 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_516, _517, _518));
    float _1728 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_516, _517, _518));
    float _3597 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _3608 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1733 = (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * 0.3183098733425140380859375;
    float _1735 = (isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * 0.3183098733425140380859375;
    float _1742 = ((cbLight._m0[_1693].x * _1699) * _1735) + ((cbLight._m0[_1703].x * _1710) * _1733);
    float _1743 = ((_1699 * cbLight._m0[_1693].y) * _1735) + ((_1710 * cbLight._m0[_1703].y) * _1733);
    float _1744 = ((_1699 * cbLight._m0[_1693].z) * _1735) + ((_1710 * cbLight._m0[_1703].z) * _1733);
    uint _1746 = _1682 + 8u;
    float _1759 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1682].w)) * _519) * 0.949999988079071044921875);
    float _1760 = _1759 * _1759;
    float _1761 = cbLight._m0[_1682].x + _544;
    float _1762 = cbLight._m0[_1682].y + _545;
    float _1763 = cbLight._m0[_1682].z + _546;
    float _1767 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
    float _1768 = _1767 * _1761;
    float _1769 = _1767 * _1762;
    float _1770 = _1767 * _1763;
    float _1771 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1682].xyz));
    float _3619 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _1775 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _1776 = dot(vec3(_516, _517, _518), vec3(_1768, _1769, _1770));
    float _3641 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
    float _1780 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1768, _1769, _1770));
    float _3652 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1784 = _1760 * _1760;
    float _1788 = ((_1779 * _1779) * (_1784 + (-1.0))) + 1.0;
    float _1796 = exp2(log2(1.0 - (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * 5.0);
    float _1797 = 0.959999978542327880859375 - _615;
    float _1799 = 0.959999978542327880859375 - _616;
    float _1800 = 0.959999978542327880859375 - _617;
    float _1807 = 1.0 - _1760;
    float _1818 = (0.5 / (((_1775 * ((_1774 * _1807) + _1760)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1807) + _1760) * _1774))) * _1774;
    float _3663 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1784 / ((_1788 * _1788) * 3.141590118408203125));
    uint _1831 = _1682 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _519) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1714].x + _544;
    float _1845 = cbLight._m0[_1714].y + _545;
    float _1846 = cbLight._m0[_1714].z + _546;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_1714].xyz));
    float _3674 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _1858 = dot(vec3(_516, _517, _518), vec3(_1851, _1852, _1853));
    float _3685 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1851, _1852, _1853));
    float _3696 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0)))) * 5.0);
    float _1884 = 1.0 - _1843;
    float _1894 = (0.5 / (((_1775 * ((_1857 * _1884) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1775 * _1884) + _1843) * _1857))) * _1857;
    float _3707 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1896 = (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1906 = (((((_1877 * _1797) + _618) * cbLight._m0[_1831].x) * _1896) * _1699) + (((((_1796 * _1797) + _618) * cbLight._m0[_1746].x) * _1820) * _1710);
    float _1907 = (((((_1877 * _1799) + _620) * cbLight._m0[_1831].y) * _1896) * _1699) + (((((_1796 * _1799) + _620) * cbLight._m0[_1746].y) * _1820) * _1710);
    float _1908 = (((((_1877 * _1800) + _621) * cbLight._m0[_1831].z) * _1896) * _1699) + (((((_1796 * _1800) + _621) * cbLight._m0[_1746].z) * _1820) * _1710);
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    float _2031;
    float _2033;
    if (_1680.y == 0u)
    {
        float _1963 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1964 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1963;
        float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1963;
        float _1966 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1963;
        uvec4 _1978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1979 = _1978.x;
        uint _1990 = uint((float(_1978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _1979))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _1979)));
        float _2000 = (log2(_1966 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2001 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
        uint _2004 = uint(isnan(14.0) ? _2001 : (isnan(_2001) ? 14.0 : min(_2001, 14.0)));
        uvec4 _2009 = texelFetch(g_lightClusterGridBuffer, int(((_2004 << 2u) + (_1990 << 6u)) >> 2u));
        uint _2010 = _2009.x;
        uint _2011 = _1978.z;
        float _2117;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        if (((((1u << ((_2011 >> 4u) & 15u)) + 4294967295u) & _2010) == 0u) || ((_2011 & 240u) == 0u))
        {
            _2117 = 0.0;
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
        }
        else
        {
            float _2118;
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2293 = 0.0;
            float _2294 = 0.0;
            float _2295 = 0.0;
            float _2296 = 0.0;
            float _2297 = 0.0;
            float _2298 = 0.0;
            uint _2299 = 0u;
            uint _2308;
            bool _2309;
            for (;;)
            {
                _2308 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2299 << 2u)) >> 2u)).x;
                _2309 = _2308 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2309)
                {
                    frontier_phi_62_pred = _2294;
                    frontier_phi_62_pred_1 = _2293;
                    frontier_phi_62_pred_2 = _2295;
                    frontier_phi_62_pred_3 = _2298;
                    frontier_phi_62_pred_4 = _2297;
                    frontier_phi_62_pred_5 = _2296;
                }
                else
                {
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    uint _2474;
                    _2468 = _2293;
                    _2469 = _2294;
                    _2470 = _2295;
                    _2471 = _2296;
                    _2472 = _2297;
                    _2473 = _2298;
                    _2474 = _2308;
                    float _2374;
                    float _2375;
                    float _2376;
                    float _2377;
                    float _2378;
                    float _2379;
                    for (;;)
                    {
                        uint _2478 = uint(findLSB(_2474)) + (_2299 << 5u);
                        uint _2475 = (_2474 + 4294967295u) & _2474;
                        uint _2480 = _2478 * 48u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2500 = (_2478 * 48u) + 4u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 3u)).x));
                        uint _2519 = (_2478 * 48u) + 8u;
                        vec3 _2530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x));
                        float _2534 = _2494.x - _1964;
                        float _2535 = _2494.y - _1965;
                        float _2536 = _2494.z - _1966;
                        float _2537 = dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536));
                        float _2540 = inversesqrt(_2537);
                        float _2541 = _2540 * _2534;
                        float _2542 = _2540 * _2535;
                        float _2543 = _2540 * _2536;
                        float _2544 = dot(vec3(_574, _577, _580), vec3(_2541, _2542, _2543));
                        float _2549 = 1.0 - (_2537 * _2494.w);
                        float _3728 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
                        float _2551 = sqrt(_2537) * _2513.w;
                        float _2554 = 1.39999997615814208984375 / (_2551 + 1.39999997615814208984375);
                        float _2555 = _2554 * _2554;
                        float _2558 = ((1.0 - _2555) * _2544) + _2555;
                        float _2561 = _2551 * _2551;
                        float _2565 = ((isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * _2550) / ((_2561 * 0.699999988079071044921875) + 1.0);
                        float _2569 = (-0.0) - _1964;
                        float _2570 = (-0.0) - _1965;
                        float _2571 = (-0.0) - _1966;
                        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
                        float _2576 = _2575 * _2569;
                        float _2577 = _2575 * _2570;
                        float _2578 = _2575 * _2571;
                        float _2586 = exp2(log2(1.0 / ((_2561 * 3.5) + 5.0)) * 0.25);
                        float _2587 = 1.0 - _649;
                        float _2594 = sqrt(1.0 - ((1.0 - (_2587 * _2587)) * (1.0 - (_2586 * _2586))));
                        float _2595 = _2594 * _2594;
                        float _2596 = _2595 * _2595;
                        float _2597 = _2576 + _2541;
                        float _2598 = _2577 + _2542;
                        float _2599 = _2578 + _2543;
                        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
                        float _2607 = dot(vec3(_574, _577, _580), vec3(_2576, _2577, _2578));
                        float _3744 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
                        float _2610 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
                        float _2611 = dot(vec3(_574, _577, _580), vec3(_2603 * _2597, _2603 * _2598, _2603 * _2599));
                        float _3755 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2614 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                        float _2618 = ((_2614 * _2614) * (_2596 + (-1.0))) + 1.0;
                        float _2619 = _2554 * _2595;
                        float _2620 = _2619 * _2619;
                        float _2623 = ((1.0 - _2620) * _2544) + _2620;
                        float _3766 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                        float _2624 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
                        float _2625 = 1.0 - _2595;
                        float _2635 = (0.5 / (((_2624 * ((_2610 * _2625) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2624 * _2625) + _2595) * _2610))) * _2624;
                        float _3777 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                        float _2646 = (((_2596 * 3.1415927410125732421875) * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) / ((_2618 * _2618) * ((_2561 * 2.1991131305694580078125) + 3.141590118408203125))) * _2550;
                        _2377 = (_2565 * _2513.x) + _2471;
                        _2378 = (_2565 * _2513.y) + _2472;
                        _2379 = (_2565 * _2513.z) + _2473;
                        _2374 = (_2646 * _2530.x) + _2468;
                        _2375 = (_2646 * _2530.y) + _2469;
                        _2376 = (_2646 * _2530.z) + _2470;
                        if (_2475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2468 = _2374;
                            _2469 = _2375;
                            _2470 = _2376;
                            _2471 = _2377;
                            _2472 = _2378;
                            _2473 = _2379;
                            _2474 = _2475;
                        }
                    }
                    frontier_phi_62_pred = _2375;
                    frontier_phi_62_pred_1 = _2374;
                    frontier_phi_62_pred_2 = _2376;
                    frontier_phi_62_pred_3 = _2379;
                    frontier_phi_62_pred_4 = _2378;
                    frontier_phi_62_pred_5 = _2377;
                }
                _2120 = frontier_phi_62_pred;
                _2118 = frontier_phi_62_pred_1;
                _2122 = frontier_phi_62_pred_2;
                _2128 = frontier_phi_62_pred_3;
                _2126 = frontier_phi_62_pred_4;
                _2124 = frontier_phi_62_pred_5;
                uint _2300 = _2299 + 1u;
                if (_2300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2293 = _2118;
                    _2294 = _2120;
                    _2295 = _2122;
                    _2296 = _2124;
                    _2297 = _2126;
                    _2298 = _2128;
                    _2299 = _2300;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2117 = _2118;
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
        }
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.z;
        uint _2134 = (_2132 >> 8u) & 15u;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((4294967295u << _2134) & _2010) == 0u)
        {
            _2261 = _2117;
            _2263 = _2119;
            _2265 = _2121;
            _2267 = _2123;
            _2269 = _2125;
            _2271 = _2127;
        }
        else
        {
            float _2286 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
            float _2287 = _2286 * _1964;
            float _2288 = _2286 * _1965;
            float _2289 = _2286 * _1966;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2134 < ((_2132 >> 12u) & 15u))
            {
                float _2262;
                float _2264;
                float _2266;
                float _2268;
                float _2270;
                float _2272;
                float _2451 = _2117;
                float _2452 = _2119;
                float _2453 = _2121;
                float _2454 = _2123;
                float _2455 = _2125;
                float _2456 = _2127;
                uint _2457 = _2134;
                uint _2466;
                bool _2467;
                for (;;)
                {
                    _2466 = texelFetch(g_lightClassification, int((((_2004 << 5u) + (_1990 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                    _2467 = _2466 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2467)
                    {
                        frontier_phi_71_pred = _2452;
                        frontier_phi_71_pred_1 = _2451;
                        frontier_phi_71_pred_2 = _2456;
                        frontier_phi_71_pred_3 = _2455;
                        frontier_phi_71_pred_4 = _2454;
                        frontier_phi_71_pred_5 = _2453;
                    }
                    else
                    {
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2676;
                        float _2677;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        float _2685 = _2451;
                        float _2686 = _2452;
                        float _2687 = _2453;
                        float _2688 = _2454;
                        float _2689 = _2455;
                        float _2690 = _2456;
                        uint _2691 = _2466;
                        uint _2692;
                        vec4 _2717;
                        float _2718;
                        vec4 _2733;
                        vec3 _2745;
                        vec4 _2760;
                        vec4 _2775;
                        float _2821;
                        bool _2822;
                        for (;;)
                        {
                            uint _2702 = ((_2457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2691));
                            _2692 = (_2691 + 4294967295u) & _2691;
                            uint _2704 = _2702 * 40u;
                            _2717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2704 + 3u)).x));
                            _2718 = _2717.w;
                            uint _2720 = (_2702 * 40u) + 4u;
                            _2733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 3u)).x));
                            uint _2735 = (_2702 * 40u) + 8u;
                            _2745 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x));
                            uint _2747 = (_2702 * 40u) + 16u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2702 * 40u) + 20u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2777 = (_2702 * 40u) + 24u;
                            vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            uint _2796 = (_2702 * 40u) + 28u;
                            vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2821 = fma(_1966, _2809.z, fma(_1965, _2809.y, _2809.x * _1964)) + _2809.w;
                            _2822 = !((fma(_1966, _2790.z, fma(_1965, _2790.y, _2790.x * _1964)) + _2790.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2822)
                            {
                                float _2849 = _2717.x - _1964;
                                float _2850 = _2717.y - _1965;
                                float _2851 = _2717.z - _1966;
                                float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                                float _2855 = inversesqrt(_2852);
                                float _2856 = _2855 * _2849;
                                float _2857 = _2855 * _2850;
                                float _2858 = _2855 * _2851;
                                float _2862 = 1.0 - (_2852 / (_2718 * _2718));
                                float _3788 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2863 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2867 = sqrt(_2852) * _2733.w;
                                float _2869 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                                float _2870 = _2869 * _2869;
                                float _2873 = ((1.0 - _2870) * dot(vec3(_2856, _2857, _2858), vec3(_574, _577, _580))) + _2870;
                                float _2876 = _2867 * _2867;
                                float _2880 = (fma(_1966, _2760.z, fma(_1965, _2760.y, _2760.x * _1964)) + _2760.w) / _2821;
                                float _2881 = (fma(_1966, _2775.z, fma(_1965, _2775.y, _2775.x * _1964)) + _2775.w) / _2821;
                                float _2885 = 1.0 - dot(vec2(_2880, _2881), vec2(_2880, _2881));
                                float _3804 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2886 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
                                float _2887 = _2886 * (((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2863) / ((_2876 * 0.699999988079071044921875) + 1.0));
                                float _2899 = exp2(log2(1.0 / ((_2876 * 3.5) + 5.0)) * 0.25);
                                float _2900 = 1.0 - _649;
                                float _2907 = sqrt(1.0 - ((1.0 - (_2900 * _2900)) * (1.0 - (_2899 * _2899))));
                                float _2908 = _2907 * _2907;
                                float _2909 = _2908 * _2908;
                                float _2910 = _2856 - _2287;
                                float _2911 = _2857 - _2288;
                                float _2912 = _2858 - _2289;
                                float _2916 = inversesqrt(dot(vec3(_2910, _2911, _2912), vec3(_2910, _2911, _2912)));
                                float _2920 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2287, (-0.0) - _2288, (-0.0) - _2289));
                                float _3815 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                                float _2923 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                                float _2924 = dot(vec3(_574, _577, _580), vec3(_2916 * _2910, _2916 * _2911, _2916 * _2912));
                                float _3826 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2927 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                                float _2931 = ((_2927 * _2927) * (_2909 + (-1.0))) + 1.0;
                                float _2932 = _2869 * _2908;
                                float _2933 = _2932 * _2932;
                                float _2939 = ((1.0 - _2933) * dot(vec3(_574, _577, _580), vec3(_2856, _2857, _2858))) + _2933;
                                float _3837 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                                float _2940 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                                float _2941 = 1.0 - _2908;
                                float _2951 = (0.5 / (((_2940 * ((_2923 * _2941) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2940 * _2941) + _2908) * _2923))) * _2940;
                                float _3848 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2961 = (_2886 * _2863) * (((_2909 * 3.1415927410125732421875) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) / ((_2931 * _2931) * ((_2876 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2961 * _2745.y;
                                frontier_phi_77_pred_1 = _2961 * _2745.x;
                                frontier_phi_77_pred_2 = _2887 * _2733.z;
                                frontier_phi_77_pred_3 = _2887 * _2733.y;
                                frontier_phi_77_pred_4 = _2887 * _2733.x;
                                frontier_phi_77_pred_5 = _2961 * _2745.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2966 = frontier_phi_77_pred;
                            _2965 = frontier_phi_77_pred_1;
                            _2970 = frontier_phi_77_pred_2;
                            _2969 = frontier_phi_77_pred_3;
                            _2968 = frontier_phi_77_pred_4;
                            _2967 = frontier_phi_77_pred_5;
                            _2675 = _2968 + _2688;
                            _2676 = _2969 + _2689;
                            _2677 = _2970 + _2690;
                            _2672 = _2965 + _2685;
                            _2673 = _2966 + _2686;
                            _2674 = _2967 + _2687;
                            if (_2692 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2676;
                                _2690 = _2677;
                                _2691 = _2692;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2673;
                        frontier_phi_71_pred_1 = _2672;
                        frontier_phi_71_pred_2 = _2677;
                        frontier_phi_71_pred_3 = _2676;
                        frontier_phi_71_pred_4 = _2675;
                        frontier_phi_71_pred_5 = _2674;
                    }
                    _2264 = frontier_phi_71_pred;
                    _2262 = frontier_phi_71_pred_1;
                    _2272 = frontier_phi_71_pred_2;
                    _2270 = frontier_phi_71_pred_3;
                    _2268 = frontier_phi_71_pred_4;
                    _2266 = frontier_phi_71_pred_5;
                    uint _2458 = _2457 + 1u;
                    if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2451 = _2262;
                        _2452 = _2264;
                        _2453 = _2266;
                        _2454 = _2268;
                        _2455 = _2270;
                        _2456 = _2272;
                        _2457 = _2458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2272;
                frontier_phi_53_54_ladder_1 = _2268;
                frontier_phi_53_54_ladder_2 = _2266;
                frontier_phi_53_54_ladder_3 = _2264;
                frontier_phi_53_54_ladder_4 = _2262;
                frontier_phi_53_54_ladder_5 = _2270;
            }
            else
            {
                frontier_phi_53_54_ladder = _2127;
                frontier_phi_53_54_ladder_1 = _2123;
                frontier_phi_53_54_ladder_2 = _2121;
                frontier_phi_53_54_ladder_3 = _2119;
                frontier_phi_53_54_ladder_4 = _2117;
                frontier_phi_53_54_ladder_5 = _2125;
            }
            _2261 = frontier_phi_53_54_ladder_4;
            _2263 = frontier_phi_53_54_ladder_3;
            _2265 = frontier_phi_53_54_ladder_2;
            _2267 = frontier_phi_53_54_ladder_1;
            _2269 = frontier_phi_53_54_ladder_5;
            _2271 = frontier_phi_53_54_ladder;
        }
        float _2276 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _2023 = (_2276 * _2267) + _1742;
        _2025 = (_2276 * _2269) + _1743;
        _2027 = (_2276 * _2271) + _1744;
        _2029 = ((_2261 * _618) * _2276) + _1906;
        _2031 = ((_2263 * _620) * _2276) + _1907;
        _2033 = ((_2265 * _621) * _2276) + _1908;
    }
    else
    {
        _2023 = _1742;
        _2025 = _1743;
        _2027 = _1744;
        _2029 = _1906;
        _2031 = _1907;
        _2033 = _1908;
    }
    uint _2039 = _594 + uint(cbMatDynParam._m0[0u].w);
    float _3864 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3875 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3886 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2064 = (((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_2023 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _633))) + ((_2029 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _1447)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2039].x * (_451 - (_451 * _284)));
    float _2066 = ((cbInstanceData._m0[_2039].y * (_452 - (_452 * _284))) + ((_2031 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _1447)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_2025 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _633)));
    float _2068 = ((cbInstanceData._m0[_2039].z * (_453 - (_453 * _284))) + ((_2033 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _1447)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_2027 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _633)));
    uint _2072 = _593 + 6u;
    float _2080 = _552 / cbSceneParam._m0[86u].x;
    float _2081 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2095 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2097 = _2095.x;
    float _2098 = _2095.y;
    float _2099 = _2095.z;
    float _2100 = _2095.w;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2142 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2143 = _2142 / _539;
        float _2154 = _2143 * _257;
        float _2155 = _258 * _2143;
        float _2156 = (-0.0) - _2155;
        float _2157 = _2143 * _259;
        float _2159 = (cbSceneParam._m0[77u].w * _2156) / _2142;
        float _2160 = _2159 + cbSceneParam._m0[79u].w;
        float _2161 = cbSceneParam._m0[79u].w - _2155;
        float _2167 = sqrt(((_2154 * _2154) + (_2155 * _2155)) + (_2157 * _2157));
        float _2170 = (1.0 - (cbSceneParam._m0[77u].w / _2142)) * _2167;
        float _2176 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2178 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2387;
        if (abs((_2156 - _2159) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2387 = ((((_2160 > 0.0) ? exp2(_2176 * _2160) : (2.0 - exp2(_2178 * _2160))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2170;
        }
        else
        {
            float _2322 = 1.0 / cbSceneParam._m0[80u].x;
            float _2323 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : max(_2160, _2161));
            float _2324 = isnan(_2161) ? _2160 : (isnan(_2160) ? _2161 : min(_2160, _2161));
            float _2333 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : min(_2323, 0.0));
            float _2334 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : min(_2324, 0.0));
            _2387 = ((abs(_2167 / _2156) * cbSceneParam._m0[80u].y) * ((((_2333 - _2334) * 2.0) - ((exp2(_2176 * (isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0)))) - exp2(_2176 * (isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0))))) * _2322)) - ((exp2(_2178 * _2333) - exp2(_2178 * _2334)) * _2322))) + (_2170 * cbSceneParam._m0[80u].z);
        }
        vec4 _2389 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2080, _2081, 1.0), 0.0);
        float _2398 = exp2((_2387 * (-1.44269502162933349609375)) * (1.0 - _2389.w));
        float _2399 = log2(_2398);
        float _2415 = log2(_2100);
        _2180 = (exp2(_2415 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].x)) * _2389.x) / cbSceneParam._m0[78u].x)) + _2097;
        _2182 = (exp2(_2415 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].y)) * _2389.y) / cbSceneParam._m0[78u].y)) + _2098;
        _2184 = (exp2(_2415 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2399 * cbSceneParam._m0[78u].z)) * _2389.z) / cbSceneParam._m0[78u].z)) + _2099;
        _2186 = _2398 * _2100;
    }
    else
    {
        _2180 = _2097;
        _2182 = _2098;
        _2184 = _2099;
        _2186 = _2100;
    }
    float _2198 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2199 = _2198 == 3.0;
    float _2200 = log2(_2186);
    float _2207 = exp2(_2200 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0)));
    float _2208 = exp2(_2200 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0)));
    float _2209 = exp2(_2200 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0)));
    float _2218 = (_2198 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2218 * (_2199 ? _2207 : (_2207 + (cbSceneParam._m0[72u].w * _2180)));
    SV_Target.y = _2218 * (_2199 ? _2208 : (_2208 + (cbSceneParam._m0[72u].w * _2182)));
    SV_Target.z = _2218 * (_2199 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2184)));
    SV_Target.w = cbInstanceData._m0[_2072].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2072].w;
}


