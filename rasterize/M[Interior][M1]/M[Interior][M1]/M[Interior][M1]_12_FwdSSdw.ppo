#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _881;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _243 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _253 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _243);
    float _254 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _243);
    float _255 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _243);
    float _281 = cbMtdParam._m0[22u].y + _253;
    float _282 = cbMtdParam._m0[22u].z + _254;
    float _283 = cbMtdParam._m0[22u].w + _255;
    float _297 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_281, _282, _283), vec3(_195 * TANGENT.x, _195 * TANGENT.y, _195 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_281, _282, _283), vec3((-0.0) - (_188 * NORMAL.x), (-0.0) - (_188 * NORMAL.y), (-0.0) - (_188 * NORMAL.z)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    bool _326 = _304 > 0.0;
    float _328 = _326 ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _335 = _309 + (-0.5);
    float _338 = _310 + (-0.5);
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_335 + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_338 + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _378 = cbMtdParam._m0[9u].x * _367.x;
    float _379 = cbMtdParam._m0[9u].y * _367.y;
    float _380 = cbMtdParam._m0[9u].z * _367.z;
    float _402 = (cbMtdParam._m0[21u].x * _297) * _303;
    float _404 = (cbMtdParam._m0[20u].w * _298) * _303;
    bool _405 = _402 > 0.0;
    float _410;
    if (_405)
    {
        _410 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _410 = frontier_phi_11_10_ladder;
    }
    bool _412 = _404 > 0.0;
    float _417;
    if (_412)
    {
        _417 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _417 = frontier_phi_15_14_ladder;
    }
    float _420 = _326 ? (cbMtdParam._m0[16u].z / _304) : 5000.0;
    float _421 = isnan(_417) ? _410 : (isnan(_410) ? _417 : min(_410, _417));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _430 = ((_422 * _304) + _426) / _426;
    float _435 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _437 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _453 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_422 * _402)) / _430) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_422 * _404)) / _430) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _465;
    if (_405)
    {
        _465 = (1.0 - _309) / _402;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _309) / _402;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _465 = frontier_phi_19_18_ladder;
    }
    float _471;
    if (_412)
    {
        _471 = (1.0 - _310) / _404;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _310) / _404;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _471 = frontier_phi_23_22_ladder;
    }
    float _473 = isnan(_471) ? _465 : (isnan(_465) ? _471 : min(_465, _471));
    float _474 = isnan(_420) ? _473 : (isnan(_473) ? _420 : min(_473, _420));
    float _481 = ((_474 * _304) + _426) / _426;
    vec4 _495 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_335 + (_474 * _402)) / _481) + 0.5) + _435) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_338 + (_474 * _404)) / _481) + 0.5) + _437) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _497 = _495.w;
    float _504 = (_497 * ((_453.x * cbMtdParam._m0[10u].x) - _378)) + _378;
    float _505 = (_497 * ((_453.y * cbMtdParam._m0[10u].y) - _379)) + _379;
    float _506 = (_497 * ((_453.z * cbMtdParam._m0[10u].z) - _380)) + _380;
    float _2838 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _2849 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _2860 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _525 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _529 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _530 = _253 * _529;
    float _531 = _254 * _529;
    float _532 = _255 * _529;
    float _538 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _539 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _552 = uint(roundEven(NORMAL.w)) * 13u;
    uint _555 = (_552 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _561 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2838 : (isnan(_2838) ? 1.0 : min(_2838, 1.0)))) * cbInstanceData._m0[_555].x;
    float _562 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2849 : (isnan(_2849) ? 1.0 : min(_2849, 1.0)))) * cbInstanceData._m0[_555].y;
    float _563 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2860 : (isnan(_2860) ? 1.0 : min(_2860, 1.0)))) * cbInstanceData._m0[_555].z;
    float _2871 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _564 = isnan(1.0) ? _2871 : (isnan(_2871) ? 1.0 : min(_2871, 1.0));
    float _2882 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _565 = isnan(1.0) ? _2882 : (isnan(_2882) ? 1.0 : min(_2882, 1.0));
    float _2893 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _566 = isnan(1.0) ? _2893 : (isnan(_2893) ? 1.0 : min(_2893, 1.0));
    vec4 _575 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _538, cbSceneParam._m0[86u].y * _539));
    float _578 = _575.x * TEXCOORD.z;
    float _579 = (-0.0) - _530;
    float _580 = (-0.0) - _531;
    float _581 = (-0.0) - _532;
    float _603 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _607 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _880;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _667 = (cbModelParam._m0[37u].x * ((((fma(_611, cbModelParam._m0[26u].z, fma(_607, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _669 = (cbModelParam._m0[37u].y * ((((fma(_611, cbModelParam._m0[27u].z, fma(_607, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _670 = (((((fma(_611, cbModelParam._m0[28u].z, fma(_607, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_667, _669, _670), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_667, _669, _670), 0.0);
        vec4 _687 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_667, _669, _670), 0.0);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_667, _669, _670), 0.0);
        float _707 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _707 * (_673.x + (-0.5));
        float _710 = _707 * (_673.y + (-0.5));
        float _711 = _707 * (_673.z + (-0.5));
        float _718 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_680.x + (-0.5));
        float _720 = _718 * (_680.y + (-0.5));
        float _721 = _718 * (_680.z + (-0.5));
        float _728 = exp2((_687.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_687.x + (-0.5));
        float _730 = _728 * (_687.y + (-0.5));
        float _731 = _728 * (_687.z + (-0.5));
        float _738 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_694.x + (-0.5));
        float _740 = _738 * (_694.y + (-0.5));
        float _741 = _738 * (_694.z + (-0.5));
        float _742 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _743 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = _709 * 0.5;
        float _746 = _719 * 0.5;
        float _747 = _729 * 0.5;
        float _748 = dot(vec3(_745, _746, _747), vec3(_745, _746, _747));
        float _753 = (_748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_748);
        float _762 = (dot(vec3(0.0), vec3(_753 * _745, _753 * _746, _753 * _747)) + 1.0) * 0.5;
        float _2919 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _772 = sqrt(((_746 * _746) + (_745 * _745)) + (_747 * _747)) / (_742 + 9.9999997473787516355514526367188e-06);
        float _2930 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _2930 : (isnan(_2930) ? 1.0 : min(_2930, 1.0));
        float _774 = _773 * 2.0;
        float _778 = (1.0 - _773) / (_773 + 1.0);
        float _2941 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _2941 : (isnan(_2941) ? 1.0 : min(_2941, 1.0));
        float _788 = ((((1.0 - _779) * (_774 + 2.0)) * exp2(log2(isnan(1.0) ? _2919 : (isnan(_2919) ? 1.0 : min(_2919, 1.0))) * (_774 + 1.0))) + _779) * _742;
        float _789 = _710 * 0.5;
        float _790 = _720 * 0.5;
        float _791 = _730 * 0.5;
        float _792 = dot(vec3(_789, _790, _791), vec3(_789, _790, _791));
        float _797 = (_792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_792);
        float _805 = (dot(vec3(0.0), vec3(_797 * _789, _797 * _790, _797 * _791)) + 1.0) * 0.5;
        float _2952 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _814 = sqrt(((_790 * _790) + (_789 * _789)) + (_791 * _791)) / (_743 + 9.9999997473787516355514526367188e-06);
        float _2963 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _2963 : (isnan(_2963) ? 1.0 : min(_2963, 1.0));
        float _816 = _815 * 2.0;
        float _820 = (1.0 - _815) / (_815 + 1.0);
        float _2974 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _2974 : (isnan(_2974) ? 1.0 : min(_2974, 1.0));
        float _830 = ((((1.0 - _821) * (_816 + 2.0)) * exp2(log2(isnan(1.0) ? _2952 : (isnan(_2952) ? 1.0 : min(_2952, 1.0))) * (_816 + 1.0))) + _821) * _743;
        float _831 = _711 * 0.5;
        float _832 = _721 * 0.5;
        float _833 = _731 * 0.5;
        float _834 = dot(vec3(_831, _832, _833), vec3(_831, _832, _833));
        float _839 = (_834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_834);
        float _847 = (dot(vec3(0.0), vec3(_839 * _831, _839 * _832, _839 * _833)) + 1.0) * 0.5;
        float _2985 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _856 = sqrt(((_832 * _832) + (_831 * _831)) + (_833 * _833)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _2996 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _2996 : (isnan(_2996) ? 1.0 : min(_2996, 1.0));
        float _858 = _857 * 2.0;
        float _862 = (1.0 - _857) / (_857 + 1.0);
        float _3007 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3007 : (isnan(_3007) ? 1.0 : min(_3007, 1.0));
        float _872 = ((((1.0 - _863) * (_858 + 2.0)) * exp2(log2(isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0))) * (_858 + 1.0))) + _863) * _744;
        _880 = _711;
        _882 = _710;
        _883 = _709;
        _884 = _721;
        _885 = _720;
        _886 = _719;
        _887 = _731;
        _888 = _730;
        _889 = _729;
        _890 = _744;
        _891 = _743;
        _892 = _742;
        _893 = cbModelParam._m0[36u].z * (isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0)));
        _894 = cbModelParam._m0[36u].z * (isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0)));
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0)));
    }
    else
    {
        _880 = _881;
        _882 = _881;
        _883 = _881;
        _884 = _881;
        _885 = _881;
        _886 = _881;
        _887 = _881;
        _888 = _881;
        _889 = _881;
        _890 = _881;
        _891 = _881;
        _892 = _881;
        _893 = 0.0;
        _894 = 0.0;
        _895 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = (cbModelParam._m0[38u].x * ((((fma(_611, cbModelParam._m0[30u].z, fma(_607, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _603)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _950 = (cbModelParam._m0[38u].y * ((((fma(_611, cbModelParam._m0[31u].z, fma(_607, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _603)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _951 = (((((fma(_611, cbModelParam._m0[32u].z, fma(_607, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _603)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(0.0), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3048 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3059 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3070 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3048 : (isnan(_3048) ? 1.0 : min(_3048, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(0.0), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3081 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3092 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3103 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(0.0), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3114 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3125 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3136 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _881;
        _1157 = _881;
        _1158 = _881;
        _1159 = _881;
        _1160 = _881;
        _1161 = _881;
        _1162 = _881;
        _1163 = _881;
        _1164 = _881;
        _1165 = _881;
        _1166 = _881;
        _1167 = _881;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _893)) + _893;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _894)) + _894;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _895)) + _895;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _530 * (-0.5);
    float _1225 = _531 * (-0.5);
    float _1226 = _532 * (-0.5);
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_880, _884, _887, _890));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_882, _885, _888, _891));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_883, _886, _889, _892));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_611, cbModelParam._m0[13u].z, fma(_607, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_611, cbModelParam._m0[14u].z, fma(_607, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_611, cbModelParam._m0[15u].z, fma(_607, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_581, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579));
        float _1354 = fma(_581, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579));
        float _1357 = fma(_581, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579));
        float _1383;
        if (_1351 > 0.0)
        {
            _1383 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1383 = frontier_phi_38_36_ladder;
        }
        float _1705;
        if (_1354 > 0.0)
        {
            _1705 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1705 = frontier_phi_47_43_ladder;
        }
        float _2008;
        if (_1357 > 0.0)
        {
            _2008 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2008 = frontier_phi_61_54_ladder;
        }
        float _2010 = isnan(_1705) ? _1383 : (isnan(_1383) ? _1705 : min(_1383, _1705));
        float _2011 = isnan(_2008) ? _2010 : (isnan(_2010) ? _2008 : min(_2010, _2008));
        float _2015 = (_2011 * _1351) + _1340;
        float _2016 = (_2011 * _1354) + _1344;
        float _2017 = (_2011 * _1357) + _1348;
        float _2018 = _2011 * 9.9999997473787516355514526367188e-05;
        float _2019 = (-1.0) - _2018;
        float _2021 = _2018 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2017 > _2021) || ((_2017 < _2019) || ((_2016 > _2021) || ((_2016 < _2019) || ((_2015 < _2019) || (_2015 > _2021))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2017, cbModelParam._m0[9u].z, fma(_2016, cbModelParam._m0[9u].y, _2015 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2017, cbModelParam._m0[10u].z, fma(_2016, cbModelParam._m0[10u].y, _2015 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2017, cbModelParam._m0[11u].z, fma(_2016, cbModelParam._m0[11u].y, _2015 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_37_61_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_37_61_ladder_2;
        _1375 = frontier_phi_37_61_ladder_1;
        _1377 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_579, _580, _581), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1380 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1432 = fma(_611, cbModelParam._m0[21u].z, fma(_607, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603)) + cbModelParam._m0[21u].w;
        float _1436 = fma(_611, cbModelParam._m0[22u].z, fma(_607, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603)) + cbModelParam._m0[22u].w;
        float _1440 = fma(_611, cbModelParam._m0[23u].z, fma(_607, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603)) + cbModelParam._m0[23u].w;
        float _1443 = fma(_581, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579));
        float _1446 = fma(_581, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579));
        float _1449 = fma(_581, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579));
        float _1710;
        if (_1443 > 0.0)
        {
            _1710 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1710 = frontier_phi_49_45_ladder;
        }
        float _2034;
        if (_1446 > 0.0)
        {
            _2034 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2034 = frontier_phi_63_56_ladder;
        }
        float _2200;
        if (_1449 > 0.0)
        {
            _2200 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2200 = frontier_phi_77_72_ladder;
        }
        float _2202 = isnan(_2034) ? _1710 : (isnan(_1710) ? _2034 : min(_1710, _2034));
        float _2203 = isnan(_2200) ? _2202 : (isnan(_2202) ? _2200 : min(_2202, _2200));
        float _2207 = (_2203 * _1443) + _1432;
        float _2208 = (_2203 * _1446) + _1436;
        float _2209 = (_2203 * _1449) + _1440;
        float _2210 = _2203 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2210;
        float _2213 = _2210 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2209 > _2213) || ((_2209 < _2211) || ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 < _2211) || (_2207 > _2213))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2392 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2209, cbModelParam._m0[17u].z, fma(_2208, cbModelParam._m0[17u].y, _2207 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2209, cbModelParam._m0[18u].z, fma(_2208, cbModelParam._m0[18u].y, _2207 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2209, cbModelParam._m0[19u].z, fma(_2208, cbModelParam._m0[19u].y, _2207 * cbModelParam._m0[19u].x))), _1380);
            frontier_phi_46_77_ladder = _2392.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2392.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2392.x * cbModelParam._m0[1u].z;
        }
        _1468 = frontier_phi_46_77_ladder_2;
        _1470 = frontier_phi_46_77_ladder_1;
        _1472 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_579, _580, _581), _1380);
        _1468 = _1452.x * cbModelParam._m0[1u].z;
        _1470 = _1452.y * cbModelParam._m0[1u].z;
        _1472 = _1452.z * cbModelParam._m0[1u].z;
    }
    float _1484 = _578 * 0.01200000010430812835693359375;
    float _1486 = _1484 * ((cbModelParam._m0[1u].w * (_1468 - _1373)) + _1373);
    float _1487 = _1484 * ((cbModelParam._m0[1u].w * (_1470 - _1375)) + _1375);
    float _1488 = _1484 * ((cbModelParam._m0[1u].w * (_1472 - _1377)) + _1377);
    float _1491 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, _1486 * cbSceneParam._m0[91u].x));
    vec4 _1505 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_538, _539));
    float _1507 = _1505.w;
    float _1520 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1507);
    float _1521 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1507);
    float _1522 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1507);
    uvec4 _1527 = floatBitsToUint(cbInstanceData._m0[_552 + 5u]);
    uint _1529 = _1527.x * 14u;
    uint _1530 = _1529 + 13u;
    float _1535 = _578 + (-1.0);
    float _1539 = (cbLight._m0[_1530].x * _1535) + 1.0;
    float _1540 = (cbLight._m0[_1530].y * _1535) + 1.0;
    uint _1541 = _1529 + 5u;
    float _1547 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
    uint _1551 = _1529 + 4u;
    float _1560 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    uint _1564 = _1529 | 1u;
    float _1575 = dot(vec3(cbLight._m0[_1529].xyz), vec3(0.0));
    float _1578 = dot(vec3(cbLight._m0[_1564].xyz), vec3(0.0));
    float _3272 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
    float _3283 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _1583 = (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * 0.3183098733425140380859375;
    float _1585 = (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * 0.3183098733425140380859375;
    float _1592 = ((cbLight._m0[_1541].x * _1547) * _1585) + (((cbLight._m0[_1551].x * _1520) * _1560) * _1583);
    float _1593 = ((_1547 * cbLight._m0[_1541].y) * _1585) + (((cbLight._m0[_1551].y * _1521) * _1560) * _1583);
    float _1594 = ((_1547 * cbLight._m0[_1541].z) * _1585) + (((cbLight._m0[_1551].z * _1522) * _1560) * _1583);
    uint _1595 = _1529 + 8u;
    float _1601 = cbLight._m0[_1529].x + _530;
    float _1602 = cbLight._m0[_1529].y + _531;
    float _1603 = cbLight._m0[_1529].z + _532;
    float _1607 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
    float _1611 = dot(vec3(0.0), vec3(cbLight._m0[_1529].xyz));
    float _3294 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
    float _1614 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _1615 = dot(vec3(0.0), vec3(_530, _531, _532));
    float _3305 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
    float _1618 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _1619 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_1601 * _1607, _1602 * _1607, _1603 * _1607));
    float _3316 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1630 = (exp2(log2(1.0 - (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1636 = (0.5 / ((_1614 + 9.9999999392252902907785028219223e-09) + _1618)) * _1614;
    float _3327 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _1638 = (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * 0.31831014156341552734375;
    uint _1652 = _1529 + 9u;
    float _1658 = cbLight._m0[_1564].x + _530;
    float _1659 = cbLight._m0[_1564].y + _531;
    float _1660 = cbLight._m0[_1564].z + _532;
    float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
    float _1668 = dot(vec3(0.0), vec3(cbLight._m0[_1564].xyz));
    float _3338 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
    float _1671 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _1672 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1658 * _1664, _1659 * _1664, _1660 * _1664));
    float _3349 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1681 = (exp2(log2(1.0 - (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1685 = (0.5 / ((_1671 + 9.9999999392252902907785028219223e-09) + _1618)) * _1671;
    float _3360 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1687 = (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * 0.31831014156341552734375;
    float _1697 = (((_1681 * cbLight._m0[_1652].x) * _1687) * _1547) + ((((cbLight._m0[_1595].x * _1520) * _1630) * _1638) * _1560);
    float _1698 = (((_1681 * cbLight._m0[_1652].y) * _1687) * _1547) + ((((cbLight._m0[_1595].y * _1521) * _1630) * _1638) * _1560);
    float _1699 = (((_1681 * cbLight._m0[_1652].z) * _1687) * _1547) + ((((cbLight._m0[_1595].z * _1522) * _1630) * _1638) * _1560);
    float _1816;
    float _1818;
    float _1820;
    float _1822;
    float _1824;
    float _1826;
    if (_1527.y == 0u)
    {
        float _1755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1755;
        float _1757 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1755;
        float _1758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1755;
        uvec4 _1770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1771 = _1770.x;
        uint _1782 = uint((float(_1770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _539) / _1771))) + floor(float(uint(cbSceneParam._m0[85u].x * _538) / _1771)));
        float _1792 = (log2(_1758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1793 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        uint _1796 = uint(isnan(14.0) ? _1793 : (isnan(_1793) ? 14.0 : min(_1793, 14.0)));
        uvec4 _1802 = texelFetch(g_lightClusterGridBuffer, int(((_1796 << 2u) + (_1782 << 6u)) >> 2u));
        uint _1803 = _1802.x;
        uint _1804 = _1770.z;
        float _1894;
        float _1896;
        float _1898;
        float _1900;
        float _1902;
        float _1904;
        if (((((1u << ((_1804 >> 4u) & 15u)) + 4294967295u) & _1803) == 0u) || ((_1804 & 240u) == 0u))
        {
            _1894 = 0.0;
            _1896 = 0.0;
            _1898 = 0.0;
            _1900 = 0.0;
            _1902 = 0.0;
            _1904 = 0.0;
        }
        else
        {
            float _1895;
            float _1897;
            float _1899;
            float _1901;
            float _1903;
            float _1905;
            float _2068 = 0.0;
            float _2069 = 0.0;
            float _2070 = 0.0;
            float _2071 = 0.0;
            float _2072 = 0.0;
            float _2073 = 0.0;
            uint _2074 = 0u;
            uint _2083;
            bool _2084;
            for (;;)
            {
                _2083 = texelFetch(g_lightClassification, int((((_1796 << 5u) + (_1782 << 9u)) + (_2074 << 2u)) >> 2u)).x;
                _2084 = _2083 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2084)
                {
                    frontier_phi_74_pred = _2071;
                    frontier_phi_74_pred_1 = _2070;
                    frontier_phi_74_pred_2 = _2069;
                    frontier_phi_74_pred_3 = _2068;
                    frontier_phi_74_pred_4 = _2072;
                    frontier_phi_74_pred_5 = _2073;
                }
                else
                {
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    float _2247;
                    float _2248;
                    uint _2249;
                    _2243 = _2068;
                    _2244 = _2069;
                    _2245 = _2070;
                    _2246 = _2071;
                    _2247 = _2072;
                    _2248 = _2073;
                    _2249 = _2083;
                    float _2149;
                    float _2150;
                    float _2151;
                    float _2152;
                    float _2153;
                    float _2154;
                    for (;;)
                    {
                        uint _2253 = uint(findLSB(_2249)) + (_2074 << 5u);
                        uint _2250 = (_2249 + 4294967295u) & _2249;
                        uint _2255 = _2253 * 48u;
                        vec4 _2269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2255)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2255 + 3u)).x));
                        uint _2275 = (_2253 * 48u) + 4u;
                        vec4 _2288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2275)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 3u)).x));
                        uint _2294 = (_2253 * 48u) + 8u;
                        vec3 _2305 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2294)).x, texelFetch(g_PointLightRenderingBuffer, int(_2294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2294 + 2u)).x));
                        float _2309 = _2269.x - _1756;
                        float _2310 = _2269.y - _1757;
                        float _2311 = _2269.z - _1758;
                        float _2312 = dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311));
                        float _2315 = inversesqrt(_2312);
                        float _2324 = 1.0 - (_2312 * _2269.w);
                        float _3381 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
                        float _2325 = isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0));
                        float _2326 = sqrt(_2312) * _2288.w;
                        float _2329 = 1.39999997615814208984375 / (_2326 + 1.39999997615814208984375);
                        float _2330 = _2329 * _2329;
                        float _2333 = ((1.0 - _2330) * dot(vec3(0.0), vec3(_2315 * _2309, _2315 * _2310, _2315 * _2311))) + _2330;
                        float _2336 = _2326 * _2326;
                        float _2340 = ((isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0))) * _2325) / ((_2336 * 0.699999988079071044921875) + 1.0);
                        float _2344 = (-0.0) - _1756;
                        float _2345 = (-0.0) - _1757;
                        float _2346 = (-0.0) - _1758;
                        float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
                        float _2354 = dot(vec3(0.0), vec3(_2350 * _2344, _2350 * _2345, _2350 * _2346));
                        float _3397 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
                        float _3408 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
                        float _2358 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
                        float _2362 = (0.5 / (((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) + 9.9999999392252902907785028219223e-09) + _2358)) * _2358;
                        float _3419 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
                        float _2371 = (((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * 3.1415927410125732421875) / ((_2336 * 2.1991131305694580078125) + 3.141590118408203125)) * _2325;
                        _2152 = (_2340 * _2288.x) + _2246;
                        _2153 = (_2340 * _2288.y) + _2247;
                        _2154 = (_2340 * _2288.z) + _2248;
                        _2149 = (_2371 * _2305.x) + _2243;
                        _2150 = (_2371 * _2305.y) + _2244;
                        _2151 = (_2371 * _2305.z) + _2245;
                        if (_2250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2243 = _2149;
                            _2244 = _2150;
                            _2245 = _2151;
                            _2246 = _2152;
                            _2247 = _2153;
                            _2248 = _2154;
                            _2249 = _2250;
                        }
                    }
                    frontier_phi_74_pred = _2152;
                    frontier_phi_74_pred_1 = _2151;
                    frontier_phi_74_pred_2 = _2150;
                    frontier_phi_74_pred_3 = _2149;
                    frontier_phi_74_pred_4 = _2153;
                    frontier_phi_74_pred_5 = _2154;
                }
                _1901 = frontier_phi_74_pred;
                _1899 = frontier_phi_74_pred_1;
                _1897 = frontier_phi_74_pred_2;
                _1895 = frontier_phi_74_pred_3;
                _1903 = frontier_phi_74_pred_4;
                _1905 = frontier_phi_74_pred_5;
                uint _2075 = _2074 + 1u;
                if (_2075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2068 = _1895;
                    _2069 = _1897;
                    _2070 = _1899;
                    _2071 = _1901;
                    _2072 = _1903;
                    _2073 = _1905;
                    _2074 = _2075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1894 = _1895;
            _1896 = _1897;
            _1898 = _1899;
            _1900 = _1901;
            _1902 = _1903;
            _1904 = _1905;
        }
        uvec4 _1908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1909 = _1908.z;
        uint _1911 = (_1909 >> 8u) & 15u;
        float _2039;
        float _2041;
        float _2043;
        float _2045;
        float _2047;
        float _2049;
        if (((4294967295u << _1911) & _1803) == 0u)
        {
            _2039 = _1894;
            _2041 = _1896;
            _2043 = _1898;
            _2045 = _1900;
            _2047 = _1902;
            _2049 = _1904;
        }
        else
        {
            float _2064 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_1911 < ((_1909 >> 12u) & 15u))
            {
                float _2040;
                float _2042;
                float _2044;
                float _2046;
                float _2048;
                float _2050;
                float _2226 = _1894;
                float _2227 = _1896;
                float _2228 = _1898;
                float _2229 = _1900;
                float _2230 = _1902;
                float _2231 = _1904;
                uint _2232 = _1911;
                uint _2241;
                bool _2242;
                for (;;)
                {
                    _2241 = texelFetch(g_lightClassification, int((((_1796 << 5u) + (_1782 << 9u)) + (_2232 << 2u)) >> 2u)).x;
                    _2242 = _2241 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2242)
                    {
                        frontier_phi_83_pred = _2229;
                        frontier_phi_83_pred_1 = _2228;
                        frontier_phi_83_pred_2 = _2227;
                        frontier_phi_83_pred_3 = _2226;
                        frontier_phi_83_pred_4 = _2231;
                        frontier_phi_83_pred_5 = _2230;
                    }
                    else
                    {
                        float _2397;
                        float _2398;
                        float _2399;
                        float _2400;
                        float _2401;
                        float _2402;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2410 = _2226;
                        float _2411 = _2227;
                        float _2412 = _2228;
                        float _2413 = _2229;
                        float _2414 = _2230;
                        float _2415 = _2231;
                        uint _2416 = _2241;
                        uint _2417;
                        vec4 _2442;
                        float _2443;
                        vec4 _2458;
                        vec3 _2470;
                        vec4 _2485;
                        vec4 _2500;
                        float _2546;
                        bool _2547;
                        for (;;)
                        {
                            uint _2427 = ((_2232 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2416));
                            _2417 = (_2416 + 4294967295u) & _2416;
                            uint _2429 = _2427 * 40u;
                            _2442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 3u)).x));
                            _2443 = _2442.w;
                            uint _2445 = (_2427 * 40u) + 4u;
                            _2458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 3u)).x));
                            uint _2460 = (_2427 * 40u) + 8u;
                            _2470 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2460 + 2u)).x));
                            uint _2472 = (_2427 * 40u) + 16u;
                            _2485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 3u)).x));
                            uint _2487 = (_2427 * 40u) + 20u;
                            _2500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 3u)).x));
                            uint _2502 = (_2427 * 40u) + 24u;
                            vec4 _2515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2502 + 3u)).x));
                            uint _2521 = (_2427 * 40u) + 28u;
                            vec4 _2534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2521 + 3u)).x));
                            _2546 = fma(_1758, _2534.z, fma(_1757, _2534.y, _2534.x * _1756)) + _2534.w;
                            _2547 = !((fma(_1758, _2515.z, fma(_1757, _2515.y, _2515.x * _1756)) + _2515.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2547)
                            {
                                float _2574 = _2442.x - _1756;
                                float _2575 = _2442.y - _1757;
                                float _2576 = _2442.z - _1758;
                                float _2577 = dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576));
                                float _2580 = inversesqrt(_2577);
                                float _2581 = _2580 * _2574;
                                float _2582 = _2580 * _2575;
                                float _2583 = _2580 * _2576;
                                float _2587 = 1.0 - (_2577 / (_2443 * _2443));
                                float _3430 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                                float _2588 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
                                float _2592 = sqrt(_2577) * _2458.w;
                                float _2594 = 1.39999997615814208984375 / (_2592 + 1.39999997615814208984375);
                                float _2595 = _2594 * _2594;
                                float _2596 = 1.0 - _2595;
                                float _2598 = (_2596 * dot(vec3(_2581, _2582, _2583), vec3(0.0))) + _2595;
                                float _2601 = _2592 * _2592;
                                float _2605 = (fma(_1758, _2485.z, fma(_1757, _2485.y, _2485.x * _1756)) + _2485.w) / _2546;
                                float _2606 = (fma(_1758, _2500.z, fma(_1757, _2500.y, _2500.x * _1756)) + _2500.w) / _2546;
                                float _2610 = 1.0 - dot(vec2(_2605, _2606), vec2(_2605, _2606));
                                float _3446 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
                                float _2611 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
                                float _2612 = _2611 * (((isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))) * _2588) / ((_2601 * 0.699999988079071044921875) + 1.0));
                                float _2622 = dot(vec3(0.0), vec3((-0.0) - (_1756 * _2064), (-0.0) - (_1757 * _2064), (-0.0) - (_1758 * _2064)));
                                float _3457 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                                float _2630 = (_2596 * dot(vec3(0.0), vec3(_2581, _2582, _2583))) + _2595;
                                float _3468 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
                                float _2631 = isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0));
                                float _2635 = (0.5 / (((isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0))) + 9.9999999392252902907785028219223e-09) + _2631)) * _2631;
                                float _3479 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                                float _2642 = (_2611 * _2588) * (((isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * 3.1415927410125732421875) / ((_2601 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2612 * _2458.x;
                                frontier_phi_89_pred_1 = _2642 * _2470.z;
                                frontier_phi_89_pred_2 = _2642 * _2470.y;
                                frontier_phi_89_pred_3 = _2642 * _2470.x;
                                frontier_phi_89_pred_4 = _2612 * _2458.z;
                                frontier_phi_89_pred_5 = _2612 * _2458.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2649 = frontier_phi_89_pred;
                            _2648 = frontier_phi_89_pred_1;
                            _2647 = frontier_phi_89_pred_2;
                            _2646 = frontier_phi_89_pred_3;
                            _2651 = frontier_phi_89_pred_4;
                            _2650 = frontier_phi_89_pred_5;
                            _2400 = _2649 + _2413;
                            _2401 = _2650 + _2414;
                            _2402 = _2651 + _2415;
                            _2397 = _2646 + _2410;
                            _2398 = _2647 + _2411;
                            _2399 = _2648 + _2412;
                            if (_2417 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2410 = _2397;
                                _2411 = _2398;
                                _2412 = _2399;
                                _2413 = _2400;
                                _2414 = _2401;
                                _2415 = _2402;
                                _2416 = _2417;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2400;
                        frontier_phi_83_pred_1 = _2399;
                        frontier_phi_83_pred_2 = _2398;
                        frontier_phi_83_pred_3 = _2397;
                        frontier_phi_83_pred_4 = _2402;
                        frontier_phi_83_pred_5 = _2401;
                    }
                    _2046 = frontier_phi_83_pred;
                    _2044 = frontier_phi_83_pred_1;
                    _2042 = frontier_phi_83_pred_2;
                    _2040 = frontier_phi_83_pred_3;
                    _2050 = frontier_phi_83_pred_4;
                    _2048 = frontier_phi_83_pred_5;
                    uint _2233 = _2232 + 1u;
                    if (_2233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2226 = _2040;
                        _2227 = _2042;
                        _2228 = _2044;
                        _2229 = _2046;
                        _2230 = _2048;
                        _2231 = _2050;
                        _2232 = _2233;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2050;
                frontier_phi_65_66_ladder_1 = _2048;
                frontier_phi_65_66_ladder_2 = _2044;
                frontier_phi_65_66_ladder_3 = _2042;
                frontier_phi_65_66_ladder_4 = _2046;
                frontier_phi_65_66_ladder_5 = _2040;
            }
            else
            {
                frontier_phi_65_66_ladder = _1904;
                frontier_phi_65_66_ladder_1 = _1902;
                frontier_phi_65_66_ladder_2 = _1898;
                frontier_phi_65_66_ladder_3 = _1896;
                frontier_phi_65_66_ladder_4 = _1900;
                frontier_phi_65_66_ladder_5 = _1894;
            }
            _2039 = frontier_phi_65_66_ladder_5;
            _2041 = frontier_phi_65_66_ladder_3;
            _2043 = frontier_phi_65_66_ladder_2;
            _2045 = frontier_phi_65_66_ladder_4;
            _2047 = frontier_phi_65_66_ladder_1;
            _2049 = frontier_phi_65_66_ladder;
        }
        float _2054 = isnan(1.0) ? _578 : (isnan(_578) ? 1.0 : min(_578, 1.0));
        _1816 = (_2054 * _2045) + _1592;
        _1818 = (_2054 * _2047) + _1593;
        _1820 = (_2054 * _2049) + _1594;
        _1822 = ((_2039 * 0.039999999105930328369140625) * _2054) + _1697;
        _1824 = ((_2041 * 0.039999999105930328369140625) * _2054) + _1698;
        _1826 = ((_2043 * 0.039999999105930328369140625) * _2054) + _1699;
    }
    else
    {
        _1816 = _1592;
        _1818 = _1593;
        _1820 = _1594;
        _1822 = _1697;
        _1824 = _1698;
        _1826 = _1699;
    }
    float _3495 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3506 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3517 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _1843 = ((isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1816 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _578))) + ((_1822 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _1844 = ((isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1818 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _578))) + ((_1824 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _1845 = ((isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))) * (_1820 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _578))) + ((_1826 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    uint _1849 = _552 + 6u;
    float _1857 = _538 / cbSceneParam._m0[86u].x;
    float _1858 = _539 / cbSceneParam._m0[86u].y;
    vec4 _1872 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1857, _1858, (log2((isnan(cbSceneParam._m0[77u].w) ? _525 : (isnan(_525) ? cbSceneParam._m0[77u].w : min(_525, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1874 = _1872.x;
    float _1875 = _1872.y;
    float _1876 = _1872.z;
    float _1877 = _1872.w;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    if (_525 > cbSceneParam._m0[78u].w)
    {
        float _1919 = isnan(_525) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _525 : min(cbSceneParam._m0[80u].w, _525));
        float _1920 = _1919 / _525;
        float _1931 = _1920 * _253;
        float _1932 = _254 * _1920;
        float _1933 = (-0.0) - _1932;
        float _1934 = _1920 * _255;
        float _1936 = (cbSceneParam._m0[77u].w * _1933) / _1919;
        float _1937 = _1936 + cbSceneParam._m0[79u].w;
        float _1938 = cbSceneParam._m0[79u].w - _1932;
        float _1944 = sqrt(((_1931 * _1931) + (_1932 * _1932)) + (_1934 * _1934));
        float _1947 = (1.0 - (cbSceneParam._m0[77u].w / _1919)) * _1944;
        float _1953 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1955 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2162;
        if (abs((_1933 - _1936) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2162 = ((((_1937 > 0.0) ? exp2(_1953 * _1937) : (2.0 - exp2(_1955 * _1937))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1947;
        }
        else
        {
            float _2097 = 1.0 / cbSceneParam._m0[80u].x;
            float _2098 = isnan(_1938) ? _1937 : (isnan(_1937) ? _1938 : max(_1937, _1938));
            float _2099 = isnan(_1938) ? _1937 : (isnan(_1937) ? _1938 : min(_1937, _1938));
            float _2108 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : min(_2098, 0.0));
            float _2109 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : min(_2099, 0.0));
            _2162 = ((abs(_1944 / _1933) * cbSceneParam._m0[80u].y) * ((((_2108 - _2109) * 2.0) - ((exp2(_1953 * (isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)))) - exp2(_1953 * (isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0))))) * _2097)) - ((exp2(_1955 * _2108) - exp2(_1955 * _2109)) * _2097))) + (_1947 * cbSceneParam._m0[80u].z);
        }
        vec4 _2164 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1857, _1858, 1.0), 0.0);
        float _2173 = exp2((_2162 * (-1.44269502162933349609375)) * (1.0 - _2164.w));
        float _2174 = log2(_2173);
        float _2190 = log2(_1877);
        _1957 = (exp2(_2190 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2174 * cbSceneParam._m0[78u].x)) * _2164.x) / cbSceneParam._m0[78u].x)) + _1874;
        _1959 = (exp2(_2190 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2174 * cbSceneParam._m0[78u].y)) * _2164.y) / cbSceneParam._m0[78u].y)) + _1875;
        _1961 = (exp2(_2190 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2174 * cbSceneParam._m0[78u].z)) * _2164.z) / cbSceneParam._m0[78u].z)) + _1876;
        _1963 = _2173 * _1877;
    }
    else
    {
        _1957 = _1874;
        _1959 = _1875;
        _1961 = _1876;
        _1963 = _1877;
    }
    float _1975 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1976 = _1975 == 3.0;
    float _1978 = log2(_1963);
    float _1985 = exp2(_1978 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)));
    float _1986 = exp2(_1978 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0)));
    float _1987 = exp2(_1978 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
    float _1996 = (_1975 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1996 * (_1976 ? _1985 : (_1985 + (cbSceneParam._m0[72u].w * _1957)));
    SV_Target.y = _1996 * (_1976 ? _1986 : (_1986 + (cbSceneParam._m0[72u].w * _1959)));
    SV_Target.z = _1996 * (_1976 ? _1987 : (_1987 + (cbSceneParam._m0[72u].w * _1961)));
    SV_Target.w = cbInstanceData._m0[_1849].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1849].w;
}


