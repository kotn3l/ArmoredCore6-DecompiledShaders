#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _397;
float _3213;
float _3214;
float _3215;
float _3216;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _330 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _337 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _346 = cbMtdParam._m0[23u].x + _261;
    float _347 = cbMtdParam._m0[23u].y + _262;
    float _348 = cbMtdParam._m0[23u].z + _263;
    float _362 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_330 * _190, _330 * _191, _330 * _192));
    float _363 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_337 * _204, _337 * _205, _337 * _206));
    float _364 = (-0.0) - dot(vec3(_346, _347, _348), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _368 * _364;
    float _371 = (cbMtdParam._m0[19u].w * _362) * _368;
    float _373 = (cbMtdParam._m0[20u].x * _363) * _368;
    float _376 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _377 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _395;
    float _398;
    float _400;
    if (_371 > 0.0)
    {
        float _381 = (1.0 - _376) / _371;
        _395 = _381;
        _398 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_381 * _369)) * 0.16666667163372039794921875;
        _400 = (fract((_381 * _373) + _377) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _396 = ((-0.0) - _376) / _371;
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = (fract((_396 * _373) + _377) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_396 * _369) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _397;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _395 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
        _400 = frontier_phi_3_2_ladder_1;
    }
    float _426;
    float _428;
    float _430;
    if (_373 > 0.0)
    {
        float _413 = (1.0 - _377) / _373;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_413 < _395)
        {
            frontier_phi_8_5_ladder = (fract(_413 * _369) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_413 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _413;
        }
        else
        {
            frontier_phi_8_5_ladder = _400;
            frontier_phi_8_5_ladder_1 = _398;
            frontier_phi_8_5_ladder_2 = _395;
        }
        _426 = frontier_phi_8_5_ladder_2;
        _428 = frontier_phi_8_5_ladder_1;
        _430 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_373 < 0.0)
        {
            float _427 = ((-0.0) - _377) / _373;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_427 < _395)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_427 * _369) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_427 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _400;
                frontier_phi_8_6_ladder_9_ladder_1 = _398;
                frontier_phi_8_6_ladder_9_ladder_2 = _395;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _400;
            frontier_phi_8_6_ladder_1 = _398;
            frontier_phi_8_6_ladder_2 = _395;
        }
        _426 = frontier_phi_8_6_ladder_2;
        _428 = frontier_phi_8_6_ladder_1;
        _430 = frontier_phi_8_6_ladder;
    }
    float _434 = (_369 > 0.0) ? (cbMtdParam._m0[16u].w / _369) : 5000.0;
    float _447;
    float _448;
    if (_434 < _426)
    {
        _447 = ((_376 + cbMtdParam._m0[17u].x) + (_434 * _371)) * 0.16666667163372039794921875;
        _448 = (((_434 * _373) + _377) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _447 = _428;
        _448 = _430;
    }
    vec4 _450 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_447, _448));
    float _455 = _450.x * cbMtdParam._m0[13u].x;
    float _456 = _450.y * cbMtdParam._m0[13u].y;
    float _457 = _450.z * cbMtdParam._m0[13u].z;
    float _462 = 0.5 - (_288 * 0.5);
    float _472 = (((_455 - _301) - (_455 * _288)) * _462) + _301;
    float _473 = (((_456 - _303) - (_456 * _288)) * _462) + _303;
    float _474 = (((_457 - _305) - (_457 * _288)) * _462) + _305;
    vec4 _486 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _488 = _486.x;
    vec4 _500 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _508 = (_500.x * 2.0) + (-1.0);
    float _510 = (_500.y * 2.0) + (-1.0);
    float _511 = dot(vec2(_508, _510), vec2(_508, _510));
    float _3225 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _517 = _500.z * _288;
    float _520 = fma(_516, _197, fma(_510, _204, _508 * _190));
    float _523 = fma(_516, _198, fma(_510, _205, _508 * _191));
    float _526 = fma(_516, _199, fma(_510, _206, _508 * _192));
    float _530 = inversesqrt(dot(vec3(_520, _523, _526), vec3(_520, _523, _526)));
    float _531 = _530 * _520;
    float _532 = _530 * _523;
    float _533 = _530 * _526;
    float _3236 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _534 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3258 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3269 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3280 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _538 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _554 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _559 = _261 * _558;
    float _560 = _262 * _558;
    float _561 = _263 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _749 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _755 = (cbMatDynParam._m0[5u].x * _749) + cbMatDynParam._m0[5u].y;
        float _3291 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
        float _760 = (cbMatDynParam._m0[5u].z * _749) + cbMatDynParam._m0[5u].w;
        float _3302 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) - _756)) + _756) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _586 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _587 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _607 = fma(_533, cbSceneParam._m0[5u].z, fma(_532, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _531));
    float _610 = fma(_533, cbSceneParam._m0[6u].z, fma(_532, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _531));
    float _613 = fma(_533, cbSceneParam._m0[7u].z, fma(_532, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _531));
    uint _626 = uint(roundEven(NORMAL.w)) * 13u;
    uint _627 = _626 + 9u;
    uint _628 = _627 + uint(cbMatDynParam._m0[0u].w);
    float _634 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_628].x;
    float _635 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_628].y;
    float _636 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_628].z;
    float _3313 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _637 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _638 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _639 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
    float _640 = 1.0 - _538;
    float _641 = _637 * _640;
    float _642 = _638 * _640;
    float _643 = _639 * _640;
    float _648 = (_637 + (-0.039999999105930328369140625)) * _538;
    float _649 = (_638 + (-0.039999999105930328369140625)) * _538;
    float _650 = (_639 + (-0.039999999105930328369140625)) * _538;
    float _651 = _648 + 0.039999999105930328369140625;
    float _653 = _649 + 0.039999999105930328369140625;
    float _654 = _650 + 0.039999999105930328369140625;
    vec4 _663 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _586, cbSceneParam._m0[86u].y * _587));
    float _666 = _663.x * TEXCOORD.z;
    float _667 = dot(vec3(_531, _532, _533), vec3(_559, _560, _561));
    float _670 = _667 * 2.0;
    float _674 = (_670 * _531) - _559;
    float _675 = (_670 * _532) - _560;
    float _676 = (_670 * _533) - _561;
    float _680 = abs(dot(vec3(_559, _560, _561), vec3(_531, _532, _533)));
    float _3346 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _682 = sqrt(_534);
    float _695 = exp2((_682 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_682 * 3.0));
    float _701 = (1.0 - _695) * ((_682 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _702 = _695 * _682;
    float _730 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _734 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _794 = fma(_738, cbModelParam._m0[26u].z, fma(_734, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730));
        float _798 = fma(_738, cbModelParam._m0[27u].z, fma(_734, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730));
        float _802 = fma(_738, cbModelParam._m0[28u].z, fma(_734, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730));
        float _826 = _730 + _531;
        float _827 = _734 + _532;
        float _828 = _738 + _533;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _794;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _798;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _802;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_794 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_798 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_802 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_531, _532, _533), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3394 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_531, _532, _533), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3427 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_531, _532, _533), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3438 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3449 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3460 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1069 = _898;
        _1070 = _897;
        _1071 = _909;
        _1072 = _908;
        _1073 = _907;
        _1074 = _919;
        _1075 = _918;
        _1076 = _917;
        _1077 = _932;
        _1078 = _931;
        _1079 = _930;
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _397;
        _1069 = _397;
        _1070 = _397;
        _1071 = _397;
        _1072 = _397;
        _1073 = _397;
        _1074 = _397;
        _1075 = _397;
        _1076 = _397;
        _1077 = _397;
        _1078 = _397;
        _1079 = _397;
        _1080 = 0.0;
        _1081 = 0.0;
        _1082 = 0.0;
    }
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1111 = fma(_738, cbModelParam._m0[30u].z, fma(_734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _730));
        float _1115 = fma(_738, cbModelParam._m0[31u].z, fma(_734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _730));
        float _1119 = fma(_738, cbModelParam._m0[32u].z, fma(_734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _730));
        float _1142 = _730 + _531;
        float _1143 = _734 + _532;
        float _1144 = _738 + _533;
        float _1154 = fma(_1144, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1142)) - _1111;
        float _1155 = fma(_1144, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1142)) - _1115;
        float _1156 = fma(_1144, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1142)) - _1119;
        float _1160 = inversesqrt(dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156)));
        float _1173 = ((_1160 * _1154) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1111 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1174 = ((_1160 * _1155) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1115 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1160 * _1156) / cbModelParam._m0[35u].z) + ((((((_1119 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1173, _1174, _1175), 0.0);
        float _1210 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1177.x + (-0.5));
        float _1212 = _1210 * (_1177.y + (-0.5));
        float _1213 = _1210 * (_1177.z + (-0.5));
        float _1220 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1184.x + (-0.5));
        float _1222 = _1220 * (_1184.y + (-0.5));
        float _1223 = _1220 * (_1184.z + (-0.5));
        float _1230 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1191.x + (-0.5));
        float _1232 = _1230 * (_1191.y + (-0.5));
        float _1233 = _1230 * (_1191.z + (-0.5));
        float _1240 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1241 = _1240 * (_1198.x + (-0.5));
        float _1242 = _1240 * (_1198.y + (-0.5));
        float _1243 = _1240 * (_1198.z + (-0.5));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = _1211 * 0.5;
        float _1248 = _1221 * 0.5;
        float _1249 = _1231 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_531, _532, _533), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3523 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1274 + 1.0))) + _1279) * _1244;
        float _1289 = _1212 * 0.5;
        float _1290 = _1222 * 0.5;
        float _1291 = _1232 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_531, _532, _533), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3556 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1316 + 1.0))) + _1321) * _1245;
        float _1331 = _1213 * 0.5;
        float _1332 = _1223 * 0.5;
        float _1333 = _1233 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_531, _532, _533), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3567 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3578 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3589 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) * (_1358 + 1.0))) + _1363) * _1246;
        _1380 = _1213;
        _1381 = _1212;
        _1382 = _1211;
        _1383 = _1223;
        _1384 = _1222;
        _1385 = _1221;
        _1386 = _1233;
        _1387 = _1232;
        _1388 = _1231;
        _1389 = _1246;
        _1390 = _1245;
        _1391 = _1244;
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
    }
    else
    {
        _1380 = _397;
        _1381 = _397;
        _1382 = _397;
        _1383 = _397;
        _1384 = _397;
        _1385 = _397;
        _1386 = _397;
        _1387 = _397;
        _1388 = _397;
        _1389 = _397;
        _1390 = _397;
        _1391 = _397;
        _1392 = 0.0;
        _1393 = 0.0;
        _1394 = 0.0;
    }
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1080)) + _1080;
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1081)) + _1081;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1082)) + _1082;
    float _1427 = fma(_1406, cbSceneParam._m0[89u].z, fma(_1405, cbSceneParam._m0[89u].y, _1404 * cbSceneParam._m0[89u].x));
    float _1430 = fma(_1406, cbSceneParam._m0[90u].z, fma(_1405, cbSceneParam._m0[90u].y, _1404 * cbSceneParam._m0[90u].x));
    float _1433 = fma(_1406, cbSceneParam._m0[91u].z, fma(_1405, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1404));
    float _1448 = _674 * 0.5;
    float _1449 = _675 * 0.5;
    float _1450 = _676 * 0.5;
    float _1451 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1454 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1457 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1491;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1464 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1468 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1472 = dot(vec4(_1448, _1449, _1450, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1479 = dot(vec4(cbModelParam._m0[39u]), vec4(_1448, _1449, _1450, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1479) ? 0.0 : (isnan(0.0) ? _1479 : max(0.0, _1479))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1502;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1493 = dot(vec4(cbModelParam._m0[40u]), vec4(_1448, _1449, _1450, 1.0));
        _1502 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1502 = 1.0;
    }
    float _1506 = (_1502 * cbModelParam._m0[1u].x) + (_1491 * (1.0 - cbModelParam._m0[1u].x));
    float _1516 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _534);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1516 : min(cbModelParam._m0[25u].z, _1516));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_738, cbModelParam._m0[13u].z, fma(_734, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _730)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_738, cbModelParam._m0[14u].z, fma(_734, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _730)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_738, cbModelParam._m0[15u].z, fma(_734, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _730)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_676, cbModelParam._m0[13u].z, fma(_675, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _674));
        float _1580 = fma(_676, cbModelParam._m0[14u].z, fma(_675, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _674));
        float _1583 = fma(_676, cbModelParam._m0[15u].z, fma(_675, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _674));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1611 = frontier_phi_29_27_ladder;
        }
        float _1973;
        if (_1580 > 0.0)
        {
            _1973 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1973 = frontier_phi_38_34_ladder;
        }
        float _2281;
        if (_1583 > 0.0)
        {
            _2281 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2281 = frontier_phi_52_45_ladder;
        }
        float _2283 = isnan(_1973) ? _1611 : (isnan(_1611) ? _1973 : min(_1611, _1973));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1577) + _1566;
        float _2289 = (_2284 * _1580) + _1570;
        float _2290 = (_2284 * _1583) + _1574;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2292 = (-1.0) - _2291;
        float _2294 = _2291 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2290 > _2294) || ((_2290 < _2292) || ((_2289 > _2294) || ((_2289 < _2292) || ((_2288 < _2292) || (_2288 > _2294))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1517);
            frontier_phi_28_52_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_28_52_ladder_2;
        _1601 = frontier_phi_28_52_ladder_1;
        _1603 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_674, _675, _676), _1517);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _534);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_738, cbModelParam._m0[21u].z, fma(_734, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _730)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_738, cbModelParam._m0[22u].z, fma(_734, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _730)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_738, cbModelParam._m0[23u].z, fma(_734, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _730)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_676, cbModelParam._m0[21u].z, fma(_675, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _674));
        float _1677 = fma(_676, cbModelParam._m0[22u].z, fma(_675, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _674));
        float _1680 = fma(_676, cbModelParam._m0[23u].z, fma(_675, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _674));
        float _1978;
        if (_1674 > 0.0)
        {
            _1978 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1978 = frontier_phi_40_36_ladder;
        }
        float _2307;
        if (_1677 > 0.0)
        {
            _2307 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2307 = frontier_phi_54_47_ladder;
        }
        float _2497;
        if (_1680 > 0.0)
        {
            _2497 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2497 = frontier_phi_72_65_ladder;
        }
        float _2499 = isnan(_2307) ? _1978 : (isnan(_1978) ? _2307 : min(_1978, _2307));
        float _2500 = isnan(_2497) ? _2499 : (isnan(_2499) ? _2497 : min(_2499, _2497));
        float _2504 = (_2500 * _1674) + _1663;
        float _2505 = (_2500 * _1677) + _1667;
        float _2506 = (_2500 * _1680) + _1671;
        float _2507 = _2500 * 9.9999997473787516355514526367188e-05;
        float _2508 = (-1.0) - _2507;
        float _2510 = _2507 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2506 > _2510) || ((_2506 < _2508) || ((_2505 > _2510) || ((_2505 < _2508) || ((_2504 < _2508) || (_2504 > _2510))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2506, cbModelParam._m0[17u].z, fma(_2505, cbModelParam._m0[17u].y, _2504 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2506, cbModelParam._m0[18u].z, fma(_2505, cbModelParam._m0[18u].y, _2504 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2506, cbModelParam._m0[19u].z, fma(_2505, cbModelParam._m0[19u].y, _2504 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_37_72_ladder = _2748.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2748.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2748.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_37_72_ladder_2;
        _1701 = frontier_phi_37_72_ladder_1;
        _1703 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_674, _675, _676), _1608);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1716 = (((_701 * _651) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_701 * _653) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_701 * _654) + _702) * _666) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1739 = floatBitsToUint(cbInstanceData._m0[_626 + 5u]);
    uint _1741 = _1739.x * 14u;
    uint _1742 = _1741 + 13u;
    float _1747 = _666 + (-1.0);
    float _1750 = (cbLight._m0[_1742].x * _1747) + 1.0;
    float _1751 = (cbLight._m0[_1742].y * _1747) + 1.0;
    uint _1752 = _1741 + 5u;
    float _1758 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1762 = _1741 + 4u;
    float _1769 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1773 = _1741 | 1u;
    float _1784 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_531, _532, _533));
    float _1787 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_531, _532, _533));
    float _3725 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _3736 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1792 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1794 = (isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * 0.3183098733425140380859375;
    float _1801 = ((cbLight._m0[_1752].x * _1758) * _1794) + ((cbLight._m0[_1762].x * _1769) * _1792);
    float _1802 = ((_1758 * cbLight._m0[_1752].y) * _1794) + ((_1769 * cbLight._m0[_1762].y) * _1792);
    float _1803 = ((_1758 * cbLight._m0[_1752].z) * _1794) + ((_1769 * cbLight._m0[_1762].z) * _1792);
    uint _1805 = _1741 + 8u;
    float _1818 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _534) * 0.949999988079071044921875);
    float _1819 = _1818 * _1818;
    float _1820 = cbLight._m0[_1741].x + _559;
    float _1821 = cbLight._m0[_1741].y + _560;
    float _1822 = cbLight._m0[_1741].z + _561;
    float _1826 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
    float _1827 = _1826 * _1820;
    float _1828 = _1826 * _1821;
    float _1829 = _1826 * _1822;
    float _1830 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1741].xyz));
    float _3747 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _1834 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _1835 = dot(vec3(_531, _532, _533), vec3(_1827, _1828, _1829));
    float _3769 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1839 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1827, _1828, _1829));
    float _3780 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = _1819 * _1819;
    float _1847 = ((_1838 * _1838) * (_1843 + (-1.0))) + 1.0;
    float _1855 = exp2(log2(1.0 - (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * 5.0);
    float _1856 = 0.959999978542327880859375 - _648;
    float _1858 = 0.959999978542327880859375 - _649;
    float _1859 = 0.959999978542327880859375 - _650;
    float _1866 = 1.0 - _1819;
    float _1877 = (0.5 / (((_1834 * ((_1833 * _1866) + _1819)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _1866) + _1819) * _1833))) * _1833;
    float _3791 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1879 = (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1843 / ((_1847 * _1847) * 3.141590118408203125));
    uint _1890 = _1741 + 9u;
    float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1773].w)) * _534) * 0.949999988079071044921875);
    float _1902 = _1901 * _1901;
    float _1903 = cbLight._m0[_1773].x + _559;
    float _1904 = cbLight._m0[_1773].y + _560;
    float _1905 = cbLight._m0[_1773].z + _561;
    float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
    float _1910 = _1909 * _1903;
    float _1911 = _1909 * _1904;
    float _1912 = _1909 * _1905;
    float _1913 = dot(vec3(_531, _532, _533), vec3(cbLight._m0[_1773].xyz));
    float _3802 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1916 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1917 = dot(vec3(_531, _532, _533), vec3(_1910, _1911, _1912));
    float _3813 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1773].xyz), vec3(_1910, _1911, _1912));
    float _3824 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1902 * _1902;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) * 5.0);
    float _1943 = 1.0 - _1902;
    float _1953 = (0.5 / (((_1834 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1834 * _1943) + _1902) * _1916))) * _1916;
    float _3835 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    float _1965 = (((((_1936 * _1856) + _651) * cbLight._m0[_1890].x) * _1955) * _1758) + (((((_1855 * _1856) + _651) * cbLight._m0[_1805].x) * _1879) * _1769);
    float _1966 = (((((_1936 * _1858) + _653) * cbLight._m0[_1890].y) * _1955) * _1758) + (((((_1855 * _1858) + _653) * cbLight._m0[_1805].y) * _1879) * _1769);
    float _1967 = (((((_1936 * _1859) + _654) * cbLight._m0[_1890].z) * _1955) * _1758) + (((((_1855 * _1859) + _654) * cbLight._m0[_1805].z) * _1879) * _1769);
    float _2082;
    float _2084;
    float _2086;
    float _2088;
    float _2090;
    float _2092;
    if (_1739.y == 0u)
    {
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2022;
        float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2022;
        float _2025 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2022;
        uvec4 _2037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2038 = _2037.x;
        uint _2049 = uint((float(_2037.y) * floor(float(uint(cbSceneParam._m0[85u].y * _587) / _2038))) + floor(float(uint(cbSceneParam._m0[85u].x * _586) / _2038)));
        float _2059 = (log2(_2025 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2060 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
        uint _2063 = uint(isnan(14.0) ? _2060 : (isnan(_2060) ? 14.0 : min(_2060, 14.0)));
        uvec4 _2068 = texelFetch(g_lightClusterGridBuffer, int(((_2063 << 2u) + (_2049 << 6u)) >> 2u));
        uint _2069 = _2068.x;
        uint _2070 = _2037.z;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        float _2170;
        if (((((1u << ((_2070 >> 4u) & 15u)) + 4294967295u) & _2069) == 0u) || ((_2070 & 240u) == 0u))
        {
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
            _2170 = 0.0;
        }
        else
        {
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2171;
            float _2344 = 0.0;
            float _2345 = 0.0;
            float _2346 = 0.0;
            float _2347 = 0.0;
            float _2348 = 0.0;
            float _2349 = 0.0;
            uint _2350 = 0u;
            uint _2359;
            bool _2360;
            for (;;)
            {
                _2359 = texelFetch(g_lightClassification, int((((_2063 << 5u) + (_2049 << 9u)) + (_2350 << 2u)) >> 2u)).x;
                _2360 = _2359 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2360)
                {
                    frontier_phi_67_pred = _2347;
                    frontier_phi_67_pred_1 = _2346;
                    frontier_phi_67_pred_2 = _2345;
                    frontier_phi_67_pred_3 = _2344;
                    frontier_phi_67_pred_4 = _2348;
                    frontier_phi_67_pred_5 = _2349;
                }
                else
                {
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    uint _2546;
                    _2540 = _2344;
                    _2541 = _2345;
                    _2542 = _2346;
                    _2543 = _2347;
                    _2544 = _2348;
                    _2545 = _2349;
                    _2546 = _2359;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    for (;;)
                    {
                        uint _2550 = uint(findLSB(_2546)) + (_2350 << 5u);
                        uint _2547 = (_2546 + 4294967295u) & _2546;
                        uint _2552 = _2550 * 48u;
                        vec4 _2566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 3u)).x));
                        uint _2572 = (_2550 * 48u) + 4u;
                        vec4 _2585 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2591 = (_2550 * 48u) + 8u;
                        vec3 _2602 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2591)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2591 + 2u)).x));
                        float _2606 = _2566.x - _2023;
                        float _2607 = _2566.y - _2024;
                        float _2608 = _2566.z - _2025;
                        float _2609 = dot(vec3(_2606, _2607, _2608), vec3(_2606, _2607, _2608));
                        float _2612 = inversesqrt(_2609);
                        float _2613 = _2612 * _2606;
                        float _2614 = _2612 * _2607;
                        float _2615 = _2612 * _2608;
                        float _2616 = dot(vec3(_607, _610, _613), vec3(_2613, _2614, _2615));
                        float _2621 = 1.0 - (_2609 * _2566.w);
                        float _3856 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2622 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2623 = sqrt(_2609) * _2585.w;
                        float _2626 = 1.39999997615814208984375 / (_2623 + 1.39999997615814208984375);
                        float _2627 = _2626 * _2626;
                        float _2630 = ((1.0 - _2627) * _2616) + _2627;
                        float _2633 = _2623 * _2623;
                        float _2637 = ((isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))) * _2622) / ((_2633 * 0.699999988079071044921875) + 1.0);
                        float _2641 = (-0.0) - _2023;
                        float _2642 = (-0.0) - _2024;
                        float _2643 = (-0.0) - _2025;
                        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
                        float _2648 = _2647 * _2641;
                        float _2649 = _2647 * _2642;
                        float _2650 = _2647 * _2643;
                        float _2658 = exp2(log2(1.0 / ((_2633 * 3.5) + 5.0)) * 0.25);
                        float _2659 = 1.0 - _682;
                        float _2666 = sqrt(1.0 - ((1.0 - (_2659 * _2659)) * (1.0 - (_2658 * _2658))));
                        float _2667 = _2666 * _2666;
                        float _2668 = _2667 * _2667;
                        float _2669 = _2648 + _2613;
                        float _2670 = _2649 + _2614;
                        float _2671 = _2650 + _2615;
                        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
                        float _2679 = dot(vec3(_607, _610, _613), vec3(_2648, _2649, _2650));
                        float _3872 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
                        float _2682 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2683 = dot(vec3(_607, _610, _613), vec3(_2675 * _2669, _2675 * _2670, _2675 * _2671));
                        float _3883 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2686 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2690 = ((_2686 * _2686) * (_2668 + (-1.0))) + 1.0;
                        float _2691 = _2626 * _2667;
                        float _2692 = _2691 * _2691;
                        float _2695 = ((1.0 - _2692) * _2616) + _2692;
                        float _3894 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
                        float _2696 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                        float _2697 = 1.0 - _2667;
                        float _2707 = (0.5 / (((_2696 * ((_2682 * _2697) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2696 * _2697) + _2667) * _2682))) * _2696;
                        float _3905 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
                        float _2718 = (((_2668 * 3.1415927410125732421875) * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) / ((_2690 * _2690) * ((_2633 * 2.1991131305694580078125) + 3.141590118408203125))) * _2622;
                        _2444 = (_2637 * _2585.x) + _2543;
                        _2445 = (_2637 * _2585.y) + _2544;
                        _2446 = (_2637 * _2585.z) + _2545;
                        _2441 = (_2718 * _2602.x) + _2540;
                        _2442 = (_2718 * _2602.y) + _2541;
                        _2443 = (_2718 * _2602.z) + _2542;
                        if (_2547 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2540 = _2441;
                            _2541 = _2442;
                            _2542 = _2443;
                            _2543 = _2444;
                            _2544 = _2445;
                            _2545 = _2446;
                            _2546 = _2547;
                        }
                    }
                    frontier_phi_67_pred = _2444;
                    frontier_phi_67_pred_1 = _2443;
                    frontier_phi_67_pred_2 = _2442;
                    frontier_phi_67_pred_3 = _2441;
                    frontier_phi_67_pred_4 = _2445;
                    frontier_phi_67_pred_5 = _2446;
                }
                _2167 = frontier_phi_67_pred;
                _2165 = frontier_phi_67_pred_1;
                _2163 = frontier_phi_67_pred_2;
                _2161 = frontier_phi_67_pred_3;
                _2169 = frontier_phi_67_pred_4;
                _2171 = frontier_phi_67_pred_5;
                uint _2351 = _2350 + 1u;
                if (_2351 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2344 = _2161;
                    _2345 = _2163;
                    _2346 = _2165;
                    _2347 = _2167;
                    _2348 = _2169;
                    _2349 = _2171;
                    _2350 = _2351;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
            _2170 = _2171;
        }
        uvec4 _2174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2175 = _2174.z;
        uint _2177 = (_2175 >> 8u) & 15u;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        float _2320;
        float _2322;
        if (((4294967295u << _2177) & _2069) == 0u)
        {
            _2312 = _2160;
            _2314 = _2162;
            _2316 = _2164;
            _2318 = _2166;
            _2320 = _2168;
            _2322 = _2170;
        }
        else
        {
            float _2337 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
            float _2338 = _2337 * _2023;
            float _2339 = _2337 * _2024;
            float _2340 = _2337 * _2025;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2177 < ((_2175 >> 12u) & 15u))
            {
                float _2313;
                float _2315;
                float _2317;
                float _2319;
                float _2321;
                float _2323;
                float _2523 = _2160;
                float _2524 = _2162;
                float _2525 = _2164;
                float _2526 = _2166;
                float _2527 = _2168;
                float _2528 = _2170;
                uint _2529 = _2177;
                uint _2538;
                bool _2539;
                for (;;)
                {
                    _2538 = texelFetch(g_lightClassification, int((((_2063 << 5u) + (_2049 << 9u)) + (_2529 << 2u)) >> 2u)).x;
                    _2539 = _2538 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2539)
                    {
                        frontier_phi_81_pred = _2526;
                        frontier_phi_81_pred_1 = _2525;
                        frontier_phi_81_pred_2 = _2524;
                        frontier_phi_81_pred_3 = _2523;
                        frontier_phi_81_pred_4 = _2528;
                        frontier_phi_81_pred_5 = _2527;
                    }
                    else
                    {
                        float _2753;
                        float _2754;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _2766 = _2523;
                        float _2767 = _2524;
                        float _2768 = _2525;
                        float _2769 = _2526;
                        float _2770 = _2527;
                        float _2771 = _2528;
                        uint _2772 = _2538;
                        uint _2773;
                        vec4 _2798;
                        float _2799;
                        vec4 _2814;
                        vec3 _2826;
                        vec4 _2841;
                        vec4 _2856;
                        float _2902;
                        bool _2903;
                        for (;;)
                        {
                            uint _2783 = ((_2529 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2772));
                            _2773 = (_2772 + 4294967295u) & _2772;
                            uint _2785 = _2783 * 40u;
                            _2798 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2785 + 3u)).x));
                            _2799 = _2798.w;
                            uint _2801 = (_2783 * 40u) + 4u;
                            _2814 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 3u)).x));
                            uint _2816 = (_2783 * 40u) + 8u;
                            _2826 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x));
                            uint _2828 = (_2783 * 40u) + 16u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            uint _2843 = (_2783 * 40u) + 20u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2783 * 40u) + 24u;
                            vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2877 = (_2783 * 40u) + 28u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2902 = fma(_2025, _2890.z, fma(_2024, _2890.y, _2890.x * _2023)) + _2890.w;
                            _2903 = !((fma(_2025, _2871.z, fma(_2024, _2871.y, _2871.x * _2023)) + _2871.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2903)
                            {
                                float _2930 = _2798.x - _2023;
                                float _2931 = _2798.y - _2024;
                                float _2932 = _2798.z - _2025;
                                float _2933 = dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932));
                                float _2936 = inversesqrt(_2933);
                                float _2937 = _2936 * _2930;
                                float _2938 = _2936 * _2931;
                                float _2939 = _2936 * _2932;
                                float _2943 = 1.0 - (_2933 / (_2799 * _2799));
                                float _3916 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2944 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2948 = sqrt(_2933) * _2814.w;
                                float _2950 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                                float _2951 = _2950 * _2950;
                                float _2954 = ((1.0 - _2951) * dot(vec3(_2937, _2938, _2939), vec3(_607, _610, _613))) + _2951;
                                float _2957 = _2948 * _2948;
                                float _2961 = (fma(_2025, _2841.z, fma(_2024, _2841.y, _2841.x * _2023)) + _2841.w) / _2902;
                                float _2962 = (fma(_2025, _2856.z, fma(_2024, _2856.y, _2856.x * _2023)) + _2856.w) / _2902;
                                float _2966 = 1.0 - dot(vec2(_2961, _2962), vec2(_2961, _2962));
                                float _3932 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _2968 = _2967 * (((isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))) * _2944) / ((_2957 * 0.699999988079071044921875) + 1.0));
                                float _2980 = exp2(log2(1.0 / ((_2957 * 3.5) + 5.0)) * 0.25);
                                float _2981 = 1.0 - _682;
                                float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                                float _2989 = _2988 * _2988;
                                float _2990 = _2989 * _2989;
                                float _2991 = _2937 - _2338;
                                float _2992 = _2938 - _2339;
                                float _2993 = _2939 - _2340;
                                float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                                float _3001 = dot(vec3(_607, _610, _613), vec3((-0.0) - _2338, (-0.0) - _2339, (-0.0) - _2340));
                                float _3943 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3004 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _3005 = dot(vec3(_607, _610, _613), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                                float _3954 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3008 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                                float _3013 = _2950 * _2989;
                                float _3014 = _3013 * _3013;
                                float _3020 = ((1.0 - _3014) * dot(vec3(_607, _610, _613), vec3(_2937, _2938, _2939))) + _3014;
                                float _3965 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                                float _3022 = 1.0 - _2989;
                                float _3032 = (0.5 / (((_3021 * ((_3004 * _3022) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2989) * _3004))) * _3021;
                                float _3976 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3042 = (_2967 * _2944) * (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) / ((_3012 * _3012) * ((_2957 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2968 * _2814.x;
                                frontier_phi_87_pred_1 = _3042 * _2826.z;
                                frontier_phi_87_pred_2 = _3042 * _2826.y;
                                frontier_phi_87_pred_3 = _3042 * _2826.x;
                                frontier_phi_87_pred_4 = _2968 * _2814.z;
                                frontier_phi_87_pred_5 = _2968 * _2814.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3049 = frontier_phi_87_pred;
                            _3048 = frontier_phi_87_pred_1;
                            _3047 = frontier_phi_87_pred_2;
                            _3046 = frontier_phi_87_pred_3;
                            _3051 = frontier_phi_87_pred_4;
                            _3050 = frontier_phi_87_pred_5;
                            _2756 = _3049 + _2769;
                            _2757 = _3050 + _2770;
                            _2758 = _3051 + _2771;
                            _2753 = _3046 + _2766;
                            _2754 = _3047 + _2767;
                            _2755 = _3048 + _2768;
                            if (_2773 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2756;
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2773;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2756;
                        frontier_phi_81_pred_1 = _2755;
                        frontier_phi_81_pred_2 = _2754;
                        frontier_phi_81_pred_3 = _2753;
                        frontier_phi_81_pred_4 = _2758;
                        frontier_phi_81_pred_5 = _2757;
                    }
                    _2319 = frontier_phi_81_pred;
                    _2317 = frontier_phi_81_pred_1;
                    _2315 = frontier_phi_81_pred_2;
                    _2313 = frontier_phi_81_pred_3;
                    _2323 = frontier_phi_81_pred_4;
                    _2321 = frontier_phi_81_pred_5;
                    uint _2530 = _2529 + 1u;
                    if (_2530 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2523 = _2313;
                        _2524 = _2315;
                        _2525 = _2317;
                        _2526 = _2319;
                        _2527 = _2321;
                        _2528 = _2323;
                        _2529 = _2530;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2323;
                frontier_phi_56_57_ladder_1 = _2321;
                frontier_phi_56_57_ladder_2 = _2319;
                frontier_phi_56_57_ladder_3 = _2315;
                frontier_phi_56_57_ladder_4 = _2313;
                frontier_phi_56_57_ladder_5 = _2317;
            }
            else
            {
                frontier_phi_56_57_ladder = _2170;
                frontier_phi_56_57_ladder_1 = _2168;
                frontier_phi_56_57_ladder_2 = _2166;
                frontier_phi_56_57_ladder_3 = _2162;
                frontier_phi_56_57_ladder_4 = _2160;
                frontier_phi_56_57_ladder_5 = _2164;
            }
            _2312 = frontier_phi_56_57_ladder_4;
            _2314 = frontier_phi_56_57_ladder_3;
            _2316 = frontier_phi_56_57_ladder_5;
            _2318 = frontier_phi_56_57_ladder_2;
            _2320 = frontier_phi_56_57_ladder_1;
            _2322 = frontier_phi_56_57_ladder;
        }
        float _2327 = isnan(1.0) ? _666 : (isnan(_666) ? 1.0 : min(_666, 1.0));
        _2082 = (_2327 * _2318) + _1801;
        _2084 = (_2327 * _2320) + _1802;
        _2086 = (_2327 * _2322) + _1803;
        _2088 = ((_2312 * _651) * _2327) + _1965;
        _2090 = ((_2314 * _653) * _2327) + _1966;
        _2092 = ((_2316 * _654) * _2327) + _1967;
    }
    else
    {
        _2082 = _1801;
        _2084 = _1802;
        _2086 = _1803;
        _2088 = _1965;
        _2090 = _1966;
        _2092 = _1967;
    }
    float _3992 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4003 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4014 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _2109 = ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2082 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _666))) + ((_2088 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2110 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2084 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _666))) + ((_2090 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2111 = ((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2086 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _666))) + ((_2092 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1506)) * cbPerFrame._m0[3u].x);
    float _2112 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2113 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2114 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    uint _2115 = _626 + 6u;
    float _2123 = _586 / cbSceneParam._m0[86u].x;
    float _2124 = _587 / cbSceneParam._m0[86u].y;
    vec4 _2138 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2123, _2124, (log2((isnan(cbSceneParam._m0[77u].w) ? _554 : (isnan(_554) ? cbSceneParam._m0[77u].w : min(_554, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2140 = _2138.x;
    float _2141 = _2138.y;
    float _2142 = _2138.z;
    float _2143 = _2138.w;
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    if (_554 > cbSceneParam._m0[78u].w)
    {
        float _2185 = isnan(_554) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _554 : min(cbSceneParam._m0[80u].w, _554));
        float _2186 = _2185 / _554;
        float _2197 = _2186 * _261;
        float _2198 = _262 * _2186;
        float _2199 = (-0.0) - _2198;
        float _2200 = _2186 * _263;
        float _2202 = (cbSceneParam._m0[77u].w * _2199) / _2185;
        float _2203 = _2202 + cbSceneParam._m0[79u].w;
        float _2204 = cbSceneParam._m0[79u].w - _2198;
        float _2210 = sqrt(((_2197 * _2197) + (_2198 * _2198)) + (_2200 * _2200));
        float _2213 = (1.0 - (cbSceneParam._m0[77u].w / _2185)) * _2210;
        float _2219 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2221 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2454;
        if (abs((_2199 - _2202) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2454 = ((((_2203 > 0.0) ? exp2(_2219 * _2203) : (2.0 - exp2(_2221 * _2203))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2213;
        }
        else
        {
            float _2373 = 1.0 / cbSceneParam._m0[80u].x;
            float _2374 = isnan(_2204) ? _2203 : (isnan(_2203) ? _2204 : max(_2203, _2204));
            float _2375 = isnan(_2204) ? _2203 : (isnan(_2203) ? _2204 : min(_2203, _2204));
            float _2384 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : min(_2374, 0.0));
            float _2385 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : min(_2375, 0.0));
            _2454 = ((abs(_2210 / _2199) * cbSceneParam._m0[80u].y) * ((((_2384 - _2385) * 2.0) - ((exp2(_2219 * (isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0)))) - exp2(_2219 * (isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0))))) * _2373)) - ((exp2(_2221 * _2384) - exp2(_2221 * _2385)) * _2373))) + (_2213 * cbSceneParam._m0[80u].z);
        }
        vec4 _2456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2123, _2124, 1.0), 0.0);
        float _2465 = exp2((_2454 * (-1.44269502162933349609375)) * (1.0 - _2456.w));
        float _2466 = log2(_2465);
        float _2482 = log2(_2143);
        _2223 = (exp2(_2482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].x)) * _2456.x) / cbSceneParam._m0[78u].x)) + _2140;
        _2225 = (exp2(_2482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].y)) * _2456.y) / cbSceneParam._m0[78u].y)) + _2141;
        _2227 = (exp2(_2482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].z)) * _2456.z) / cbSceneParam._m0[78u].z)) + _2142;
        _2229 = _2465 * _2143;
    }
    else
    {
        _2223 = _2140;
        _2225 = _2141;
        _2227 = _2142;
        _2229 = _2143;
    }
    bool _2492;
    vec4 _2239;
    vec4 _2261;
    float _2263;
    float _2267;
    float _2268;
    float _2269;
    float _2270;
    bool _2280;
    for (;;)
    {
        _2239 = cbMatDynParam._m0[0u];
        float _2241 = roundEven(_2239.y);
        bool _2242 = _2241 == 3.0;
        float _2243 = log2(_2229);
        float _2250 = exp2(_2243 * cbSceneParam._m0[78u].x) * _2112;
        float _2251 = exp2(_2243 * cbSceneParam._m0[78u].y) * _2113;
        float _2252 = exp2(_2243 * cbSceneParam._m0[78u].z) * _2114;
        float _2259 = _568 + (-0.5);
        _2261 = cbMtdParam._m0[1u];
        _2263 = _2261.y * _2259;
        float _2266 = (_2241 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2267 = _2266 * (_2242 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2223)));
        _2268 = _2266 * (_2242 ? _2251 : (_2251 + (cbSceneParam._m0[72u].w * _2225)));
        _2269 = _2266 * (_2242 ? _2252 : (_2252 + (cbSceneParam._m0[72u].w * _2227)));
        _2270 = _2259 * 0.999000012874603271484375;
        _2280 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2280)
        {
            if ((cbInstanceData._m0[_626 + 7u].x + _2270) < 0.5)
            {
                _2492 = true;
                break;
            }
        }
        uint _2408 = _627 + uint(_2239.w);
        if ((cbInstanceData._m0[_2408].w < 1.0) && ((cbInstanceData._m0[_2408].w + _2270) < 0.5))
        {
            _2492 = true;
            break;
        }
        if ((_2263 + 1.0) < _2261.x)
        {
            _2492 = true;
            break;
        }
        _2492 = false;
        break;
    }
    float _2723;
    if (_2492)
    {
        discard_state = true;
        _2723 = 0.0;
    }
    else
    {
        _2723 = cbInstanceData._m0[_2115].w;
    }
    SV_Target.x = _2267;
    SV_Target.y = _2268;
    SV_Target.z = _2269;
    SV_Target.w = _2723;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2115].w;
    discard_exit();
}


