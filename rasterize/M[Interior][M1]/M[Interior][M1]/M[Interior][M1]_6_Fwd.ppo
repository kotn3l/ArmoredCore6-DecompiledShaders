#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1244;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    float _566 = (_556 * ((_512 - _432) - (_512 * _288))) + _432;
    float _567 = (_556 * ((_513 - _433) - (_513 * _288))) + _433;
    float _568 = (_556 * ((_514 - _434) - (_514 * _288))) + _434;
    float _583 = (cbMtdParam._m0[21u].z * _347) * _353;
    float _585 = (cbMtdParam._m0[21u].y * _348) * _353;
    bool _586 = _583 > 0.0;
    float _591;
    if (_586)
    {
        _591 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _591 = frontier_phi_27_26_ladder;
    }
    bool _593 = _585 > 0.0;
    float _598;
    if (_593)
    {
        _598 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _598 = frontier_phi_31_30_ladder;
    }
    float _601 = _376 ? (cbMtdParam._m0[18u].x / _354) : 5000.0;
    float _602 = isnan(_598) ? _591 : (isnan(_591) ? _598 : min(_591, _598));
    float _603 = isnan(_601) ? _602 : (isnan(_602) ? _601 : min(_602, _601));
    float _607 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _611 = ((_603 * _354) + _607) / _607;
    float _616 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _618 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _635 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_603 * _583)) / _611) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_603 * _585)) / _611) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _640 = _635.x * cbMtdParam._m0[14u].x;
    float _641 = _635.y * cbMtdParam._m0[14u].y;
    float _642 = _635.z * cbMtdParam._m0[14u].z;
    float _650;
    if (_586)
    {
        _650 = (1.0 - _359) / _583;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_583 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _359) / _583;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _650 = frontier_phi_35_34_ladder;
    }
    float _656;
    if (_593)
    {
        _656 = (1.0 - _360) / _585;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _360) / _585;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _656 = frontier_phi_39_38_ladder;
    }
    float _658 = isnan(_656) ? _650 : (isnan(_650) ? _656 : min(_650, _656));
    float _659 = isnan(_601) ? _658 : (isnan(_658) ? _601 : min(_658, _601));
    float _666 = ((_659 * _354) + _607) / _607;
    vec4 _680 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_385 + (_659 * _583)) / _666) + 0.5) + _616) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_388 + (_659 * _585)) / _666) + 0.5) + _618) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _682 = _680.w;
    float _684 = _682 - (_682 * _288);
    vec4 _708 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _710 = _708.x;
    vec4 _722 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _730 = (_722.x * 2.0) + (-1.0);
    float _732 = (_722.y * 2.0) + (-1.0);
    float _733 = dot(vec2(_730, _732), vec2(_730, _732));
    float _3427 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _738 = sqrt(1.0 - (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))));
    float _739 = _722.z * _288;
    float _742 = fma(_738, _197, fma(_732, _204, _730 * _190));
    float _745 = fma(_738, _198, fma(_732, _205, _730 * _191));
    float _748 = fma(_738, _199, fma(_732, _206, _730 * _192));
    float _752 = inversesqrt(dot(vec3(_742, _745, _748), vec3(_742, _745, _748)));
    float _753 = _752 * _742;
    float _754 = _752 * _745;
    float _755 = _752 * _748;
    float _3438 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _756 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
    float _3449 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3460 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3471 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3482 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _760 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _780 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _781 = _261 * _780;
    float _782 = _262 * _780;
    float _783 = _263 * _780;
    float _789 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _790 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _810 = fma(_755, cbSceneParam._m0[5u].z, fma(_754, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _753));
    float _813 = fma(_755, cbSceneParam._m0[6u].z, fma(_754, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _753));
    float _816 = fma(_755, cbSceneParam._m0[7u].z, fma(_754, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _753));
    uint _829 = uint(roundEven(NORMAL.w)) * 13u;
    uint _831 = _829 + 9u;
    uint _832 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0)))) * cbInstanceData._m0[_832].z;
    float _3493 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
    float _3504 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _3515 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _844 = 1.0 - _760;
    float _845 = _841 * _844;
    float _846 = _842 * _844;
    float _847 = _843 * _844;
    float _852 = (_841 + (-0.039999999105930328369140625)) * _760;
    float _853 = (_842 + (-0.039999999105930328369140625)) * _760;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _760;
    float _855 = _852 + 0.039999999105930328369140625;
    float _857 = _853 + 0.039999999105930328369140625;
    float _858 = _854 + 0.039999999105930328369140625;
    vec4 _867 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _789, cbSceneParam._m0[86u].y * _790));
    float _870 = _867.x * TEXCOORD.z;
    float _871 = dot(vec3(_753, _754, _755), vec3(_781, _782, _783));
    float _874 = _871 * 2.0;
    float _878 = (_874 * _753) - _781;
    float _879 = (_874 * _754) - _782;
    float _880 = (_874 * _755) - _783;
    float _884 = abs(dot(vec3(_781, _782, _783), vec3(_753, _754, _755)));
    float _3526 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _886 = sqrt(_756);
    float _899 = exp2((_886 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_886 * 3.0));
    float _905 = (1.0 - _899) * ((_886 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _906 = _899 * _886;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1243;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _970 = fma(_942, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _934));
        float _974 = fma(_942, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _934));
        float _978 = fma(_942, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _934));
        float _1001 = _934 + _753;
        float _1002 = _938 + _754;
        float _1003 = _942 + _755;
        float _1013 = fma(_1003, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_970 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_974 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[34u].z) + ((((((_978 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1071 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1037.x + (-0.5));
        float _1073 = _1071 * (_1037.y + (-0.5));
        float _1074 = _1071 * (_1037.z + (-0.5));
        float _1081 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1044.x + (-0.5));
        float _1083 = _1081 * (_1044.y + (-0.5));
        float _1084 = _1081 * (_1044.z + (-0.5));
        float _1091 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1051.x + (-0.5));
        float _1093 = _1091 * (_1051.y + (-0.5));
        float _1094 = _1091 * (_1051.z + (-0.5));
        float _1101 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1058.x + (-0.5));
        float _1103 = _1101 * (_1058.y + (-0.5));
        float _1104 = _1101 * (_1058.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1125 = (dot(vec3(_753, _754, _755), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3552 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1135 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3563 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3574 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * (_1137 + 1.0))) + _1142) * _1105;
        float _1152 = _1073 * 0.5;
        float _1153 = _1083 * 0.5;
        float _1154 = _1093 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_753, _754, _755), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3607 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_1179 + 1.0))) + _1184) * _1106;
        float _1194 = _1074 * 0.5;
        float _1195 = _1084 * 0.5;
        float _1196 = _1094 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_753, _754, _755), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3640 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1221 + 1.0))) + _1226) * _1107;
        _1243 = _1074;
        _1245 = _1073;
        _1246 = _1072;
        _1247 = _1084;
        _1248 = _1083;
        _1249 = _1082;
        _1250 = _1094;
        _1251 = _1093;
        _1252 = _1092;
        _1253 = _1107;
        _1254 = _1106;
        _1255 = _1105;
        _1256 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1257 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
    }
    else
    {
        _1243 = _1244;
        _1245 = _1244;
        _1246 = _1244;
        _1247 = _1244;
        _1248 = _1244;
        _1249 = _1244;
        _1250 = _1244;
        _1251 = _1244;
        _1252 = _1244;
        _1253 = _1244;
        _1254 = _1244;
        _1255 = _1244;
        _1256 = 0.0;
        _1257 = 0.0;
        _1258 = 0.0;
    }
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1284 = fma(_942, cbModelParam._m0[30u].z, fma(_938, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934));
        float _1288 = fma(_942, cbModelParam._m0[31u].z, fma(_938, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934));
        float _1292 = fma(_942, cbModelParam._m0[32u].z, fma(_938, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934));
        float _1315 = _934 + _753;
        float _1316 = _938 + _754;
        float _1317 = _942 + _755;
        float _1327 = fma(_1317, cbModelParam._m0[30u].z, fma(_1316, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1315)) - _1284;
        float _1328 = fma(_1317, cbModelParam._m0[31u].z, fma(_1316, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1315)) - _1288;
        float _1329 = fma(_1317, cbModelParam._m0[32u].z, fma(_1316, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1315)) - _1292;
        float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
        float _1346 = ((_1333 * _1327) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1284 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1347 = ((_1333 * _1328) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1288 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1348 = ((_1333 * _1329) / cbModelParam._m0[35u].z) + ((((((_1292 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1346, _1347, _1348), 0.0);
        float _1383 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1350.x + (-0.5));
        float _1385 = _1383 * (_1350.y + (-0.5));
        float _1386 = _1383 * (_1350.z + (-0.5));
        float _1393 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1357.x + (-0.5));
        float _1395 = _1393 * (_1357.y + (-0.5));
        float _1396 = _1393 * (_1357.z + (-0.5));
        float _1403 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1364.x + (-0.5));
        float _1405 = _1403 * (_1364.y + (-0.5));
        float _1406 = _1403 * (_1364.z + (-0.5));
        float _1413 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1371.x + (-0.5));
        float _1415 = _1413 * (_1371.y + (-0.5));
        float _1416 = _1413 * (_1371.z + (-0.5));
        float _1417 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1418 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = _1384 * 0.5;
        float _1421 = _1394 * 0.5;
        float _1422 = _1404 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_753, _754, _755), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1417 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _3703 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1447 + 1.0))) + _1452) * _1417;
        float _1462 = _1385 * 0.5;
        float _1463 = _1395 * 0.5;
        float _1464 = _1405 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_753, _754, _755), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1418 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3736 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1489 + 1.0))) + _1494) * _1418;
        float _1504 = _1386 * 0.5;
        float _1505 = _1396 * 0.5;
        float _1506 = _1406 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_753, _754, _755), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _3769 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1531 + 1.0))) + _1536) * _1419;
        _1553 = _1386;
        _1554 = _1385;
        _1555 = _1384;
        _1556 = _1396;
        _1557 = _1395;
        _1558 = _1394;
        _1559 = _1406;
        _1560 = _1405;
        _1561 = _1404;
        _1562 = _1419;
        _1563 = _1418;
        _1564 = _1417;
        _1565 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1566 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
    }
    else
    {
        _1553 = _1244;
        _1554 = _1244;
        _1555 = _1244;
        _1556 = _1244;
        _1557 = _1244;
        _1558 = _1244;
        _1559 = _1244;
        _1560 = _1244;
        _1561 = _1244;
        _1562 = _1244;
        _1563 = _1244;
        _1564 = _1244;
        _1565 = 0.0;
        _1566 = 0.0;
        _1567 = 0.0;
    }
    float _1577 = (cbModelParam._m0[1u].x * (_1565 - _1256)) + _1256;
    float _1578 = (cbModelParam._m0[1u].x * (_1566 - _1257)) + _1257;
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1600 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1578, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1603 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1578, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1606 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1578, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1577));
    float _1621 = _878 * 0.5;
    float _1622 = _879 * 0.5;
    float _1623 = _880 * 0.5;
    float _1624 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1627 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1554, _1557, _1560, _1563));
    float _1630 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1553, _1556, _1559, _1562));
    float _1664;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1637 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1243, _1247, _1250, _1253));
        float _1641 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1245, _1248, _1251, _1254));
        float _1645 = dot(vec4(_1621, _1622, _1623, 1.0), vec4(_1246, _1249, _1252, _1255));
        float _1652 = dot(vec4(cbModelParam._m0[39u]), vec4(_1621, _1622, _1623, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)), isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1652) ? 0.0 : (isnan(0.0) ? _1652 : max(0.0, _1652))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1675;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1666 = dot(vec4(cbModelParam._m0[40u]), vec4(_1621, _1622, _1623, 1.0));
        _1675 = dot(vec3(isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)), isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1666) ? 0.0 : (isnan(0.0) ? _1666 : max(0.0, _1666))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1675 = 1.0;
    }
    float _1679 = (_1675 * cbModelParam._m0[1u].x) + (_1664 * (1.0 - cbModelParam._m0[1u].x));
    float _1689 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _756);
    float _1690 = isnan(_1689) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1689 : min(cbModelParam._m0[25u].z, _1689));
    float _1770;
    float _1772;
    float _1774;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1737 = fma(_942, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _934)) + cbModelParam._m0[13u].w;
        float _1741 = fma(_942, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _934)) + cbModelParam._m0[14u].w;
        float _1745 = fma(_942, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _934)) + cbModelParam._m0[15u].w;
        float _1748 = fma(_880, cbModelParam._m0[13u].z, fma(_879, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878));
        float _1751 = fma(_880, cbModelParam._m0[14u].z, fma(_879, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878));
        float _1754 = fma(_880, cbModelParam._m0[15u].z, fma(_879, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878));
        float _1782;
        if (_1748 > 0.0)
        {
            _1782 = abs((1.0 - _1737) / _1748);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1737 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1782 = frontier_phi_54_52_ladder;
        }
        float _2140;
        if (_1751 > 0.0)
        {
            _2140 = abs((1.0 - _1741) / _1751);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1741 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2140 = frontier_phi_63_59_ladder;
        }
        float _2456;
        if (_1754 > 0.0)
        {
            _2456 = abs((1.0 - _1745) / _1754);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1745 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2456 = frontier_phi_77_70_ladder;
        }
        float _2458 = isnan(_2140) ? _1782 : (isnan(_1782) ? _2140 : min(_1782, _2140));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1748) + _1737;
        float _2464 = (_2459 * _1751) + _1741;
        float _2465 = (_2459 * _1754) + _1745;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1690);
            frontier_phi_53_77_ladder = _2591.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2591.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2591.z * cbModelParam._m0[1u].y;
        }
        _1770 = frontier_phi_53_77_ladder;
        _1772 = frontier_phi_53_77_ladder_1;
        _1774 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1758 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_878, _879, _880), _1690);
        _1770 = _1758.x * cbModelParam._m0[1u].y;
        _1772 = _1758.y * cbModelParam._m0[1u].y;
        _1774 = _1758.z * cbModelParam._m0[1u].y;
    }
    float _1778 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _756);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1778 : min(cbModelParam._m0[25u].w, _1778));
    float _1867;
    float _1869;
    float _1871;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1831 = fma(_942, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _934)) + cbModelParam._m0[21u].w;
        float _1835 = fma(_942, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _934)) + cbModelParam._m0[22u].w;
        float _1839 = fma(_942, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _934)) + cbModelParam._m0[23u].w;
        float _1842 = fma(_880, cbModelParam._m0[21u].z, fma(_879, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878));
        float _1845 = fma(_880, cbModelParam._m0[22u].z, fma(_879, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878));
        float _1848 = fma(_880, cbModelParam._m0[23u].z, fma(_879, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878));
        float _2145;
        if (_1842 > 0.0)
        {
            _2145 = abs((1.0 - _1831) / _1842);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1831 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2145 = frontier_phi_65_61_ladder;
        }
        float _2482;
        if (_1845 > 0.0)
        {
            _2482 = abs((1.0 - _1835) / _1845);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1845 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1835 + 1.0) / _1845);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2482 = frontier_phi_79_72_ladder;
        }
        float _2651;
        if (_1848 > 0.0)
        {
            _2651 = abs((1.0 - _1839) / _1848);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1839 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2651 = frontier_phi_93_88_ladder;
        }
        float _2653 = isnan(_2482) ? _2145 : (isnan(_2145) ? _2482 : min(_2145, _2482));
        float _2654 = isnan(_2651) ? _2653 : (isnan(_2653) ? _2651 : min(_2653, _2651));
        float _2658 = (_2654 * _1842) + _1831;
        float _2659 = (_2654 * _1845) + _1835;
        float _2660 = (_2654 * _1848) + _1839;
        float _2661 = _2654 * 9.9999997473787516355514526367188e-05;
        float _2662 = (-1.0) - _2661;
        float _2664 = _2661 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2660 > _2664) || ((_2660 < _2662) || ((_2659 > _2664) || ((_2659 < _2662) || ((_2658 < _2662) || (_2658 > _2664))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2660, cbModelParam._m0[17u].z, fma(_2659, cbModelParam._m0[17u].y, _2658 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2660, cbModelParam._m0[18u].z, fma(_2659, cbModelParam._m0[18u].y, _2658 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2660, cbModelParam._m0[19u].z, fma(_2659, cbModelParam._m0[19u].y, _2658 * cbModelParam._m0[19u].x))), _1779);
            frontier_phi_62_93_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _1867 = frontier_phi_62_93_ladder_2;
        _1869 = frontier_phi_62_93_ladder_1;
        _1871 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_878, _879, _880), _1779);
        _1867 = _1851.x * cbModelParam._m0[1u].z;
        _1869 = _1851.y * cbModelParam._m0[1u].z;
        _1871 = _1851.z * cbModelParam._m0[1u].z;
    }
    float _1884 = (((_905 * _855) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1867 - _1770)) + _1770);
    float _1886 = (((_905 * _857) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1869 - _1772)) + _1772);
    float _1888 = (((_905 * _858) + _906) * _870) * ((cbModelParam._m0[1u].w * (_1871 - _1774)) + _1774);
    float _1891 = fma(_1888, cbSceneParam._m0[89u].z, fma(_1886, cbSceneParam._m0[89u].y, _1884 * cbSceneParam._m0[89u].x));
    float _1894 = fma(_1888, cbSceneParam._m0[90u].z, fma(_1886, cbSceneParam._m0[90u].y, _1884 * cbSceneParam._m0[90u].x));
    float _1897 = fma(_1888, cbSceneParam._m0[91u].z, fma(_1886, cbSceneParam._m0[91u].y, _1884 * cbSceneParam._m0[91u].x));
    uvec4 _1907 = floatBitsToUint(cbInstanceData._m0[_829 + 5u]);
    uint _1909 = _1907.x * 14u;
    uint _1910 = _1909 + 13u;
    float _1915 = _870 + (-1.0);
    float _1918 = (cbLight._m0[_1910].x * _1915) + 1.0;
    float _1919 = (cbLight._m0[_1910].y * _1915) + 1.0;
    uint _1920 = _1909 + 5u;
    float _1926 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1930 = _1909 + 4u;
    float _1936 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1940 = _1909 | 1u;
    float _1951 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_753, _754, _755));
    float _1954 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_753, _754, _755));
    float _3905 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _3916 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1959 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * 0.3183098733425140380859375;
    float _1961 = (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * 0.3183098733425140380859375;
    float _1968 = ((cbLight._m0[_1920].x * _1926) * _1961) + ((cbLight._m0[_1930].x * _1936) * _1959);
    float _1969 = ((_1926 * cbLight._m0[_1920].y) * _1961) + ((_1936 * cbLight._m0[_1930].y) * _1959);
    float _1970 = ((_1926 * cbLight._m0[_1920].z) * _1961) + ((_1936 * cbLight._m0[_1930].z) * _1959);
    uint _1972 = _1909 + 8u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _756) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1909].x + _781;
    float _1988 = cbLight._m0[_1909].y + _782;
    float _1989 = cbLight._m0[_1909].z + _783;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1909].xyz));
    float _3927 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _2001 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _2002 = dot(vec3(_753, _754, _755), vec3(_1994, _1995, _1996));
    float _3949 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _2006 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1994, _1995, _1996));
    float _3960 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2010 = _1986 * _1986;
    float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
    float _2022 = exp2(log2(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) * 5.0);
    float _2023 = 0.959999978542327880859375 - _852;
    float _2025 = 0.959999978542327880859375 - _853;
    float _2026 = 0.959999978542327880859375 - _854;
    float _2033 = 1.0 - _1986;
    float _2044 = (0.5 / (((_2001 * ((_2000 * _2033) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2033) + _1986) * _2000))) * _2000;
    float _3971 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _2046 = (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
    uint _2057 = _1909 + 9u;
    float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1940].w)) * _756) * 0.949999988079071044921875);
    float _2069 = _2068 * _2068;
    float _2070 = cbLight._m0[_1940].x + _781;
    float _2071 = cbLight._m0[_1940].y + _782;
    float _2072 = cbLight._m0[_1940].z + _783;
    float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
    float _2077 = _2076 * _2070;
    float _2078 = _2076 * _2071;
    float _2079 = _2076 * _2072;
    float _2080 = dot(vec3(_753, _754, _755), vec3(cbLight._m0[_1940].xyz));
    float _3982 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _2084 = dot(vec3(_753, _754, _755), vec3(_2077, _2078, _2079));
    float _3993 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
    float _2088 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2077, _2078, _2079));
    float _4004 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2092 = _2069 * _2069;
    float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
    float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) * 5.0);
    float _2110 = 1.0 - _2069;
    float _2120 = (0.5 / (((_2001 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_2001 * _2110) + _2069) * _2083))) * _2083;
    float _4015 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
    float _2132 = (((((_2103 * _2023) + _855) * cbLight._m0[_2057].x) * _2122) * _1926) + (((((_2022 * _2023) + _855) * cbLight._m0[_1972].x) * _2046) * _1936);
    float _2133 = (((((_2103 * _2025) + _857) * cbLight._m0[_2057].y) * _2122) * _1926) + (((((_2022 * _2025) + _857) * cbLight._m0[_1972].y) * _2046) * _1936);
    float _2134 = (((((_2103 * _2026) + _858) * cbLight._m0[_2057].z) * _2122) * _1926) + (((((_2022 * _2026) + _858) * cbLight._m0[_1972].z) * _2046) * _1936);
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    if (_1907.y == 0u)
    {
        float _2189 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2189;
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2189;
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2189;
        uvec4 _2204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2205 = _2204.x;
        uint _2216 = uint((float(_2204.y) * floor(float(uint(cbSceneParam._m0[85u].y * _790) / _2205))) + floor(float(uint(cbSceneParam._m0[85u].x * _789) / _2205)));
        float _2226 = (log2(_2192 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2227 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        uint _2230 = uint(isnan(14.0) ? _2227 : (isnan(_2227) ? 14.0 : min(_2227, 14.0)));
        uvec4 _2235 = texelFetch(g_lightClusterGridBuffer, int(((_2230 << 2u) + (_2216 << 6u)) >> 2u));
        uint _2236 = _2235.x;
        uint _2237 = _2204.z;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        float _2353;
        if (((((1u << ((_2237 >> 4u) & 15u)) + 4294967295u) & _2236) == 0u) || ((_2237 & 240u) == 0u))
        {
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
        }
        else
        {
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2354;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            uint _2525 = 0u;
            uint _2534;
            bool _2535;
            for (;;)
            {
                _2534 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2525 << 2u)) >> 2u)).x;
                _2535 = _2534 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2535)
                {
                    frontier_phi_90_pred = _2524;
                    frontier_phi_90_pred_1 = _2519;
                    frontier_phi_90_pred_2 = _2520;
                    frontier_phi_90_pred_3 = _2521;
                    frontier_phi_90_pred_4 = _2522;
                    frontier_phi_90_pred_5 = _2523;
                }
                else
                {
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    uint _2700;
                    _2694 = _2519;
                    _2695 = _2520;
                    _2696 = _2521;
                    _2697 = _2522;
                    _2698 = _2523;
                    _2699 = _2524;
                    _2700 = _2534;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    float _2605;
                    for (;;)
                    {
                        uint _2704 = uint(findLSB(_2700)) + (_2525 << 5u);
                        uint _2701 = (_2700 + 4294967295u) & _2700;
                        uint _2706 = _2704 * 48u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2706)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2706 + 3u)).x));
                        uint _2726 = (_2704 * 48u) + 4u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 3u)).x));
                        uint _2745 = (_2704 * 48u) + 8u;
                        vec3 _2756 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x));
                        float _2760 = _2720.x - _2190;
                        float _2761 = _2720.y - _2191;
                        float _2762 = _2720.z - _2192;
                        float _2763 = dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762));
                        float _2766 = inversesqrt(_2763);
                        float _2767 = _2766 * _2760;
                        float _2768 = _2766 * _2761;
                        float _2769 = _2766 * _2762;
                        float _2770 = dot(vec3(_810, _813, _816), vec3(_2767, _2768, _2769));
                        float _2775 = 1.0 - (_2763 * _2720.w);
                        float _4036 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2776 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2777 = sqrt(_2763) * _2739.w;
                        float _2780 = 1.39999997615814208984375 / (_2777 + 1.39999997615814208984375);
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2770) + _2781;
                        float _2787 = _2777 * _2777;
                        float _2791 = ((isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0))) * _2776) / ((_2787 * 0.699999988079071044921875) + 1.0);
                        float _2795 = (-0.0) - _2190;
                        float _2796 = (-0.0) - _2191;
                        float _2797 = (-0.0) - _2192;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2802 = _2801 * _2795;
                        float _2803 = _2801 * _2796;
                        float _2804 = _2801 * _2797;
                        float _2812 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2813 = 1.0 - _886;
                        float _2820 = sqrt(1.0 - ((1.0 - (_2813 * _2813)) * (1.0 - (_2812 * _2812))));
                        float _2821 = _2820 * _2820;
                        float _2822 = _2821 * _2821;
                        float _2823 = _2802 + _2767;
                        float _2824 = _2803 + _2768;
                        float _2825 = _2804 + _2769;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2833 = dot(vec3(_810, _813, _816), vec3(_2802, _2803, _2804));
                        float _4052 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2836 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2837 = dot(vec3(_810, _813, _816), vec3(_2829 * _2823, _2829 * _2824, _2829 * _2825));
                        float _4063 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2840 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2844 = ((_2840 * _2840) * (_2822 + (-1.0))) + 1.0;
                        float _2845 = _2780 * _2821;
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * _2770) + _2846;
                        float _4074 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2850 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
                        float _2851 = 1.0 - _2821;
                        float _2861 = (0.5 / (((_2850 * ((_2836 * _2851) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2850 * _2851) + _2821) * _2836))) * _2850;
                        float _4085 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2872 = (((_2822 * 3.1415927410125732421875) * (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0)))) / ((_2844 * _2844) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2776;
                        _2603 = (_2791 * _2739.x) + _2697;
                        _2604 = (_2791 * _2739.y) + _2698;
                        _2605 = (_2791 * _2739.z) + _2699;
                        _2600 = (_2872 * _2756.x) + _2694;
                        _2601 = (_2872 * _2756.y) + _2695;
                        _2602 = (_2872 * _2756.z) + _2696;
                        if (_2701 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2694 = _2600;
                            _2695 = _2601;
                            _2696 = _2602;
                            _2697 = _2603;
                            _2698 = _2604;
                            _2699 = _2605;
                            _2700 = _2701;
                        }
                    }
                    frontier_phi_90_pred = _2605;
                    frontier_phi_90_pred_1 = _2600;
                    frontier_phi_90_pred_2 = _2601;
                    frontier_phi_90_pred_3 = _2602;
                    frontier_phi_90_pred_4 = _2603;
                    frontier_phi_90_pred_5 = _2604;
                }
                _2354 = frontier_phi_90_pred;
                _2344 = frontier_phi_90_pred_1;
                _2346 = frontier_phi_90_pred_2;
                _2348 = frontier_phi_90_pred_3;
                _2350 = frontier_phi_90_pred_4;
                _2352 = frontier_phi_90_pred_5;
                uint _2526 = _2525 + 1u;
                if (_2526 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2519 = _2344;
                    _2520 = _2346;
                    _2521 = _2348;
                    _2522 = _2350;
                    _2523 = _2352;
                    _2524 = _2354;
                    _2525 = _2526;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
        }
        uvec4 _2357 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2358 = _2357.z;
        uint _2360 = (_2358 >> 8u) & 15u;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        float _2497;
        if (((4294967295u << _2360) & _2236) == 0u)
        {
            _2487 = _2343;
            _2489 = _2345;
            _2491 = _2347;
            _2493 = _2349;
            _2495 = _2351;
            _2497 = _2353;
        }
        else
        {
            float _2512 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
            float _2513 = _2512 * _2190;
            float _2514 = _2512 * _2191;
            float _2515 = _2512 * _2192;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2360 < ((_2358 >> 12u) & 15u))
            {
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2498;
                float _2677 = _2343;
                float _2678 = _2345;
                float _2679 = _2347;
                float _2680 = _2349;
                float _2681 = _2351;
                float _2682 = _2353;
                uint _2683 = _2360;
                uint _2692;
                bool _2693;
                for (;;)
                {
                    _2692 = texelFetch(g_lightClassification, int((((_2230 << 5u) + (_2216 << 9u)) + (_2683 << 2u)) >> 2u)).x;
                    _2693 = _2692 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2693)
                    {
                        frontier_phi_99_pred = _2680;
                        frontier_phi_99_pred_1 = _2679;
                        frontier_phi_99_pred_2 = _2678;
                        frontier_phi_99_pred_3 = _2677;
                        frontier_phi_99_pred_4 = _2682;
                        frontier_phi_99_pred_5 = _2681;
                    }
                    else
                    {
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2903;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _2911 = _2677;
                        float _2912 = _2678;
                        float _2913 = _2679;
                        float _2914 = _2680;
                        float _2915 = _2681;
                        float _2916 = _2682;
                        uint _2917 = _2692;
                        uint _2918;
                        vec4 _2943;
                        float _2944;
                        vec4 _2959;
                        vec3 _2971;
                        vec4 _2986;
                        vec4 _3001;
                        float _3047;
                        bool _3048;
                        for (;;)
                        {
                            uint _2928 = ((_2683 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2917));
                            _2918 = (_2917 + 4294967295u) & _2917;
                            uint _2930 = _2928 * 40u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            _2944 = _2943.w;
                            uint _2946 = (_2928 * 40u) + 4u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2928 * 40u) + 8u;
                            _2971 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x));
                            uint _2973 = (_2928 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2988 = (_2928 * 40u) + 20u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3003 = (_2928 * 40u) + 24u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            uint _3022 = (_2928 * 40u) + 28u;
                            vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3047 = fma(_2192, _3035.z, fma(_2191, _3035.y, _3035.x * _2190)) + _3035.w;
                            _3048 = !((fma(_2192, _3016.z, fma(_2191, _3016.y, _3016.x * _2190)) + _3016.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3048)
                            {
                                float _3075 = _2943.x - _2190;
                                float _3076 = _2943.y - _2191;
                                float _3077 = _2943.z - _2192;
                                float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                                float _3081 = inversesqrt(_3078);
                                float _3082 = _3081 * _3075;
                                float _3083 = _3081 * _3076;
                                float _3084 = _3081 * _3077;
                                float _3088 = 1.0 - (_3078 / (_2944 * _2944));
                                float _4096 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3089 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3093 = sqrt(_3078) * _2959.w;
                                float _3095 = 1.39999997615814208984375 / (_3093 + 1.39999997615814208984375);
                                float _3096 = _3095 * _3095;
                                float _3099 = ((1.0 - _3096) * dot(vec3(_3082, _3083, _3084), vec3(_810, _813, _816))) + _3096;
                                float _3102 = _3093 * _3093;
                                float _3106 = (fma(_2192, _2986.z, fma(_2191, _2986.y, _2986.x * _2190)) + _2986.w) / _3047;
                                float _3107 = (fma(_2192, _3001.z, fma(_2191, _3001.y, _3001.x * _2190)) + _3001.w) / _3047;
                                float _3111 = 1.0 - dot(vec2(_3106, _3107), vec2(_3106, _3107));
                                float _4112 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3113 = _3112 * (((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3089) / ((_3102 * 0.699999988079071044921875) + 1.0));
                                float _3125 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                                float _3126 = 1.0 - _886;
                                float _3133 = sqrt(1.0 - ((1.0 - (_3126 * _3126)) * (1.0 - (_3125 * _3125))));
                                float _3134 = _3133 * _3133;
                                float _3135 = _3134 * _3134;
                                float _3136 = _3082 - _2513;
                                float _3137 = _3083 - _2514;
                                float _3138 = _3084 - _2515;
                                float _3142 = inversesqrt(dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138)));
                                float _3146 = dot(vec3(_810, _813, _816), vec3((-0.0) - _2513, (-0.0) - _2514, (-0.0) - _2515));
                                float _4123 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3149 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3150 = dot(vec3(_810, _813, _816), vec3(_3142 * _3136, _3142 * _3137, _3142 * _3138));
                                float _4134 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3153 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3157 = ((_3153 * _3153) * (_3135 + (-1.0))) + 1.0;
                                float _3158 = _3095 * _3134;
                                float _3159 = _3158 * _3158;
                                float _3165 = ((1.0 - _3159) * dot(vec3(_810, _813, _816), vec3(_3082, _3083, _3084))) + _3159;
                                float _4145 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                                float _3166 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                                float _3167 = 1.0 - _3134;
                                float _3177 = (0.5 / (((_3166 * ((_3149 * _3167) + _3134)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3134) * _3149))) * _3166;
                                float _4156 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                                float _3187 = (_3112 * _3089) * (((_3135 * 3.1415927410125732421875) * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) / ((_3157 * _3157) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3113 * _2959.z;
                                frontier_phi_105_pred_1 = _3187 * _2971.x;
                                frontier_phi_105_pred_2 = _3187 * _2971.y;
                                frontier_phi_105_pred_3 = _3187 * _2971.z;
                                frontier_phi_105_pred_4 = _3113 * _2959.x;
                                frontier_phi_105_pred_5 = _3113 * _2959.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3196 = frontier_phi_105_pred;
                            _3191 = frontier_phi_105_pred_1;
                            _3192 = frontier_phi_105_pred_2;
                            _3193 = frontier_phi_105_pred_3;
                            _3194 = frontier_phi_105_pred_4;
                            _3195 = frontier_phi_105_pred_5;
                            _2901 = _3194 + _2914;
                            _2902 = _3195 + _2915;
                            _2903 = _3196 + _2916;
                            _2898 = _3191 + _2911;
                            _2899 = _3192 + _2912;
                            _2900 = _3193 + _2913;
                            if (_2918 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2918;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2901;
                        frontier_phi_99_pred_1 = _2900;
                        frontier_phi_99_pred_2 = _2899;
                        frontier_phi_99_pred_3 = _2898;
                        frontier_phi_99_pred_4 = _2903;
                        frontier_phi_99_pred_5 = _2902;
                    }
                    _2494 = frontier_phi_99_pred;
                    _2492 = frontier_phi_99_pred_1;
                    _2490 = frontier_phi_99_pred_2;
                    _2488 = frontier_phi_99_pred_3;
                    _2498 = frontier_phi_99_pred_4;
                    _2496 = frontier_phi_99_pred_5;
                    uint _2684 = _2683 + 1u;
                    if (_2684 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2677 = _2488;
                        _2678 = _2490;
                        _2679 = _2492;
                        _2680 = _2494;
                        _2681 = _2496;
                        _2682 = _2498;
                        _2683 = _2684;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2498;
                frontier_phi_81_82_ladder_1 = _2494;
                frontier_phi_81_82_ladder_2 = _2492;
                frontier_phi_81_82_ladder_3 = _2490;
                frontier_phi_81_82_ladder_4 = _2488;
                frontier_phi_81_82_ladder_5 = _2496;
            }
            else
            {
                frontier_phi_81_82_ladder = _2353;
                frontier_phi_81_82_ladder_1 = _2349;
                frontier_phi_81_82_ladder_2 = _2347;
                frontier_phi_81_82_ladder_3 = _2345;
                frontier_phi_81_82_ladder_4 = _2343;
                frontier_phi_81_82_ladder_5 = _2351;
            }
            _2487 = frontier_phi_81_82_ladder_4;
            _2489 = frontier_phi_81_82_ladder_3;
            _2491 = frontier_phi_81_82_ladder_2;
            _2493 = frontier_phi_81_82_ladder_1;
            _2495 = frontier_phi_81_82_ladder_5;
            _2497 = frontier_phi_81_82_ladder;
        }
        float _2502 = isnan(1.0) ? _870 : (isnan(_870) ? 1.0 : min(_870, 1.0));
        _2249 = (_2502 * _2493) + _1968;
        _2251 = (_2502 * _2495) + _1969;
        _2253 = (_2502 * _2497) + _1970;
        _2255 = ((_2487 * _855) * _2502) + _2132;
        _2257 = ((_2489 * _857) * _2502) + _2133;
        _2259 = ((_2491 * _858) * _2502) + _2134;
    }
    else
    {
        _2249 = _1968;
        _2251 = _1969;
        _2253 = _1970;
        _2255 = _2132;
        _2257 = _2133;
        _2259 = _2134;
    }
    uint _2265 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _4172 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4183 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4194 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2290 = (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2249 + ((isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))) * _870))) + ((_2255 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2265].x * ((_684 * ((_640 - _566) - (_640 * _288))) + _566));
    float _2292 = ((cbInstanceData._m0[_2265].y * ((_684 * ((_641 - _567) - (_641 * _288))) + _567)) + ((_2257 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2251 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _870)));
    float _2294 = ((cbInstanceData._m0[_2265].z * ((_684 * ((_642 - _568) - (_642 * _288))) + _568)) + ((_2259 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1679)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2253 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _870)));
    uint _2298 = _829 + 6u;
    float _2306 = _789 / cbSceneParam._m0[86u].x;
    float _2307 = _790 / cbSceneParam._m0[86u].y;
    vec4 _2321 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2323 = _2321.x;
    float _2324 = _2321.y;
    float _2325 = _2321.z;
    float _2326 = _2321.w;
    float _2406;
    float _2408;
    float _2410;
    float _2412;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2368 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2369 = _2368 / _776;
        float _2380 = _2369 * _261;
        float _2381 = _262 * _2369;
        float _2382 = (-0.0) - _2381;
        float _2383 = _2369 * _263;
        float _2385 = (cbSceneParam._m0[77u].w * _2382) / _2368;
        float _2386 = _2385 + cbSceneParam._m0[79u].w;
        float _2387 = cbSceneParam._m0[79u].w - _2381;
        float _2393 = sqrt(((_2380 * _2380) + (_2381 * _2381)) + (_2383 * _2383));
        float _2396 = (1.0 - (cbSceneParam._m0[77u].w / _2368)) * _2393;
        float _2402 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2404 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2613;
        if (abs((_2382 - _2385) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2613 = ((((_2386 > 0.0) ? exp2(_2402 * _2386) : (2.0 - exp2(_2404 * _2386))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2396;
        }
        else
        {
            float _2548 = 1.0 / cbSceneParam._m0[80u].x;
            float _2549 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : max(_2386, _2387));
            float _2550 = isnan(_2387) ? _2386 : (isnan(_2386) ? _2387 : min(_2386, _2387));
            float _2559 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : min(_2549, 0.0));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            _2613 = ((abs(_2393 / _2382) * cbSceneParam._m0[80u].y) * ((((_2559 - _2560) * 2.0) - ((exp2(_2402 * (isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0)))) - exp2(_2402 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0))))) * _2548)) - ((exp2(_2404 * _2559) - exp2(_2404 * _2560)) * _2548))) + (_2396 * cbSceneParam._m0[80u].z);
        }
        vec4 _2615 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2306, _2307, 1.0), 0.0);
        float _2624 = exp2((_2613 * (-1.44269502162933349609375)) * (1.0 - _2615.w));
        float _2625 = log2(_2624);
        float _2641 = log2(_2326);
        _2406 = (exp2(_2641 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].x)) * _2615.x) / cbSceneParam._m0[78u].x)) + _2323;
        _2408 = (exp2(_2641 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].y)) * _2615.y) / cbSceneParam._m0[78u].y)) + _2324;
        _2410 = (exp2(_2641 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2625 * cbSceneParam._m0[78u].z)) * _2615.z) / cbSceneParam._m0[78u].z)) + _2325;
        _2412 = _2624 * _2326;
    }
    else
    {
        _2406 = _2323;
        _2408 = _2324;
        _2410 = _2325;
        _2412 = _2326;
    }
    float _2424 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2425 = _2424 == 3.0;
    float _2426 = log2(_2412);
    float _2433 = exp2(_2426 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0)));
    float _2434 = exp2(_2426 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)));
    float _2435 = exp2(_2426 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0)));
    float _2444 = (_2424 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2444 * (_2425 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.y = _2444 * (_2425 ? _2434 : (_2434 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.z = _2444 * (_2425 ? _2435 : (_2435 + (cbSceneParam._m0[72u].w * _2410)));
    SV_Target.w = cbInstanceData._m0[_2298].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2298].w;
}


