#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1304;
float _3758;
float _3759;
float _3760;
float _3761;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.w;
    float _309 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _296) + cbMtdParam._m0[11u].x) * _290.x;
    float _311 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _296) + cbMtdParam._m0[11u].y) * _290.y;
    float _313 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _296) + cbMtdParam._m0[11u].z) * _290.z;
    float _339 = cbMtdParam._m0[22u].y + _269;
    float _340 = cbMtdParam._m0[22u].z + _270;
    float _341 = cbMtdParam._m0[22u].w + _271;
    float _355 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_198, _199, _200));
    float _356 = (-0.0) - dot(vec3(_339, _340, _341), vec3(_212, _213, _214));
    float _357 = (-0.0) - dot(vec3(_339, _340, _341), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _364 = (cbMtdParam._m0[19u].x * _355) * _361;
    float _366 = (cbMtdParam._m0[18u].w * _356) * _361;
    float _367 = fract(TEXCOORD.x);
    float _368 = fract(TEXCOORD.y);
    float _374;
    if (_364 > 0.0)
    {
        _374 = (1.0 - _367) / _364;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _367) / _364;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _374 = frontier_phi_3_2_ladder;
    }
    float _382;
    if (_366 > 0.0)
    {
        _382 = (1.0 - _368) / _366;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_366 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _368) / _366;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _382 = frontier_phi_7_6_ladder;
    }
    bool _384 = _362 > 0.0;
    float _386 = _384 ? (cbMtdParam._m0[15u].x / _362) : 5000.0;
    float _387 = isnan(_382) ? _374 : (isnan(_374) ? _382 : min(_374, _382));
    float _388 = isnan(_386) ? _387 : (isnan(_387) ? _386 : min(_387, _386));
    float _392 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = _367 + (-0.5);
    float _396 = _368 + (-0.5);
    float _399 = ((_388 * _362) + _392) / _392;
    vec4 _424 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_393 + (_388 * _364)) / _399) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_396 + (_388 * _366)) / _399) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _426 = _424.x;
    float _427 = _424.y;
    float _428 = _424.z;
    float _440 = (_426 - (_426 * _296)) * cbMtdParam._m0[9u].x;
    float _441 = (_427 - (_427 * _296)) * cbMtdParam._m0[9u].y;
    float _442 = cbMtdParam._m0[9u].z * (_428 - (_428 * _296));
    float _464 = (cbMtdParam._m0[21u].x * _355) * _361;
    float _466 = (cbMtdParam._m0[20u].w * _356) * _361;
    bool _467 = _464 > 0.0;
    float _472;
    if (_467)
    {
        _472 = (1.0 - _367) / _464;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _367) / _464;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _472 = frontier_phi_11_10_ladder;
    }
    bool _474 = _466 > 0.0;
    float _479;
    if (_474)
    {
        _479 = (1.0 - _368) / _466;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_466 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _368) / _466;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _479 = frontier_phi_15_14_ladder;
    }
    float _482 = _384 ? (cbMtdParam._m0[16u].z / _362) : 5000.0;
    float _483 = isnan(_479) ? _472 : (isnan(_472) ? _479 : min(_472, _479));
    float _484 = isnan(_482) ? _483 : (isnan(_483) ? _482 : min(_483, _482));
    float _488 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _492 = ((_484 * _362) + _488) / _488;
    float _497 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _499 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _515 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_484 * _464)) / _492) + 0.5) + _497) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_484 * _466)) / _492) + 0.5) + _499) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _520 = _515.x * cbMtdParam._m0[10u].x;
    float _521 = _515.y * cbMtdParam._m0[10u].y;
    float _522 = _515.z * cbMtdParam._m0[10u].z;
    float _530;
    if (_467)
    {
        _530 = (1.0 - _367) / _464;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _367) / _464;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _530 = frontier_phi_19_18_ladder;
    }
    float _536;
    if (_474)
    {
        _536 = (1.0 - _368) / _466;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_466 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _368) / _466;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _536 = frontier_phi_23_22_ladder;
    }
    float _538 = isnan(_536) ? _530 : (isnan(_530) ? _536 : min(_530, _536));
    float _539 = isnan(_482) ? _538 : (isnan(_538) ? _482 : min(_538, _482));
    float _546 = ((_539 * _362) + _488) / _488;
    vec4 _560 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_393 + (_539 * _464)) / _546) + 0.5) + _497) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_396 + (_539 * _466)) / _546) + 0.5) + _499) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _562 = _560.w;
    float _564 = _562 - (_562 * _296);
    float _574 = (_564 * ((_520 - _440) - (_520 * _296))) + _440;
    float _575 = (_564 * ((_521 - _441) - (_521 * _296))) + _441;
    float _576 = (_564 * ((_522 - _442) - (_522 * _296))) + _442;
    float _591 = (cbMtdParam._m0[21u].z * _355) * _361;
    float _593 = (cbMtdParam._m0[21u].y * _356) * _361;
    bool _594 = _591 > 0.0;
    float _599;
    if (_594)
    {
        _599 = (1.0 - _367) / _591;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _367) / _591;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _599 = frontier_phi_27_26_ladder;
    }
    bool _601 = _593 > 0.0;
    float _606;
    if (_601)
    {
        _606 = (1.0 - _368) / _593;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_593 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _368) / _593;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _606 = frontier_phi_31_30_ladder;
    }
    float _609 = _384 ? (cbMtdParam._m0[18u].x / _362) : 5000.0;
    float _610 = isnan(_606) ? _599 : (isnan(_599) ? _606 : min(_599, _606));
    float _611 = isnan(_609) ? _610 : (isnan(_610) ? _609 : min(_610, _609));
    float _615 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _619 = ((_611 * _362) + _615) / _615;
    float _624 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _626 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _643 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_611 * _591)) / _619) + 0.5) + _624) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_611 * _593)) / _619) + 0.5) + _626) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _648 = _643.x * cbMtdParam._m0[14u].x;
    float _649 = _643.y * cbMtdParam._m0[14u].y;
    float _650 = _643.z * cbMtdParam._m0[14u].z;
    float _658;
    if (_594)
    {
        _658 = (1.0 - _367) / _591;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_591 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _367) / _591;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _658 = frontier_phi_35_34_ladder;
    }
    float _664;
    if (_601)
    {
        _664 = (1.0 - _368) / _593;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_593 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _368) / _593;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _664 = frontier_phi_39_38_ladder;
    }
    float _666 = isnan(_664) ? _658 : (isnan(_658) ? _664 : min(_658, _664));
    float _667 = isnan(_609) ? _666 : (isnan(_666) ? _609 : min(_666, _609));
    float _674 = ((_667 * _362) + _615) / _615;
    vec4 _688 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_393 + (_667 * _591)) / _674) + 0.5) + _624) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_396 + (_667 * _593)) / _674) + 0.5) + _626) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _690 = _688.w;
    float _692 = _690 - (_690 * _296);
    float _703 = 0.5 - (_296 * 0.5);
    float _713 = (((_574 - _309) + (_692 * ((_648 - _574) - (_648 * _296)))) * _703) + _309;
    float _714 = (((_575 - _311) + (_692 * ((_649 - _575) - (_649 * _296)))) * _703) + _311;
    float _715 = (((_576 - _313) + (_692 * ((_650 - _576) - (_650 * _296)))) * _703) + _313;
    vec4 _727 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _729 = _727.x;
    vec4 _741 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _749 = (_741.x * 2.0) + (-1.0);
    float _751 = (_741.y * 2.0) + (-1.0);
    float _752 = dot(vec2(_749, _751), vec2(_749, _751));
    float _3820 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _757 = sqrt(1.0 - (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))));
    float _758 = _741.z * _296;
    float _761 = fma(_757, _205, fma(_751, _212, _749 * _198));
    float _764 = fma(_757, _206, fma(_751, _213, _749 * _199));
    float _767 = fma(_757, _207, fma(_751, _214, _749 * _200));
    float _771 = inversesqrt(dot(vec3(_761, _764, _767), vec3(_761, _764, _767)));
    float _772 = _771 * _761;
    float _773 = _771 * _764;
    float _774 = _771 * _767;
    float _3831 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _775 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _3853 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _3864 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _3875 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _779 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _795 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _800 = _269 * _799;
    float _801 = _270 * _799;
    float _802 = _271 * _799;
    vec4 _807 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _809 = _807.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _985 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _991 = (cbMatDynParam._m0[5u].x * _985) + cbMatDynParam._m0[5u].y;
        float _3886 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _996 = (cbMatDynParam._m0[5u].z * _985) + cbMatDynParam._m0[5u].w;
        float _3897 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) - _992)) + _992) < ((_809 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _842 = fma(_774, cbSceneParam._m0[5u].z, fma(_773, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _772));
    float _845 = fma(_774, cbSceneParam._m0[6u].z, fma(_773, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _772));
    float _848 = fma(_774, cbSceneParam._m0[7u].z, fma(_773, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _772));
    uint _861 = uint(roundEven(NORMAL.w)) * 13u;
    uint _863 = _861 + 9u;
    uint _864 = _863 + uint(cbMatDynParam._m0[0u].w);
    float _870 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) * cbInstanceData._m0[_864].x;
    float _871 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * cbInstanceData._m0[_864].y;
    float _872 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * cbInstanceData._m0[_864].z;
    float _3908 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _3919 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _876 = 1.0 - _779;
    float _877 = _873 * _876;
    float _878 = _874 * _876;
    float _879 = _875 * _876;
    float _884 = (_873 + (-0.039999999105930328369140625)) * _779;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _779;
    float _886 = (_875 + (-0.039999999105930328369140625)) * _779;
    float _887 = _884 + 0.039999999105930328369140625;
    float _889 = _885 + 0.039999999105930328369140625;
    float _890 = _886 + 0.039999999105930328369140625;
    vec4 _899 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _902 = _899.x * TEXCOORD.z;
    float _903 = dot(vec3(_772, _773, _774), vec3(_800, _801, _802));
    float _906 = _903 * 2.0;
    float _910 = (_906 * _772) - _800;
    float _911 = (_906 * _773) - _801;
    float _912 = (_906 * _774) - _802;
    float _916 = abs(dot(vec3(_800, _801, _802), vec3(_772, _773, _774)));
    float _3941 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _918 = sqrt(_775);
    float _931 = exp2((_918 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_918 * 3.0));
    float _937 = (1.0 - _931) * ((_918 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _938 = _931 * _918;
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1303;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_974, cbModelParam._m0[26u].z, fma(_970, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _966));
        float _1034 = fma(_974, cbModelParam._m0[27u].z, fma(_970, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _966));
        float _1038 = fma(_974, cbModelParam._m0[28u].z, fma(_970, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _966));
        float _1061 = _966 + _772;
        float _1062 = _970 + _773;
        float _1063 = _974 + _774;
        float _1073 = fma(_1063, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1131 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1097.x + (-0.5));
        float _1133 = _1131 * (_1097.y + (-0.5));
        float _1134 = _1131 * (_1097.z + (-0.5));
        float _1141 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1104.x + (-0.5));
        float _1143 = _1141 * (_1104.y + (-0.5));
        float _1144 = _1141 * (_1104.z + (-0.5));
        float _1151 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1111.x + (-0.5));
        float _1153 = _1151 * (_1111.y + (-0.5));
        float _1154 = _1151 * (_1111.z + (-0.5));
        float _1161 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1118.x + (-0.5));
        float _1163 = _1161 * (_1118.y + (-0.5));
        float _1164 = _1161 * (_1118.z + (-0.5));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = _1132 * 0.5;
        float _1169 = _1142 * 0.5;
        float _1170 = _1152 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1185 = (dot(vec3(_772, _773, _774), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3967 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1195 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3978 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1197 = _1196 * 2.0;
        float _1201 = (1.0 - _1196) / (_1196 + 1.0);
        float _3989 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
        float _1211 = ((((1.0 - _1202) * (_1197 + 2.0)) * exp2(log2(isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * (_1197 + 1.0))) + _1202) * _1165;
        float _1212 = _1133 * 0.5;
        float _1213 = _1143 * 0.5;
        float _1214 = _1153 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_772, _773, _774), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _4000 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1166 + 9.9999997473787516355514526367188e-06);
        float _4011 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _4022 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * (_1239 + 1.0))) + _1244) * _1166;
        float _1254 = _1134 * 0.5;
        float _1255 = _1144 * 0.5;
        float _1256 = _1154 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_772, _773, _774), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4055 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1281 + 1.0))) + _1286) * _1167;
        _1303 = _1134;
        _1305 = _1133;
        _1306 = _1132;
        _1307 = _1144;
        _1308 = _1143;
        _1309 = _1142;
        _1310 = _1154;
        _1311 = _1153;
        _1312 = _1152;
        _1313 = _1167;
        _1314 = _1166;
        _1315 = _1165;
        _1316 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)));
        _1317 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
    }
    else
    {
        _1303 = _1304;
        _1305 = _1304;
        _1306 = _1304;
        _1307 = _1304;
        _1308 = _1304;
        _1309 = _1304;
        _1310 = _1304;
        _1311 = _1304;
        _1312 = _1304;
        _1313 = _1304;
        _1314 = _1304;
        _1315 = _1304;
        _1316 = 0.0;
        _1317 = 0.0;
        _1318 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_974, cbModelParam._m0[30u].z, fma(_970, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966));
        float _1351 = fma(_974, cbModelParam._m0[31u].z, fma(_970, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966));
        float _1355 = fma(_974, cbModelParam._m0[32u].z, fma(_970, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966));
        float _1378 = _966 + _772;
        float _1379 = _970 + _773;
        float _1380 = _974 + _774;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_772, _773, _774), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _4096 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4107 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4118 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_772, _773, _774), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4129 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4140 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4151 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_772, _773, _774), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4184 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1304;
        _1617 = _1304;
        _1618 = _1304;
        _1619 = _1304;
        _1620 = _1304;
        _1621 = _1304;
        _1622 = _1304;
        _1623 = _1304;
        _1624 = _1304;
        _1625 = _1304;
        _1626 = _1304;
        _1627 = _1304;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1316)) + _1316;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1317)) + _1317;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _910 * 0.5;
    float _1685 = _911 * 0.5;
    float _1686 = _912 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1303, _1307, _1310, _1313));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1305, _1308, _1311, _1314));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1306, _1309, _1312, _1315));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1833;
    float _1835;
    float _1837;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1800 = fma(_974, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _966)) + cbModelParam._m0[13u].w;
        float _1804 = fma(_974, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _966)) + cbModelParam._m0[14u].w;
        float _1808 = fma(_974, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _966)) + cbModelParam._m0[15u].w;
        float _1811 = fma(_912, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _910));
        float _1814 = fma(_912, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _910));
        float _1817 = fma(_912, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _910));
        float _1845;
        if (_1811 > 0.0)
        {
            _1845 = abs((1.0 - _1800) / _1811);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1800 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1845 = frontier_phi_57_55_ladder;
        }
        float _2015;
        if (_1814 > 0.0)
        {
            _2015 = abs((1.0 - _1804) / _1814);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1804 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2015 = frontier_phi_66_62_ladder;
        }
        float _2470;
        if (_1817 > 0.0)
        {
            _2470 = abs((1.0 - _1808) / _1817);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1808 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2470 = frontier_phi_78_73_ladder;
        }
        float _2472 = isnan(_2015) ? _1845 : (isnan(_1845) ? _2015 : min(_1845, _2015));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1811) + _1800;
        float _2478 = (_2473 * _1814) + _1804;
        float _2479 = (_2473 * _1817) + _1808;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2480;
        float _2484 = _2480 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 > _2484) || ((_2478 < _2482) || ((_2477 < _2482) || (_2477 > _2484))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2479, cbModelParam._m0[9u].z, fma(_2478, cbModelParam._m0[9u].y, _2477 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2479, cbModelParam._m0[10u].z, fma(_2478, cbModelParam._m0[10u].y, _2477 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2479, cbModelParam._m0[11u].z, fma(_2478, cbModelParam._m0[11u].y, _2477 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_56_78_ladder = _2713.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2713.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2713.x * cbModelParam._m0[1u].y;
        }
        _1833 = frontier_phi_56_78_ladder_2;
        _1835 = frontier_phi_56_78_ladder_1;
        _1837 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_910, _911, _912), _1753);
        _1833 = _1821.x * cbModelParam._m0[1u].y;
        _1835 = _1821.y * cbModelParam._m0[1u].y;
        _1837 = _1821.z * cbModelParam._m0[1u].y;
    }
    float _1841 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1842 = isnan(_1841) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1841 : min(cbModelParam._m0[25u].w, _1841));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1894 = fma(_974, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _966)) + cbModelParam._m0[21u].w;
        float _1898 = fma(_974, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _966)) + cbModelParam._m0[22u].w;
        float _1902 = fma(_974, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _966)) + cbModelParam._m0[23u].w;
        float _1905 = fma(_912, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _910));
        float _1908 = fma(_912, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _910));
        float _1911 = fma(_912, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _910));
        float _2020;
        if (_1905 > 0.0)
        {
            _2020 = abs((1.0 - _1894) / _1905);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1894 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2020 = frontier_phi_68_64_ladder;
        }
        float _2497;
        if (_1908 > 0.0)
        {
            _2497 = abs((1.0 - _1898) / _1908);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1898 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2497 = frontier_phi_80_75_ladder;
        }
        float _2842;
        if (_1911 > 0.0)
        {
            _2842 = abs((1.0 - _1902) / _1911);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1902 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2842 = frontier_phi_92_87_ladder;
        }
        float _2844 = isnan(_2497) ? _2020 : (isnan(_2020) ? _2497 : min(_2020, _2497));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _1905) + _1894;
        float _2850 = (_2845 * _1908) + _1898;
        float _2851 = (_2845 * _1911) + _1902;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _1842);
            frontier_phi_65_92_ladder = _2988.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2988.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2988.x * cbModelParam._m0[1u].z;
        }
        _1930 = frontier_phi_65_92_ladder_2;
        _1932 = frontier_phi_65_92_ladder_1;
        _1934 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_910, _911, _912), _1842);
        _1930 = _1914.x * cbModelParam._m0[1u].z;
        _1932 = _1914.y * cbModelParam._m0[1u].z;
        _1934 = _1914.z * cbModelParam._m0[1u].z;
    }
    float _1947 = (((_937 * _887) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1930 - _1833)) + _1833);
    float _1949 = (((_937 * _889) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1932 - _1835)) + _1835);
    float _1951 = (((_937 * _890) + _938) * _902) * ((cbModelParam._m0[1u].w * (_1934 - _1837)) + _1837);
    float _1954 = fma(_1951, cbSceneParam._m0[89u].z, fma(_1949, cbSceneParam._m0[89u].y, _1947 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1951, cbSceneParam._m0[90u].z, fma(_1949, cbSceneParam._m0[90u].y, _1947 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1951, cbSceneParam._m0[91u].z, fma(_1949, cbSceneParam._m0[91u].y, _1947 * cbSceneParam._m0[91u].x));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1998 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2007 = _1994 / _2006;
    float _2008 = _1998 / _2006;
    float _2009 = _2002 / _2006;
    float _2156;
    float _2157;
    float _2158;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2036 = ((uint(_2009 > cbSceneParam._m0[59u].y) + uint(_2009 > cbSceneParam._m0[59u].x)) + uint(_2009 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2037 = _2036 + 43u;
        uint _2045 = _2036 + 44u;
        uint _2053 = _2036 + 45u;
        uint _2061 = _2036 + 46u;
        float _2072 = fma(_2006, cbSceneParam._m0[_2037].w, fma(_2002, cbSceneParam._m0[_2037].z, fma(_1998, cbSceneParam._m0[_2037].y, _1994 * cbSceneParam._m0[_2037].x)));
        float _2076 = fma(_2006, cbSceneParam._m0[_2045].w, fma(_2002, cbSceneParam._m0[_2045].z, fma(_1998, cbSceneParam._m0[_2045].y, _1994 * cbSceneParam._m0[_2045].x)));
        float _2084 = fma(_2006, cbSceneParam._m0[_2061].w, fma(_2002, cbSceneParam._m0[_2061].z, fma(_1998, cbSceneParam._m0[_2061].y, _1994 * cbSceneParam._m0[_2061].x)));
        float _2089 = cbSceneParam._m0[33u].z * _2084;
        float _2091 = cbSceneParam._m0[33u].w * _2084;
        float _2094 = fma(_2006, cbSceneParam._m0[_2053].w, fma(_2002, cbSceneParam._m0[_2053].z, fma(_1998, cbSceneParam._m0[_2053].y, _1994 * cbSceneParam._m0[_2053].x))) / _2084;
        float _2142 = (cbSceneParam._m0[33u].x - sqrt(((_2008 * _2008) + (_2007 * _2007)) + (_2009 * _2009))) * cbSceneParam._m0[33u].y;
        float _4310 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2149 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2089 + _2072) / _2084, (_2091 + _2076) / _2084), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 + _2072) / _2084, (_2076 - _2089) / _2084), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 - _2089) / _2084, (_2076 - _2091) / _2084), _2094), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 - _2091) / _2084, (_2089 + _2076) / _2084), _2094), 0.0)).x), vec4(0.25)));
        _2156 = 1.0 - (_2149 * cbSceneParam._m0[34u].x);
        _2157 = 1.0 - (_2149 * cbSceneParam._m0[34u].y);
        _2158 = 1.0 - (_2149 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2156 = 1.0;
        _2157 = 1.0;
        _2158 = 1.0;
    }
    float _2222;
    float _2224;
    float _2226;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2210 = fma(_2006, cbSceneParam._m0[63u].w, fma(_2002, cbSceneParam._m0[63u].z, fma(_1998, cbSceneParam._m0[63u].y, _1994 * cbSceneParam._m0[63u].x)));
        float _2211 = fma(_2006, cbSceneParam._m0[60u].w, fma(_2002, cbSceneParam._m0[60u].z, fma(_1998, cbSceneParam._m0[60u].y, _1994 * cbSceneParam._m0[60u].x))) / _2210;
        float _2212 = fma(_2006, cbSceneParam._m0[61u].w, fma(_2002, cbSceneParam._m0[61u].z, fma(_1998, cbSceneParam._m0[61u].y, _1994 * cbSceneParam._m0[61u].x))) / _2210;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2211 >= cbSceneParam._m0[64u].x) && (_2212 >= cbSceneParam._m0[64u].y)) && (_2211 <= cbSceneParam._m0[64u].z)) && (_2212 <= cbSceneParam._m0[64u].w))
        {
            float _2510 = fma(_2006, cbSceneParam._m0[62u].w, fma(_2002, cbSceneParam._m0[62u].z, fma(_1998, cbSceneParam._m0[62u].y, _1994 * cbSceneParam._m0[62u].x))) / _2210;
            float _2514 = isnan(cbSceneParam._m0[41u].w) ? _2510 : (isnan(_2510) ? cbSceneParam._m0[41u].w : max(_2510, cbSceneParam._m0[41u].w));
            float _2557 = (cbSceneParam._m0[33u].x - sqrt(((_2008 * _2008) + (_2007 * _2007)) + (_2009 * _2009))) * cbSceneParam._m0[33u].y;
            float _4326 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
            float _2564 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2211, cbSceneParam._m0[33u].w + _2212), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2211, _2212 - cbSceneParam._m0[33u].z), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2211 - cbSceneParam._m0[33u].z, _2212 - cbSceneParam._m0[33u].w), _2514), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2211 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2212), _2514), 0.0)).x), vec4(0.25)));
            float _2568 = 1.0 - (_2564 * cbSceneParam._m0[34u].x);
            float _2569 = 1.0 - (_2564 * cbSceneParam._m0[34u].y);
            float _2570 = 1.0 - (_2564 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2570) ? _2158 : (isnan(_2158) ? _2570 : min(_2158, _2570));
            frontier_phi_77_76_ladder_1 = isnan(_2569) ? _2157 : (isnan(_2157) ? _2569 : min(_2157, _2569));
            frontier_phi_77_76_ladder_2 = isnan(_2568) ? _2156 : (isnan(_2156) ? _2568 : min(_2156, _2568));
        }
        else
        {
            frontier_phi_77_76_ladder = _2158;
            frontier_phi_77_76_ladder_1 = _2157;
            frontier_phi_77_76_ladder_2 = _2156;
        }
        _2222 = frontier_phi_77_76_ladder_2;
        _2224 = frontier_phi_77_76_ladder_1;
        _2226 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2222 = _2156;
        _2224 = _2157;
        _2226 = _2158;
    }
    uvec4 _2231 = floatBitsToUint(cbInstanceData._m0[_861 + 5u]);
    uint _2233 = _2231.x * 14u;
    uint _2234 = _2233 + 13u;
    float _2239 = _902 + (-1.0);
    float _2242 = (cbLight._m0[_2234].x * _2239) + 1.0;
    float _2243 = (cbLight._m0[_2234].y * _2239) + 1.0;
    uint _2244 = _2233 + 5u;
    float _2250 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2254 = _2233 + 4u;
    float _2263 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2267 = _2233 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_772, _773, _774));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_772, _773, _774));
    float _4362 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4373 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2244].x * _2250) * _2288) + (((cbLight._m0[_2254].x * _2222) * _2263) * _2286);
    float _2296 = ((_2250 * cbLight._m0[_2244].y) * _2288) + (((cbLight._m0[_2254].y * _2224) * _2263) * _2286);
    float _2297 = ((_2250 * cbLight._m0[_2244].z) * _2288) + (((cbLight._m0[_2254].z * _2226) * _2263) * _2286);
    uint _2299 = _2233 + 8u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _775) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2233].x + _800;
    float _2315 = cbLight._m0[_2233].y + _801;
    float _2316 = cbLight._m0[_2233].z + _802;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2233].xyz));
    float _4384 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _4395 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _2328 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _2329 = dot(vec3(_772, _773, _774), vec3(_2321, _2322, _2323));
    float _4406 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2332 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
    float _2333 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2321, _2322, _2323));
    float _4417 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2337 = _2313 * _2313;
    float _2341 = ((_2332 * _2332) * (_2337 + (-1.0))) + 1.0;
    float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * 5.0);
    float _2350 = 0.959999978542327880859375 - _884;
    float _2352 = 0.959999978542327880859375 - _885;
    float _2353 = 0.959999978542327880859375 - _886;
    float _2360 = 1.0 - _2313;
    float _2371 = (0.5 / (((_2328 * ((_2327 * _2360) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2360) + _2313) * _2327))) * _2327;
    float _4428 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_2337 / ((_2341 * _2341) * 3.141590118408203125));
    uint _2387 = _2233 + 9u;
    float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _775) * 0.949999988079071044921875);
    float _2399 = _2398 * _2398;
    float _2400 = cbLight._m0[_2267].x + _800;
    float _2401 = cbLight._m0[_2267].y + _801;
    float _2402 = cbLight._m0[_2267].z + _802;
    float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
    float _2407 = _2406 * _2400;
    float _2408 = _2406 * _2401;
    float _2409 = _2406 * _2402;
    float _2410 = dot(vec3(_772, _773, _774), vec3(cbLight._m0[_2267].xyz));
    float _4439 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2414 = dot(vec3(_772, _773, _774), vec3(_2407, _2408, _2409));
    float _4450 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2417 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2418 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2407, _2408, _2409));
    float _4461 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2422 = _2399 * _2399;
    float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
    float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2440 = 1.0 - _2399;
    float _2450 = (0.5 / (((_2328 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2328 * _2440) + _2399) * _2413))) * _2413;
    float _4472 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2452 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
    float _2462 = (((((_2433 * _2350) + _887) * cbLight._m0[_2387].x) * _2452) * _2250) + ((((cbLight._m0[_2299].x * _2222) * ((_2349 * _2350) + _887)) * _2373) * _2263);
    float _2463 = (((((_2433 * _2352) + _889) * cbLight._m0[_2387].y) * _2452) * _2250) + ((((cbLight._m0[_2299].y * _2224) * ((_2349 * _2352) + _889)) * _2373) * _2263);
    float _2464 = (((((_2433 * _2353) + _890) * cbLight._m0[_2387].z) * _2452) * _2250) + ((((cbLight._m0[_2299].z * _2226) * ((_2349 * _2353) + _890)) * _2373) * _2263);
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_2231.y == 0u)
    {
        uvec4 _2582 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2583 = _2582.x;
        uint _2594 = uint((float(_2582.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2583))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2583)));
        float _2604 = (log2(_2009 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2605 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        uint _2608 = uint(isnan(14.0) ? _2605 : (isnan(_2605) ? 14.0 : min(_2605, 14.0)));
        uvec4 _2613 = texelFetch(g_lightClusterGridBuffer, int(((_2608 << 2u) + (_2594 << 6u)) >> 2u));
        uint _2614 = _2613.x;
        uint _2615 = _2582.z;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((((1u << ((_2615 >> 4u) & 15u)) + 4294967295u) & _2614) == 0u) || ((_2615 & 240u) == 0u))
        {
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
        }
        else
        {
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            uint _2906 = 0u;
            uint _2915;
            bool _2916;
            for (;;)
            {
                _2915 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_2906 << 2u)) >> 2u)).x;
                _2916 = _2915 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2916)
                {
                    frontier_phi_103_pred = _2901;
                    frontier_phi_103_pred_1 = _2905;
                    frontier_phi_103_pred_2 = _2904;
                    frontier_phi_103_pred_3 = _2903;
                    frontier_phi_103_pred_4 = _2902;
                    frontier_phi_103_pred_5 = _2900;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2900;
                    _3067 = _2901;
                    _3068 = _2902;
                    _3069 = _2903;
                    _3070 = _2904;
                    _3071 = _2905;
                    _3072 = _2915;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2906 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2007;
                        float _3133 = _3092.y - _2008;
                        float _3134 = _3092.z - _2009;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_842, _845, _848), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4493 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2007;
                        float _3168 = (-0.0) - _2008;
                        float _3169 = (-0.0) - _2009;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3183 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3184 = 1.0 - _918;
                        float _3191 = sqrt(1.0 - ((1.0 - (_3184 * _3184)) * (1.0 - (_3183 * _3183))));
                        float _3192 = _3191 * _3191;
                        float _3193 = _3192 * _3192;
                        float _3194 = _3174 + _3139;
                        float _3195 = _3175 + _3140;
                        float _3196 = _3176 + _3141;
                        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
                        float _3204 = dot(vec3(_842, _845, _848), vec3(_3174, _3175, _3176));
                        float _4509 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3207 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                        float _3208 = dot(vec3(_842, _845, _848), vec3(_3200 * _3194, _3200 * _3195, _3200 * _3196));
                        float _4520 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                        float _3211 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3215 = ((_3211 * _3211) * (_3193 + (-1.0))) + 1.0;
                        float _3216 = _3152 * _3192;
                        float _3217 = _3216 * _3216;
                        float _3220 = ((1.0 - _3217) * _3142) + _3217;
                        float _4531 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                        float _3221 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3222 = 1.0 - _3192;
                        float _3232 = (0.5 / (((_3221 * ((_3207 * _3222) + _3192)) + 9.9999999392252902907785028219223e-09) + (((_3221 * _3222) + _3192) * _3207))) * _3221;
                        float _4542 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3243 = (((_3193 * 3.1415927410125732421875) * (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) / ((_3215 * _3215) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _2996 = (_3163 * _3111.x) + _3069;
                        _2997 = (_3163 * _3111.y) + _3070;
                        _2998 = (_3163 * _3111.z) + _3071;
                        _2993 = (_3243 * _3128.x) + _3066;
                        _2994 = (_3243 * _3128.y) + _3067;
                        _2995 = (_3243 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_103_pred = _2994;
                    frontier_phi_103_pred_1 = _2998;
                    frontier_phi_103_pred_2 = _2997;
                    frontier_phi_103_pred_3 = _2996;
                    frontier_phi_103_pred_4 = _2995;
                    frontier_phi_103_pred_5 = _2993;
                }
                _2725 = frontier_phi_103_pred;
                _2733 = frontier_phi_103_pred_1;
                _2731 = frontier_phi_103_pred_2;
                _2729 = frontier_phi_103_pred_3;
                _2727 = frontier_phi_103_pred_4;
                _2723 = frontier_phi_103_pred_5;
                uint _2907 = _2906 + 1u;
                if (_2907 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2900 = _2723;
                    _2901 = _2725;
                    _2902 = _2727;
                    _2903 = _2729;
                    _2904 = _2731;
                    _2905 = _2733;
                    _2906 = _2907;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
        }
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.z;
        uint _2739 = (_2737 >> 8u) & 15u;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((4294967295u << _2739) & _2614) == 0u)
        {
            _2868 = _2722;
            _2870 = _2724;
            _2872 = _2726;
            _2874 = _2728;
            _2876 = _2730;
            _2878 = _2732;
        }
        else
        {
            float _2893 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
            float _2894 = _2893 * _2007;
            float _2895 = _2893 * _2008;
            float _2896 = _2893 * _2009;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2739 < ((_2737 >> 12u) & 15u))
            {
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _2877;
                float _2879;
                float _3049 = _2722;
                float _3050 = _2724;
                float _3051 = _2726;
                float _3052 = _2728;
                float _3053 = _2730;
                float _3054 = _2732;
                uint _3055 = _2739;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2608 << 5u) + (_2594 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3065)
                    {
                        frontier_phi_114_pred = _3054;
                        frontier_phi_114_pred_1 = _3053;
                        frontier_phi_114_pred_2 = _3052;
                        frontier_phi_114_pred_3 = _3051;
                        frontier_phi_114_pred_4 = _3050;
                        frontier_phi_114_pred_5 = _3049;
                    }
                    else
                    {
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3270 = _3049;
                        float _3271 = _3050;
                        float _3272 = _3051;
                        float _3273 = _3052;
                        float _3274 = _3053;
                        float _3275 = _3054;
                        uint _3276 = _3064;
                        uint _3277;
                        vec4 _3302;
                        float _3303;
                        vec4 _3318;
                        vec3 _3330;
                        vec4 _3345;
                        vec4 _3360;
                        float _3406;
                        bool _3407;
                        for (;;)
                        {
                            uint _3287 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3276));
                            _3277 = (_3276 + 4294967295u) & _3276;
                            uint _3289 = _3287 * 40u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            _3303 = _3302.w;
                            uint _3305 = (_3287 * 40u) + 4u;
                            _3318 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3305)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3305 + 3u)).x));
                            uint _3320 = (_3287 * 40u) + 8u;
                            _3330 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x));
                            uint _3332 = (_3287 * 40u) + 16u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3287 * 40u) + 20u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            uint _3362 = (_3287 * 40u) + 24u;
                            vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            uint _3381 = (_3287 * 40u) + 28u;
                            vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            _3406 = fma(_2009, _3394.z, fma(_2008, _3394.y, _3394.x * _2007)) + _3394.w;
                            _3407 = !((fma(_2009, _3375.z, fma(_2008, _3375.y, _3375.x * _2007)) + _3375.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3407)
                            {
                                float _3434 = _3302.x - _2007;
                                float _3435 = _3302.y - _2008;
                                float _3436 = _3302.z - _2009;
                                float _3437 = dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436));
                                float _3440 = inversesqrt(_3437);
                                float _3441 = _3440 * _3434;
                                float _3442 = _3440 * _3435;
                                float _3443 = _3440 * _3436;
                                float _3447 = 1.0 - (_3437 / (_3303 * _3303));
                                float _4553 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                                float _3452 = sqrt(_3437) * _3318.w;
                                float _3454 = 1.39999997615814208984375 / (_3452 + 1.39999997615814208984375);
                                float _3455 = _3454 * _3454;
                                float _3458 = ((1.0 - _3455) * dot(vec3(_3441, _3442, _3443), vec3(_842, _845, _848))) + _3455;
                                float _3461 = _3452 * _3452;
                                float _3465 = (fma(_2009, _3345.z, fma(_2008, _3345.y, _3345.x * _2007)) + _3345.w) / _3406;
                                float _3466 = (fma(_2009, _3360.z, fma(_2008, _3360.y, _3360.x * _2007)) + _3360.w) / _3406;
                                float _3470 = 1.0 - dot(vec2(_3465, _3466), vec2(_3465, _3466));
                                float _4569 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3471 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                                float _3472 = _3471 * (((isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0))) * _3448) / ((_3461 * 0.699999988079071044921875) + 1.0));
                                float _3484 = exp2(log2(1.0 / ((_3461 * 3.5) + 5.0)) * 0.25);
                                float _3485 = 1.0 - _918;
                                float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                                float _3493 = _3492 * _3492;
                                float _3494 = _3493 * _3493;
                                float _3495 = _3441 - _2894;
                                float _3496 = _3442 - _2895;
                                float _3497 = _3443 - _2896;
                                float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                                float _3505 = dot(vec3(_842, _845, _848), vec3((-0.0) - _2894, (-0.0) - _2895, (-0.0) - _2896));
                                float _4580 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3508 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3509 = dot(vec3(_842, _845, _848), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                                float _4591 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3512 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                                float _3517 = _3454 * _3493;
                                float _3518 = _3517 * _3517;
                                float _3524 = ((1.0 - _3518) * dot(vec3(_842, _845, _848), vec3(_3441, _3442, _3443))) + _3518;
                                float _4602 = isnan(0.0) ? _3524 : (isnan(_3524) ? 0.0 : max(_3524, 0.0));
                                float _3525 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3526 = 1.0 - _3493;
                                float _3536 = (0.5 / (((_3525 * ((_3508 * _3526) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3525 * _3526) + _3493) * _3508))) * _3525;
                                float _4613 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3546 = (_3471 * _3448) * (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3516 * _3516) * ((_3461 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3472 * _3318.z;
                                frontier_phi_120_pred_1 = _3472 * _3318.y;
                                frontier_phi_120_pred_2 = _3472 * _3318.x;
                                frontier_phi_120_pred_3 = _3546 * _3330.z;
                                frontier_phi_120_pred_4 = _3546 * _3330.y;
                                frontier_phi_120_pred_5 = _3546 * _3330.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3555 = frontier_phi_120_pred;
                            _3554 = frontier_phi_120_pred_1;
                            _3553 = frontier_phi_120_pred_2;
                            _3552 = frontier_phi_120_pred_3;
                            _3551 = frontier_phi_120_pred_4;
                            _3550 = frontier_phi_120_pred_5;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3257 = _3550 + _3270;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            if (_3277 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3277;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3262;
                        frontier_phi_114_pred_1 = _3261;
                        frontier_phi_114_pred_2 = _3260;
                        frontier_phi_114_pred_3 = _3259;
                        frontier_phi_114_pred_4 = _3258;
                        frontier_phi_114_pred_5 = _3257;
                    }
                    _2879 = frontier_phi_114_pred;
                    _2877 = frontier_phi_114_pred_1;
                    _2875 = frontier_phi_114_pred_2;
                    _2873 = frontier_phi_114_pred_3;
                    _2871 = frontier_phi_114_pred_4;
                    _2869 = frontier_phi_114_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2869;
                        _3050 = _2871;
                        _3051 = _2873;
                        _3052 = _2875;
                        _3053 = _2877;
                        _3054 = _2879;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2875;
                frontier_phi_94_95_ladder_1 = _2879;
                frontier_phi_94_95_ladder_2 = _2877;
                frontier_phi_94_95_ladder_3 = _2873;
                frontier_phi_94_95_ladder_4 = _2871;
                frontier_phi_94_95_ladder_5 = _2869;
            }
            else
            {
                frontier_phi_94_95_ladder = _2728;
                frontier_phi_94_95_ladder_1 = _2732;
                frontier_phi_94_95_ladder_2 = _2730;
                frontier_phi_94_95_ladder_3 = _2726;
                frontier_phi_94_95_ladder_4 = _2724;
                frontier_phi_94_95_ladder_5 = _2722;
            }
            _2868 = frontier_phi_94_95_ladder_5;
            _2870 = frontier_phi_94_95_ladder_4;
            _2872 = frontier_phi_94_95_ladder_3;
            _2874 = frontier_phi_94_95_ladder;
            _2876 = frontier_phi_94_95_ladder_2;
            _2878 = frontier_phi_94_95_ladder_1;
        }
        float _2883 = isnan(1.0) ? _902 : (isnan(_902) ? 1.0 : min(_902, 1.0));
        _2627 = (_2883 * _2874) + _2295;
        _2629 = (_2883 * _2876) + _2296;
        _2631 = (_2883 * _2878) + _2297;
        _2633 = ((_2868 * _887) * _2883) + _2462;
        _2635 = ((_2870 * _889) * _2883) + _2463;
        _2637 = ((_2872 * _890) * _2883) + _2464;
    }
    else
    {
        _2627 = _2295;
        _2629 = _2296;
        _2631 = _2297;
        _2633 = _2462;
        _2635 = _2463;
        _2637 = _2464;
    }
    float _4629 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4640 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4651 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2654 = ((isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_2627 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _902))) + ((_2633 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    float _2655 = ((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2629 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _902))) + ((_2635 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    float _2656 = ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2631 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _902))) + ((_2637 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1742)) * cbPerFrame._m0[3u].x);
    float _2657 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
    float _2659 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    uint _2660 = _861 + 6u;
    float _2668 = _822 / cbSceneParam._m0[86u].x;
    float _2669 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2683 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, (log2((isnan(cbSceneParam._m0[77u].w) ? _795 : (isnan(_795) ? cbSceneParam._m0[77u].w : min(_795, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2685 = _2683.x;
    float _2686 = _2683.y;
    float _2687 = _2683.z;
    float _2688 = _2683.w;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_795 > cbSceneParam._m0[78u].w)
    {
        float _2747 = isnan(_795) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _795 : min(cbSceneParam._m0[80u].w, _795));
        float _2748 = _2747 / _795;
        float _2759 = _2748 * _269;
        float _2760 = _270 * _2748;
        float _2761 = (-0.0) - _2760;
        float _2762 = _2748 * _271;
        float _2764 = (cbSceneParam._m0[77u].w * _2761) / _2747;
        float _2765 = _2764 + cbSceneParam._m0[79u].w;
        float _2766 = cbSceneParam._m0[79u].w - _2760;
        float _2772 = sqrt(((_2759 * _2759) + (_2760 * _2760)) + (_2762 * _2762));
        float _2775 = (1.0 - (cbSceneParam._m0[77u].w / _2747)) * _2772;
        float _2780 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2782 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2761 - _2764) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2765 > 0.0) ? exp2(_2780 * _2765) : (2.0 - exp2(_2782 * _2765))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2775;
        }
        else
        {
            float _2929 = 1.0 / cbSceneParam._m0[80u].x;
            float _2930 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : max(_2765, _2766));
            float _2931 = isnan(_2766) ? _2765 : (isnan(_2765) ? _2766 : min(_2765, _2766));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            float _2941 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : min(_2931, 0.0));
            _3006 = ((abs(_2772 / _2761) * cbSceneParam._m0[80u].y) * ((((_2940 - _2941) * 2.0) - ((exp2(_2780 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0)))) - exp2(_2780 * (isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))))) * _2929)) - ((exp2(_2782 * _2940) - exp2(_2782 * _2941)) * _2929))) + (_2775 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2668, _2669, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2688);
        _2784 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2685;
        _2786 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2686;
        _2788 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2687;
        _2790 = _3017 * _2688;
    }
    else
    {
        _2784 = _2685;
        _2786 = _2686;
        _2788 = _2687;
        _2790 = _2688;
    }
    bool _3044;
    vec4 _2800;
    vec4 _2822;
    float _2824;
    float _2828;
    float _2829;
    float _2830;
    float _2831;
    bool _2841;
    for (;;)
    {
        _2800 = cbMatDynParam._m0[0u];
        float _2802 = roundEven(_2800.y);
        bool _2803 = _2802 == 3.0;
        float _2804 = log2(_2790);
        float _2811 = exp2(_2804 * cbSceneParam._m0[78u].x) * _2657;
        float _2812 = exp2(_2804 * cbSceneParam._m0[78u].y) * _2658;
        float _2813 = exp2(_2804 * cbSceneParam._m0[78u].z) * _2659;
        float _2820 = _809 + (-0.5);
        _2822 = cbMtdParam._m0[1u];
        _2824 = _2822.y * _2820;
        float _2827 = (_2802 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2828 = _2827 * (_2803 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2784)));
        _2829 = _2827 * (_2803 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2786)));
        _2830 = _2827 * (_2803 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2788)));
        _2831 = _2820 * 0.999000012874603271484375;
        _2841 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2841)
        {
            if ((cbInstanceData._m0[_861 + 7u].x + _2831) < 0.5)
            {
                _3044 = true;
                break;
            }
        }
        uint _2964 = _863 + uint(_2800.w);
        if ((cbInstanceData._m0[_2964].w < 1.0) && ((cbInstanceData._m0[_2964].w + _2831) < 0.5))
        {
            _3044 = true;
            break;
        }
        if ((_2824 + 1.0) < _2822.x)
        {
            _3044 = true;
            break;
        }
        _3044 = false;
        break;
    }
    float _3248;
    if (_3044)
    {
        discard_state = true;
        _3248 = 0.0;
    }
    else
    {
        _3248 = cbInstanceData._m0[_2660].w;
    }
    SV_Target.x = _2828;
    SV_Target.y = _2829;
    SV_Target.z = _2830;
    SV_Target.w = _3248;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2660].w;
    discard_exit();
}


