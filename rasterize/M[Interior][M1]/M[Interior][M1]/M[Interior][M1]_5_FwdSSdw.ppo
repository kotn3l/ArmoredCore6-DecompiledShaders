#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1117;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    vec4 _580 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _582 = _580.x;
    vec4 _594 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _602 = (_594.x * 2.0) + (-1.0);
    float _604 = (_594.y * 2.0) + (-1.0);
    float _605 = dot(vec2(_602, _604), vec2(_602, _604));
    float _3281 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _610 = sqrt(1.0 - (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))));
    float _611 = _594.z * _288;
    float _614 = fma(_610, _197, fma(_604, _204, _602 * _190));
    float _617 = fma(_610, _198, fma(_604, _205, _602 * _191));
    float _620 = fma(_610, _199, fma(_604, _206, _602 * _192));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3292 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _628 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3314 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3325 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3336 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _632 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _653 = _261 * _652;
    float _654 = _262 * _652;
    float _655 = _263 * _652;
    float _661 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _662 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _683 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _686 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _689 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _702 = uint(roundEven(NORMAL.w)) * 13u;
    uint _704 = _702 + 9u;
    uint _705 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _711 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0)))) * cbInstanceData._m0[_705].x;
    float _712 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_705].y;
    float _713 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_705].z;
    float _3347 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _714 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _717 = 1.0 - _632;
    float _718 = _714 * _717;
    float _719 = _715 * _717;
    float _720 = _716 * _717;
    float _725 = (_714 + (-0.039999999105930328369140625)) * _632;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _632;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _632;
    float _728 = _725 + 0.039999999105930328369140625;
    float _730 = _726 + 0.039999999105930328369140625;
    float _731 = _727 + 0.039999999105930328369140625;
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _661, cbSceneParam._m0[86u].y * _662));
    float _743 = _740.x * TEXCOORD.z;
    float _744 = dot(vec3(_625, _626, _627), vec3(_653, _654, _655));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _625) - _653;
    float _752 = (_747 * _626) - _654;
    float _753 = (_747 * _627) - _655;
    float _757 = abs(dot(vec3(_653, _654, _655), vec3(_625, _626, _627)));
    float _3380 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_628);
    float _772 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _778 = (1.0 - _772) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _779 = _772 * _759;
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1116;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _843 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _847 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _851 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _874 = _807 + _625;
        float _875 = _811 + _626;
        float _876 = _815 + _627;
        float _886 = fma(_876, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _874)) - _843;
        float _887 = fma(_876, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _874)) - _847;
        float _888 = fma(_876, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _874)) - _851;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_843 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_847 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[34u].z) + ((((((_851 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _944 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_910.x + (-0.5));
        float _946 = _944 * (_910.y + (-0.5));
        float _947 = _944 * (_910.z + (-0.5));
        float _954 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_917.x + (-0.5));
        float _956 = _954 * (_917.y + (-0.5));
        float _957 = _954 * (_917.z + (-0.5));
        float _964 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_924.x + (-0.5));
        float _966 = _964 * (_924.y + (-0.5));
        float _967 = _964 * (_924.z + (-0.5));
        float _974 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_931.x + (-0.5));
        float _976 = _974 * (_931.y + (-0.5));
        float _977 = _974 * (_931.z + (-0.5));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = _945 * 0.5;
        float _982 = _955 * 0.5;
        float _983 = _965 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _998 = (dot(vec3(_625, _626, _627), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1008 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3428 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1010 + 1.0))) + _1015) * _978;
        float _1025 = _946 * 0.5;
        float _1026 = _956 * 0.5;
        float _1027 = _966 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1041 = (dot(vec3(_625, _626, _627), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3439 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1050 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3450 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3461 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0))) * (_1052 + 1.0))) + _1057) * _979;
        float _1067 = _947 * 0.5;
        float _1068 = _957 * 0.5;
        float _1069 = _967 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_625, _626, _627), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3494 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1094 + 1.0))) + _1099) * _980;
        _1116 = _947;
        _1118 = _946;
        _1119 = _945;
        _1120 = _957;
        _1121 = _956;
        _1122 = _955;
        _1123 = _967;
        _1124 = _966;
        _1125 = _965;
        _1126 = _980;
        _1127 = _979;
        _1128 = _978;
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
        _1130 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
    }
    else
    {
        _1116 = _1117;
        _1118 = _1117;
        _1119 = _1117;
        _1120 = _1117;
        _1121 = _1117;
        _1122 = _1117;
        _1123 = _1117;
        _1124 = _1117;
        _1125 = _1117;
        _1126 = _1117;
        _1127 = _1117;
        _1128 = _1117;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1157 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1161 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1165 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1188 = _807 + _625;
        float _1189 = _811 + _626;
        float _1190 = _815 + _627;
        float _1200 = fma(_1190, cbModelParam._m0[30u].z, fma(_1189, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1188)) - _1157;
        float _1201 = fma(_1190, cbModelParam._m0[31u].z, fma(_1189, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1188)) - _1161;
        float _1202 = fma(_1190, cbModelParam._m0[32u].z, fma(_1189, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1188)) - _1165;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1157 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1161 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[35u].z) + ((((((_1165 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1256 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1223.x + (-0.5));
        float _1258 = _1256 * (_1223.y + (-0.5));
        float _1259 = _1256 * (_1223.z + (-0.5));
        float _1266 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1230.x + (-0.5));
        float _1268 = _1266 * (_1230.y + (-0.5));
        float _1269 = _1266 * (_1230.z + (-0.5));
        float _1276 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1237.x + (-0.5));
        float _1278 = _1276 * (_1237.y + (-0.5));
        float _1279 = _1276 * (_1237.z + (-0.5));
        float _1286 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1244.x + (-0.5));
        float _1288 = _1286 * (_1244.y + (-0.5));
        float _1289 = _1286 * (_1244.z + (-0.5));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = _1257 * 0.5;
        float _1294 = _1267 * 0.5;
        float _1295 = _1277 * 0.5;
        float _1296 = dot(vec3(_1293, _1294, _1295), vec3(_1293, _1294, _1295));
        float _1301 = (_1296 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1296);
        float _1309 = (dot(vec3(_625, _626, _627), vec3(_1301 * _1293, _1301 * _1294, _1301 * _1295)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1318 = sqrt(((_1294 * _1294) + (_1293 * _1293)) + (_1295 * _1295)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _3557 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1320 + 1.0))) + _1325) * _1290;
        float _1335 = _1258 * 0.5;
        float _1336 = _1268 * 0.5;
        float _1337 = _1278 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_625, _626, _627), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3590 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_1362 + 1.0))) + _1367) * _1291;
        float _1377 = _1259 * 0.5;
        float _1378 = _1269 * 0.5;
        float _1379 = _1279 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_625, _626, _627), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3623 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1404 + 1.0))) + _1409) * _1292;
        _1426 = _1259;
        _1427 = _1258;
        _1428 = _1257;
        _1429 = _1269;
        _1430 = _1268;
        _1431 = _1267;
        _1432 = _1279;
        _1433 = _1278;
        _1434 = _1277;
        _1435 = _1292;
        _1436 = _1291;
        _1437 = _1290;
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1117;
        _1427 = _1117;
        _1428 = _1117;
        _1429 = _1117;
        _1430 = _1117;
        _1431 = _1117;
        _1432 = _1117;
        _1433 = _1117;
        _1434 = _1117;
        _1435 = _1117;
        _1436 = _1117;
        _1437 = _1117;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1130)) + _1130;
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1473 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1476 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1479 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1450));
    float _1494 = _751 * 0.5;
    float _1495 = _752 * 0.5;
    float _1496 = _753 * 0.5;
    float _1497 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1500 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1503 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1537;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1510 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1116, _1120, _1123, _1126));
        float _1514 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1118, _1121, _1124, _1127));
        float _1518 = dot(vec4(_1494, _1495, _1496, 1.0), vec4(_1119, _1122, _1125, _1128));
        float _1525 = dot(vec4(cbModelParam._m0[39u]), vec4(_1494, _1495, _1496, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1525) ? 0.0 : (isnan(0.0) ? _1525 : max(0.0, _1525))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1548;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1539 = dot(vec4(cbModelParam._m0[40u]), vec4(_1494, _1495, _1496, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)), isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1539) ? 0.0 : (isnan(0.0) ? _1539 : max(0.0, _1539))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1552 = (_1548 * cbModelParam._m0[1u].x) + (_1537 * (1.0 - cbModelParam._m0[1u].x));
    float _1562 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1562 : min(cbModelParam._m0[25u].z, _1562));
    float _1644;
    float _1646;
    float _1648;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1611 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1615 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1619 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1622 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1625 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1628 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1656;
        if (_1622 > 0.0)
        {
            _1656 = abs((1.0 - _1611) / _1622);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1611 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1656 = frontier_phi_38_36_ladder;
        }
        float _2038;
        if (_1625 > 0.0)
        {
            _2038 = abs((1.0 - _1615) / _1625);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1615 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2038 = frontier_phi_47_43_ladder;
        }
        float _2354;
        if (_1628 > 0.0)
        {
            _2354 = abs((1.0 - _1619) / _1628);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1628 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1619 + 1.0) / _1628);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2354 = frontier_phi_61_54_ladder;
        }
        float _2356 = isnan(_2038) ? _1656 : (isnan(_1656) ? _2038 : min(_1656, _2038));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1622) + _1611;
        float _2362 = (_2357 * _1625) + _1615;
        float _2363 = (_2357 * _1628) + _1619;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2364;
        float _2367 = _2364 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2363 > _2367) || ((_2363 < _2365) || ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 < _2365) || (_2361 > _2367))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2489 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2363, cbModelParam._m0[9u].z, fma(_2362, cbModelParam._m0[9u].y, _2361 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2363, cbModelParam._m0[10u].z, fma(_2362, cbModelParam._m0[10u].y, _2361 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2363, cbModelParam._m0[11u].z, fma(_2362, cbModelParam._m0[11u].y, _2361 * cbModelParam._m0[11u].x))), _1563);
            frontier_phi_37_61_ladder = _2489.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2489.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2489.x * cbModelParam._m0[1u].y;
        }
        _1644 = frontier_phi_37_61_ladder_2;
        _1646 = frontier_phi_37_61_ladder_1;
        _1648 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1632 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1563);
        _1644 = _1632.x * cbModelParam._m0[1u].y;
        _1646 = _1632.y * cbModelParam._m0[1u].y;
        _1648 = _1632.z * cbModelParam._m0[1u].y;
    }
    float _1652 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1653 = isnan(_1652) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1652 : min(cbModelParam._m0[25u].w, _1652));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1719 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1722 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _2043;
        if (_1716 > 0.0)
        {
            _2043 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2043 = frontier_phi_49_45_ladder;
        }
        float _2380;
        if (_1719 > 0.0)
        {
            _2380 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2380 = frontier_phi_63_56_ladder;
        }
        float _2549;
        if (_1722 > 0.0)
        {
            _2549 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2549 = frontier_phi_77_72_ladder;
        }
        float _2551 = isnan(_2380) ? _2043 : (isnan(_2043) ? _2380 : min(_2043, _2380));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _1716) + _1705;
        float _2557 = (_2552 * _1719) + _1709;
        float _2558 = (_2552 * _1722) + _1713;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2560 = (-1.0) - _2559;
        float _2562 = _2559 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2558 > _2562) || ((_2558 < _2560) || ((_2557 > _2562) || ((_2557 < _2560) || ((_2556 < _2560) || (_2556 > _2562))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2791 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2558, cbModelParam._m0[17u].z, fma(_2557, cbModelParam._m0[17u].y, _2556 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2558, cbModelParam._m0[18u].z, fma(_2557, cbModelParam._m0[18u].y, _2556 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2558, cbModelParam._m0[19u].z, fma(_2557, cbModelParam._m0[19u].y, _2556 * cbModelParam._m0[19u].x))), _1653);
            frontier_phi_46_77_ladder = _2791.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2791.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2791.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_46_77_ladder_2;
        _1743 = frontier_phi_46_77_ladder_1;
        _1745 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1653);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1758 = (((_778 * _728) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1741 - _1644)) + _1644);
    float _1760 = (((_778 * _730) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1743 - _1646)) + _1646);
    float _1762 = (((_778 * _731) + _779) * _743) * ((cbModelParam._m0[1u].w * (_1745 - _1648)) + _1648);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    vec4 _1779 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_661, _662));
    float _1781 = _1779.w;
    float _1793 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1781);
    float _1794 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1781);
    float _1795 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1781);
    uvec4 _1799 = floatBitsToUint(cbInstanceData._m0[_702 + 5u]);
    uint _1801 = _1799.x * 14u;
    uint _1802 = _1801 + 13u;
    float _1807 = _743 + (-1.0);
    float _1810 = (cbLight._m0[_1802].x * _1807) + 1.0;
    float _1811 = (cbLight._m0[_1802].y * _1807) + 1.0;
    uint _1812 = _1801 + 5u;
    float _1818 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
    uint _1822 = _1801 + 4u;
    float _1831 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1835 = _1801 | 1u;
    float _1846 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_625, _626, _627));
    float _1849 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_625, _626, _627));
    float _3759 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _3770 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1854 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * 0.3183098733425140380859375;
    float _1856 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.3183098733425140380859375;
    float _1863 = ((cbLight._m0[_1812].x * _1818) * _1856) + (((cbLight._m0[_1822].x * _1793) * _1831) * _1854);
    float _1864 = ((_1818 * cbLight._m0[_1812].y) * _1856) + (((cbLight._m0[_1822].y * _1794) * _1831) * _1854);
    float _1865 = ((_1818 * cbLight._m0[_1812].z) * _1856) + (((cbLight._m0[_1822].z * _1795) * _1831) * _1854);
    uint _1867 = _1801 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1801].w)) * _628) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1801].x + _653;
    float _1883 = cbLight._m0[_1801].y + _654;
    float _1884 = cbLight._m0[_1801].z + _655;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1801].xyz));
    float _3781 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _3792 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _1896 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _1897 = dot(vec3(_625, _626, _627), vec3(_1889, _1890, _1891));
    float _3803 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1801].xyz), vec3(_1889, _1890, _1891));
    float _3814 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1917 = exp2(log2(1.0 - (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * 5.0);
    float _1918 = 0.959999978542327880859375 - _725;
    float _1920 = 0.959999978542327880859375 - _726;
    float _1921 = 0.959999978542327880859375 - _727;
    float _1928 = 1.0 - _1881;
    float _1939 = (0.5 / (((_1896 * ((_1895 * _1928) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1928) + _1881) * _1895))) * _1895;
    float _3825 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    float _1941 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1955 = _1801 + 9u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _628) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1835].x + _653;
    float _1969 = cbLight._m0[_1835].y + _654;
    float _1970 = cbLight._m0[_1835].z + _655;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1835].xyz));
    float _3836 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _1982 = dot(vec3(_625, _626, _627), vec3(_1975, _1976, _1977));
    float _3847 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1975, _1976, _1977));
    float _3858 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1967 * _1967;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * 5.0);
    float _2008 = 1.0 - _1967;
    float _2018 = (0.5 / (((_1896 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2008) + _1967) * _1981))) * _1981;
    float _3869 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2020 = (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    float _2030 = (((((_2001 * _1918) + _728) * cbLight._m0[_1955].x) * _2020) * _1818) + ((((cbLight._m0[_1867].x * _1793) * ((_1917 * _1918) + _728)) * _1941) * _1831);
    float _2031 = (((((_2001 * _1920) + _730) * cbLight._m0[_1955].y) * _2020) * _1818) + ((((cbLight._m0[_1867].y * _1794) * ((_1917 * _1920) + _730)) * _1941) * _1831);
    float _2032 = (((((_2001 * _1921) + _731) * cbLight._m0[_1955].z) * _2020) * _1818) + ((((cbLight._m0[_1867].z * _1795) * ((_1917 * _1921) + _731)) * _1941) * _1831);
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    float _2157;
    if (_1799.y == 0u)
    {
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2088 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2087;
        float _2089 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2087;
        float _2090 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2087;
        uvec4 _2102 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2103 = _2102.x;
        uint _2114 = uint((float(_2102.y) * floor(float(uint(cbSceneParam._m0[85u].y * _662) / _2103))) + floor(float(uint(cbSceneParam._m0[85u].x * _661) / _2103)));
        float _2124 = (log2(_2090 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2125 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        uint _2128 = uint(isnan(14.0) ? _2125 : (isnan(_2125) ? 14.0 : min(_2125, 14.0)));
        uvec4 _2133 = texelFetch(g_lightClusterGridBuffer, int(((_2128 << 2u) + (_2114 << 6u)) >> 2u));
        uint _2134 = _2133.x;
        uint _2135 = _2102.z;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((((1u << ((_2135 >> 4u) & 15u)) + 4294967295u) & _2134) == 0u) || ((_2135 & 240u) == 0u))
        {
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
        }
        else
        {
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            uint _2423 = 0u;
            uint _2432;
            bool _2433;
            for (;;)
            {
                _2432 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2423 << 2u)) >> 2u)).x;
                _2433 = _2432 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2433)
                {
                    frontier_phi_74_pred = _2420;
                    frontier_phi_74_pred_1 = _2419;
                    frontier_phi_74_pred_2 = _2418;
                    frontier_phi_74_pred_3 = _2417;
                    frontier_phi_74_pred_4 = _2421;
                    frontier_phi_74_pred_5 = _2422;
                }
                else
                {
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    uint _2598;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2419;
                    _2595 = _2420;
                    _2596 = _2421;
                    _2597 = _2422;
                    _2598 = _2432;
                    float _2498;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    for (;;)
                    {
                        uint _2602 = uint(findLSB(_2598)) + (_2423 << 5u);
                        uint _2599 = (_2598 + 4294967295u) & _2598;
                        uint _2604 = _2602 * 48u;
                        vec4 _2618 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 3u)).x));
                        uint _2624 = (_2602 * 48u) + 4u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2624)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2624 + 3u)).x));
                        uint _2643 = (_2602 * 48u) + 8u;
                        vec3 _2654 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x));
                        float _2658 = _2618.x - _2088;
                        float _2659 = _2618.y - _2089;
                        float _2660 = _2618.z - _2090;
                        float _2661 = dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660));
                        float _2664 = inversesqrt(_2661);
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2668 = dot(vec3(_683, _686, _689), vec3(_2665, _2666, _2667));
                        float _2673 = 1.0 - (_2661 * _2618.w);
                        float _3890 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2674 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                        float _2675 = sqrt(_2661) * _2637.w;
                        float _2678 = 1.39999997615814208984375 / (_2675 + 1.39999997615814208984375);
                        float _2679 = _2678 * _2678;
                        float _2682 = ((1.0 - _2679) * _2668) + _2679;
                        float _2685 = _2675 * _2675;
                        float _2689 = ((isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0))) * _2674) / ((_2685 * 0.699999988079071044921875) + 1.0);
                        float _2693 = (-0.0) - _2088;
                        float _2694 = (-0.0) - _2089;
                        float _2695 = (-0.0) - _2090;
                        float _2699 = inversesqrt(dot(vec3(_2693, _2694, _2695), vec3(_2693, _2694, _2695)));
                        float _2700 = _2699 * _2693;
                        float _2701 = _2699 * _2694;
                        float _2702 = _2699 * _2695;
                        float _2710 = exp2(log2(1.0 / ((_2685 * 3.5) + 5.0)) * 0.25);
                        float _2711 = 1.0 - _759;
                        float _2718 = sqrt(1.0 - ((1.0 - (_2711 * _2711)) * (1.0 - (_2710 * _2710))));
                        float _2719 = _2718 * _2718;
                        float _2720 = _2719 * _2719;
                        float _2721 = _2700 + _2665;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
                        float _2731 = dot(vec3(_683, _686, _689), vec3(_2700, _2701, _2702));
                        float _3906 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                        float _2734 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                        float _2735 = dot(vec3(_683, _686, _689), vec3(_2727 * _2721, _2727 * _2722, _2727 * _2723));
                        float _3917 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2738 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                        float _2742 = ((_2738 * _2738) * (_2720 + (-1.0))) + 1.0;
                        float _2743 = _2678 * _2719;
                        float _2744 = _2743 * _2743;
                        float _2747 = ((1.0 - _2744) * _2668) + _2744;
                        float _3928 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2748 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                        float _2749 = 1.0 - _2719;
                        float _2759 = (0.5 / (((_2748 * ((_2734 * _2749) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2748 * _2749) + _2719) * _2734))) * _2748;
                        float _3939 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2770 = (((_2720 * 3.1415927410125732421875) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) / ((_2742 * _2742) * ((_2685 * 2.1991131305694580078125) + 3.141590118408203125))) * _2674;
                        _2501 = (_2689 * _2637.x) + _2595;
                        _2502 = (_2689 * _2637.y) + _2596;
                        _2503 = (_2689 * _2637.z) + _2597;
                        _2498 = (_2770 * _2654.x) + _2592;
                        _2499 = (_2770 * _2654.y) + _2593;
                        _2500 = (_2770 * _2654.z) + _2594;
                        if (_2599 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2500;
                            _2595 = _2501;
                            _2596 = _2502;
                            _2597 = _2503;
                            _2598 = _2599;
                        }
                    }
                    frontier_phi_74_pred = _2501;
                    frontier_phi_74_pred_1 = _2500;
                    frontier_phi_74_pred_2 = _2499;
                    frontier_phi_74_pred_3 = _2498;
                    frontier_phi_74_pred_4 = _2502;
                    frontier_phi_74_pred_5 = _2503;
                }
                _2248 = frontier_phi_74_pred;
                _2246 = frontier_phi_74_pred_1;
                _2244 = frontier_phi_74_pred_2;
                _2242 = frontier_phi_74_pred_3;
                _2250 = frontier_phi_74_pred_4;
                _2252 = frontier_phi_74_pred_5;
                uint _2424 = _2423 + 1u;
                if (_2424 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2417 = _2242;
                    _2418 = _2244;
                    _2419 = _2246;
                    _2420 = _2248;
                    _2421 = _2250;
                    _2422 = _2252;
                    _2423 = _2424;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
        }
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.z;
        uint _2258 = (_2256 >> 8u) & 15u;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        if (((4294967295u << _2258) & _2134) == 0u)
        {
            _2385 = _2241;
            _2387 = _2243;
            _2389 = _2245;
            _2391 = _2247;
            _2393 = _2249;
            _2395 = _2251;
        }
        else
        {
            float _2410 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
            float _2411 = _2410 * _2088;
            float _2412 = _2410 * _2089;
            float _2413 = _2410 * _2090;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2258 < ((_2256 >> 12u) & 15u))
            {
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2394;
                float _2396;
                float _2575 = _2241;
                float _2576 = _2243;
                float _2577 = _2245;
                float _2578 = _2247;
                float _2579 = _2249;
                float _2580 = _2251;
                uint _2581 = _2258;
                uint _2590;
                bool _2591;
                for (;;)
                {
                    _2590 = texelFetch(g_lightClassification, int((((_2128 << 5u) + (_2114 << 9u)) + (_2581 << 2u)) >> 2u)).x;
                    _2591 = _2590 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2591)
                    {
                        frontier_phi_83_pred = _2578;
                        frontier_phi_83_pred_1 = _2577;
                        frontier_phi_83_pred_2 = _2576;
                        frontier_phi_83_pred_3 = _2575;
                        frontier_phi_83_pred_4 = _2580;
                        frontier_phi_83_pred_5 = _2579;
                    }
                    else
                    {
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _2800;
                        float _2801;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2809 = _2575;
                        float _2810 = _2576;
                        float _2811 = _2577;
                        float _2812 = _2578;
                        float _2813 = _2579;
                        float _2814 = _2580;
                        uint _2815 = _2590;
                        uint _2816;
                        vec4 _2841;
                        float _2842;
                        vec4 _2857;
                        vec3 _2869;
                        vec4 _2884;
                        vec4 _2899;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2826 = ((_2581 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2815));
                            _2816 = (_2815 + 4294967295u) & _2815;
                            uint _2828 = _2826 * 40u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            _2842 = _2841.w;
                            uint _2844 = (_2826 * 40u) + 4u;
                            _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2859 = (_2826 * 40u) + 8u;
                            _2869 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x));
                            uint _2871 = (_2826 * 40u) + 16u;
                            _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2886 = (_2826 * 40u) + 20u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2826 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2826 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2090, _2933.z, fma(_2089, _2933.y, _2933.x * _2088)) + _2933.w;
                            _2946 = !((fma(_2090, _2914.z, fma(_2089, _2914.y, _2914.x * _2088)) + _2914.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2841.x - _2088;
                                float _2974 = _2841.y - _2089;
                                float _2975 = _2841.z - _2090;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2842 * _2842));
                                float _3950 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                                float _2991 = sqrt(_2976) * _2857.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_683, _686, _689))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2090, _2884.z, fma(_2089, _2884.y, _2884.x * _2088)) + _2884.w) / _2945;
                                float _3005 = (fma(_2090, _2899.z, fma(_2089, _2899.y, _2899.x * _2088)) + _2899.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _3966 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _759;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2411;
                                float _3035 = _2981 - _2412;
                                float _3036 = _2982 - _2413;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_683, _686, _689), vec3((-0.0) - _2411, (-0.0) - _2412, (-0.0) - _2413));
                                float _3977 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _3048 = dot(vec3(_683, _686, _689), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _3988 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_683, _686, _689), vec3(_2980, _2981, _2982))) + _3057;
                                float _3999 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4010 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3011 * _2857.x;
                                frontier_phi_89_pred_1 = _3085 * _2869.z;
                                frontier_phi_89_pred_2 = _3085 * _2869.y;
                                frontier_phi_89_pred_3 = _3085 * _2869.x;
                                frontier_phi_89_pred_4 = _3011 * _2857.z;
                                frontier_phi_89_pred_5 = _3011 * _2857.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3092 = frontier_phi_89_pred;
                            _3091 = frontier_phi_89_pred_1;
                            _3090 = frontier_phi_89_pred_2;
                            _3089 = frontier_phi_89_pred_3;
                            _3094 = frontier_phi_89_pred_4;
                            _3093 = frontier_phi_89_pred_5;
                            _2799 = _3092 + _2812;
                            _2800 = _3093 + _2813;
                            _2801 = _3094 + _2814;
                            _2796 = _3089 + _2809;
                            _2797 = _3090 + _2810;
                            _2798 = _3091 + _2811;
                            if (_2816 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2816;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2799;
                        frontier_phi_83_pred_1 = _2798;
                        frontier_phi_83_pred_2 = _2797;
                        frontier_phi_83_pred_3 = _2796;
                        frontier_phi_83_pred_4 = _2801;
                        frontier_phi_83_pred_5 = _2800;
                    }
                    _2392 = frontier_phi_83_pred;
                    _2390 = frontier_phi_83_pred_1;
                    _2388 = frontier_phi_83_pred_2;
                    _2386 = frontier_phi_83_pred_3;
                    _2396 = frontier_phi_83_pred_4;
                    _2394 = frontier_phi_83_pred_5;
                    uint _2582 = _2581 + 1u;
                    if (_2582 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2575 = _2386;
                        _2576 = _2388;
                        _2577 = _2390;
                        _2578 = _2392;
                        _2579 = _2394;
                        _2580 = _2396;
                        _2581 = _2582;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2396;
                frontier_phi_65_66_ladder_1 = _2394;
                frontier_phi_65_66_ladder_2 = _2390;
                frontier_phi_65_66_ladder_3 = _2388;
                frontier_phi_65_66_ladder_4 = _2392;
                frontier_phi_65_66_ladder_5 = _2386;
            }
            else
            {
                frontier_phi_65_66_ladder = _2251;
                frontier_phi_65_66_ladder_1 = _2249;
                frontier_phi_65_66_ladder_2 = _2245;
                frontier_phi_65_66_ladder_3 = _2243;
                frontier_phi_65_66_ladder_4 = _2247;
                frontier_phi_65_66_ladder_5 = _2241;
            }
            _2385 = frontier_phi_65_66_ladder_5;
            _2387 = frontier_phi_65_66_ladder_3;
            _2389 = frontier_phi_65_66_ladder_2;
            _2391 = frontier_phi_65_66_ladder_4;
            _2393 = frontier_phi_65_66_ladder_1;
            _2395 = frontier_phi_65_66_ladder;
        }
        float _2400 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2147 = (_2400 * _2391) + _1863;
        _2149 = (_2400 * _2393) + _1864;
        _2151 = (_2400 * _2395) + _1865;
        _2153 = ((_2385 * _728) * _2400) + _2030;
        _2155 = ((_2387 * _730) * _2400) + _2031;
        _2157 = ((_2389 * _731) * _2400) + _2032;
    }
    else
    {
        _2147 = _1863;
        _2149 = _1864;
        _2151 = _1865;
        _2153 = _2030;
        _2155 = _2031;
        _2157 = _2032;
    }
    uint _2163 = _704 + uint(cbMatDynParam._m0[0u].w);
    float _4026 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _4037 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4048 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _2188 = (((isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_2147 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _743))) + ((_2153 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2163].x * ((_556 * ((_512 - _432) - (_512 * _288))) + _432));
    float _2190 = ((cbInstanceData._m0[_2163].y * ((_556 * ((_513 - _433) - (_513 * _288))) + _433)) + ((_2155 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2149 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _743)));
    float _2192 = ((cbInstanceData._m0[_2163].z * ((_556 * ((_514 - _434) - (_514 * _288))) + _434)) + ((_2157 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1552)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2151 + ((isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0))) * _743)));
    uint _2196 = _702 + 6u;
    float _2204 = _661 / cbSceneParam._m0[86u].x;
    float _2205 = _662 / cbSceneParam._m0[86u].y;
    vec4 _2219 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2221 = _2219.x;
    float _2222 = _2219.y;
    float _2223 = _2219.z;
    float _2224 = _2219.w;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _2266 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _2267 = _2266 / _648;
        float _2278 = _2267 * _261;
        float _2279 = _262 * _2267;
        float _2280 = (-0.0) - _2279;
        float _2281 = _2267 * _263;
        float _2283 = (cbSceneParam._m0[77u].w * _2280) / _2266;
        float _2284 = _2283 + cbSceneParam._m0[79u].w;
        float _2285 = cbSceneParam._m0[79u].w - _2279;
        float _2291 = sqrt(((_2278 * _2278) + (_2279 * _2279)) + (_2281 * _2281));
        float _2294 = (1.0 - (cbSceneParam._m0[77u].w / _2266)) * _2291;
        float _2300 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2302 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2511;
        if (abs((_2280 - _2283) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2511 = ((((_2284 > 0.0) ? exp2(_2300 * _2284) : (2.0 - exp2(_2302 * _2284))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2294;
        }
        else
        {
            float _2446 = 1.0 / cbSceneParam._m0[80u].x;
            float _2447 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : max(_2284, _2285));
            float _2448 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : min(_2284, _2285));
            float _2457 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : min(_2447, 0.0));
            float _2458 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : min(_2448, 0.0));
            _2511 = ((abs(_2291 / _2280) * cbSceneParam._m0[80u].y) * ((((_2457 - _2458) * 2.0) - ((exp2(_2300 * (isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0)))) - exp2(_2300 * (isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0))))) * _2446)) - ((exp2(_2302 * _2457) - exp2(_2302 * _2458)) * _2446))) + (_2294 * cbSceneParam._m0[80u].z);
        }
        vec4 _2513 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2204, _2205, 1.0), 0.0);
        float _2522 = exp2((_2511 * (-1.44269502162933349609375)) * (1.0 - _2513.w));
        float _2523 = log2(_2522);
        float _2539 = log2(_2224);
        _2304 = (exp2(_2539 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].x)) * _2513.x) / cbSceneParam._m0[78u].x)) + _2221;
        _2306 = (exp2(_2539 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].y)) * _2513.y) / cbSceneParam._m0[78u].y)) + _2222;
        _2308 = (exp2(_2539 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2523 * cbSceneParam._m0[78u].z)) * _2513.z) / cbSceneParam._m0[78u].z)) + _2223;
        _2310 = _2522 * _2224;
    }
    else
    {
        _2304 = _2221;
        _2306 = _2222;
        _2308 = _2223;
        _2310 = _2224;
    }
    float _2322 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2323 = _2322 == 3.0;
    float _2324 = log2(_2310);
    float _2331 = exp2(_2324 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0)));
    float _2332 = exp2(_2324 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0)));
    float _2333 = exp2(_2324 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0)));
    float _2342 = (_2322 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2342 * (_2323 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.y = _2342 * (_2323 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2306)));
    SV_Target.z = _2342 * (_2323 ? _2333 : (_2333 + (cbSceneParam._m0[72u].w * _2308)));
    SV_Target.w = cbInstanceData._m0[_2196].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2196].w;
}


