#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1030;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _395 = ((_389 * _383) + (_357 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _396 = ((_389 * _384) + (_358 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    float _416 = (_392 > 0.0) ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_397 + (-0.5)) + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_398 + (-0.5)) + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    vec4 _484 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _486 = _484.x;
    vec4 _498 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _502 = _498.z;
    float _505 = (_498.x * 2.0) + (-1.0);
    float _506 = (_498.y * 2.0) + (-1.0);
    float _507 = dot(vec2(_505, _506), vec2(_505, _506));
    float _3410 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))));
    float _513 = _502 * _290;
    float _520 = (cbMtdParam._m0[15u].w * ((_329 - _513) + ((_502 - _329) * _290))) + _513;
    float _524 = (cbMtdParam._m0[16u].x * _357) + _505;
    float _525 = (cbMtdParam._m0[16u].x * _358) + _506;
    float _528 = fma(_512, _199, fma(_525, _206, _524 * _192));
    float _531 = fma(_512, _200, fma(_525, _207, _524 * _193));
    float _534 = fma(_512, _201, fma(_525, _208, _524 * _194));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3421 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _542 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _3432 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3443 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3454 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3465 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _546 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _567 = _263 * _566;
    float _568 = _264 * _566;
    float _569 = _265 * _566;
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _599 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _602 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _617 = _615 + 9u;
    uint _618 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _624 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0)))) * cbInstanceData._m0[_618].x;
    float _625 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_618].y;
    float _626 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_618].z;
    float _3476 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _630 = 1.0 - _546;
    float _631 = _627 * _630;
    float _632 = _628 * _630;
    float _633 = _629 * _630;
    float _638 = (_627 + (-0.039999999105930328369140625)) * _546;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _546;
    float _640 = (_629 + (-0.039999999105930328369140625)) * _546;
    float _641 = _638 + 0.039999999105930328369140625;
    float _643 = _639 + 0.039999999105930328369140625;
    float _644 = _640 + 0.039999999105930328369140625;
    vec4 _653 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _656 = _653.x * TEXCOORD.z;
    float _657 = dot(vec3(_539, _540, _541), vec3(_567, _568, _569));
    float _660 = _657 * 2.0;
    float _664 = (_660 * _539) - _567;
    float _665 = (_660 * _540) - _568;
    float _666 = (_660 * _541) - _569;
    float _670 = abs(dot(vec3(_567, _568, _569), vec3(_539, _540, _541)));
    float _3509 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = sqrt(_542);
    float _685 = exp2((_672 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_672 * 3.0));
    float _691 = (1.0 - _685) * ((_672 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _692 = _685 * _672;
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _728 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1029;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _756 = fma(_728, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _720));
        float _760 = fma(_728, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _720));
        float _764 = fma(_728, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _720));
        float _787 = _720 + _539;
        float _788 = _724 + _540;
        float _789 = _728 + _541;
        float _799 = fma(_789, cbModelParam._m0[26u].z, fma(_788, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) - _756;
        float _800 = fma(_789, cbModelParam._m0[27u].z, fma(_788, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) - _760;
        float _801 = fma(_789, cbModelParam._m0[28u].z, fma(_788, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) - _764;
        float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
        float _818 = ((_805 * _799) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_756 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _819 = ((_805 * _800) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_760 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_805 * _801) / cbModelParam._m0[34u].z) + ((((((_764 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _857 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _858 = _857 * (_823.x + (-0.5));
        float _859 = _857 * (_823.y + (-0.5));
        float _860 = _857 * (_823.z + (-0.5));
        float _867 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _868 = _867 * (_830.x + (-0.5));
        float _869 = _867 * (_830.y + (-0.5));
        float _870 = _867 * (_830.z + (-0.5));
        float _877 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_837.x + (-0.5));
        float _879 = _877 * (_837.y + (-0.5));
        float _880 = _877 * (_837.z + (-0.5));
        float _887 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_844.x + (-0.5));
        float _889 = _887 * (_844.y + (-0.5));
        float _890 = _887 * (_844.z + (-0.5));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = _858 * 0.5;
        float _895 = _868 * 0.5;
        float _896 = _878 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _911 = (dot(vec3(_539, _540, _541), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _921 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3557 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_923 + 1.0))) + _928) * _891;
        float _938 = _859 * 0.5;
        float _939 = _869 * 0.5;
        float _940 = _879 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_539, _540, _541), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3568 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3579 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3590 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * (_965 + 1.0))) + _970) * _892;
        float _980 = _860 * 0.5;
        float _981 = _870 * 0.5;
        float _982 = _880 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _996 = (dot(vec3(_539, _540, _541), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1005 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3623 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1007 + 1.0))) + _1012) * _893;
        _1029 = _860;
        _1031 = _859;
        _1032 = _858;
        _1033 = _870;
        _1034 = _869;
        _1035 = _868;
        _1036 = _880;
        _1037 = _879;
        _1038 = _878;
        _1039 = _893;
        _1040 = _892;
        _1041 = _891;
        _1042 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
    }
    else
    {
        _1029 = _1030;
        _1031 = _1030;
        _1032 = _1030;
        _1033 = _1030;
        _1034 = _1030;
        _1035 = _1030;
        _1036 = _1030;
        _1037 = _1030;
        _1038 = _1030;
        _1039 = _1030;
        _1040 = _1030;
        _1041 = _1030;
        _1042 = 0.0;
        _1043 = 0.0;
        _1044 = 0.0;
    }
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1070 = fma(_728, cbModelParam._m0[30u].z, fma(_724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _720));
        float _1074 = fma(_728, cbModelParam._m0[31u].z, fma(_724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _720));
        float _1078 = fma(_728, cbModelParam._m0[32u].z, fma(_724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _720));
        float _1101 = _720 + _539;
        float _1102 = _724 + _540;
        float _1103 = _728 + _541;
        float _1113 = fma(_1103, cbModelParam._m0[30u].z, fma(_1102, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[31u].z, fma(_1102, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[32u].z, fma(_1102, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1070 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1074 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[35u].z) + ((((((_1078 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1169 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1136.x + (-0.5));
        float _1171 = _1169 * (_1136.y + (-0.5));
        float _1172 = _1169 * (_1136.z + (-0.5));
        float _1179 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1180 = _1179 * (_1143.x + (-0.5));
        float _1181 = _1179 * (_1143.y + (-0.5));
        float _1182 = _1179 * (_1143.z + (-0.5));
        float _1189 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1150.x + (-0.5));
        float _1191 = _1189 * (_1150.y + (-0.5));
        float _1192 = _1189 * (_1150.z + (-0.5));
        float _1199 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1157.x + (-0.5));
        float _1201 = _1199 * (_1157.y + (-0.5));
        float _1202 = _1199 * (_1157.z + (-0.5));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = _1170 * 0.5;
        float _1207 = _1180 * 0.5;
        float _1208 = _1190 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_539, _540, _541), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3686 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_1233 + 1.0))) + _1238) * _1203;
        float _1248 = _1171 * 0.5;
        float _1249 = _1181 * 0.5;
        float _1250 = _1191 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_539, _540, _541), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3719 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1275 + 1.0))) + _1280) * _1204;
        float _1290 = _1172 * 0.5;
        float _1291 = _1182 * 0.5;
        float _1292 = _1192 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_539, _540, _541), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3752 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1317 + 1.0))) + _1322) * _1205;
        _1339 = _1172;
        _1340 = _1171;
        _1341 = _1170;
        _1342 = _1182;
        _1343 = _1181;
        _1344 = _1180;
        _1345 = _1192;
        _1346 = _1191;
        _1347 = _1190;
        _1348 = _1205;
        _1349 = _1204;
        _1350 = _1203;
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1353 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
    }
    else
    {
        _1339 = _1030;
        _1340 = _1030;
        _1341 = _1030;
        _1342 = _1030;
        _1343 = _1030;
        _1344 = _1030;
        _1345 = _1030;
        _1346 = _1030;
        _1347 = _1030;
        _1348 = _1030;
        _1349 = _1030;
        _1350 = _1030;
        _1351 = 0.0;
        _1352 = 0.0;
        _1353 = 0.0;
    }
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1042)) + _1042;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1043)) + _1043;
    float _1365 = (cbModelParam._m0[1u].x * (_1353 - _1044)) + _1044;
    float _1386 = fma(_1365, cbSceneParam._m0[89u].z, fma(_1364, cbSceneParam._m0[89u].y, _1363 * cbSceneParam._m0[89u].x));
    float _1389 = fma(_1365, cbSceneParam._m0[90u].z, fma(_1364, cbSceneParam._m0[90u].y, _1363 * cbSceneParam._m0[90u].x));
    float _1392 = fma(_1365, cbSceneParam._m0[91u].z, fma(_1364, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1363));
    float _1407 = _664 * 0.5;
    float _1408 = _665 * 0.5;
    float _1409 = _666 * 0.5;
    float _1410 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1341, _1344, _1347, _1350));
    float _1413 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1416 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1450;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1423 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1029, _1033, _1036, _1039));
        float _1427 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1031, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1407, _1408, _1409, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1438 = dot(vec4(cbModelParam._m0[39u]), vec4(_1407, _1408, _1409, 1.0));
        _1450 = dot(vec3(isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1438) ? 0.0 : (isnan(0.0) ? _1438 : max(0.0, _1438))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1450 = 1.0;
    }
    float _1461;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1452 = dot(vec4(cbModelParam._m0[40u]), vec4(_1407, _1408, _1409, 1.0));
        _1461 = dot(vec3(isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1452) ? 0.0 : (isnan(0.0) ? _1452 : max(0.0, _1452))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1461 = 1.0;
    }
    float _1465 = (_1461 * cbModelParam._m0[1u].x) + (_1450 * (1.0 - cbModelParam._m0[1u].x));
    float _1475 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1476 = isnan(_1475) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1475 : min(cbModelParam._m0[25u].z, _1475));
    float _1557;
    float _1559;
    float _1561;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1524 = fma(_728, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _720)) + cbModelParam._m0[13u].w;
        float _1528 = fma(_728, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _720)) + cbModelParam._m0[14u].w;
        float _1532 = fma(_728, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _720)) + cbModelParam._m0[15u].w;
        float _1535 = fma(_666, cbModelParam._m0[13u].z, fma(_665, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _664));
        float _1538 = fma(_666, cbModelParam._m0[14u].z, fma(_665, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _664));
        float _1541 = fma(_666, cbModelParam._m0[15u].z, fma(_665, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _664));
        float _1569;
        if (_1535 > 0.0)
        {
            _1569 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1569 = frontier_phi_22_20_ladder;
        }
        float _1740;
        if (_1538 > 0.0)
        {
            _1740 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1740 = frontier_phi_31_27_ladder;
        }
        float _2195;
        if (_1541 > 0.0)
        {
            _2195 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2195 = frontier_phi_43_38_ladder;
        }
        float _2197 = isnan(_1740) ? _1569 : (isnan(_1569) ? _1740 : min(_1569, _1740));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1535) + _1524;
        float _2203 = (_2198 * _1538) + _1528;
        float _2204 = (_2198 * _1541) + _1532;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2207 = (-1.0) - _2205;
        float _2209 = _2205 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2204 > _2209) || ((_2204 < _2207) || ((_2203 > _2209) || ((_2203 < _2207) || ((_2202 < _2207) || (_2202 > _2209))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2454 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2204, cbModelParam._m0[9u].z, fma(_2203, cbModelParam._m0[9u].y, _2202 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2204, cbModelParam._m0[10u].z, fma(_2203, cbModelParam._m0[10u].y, _2202 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2204, cbModelParam._m0[11u].z, fma(_2203, cbModelParam._m0[11u].y, _2202 * cbModelParam._m0[11u].x))), _1476);
            frontier_phi_21_43_ladder = _2454.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2454.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2454.z * cbModelParam._m0[1u].y;
        }
        _1557 = frontier_phi_21_43_ladder_1;
        _1559 = frontier_phi_21_43_ladder;
        _1561 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1545 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_664, _665, _666), _1476);
        _1557 = _1545.x * cbModelParam._m0[1u].y;
        _1559 = _1545.y * cbModelParam._m0[1u].y;
        _1561 = _1545.z * cbModelParam._m0[1u].y;
    }
    float _1565 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1566 = isnan(_1565) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1565 : min(cbModelParam._m0[25u].w, _1565));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1619 = fma(_728, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _720)) + cbModelParam._m0[21u].w;
        float _1623 = fma(_728, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _720)) + cbModelParam._m0[22u].w;
        float _1627 = fma(_728, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _720)) + cbModelParam._m0[23u].w;
        float _1630 = fma(_666, cbModelParam._m0[21u].z, fma(_665, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _664));
        float _1633 = fma(_666, cbModelParam._m0[22u].z, fma(_665, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _664));
        float _1636 = fma(_666, cbModelParam._m0[23u].z, fma(_665, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _664));
        float _1745;
        if (_1630 > 0.0)
        {
            _1745 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1745 = frontier_phi_33_29_ladder;
        }
        float _2222;
        if (_1633 > 0.0)
        {
            _2222 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2222 = frontier_phi_45_40_ladder;
        }
        float _2575;
        if (_1636 > 0.0)
        {
            _2575 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2575 = frontier_phi_57_52_ladder;
        }
        float _2577 = isnan(_2222) ? _1745 : (isnan(_1745) ? _2222 : min(_1745, _2222));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _1630) + _1619;
        float _2583 = (_2578 * _1633) + _1623;
        float _2584 = (_2578 * _1636) + _1627;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2586 = (-1.0) - _2585;
        float _2588 = _2585 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2584 > _2588) || ((_2584 < _2586) || ((_2583 > _2588) || ((_2583 < _2586) || ((_2582 < _2586) || (_2582 > _2588))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2584, cbModelParam._m0[17u].z, fma(_2583, cbModelParam._m0[17u].y, _2582 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2584, cbModelParam._m0[18u].z, fma(_2583, cbModelParam._m0[18u].y, _2582 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2584, cbModelParam._m0[19u].z, fma(_2583, cbModelParam._m0[19u].y, _2582 * cbModelParam._m0[19u].x))), _1566);
            frontier_phi_30_57_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1655 = frontier_phi_30_57_ladder_2;
        _1657 = frontier_phi_30_57_ladder_1;
        _1659 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_664, _665, _666), _1566);
        _1655 = _1639.x * cbModelParam._m0[1u].z;
        _1657 = _1639.y * cbModelParam._m0[1u].z;
        _1659 = _1639.z * cbModelParam._m0[1u].z;
    }
    float _1672 = (((_691 * _641) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1655 - _1557)) + _1557);
    float _1674 = (((_691 * _643) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1657 - _1559)) + _1559);
    float _1676 = (((_691 * _644) + _692) * _656) * ((cbModelParam._m0[1u].w * (_1659 - _1561)) + _1561);
    float _1679 = fma(_1676, cbSceneParam._m0[89u].z, fma(_1674, cbSceneParam._m0[89u].y, _1672 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1676, cbSceneParam._m0[90u].z, fma(_1674, cbSceneParam._m0[90u].y, _1672 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1676, cbSceneParam._m0[91u].z, fma(_1674, cbSceneParam._m0[91u].y, _1672 * cbSceneParam._m0[91u].x));
    float _1719 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1723 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1732 = _1719 / _1731;
    float _1733 = _1723 / _1731;
    float _1734 = _1727 / _1731;
    float _1881;
    float _1882;
    float _1883;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1761 = ((uint(_1734 > cbSceneParam._m0[59u].y) + uint(_1734 > cbSceneParam._m0[59u].x)) + uint(_1734 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1762 = _1761 + 43u;
        uint _1770 = _1761 + 44u;
        uint _1778 = _1761 + 45u;
        uint _1786 = _1761 + 46u;
        float _1797 = fma(_1731, cbSceneParam._m0[_1762].w, fma(_1727, cbSceneParam._m0[_1762].z, fma(_1723, cbSceneParam._m0[_1762].y, _1719 * cbSceneParam._m0[_1762].x)));
        float _1801 = fma(_1731, cbSceneParam._m0[_1770].w, fma(_1727, cbSceneParam._m0[_1770].z, fma(_1723, cbSceneParam._m0[_1770].y, _1719 * cbSceneParam._m0[_1770].x)));
        float _1809 = fma(_1731, cbSceneParam._m0[_1786].w, fma(_1727, cbSceneParam._m0[_1786].z, fma(_1723, cbSceneParam._m0[_1786].y, _1719 * cbSceneParam._m0[_1786].x)));
        float _1814 = cbSceneParam._m0[33u].z * _1809;
        float _1816 = cbSceneParam._m0[33u].w * _1809;
        float _1819 = fma(_1731, cbSceneParam._m0[_1778].w, fma(_1727, cbSceneParam._m0[_1778].z, fma(_1723, cbSceneParam._m0[_1778].y, _1719 * cbSceneParam._m0[_1778].x))) / _1809;
        float _1867 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
        float _3878 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1874 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1814 + _1797) / _1809, (_1816 + _1801) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 + _1797) / _1809, (_1801 - _1814) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1814) / _1809, (_1801 - _1816) / _1809), _1819), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 - _1816) / _1809, (_1814 + _1801) / _1809), _1819), 0.0)).x), vec4(0.25)));
        _1881 = 1.0 - (_1874 * cbSceneParam._m0[34u].x);
        _1882 = 1.0 - (_1874 * cbSceneParam._m0[34u].y);
        _1883 = 1.0 - (_1874 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1881 = 1.0;
        _1882 = 1.0;
        _1883 = 1.0;
    }
    float _1947;
    float _1949;
    float _1951;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1935 = fma(_1731, cbSceneParam._m0[63u].w, fma(_1727, cbSceneParam._m0[63u].z, fma(_1723, cbSceneParam._m0[63u].y, _1719 * cbSceneParam._m0[63u].x)));
        float _1936 = fma(_1731, cbSceneParam._m0[60u].w, fma(_1727, cbSceneParam._m0[60u].z, fma(_1723, cbSceneParam._m0[60u].y, _1719 * cbSceneParam._m0[60u].x))) / _1935;
        float _1937 = fma(_1731, cbSceneParam._m0[61u].w, fma(_1727, cbSceneParam._m0[61u].z, fma(_1723, cbSceneParam._m0[61u].y, _1719 * cbSceneParam._m0[61u].x))) / _1935;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1936 >= cbSceneParam._m0[64u].x) && (_1937 >= cbSceneParam._m0[64u].y)) && (_1936 <= cbSceneParam._m0[64u].z)) && (_1937 <= cbSceneParam._m0[64u].w))
        {
            float _2235 = fma(_1731, cbSceneParam._m0[62u].w, fma(_1727, cbSceneParam._m0[62u].z, fma(_1723, cbSceneParam._m0[62u].y, _1719 * cbSceneParam._m0[62u].x))) / _1935;
            float _2239 = isnan(cbSceneParam._m0[41u].w) ? _2235 : (isnan(_2235) ? cbSceneParam._m0[41u].w : max(_2235, cbSceneParam._m0[41u].w));
            float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_1733 * _1733) + (_1732 * _1732)) + (_1734 * _1734))) * cbSceneParam._m0[33u].y;
            float _3894 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
            float _2289 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1936, cbSceneParam._m0[33u].w + _1937), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1936, _1937 - cbSceneParam._m0[33u].z), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].z, _1937 - cbSceneParam._m0[33u].w), _2239), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1936 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1937), _2239), 0.0)).x), vec4(0.25)));
            float _2293 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
            float _2294 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
            float _2295 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2294) ? _1882 : (isnan(_1882) ? _2294 : min(_1882, _2294));
            frontier_phi_42_41_ladder_1 = isnan(_2293) ? _1881 : (isnan(_1881) ? _2293 : min(_1881, _2293));
            frontier_phi_42_41_ladder_2 = isnan(_2295) ? _1883 : (isnan(_1883) ? _2295 : min(_1883, _2295));
        }
        else
        {
            frontier_phi_42_41_ladder = _1882;
            frontier_phi_42_41_ladder_1 = _1881;
            frontier_phi_42_41_ladder_2 = _1883;
        }
        _1947 = frontier_phi_42_41_ladder_1;
        _1949 = frontier_phi_42_41_ladder;
        _1951 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1947 = _1881;
        _1949 = _1882;
        _1951 = _1883;
    }
    uvec4 _1956 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1958 = _1956.x * 14u;
    uint _1959 = _1958 + 13u;
    float _1964 = _656 + (-1.0);
    float _1967 = (cbLight._m0[_1959].x * _1964) + 1.0;
    float _1968 = (cbLight._m0[_1959].y * _1964) + 1.0;
    uint _1969 = _1958 + 5u;
    float _1975 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1979 = _1958 + 4u;
    float _1988 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1992 = _1958 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_539, _540, _541));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_539, _540, _541));
    float _3930 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _3941 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1969].x * _1975) * _2013) + (((cbLight._m0[_1979].x * _1947) * _1988) * _2011);
    float _2021 = ((_1975 * cbLight._m0[_1969].y) * _2013) + (((cbLight._m0[_1979].y * _1949) * _1988) * _2011);
    float _2022 = ((_1975 * cbLight._m0[_1969].z) * _2013) + (((cbLight._m0[_1979].z * _1951) * _1988) * _2011);
    uint _2024 = _1958 + 8u;
    float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1958].w)) * _542) * 0.949999988079071044921875);
    float _2038 = _2037 * _2037;
    float _2039 = cbLight._m0[_1958].x + _567;
    float _2040 = cbLight._m0[_1958].y + _568;
    float _2041 = cbLight._m0[_1958].z + _569;
    float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
    float _2046 = _2045 * _2039;
    float _2047 = _2045 * _2040;
    float _2048 = _2045 * _2041;
    float _2049 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1958].xyz));
    float _3952 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2052 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _3963 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2053 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _2054 = dot(vec3(_539, _540, _541), vec3(_2046, _2047, _2048));
    float _3974 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _2058 = dot(vec3(cbLight._m0[_1958].xyz), vec3(_2046, _2047, _2048));
    float _3985 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = _2038 * _2038;
    float _2066 = ((_2057 * _2057) * (_2062 + (-1.0))) + 1.0;
    float _2074 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
    float _2075 = 0.959999978542327880859375 - _638;
    float _2077 = 0.959999978542327880859375 - _639;
    float _2078 = 0.959999978542327880859375 - _640;
    float _2085 = 1.0 - _2038;
    float _2096 = (0.5 / (((_2053 * ((_2052 * _2085) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2085) + _2038) * _2052))) * _2052;
    float _3996 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2062 / ((_2066 * _2066) * 3.141590118408203125));
    uint _2112 = _1958 + 9u;
    float _2123 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _542) * 0.949999988079071044921875);
    float _2124 = _2123 * _2123;
    float _2125 = cbLight._m0[_1992].x + _567;
    float _2126 = cbLight._m0[_1992].y + _568;
    float _2127 = cbLight._m0[_1992].z + _569;
    float _2131 = inversesqrt(dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127)));
    float _2132 = _2131 * _2125;
    float _2133 = _2131 * _2126;
    float _2134 = _2131 * _2127;
    float _2135 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1992].xyz));
    float _4007 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _2139 = dot(vec3(_539, _540, _541), vec3(_2132, _2133, _2134));
    float _4018 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2132, _2133, _2134));
    float _4029 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2124 * _2124;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2158 = exp2(log2(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * 5.0);
    float _2165 = 1.0 - _2124;
    float _2175 = (0.5 / (((_2053 * ((_2138 * _2165) + _2124)) + 9.9999999392252902907785028219223e-09) + (((_2053 * _2165) + _2124) * _2138))) * _2138;
    float _4040 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2177 = (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    float _2187 = (((((_2158 * _2075) + _641) * cbLight._m0[_2112].x) * _2177) * _1975) + ((((cbLight._m0[_2024].x * _1947) * ((_2074 * _2075) + _641)) * _2098) * _1988);
    float _2188 = (((((_2158 * _2077) + _643) * cbLight._m0[_2112].y) * _2177) * _1975) + ((((cbLight._m0[_2024].y * _1949) * ((_2074 * _2077) + _643)) * _2098) * _1988);
    float _2189 = (((((_2158 * _2078) + _644) * cbLight._m0[_2112].z) * _2177) * _1975) + ((((cbLight._m0[_2024].z * _1951) * ((_2074 * _2078) + _644)) * _2098) * _1988);
    float _2352;
    float _2354;
    float _2356;
    float _2358;
    float _2360;
    float _2362;
    if (_1956.y == 0u)
    {
        uvec4 _2307 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2308 = _2307.x;
        uint _2319 = uint((float(_2307.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2308))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2308)));
        float _2329 = (log2(_1734 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2330 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        uint _2333 = uint(isnan(14.0) ? _2330 : (isnan(_2330) ? 14.0 : min(_2330, 14.0)));
        uvec4 _2338 = texelFetch(g_lightClusterGridBuffer, int(((_2333 << 2u) + (_2319 << 6u)) >> 2u));
        uint _2339 = _2338.x;
        uint _2340 = _2307.z;
        float _2463;
        float _2465;
        float _2467;
        float _2469;
        float _2471;
        float _2473;
        if (((((1u << ((_2340 >> 4u) & 15u)) + 4294967295u) & _2339) == 0u) || ((_2340 & 240u) == 0u))
        {
            _2463 = 0.0;
            _2465 = 0.0;
            _2467 = 0.0;
            _2469 = 0.0;
            _2471 = 0.0;
            _2473 = 0.0;
        }
        else
        {
            float _2464;
            float _2466;
            float _2468;
            float _2470;
            float _2472;
            float _2474;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2333 << 5u) + (_2319 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2649)
                {
                    frontier_phi_66_pred = _2634;
                    frontier_phi_66_pred_1 = _2633;
                    frontier_phi_66_pred_2 = _2635;
                    frontier_phi_66_pred_3 = _2638;
                    frontier_phi_66_pred_4 = _2637;
                    frontier_phi_66_pred_5 = _2636;
                }
                else
                {
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    uint _2784;
                    _2778 = _2633;
                    _2779 = _2634;
                    _2780 = _2635;
                    _2781 = _2636;
                    _2782 = _2637;
                    _2783 = _2638;
                    _2784 = _2648;
                    float _2710;
                    float _2711;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    for (;;)
                    {
                        uint _2788 = uint(findLSB(_2784)) + (_2639 << 5u);
                        uint _2785 = (_2784 + 4294967295u) & _2784;
                        uint _2790 = _2788 * 48u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2790)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2790 + 3u)).x));
                        uint _2810 = (_2788 * 48u) + 4u;
                        vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 3u)).x));
                        uint _2829 = (_2788 * 48u) + 8u;
                        vec3 _2840 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2829)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2829 + 2u)).x));
                        float _2844 = _2804.x - _1732;
                        float _2845 = _2804.y - _1733;
                        float _2846 = _2804.z - _1734;
                        float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                        float _2850 = inversesqrt(_2847);
                        float _2851 = _2850 * _2844;
                        float _2852 = _2850 * _2845;
                        float _2853 = _2850 * _2846;
                        float _2854 = dot(vec3(_596, _599, _602), vec3(_2851, _2852, _2853));
                        float _2859 = 1.0 - (_2847 * _2804.w);
                        float _4061 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2860 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2861 = sqrt(_2847) * _2823.w;
                        float _2864 = 1.39999997615814208984375 / (_2861 + 1.39999997615814208984375);
                        float _2865 = _2864 * _2864;
                        float _2868 = ((1.0 - _2865) * _2854) + _2865;
                        float _2871 = _2861 * _2861;
                        float _2875 = ((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2860) / ((_2871 * 0.699999988079071044921875) + 1.0);
                        float _2879 = (-0.0) - _1732;
                        float _2880 = (-0.0) - _1733;
                        float _2881 = (-0.0) - _1734;
                        float _2885 = inversesqrt(dot(vec3(_2879, _2880, _2881), vec3(_2879, _2880, _2881)));
                        float _2886 = _2885 * _2879;
                        float _2887 = _2885 * _2880;
                        float _2888 = _2885 * _2881;
                        float _2895 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                        float _2896 = 1.0 - _672;
                        float _2903 = sqrt(1.0 - ((1.0 - (_2896 * _2896)) * (1.0 - (_2895 * _2895))));
                        float _2904 = _2903 * _2903;
                        float _2905 = _2904 * _2904;
                        float _2906 = _2886 + _2851;
                        float _2907 = _2887 + _2852;
                        float _2908 = _2888 + _2853;
                        float _2912 = inversesqrt(dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908)));
                        float _2916 = dot(vec3(_596, _599, _602), vec3(_2886, _2887, _2888));
                        float _4077 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2919 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2920 = dot(vec3(_596, _599, _602), vec3(_2912 * _2906, _2912 * _2907, _2912 * _2908));
                        float _4088 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2923 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                        float _2927 = ((_2923 * _2923) * (_2905 + (-1.0))) + 1.0;
                        float _2928 = _2864 * _2904;
                        float _2929 = _2928 * _2928;
                        float _2932 = ((1.0 - _2929) * _2854) + _2929;
                        float _4099 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
                        float _2933 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                        float _2934 = 1.0 - _2904;
                        float _2944 = (0.5 / (((_2933 * ((_2919 * _2934) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2933 * _2934) + _2904) * _2919))) * _2933;
                        float _4110 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
                        float _2955 = (((_2905 * 3.1415927410125732421875) * (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0)))) / ((_2927 * _2927) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125))) * _2860;
                        _2713 = (_2875 * _2823.x) + _2781;
                        _2714 = (_2875 * _2823.y) + _2782;
                        _2715 = (_2875 * _2823.z) + _2783;
                        _2710 = (_2955 * _2840.x) + _2778;
                        _2711 = (_2955 * _2840.y) + _2779;
                        _2712 = (_2955 * _2840.z) + _2780;
                        if (_2785 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2778 = _2710;
                            _2779 = _2711;
                            _2780 = _2712;
                            _2781 = _2713;
                            _2782 = _2714;
                            _2783 = _2715;
                            _2784 = _2785;
                        }
                    }
                    frontier_phi_66_pred = _2711;
                    frontier_phi_66_pred_1 = _2710;
                    frontier_phi_66_pred_2 = _2712;
                    frontier_phi_66_pred_3 = _2715;
                    frontier_phi_66_pred_4 = _2714;
                    frontier_phi_66_pred_5 = _2713;
                }
                _2466 = frontier_phi_66_pred;
                _2464 = frontier_phi_66_pred_1;
                _2468 = frontier_phi_66_pred_2;
                _2474 = frontier_phi_66_pred_3;
                _2472 = frontier_phi_66_pred_4;
                _2470 = frontier_phi_66_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2464;
                    _2634 = _2466;
                    _2635 = _2468;
                    _2636 = _2470;
                    _2637 = _2472;
                    _2638 = _2474;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2463 = _2464;
            _2465 = _2466;
            _2467 = _2468;
            _2469 = _2470;
            _2471 = _2472;
            _2473 = _2474;
        }
        uvec4 _2477 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2478 = _2477.z;
        uint _2480 = (_2478 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2480) & _2339) == 0u)
        {
            _2601 = _2463;
            _2603 = _2465;
            _2605 = _2467;
            _2607 = _2469;
            _2609 = _2471;
            _2611 = _2473;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
            float _2627 = _2626 * _1732;
            float _2628 = _2626 * _1733;
            float _2629 = _2626 * _1734;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2480 < ((_2478 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2761 = _2463;
                float _2762 = _2465;
                float _2763 = _2467;
                float _2764 = _2469;
                float _2765 = _2471;
                float _2766 = _2473;
                uint _2767 = _2480;
                uint _2776;
                bool _2777;
                for (;;)
                {
                    _2776 = texelFetch(g_lightClassification, int((((_2333 << 5u) + (_2319 << 9u)) + (_2767 << 2u)) >> 2u)).x;
                    _2777 = _2776 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2777)
                    {
                        frontier_phi_72_pred = _2762;
                        frontier_phi_72_pred_1 = _2761;
                        frontier_phi_72_pred_2 = _2766;
                        frontier_phi_72_pred_3 = _2765;
                        frontier_phi_72_pred_4 = _2764;
                        frontier_phi_72_pred_5 = _2763;
                    }
                    else
                    {
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _2973 = _2761;
                        float _2974 = _2762;
                        float _2975 = _2763;
                        float _2976 = _2764;
                        float _2977 = _2765;
                        float _2978 = _2766;
                        uint _2979 = _2776;
                        uint _2980;
                        vec4 _3005;
                        float _3006;
                        vec4 _3021;
                        vec3 _3033;
                        vec4 _3048;
                        vec4 _3063;
                        float _3109;
                        bool _3110;
                        for (;;)
                        {
                            uint _2990 = ((_2767 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2979));
                            _2980 = (_2979 + 4294967295u) & _2979;
                            uint _2992 = _2990 * 40u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            _3006 = _3005.w;
                            uint _3008 = (_2990 * 40u) + 4u;
                            _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3023 = (_2990 * 40u) + 8u;
                            _3033 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3023)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3023 + 2u)).x));
                            uint _3035 = (_2990 * 40u) + 16u;
                            _3048 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3035)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3035 + 3u)).x));
                            uint _3050 = (_2990 * 40u) + 20u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3065 = (_2990 * 40u) + 24u;
                            vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3084 = (_2990 * 40u) + 28u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            _3109 = fma(_1734, _3097.z, fma(_1733, _3097.y, _3097.x * _1732)) + _3097.w;
                            _3110 = !((fma(_1734, _3078.z, fma(_1733, _3078.y, _3078.x * _1732)) + _3078.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3110)
                            {
                                float _3137 = _3005.x - _1732;
                                float _3138 = _3005.y - _1733;
                                float _3139 = _3005.z - _1734;
                                float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                                float _3143 = inversesqrt(_3140);
                                float _3144 = _3143 * _3137;
                                float _3145 = _3143 * _3138;
                                float _3146 = _3143 * _3139;
                                float _3150 = 1.0 - (_3140 / (_3006 * _3006));
                                float _4121 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3155 = sqrt(_3140) * _3021.w;
                                float _3157 = 1.39999997615814208984375 / (_3155 + 1.39999997615814208984375);
                                float _3158 = _3157 * _3157;
                                float _3161 = ((1.0 - _3158) * dot(vec3(_3144, _3145, _3146), vec3(_596, _599, _602))) + _3158;
                                float _3164 = _3155 * _3155;
                                float _3168 = (fma(_1734, _3048.z, fma(_1733, _3048.y, _3048.x * _1732)) + _3048.w) / _3109;
                                float _3169 = (fma(_1734, _3063.z, fma(_1733, _3063.y, _3063.x * _1732)) + _3063.w) / _3109;
                                float _3173 = 1.0 - dot(vec2(_3168, _3169), vec2(_3168, _3169));
                                float _4137 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3174 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3175 = _3174 * (((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3151) / ((_3164 * 0.699999988079071044921875) + 1.0));
                                float _3187 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                                float _3188 = 1.0 - _672;
                                float _3195 = sqrt(1.0 - ((1.0 - (_3188 * _3188)) * (1.0 - (_3187 * _3187))));
                                float _3196 = _3195 * _3195;
                                float _3197 = _3196 * _3196;
                                float _3198 = _3144 - _2627;
                                float _3199 = _3145 - _2628;
                                float _3200 = _3146 - _2629;
                                float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                                float _3208 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4148 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3211 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3212 = dot(vec3(_596, _599, _602), vec3(_3204 * _3198, _3204 * _3199, _3204 * _3200));
                                float _4159 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3215 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                                float _3219 = ((_3215 * _3215) * (_3197 + (-1.0))) + 1.0;
                                float _3220 = _3157 * _3196;
                                float _3221 = _3220 * _3220;
                                float _3227 = ((1.0 - _3221) * dot(vec3(_596, _599, _602), vec3(_3144, _3145, _3146))) + _3221;
                                float _4170 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3228 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                                float _3229 = 1.0 - _3196;
                                float _3239 = (0.5 / (((_3228 * ((_3211 * _3229) + _3196)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3196) * _3211))) * _3228;
                                float _4181 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3249 = (_3174 * _3151) * (((_3197 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_3219 * _3219) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3249 * _3033.y;
                                frontier_phi_78_pred_1 = _3249 * _3033.x;
                                frontier_phi_78_pred_2 = _3175 * _3021.z;
                                frontier_phi_78_pred_3 = _3175 * _3021.y;
                                frontier_phi_78_pred_4 = _3175 * _3021.x;
                                frontier_phi_78_pred_5 = _3249 * _3033.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3254 = frontier_phi_78_pred;
                            _3253 = frontier_phi_78_pred_1;
                            _3258 = frontier_phi_78_pred_2;
                            _3257 = frontier_phi_78_pred_3;
                            _3256 = frontier_phi_78_pred_4;
                            _3255 = frontier_phi_78_pred_5;
                            _2963 = _3256 + _2976;
                            _2964 = _3257 + _2977;
                            _2965 = _3258 + _2978;
                            _2960 = _3253 + _2973;
                            _2961 = _3254 + _2974;
                            _2962 = _3255 + _2975;
                            if (_2980 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2973 = _2960;
                                _2974 = _2961;
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2980;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2961;
                        frontier_phi_72_pred_1 = _2960;
                        frontier_phi_72_pred_2 = _2965;
                        frontier_phi_72_pred_3 = _2964;
                        frontier_phi_72_pred_4 = _2963;
                        frontier_phi_72_pred_5 = _2962;
                    }
                    _2604 = frontier_phi_72_pred;
                    _2602 = frontier_phi_72_pred_1;
                    _2612 = frontier_phi_72_pred_2;
                    _2610 = frontier_phi_72_pred_3;
                    _2608 = frontier_phi_72_pred_4;
                    _2606 = frontier_phi_72_pred_5;
                    uint _2768 = _2767 + 1u;
                    if (_2768 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2761 = _2602;
                        _2762 = _2604;
                        _2763 = _2606;
                        _2764 = _2608;
                        _2765 = _2610;
                        _2766 = _2612;
                        _2767 = _2768;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2612;
                frontier_phi_59_60_ladder_1 = _2608;
                frontier_phi_59_60_ladder_2 = _2606;
                frontier_phi_59_60_ladder_3 = _2604;
                frontier_phi_59_60_ladder_4 = _2602;
                frontier_phi_59_60_ladder_5 = _2610;
            }
            else
            {
                frontier_phi_59_60_ladder = _2473;
                frontier_phi_59_60_ladder_1 = _2469;
                frontier_phi_59_60_ladder_2 = _2467;
                frontier_phi_59_60_ladder_3 = _2465;
                frontier_phi_59_60_ladder_4 = _2463;
                frontier_phi_59_60_ladder_5 = _2471;
            }
            _2601 = frontier_phi_59_60_ladder_4;
            _2603 = frontier_phi_59_60_ladder_3;
            _2605 = frontier_phi_59_60_ladder_2;
            _2607 = frontier_phi_59_60_ladder_1;
            _2609 = frontier_phi_59_60_ladder_5;
            _2611 = frontier_phi_59_60_ladder;
        }
        float _2616 = isnan(1.0) ? _656 : (isnan(_656) ? 1.0 : min(_656, 1.0));
        _2352 = (_2616 * _2607) + _2020;
        _2354 = (_2616 * _2609) + _2021;
        _2356 = (_2616 * _2611) + _2022;
        _2358 = ((_2601 * _641) * _2616) + _2187;
        _2360 = ((_2603 * _643) * _2616) + _2188;
        _2362 = ((_2605 * _644) * _2616) + _2189;
    }
    else
    {
        _2352 = _2020;
        _2354 = _2021;
        _2356 = _2022;
        _2358 = _2187;
        _2360 = _2188;
        _2362 = _2189;
    }
    uint _2368 = _617 + uint(cbMatDynParam._m0[0u].w);
    float _4197 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4208 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _4219 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2393 = (((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2352 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _656))) + ((_2358 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + (((_456 - (_456 * _290)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2368].x);
    float _2395 = ((((_457 - (_457 * _290)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2368].y) + ((_2360 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_2354 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _656)));
    float _2397 = (((cbMtdParam._m0[9u].z * (_458 - (_458 * _290))) * cbInstanceData._m0[_2368].z) + ((_2362 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1465)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_2356 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _656)));
    uint _2401 = _615 + 6u;
    float _2409 = _575 / cbSceneParam._m0[86u].x;
    float _2410 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2424 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2409, _2410, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2426 = _2424.x;
    float _2427 = _2424.y;
    float _2428 = _2424.z;
    float _2429 = _2424.w;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2488 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2489 = _2488 / _562;
        float _2500 = _2489 * _263;
        float _2501 = _264 * _2489;
        float _2502 = (-0.0) - _2501;
        float _2503 = _2489 * _265;
        float _2505 = (cbSceneParam._m0[77u].w * _2502) / _2488;
        float _2506 = _2505 + cbSceneParam._m0[79u].w;
        float _2507 = cbSceneParam._m0[79u].w - _2501;
        float _2513 = sqrt(((_2500 * _2500) + (_2501 * _2501)) + (_2503 * _2503));
        float _2516 = (1.0 - (cbSceneParam._m0[77u].w / _2488)) * _2513;
        float _2521 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2523 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2723;
        if (abs((_2502 - _2505) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2723 = ((((_2506 > 0.0) ? exp2(_2521 * _2506) : (2.0 - exp2(_2523 * _2506))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2516;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : max(_2506, _2507));
            float _2664 = isnan(_2507) ? _2506 : (isnan(_2506) ? _2507 : min(_2506, _2507));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2723 = ((abs(_2513 / _2502) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2521 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2521 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2523 * _2673) - exp2(_2523 * _2674)) * _2662))) + (_2516 * cbSceneParam._m0[80u].z);
        }
        vec4 _2725 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2409, _2410, 1.0), 0.0);
        float _2734 = exp2((_2723 * (-1.44269502162933349609375)) * (1.0 - _2725.w));
        float _2735 = log2(_2734);
        float _2751 = log2(_2429);
        _2525 = (exp2(_2751 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].x)) * _2725.x) / cbSceneParam._m0[78u].x)) + _2426;
        _2527 = (exp2(_2751 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].y)) * _2725.y) / cbSceneParam._m0[78u].y)) + _2427;
        _2529 = (exp2(_2751 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2735 * cbSceneParam._m0[78u].z)) * _2725.z) / cbSceneParam._m0[78u].z)) + _2428;
        _2531 = _2734 * _2429;
    }
    else
    {
        _2525 = _2426;
        _2527 = _2427;
        _2529 = _2428;
        _2531 = _2429;
    }
    float _2543 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2544 = _2543 == 3.0;
    float _2545 = log2(_2531);
    float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0)));
    float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0)));
    float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0)));
    float _2563 = (_2543 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2563 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2525)));
    SV_Target.y = _2563 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2527)));
    SV_Target.z = _2563 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2529)));
    SV_Target.w = cbInstanceData._m0[_2401].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2401].w;
}


