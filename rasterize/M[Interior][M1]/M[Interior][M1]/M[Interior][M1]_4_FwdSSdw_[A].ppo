#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1026;
float _3192;
float _3193;
float _3194;
float _3195;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    float _380 = (_356 > 0.0) ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_361 + (-0.5)) + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_362 + (-0.5)) + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    vec4 _448 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _450 = _448.x;
    vec4 _462 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _470 = (_462.x * 2.0) + (-1.0);
    float _472 = (_462.y * 2.0) + (-1.0);
    float _473 = dot(vec2(_470, _472), vec2(_470, _472));
    float _3214 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _478 = sqrt(1.0 - (isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))));
    float _479 = _462.z * _290;
    float _482 = fma(_478, _199, fma(_472, _206, _470 * _192));
    float _485 = fma(_478, _200, fma(_472, _207, _470 * _193));
    float _488 = fma(_478, _201, fma(_472, _208, _470 * _194));
    float _492 = inversesqrt(dot(vec3(_482, _485, _488), vec3(_482, _485, _488)));
    float _493 = _492 * _482;
    float _494 = _492 * _485;
    float _495 = _492 * _488;
    float _3225 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _496 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
    float _3236 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3247 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3258 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3269 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _500 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _516 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _520 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _521 = _263 * _520;
    float _522 = _264 * _520;
    float _523 = _265 * _520;
    vec4 _528 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _530 = _528.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _707 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _713 = (cbMatDynParam._m0[5u].x * _707) + cbMatDynParam._m0[5u].y;
        float _3280 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
        float _718 = (cbMatDynParam._m0[5u].z * _707) + cbMatDynParam._m0[5u].w;
        float _3291 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0))) - _714)) + _714) < ((_530 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _543 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _544 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _564 = fma(_495, cbSceneParam._m0[5u].z, fma(_494, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _493));
    float _567 = fma(_495, cbSceneParam._m0[6u].z, fma(_494, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _493));
    float _570 = fma(_495, cbSceneParam._m0[7u].z, fma(_494, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _493));
    uint _583 = uint(roundEven(NORMAL.w)) * 13u;
    uint _585 = _583 + 9u;
    uint _586 = _585 + uint(cbMatDynParam._m0[0u].w);
    float _592 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0)))) * cbInstanceData._m0[_586].x;
    float _593 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_586].y;
    float _594 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_586].z;
    float _3302 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _596 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _597 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _598 = 1.0 - _500;
    float _599 = _595 * _598;
    float _600 = _596 * _598;
    float _601 = _597 * _598;
    float _606 = (_595 + (-0.039999999105930328369140625)) * _500;
    float _607 = (_596 + (-0.039999999105930328369140625)) * _500;
    float _608 = (_597 + (-0.039999999105930328369140625)) * _500;
    float _609 = _606 + 0.039999999105930328369140625;
    float _611 = _607 + 0.039999999105930328369140625;
    float _612 = _608 + 0.039999999105930328369140625;
    vec4 _621 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _543, cbSceneParam._m0[86u].y * _544));
    float _624 = _621.x * TEXCOORD.z;
    float _625 = dot(vec3(_493, _494, _495), vec3(_521, _522, _523));
    float _628 = _625 * 2.0;
    float _632 = (_628 * _493) - _521;
    float _633 = (_628 * _494) - _522;
    float _634 = (_628 * _495) - _523;
    float _638 = abs(dot(vec3(_521, _522, _523), vec3(_493, _494, _495)));
    float _3335 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _640 = sqrt(_496);
    float _653 = exp2((_640 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_640 * 3.0));
    float _659 = (1.0 - _653) * ((_640 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _660 = _653 * _640;
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _692 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _696 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_696, cbModelParam._m0[26u].z, fma(_692, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _688));
        float _756 = fma(_696, cbModelParam._m0[27u].z, fma(_692, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _688));
        float _760 = fma(_696, cbModelParam._m0[28u].z, fma(_692, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _688));
        float _783 = _688 + _493;
        float _784 = _692 + _494;
        float _785 = _696 + _495;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _752;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _756;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _760;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_493, _494, _495), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3361 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3372 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3383 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_493, _494, _495), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3416 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_493, _494, _495), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3449 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1069 = fma(_696, cbModelParam._m0[30u].z, fma(_692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _688));
        float _1073 = fma(_696, cbModelParam._m0[31u].z, fma(_692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _688));
        float _1077 = fma(_696, cbModelParam._m0[32u].z, fma(_692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _688));
        float _1100 = _688 + _493;
        float _1101 = _692 + _494;
        float _1102 = _696 + _495;
        float _1112 = fma(_1102, cbModelParam._m0[30u].z, fma(_1101, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1100)) - _1069;
        float _1113 = fma(_1102, cbModelParam._m0[31u].z, fma(_1101, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1100)) - _1073;
        float _1114 = fma(_1102, cbModelParam._m0[32u].z, fma(_1101, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1100)) - _1077;
        float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
        float _1131 = ((_1118 * _1112) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1069 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1132 = ((_1118 * _1113) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1073 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1118 * _1114) / cbModelParam._m0[35u].z) + ((((((_1077 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1131, _1132, _1133), 0.0);
        float _1168 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1135.x + (-0.5));
        float _1170 = _1168 * (_1135.y + (-0.5));
        float _1171 = _1168 * (_1135.z + (-0.5));
        float _1178 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1142.x + (-0.5));
        float _1180 = _1178 * (_1142.y + (-0.5));
        float _1181 = _1178 * (_1142.z + (-0.5));
        float _1188 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1149.x + (-0.5));
        float _1190 = _1188 * (_1149.y + (-0.5));
        float _1191 = _1188 * (_1149.z + (-0.5));
        float _1198 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1156.x + (-0.5));
        float _1200 = _1198 * (_1156.y + (-0.5));
        float _1201 = _1198 * (_1156.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_493, _494, _495), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _3512 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1232 + 1.0))) + _1237) * _1202;
        float _1247 = _1170 * 0.5;
        float _1248 = _1180 * 0.5;
        float _1249 = _1190 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_493, _494, _495), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _3545 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1274 + 1.0))) + _1279) * _1203;
        float _1289 = _1171 * 0.5;
        float _1290 = _1181 * 0.5;
        float _1291 = _1191 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_493, _494, _495), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3578 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1316 + 1.0))) + _1321) * _1204;
        _1338 = _1171;
        _1339 = _1170;
        _1340 = _1169;
        _1341 = _1181;
        _1342 = _1180;
        _1343 = _1179;
        _1344 = _1191;
        _1345 = _1190;
        _1346 = _1189;
        _1347 = _1204;
        _1348 = _1203;
        _1349 = _1202;
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1351 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
        _1352 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
    }
    else
    {
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = _1026;
        _1348 = _1026;
        _1349 = _1026;
        _1350 = 0.0;
        _1351 = 0.0;
        _1352 = 0.0;
    }
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1363 = (cbModelParam._m0[1u].x * (_1351 - _1039)) + _1039;
    float _1364 = (cbModelParam._m0[1u].x * (_1352 - _1040)) + _1040;
    float _1385 = fma(_1364, cbSceneParam._m0[89u].z, fma(_1363, cbSceneParam._m0[89u].y, _1362 * cbSceneParam._m0[89u].x));
    float _1388 = fma(_1364, cbSceneParam._m0[90u].z, fma(_1363, cbSceneParam._m0[90u].y, _1362 * cbSceneParam._m0[90u].x));
    float _1391 = fma(_1364, cbSceneParam._m0[91u].z, fma(_1363, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1362));
    float _1406 = _632 * 0.5;
    float _1407 = _633 * 0.5;
    float _1408 = _634 * 0.5;
    float _1409 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1340, _1343, _1346, _1349));
    float _1412 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1339, _1342, _1345, _1348));
    float _1415 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1449;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1422 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1426 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1430 = dot(vec4(_1406, _1407, _1408, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1437 = dot(vec4(cbModelParam._m0[39u]), vec4(_1406, _1407, _1408, 1.0));
        _1449 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1449 = 1.0;
    }
    float _1460;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1451 = dot(vec4(cbModelParam._m0[40u]), vec4(_1406, _1407, _1408, 1.0));
        _1460 = dot(vec3(isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1451) ? 0.0 : (isnan(0.0) ? _1451 : max(0.0, _1451))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1460 = 1.0;
    }
    float _1464 = (_1460 * cbModelParam._m0[1u].x) + (_1449 * (1.0 - cbModelParam._m0[1u].x));
    float _1474 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _496);
    float _1475 = isnan(_1474) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1474 : min(cbModelParam._m0[25u].z, _1474));
    float _1556;
    float _1558;
    float _1560;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1523 = fma(_696, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688)) + cbModelParam._m0[13u].w;
        float _1527 = fma(_696, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688)) + cbModelParam._m0[14u].w;
        float _1531 = fma(_696, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688)) + cbModelParam._m0[15u].w;
        float _1534 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1537 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1540 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1568;
        if (_1534 > 0.0)
        {
            _1568 = abs((1.0 - _1523) / _1534);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1523 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1568 = frontier_phi_25_23_ladder;
        }
        float _1951;
        if (_1537 > 0.0)
        {
            _1951 = abs((1.0 - _1527) / _1537);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1527 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1951 = frontier_phi_34_30_ladder;
        }
        float _2275;
        if (_1540 > 0.0)
        {
            _2275 = abs((1.0 - _1531) / _1540);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1531 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2275 = frontier_phi_48_41_ladder;
        }
        float _2277 = isnan(_1951) ? _1568 : (isnan(_1568) ? _1951 : min(_1568, _1951));
        float _2278 = isnan(_2275) ? _2277 : (isnan(_2277) ? _2275 : min(_2277, _2275));
        float _2282 = (_2278 * _1534) + _1523;
        float _2283 = (_2278 * _1537) + _1527;
        float _2284 = (_2278 * _1540) + _1531;
        float _2285 = _2278 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2285;
        float _2288 = _2285 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2284 > _2288) || ((_2284 < _2286) || ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 < _2286) || (_2282 > _2288))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2284, cbModelParam._m0[9u].z, fma(_2283, cbModelParam._m0[9u].y, _2282 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2284, cbModelParam._m0[10u].z, fma(_2283, cbModelParam._m0[10u].y, _2282 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2284, cbModelParam._m0[11u].z, fma(_2283, cbModelParam._m0[11u].y, _2282 * cbModelParam._m0[11u].x))), _1475);
            frontier_phi_24_48_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1556 = frontier_phi_24_48_ladder_2;
        _1558 = frontier_phi_24_48_ladder_1;
        _1560 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1475);
        _1556 = _1544.x * cbModelParam._m0[1u].y;
        _1558 = _1544.y * cbModelParam._m0[1u].y;
        _1560 = _1544.z * cbModelParam._m0[1u].y;
    }
    float _1564 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _496);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1564 : min(cbModelParam._m0[25u].w, _1564));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1618 = fma(_696, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688)) + cbModelParam._m0[21u].w;
        float _1622 = fma(_696, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688)) + cbModelParam._m0[22u].w;
        float _1626 = fma(_696, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688)) + cbModelParam._m0[23u].w;
        float _1629 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1632 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1635 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1956;
        if (_1629 > 0.0)
        {
            _1956 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1956 = frontier_phi_36_32_ladder;
        }
        float _2301;
        if (_1632 > 0.0)
        {
            _2301 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2301 = frontier_phi_50_43_ladder;
        }
        float _2491;
        if (_1635 > 0.0)
        {
            _2491 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2491 = frontier_phi_68_61_ladder;
        }
        float _2493 = isnan(_2301) ? _1956 : (isnan(_1956) ? _2301 : min(_1956, _2301));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1629) + _1618;
        float _2499 = (_2494 * _1632) + _1622;
        float _2500 = (_2494 * _1635) + _1626;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1565);
            frontier_phi_33_68_ladder = _2742.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2742.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2742.x * cbModelParam._m0[1u].z;
        }
        _1654 = frontier_phi_33_68_ladder_2;
        _1656 = frontier_phi_33_68_ladder;
        _1658 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1565);
        _1654 = _1638.x * cbModelParam._m0[1u].z;
        _1656 = _1638.y * cbModelParam._m0[1u].z;
        _1658 = _1638.z * cbModelParam._m0[1u].z;
    }
    float _1671 = (((_659 * _609) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1654 - _1556)) + _1556);
    float _1673 = (((_659 * _611) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1675 = (((_659 * _612) + _660) * _624) * ((cbModelParam._m0[1u].w * (_1658 - _1560)) + _1560);
    float _1678 = fma(_1675, cbSceneParam._m0[89u].z, fma(_1673, cbSceneParam._m0[89u].y, _1671 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1675, cbSceneParam._m0[90u].z, fma(_1673, cbSceneParam._m0[90u].y, _1671 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1675, cbSceneParam._m0[91u].z, fma(_1673, cbSceneParam._m0[91u].y, _1671 * cbSceneParam._m0[91u].x));
    vec4 _1692 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_543, _544));
    float _1694 = _1692.w;
    float _1706 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1694);
    float _1707 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1694);
    float _1708 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1694);
    uvec4 _1712 = floatBitsToUint(cbInstanceData._m0[_583 + 5u]);
    uint _1714 = _1712.x * 14u;
    uint _1715 = _1714 + 13u;
    float _1720 = _624 + (-1.0);
    float _1723 = (cbLight._m0[_1715].x * _1720) + 1.0;
    float _1724 = (cbLight._m0[_1715].y * _1720) + 1.0;
    uint _1725 = _1714 + 5u;
    float _1731 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
    uint _1735 = _1714 + 4u;
    float _1744 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
    uint _1748 = _1714 | 1u;
    float _1759 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_493, _494, _495));
    float _1762 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_493, _494, _495));
    float _3714 = isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0));
    float _3725 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1767 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1769 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1776 = ((cbLight._m0[_1725].x * _1731) * _1769) + (((cbLight._m0[_1735].x * _1706) * _1744) * _1767);
    float _1777 = ((_1731 * cbLight._m0[_1725].y) * _1769) + (((cbLight._m0[_1735].y * _1707) * _1744) * _1767);
    float _1778 = ((_1731 * cbLight._m0[_1725].z) * _1769) + (((cbLight._m0[_1735].z * _1708) * _1744) * _1767);
    uint _1780 = _1714 + 8u;
    float _1793 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1714].w)) * _496) * 0.949999988079071044921875);
    float _1794 = _1793 * _1793;
    float _1795 = cbLight._m0[_1714].x + _521;
    float _1796 = cbLight._m0[_1714].y + _522;
    float _1797 = cbLight._m0[_1714].z + _523;
    float _1801 = inversesqrt(dot(vec3(_1795, _1796, _1797), vec3(_1795, _1796, _1797)));
    float _1802 = _1801 * _1795;
    float _1803 = _1801 * _1796;
    float _1804 = _1801 * _1797;
    float _1805 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1714].xyz));
    float _3736 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _1809 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1810 = dot(vec3(_493, _494, _495), vec3(_1802, _1803, _1804));
    float _3758 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _1814 = dot(vec3(cbLight._m0[_1714].xyz), vec3(_1802, _1803, _1804));
    float _3769 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
    float _1818 = _1794 * _1794;
    float _1822 = ((_1813 * _1813) * (_1818 + (-1.0))) + 1.0;
    float _1830 = exp2(log2(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * 5.0);
    float _1831 = 0.959999978542327880859375 - _606;
    float _1833 = 0.959999978542327880859375 - _607;
    float _1834 = 0.959999978542327880859375 - _608;
    float _1841 = 1.0 - _1794;
    float _1852 = (0.5 / (((_1809 * ((_1808 * _1841) + _1794)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1841) + _1794) * _1808))) * _1808;
    float _3780 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1818 / ((_1822 * _1822) * 3.141590118408203125));
    uint _1868 = _1714 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1748].w)) * _496) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1748].x + _521;
    float _1882 = cbLight._m0[_1748].y + _522;
    float _1883 = cbLight._m0[_1748].z + _523;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_493, _494, _495), vec3(cbLight._m0[_1748].xyz));
    float _3791 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1895 = dot(vec3(_493, _494, _495), vec3(_1888, _1889, _1890));
    float _3802 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1748].xyz), vec3(_1888, _1889, _1890));
    float _3813 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1914 = exp2(log2(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * 5.0);
    float _1921 = 1.0 - _1880;
    float _1931 = (0.5 / (((_1809 * ((_1894 * _1921) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1809 * _1921) + _1880) * _1894))) * _1894;
    float _3824 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1933 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1943 = (((((_1914 * _1831) + _609) * cbLight._m0[_1868].x) * _1933) * _1731) + ((((cbLight._m0[_1780].x * _1706) * ((_1830 * _1831) + _609)) * _1854) * _1744);
    float _1944 = (((((_1914 * _1833) + _611) * cbLight._m0[_1868].y) * _1933) * _1731) + ((((cbLight._m0[_1780].y * _1707) * ((_1830 * _1833) + _611)) * _1854) * _1744);
    float _1945 = (((((_1914 * _1834) + _612) * cbLight._m0[_1868].z) * _1933) * _1731) + ((((cbLight._m0[_1780].z * _1708) * ((_1830 * _1834) + _612)) * _1854) * _1744);
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    float _2068;
    float _2070;
    if (_1712.y == 0u)
    {
        float _2000 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2001 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2000;
        float _2002 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2000;
        float _2003 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2000;
        uvec4 _2015 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2016 = _2015.x;
        uint _2027 = uint((float(_2015.y) * floor(float(uint(cbSceneParam._m0[85u].y * _544) / _2016))) + floor(float(uint(cbSceneParam._m0[85u].x * _543) / _2016)));
        float _2037 = (log2(_2003 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2038 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        uint _2041 = uint(isnan(14.0) ? _2038 : (isnan(_2038) ? 14.0 : min(_2038, 14.0)));
        uvec4 _2046 = texelFetch(g_lightClusterGridBuffer, int(((_2041 << 2u) + (_2027 << 6u)) >> 2u));
        uint _2047 = _2046.x;
        uint _2048 = _2015.z;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        if (((((1u << ((_2048 >> 4u) & 15u)) + 4294967295u) & _2047) == 0u) || ((_2048 & 240u) == 0u))
        {
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
        }
        else
        {
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            uint _2344 = 0u;
            uint _2353;
            bool _2354;
            for (;;)
            {
                _2353 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2344 << 2u)) >> 2u)).x;
                _2354 = _2353 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2354)
                {
                    frontier_phi_63_pred = _2340;
                    frontier_phi_63_pred_1 = _2343;
                    frontier_phi_63_pred_2 = _2342;
                    frontier_phi_63_pred_3 = _2341;
                    frontier_phi_63_pred_4 = _2339;
                    frontier_phi_63_pred_5 = _2338;
                }
                else
                {
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    uint _2540;
                    _2534 = _2338;
                    _2535 = _2339;
                    _2536 = _2340;
                    _2537 = _2341;
                    _2538 = _2342;
                    _2539 = _2343;
                    _2540 = _2353;
                    float _2435;
                    float _2436;
                    float _2437;
                    float _2438;
                    float _2439;
                    float _2440;
                    for (;;)
                    {
                        uint _2544 = uint(findLSB(_2540)) + (_2344 << 5u);
                        uint _2541 = (_2540 + 4294967295u) & _2540;
                        uint _2546 = _2544 * 48u;
                        vec4 _2560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2546)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 3u)).x));
                        uint _2566 = (_2544 * 48u) + 4u;
                        vec4 _2579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 3u)).x));
                        uint _2585 = (_2544 * 48u) + 8u;
                        vec3 _2596 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2585)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 2u)).x));
                        float _2600 = _2560.x - _2001;
                        float _2601 = _2560.y - _2002;
                        float _2602 = _2560.z - _2003;
                        float _2603 = dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602));
                        float _2606 = inversesqrt(_2603);
                        float _2607 = _2606 * _2600;
                        float _2608 = _2606 * _2601;
                        float _2609 = _2606 * _2602;
                        float _2610 = dot(vec3(_564, _567, _570), vec3(_2607, _2608, _2609));
                        float _2615 = 1.0 - (_2603 * _2560.w);
                        float _3845 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2616 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2617 = sqrt(_2603) * _2579.w;
                        float _2620 = 1.39999997615814208984375 / (_2617 + 1.39999997615814208984375);
                        float _2621 = _2620 * _2620;
                        float _2624 = ((1.0 - _2621) * _2610) + _2621;
                        float _2627 = _2617 * _2617;
                        float _2631 = ((isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))) * _2616) / ((_2627 * 0.699999988079071044921875) + 1.0);
                        float _2635 = (-0.0) - _2001;
                        float _2636 = (-0.0) - _2002;
                        float _2637 = (-0.0) - _2003;
                        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
                        float _2642 = _2641 * _2635;
                        float _2643 = _2641 * _2636;
                        float _2644 = _2641 * _2637;
                        float _2652 = exp2(log2(1.0 / ((_2627 * 3.5) + 5.0)) * 0.25);
                        float _2653 = 1.0 - _640;
                        float _2660 = sqrt(1.0 - ((1.0 - (_2653 * _2653)) * (1.0 - (_2652 * _2652))));
                        float _2661 = _2660 * _2660;
                        float _2662 = _2661 * _2661;
                        float _2663 = _2642 + _2607;
                        float _2664 = _2643 + _2608;
                        float _2665 = _2644 + _2609;
                        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
                        float _2673 = dot(vec3(_564, _567, _570), vec3(_2642, _2643, _2644));
                        float _3861 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2676 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2677 = dot(vec3(_564, _567, _570), vec3(_2669 * _2663, _2669 * _2664, _2669 * _2665));
                        float _3872 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2680 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2684 = ((_2680 * _2680) * (_2662 + (-1.0))) + 1.0;
                        float _2685 = _2620 * _2661;
                        float _2686 = _2685 * _2685;
                        float _2689 = ((1.0 - _2686) * _2610) + _2686;
                        float _3883 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2691 = 1.0 - _2661;
                        float _2701 = (0.5 / (((_2690 * ((_2676 * _2691) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2691) + _2661) * _2676))) * _2690;
                        float _3894 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2712 = (((_2662 * 3.1415927410125732421875) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) / ((_2684 * _2684) * ((_2627 * 2.1991131305694580078125) + 3.141590118408203125))) * _2616;
                        _2438 = (_2631 * _2579.x) + _2537;
                        _2439 = (_2631 * _2579.y) + _2538;
                        _2440 = (_2631 * _2579.z) + _2539;
                        _2435 = (_2712 * _2596.x) + _2534;
                        _2436 = (_2712 * _2596.y) + _2535;
                        _2437 = (_2712 * _2596.z) + _2536;
                        if (_2541 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2534 = _2435;
                            _2535 = _2436;
                            _2536 = _2437;
                            _2537 = _2438;
                            _2538 = _2439;
                            _2539 = _2440;
                            _2540 = _2541;
                        }
                    }
                    frontier_phi_63_pred = _2437;
                    frontier_phi_63_pred_1 = _2440;
                    frontier_phi_63_pred_2 = _2439;
                    frontier_phi_63_pred_3 = _2438;
                    frontier_phi_63_pred_4 = _2436;
                    frontier_phi_63_pred_5 = _2435;
                }
                _2159 = frontier_phi_63_pred;
                _2165 = frontier_phi_63_pred_1;
                _2163 = frontier_phi_63_pred_2;
                _2161 = frontier_phi_63_pred_3;
                _2157 = frontier_phi_63_pred_4;
                _2155 = frontier_phi_63_pred_5;
                uint _2345 = _2344 + 1u;
                if (_2345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2338 = _2155;
                    _2339 = _2157;
                    _2340 = _2159;
                    _2341 = _2161;
                    _2342 = _2163;
                    _2343 = _2165;
                    _2344 = _2345;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
        }
        uvec4 _2168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2169 = _2168.z;
        uint _2171 = (_2169 >> 8u) & 15u;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((4294967295u << _2171) & _2047) == 0u)
        {
            _2306 = _2154;
            _2308 = _2156;
            _2310 = _2158;
            _2312 = _2160;
            _2314 = _2162;
            _2316 = _2164;
        }
        else
        {
            float _2331 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
            float _2332 = _2331 * _2001;
            float _2333 = _2331 * _2002;
            float _2334 = _2331 * _2003;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2171 < ((_2169 >> 12u) & 15u))
            {
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2517 = _2154;
                float _2518 = _2156;
                float _2519 = _2158;
                float _2520 = _2160;
                float _2521 = _2162;
                float _2522 = _2164;
                uint _2523 = _2171;
                uint _2532;
                bool _2533;
                for (;;)
                {
                    _2532 = texelFetch(g_lightClassification, int((((_2041 << 5u) + (_2027 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                    _2533 = _2532 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2533)
                    {
                        frontier_phi_77_pred = _2522;
                        frontier_phi_77_pred_1 = _2521;
                        frontier_phi_77_pred_2 = _2520;
                        frontier_phi_77_pred_3 = _2519;
                        frontier_phi_77_pred_4 = _2518;
                        frontier_phi_77_pred_5 = _2517;
                    }
                    else
                    {
                        float _2747;
                        float _2748;
                        float _2749;
                        float _2750;
                        float _2751;
                        float _2752;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _2760 = _2517;
                        float _2761 = _2518;
                        float _2762 = _2519;
                        float _2763 = _2520;
                        float _2764 = _2521;
                        float _2765 = _2522;
                        uint _2766 = _2532;
                        uint _2767;
                        vec4 _2792;
                        float _2793;
                        vec4 _2808;
                        vec3 _2820;
                        vec4 _2835;
                        vec4 _2851;
                        float _2897;
                        bool _2898;
                        for (;;)
                        {
                            uint _2777 = ((_2523 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2766));
                            _2767 = (_2766 + 4294967295u) & _2766;
                            uint _2779 = _2777 * 40u;
                            _2792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2779 + 3u)).x));
                            _2793 = _2792.w;
                            uint _2795 = (_2777 * 40u) + 4u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            uint _2810 = (_2777 * 40u) + 8u;
                            _2820 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x));
                            uint _2822 = (_2777 * 40u) + 16u;
                            _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2838 = (_2777 * 40u) + 20u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2777 * 40u) + 24u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2872 = (_2777 * 40u) + 28u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            _2897 = fma(_2003, _2885.z, fma(_2002, _2885.y, _2885.x * _2001)) + _2885.w;
                            _2898 = !((fma(_2003, _2866.z, fma(_2002, _2866.y, _2866.x * _2001)) + _2866.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2898)
                            {
                                float _2925 = _2792.x - _2001;
                                float _2926 = _2792.y - _2002;
                                float _2927 = _2792.z - _2003;
                                float _2928 = dot(vec3(_2925, _2926, _2927), vec3(_2925, _2926, _2927));
                                float _2931 = inversesqrt(_2928);
                                float _2932 = _2931 * _2925;
                                float _2933 = _2931 * _2926;
                                float _2934 = _2931 * _2927;
                                float _2938 = 1.0 - (_2928 / (_2793 * _2793));
                                float _3905 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                                float _2939 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2943 = sqrt(_2928) * _2808.w;
                                float _2945 = 1.39999997615814208984375 / (_2943 + 1.39999997615814208984375);
                                float _2946 = _2945 * _2945;
                                float _2949 = ((1.0 - _2946) * dot(vec3(_2932, _2933, _2934), vec3(_564, _567, _570))) + _2946;
                                float _2952 = _2943 * _2943;
                                float _2956 = (fma(_2003, _2835.z, fma(_2002, _2835.y, _2835.x * _2001)) + _2835.w) / _2897;
                                float _2957 = (fma(_2003, _2851.z, fma(_2002, _2851.y, _2851.x * _2001)) + _2851.w) / _2897;
                                float _2961 = 1.0 - dot(vec2(_2956, _2957), vec2(_2956, _2957));
                                float _3921 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2962 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2963 = _2962 * (((isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0))) * _2939) / ((_2952 * 0.699999988079071044921875) + 1.0));
                                float _2975 = exp2(log2(1.0 / ((_2952 * 3.5) + 5.0)) * 0.25);
                                float _2976 = 1.0 - _640;
                                float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                                float _2984 = _2983 * _2983;
                                float _2985 = _2984 * _2984;
                                float _2986 = _2932 - _2332;
                                float _2987 = _2933 - _2333;
                                float _2988 = _2934 - _2334;
                                float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                                float _2996 = dot(vec3(_564, _567, _570), vec3((-0.0) - _2332, (-0.0) - _2333, (-0.0) - _2334));
                                float _3932 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _2999 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _3000 = dot(vec3(_564, _567, _570), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                                float _3943 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3003 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                                float _3008 = _2945 * _2984;
                                float _3009 = _3008 * _3008;
                                float _3015 = ((1.0 - _3009) * dot(vec3(_564, _567, _570), vec3(_2932, _2933, _2934))) + _3009;
                                float _3954 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3016 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _3017 = 1.0 - _2984;
                                float _3027 = (0.5 / (((_3016 * ((_2999 * _3017) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2984) * _2999))) * _3016;
                                float _3965 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3037 = (_2962 * _2939) * (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) / ((_3007 * _3007) * ((_2952 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2963 * _2808.x;
                                frontier_phi_83_pred_1 = _2963 * _2808.z;
                                frontier_phi_83_pred_2 = _2963 * _2808.y;
                                frontier_phi_83_pred_3 = _3037 * _2820.z;
                                frontier_phi_83_pred_4 = _3037 * _2820.y;
                                frontier_phi_83_pred_5 = _3037 * _2820.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3044 = frontier_phi_83_pred;
                            _3046 = frontier_phi_83_pred_1;
                            _3045 = frontier_phi_83_pred_2;
                            _3043 = frontier_phi_83_pred_3;
                            _3042 = frontier_phi_83_pred_4;
                            _3041 = frontier_phi_83_pred_5;
                            _2750 = _3044 + _2763;
                            _2751 = _3045 + _2764;
                            _2752 = _3046 + _2765;
                            _2747 = _3041 + _2760;
                            _2748 = _3042 + _2761;
                            _2749 = _3043 + _2762;
                            if (_2767 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2749;
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2767;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2752;
                        frontier_phi_77_pred_1 = _2751;
                        frontier_phi_77_pred_2 = _2750;
                        frontier_phi_77_pred_3 = _2749;
                        frontier_phi_77_pred_4 = _2748;
                        frontier_phi_77_pred_5 = _2747;
                    }
                    _2317 = frontier_phi_77_pred;
                    _2315 = frontier_phi_77_pred_1;
                    _2313 = frontier_phi_77_pred_2;
                    _2311 = frontier_phi_77_pred_3;
                    _2309 = frontier_phi_77_pred_4;
                    _2307 = frontier_phi_77_pred_5;
                    uint _2524 = _2523 + 1u;
                    if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2517 = _2307;
                        _2518 = _2309;
                        _2519 = _2311;
                        _2520 = _2313;
                        _2521 = _2315;
                        _2522 = _2317;
                        _2523 = _2524;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2309;
                frontier_phi_52_53_ladder_1 = _2317;
                frontier_phi_52_53_ladder_2 = _2315;
                frontier_phi_52_53_ladder_3 = _2313;
                frontier_phi_52_53_ladder_4 = _2311;
                frontier_phi_52_53_ladder_5 = _2307;
            }
            else
            {
                frontier_phi_52_53_ladder = _2156;
                frontier_phi_52_53_ladder_1 = _2164;
                frontier_phi_52_53_ladder_2 = _2162;
                frontier_phi_52_53_ladder_3 = _2160;
                frontier_phi_52_53_ladder_4 = _2158;
                frontier_phi_52_53_ladder_5 = _2154;
            }
            _2306 = frontier_phi_52_53_ladder_5;
            _2308 = frontier_phi_52_53_ladder;
            _2310 = frontier_phi_52_53_ladder_4;
            _2312 = frontier_phi_52_53_ladder_3;
            _2314 = frontier_phi_52_53_ladder_2;
            _2316 = frontier_phi_52_53_ladder_1;
        }
        float _2321 = isnan(1.0) ? _624 : (isnan(_624) ? 1.0 : min(_624, 1.0));
        _2060 = (_2321 * _2312) + _1776;
        _2062 = (_2321 * _2314) + _1777;
        _2064 = (_2321 * _2316) + _1778;
        _2066 = ((_2306 * _609) * _2321) + _1943;
        _2068 = ((_2308 * _611) * _2321) + _1944;
        _2070 = ((_2310 * _612) * _2321) + _1945;
    }
    else
    {
        _2060 = _1776;
        _2062 = _1777;
        _2064 = _1778;
        _2066 = _1943;
        _2068 = _1944;
        _2070 = _1945;
    }
    uint _2076 = _585 + uint(cbMatDynParam._m0[0u].w);
    float _3981 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3992 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _4003 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _2101 = (((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2060 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _624))) + ((_2066 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + (((_420 - (_420 * _290)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2076].x);
    float _2103 = ((((_421 - (_421 * _290)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2076].y) + ((_2068 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2062 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _624)));
    float _2105 = (((cbMtdParam._m0[9u].z * (_422 - (_422 * _290))) * cbInstanceData._m0[_2076].z) + ((_2070 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _1464)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2064 + ((isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))) * _624)));
    float _2106 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2107 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2108 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    uint _2109 = _583 + 6u;
    float _2117 = _543 / cbSceneParam._m0[86u].x;
    float _2118 = _544 / cbSceneParam._m0[86u].y;
    vec4 _2132 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2117, _2118, (log2((isnan(cbSceneParam._m0[77u].w) ? _516 : (isnan(_516) ? cbSceneParam._m0[77u].w : min(_516, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2134 = _2132.x;
    float _2135 = _2132.y;
    float _2136 = _2132.z;
    float _2137 = _2132.w;
    float _2217;
    float _2219;
    float _2221;
    float _2223;
    if (_516 > cbSceneParam._m0[78u].w)
    {
        float _2179 = isnan(_516) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _516 : min(cbSceneParam._m0[80u].w, _516));
        float _2180 = _2179 / _516;
        float _2191 = _2180 * _263;
        float _2192 = _264 * _2180;
        float _2193 = (-0.0) - _2192;
        float _2194 = _2180 * _265;
        float _2196 = (cbSceneParam._m0[77u].w * _2193) / _2179;
        float _2197 = _2196 + cbSceneParam._m0[79u].w;
        float _2198 = cbSceneParam._m0[79u].w - _2192;
        float _2204 = sqrt(((_2191 * _2191) + (_2192 * _2192)) + (_2194 * _2194));
        float _2207 = (1.0 - (cbSceneParam._m0[77u].w / _2179)) * _2204;
        float _2213 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2215 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2448;
        if (abs((_2193 - _2196) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2448 = ((((_2197 > 0.0) ? exp2(_2213 * _2197) : (2.0 - exp2(_2215 * _2197))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2207;
        }
        else
        {
            float _2367 = 1.0 / cbSceneParam._m0[80u].x;
            float _2368 = isnan(_2198) ? _2197 : (isnan(_2197) ? _2198 : max(_2197, _2198));
            float _2369 = isnan(_2198) ? _2197 : (isnan(_2197) ? _2198 : min(_2197, _2198));
            float _2378 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : min(_2368, 0.0));
            float _2379 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : min(_2369, 0.0));
            _2448 = ((abs(_2204 / _2193) * cbSceneParam._m0[80u].y) * ((((_2378 - _2379) * 2.0) - ((exp2(_2213 * (isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0)))) - exp2(_2213 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))))) * _2367)) - ((exp2(_2215 * _2378) - exp2(_2215 * _2379)) * _2367))) + (_2207 * cbSceneParam._m0[80u].z);
        }
        vec4 _2450 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2117, _2118, 1.0), 0.0);
        float _2459 = exp2((_2448 * (-1.44269502162933349609375)) * (1.0 - _2450.w));
        float _2460 = log2(_2459);
        float _2476 = log2(_2137);
        _2217 = (exp2(_2476 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].x)) * _2450.x) / cbSceneParam._m0[78u].x)) + _2134;
        _2219 = (exp2(_2476 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].y)) * _2450.y) / cbSceneParam._m0[78u].y)) + _2135;
        _2221 = (exp2(_2476 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2460 * cbSceneParam._m0[78u].z)) * _2450.z) / cbSceneParam._m0[78u].z)) + _2136;
        _2223 = _2459 * _2137;
    }
    else
    {
        _2217 = _2134;
        _2219 = _2135;
        _2221 = _2136;
        _2223 = _2137;
    }
    bool _2486;
    vec4 _2233;
    vec4 _2255;
    float _2257;
    float _2261;
    float _2262;
    float _2263;
    float _2264;
    bool _2274;
    for (;;)
    {
        _2233 = cbMatDynParam._m0[0u];
        float _2235 = roundEven(_2233.y);
        bool _2236 = _2235 == 3.0;
        float _2237 = log2(_2223);
        float _2244 = exp2(_2237 * cbSceneParam._m0[78u].x) * _2106;
        float _2245 = exp2(_2237 * cbSceneParam._m0[78u].y) * _2107;
        float _2246 = exp2(_2237 * cbSceneParam._m0[78u].z) * _2108;
        float _2253 = _530 + (-0.5);
        _2255 = cbMtdParam._m0[1u];
        _2257 = _2255.y * _2253;
        float _2260 = (_2235 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2261 = _2260 * (_2236 ? _2244 : (_2244 + (cbSceneParam._m0[72u].w * _2217)));
        _2262 = _2260 * (_2236 ? _2245 : (_2245 + (cbSceneParam._m0[72u].w * _2219)));
        _2263 = _2260 * (_2236 ? _2246 : (_2246 + (cbSceneParam._m0[72u].w * _2221)));
        _2264 = _2253 * 0.999000012874603271484375;
        _2274 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2274)
        {
            if ((cbInstanceData._m0[_583 + 7u].x + _2264) < 0.5)
            {
                _2486 = true;
                break;
            }
        }
        uint _2402 = _585 + uint(_2233.w);
        if ((cbInstanceData._m0[_2402].w < 1.0) && ((cbInstanceData._m0[_2402].w + _2264) < 0.5))
        {
            _2486 = true;
            break;
        }
        if ((_2257 + 1.0) < _2255.x)
        {
            _2486 = true;
            break;
        }
        _2486 = false;
        break;
    }
    float _2717;
    if (_2486)
    {
        discard_state = true;
        _2717 = 0.0;
    }
    else
    {
        _2717 = cbInstanceData._m0[_2109].w;
    }
    SV_Target.x = _2261;
    SV_Target.y = _2262;
    SV_Target.z = _2263;
    SV_Target.w = _2717;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2109].w;
    discard_exit();
}


