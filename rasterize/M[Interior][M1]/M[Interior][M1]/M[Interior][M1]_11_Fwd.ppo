#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _751;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _171 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _172 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _177 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _184 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _188 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _246 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _236);
    float _247 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _236);
    float _248 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _236);
    float _274 = cbMtdParam._m0[22u].y + _246;
    float _275 = cbMtdParam._m0[22u].z + _247;
    float _276 = cbMtdParam._m0[22u].w + _248;
    float _293 = (-0.0) - dot(vec3(_274, _275, _276), vec3(_177 * _170, _177 * _171, _177 * _172));
    float _294 = (-0.0) - dot(vec3(_274, _275, _276), vec3(_188 * TANGENT.x, _188 * TANGENT.y, _188 * TANGENT.z));
    float _295 = (-0.0) - dot(vec3(_274, _275, _276), vec3((-0.0) - (NORMAL.x * _184), (-0.0) - (NORMAL.y * _184), (-0.0) - (NORMAL.z * _184)));
    float _299 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _300 = _299 * _295;
    float _302 = (cbMtdParam._m0[19u].x * _293) * _299;
    float _304 = (cbMtdParam._m0[18u].w * _294) * _299;
    float _305 = fract(TEXCOORD.x);
    float _306 = fract(TEXCOORD.y);
    float _312;
    if (_302 > 0.0)
    {
        _312 = (1.0 - _305) / _302;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_302 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _305) / _302;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _312 = frontier_phi_3_2_ladder;
    }
    float _320;
    if (_304 > 0.0)
    {
        _320 = (1.0 - _306) / _304;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _306) / _304;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _320 = frontier_phi_7_6_ladder;
    }
    float _324 = (_300 > 0.0) ? (cbMtdParam._m0[15u].x / _300) : 5000.0;
    float _325 = isnan(_320) ? _312 : (isnan(_312) ? _320 : min(_312, _320));
    float _326 = isnan(_324) ? _325 : (isnan(_325) ? _324 : min(_325, _324));
    float _330 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = ((_326 * _300) + _330) / _330;
    vec4 _363 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_305 + (-0.5)) + (_326 * _302)) / _337) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_306 + (-0.5)) + (_326 * _304)) / _337) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _374 = cbMtdParam._m0[9u].x * _363.x;
    float _375 = cbMtdParam._m0[9u].y * _363.y;
    float _376 = cbMtdParam._m0[9u].z * _363.z;
    float _2641 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _2652 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _2663 = isnan(0.0) ? _376 : (isnan(_376) ? 0.0 : max(_376, 0.0));
    float _395 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _399 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _400 = _246 * _399;
    float _401 = _247 * _399;
    float _402 = _248 * _399;
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2652 : (isnan(_2652) ? 1.0 : min(_2652, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0)))) * cbInstanceData._m0[_425].z;
    float _2674 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0));
    float _2685 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0));
    float _2696 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0));
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _448 = _445.x * TEXCOORD.z;
    float _449 = (-0.0) - _400;
    float _450 = (-0.0) - _401;
    float _451 = (-0.0) - _402;
    float _473 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _750;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = (cbModelParam._m0[37u].x * ((((fma(_481, cbModelParam._m0[26u].z, fma(_477, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _473)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _539 = (cbModelParam._m0[37u].y * ((((fma(_481, cbModelParam._m0[27u].z, fma(_477, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _473)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _540 = (((((fma(_481, cbModelParam._m0[28u].z, fma(_477, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _473)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_537, _539, _540), 0.0);
        float _577 = exp2((_543.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _577 * (_543.x + (-0.5));
        float _580 = _577 * (_543.y + (-0.5));
        float _581 = _577 * (_543.z + (-0.5));
        float _588 = exp2((_550.w + (-0.5)) * 20.0) * 2.0;
        float _589 = _588 * (_550.x + (-0.5));
        float _590 = _588 * (_550.y + (-0.5));
        float _591 = _588 * (_550.z + (-0.5));
        float _598 = exp2((_557.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_557.x + (-0.5));
        float _600 = _598 * (_557.y + (-0.5));
        float _601 = _598 * (_557.z + (-0.5));
        float _608 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_564.x + (-0.5));
        float _610 = _608 * (_564.y + (-0.5));
        float _611 = _608 * (_564.z + (-0.5));
        float _612 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
        float _613 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
        float _614 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _615 = _579 * 0.5;
        float _616 = _589 * 0.5;
        float _617 = _599 * 0.5;
        float _618 = dot(vec3(_615, _616, _617), vec3(_615, _616, _617));
        float _623 = (_618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_618);
        float _632 = (dot(vec3(0.0), vec3(_623 * _615, _623 * _616, _623 * _617)) + 1.0) * 0.5;
        float _2722 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _642 = sqrt(((_616 * _616) + (_615 * _615)) + (_617 * _617)) / (_612 + 9.9999997473787516355514526367188e-06);
        float _2733 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
        float _643 = isnan(1.0) ? _2733 : (isnan(_2733) ? 1.0 : min(_2733, 1.0));
        float _644 = _643 * 2.0;
        float _648 = (1.0 - _643) / (_643 + 1.0);
        float _2744 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _649 = isnan(1.0) ? _2744 : (isnan(_2744) ? 1.0 : min(_2744, 1.0));
        float _658 = ((((1.0 - _649) * (_644 + 2.0)) * exp2(log2(isnan(1.0) ? _2722 : (isnan(_2722) ? 1.0 : min(_2722, 1.0))) * (_644 + 1.0))) + _649) * _612;
        float _659 = _580 * 0.5;
        float _660 = _590 * 0.5;
        float _661 = _600 * 0.5;
        float _662 = dot(vec3(_659, _660, _661), vec3(_659, _660, _661));
        float _667 = (_662 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_662);
        float _675 = (dot(vec3(0.0), vec3(_667 * _659, _667 * _660, _667 * _661)) + 1.0) * 0.5;
        float _2755 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        float _684 = sqrt(((_660 * _660) + (_659 * _659)) + (_661 * _661)) / (_613 + 9.9999997473787516355514526367188e-06);
        float _2766 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _685 = isnan(1.0) ? _2766 : (isnan(_2766) ? 1.0 : min(_2766, 1.0));
        float _686 = _685 * 2.0;
        float _690 = (1.0 - _685) / (_685 + 1.0);
        float _2777 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _691 = isnan(1.0) ? _2777 : (isnan(_2777) ? 1.0 : min(_2777, 1.0));
        float _700 = ((((1.0 - _691) * (_686 + 2.0)) * exp2(log2(isnan(1.0) ? _2755 : (isnan(_2755) ? 1.0 : min(_2755, 1.0))) * (_686 + 1.0))) + _691) * _613;
        float _701 = _581 * 0.5;
        float _702 = _591 * 0.5;
        float _703 = _601 * 0.5;
        float _704 = dot(vec3(_701, _702, _703), vec3(_701, _702, _703));
        float _709 = (_704 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_704);
        float _717 = (dot(vec3(0.0), vec3(_709 * _701, _709 * _702, _709 * _703)) + 1.0) * 0.5;
        float _2788 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _726 = sqrt(((_702 * _702) + (_701 * _701)) + (_703 * _703)) / (_614 + 9.9999997473787516355514526367188e-06);
        float _2799 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0));
        float _728 = _727 * 2.0;
        float _732 = (1.0 - _727) / (_727 + 1.0);
        float _2810 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _733 = isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0));
        float _742 = ((((1.0 - _733) * (_728 + 2.0)) * exp2(log2(isnan(1.0) ? _2788 : (isnan(_2788) ? 1.0 : min(_2788, 1.0))) * (_728 + 1.0))) + _733) * _614;
        _750 = _581;
        _752 = _580;
        _753 = _579;
        _754 = _591;
        _755 = _590;
        _756 = _589;
        _757 = _601;
        _758 = _600;
        _759 = _599;
        _760 = _614;
        _761 = _613;
        _762 = _612;
        _763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0)));
        _764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0)));
        _765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0)));
    }
    else
    {
        _750 = _751;
        _752 = _751;
        _753 = _751;
        _754 = _751;
        _755 = _751;
        _756 = _751;
        _757 = _751;
        _758 = _751;
        _759 = _751;
        _760 = _751;
        _761 = _751;
        _762 = _751;
        _763 = 0.0;
        _764 = 0.0;
        _765 = 0.0;
    }
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _819 = (cbModelParam._m0[38u].x * ((((fma(_481, cbModelParam._m0[30u].z, fma(_477, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _473)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _820 = (cbModelParam._m0[38u].y * ((((fma(_481, cbModelParam._m0[31u].z, fma(_477, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _473)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _821 = (((((fma(_481, cbModelParam._m0[32u].z, fma(_477, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _473)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _856 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_823.x + (-0.5));
        float _858 = _856 * (_823.y + (-0.5));
        float _859 = _856 * (_823.z + (-0.5));
        float _866 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _867 = _866 * (_830.x + (-0.5));
        float _868 = _866 * (_830.y + (-0.5));
        float _869 = _866 * (_830.z + (-0.5));
        float _876 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_837.x + (-0.5));
        float _878 = _876 * (_837.y + (-0.5));
        float _879 = _876 * (_837.z + (-0.5));
        float _886 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_844.x + (-0.5));
        float _888 = _886 * (_844.y + (-0.5));
        float _889 = _886 * (_844.z + (-0.5));
        float _890 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _891 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = _857 * 0.5;
        float _894 = _867 * 0.5;
        float _895 = _877 * 0.5;
        float _896 = dot(vec3(_893, _894, _895), vec3(_893, _894, _895));
        float _901 = (_896 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_896);
        float _909 = (dot(vec3(0.0), vec3(_901 * _893, _901 * _894, _901 * _895)) + 1.0) * 0.5;
        float _2851 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _918 = sqrt(((_894 * _894) + (_893 * _893)) + (_895 * _895)) / (_890 + 9.9999997473787516355514526367188e-06);
        float _2862 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0));
        float _920 = _919 * 2.0;
        float _924 = (1.0 - _919) / (_919 + 1.0);
        float _2873 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _2873 : (isnan(_2873) ? 1.0 : min(_2873, 1.0));
        float _934 = ((((1.0 - _925) * (_920 + 2.0)) * exp2(log2(isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0))) * (_920 + 1.0))) + _925) * _890;
        float _935 = _858 * 0.5;
        float _936 = _868 * 0.5;
        float _937 = _878 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _951 = (dot(vec3(0.0), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _2884 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _960 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_891 + 9.9999997473787516355514526367188e-06);
        float _2895 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _2906 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _2906 : (isnan(_2906) ? 1.0 : min(_2906, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _2884 : (isnan(_2884) ? 1.0 : min(_2884, 1.0))) * (_962 + 1.0))) + _967) * _891;
        float _977 = _859 * 0.5;
        float _978 = _869 * 0.5;
        float _979 = _879 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(0.0), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _2917 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _2928 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _2939 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0))) * (_1004 + 1.0))) + _1009) * _892;
        _1026 = _859;
        _1027 = _858;
        _1028 = _857;
        _1029 = _869;
        _1030 = _868;
        _1031 = _867;
        _1032 = _879;
        _1033 = _878;
        _1034 = _877;
        _1035 = _892;
        _1036 = _891;
        _1037 = _890;
        _1038 = cbModelParam._m0[36u].w * (isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0)));
        _1039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
    }
    else
    {
        _1026 = _751;
        _1027 = _751;
        _1028 = _751;
        _1029 = _751;
        _1030 = _751;
        _1031 = _751;
        _1032 = _751;
        _1033 = _751;
        _1034 = _751;
        _1035 = _751;
        _1036 = _751;
        _1037 = _751;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1050 = (cbModelParam._m0[1u].x * (_1038 - _763)) + _763;
    float _1051 = (cbModelParam._m0[1u].x * (_1039 - _764)) + _764;
    float _1052 = (cbModelParam._m0[1u].x * (_1040 - _765)) + _765;
    float _1073 = fma(_1052, cbSceneParam._m0[89u].z, fma(_1051, cbSceneParam._m0[89u].y, _1050 * cbSceneParam._m0[89u].x));
    float _1076 = fma(_1052, cbSceneParam._m0[90u].z, fma(_1051, cbSceneParam._m0[90u].y, _1050 * cbSceneParam._m0[90u].x));
    float _1079 = fma(_1052, cbSceneParam._m0[91u].z, fma(_1051, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1050));
    float _1094 = _400 * (-0.5);
    float _1095 = _401 * (-0.5);
    float _1096 = _402 * (-0.5);
    float _1097 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_1028, _1031, _1034, _1037));
    float _1100 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_1027, _1030, _1033, _1036));
    float _1103 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_1026, _1029, _1032, _1035));
    float _1137;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1110 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_750, _754, _757, _760));
        float _1114 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_752, _755, _758, _761));
        float _1118 = dot(vec4(_1094, _1095, _1096, 1.0), vec4(_753, _756, _759, _762));
        float _1125 = dot(vec4(cbModelParam._m0[39u]), vec4(_1094, _1095, _1096, 1.0));
        _1137 = dot(vec3(isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)), isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)), isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1125) ? 0.0 : (isnan(0.0) ? _1125 : max(0.0, _1125))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1137 = 1.0;
    }
    float _1148;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1139 = dot(vec4(cbModelParam._m0[40u]), vec4(_1094, _1095, _1096, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)), isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0)), isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1152 = (_1148 * cbModelParam._m0[1u].x) + (_1137 * (1.0 - cbModelParam._m0[1u].x));
    float _1161 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1243;
    float _1245;
    float _1247;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1210 = fma(_481, cbModelParam._m0[13u].z, fma(_477, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473)) + cbModelParam._m0[13u].w;
        float _1214 = fma(_481, cbModelParam._m0[14u].z, fma(_477, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473)) + cbModelParam._m0[14u].w;
        float _1218 = fma(_481, cbModelParam._m0[15u].z, fma(_477, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473)) + cbModelParam._m0[15u].w;
        float _1221 = fma(_451, cbModelParam._m0[13u].z, fma(_450, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _449));
        float _1224 = fma(_451, cbModelParam._m0[14u].z, fma(_450, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _449));
        float _1227 = fma(_451, cbModelParam._m0[15u].z, fma(_450, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _449));
        float _1253;
        if (_1221 > 0.0)
        {
            _1253 = abs((1.0 - _1210) / _1221);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1221 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1210 + 1.0) / _1221);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1253 = frontier_phi_22_20_ladder;
        }
        float _1551;
        if (_1224 > 0.0)
        {
            _1551 = abs((1.0 - _1214) / _1224);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1224 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1214 + 1.0) / _1224);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1551 = frontier_phi_31_27_ladder;
        }
        float _1854;
        if (_1227 > 0.0)
        {
            _1854 = abs((1.0 - _1218) / _1227);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1227 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1218 + 1.0) / _1227);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1854 = frontier_phi_45_38_ladder;
        }
        float _1856 = isnan(_1551) ? _1253 : (isnan(_1253) ? _1551 : min(_1253, _1551));
        float _1857 = isnan(_1854) ? _1856 : (isnan(_1856) ? _1854 : min(_1856, _1854));
        float _1861 = (_1857 * _1221) + _1210;
        float _1862 = (_1857 * _1224) + _1214;
        float _1863 = (_1857 * _1227) + _1218;
        float _1864 = _1857 * 9.9999997473787516355514526367188e-05;
        float _1865 = (-1.0) - _1864;
        float _1867 = _1864 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1863 > _1867) || ((_1863 < _1865) || ((_1862 > _1867) || ((_1862 < _1865) || ((_1861 < _1865) || (_1861 > _1867))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1986 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1863, cbModelParam._m0[9u].z, fma(_1862, cbModelParam._m0[9u].y, _1861 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1863, cbModelParam._m0[10u].z, fma(_1862, cbModelParam._m0[10u].y, _1861 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1863, cbModelParam._m0[11u].z, fma(_1862, cbModelParam._m0[11u].y, _1861 * cbModelParam._m0[11u].x))), _1161);
            frontier_phi_21_45_ladder = _1986.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1986.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1986.x * cbModelParam._m0[1u].y;
        }
        _1243 = frontier_phi_21_45_ladder_2;
        _1245 = frontier_phi_21_45_ladder_1;
        _1247 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_449, _450, _451), _1161);
        _1243 = _1231.x * cbModelParam._m0[1u].y;
        _1245 = _1231.y * cbModelParam._m0[1u].y;
        _1247 = _1231.z * cbModelParam._m0[1u].y;
    }
    float _1250 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1339;
    float _1341;
    float _1343;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1303 = fma(_481, cbModelParam._m0[21u].z, fma(_477, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473)) + cbModelParam._m0[21u].w;
        float _1307 = fma(_481, cbModelParam._m0[22u].z, fma(_477, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473)) + cbModelParam._m0[22u].w;
        float _1311 = fma(_481, cbModelParam._m0[23u].z, fma(_477, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473)) + cbModelParam._m0[23u].w;
        float _1314 = fma(_451, cbModelParam._m0[21u].z, fma(_450, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _449));
        float _1317 = fma(_451, cbModelParam._m0[22u].z, fma(_450, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _449));
        float _1320 = fma(_451, cbModelParam._m0[23u].z, fma(_450, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _449));
        float _1556;
        if (_1314 > 0.0)
        {
            _1556 = abs((1.0 - _1303) / _1314);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1303 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1556 = frontier_phi_33_29_ladder;
        }
        float _1880;
        if (_1317 > 0.0)
        {
            _1880 = abs((1.0 - _1307) / _1317);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1307 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1880 = frontier_phi_47_40_ladder;
        }
        float _2046;
        if (_1320 > 0.0)
        {
            _2046 = abs((1.0 - _1311) / _1320);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1311 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2046 = frontier_phi_61_56_ladder;
        }
        float _2048 = isnan(_1880) ? _1556 : (isnan(_1556) ? _1880 : min(_1556, _1880));
        float _2049 = isnan(_2046) ? _2048 : (isnan(_2048) ? _2046 : min(_2048, _2046));
        float _2053 = (_2049 * _1314) + _1303;
        float _2054 = (_2049 * _1317) + _1307;
        float _2055 = (_2049 * _1320) + _1311;
        float _2056 = _2049 * 9.9999997473787516355514526367188e-05;
        float _2057 = (-1.0) - _2056;
        float _2059 = _2056 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2055 > _2059) || ((_2055 < _2057) || ((_2054 > _2059) || ((_2054 < _2057) || ((_2053 < _2057) || (_2053 > _2059))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2238 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2055, cbModelParam._m0[17u].z, fma(_2054, cbModelParam._m0[17u].y, _2053 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2055, cbModelParam._m0[18u].z, fma(_2054, cbModelParam._m0[18u].y, _2053 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2055, cbModelParam._m0[19u].z, fma(_2054, cbModelParam._m0[19u].y, _2053 * cbModelParam._m0[19u].x))), _1250);
            frontier_phi_30_61_ladder = _2238.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2238.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2238.x * cbModelParam._m0[1u].z;
        }
        _1339 = frontier_phi_30_61_ladder_2;
        _1341 = frontier_phi_30_61_ladder_1;
        _1343 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1323 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_449, _450, _451), _1250);
        _1339 = _1323.x * cbModelParam._m0[1u].z;
        _1341 = _1323.y * cbModelParam._m0[1u].z;
        _1343 = _1323.z * cbModelParam._m0[1u].z;
    }
    float _1355 = _448 * 0.01200000010430812835693359375;
    float _1357 = _1355 * ((cbModelParam._m0[1u].w * (_1339 - _1243)) + _1243);
    float _1358 = _1355 * ((cbModelParam._m0[1u].w * (_1341 - _1245)) + _1245);
    float _1359 = _1355 * ((cbModelParam._m0[1u].w * (_1343 - _1247)) + _1247);
    float _1362 = fma(_1359, cbSceneParam._m0[89u].z, fma(_1358, cbSceneParam._m0[89u].y, _1357 * cbSceneParam._m0[89u].x));
    float _1365 = fma(_1359, cbSceneParam._m0[90u].z, fma(_1358, cbSceneParam._m0[90u].y, _1357 * cbSceneParam._m0[90u].x));
    float _1368 = fma(_1359, cbSceneParam._m0[91u].z, fma(_1358, cbSceneParam._m0[91u].y, _1357 * cbSceneParam._m0[91u].x));
    uvec4 _1379 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1381 = _1379.x * 14u;
    uint _1382 = _1381 + 13u;
    float _1387 = _448 + (-1.0);
    float _1391 = (cbLight._m0[_1382].x * _1387) + 1.0;
    float _1392 = (cbLight._m0[_1382].y * _1387) + 1.0;
    uint _1393 = _1381 + 5u;
    float _1399 = isnan(1.0) ? _1392 : (isnan(_1392) ? 1.0 : min(_1392, 1.0));
    uint _1403 = _1381 + 4u;
    float _1409 = isnan(1.0) ? _1391 : (isnan(_1391) ? 1.0 : min(_1391, 1.0));
    uint _1413 = _1381 | 1u;
    float _1424 = dot(vec3(cbLight._m0[_1381].xyz), vec3(0.0));
    float _1427 = dot(vec3(cbLight._m0[_1413].xyz), vec3(0.0));
    float _3075 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _3086 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
    float _1432 = (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) * 0.3183098733425140380859375;
    float _1434 = (isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) * 0.3183098733425140380859375;
    float _1441 = ((cbLight._m0[_1393].x * _1399) * _1434) + ((cbLight._m0[_1403].x * _1409) * _1432);
    float _1442 = ((_1399 * cbLight._m0[_1393].y) * _1434) + ((_1409 * cbLight._m0[_1403].y) * _1432);
    float _1443 = ((_1399 * cbLight._m0[_1393].z) * _1434) + ((_1409 * cbLight._m0[_1403].z) * _1432);
    uint _1444 = _1381 + 8u;
    float _1450 = cbLight._m0[_1381].x + _400;
    float _1451 = cbLight._m0[_1381].y + _401;
    float _1452 = cbLight._m0[_1381].z + _402;
    float _1456 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
    float _1460 = dot(vec3(0.0), vec3(cbLight._m0[_1381].xyz));
    float _3097 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
    float _1463 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
    float _1464 = dot(vec3(0.0), vec3(_400, _401, _402));
    float _3108 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
    float _1467 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
    float _1468 = dot(vec3(cbLight._m0[_1381].xyz), vec3(_1450 * _1456, _1451 * _1456, _1452 * _1456));
    float _3119 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
    float _1479 = (exp2(log2(1.0 - (isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1485 = (0.5 / ((_1463 + 9.9999999392252902907785028219223e-09) + _1467)) * _1463;
    float _3130 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
    float _1487 = (isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0))) * 0.31831014156341552734375;
    uint _1498 = _1381 + 9u;
    float _1504 = cbLight._m0[_1413].x + _400;
    float _1505 = cbLight._m0[_1413].y + _401;
    float _1506 = cbLight._m0[_1413].z + _402;
    float _1510 = inversesqrt(dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506)));
    float _1514 = dot(vec3(0.0), vec3(cbLight._m0[_1413].xyz));
    float _3141 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
    float _1517 = isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0));
    float _1518 = dot(vec3(cbLight._m0[_1413].xyz), vec3(_1504 * _1510, _1505 * _1510, _1506 * _1510));
    float _3152 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1527 = (exp2(log2(1.0 - (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1531 = (0.5 / ((_1517 + 9.9999999392252902907785028219223e-09) + _1467)) * _1517;
    float _3163 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
    float _1533 = (isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * 0.31831014156341552734375;
    float _1543 = (((_1527 * cbLight._m0[_1498].x) * _1533) * _1399) + (((_1479 * cbLight._m0[_1444].x) * _1487) * _1409);
    float _1544 = (((_1527 * cbLight._m0[_1498].y) * _1533) * _1399) + (((_1479 * cbLight._m0[_1444].y) * _1487) * _1409);
    float _1545 = (((_1527 * cbLight._m0[_1498].z) * _1533) * _1399) + (((_1479 * cbLight._m0[_1444].z) * _1487) * _1409);
    float _1662;
    float _1664;
    float _1666;
    float _1668;
    float _1670;
    float _1672;
    if (_1379.y == 0u)
    {
        float _1601 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1602 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1601;
        float _1603 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1601;
        float _1604 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1601;
        uvec4 _1616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1617 = _1616.x;
        uint _1628 = uint((float(_1616.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _1617))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _1617)));
        float _1638 = (log2(_1604 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1639 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        uint _1642 = uint(isnan(14.0) ? _1639 : (isnan(_1639) ? 14.0 : min(_1639, 14.0)));
        uvec4 _1648 = texelFetch(g_lightClusterGridBuffer, int(((_1642 << 2u) + (_1628 << 6u)) >> 2u));
        uint _1649 = _1648.x;
        uint _1650 = _1616.z;
        float _1740;
        float _1742;
        float _1744;
        float _1746;
        float _1748;
        float _1750;
        if (((((1u << ((_1650 >> 4u) & 15u)) + 4294967295u) & _1649) == 0u) || ((_1650 & 240u) == 0u))
        {
            _1740 = 0.0;
            _1742 = 0.0;
            _1744 = 0.0;
            _1746 = 0.0;
            _1748 = 0.0;
            _1750 = 0.0;
        }
        else
        {
            float _1741;
            float _1743;
            float _1745;
            float _1747;
            float _1749;
            float _1751;
            float _1914 = 0.0;
            float _1915 = 0.0;
            float _1916 = 0.0;
            float _1917 = 0.0;
            float _1918 = 0.0;
            float _1919 = 0.0;
            uint _1920 = 0u;
            uint _1929;
            bool _1930;
            for (;;)
            {
                _1929 = texelFetch(g_lightClassification, int((((_1642 << 5u) + (_1628 << 9u)) + (_1920 << 2u)) >> 2u)).x;
                _1930 = _1929 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_1930)
                {
                    frontier_phi_58_pred = _1915;
                    frontier_phi_58_pred_1 = _1919;
                    frontier_phi_58_pred_2 = _1918;
                    frontier_phi_58_pred_3 = _1917;
                    frontier_phi_58_pred_4 = _1916;
                    frontier_phi_58_pred_5 = _1914;
                }
                else
                {
                    float _2089;
                    float _2090;
                    float _2091;
                    float _2092;
                    float _2093;
                    float _2094;
                    uint _2095;
                    _2089 = _1914;
                    _2090 = _1915;
                    _2091 = _1916;
                    _2092 = _1917;
                    _2093 = _1918;
                    _2094 = _1919;
                    _2095 = _1929;
                    float _1995;
                    float _1996;
                    float _1997;
                    float _1998;
                    float _1999;
                    float _2000;
                    for (;;)
                    {
                        uint _2099 = uint(findLSB(_2095)) + (_1920 << 5u);
                        uint _2096 = (_2095 + 4294967295u) & _2095;
                        uint _2101 = _2099 * 48u;
                        vec4 _2115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2101)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2101 + 3u)).x));
                        uint _2121 = (_2099 * 48u) + 4u;
                        vec4 _2134 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2121)).x, texelFetch(g_PointLightRenderingBuffer, int(_2121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2121 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2121 + 3u)).x));
                        uint _2140 = (_2099 * 48u) + 8u;
                        vec3 _2151 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2140)).x, texelFetch(g_PointLightRenderingBuffer, int(_2140 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2140 + 2u)).x));
                        float _2155 = _2115.x - _1602;
                        float _2156 = _2115.y - _1603;
                        float _2157 = _2115.z - _1604;
                        float _2158 = dot(vec3(_2155, _2156, _2157), vec3(_2155, _2156, _2157));
                        float _2161 = inversesqrt(_2158);
                        float _2170 = 1.0 - (_2158 * _2115.w);
                        float _3184 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
                        float _2171 = isnan(1.0) ? _3184 : (isnan(_3184) ? 1.0 : min(_3184, 1.0));
                        float _2172 = sqrt(_2158) * _2134.w;
                        float _2175 = 1.39999997615814208984375 / (_2172 + 1.39999997615814208984375);
                        float _2176 = _2175 * _2175;
                        float _2179 = ((1.0 - _2176) * dot(vec3(0.0), vec3(_2161 * _2155, _2161 * _2156, _2161 * _2157))) + _2176;
                        float _2182 = _2172 * _2172;
                        float _2186 = ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _2171) / ((_2182 * 0.699999988079071044921875) + 1.0);
                        float _2190 = (-0.0) - _1602;
                        float _2191 = (-0.0) - _1603;
                        float _2192 = (-0.0) - _1604;
                        float _2196 = inversesqrt(dot(vec3(_2190, _2191, _2192), vec3(_2190, _2191, _2192)));
                        float _2200 = dot(vec3(0.0), vec3(_2196 * _2190, _2196 * _2191, _2196 * _2192));
                        float _3200 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
                        float _3211 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
                        float _2204 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
                        float _2208 = (0.5 / (((isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0))) + 9.9999999392252902907785028219223e-09) + _2204)) * _2204;
                        float _3222 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
                        float _2217 = (((isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0))) * 3.1415927410125732421875) / ((_2182 * 2.1991131305694580078125) + 3.141590118408203125)) * _2171;
                        _1998 = (_2186 * _2134.x) + _2092;
                        _1999 = (_2186 * _2134.y) + _2093;
                        _2000 = (_2186 * _2134.z) + _2094;
                        _1995 = (_2217 * _2151.x) + _2089;
                        _1996 = (_2217 * _2151.y) + _2090;
                        _1997 = (_2217 * _2151.z) + _2091;
                        if (_2096 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2089 = _1995;
                            _2090 = _1996;
                            _2091 = _1997;
                            _2092 = _1998;
                            _2093 = _1999;
                            _2094 = _2000;
                            _2095 = _2096;
                        }
                    }
                    frontier_phi_58_pred = _1996;
                    frontier_phi_58_pred_1 = _2000;
                    frontier_phi_58_pred_2 = _1999;
                    frontier_phi_58_pred_3 = _1998;
                    frontier_phi_58_pred_4 = _1997;
                    frontier_phi_58_pred_5 = _1995;
                }
                _1743 = frontier_phi_58_pred;
                _1751 = frontier_phi_58_pred_1;
                _1749 = frontier_phi_58_pred_2;
                _1747 = frontier_phi_58_pred_3;
                _1745 = frontier_phi_58_pred_4;
                _1741 = frontier_phi_58_pred_5;
                uint _1921 = _1920 + 1u;
                if (_1921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1914 = _1741;
                    _1915 = _1743;
                    _1916 = _1745;
                    _1917 = _1747;
                    _1918 = _1749;
                    _1919 = _1751;
                    _1920 = _1921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1740 = _1741;
            _1742 = _1743;
            _1744 = _1745;
            _1746 = _1747;
            _1748 = _1749;
            _1750 = _1751;
        }
        uvec4 _1754 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1755 = _1754.z;
        uint _1757 = (_1755 >> 8u) & 15u;
        float _1885;
        float _1887;
        float _1889;
        float _1891;
        float _1893;
        float _1895;
        if (((4294967295u << _1757) & _1649) == 0u)
        {
            _1885 = _1740;
            _1887 = _1742;
            _1889 = _1744;
            _1891 = _1746;
            _1893 = _1748;
            _1895 = _1750;
        }
        else
        {
            float _1910 = inversesqrt(dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_1757 < ((_1755 >> 12u) & 15u))
            {
                float _1886;
                float _1888;
                float _1890;
                float _1892;
                float _1894;
                float _1896;
                float _2072 = _1740;
                float _2073 = _1742;
                float _2074 = _1744;
                float _2075 = _1746;
                float _2076 = _1748;
                float _2077 = _1750;
                uint _2078 = _1757;
                uint _2087;
                bool _2088;
                for (;;)
                {
                    _2087 = texelFetch(g_lightClassification, int((((_1642 << 5u) + (_1628 << 9u)) + (_2078 << 2u)) >> 2u)).x;
                    _2088 = _2087 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2088)
                    {
                        frontier_phi_67_pred = _2077;
                        frontier_phi_67_pred_1 = _2076;
                        frontier_phi_67_pred_2 = _2075;
                        frontier_phi_67_pred_3 = _2074;
                        frontier_phi_67_pred_4 = _2073;
                        frontier_phi_67_pred_5 = _2072;
                    }
                    else
                    {
                        float _2243;
                        float _2244;
                        float _2245;
                        float _2246;
                        float _2247;
                        float _2248;
                        float _2493;
                        float _2494;
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2256 = _2072;
                        float _2257 = _2073;
                        float _2258 = _2074;
                        float _2259 = _2075;
                        float _2260 = _2076;
                        float _2261 = _2077;
                        uint _2262 = _2087;
                        uint _2263;
                        vec4 _2288;
                        float _2289;
                        vec4 _2304;
                        vec3 _2316;
                        vec4 _2331;
                        vec4 _2347;
                        float _2393;
                        bool _2394;
                        for (;;)
                        {
                            uint _2273 = ((_2078 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2262));
                            _2263 = (_2262 + 4294967295u) & _2262;
                            uint _2275 = _2273 * 40u;
                            _2288 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2275)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2275 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2275 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2275 + 3u)).x));
                            _2289 = _2288.w;
                            uint _2291 = (_2273 * 40u) + 4u;
                            _2304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2291 + 3u)).x));
                            uint _2306 = (_2273 * 40u) + 8u;
                            _2316 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2306 + 2u)).x));
                            uint _2318 = (_2273 * 40u) + 16u;
                            _2331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2318 + 3u)).x));
                            uint _2334 = (_2273 * 40u) + 20u;
                            _2347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2334 + 3u)).x));
                            uint _2349 = (_2273 * 40u) + 24u;
                            vec4 _2362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2349 + 3u)).x));
                            uint _2368 = (_2273 * 40u) + 28u;
                            vec4 _2381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 3u)).x));
                            _2393 = fma(_1604, _2381.z, fma(_1603, _2381.y, _2381.x * _1602)) + _2381.w;
                            _2394 = !((fma(_1604, _2362.z, fma(_1603, _2362.y, _2362.x * _1602)) + _2362.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2394)
                            {
                                float _2421 = _2288.x - _1602;
                                float _2422 = _2288.y - _1603;
                                float _2423 = _2288.z - _1604;
                                float _2424 = dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423));
                                float _2427 = inversesqrt(_2424);
                                float _2428 = _2427 * _2421;
                                float _2429 = _2427 * _2422;
                                float _2430 = _2427 * _2423;
                                float _2434 = 1.0 - (_2424 / (_2289 * _2289));
                                float _3233 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
                                float _2435 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
                                float _2439 = sqrt(_2424) * _2304.w;
                                float _2441 = 1.39999997615814208984375 / (_2439 + 1.39999997615814208984375);
                                float _2442 = _2441 * _2441;
                                float _2443 = 1.0 - _2442;
                                float _2445 = (_2443 * dot(vec3(_2428, _2429, _2430), vec3(0.0))) + _2442;
                                float _2448 = _2439 * _2439;
                                float _2452 = (fma(_1604, _2331.z, fma(_1603, _2331.y, _2331.x * _1602)) + _2331.w) / _2393;
                                float _2453 = (fma(_1604, _2347.z, fma(_1603, _2347.y, _2347.x * _1602)) + _2347.w) / _2393;
                                float _2457 = 1.0 - dot(vec2(_2452, _2453), vec2(_2452, _2453));
                                float _3249 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
                                float _2458 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
                                float _2459 = _2458 * (((isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0))) * _2435) / ((_2448 * 0.699999988079071044921875) + 1.0));
                                float _2469 = dot(vec3(0.0), vec3((-0.0) - (_1602 * _1910), (-0.0) - (_1603 * _1910), (-0.0) - (_1604 * _1910)));
                                float _3260 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
                                float _2477 = (_2443 * dot(vec3(0.0), vec3(_2428, _2429, _2430))) + _2442;
                                float _3271 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
                                float _2478 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
                                float _2482 = (0.5 / (((isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) + 9.9999999392252902907785028219223e-09) + _2478)) * _2478;
                                float _3282 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                                float _2489 = (_2458 * _2435) * (((isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0))) * 3.1415927410125732421875) / ((_2448 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2459 * _2304.z;
                                frontier_phi_73_pred_1 = _2459 * _2304.y;
                                frontier_phi_73_pred_2 = _2459 * _2304.x;
                                frontier_phi_73_pred_3 = _2489 * _2316.z;
                                frontier_phi_73_pred_4 = _2489 * _2316.y;
                                frontier_phi_73_pred_5 = _2489 * _2316.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2498 = frontier_phi_73_pred;
                            _2497 = frontier_phi_73_pred_1;
                            _2496 = frontier_phi_73_pred_2;
                            _2495 = frontier_phi_73_pred_3;
                            _2494 = frontier_phi_73_pred_4;
                            _2493 = frontier_phi_73_pred_5;
                            _2246 = _2496 + _2259;
                            _2247 = _2497 + _2260;
                            _2248 = _2498 + _2261;
                            _2243 = _2493 + _2256;
                            _2244 = _2494 + _2257;
                            _2245 = _2495 + _2258;
                            if (_2263 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2256 = _2243;
                                _2257 = _2244;
                                _2258 = _2245;
                                _2259 = _2246;
                                _2260 = _2247;
                                _2261 = _2248;
                                _2262 = _2263;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2248;
                        frontier_phi_67_pred_1 = _2247;
                        frontier_phi_67_pred_2 = _2246;
                        frontier_phi_67_pred_3 = _2245;
                        frontier_phi_67_pred_4 = _2244;
                        frontier_phi_67_pred_5 = _2243;
                    }
                    _1896 = frontier_phi_67_pred;
                    _1894 = frontier_phi_67_pred_1;
                    _1892 = frontier_phi_67_pred_2;
                    _1890 = frontier_phi_67_pred_3;
                    _1888 = frontier_phi_67_pred_4;
                    _1886 = frontier_phi_67_pred_5;
                    uint _2079 = _2078 + 1u;
                    if (_2079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2072 = _1886;
                        _2073 = _1888;
                        _2074 = _1890;
                        _2075 = _1892;
                        _2076 = _1894;
                        _2077 = _1896;
                        _2078 = _2079;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1892;
                frontier_phi_49_50_ladder_1 = _1896;
                frontier_phi_49_50_ladder_2 = _1894;
                frontier_phi_49_50_ladder_3 = _1890;
                frontier_phi_49_50_ladder_4 = _1888;
                frontier_phi_49_50_ladder_5 = _1886;
            }
            else
            {
                frontier_phi_49_50_ladder = _1746;
                frontier_phi_49_50_ladder_1 = _1750;
                frontier_phi_49_50_ladder_2 = _1748;
                frontier_phi_49_50_ladder_3 = _1744;
                frontier_phi_49_50_ladder_4 = _1742;
                frontier_phi_49_50_ladder_5 = _1740;
            }
            _1885 = frontier_phi_49_50_ladder_5;
            _1887 = frontier_phi_49_50_ladder_4;
            _1889 = frontier_phi_49_50_ladder_3;
            _1891 = frontier_phi_49_50_ladder;
            _1893 = frontier_phi_49_50_ladder_2;
            _1895 = frontier_phi_49_50_ladder_1;
        }
        float _1900 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _1662 = (_1900 * _1891) + _1441;
        _1664 = (_1900 * _1893) + _1442;
        _1666 = (_1900 * _1895) + _1443;
        _1668 = ((_1885 * 0.039999999105930328369140625) * _1900) + _1543;
        _1670 = ((_1887 * 0.039999999105930328369140625) * _1900) + _1544;
        _1672 = ((_1889 * 0.039999999105930328369140625) * _1900) + _1545;
    }
    else
    {
        _1662 = _1441;
        _1664 = _1442;
        _1666 = _1443;
        _1668 = _1543;
        _1670 = _1544;
        _1672 = _1545;
    }
    float _3298 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3309 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3320 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _1689 = ((isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0))) * (_1662 + ((isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0))) * _448))) + ((_1668 + ((isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1690 = ((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * (_1664 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _448))) + ((_1670 + ((isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1691 = ((isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0))) * (_1666 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _448))) + ((_1672 + ((isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    uint _1695 = _422 + 6u;
    float _1703 = _408 / cbSceneParam._m0[86u].x;
    float _1704 = _409 / cbSceneParam._m0[86u].y;
    vec4 _1718 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1703, _1704, (log2((isnan(cbSceneParam._m0[77u].w) ? _395 : (isnan(_395) ? cbSceneParam._m0[77u].w : min(_395, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1720 = _1718.x;
    float _1721 = _1718.y;
    float _1722 = _1718.z;
    float _1723 = _1718.w;
    float _1803;
    float _1805;
    float _1807;
    float _1809;
    if (_395 > cbSceneParam._m0[78u].w)
    {
        float _1765 = isnan(_395) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _395 : min(cbSceneParam._m0[80u].w, _395));
        float _1766 = _1765 / _395;
        float _1777 = _1766 * _246;
        float _1778 = _247 * _1766;
        float _1779 = (-0.0) - _1778;
        float _1780 = _1766 * _248;
        float _1782 = (cbSceneParam._m0[77u].w * _1779) / _1765;
        float _1783 = _1782 + cbSceneParam._m0[79u].w;
        float _1784 = cbSceneParam._m0[79u].w - _1778;
        float _1790 = sqrt(((_1777 * _1777) + (_1778 * _1778)) + (_1780 * _1780));
        float _1793 = (1.0 - (cbSceneParam._m0[77u].w / _1765)) * _1790;
        float _1799 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1801 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2008;
        if (abs((_1779 - _1782) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2008 = ((((_1783 > 0.0) ? exp2(_1799 * _1783) : (2.0 - exp2(_1801 * _1783))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1793;
        }
        else
        {
            float _1943 = 1.0 / cbSceneParam._m0[80u].x;
            float _1944 = isnan(_1784) ? _1783 : (isnan(_1783) ? _1784 : max(_1783, _1784));
            float _1945 = isnan(_1784) ? _1783 : (isnan(_1783) ? _1784 : min(_1783, _1784));
            float _1954 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : min(_1944, 0.0));
            float _1955 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : min(_1945, 0.0));
            _2008 = ((abs(_1790 / _1779) * cbSceneParam._m0[80u].y) * ((((_1954 - _1955) * 2.0) - ((exp2(_1799 * (isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)))) - exp2(_1799 * (isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))))) * _1943)) - ((exp2(_1801 * _1954) - exp2(_1801 * _1955)) * _1943))) + (_1793 * cbSceneParam._m0[80u].z);
        }
        vec4 _2010 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1703, _1704, 1.0), 0.0);
        float _2019 = exp2((_2008 * (-1.44269502162933349609375)) * (1.0 - _2010.w));
        float _2020 = log2(_2019);
        float _2036 = log2(_1723);
        _1803 = (exp2(_2036 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].x)) * _2010.x) / cbSceneParam._m0[78u].x)) + _1720;
        _1805 = (exp2(_2036 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].y)) * _2010.y) / cbSceneParam._m0[78u].y)) + _1721;
        _1807 = (exp2(_2036 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2020 * cbSceneParam._m0[78u].z)) * _2010.z) / cbSceneParam._m0[78u].z)) + _1722;
        _1809 = _2019 * _1723;
    }
    else
    {
        _1803 = _1720;
        _1805 = _1721;
        _1807 = _1722;
        _1809 = _1723;
    }
    float _1821 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1822 = _1821 == 3.0;
    float _1824 = log2(_1809);
    float _1831 = exp2(_1824 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
    float _1832 = exp2(_1824 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    float _1833 = exp2(_1824 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)));
    float _1842 = (_1821 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1842 * (_1822 ? _1831 : (_1831 + (cbSceneParam._m0[72u].w * _1803)));
    SV_Target.y = _1842 * (_1822 ? _1832 : (_1832 + (cbSceneParam._m0[72u].w * _1805)));
    SV_Target.z = _1842 * (_1822 ? _1833 : (_1833 + (cbSceneParam._m0[72u].w * _1807)));
    SV_Target.w = cbInstanceData._m0[_1695].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1695].w;
}


