#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _887;
uint _2354;
uint _2355;
uint _2356;
uint _2578;
uint _2579;
uint _2580;
float _2860;
float _2861;
float _2862;
float _2863;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    float _289 = cbMtdParam._m0[22u].y + _261;
    float _290 = cbMtdParam._m0[22u].z + _262;
    float _291 = cbMtdParam._m0[22u].w + _263;
    float _305 = (-0.0) - dot(vec3(_289, _290, _291), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _306 = (-0.0) - dot(vec3(_289, _290, _291), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _307 = (-0.0) - dot(vec3(_289, _290, _291), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _311 * _307;
    float _314 = (cbMtdParam._m0[19u].x * _305) * _311;
    float _316 = (cbMtdParam._m0[18u].w * _306) * _311;
    float _317 = fract(TEXCOORD.x);
    float _318 = fract(TEXCOORD.y);
    float _324;
    if (_314 > 0.0)
    {
        _324 = (1.0 - _317) / _314;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _317) / _314;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _324 = frontier_phi_3_2_ladder;
    }
    float _332;
    if (_316 > 0.0)
    {
        _332 = (1.0 - _318) / _316;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_316 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _318) / _316;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _332 = frontier_phi_7_6_ladder;
    }
    bool _334 = _312 > 0.0;
    float _336 = _334 ? (cbMtdParam._m0[15u].x / _312) : 5000.0;
    float _337 = isnan(_332) ? _324 : (isnan(_324) ? _332 : min(_324, _332));
    float _338 = isnan(_336) ? _337 : (isnan(_337) ? _336 : min(_337, _336));
    float _342 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _343 = _317 + (-0.5);
    float _346 = _318 + (-0.5);
    float _349 = ((_338 * _312) + _342) / _342;
    vec4 _375 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_343 + (_338 * _314)) / _349) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_346 + (_338 * _316)) / _349) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _386 = cbMtdParam._m0[9u].x * _375.x;
    float _387 = cbMtdParam._m0[9u].y * _375.y;
    float _388 = cbMtdParam._m0[9u].z * _375.z;
    float _410 = (cbMtdParam._m0[21u].x * _305) * _311;
    float _412 = (cbMtdParam._m0[20u].w * _306) * _311;
    bool _413 = _410 > 0.0;
    float _418;
    if (_413)
    {
        _418 = (1.0 - _317) / _410;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _317) / _410;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _418 = frontier_phi_11_10_ladder;
    }
    bool _420 = _412 > 0.0;
    float _425;
    if (_420)
    {
        _425 = (1.0 - _318) / _412;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _318) / _412;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _425 = frontier_phi_15_14_ladder;
    }
    float _428 = _334 ? (cbMtdParam._m0[16u].z / _312) : 5000.0;
    float _429 = isnan(_425) ? _418 : (isnan(_418) ? _425 : min(_418, _425));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _438 = ((_430 * _312) + _434) / _434;
    float _443 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _445 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _461 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_343 + (_430 * _410)) / _438) + 0.5) + _443) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_346 + (_430 * _412)) / _438) + 0.5) + _445) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _473;
    if (_413)
    {
        _473 = (1.0 - _317) / _410;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _317) / _410;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _473 = frontier_phi_19_18_ladder;
    }
    float _479;
    if (_420)
    {
        _479 = (1.0 - _318) / _412;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _318) / _412;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _479 = frontier_phi_23_22_ladder;
    }
    float _481 = isnan(_479) ? _473 : (isnan(_473) ? _479 : min(_473, _479));
    float _482 = isnan(_428) ? _481 : (isnan(_481) ? _428 : min(_481, _428));
    float _489 = ((_482 * _312) + _434) / _434;
    vec4 _503 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_343 + (_482 * _410)) / _489) + 0.5) + _443) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_346 + (_482 * _412)) / _489) + 0.5) + _445) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _505 = _503.w;
    float _512 = (_505 * ((_461.x * cbMtdParam._m0[10u].x) - _386)) + _386;
    float _513 = (_505 * ((_461.y * cbMtdParam._m0[10u].y) - _387)) + _387;
    float _514 = (_505 * ((_461.z * cbMtdParam._m0[10u].z) - _388)) + _388;
    float _529 = (cbMtdParam._m0[21u].z * _305) * _311;
    float _531 = (cbMtdParam._m0[21u].y * _306) * _311;
    bool _532 = _529 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _317) / _529;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _317) / _529;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _537 = frontier_phi_27_26_ladder;
    }
    bool _539 = _531 > 0.0;
    float _544;
    if (_539)
    {
        _544 = (1.0 - _318) / _531;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_531 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _318) / _531;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _544 = frontier_phi_31_30_ladder;
    }
    float _547 = _334 ? (cbMtdParam._m0[18u].x / _312) : 5000.0;
    float _548 = isnan(_544) ? _537 : (isnan(_537) ? _544 : min(_537, _544));
    float _549 = isnan(_547) ? _548 : (isnan(_548) ? _547 : min(_548, _547));
    float _553 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _557 = ((_549 * _312) + _553) / _553;
    float _562 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _564 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _581 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_343 + (_549 * _529)) / _557) + 0.5) + _562) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_346 + (_549 * _531)) / _557) + 0.5) + _564) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _593;
    if (_532)
    {
        _593 = (1.0 - _317) / _529;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _317) / _529;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _593 = frontier_phi_35_34_ladder;
    }
    float _599;
    if (_539)
    {
        _599 = (1.0 - _318) / _531;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_531 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _318) / _531;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _599 = frontier_phi_39_38_ladder;
    }
    float _601 = isnan(_599) ? _593 : (isnan(_593) ? _599 : min(_593, _599));
    float _602 = isnan(_547) ? _601 : (isnan(_601) ? _547 : min(_601, _547));
    float _609 = ((_602 * _312) + _553) / _553;
    vec4 _623 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_343 + (_602 * _529)) / _609) + 0.5) + _562) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_346 + (_602 * _531)) / _609) + 0.5) + _564) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _625 = _623.w;
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _655 = _261 * _654;
    float _656 = _262 * _654;
    float _657 = _263 * _654;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _734 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _741 = (cbMatDynParam._m0[5u].x * _734) + cbMatDynParam._m0[5u].y;
        float _2922 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _2922 : (isnan(_2922) ? 1.0 : min(_2922, 1.0));
        float _746 = (cbMatDynParam._m0[5u].z * _734) + cbMatDynParam._m0[5u].w;
        float _2933 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2933 : (isnan(_2933) ? 1.0 : min(_2933, 1.0))) - _742)) + _742) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _687 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_677 * cbSceneParam._m0[86u].x, _678 * cbSceneParam._m0[86u].y));
    float _690 = _687.x * TEXCOORD.z;
    float _691 = (-0.0) - _655;
    float _692 = (-0.0) - _656;
    float _693 = (-0.0) - _657;
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _886;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = (cbModelParam._m0[37u].x * ((((fma(_723, cbModelParam._m0[26u].z, fma(_719, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _715)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _810 = (cbModelParam._m0[37u].y * ((((fma(_723, cbModelParam._m0[27u].z, fma(_719, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _715)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _811 = (((((fma(_723, cbModelParam._m0[28u].z, fma(_719, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _715)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_808, _810, _811), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_808, _810, _811), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_808, _810, _811), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_808, _810, _811), 0.0);
        float _848 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _859 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _869 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _879 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_835.x + (-0.5));
        float _881 = _879 * (_835.y + (-0.5));
        float _882 = _879 * (_835.z + (-0.5));
        _886 = _848 * (_814.z + (-0.5));
        _888 = _848 * (_814.y + (-0.5));
        _889 = _848 * (_814.x + (-0.5));
        _890 = _859 * (_821.z + (-0.5));
        _891 = _859 * (_821.y + (-0.5));
        _892 = _859 * (_821.x + (-0.5));
        _893 = _869 * (_828.z + (-0.5));
        _894 = _869 * (_828.y + (-0.5));
        _895 = _869 * (_828.x + (-0.5));
        _896 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        _897 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        _898 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    }
    else
    {
        _886 = _887;
        _888 = _887;
        _889 = _887;
        _890 = _887;
        _891 = _887;
        _892 = _887;
        _893 = _887;
        _894 = _887;
        _895 = _887;
        _896 = _887;
        _897 = _887;
        _898 = _887;
    }
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _955 = (cbModelParam._m0[38u].x * ((((fma(_723, cbModelParam._m0[30u].z, fma(_719, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _715)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _956 = (cbModelParam._m0[38u].y * ((((fma(_723, cbModelParam._m0[31u].z, fma(_719, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _715)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _957 = (((((fma(_723, cbModelParam._m0[32u].z, fma(_719, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _715)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        _1029 = _992 * (_959.z + (-0.5));
        _1030 = _992 * (_959.y + (-0.5));
        _1031 = _992 * (_959.x + (-0.5));
        _1032 = _1002 * (_966.z + (-0.5));
        _1033 = _1002 * (_966.y + (-0.5));
        _1034 = _1002 * (_966.x + (-0.5));
        _1035 = _1012 * (_973.z + (-0.5));
        _1036 = _1012 * (_973.y + (-0.5));
        _1037 = _1012 * (_973.x + (-0.5));
        _1038 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        _1039 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        _1040 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    }
    else
    {
        _1029 = _887;
        _1030 = _887;
        _1031 = _887;
        _1032 = _887;
        _1033 = _887;
        _1034 = _887;
        _1035 = _887;
        _1036 = _887;
        _1037 = _887;
        _1038 = _887;
        _1039 = _887;
        _1040 = _887;
    }
    float _1055 = _655 * (-0.5);
    float _1056 = _656 * (-0.5);
    float _1057 = _657 * (-0.5);
    float _1058 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1031, _1034, _1037, _1040));
    float _1061 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1030, _1033, _1036, _1039));
    float _1064 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1099;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1071 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_886, _890, _893, _896));
        float _1075 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_888, _891, _894, _897));
        float _1079 = dot(vec4(_1055, _1056, _1057, 1.0), vec4(_889, _892, _895, _898));
        float _1086 = dot(vec4(cbModelParam._m0[39u]), vec4(_1055, _1056, _1057, 1.0));
        _1099 = dot(vec3(isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)), isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)), isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1086) ? 0.0 : (isnan(0.0) ? _1086 : max(0.0, _1086))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1099 = 1.0;
    }
    float _1110;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1101 = dot(vec4(cbModelParam._m0[40u]), vec4(_1055, _1056, _1057, 1.0));
        _1110 = dot(vec3(isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)), isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)), isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1101) ? 0.0 : (isnan(0.0) ? _1101 : max(0.0, _1101))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1110 = 1.0;
    }
    float _1114 = (_1110 * cbModelParam._m0[1u].x) + (_1099 * (1.0 - cbModelParam._m0[1u].x));
    float _1120 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1201;
    float _1203;
    float _1205;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1168 = fma(_723, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715)) + cbModelParam._m0[13u].w;
        float _1172 = fma(_723, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715)) + cbModelParam._m0[14u].w;
        float _1176 = fma(_723, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715)) + cbModelParam._m0[15u].w;
        float _1179 = fma(_693, cbModelParam._m0[13u].z, fma(_692, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691));
        float _1182 = fma(_693, cbModelParam._m0[14u].z, fma(_692, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691));
        float _1185 = fma(_693, cbModelParam._m0[15u].z, fma(_692, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691));
        float _1211;
        if (_1179 > 0.0)
        {
            _1211 = abs((1.0 - _1168) / _1179);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1179 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1168 + 1.0) / _1179);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1211 = frontier_phi_57_55_ladder;
        }
        float _1399;
        if (_1182 > 0.0)
        {
            _1399 = abs((1.0 - _1172) / _1182);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1182 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1172 + 1.0) / _1182);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1399 = frontier_phi_66_62_ladder;
        }
        float _1754;
        if (_1185 > 0.0)
        {
            _1754 = abs((1.0 - _1176) / _1185);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1185 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1176 + 1.0) / _1185);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _1754 = frontier_phi_78_73_ladder;
        }
        float _1756 = isnan(_1399) ? _1211 : (isnan(_1211) ? _1399 : min(_1211, _1399));
        float _1757 = isnan(_1754) ? _1756 : (isnan(_1756) ? _1754 : min(_1756, _1754));
        float _1761 = (_1757 * _1179) + _1168;
        float _1762 = (_1757 * _1182) + _1172;
        float _1763 = (_1757 * _1185) + _1176;
        float _1764 = _1757 * 9.9999997473787516355514526367188e-05;
        float _1766 = (-1.0) - _1764;
        float _1768 = _1764 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_1763 > _1768) || ((_1763 < _1766) || ((_1762 > _1768) || ((_1762 < _1766) || ((_1761 < _1766) || (_1761 > _1768))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1763, cbModelParam._m0[9u].z, fma(_1762, cbModelParam._m0[9u].y, _1761 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1763, cbModelParam._m0[10u].z, fma(_1762, cbModelParam._m0[10u].y, _1761 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1763, cbModelParam._m0[11u].z, fma(_1762, cbModelParam._m0[11u].y, _1761 * cbModelParam._m0[11u].x))), _1120);
            frontier_phi_56_78_ladder = _1996.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _1996.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _1996.x * cbModelParam._m0[1u].y;
        }
        _1201 = frontier_phi_56_78_ladder_2;
        _1203 = frontier_phi_56_78_ladder_1;
        _1205 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1189 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_691, _692, _693), _1120);
        _1201 = _1189.x * cbModelParam._m0[1u].y;
        _1203 = _1189.y * cbModelParam._m0[1u].y;
        _1205 = _1189.z * cbModelParam._m0[1u].y;
    }
    float _1208 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1296;
    float _1298;
    float _1300;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1260 = fma(_723, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715)) + cbModelParam._m0[21u].w;
        float _1264 = fma(_723, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715)) + cbModelParam._m0[22u].w;
        float _1268 = fma(_723, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715)) + cbModelParam._m0[23u].w;
        float _1271 = fma(_693, cbModelParam._m0[21u].z, fma(_692, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691));
        float _1274 = fma(_693, cbModelParam._m0[22u].z, fma(_692, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691));
        float _1277 = fma(_693, cbModelParam._m0[23u].z, fma(_692, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691));
        float _1404;
        if (_1271 > 0.0)
        {
            _1404 = abs((1.0 - _1260) / _1271);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1260 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1404 = frontier_phi_68_64_ladder;
        }
        float _1781;
        if (_1274 > 0.0)
        {
            _1781 = abs((1.0 - _1264) / _1274);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1274 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1264 + 1.0) / _1274);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _1781 = frontier_phi_80_75_ladder;
        }
        float _2121;
        if (_1277 > 0.0)
        {
            _2121 = abs((1.0 - _1268) / _1277);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1277 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1268 + 1.0) / _1277);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2121 = frontier_phi_92_87_ladder;
        }
        float _2123 = isnan(_1781) ? _1404 : (isnan(_1404) ? _1781 : min(_1404, _1781));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1271) + _1260;
        float _2129 = (_2124 * _1274) + _1264;
        float _2130 = (_2124 * _1277) + _1268;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2131;
        float _2134 = _2131 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2130 > _2134) || ((_2130 < _2132) || ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 < _2132) || (_2128 > _2134))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2130, cbModelParam._m0[17u].z, fma(_2129, cbModelParam._m0[17u].y, _2128 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2130, cbModelParam._m0[18u].z, fma(_2129, cbModelParam._m0[18u].y, _2128 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2130, cbModelParam._m0[19u].z, fma(_2129, cbModelParam._m0[19u].y, _2128 * cbModelParam._m0[19u].x))), _1208);
            frontier_phi_65_92_ladder = _2252.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2252.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2252.x * cbModelParam._m0[1u].z;
        }
        _1296 = frontier_phi_65_92_ladder_2;
        _1298 = frontier_phi_65_92_ladder;
        _1300 = frontier_phi_65_92_ladder_1;
    }
    else
    {
        vec4 _1280 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_691, _692, _693), _1208);
        _1296 = _1280.x * cbModelParam._m0[1u].z;
        _1298 = _1280.y * cbModelParam._m0[1u].z;
        _1300 = _1280.z * cbModelParam._m0[1u].z;
    }
    float _1312 = _690 * 0.01200000010430812835693359375;
    float _1314 = _1312 * ((cbModelParam._m0[1u].w * (_1296 - _1201)) + _1201);
    float _1315 = _1312 * ((cbModelParam._m0[1u].w * (_1298 - _1203)) + _1203);
    float _1316 = _1312 * ((cbModelParam._m0[1u].w * (_1300 - _1205)) + _1205);
    float _1337 = fma(_1316, cbSceneParam._m0[89u].z, fma(_1315, cbSceneParam._m0[89u].y, _1314 * cbSceneParam._m0[89u].x));
    float _1340 = fma(_1316, cbSceneParam._m0[90u].z, fma(_1315, cbSceneParam._m0[90u].y, _1314 * cbSceneParam._m0[90u].x));
    float _1343 = fma(_1316, cbSceneParam._m0[91u].z, fma(_1315, cbSceneParam._m0[91u].y, _1314 * cbSceneParam._m0[91u].x));
    float _1378 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1382 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1386 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1390 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1391 = _1378 / _1390;
    float _1392 = _1382 / _1390;
    float _1393 = _1386 / _1390;
    float _1541;
    float _1542;
    float _1543;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1420 = ((uint(_1393 > cbSceneParam._m0[59u].y) + uint(_1393 > cbSceneParam._m0[59u].x)) + uint(_1393 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1421 = _1420 + 43u;
        uint _1429 = _1420 + 44u;
        uint _1437 = _1420 + 45u;
        uint _1445 = _1420 + 46u;
        float _1456 = fma(_1390, cbSceneParam._m0[_1421].w, fma(_1386, cbSceneParam._m0[_1421].z, fma(_1382, cbSceneParam._m0[_1421].y, _1378 * cbSceneParam._m0[_1421].x)));
        float _1460 = fma(_1390, cbSceneParam._m0[_1429].w, fma(_1386, cbSceneParam._m0[_1429].z, fma(_1382, cbSceneParam._m0[_1429].y, _1378 * cbSceneParam._m0[_1429].x)));
        float _1468 = fma(_1390, cbSceneParam._m0[_1445].w, fma(_1386, cbSceneParam._m0[_1445].z, fma(_1382, cbSceneParam._m0[_1445].y, _1378 * cbSceneParam._m0[_1445].x)));
        float _1473 = cbSceneParam._m0[33u].z * _1468;
        float _1475 = cbSceneParam._m0[33u].w * _1468;
        float _1478 = fma(_1390, cbSceneParam._m0[_1437].w, fma(_1386, cbSceneParam._m0[_1437].z, fma(_1382, cbSceneParam._m0[_1437].y, _1378 * cbSceneParam._m0[_1437].x))) / _1468;
        float _1526 = (cbSceneParam._m0[33u].x - sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393))) * cbSceneParam._m0[33u].y;
        float _3059 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1534 = (isnan(1.0) ? _3059 : (isnan(_3059) ? 1.0 : min(_3059, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1473 + _1456) / _1468, (_1475 + _1460) / _1468), _1478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1475 + _1456) / _1468, (_1460 - _1473) / _1468), _1478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1456 - _1473) / _1468, (_1460 - _1475) / _1468), _1478), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1456 - _1475) / _1468, (_1473 + _1460) / _1468), _1478), 0.0)).x), vec4(0.25)));
        _1541 = 1.0 - (_1534 * cbSceneParam._m0[34u].x);
        _1542 = 1.0 - (_1534 * cbSceneParam._m0[34u].y);
        _1543 = 1.0 - (_1534 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1541 = 1.0;
        _1542 = 1.0;
        _1543 = 1.0;
    }
    float _1607;
    float _1609;
    float _1611;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1595 = fma(_1390, cbSceneParam._m0[63u].w, fma(_1386, cbSceneParam._m0[63u].z, fma(_1382, cbSceneParam._m0[63u].y, _1378 * cbSceneParam._m0[63u].x)));
        float _1596 = fma(_1390, cbSceneParam._m0[60u].w, fma(_1386, cbSceneParam._m0[60u].z, fma(_1382, cbSceneParam._m0[60u].y, _1378 * cbSceneParam._m0[60u].x))) / _1595;
        float _1597 = fma(_1390, cbSceneParam._m0[61u].w, fma(_1386, cbSceneParam._m0[61u].z, fma(_1382, cbSceneParam._m0[61u].y, _1378 * cbSceneParam._m0[61u].x))) / _1595;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_1596 >= cbSceneParam._m0[64u].x) && (_1597 >= cbSceneParam._m0[64u].y)) && (_1596 <= cbSceneParam._m0[64u].z)) && (_1597 <= cbSceneParam._m0[64u].w))
        {
            float _1794 = fma(_1390, cbSceneParam._m0[62u].w, fma(_1386, cbSceneParam._m0[62u].z, fma(_1382, cbSceneParam._m0[62u].y, _1378 * cbSceneParam._m0[62u].x))) / _1595;
            float _1798 = isnan(cbSceneParam._m0[41u].w) ? _1794 : (isnan(_1794) ? cbSceneParam._m0[41u].w : max(_1794, cbSceneParam._m0[41u].w));
            float _1841 = (cbSceneParam._m0[33u].x - sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393))) * cbSceneParam._m0[33u].y;
            float _3075 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
            float _1848 = (isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1596, cbSceneParam._m0[33u].w + _1597), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1596, _1597 - cbSceneParam._m0[33u].z), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1596 - cbSceneParam._m0[33u].z, _1597 - cbSceneParam._m0[33u].w), _1798), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1596 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1597), _1798), 0.0)).x), vec4(0.25)));
            float _1852 = 1.0 - (_1848 * cbSceneParam._m0[34u].x);
            float _1853 = 1.0 - (_1848 * cbSceneParam._m0[34u].y);
            float _1854 = 1.0 - (_1848 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_1854) ? _1543 : (isnan(_1543) ? _1854 : min(_1543, _1854));
            frontier_phi_77_76_ladder_1 = isnan(_1853) ? _1542 : (isnan(_1542) ? _1853 : min(_1542, _1853));
            frontier_phi_77_76_ladder_2 = isnan(_1852) ? _1541 : (isnan(_1541) ? _1852 : min(_1541, _1852));
        }
        else
        {
            frontier_phi_77_76_ladder = _1543;
            frontier_phi_77_76_ladder_1 = _1542;
            frontier_phi_77_76_ladder_2 = _1541;
        }
        _1607 = frontier_phi_77_76_ladder_2;
        _1609 = frontier_phi_77_76_ladder_1;
        _1611 = frontier_phi_77_76_ladder;
    }
    else
    {
        _1607 = _1541;
        _1609 = _1542;
        _1611 = _1543;
    }
    uint _1613 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1617 = floatBitsToUint(cbInstanceData._m0[_1613 + 5u]);
    uint _1619 = _1617.x * 14u;
    uint _1620 = _1619 + 13u;
    float _1625 = _690 + (-1.0);
    float _1629 = (cbLight._m0[_1620].x * _1625) + 1.0;
    float _1630 = (cbLight._m0[_1620].y * _1625) + 1.0;
    uint _1631 = _1619 + 8u;
    float _1642 = cbLight._m0[_1619].x + _655;
    float _1643 = cbLight._m0[_1619].y + _656;
    float _1644 = cbLight._m0[_1619].z + _657;
    float _1648 = inversesqrt(dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644)));
    float _1652 = dot(vec3(0.0), vec3(cbLight._m0[_1619].xyz));
    float _3101 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _1655 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    float _1656 = dot(vec3(0.0), vec3(_655, _656, _657));
    float _3112 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1659 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
    float _1660 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1642 * _1648, _1643 * _1648, _1644 * _1648));
    float _3123 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _1671 = (exp2(log2(1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1677 = (0.5 / ((_1655 + 9.9999999392252902907785028219223e-09) + _1659)) * _1655;
    float _3134 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
    float _1679 = (isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0))) * 0.31831014156341552734375;
    float _1681 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
    uint _1694 = _1619 + 9u;
    uint _1700 = _1619 | 1u;
    float _1706 = cbLight._m0[_1700].x + _655;
    float _1707 = cbLight._m0[_1700].y + _656;
    float _1708 = cbLight._m0[_1700].z + _657;
    float _1712 = inversesqrt(dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708)));
    float _1716 = dot(vec3(0.0), vec3(cbLight._m0[_1700].xyz));
    float _3150 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _1719 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _1720 = dot(vec3(cbLight._m0[_1700].xyz), vec3(_1706 * _1712, _1707 * _1712, _1708 * _1712));
    float _3161 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1729 = (exp2(log2(1.0 - (isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1733 = (0.5 / ((_1719 + 9.9999999392252902907785028219223e-09) + _1659)) * _1719;
    float _3172 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
    float _1735 = (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * 0.31831014156341552734375;
    float _1736 = isnan(1.0) ? _1630 : (isnan(_1630) ? 1.0 : min(_1630, 1.0));
    float _1746 = (((_1729 * cbLight._m0[_1694].x) * _1735) * _1736) + ((((cbLight._m0[_1631].x * _1607) * _1671) * _1679) * _1681);
    float _1747 = (((_1729 * cbLight._m0[_1694].y) * _1735) * _1736) + ((((cbLight._m0[_1631].y * _1609) * _1671) * _1679) * _1681);
    float _1748 = (((_1729 * cbLight._m0[_1694].z) * _1735) * _1736) + ((((cbLight._m0[_1631].z * _1611) * _1671) * _1679) * _1681);
    float _1911;
    float _1913;
    float _1915;
    if (_1617.y == 0u)
    {
        uvec4 _1866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1867 = _1866.x;
        uint _1878 = uint((float(_1866.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _1867))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _1867)));
        float _1888 = (log2(_1393 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1889 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        uint _1892 = uint(isnan(14.0) ? _1889 : (isnan(_1889) ? 14.0 : min(_1889, 14.0)));
        uvec4 _1897 = texelFetch(g_lightClusterGridBuffer, int(((_1892 << 2u) + (_1878 << 6u)) >> 2u));
        uint _1898 = _1897.x;
        uint _1899 = _1866.z;
        float _2005;
        float _2007;
        float _2009;
        if (((((1u << ((_1899 >> 4u) & 15u)) + 4294967295u) & _1898) == 0u) || ((_1899 & 240u) == 0u))
        {
            _2005 = 0.0;
            _2007 = 0.0;
            _2009 = 0.0;
        }
        else
        {
            float _2006;
            float _2008;
            float _2010;
            float _2167 = 0.0;
            float _2168 = 0.0;
            float _2169 = 0.0;
            uint _2170 = 0u;
            uint _2179;
            bool _2180;
            for (;;)
            {
                _2179 = texelFetch(g_lightClassification, int((((_1892 << 5u) + (_1878 << 9u)) + (_2170 << 2u)) >> 2u)).x;
                _2180 = _2179 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                if (_2180)
                {
                    frontier_phi_103_pred = _2169;
                    frontier_phi_103_pred_1 = _2168;
                    frontier_phi_103_pred_2 = _2167;
                }
                else
                {
                    float _2324;
                    float _2325;
                    float _2326;
                    uint _2327;
                    _2324 = _2167;
                    _2325 = _2168;
                    _2326 = _2169;
                    _2327 = _2179;
                    float _2257;
                    float _2258;
                    float _2259;
                    for (;;)
                    {
                        uint _2331 = uint(findLSB(_2327)) + (_2170 << 5u);
                        uint _2328 = (_2327 + 4294967295u) & _2327;
                        uint _2333 = _2331 * 48u;
                        vec4 _2347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2333)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2333 + 3u)).x));
                        uint _2364 = (_2331 * 48u) + 8u;
                        vec3 _2375 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2364)).x, texelFetch(g_PointLightRenderingBuffer, int(_2364 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2364 + 2u)).x));
                        float _2379 = _2347.x - _1391;
                        float _2380 = _2347.y - _1392;
                        float _2381 = _2347.z - _1393;
                        float _2382 = dot(vec3(_2379, _2380, _2381), vec3(_2379, _2380, _2381));
                        float _2385 = inversesqrt(_2382);
                        float _2394 = 1.0 - (_2382 * _2347.w);
                        float _3198 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
                        float _2396 = sqrt(_2382) * uintBitsToFloat(uvec4(_2354, _2355, _2356, texelFetch(g_PointLightRenderingBuffer, int(((_2331 * 48u) + 4u) + 3u)).x)).w;
                        float _2399 = 1.39999997615814208984375 / (_2396 + 1.39999997615814208984375);
                        float _2400 = _2399 * _2399;
                        float _2403 = ((1.0 - _2400) * dot(vec3(0.0), vec3(_2385 * _2379, _2385 * _2380, _2385 * _2381))) + _2400;
                        float _2405 = (-0.0) - _1391;
                        float _2406 = (-0.0) - _1392;
                        float _2407 = (-0.0) - _1393;
                        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
                        float _2415 = dot(vec3(0.0), vec3(_2411 * _2405, _2411 * _2406, _2411 * _2407));
                        float _3209 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
                        float _3220 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
                        float _2419 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
                        float _2423 = (0.5 / (((isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))) + 9.9999999392252902907785028219223e-09) + _2419)) * _2419;
                        float _3231 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
                        float _2432 = (((isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * 3.1415927410125732421875) / (((_2396 * _2396) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)));
                        _2257 = (_2432 * _2375.x) + _2324;
                        _2258 = (_2432 * _2375.y) + _2325;
                        _2259 = (_2432 * _2375.z) + _2326;
                        if (_2328 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2324 = _2257;
                            _2325 = _2258;
                            _2326 = _2259;
                            _2327 = _2328;
                        }
                    }
                    frontier_phi_103_pred = _2259;
                    frontier_phi_103_pred_1 = _2258;
                    frontier_phi_103_pred_2 = _2257;
                }
                _2010 = frontier_phi_103_pred;
                _2008 = frontier_phi_103_pred_1;
                _2006 = frontier_phi_103_pred_2;
                uint _2171 = _2170 + 1u;
                if (_2171 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2167 = _2006;
                    _2168 = _2008;
                    _2169 = _2010;
                    _2170 = _2171;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2005 = _2006;
            _2007 = _2008;
            _2009 = _2010;
        }
        uvec4 _2013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2014 = _2013.z;
        uint _2016 = (_2014 >> 8u) & 15u;
        float _2147;
        float _2149;
        float _2151;
        if (((4294967295u << _2016) & _1898) == 0u)
        {
            _2147 = _2005;
            _2149 = _2007;
            _2151 = _2009;
        }
        else
        {
            float _2163 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            if (_2016 < ((_2014 >> 12u) & 15u))
            {
                float _2148;
                float _2150;
                float _2152;
                float _2310 = _2005;
                float _2311 = _2007;
                float _2312 = _2009;
                uint _2313 = _2016;
                uint _2322;
                bool _2323;
                for (;;)
                {
                    _2322 = texelFetch(g_lightClassification, int((((_1892 << 5u) + (_1878 << 9u)) + (_2313 << 2u)) >> 2u)).x;
                    _2323 = _2322 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    if (_2323)
                    {
                        frontier_phi_114_pred = _2312;
                        frontier_phi_114_pred_1 = _2311;
                        frontier_phi_114_pred_2 = _2310;
                    }
                    else
                    {
                        float _2446;
                        float _2447;
                        float _2448;
                        float _2667;
                        float _2668;
                        float _2669;
                        float _2456 = _2310;
                        float _2457 = _2311;
                        float _2458 = _2312;
                        uint _2459 = _2322;
                        uint _2460;
                        uint _2470;
                        vec4 _2485;
                        float _2486;
                        vec3 _2498;
                        vec4 _2513;
                        vec4 _2528;
                        float _2574;
                        bool _2575;
                        for (;;)
                        {
                            _2470 = ((_2313 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2459));
                            _2460 = (_2459 + 4294967295u) & _2459;
                            uint _2472 = _2470 * 40u;
                            _2485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 3u)).x));
                            _2486 = _2485.w;
                            uint _2488 = (_2470 * 40u) + 8u;
                            _2498 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2488)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2488 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2488 + 2u)).x));
                            uint _2500 = (_2470 * 40u) + 16u;
                            _2513 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2500)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2500 + 3u)).x));
                            uint _2515 = (_2470 * 40u) + 20u;
                            _2528 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2515)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2515 + 3u)).x));
                            uint _2530 = (_2470 * 40u) + 24u;
                            vec4 _2543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 3u)).x));
                            uint _2549 = (_2470 * 40u) + 28u;
                            vec4 _2562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2549 + 3u)).x));
                            _2574 = fma(_1393, _2562.z, fma(_1392, _2562.y, _2562.x * _1391)) + _2562.w;
                            _2575 = !((fma(_1393, _2543.z, fma(_1392, _2543.y, _2543.x * _1391)) + _2543.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            if (_2575)
                            {
                                float _2609 = _2485.x - _1391;
                                float _2610 = _2485.y - _1392;
                                float _2611 = _2485.z - _1393;
                                float _2612 = dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611));
                                float _2615 = inversesqrt(_2612);
                                float _2622 = 1.0 - (_2612 / (_2486 * _2486));
                                float _3242 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
                                float _2624 = sqrt(_2612) * uintBitsToFloat(uvec4(_2578, _2579, _2580, texelFetch(g_SpotLightRenderingBuffer, int(((_2470 * 40u) + 4u) + 3u)).x)).w;
                                float _2626 = 1.39999997615814208984375 / (_2624 + 1.39999997615814208984375);
                                float _2627 = _2626 * _2626;
                                float _2630 = (fma(_1393, _2513.z, fma(_1392, _2513.y, _2513.x * _1391)) + _2513.w) / _2574;
                                float _2631 = (fma(_1393, _2528.z, fma(_1392, _2528.y, _2528.x * _1391)) + _2528.w) / _2574;
                                float _2635 = 1.0 - dot(vec2(_2630, _2631), vec2(_2630, _2631));
                                float _3253 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
                                float _2643 = dot(vec3(0.0), vec3((-0.0) - (_1391 * _2163), (-0.0) - (_1392 * _2163), (-0.0) - (_1393 * _2163)));
                                float _3264 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                                float _2651 = ((1.0 - _2627) * dot(vec3(0.0), vec3(_2615 * _2609, _2615 * _2610, _2615 * _2611))) + _2627;
                                float _3275 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                                float _2652 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
                                float _2656 = (0.5 / (((isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) + 9.9999999392252902907785028219223e-09) + _2652)) * _2652;
                                float _3286 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                                float _2663 = ((isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0))) * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * (((isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0))) * 3.1415927410125732421875) / (((_2624 * _2624) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_120_pred = _2663 * _2498.z;
                                frontier_phi_120_pred_1 = _2663 * _2498.y;
                                frontier_phi_120_pred_2 = _2663 * _2498.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                            }
                            _2669 = frontier_phi_120_pred;
                            _2668 = frontier_phi_120_pred_1;
                            _2667 = frontier_phi_120_pred_2;
                            _2446 = _2667 + _2456;
                            _2447 = _2668 + _2457;
                            _2448 = _2669 + _2458;
                            if (_2460 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2456 = _2446;
                                _2457 = _2447;
                                _2458 = _2448;
                                _2459 = _2460;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _2448;
                        frontier_phi_114_pred_1 = _2447;
                        frontier_phi_114_pred_2 = _2446;
                    }
                    _2152 = frontier_phi_114_pred;
                    _2150 = frontier_phi_114_pred_1;
                    _2148 = frontier_phi_114_pred_2;
                    uint _2314 = _2313 + 1u;
                    if (_2314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2310 = _2148;
                        _2311 = _2150;
                        _2312 = _2152;
                        _2313 = _2314;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2150;
                frontier_phi_94_95_ladder_1 = _2152;
                frontier_phi_94_95_ladder_2 = _2148;
            }
            else
            {
                frontier_phi_94_95_ladder = _2007;
                frontier_phi_94_95_ladder_1 = _2009;
                frontier_phi_94_95_ladder_2 = _2005;
            }
            _2147 = frontier_phi_94_95_ladder_2;
            _2149 = frontier_phi_94_95_ladder;
            _2151 = frontier_phi_94_95_ladder_1;
        }
        float _2156 = isnan(1.0) ? _690 : (isnan(_690) ? 1.0 : min(_690, 1.0));
        _1911 = ((_2147 * 0.039999999105930328369140625) * _2156) + _1746;
        _1913 = ((_2149 * 0.039999999105930328369140625) * _2156) + _1747;
        _1915 = ((_2151 * 0.039999999105930328369140625) * _2156) + _1748;
    }
    else
    {
        _1911 = _1746;
        _1913 = _1747;
        _1915 = _1748;
    }
    uint _1921 = _1613 + 9u;
    uint _1922 = _1921 + uint(cbMatDynParam._m0[0u].w);
    float _1937 = (cbInstanceData._m0[_1922].x * ((_625 * ((_581.x * cbMtdParam._m0[14u].x) - _512)) + _512)) + ((_1911 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _1938 = (cbInstanceData._m0[_1922].y * ((_625 * ((_581.y * cbMtdParam._m0[14u].y) - _513)) + _513)) + ((_1913 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _1939 = (cbInstanceData._m0[_1922].z * ((_625 * ((_581.z * cbMtdParam._m0[14u].z) - _514)) + _514)) + ((_1915 + ((isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0))) * _1114)) * cbPerFrame._m0[3u].x);
    float _1940 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1941 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1942 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
    uint _1943 = _1613 + 6u;
    float _1951 = _677 / cbSceneParam._m0[86u].x;
    float _1952 = _678 / cbSceneParam._m0[86u].y;
    vec4 _1966 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1951, _1952, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1968 = _1966.x;
    float _1969 = _1966.y;
    float _1970 = _1966.z;
    float _1971 = _1966.w;
    float _2061;
    float _2063;
    float _2065;
    float _2067;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2024 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2025 = _2024 / _650;
        float _2036 = _2025 * _261;
        float _2037 = _262 * _2025;
        float _2038 = (-0.0) - _2037;
        float _2039 = _2025 * _263;
        float _2041 = (cbSceneParam._m0[77u].w * _2038) / _2024;
        float _2042 = _2041 + cbSceneParam._m0[79u].w;
        float _2043 = cbSceneParam._m0[79u].w - _2037;
        float _2049 = sqrt(((_2036 * _2036) + (_2037 * _2037)) + (_2039 * _2039));
        float _2052 = (1.0 - (cbSceneParam._m0[77u].w / _2024)) * _2049;
        float _2057 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2059 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2267;
        if (abs((_2038 - _2041) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2267 = ((((_2042 > 0.0) ? exp2(_2057 * _2042) : (2.0 - exp2(_2059 * _2042))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2052;
        }
        else
        {
            float _2193 = 1.0 / cbSceneParam._m0[80u].x;
            float _2194 = isnan(_2043) ? _2042 : (isnan(_2042) ? _2043 : max(_2042, _2043));
            float _2195 = isnan(_2043) ? _2042 : (isnan(_2042) ? _2043 : min(_2042, _2043));
            float _2204 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : min(_2194, 0.0));
            float _2205 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : min(_2195, 0.0));
            _2267 = ((abs(_2049 / _2038) * cbSceneParam._m0[80u].y) * ((((_2204 - _2205) * 2.0) - ((exp2(_2057 * (isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0)))) - exp2(_2057 * (isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0))))) * _2193)) - ((exp2(_2059 * _2204) - exp2(_2059 * _2205)) * _2193))) + (_2052 * cbSceneParam._m0[80u].z);
        }
        vec4 _2269 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1951, _1952, 1.0), 0.0);
        float _2278 = exp2((_2267 * (-1.44269502162933349609375)) * (1.0 - _2269.w));
        float _2279 = log2(_2278);
        float _2295 = log2(_1971);
        _2061 = (exp2(_2295 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2279 * cbSceneParam._m0[78u].x)) * _2269.x) / cbSceneParam._m0[78u].x)) + _1968;
        _2063 = (exp2(_2295 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2279 * cbSceneParam._m0[78u].y)) * _2269.y) / cbSceneParam._m0[78u].y)) + _1969;
        _2065 = (exp2(_2295 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2279 * cbSceneParam._m0[78u].z)) * _2269.z) / cbSceneParam._m0[78u].z)) + _1970;
        _2067 = _2278 * _1971;
    }
    else
    {
        _2061 = _1968;
        _2063 = _1969;
        _2065 = _1970;
        _2067 = _1971;
    }
    bool _2305;
    vec4 _2077;
    vec4 _2100;
    float _2102;
    float _2106;
    float _2107;
    float _2108;
    float _2109;
    bool _2120;
    for (;;)
    {
        _2077 = cbMatDynParam._m0[0u];
        float _2079 = roundEven(_2077.y);
        bool _2080 = _2079 == 3.0;
        float _2082 = log2(_2067);
        float _2089 = exp2(_2082 * cbSceneParam._m0[78u].x) * _1940;
        float _2090 = exp2(_2082 * cbSceneParam._m0[78u].y) * _1941;
        float _2091 = exp2(_2082 * cbSceneParam._m0[78u].z) * _1942;
        float _2098 = _664 + (-0.5);
        _2100 = cbMtdParam._m0[1u];
        _2102 = _2100.y * _2098;
        float _2105 = (_2079 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2106 = _2105 * (_2080 ? _2089 : (_2089 + (cbSceneParam._m0[72u].w * _2061)));
        _2107 = _2105 * (_2080 ? _2090 : (_2090 + (cbSceneParam._m0[72u].w * _2063)));
        _2108 = _2105 * (_2080 ? _2091 : (_2091 + (cbSceneParam._m0[72u].w * _2065)));
        _2109 = _2098 * 0.999000012874603271484375;
        _2120 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2120)
        {
            if ((cbInstanceData._m0[_1613 + 7u].x + _2109) < 0.5)
            {
                _2305 = true;
                break;
            }
        }
        uint _2228 = _1921 + uint(_2077.w);
        if ((cbInstanceData._m0[_2228].w < 1.0) && ((cbInstanceData._m0[_2228].w + _2109) < 0.5))
        {
            _2305 = true;
            break;
        }
        if ((_2102 + 1.0) < _2100.x)
        {
            _2305 = true;
            break;
        }
        _2305 = false;
        break;
    }
    float _2437;
    if (_2305)
    {
        discard_state = true;
        _2437 = 0.0;
    }
    else
    {
        _2437 = cbInstanceData._m0[_1943].w;
    }
    SV_Target.x = _2106;
    SV_Target.y = _2107;
    SV_Target.z = _2108;
    SV_Target.w = _2437;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1943].w;
    discard_exit();
}


