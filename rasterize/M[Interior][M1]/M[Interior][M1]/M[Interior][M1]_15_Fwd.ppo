#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _329 = cbMtdParam._m0[22u].y + _259;
    float _330 = cbMtdParam._m0[22u].z + _260;
    float _331 = cbMtdParam._m0[22u].w + _261;
    float _345 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_188, _189, _190));
    float _346 = (-0.0) - dot(vec3(_329, _330, _331), vec3(_202, _203, _204));
    float _347 = (-0.0) - dot(vec3(_329, _330, _331), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _351 * _347;
    float _354 = (cbMtdParam._m0[19u].x * _345) * _351;
    float _356 = (cbMtdParam._m0[18u].w * _346) * _351;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_354 > 0.0)
    {
        _364 = (1.0 - _357) / _354;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _354;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[15u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_383 + (_378 * _354)) / _389) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _416 = _414.x;
    float _417 = _414.y;
    float _418 = _414.z;
    float _430 = (_416 - (_416 * _286)) * cbMtdParam._m0[9u].x;
    float _431 = (_417 - (_417 * _286)) * cbMtdParam._m0[9u].y;
    float _432 = cbMtdParam._m0[9u].z * (_418 - (_418 * _286));
    float _454 = (cbMtdParam._m0[21u].x * _345) * _351;
    float _456 = (cbMtdParam._m0[20u].w * _346) * _351;
    bool _457 = _454 > 0.0;
    float _462;
    if (_457)
    {
        _462 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _462 = frontier_phi_11_10_ladder;
    }
    bool _464 = _456 > 0.0;
    float _469;
    if (_464)
    {
        _469 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _469 = frontier_phi_15_14_ladder;
    }
    float _472 = _374 ? (cbMtdParam._m0[16u].z / _352) : 5000.0;
    float _473 = isnan(_469) ? _462 : (isnan(_462) ? _469 : min(_462, _469));
    float _474 = isnan(_472) ? _473 : (isnan(_473) ? _472 : min(_473, _472));
    float _478 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _482 = ((_474 * _352) + _478) / _478;
    float _487 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _489 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _505 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_474 * _454)) / _482) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_474 * _456)) / _482) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _510 = _505.x * cbMtdParam._m0[10u].x;
    float _511 = _505.y * cbMtdParam._m0[10u].y;
    float _512 = _505.z * cbMtdParam._m0[10u].z;
    float _520;
    if (_457)
    {
        _520 = (1.0 - _357) / _454;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_454 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _454;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _520 = frontier_phi_19_18_ladder;
    }
    float _526;
    if (_464)
    {
        _526 = (1.0 - _358) / _456;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _456;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _526 = frontier_phi_23_22_ladder;
    }
    float _528 = isnan(_526) ? _520 : (isnan(_520) ? _526 : min(_520, _526));
    float _529 = isnan(_472) ? _528 : (isnan(_528) ? _472 : min(_528, _472));
    float _536 = ((_529 * _352) + _478) / _478;
    vec4 _550 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_529 * _454)) / _536) + 0.5) + _487) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_529 * _456)) / _536) + 0.5) + _489) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _552 = _550.w;
    float _554 = _552 - (_552 * _286);
    float _565 = 0.5 - (_286 * 0.5);
    float _575 = (((_430 - _299) + (_554 * ((_510 - _430) - (_510 * _286)))) * _565) + _299;
    float _576 = (((_431 - _301) + (_554 * ((_511 - _431) - (_511 * _286)))) * _565) + _301;
    float _577 = (((_432 - _303) + (_554 * ((_512 - _432) - (_512 * _286)))) * _565) + _303;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _591 = _589.x;
    vec4 _603 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _611 = (_603.x * 2.0) + (-1.0);
    float _613 = (_603.y * 2.0) + (-1.0);
    float _614 = dot(vec2(_611, _613), vec2(_611, _613));
    float _3250 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))));
    float _620 = _603.z * _286;
    float _623 = fma(_619, _195, fma(_613, _202, _611 * _188));
    float _626 = fma(_619, _196, fma(_613, _203, _611 * _189));
    float _629 = fma(_619, _197, fma(_613, _204, _611 * _190));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    float _634 = _633 * _623;
    float _635 = _633 * _626;
    float _636 = _633 * _629;
    float _3261 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _637 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _3272 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3283 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3294 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3305 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _641 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _657 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _661 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _662 = _259 * _661;
    float _663 = _260 * _661;
    float _664 = _261 * _661;
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_636, cbSceneParam._m0[5u].z, fma(_635, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _634));
    float _695 = fma(_636, cbSceneParam._m0[6u].z, fma(_635, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _634));
    float _698 = fma(_636, cbSceneParam._m0[7u].z, fma(_635, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _634));
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _714 = (_711 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _720 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_714].x;
    float _721 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_714].y;
    float _722 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_714].z;
    float _3316 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _726 = 1.0 - _641;
    float _727 = _723 * _726;
    float _728 = _724 * _726;
    float _729 = _725 * _726;
    float _734 = (_723 + (-0.039999999105930328369140625)) * _641;
    float _735 = (_724 + (-0.039999999105930328369140625)) * _641;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _641;
    float _737 = _734 + 0.039999999105930328369140625;
    float _739 = _735 + 0.039999999105930328369140625;
    float _740 = _736 + 0.039999999105930328369140625;
    vec4 _749 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _752 = _749.x * TEXCOORD.z;
    float _753 = dot(vec3(_634, _635, _636), vec3(_662, _663, _664));
    float _756 = _753 * 2.0;
    float _760 = (_756 * _634) - _662;
    float _761 = (_756 * _635) - _663;
    float _762 = (_756 * _636) - _664;
    float _766 = abs(dot(vec3(_662, _663, _664), vec3(_634, _635, _636)));
    float _3349 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _768 = sqrt(_637);
    float _781 = exp2((_768 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_768 * 3.0));
    float _787 = (1.0 - _781) * ((_768 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _788 = _781 * _768;
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _856 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _860 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _634;
        float _884 = _820 + _635;
        float _885 = _824 + _636;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_634, _635, _636), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3397 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_634, _635, _636), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3430 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_634, _635, _636), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3463 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1170 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1174 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1197 = _816 + _634;
        float _1198 = _820 + _635;
        float _1199 = _824 + _636;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_634, _635, _636), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3526 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_634, _635, _636), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3559 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_634, _635, _636), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3592 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _760 * 0.5;
    float _1504 = _761 * 0.5;
    float _1505 = _762 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _637);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_762, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _760));
        float _1634 = fma(_762, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _760));
        float _1637 = fma(_762, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _760));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1665 = frontier_phi_38_36_ladder;
        }
        float _2023;
        if (_1634 > 0.0)
        {
            _2023 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2023 = frontier_phi_47_43_ladder;
        }
        float _2323;
        if (_1637 > 0.0)
        {
            _2323 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2323 = frontier_phi_61_54_ladder;
        }
        float _2325 = isnan(_2023) ? _1665 : (isnan(_1665) ? _2023 : min(_1665, _2023));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1631) + _1620;
        float _2331 = (_2326 * _1634) + _1624;
        float _2332 = (_2326 * _1637) + _1628;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2334 = (-1.0) - _2333;
        float _2336 = _2333 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2332 > _2336) || ((_2332 < _2334) || ((_2331 > _2336) || ((_2331 < _2334) || ((_2330 < _2334) || (_2330 > _2336))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_37_61_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_37_61_ladder_2;
        _1655 = frontier_phi_37_61_ladder_1;
        _1657 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_760, _761, _762), _1572);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _637);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1750;
    float _1752;
    float _1754;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1714 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1718 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1722 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1725 = fma(_762, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _760));
        float _1728 = fma(_762, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _760));
        float _1731 = fma(_762, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _760));
        float _2028;
        if (_1725 > 0.0)
        {
            _2028 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2028 = frontier_phi_49_45_ladder;
        }
        float _2349;
        if (_1728 > 0.0)
        {
            _2349 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2349 = frontier_phi_63_56_ladder;
        }
        float _2518;
        if (_1731 > 0.0)
        {
            _2518 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2518 = frontier_phi_77_72_ladder;
        }
        float _2520 = isnan(_2349) ? _2028 : (isnan(_2028) ? _2349 : min(_2028, _2349));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _1725) + _1714;
        float _2526 = (_2521 * _1728) + _1718;
        float _2527 = (_2521 * _1731) + _1722;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2529 = (-1.0) - _2528;
        float _2531 = _2528 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2527 > _2531) || ((_2527 < _2529) || ((_2526 > _2531) || ((_2526 < _2529) || ((_2525 < _2529) || (_2525 > _2531))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2760 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2527, cbModelParam._m0[17u].z, fma(_2526, cbModelParam._m0[17u].y, _2525 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2527, cbModelParam._m0[18u].z, fma(_2526, cbModelParam._m0[18u].y, _2525 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2527, cbModelParam._m0[19u].z, fma(_2526, cbModelParam._m0[19u].y, _2525 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_46_77_ladder = _2760.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2760.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2760.x * cbModelParam._m0[1u].z;
        }
        _1750 = frontier_phi_46_77_ladder_2;
        _1752 = frontier_phi_46_77_ladder_1;
        _1754 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_760, _761, _762), _1662);
        _1750 = _1734.x * cbModelParam._m0[1u].z;
        _1752 = _1734.y * cbModelParam._m0[1u].z;
        _1754 = _1734.z * cbModelParam._m0[1u].z;
    }
    float _1767 = (((_787 * _737) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1750 - _1653)) + _1653);
    float _1769 = (((_787 * _739) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1771 = (((_787 * _740) + _788) * _752) * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1774 = fma(_1771, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1767 * cbSceneParam._m0[89u].x));
    float _1777 = fma(_1771, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1767 * cbSceneParam._m0[90u].x));
    float _1780 = fma(_1771, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1767 * cbSceneParam._m0[91u].x));
    uvec4 _1790 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1792 = _1790.x * 14u;
    uint _1793 = _1792 + 13u;
    float _1798 = _752 + (-1.0);
    float _1801 = (cbLight._m0[_1793].x * _1798) + 1.0;
    float _1802 = (cbLight._m0[_1793].y * _1798) + 1.0;
    uint _1803 = _1792 + 5u;
    float _1809 = isnan(1.0) ? _1802 : (isnan(_1802) ? 1.0 : min(_1802, 1.0));
    uint _1813 = _1792 + 4u;
    float _1819 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
    uint _1823 = _1792 | 1u;
    float _1834 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_634, _635, _636));
    float _1837 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_634, _635, _636));
    float _3728 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _3739 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1842 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1844 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1851 = ((cbLight._m0[_1803].x * _1809) * _1844) + ((cbLight._m0[_1813].x * _1819) * _1842);
    float _1852 = ((_1809 * cbLight._m0[_1803].y) * _1844) + ((_1819 * cbLight._m0[_1813].y) * _1842);
    float _1853 = ((_1809 * cbLight._m0[_1803].z) * _1844) + ((_1819 * cbLight._m0[_1813].z) * _1842);
    uint _1855 = _1792 + 8u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1792].w)) * _637) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1792].x + _662;
    float _1871 = cbLight._m0[_1792].y + _663;
    float _1872 = cbLight._m0[_1792].z + _664;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1792].xyz));
    float _3750 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _1884 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _1885 = dot(vec3(_634, _635, _636), vec3(_1877, _1878, _1879));
    float _3772 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1888 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _1889 = dot(vec3(cbLight._m0[_1792].xyz), vec3(_1877, _1878, _1879));
    float _3783 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _1893 = _1869 * _1869;
    float _1897 = ((_1888 * _1888) * (_1893 + (-1.0))) + 1.0;
    float _1905 = exp2(log2(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * 5.0);
    float _1906 = 0.959999978542327880859375 - _734;
    float _1908 = 0.959999978542327880859375 - _735;
    float _1909 = 0.959999978542327880859375 - _736;
    float _1916 = 1.0 - _1869;
    float _1927 = (0.5 / (((_1884 * ((_1883 * _1916) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1916) + _1869) * _1883))) * _1883;
    float _3794 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * (_1893 / ((_1897 * _1897) * 3.141590118408203125));
    uint _1940 = _1792 + 9u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1823].w)) * _637) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1823].x + _662;
    float _1954 = cbLight._m0[_1823].y + _663;
    float _1955 = cbLight._m0[_1823].z + _664;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_634, _635, _636), vec3(cbLight._m0[_1823].xyz));
    float _3805 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _1967 = dot(vec3(_634, _635, _636), vec3(_1960, _1961, _1962));
    float _3816 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
    float _1970 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _1971 = dot(vec3(cbLight._m0[_1823].xyz), vec3(_1960, _1961, _1962));
    float _3827 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1975 = _1952 * _1952;
    float _1979 = ((_1970 * _1970) * (_1975 + (-1.0))) + 1.0;
    float _1986 = exp2(log2(1.0 - (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) * 5.0);
    float _1993 = 1.0 - _1952;
    float _2003 = (0.5 / (((_1884 * ((_1966 * _1993) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1884 * _1993) + _1952) * _1966))) * _1966;
    float _3838 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1975 / ((_1979 * _1979) * 3.141590118408203125));
    float _2015 = (((((_1986 * _1906) + _737) * cbLight._m0[_1940].x) * _2005) * _1809) + (((((_1905 * _1906) + _737) * cbLight._m0[_1855].x) * _1929) * _1819);
    float _2016 = (((((_1986 * _1908) + _739) * cbLight._m0[_1940].y) * _2005) * _1809) + (((((_1905 * _1908) + _739) * cbLight._m0[_1855].y) * _1929) * _1819);
    float _2017 = (((((_1986 * _1909) + _740) * cbLight._m0[_1940].z) * _2005) * _1809) + (((((_1905 * _1909) + _740) * cbLight._m0[_1855].z) * _1929) * _1819);
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    if (_1790.y == 0u)
    {
        float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2072;
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2072;
        float _2075 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2072;
        uvec4 _2087 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2088 = _2087.x;
        uint _2099 = uint((float(_2087.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2088))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2088)));
        float _2109 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2110 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        uint _2113 = uint(isnan(14.0) ? _2110 : (isnan(_2110) ? 14.0 : min(_2110, 14.0)));
        uvec4 _2118 = texelFetch(g_lightClusterGridBuffer, int(((_2113 << 2u) + (_2099 << 6u)) >> 2u));
        uint _2119 = _2118.x;
        uint _2120 = _2087.z;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        if (((((1u << ((_2120 >> 4u) & 15u)) + 4294967295u) & _2119) == 0u) || ((_2120 & 240u) == 0u))
        {
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
            _2220 = 0.0;
        }
        else
        {
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2221;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            uint _2392 = 0u;
            uint _2401;
            bool _2402;
            for (;;)
            {
                _2401 = texelFetch(g_lightClassification, int((((_2113 << 5u) + (_2099 << 9u)) + (_2392 << 2u)) >> 2u)).x;
                _2402 = _2401 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2402)
                {
                    frontier_phi_74_pred = _2389;
                    frontier_phi_74_pred_1 = _2388;
                    frontier_phi_74_pred_2 = _2387;
                    frontier_phi_74_pred_3 = _2386;
                    frontier_phi_74_pred_4 = _2390;
                    frontier_phi_74_pred_5 = _2391;
                }
                else
                {
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    uint _2567;
                    _2561 = _2386;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2391;
                    _2567 = _2401;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    for (;;)
                    {
                        uint _2571 = uint(findLSB(_2567)) + (_2392 << 5u);
                        uint _2568 = (_2567 + 4294967295u) & _2567;
                        uint _2573 = _2571 * 48u;
                        vec4 _2587 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2573)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2573 + 3u)).x));
                        uint _2593 = (_2571 * 48u) + 4u;
                        vec4 _2606 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2612 = (_2571 * 48u) + 8u;
                        vec3 _2623 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2612)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2612 + 2u)).x));
                        float _2627 = _2587.x - _2073;
                        float _2628 = _2587.y - _2074;
                        float _2629 = _2587.z - _2075;
                        float _2630 = dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629));
                        float _2633 = inversesqrt(_2630);
                        float _2634 = _2633 * _2627;
                        float _2635 = _2633 * _2628;
                        float _2636 = _2633 * _2629;
                        float _2637 = dot(vec3(_692, _695, _698), vec3(_2634, _2635, _2636));
                        float _2642 = 1.0 - (_2630 * _2587.w);
                        float _3859 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2643 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
                        float _2644 = sqrt(_2630) * _2606.w;
                        float _2647 = 1.39999997615814208984375 / (_2644 + 1.39999997615814208984375);
                        float _2648 = _2647 * _2647;
                        float _2651 = ((1.0 - _2648) * _2637) + _2648;
                        float _2654 = _2644 * _2644;
                        float _2658 = ((isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0))) * _2643) / ((_2654 * 0.699999988079071044921875) + 1.0);
                        float _2662 = (-0.0) - _2073;
                        float _2663 = (-0.0) - _2074;
                        float _2664 = (-0.0) - _2075;
                        float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
                        float _2669 = _2668 * _2662;
                        float _2670 = _2668 * _2663;
                        float _2671 = _2668 * _2664;
                        float _2679 = exp2(log2(1.0 / ((_2654 * 3.5) + 5.0)) * 0.25);
                        float _2680 = 1.0 - _768;
                        float _2687 = sqrt(1.0 - ((1.0 - (_2680 * _2680)) * (1.0 - (_2679 * _2679))));
                        float _2688 = _2687 * _2687;
                        float _2689 = _2688 * _2688;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2692 = _2671 + _2636;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2700 = dot(vec3(_692, _695, _698), vec3(_2669, _2670, _2671));
                        float _3875 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2704 = dot(vec3(_692, _695, _698), vec3(_2696 * _2690, _2696 * _2691, _2696 * _2692));
                        float _3886 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _2707 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
                        float _2711 = ((_2707 * _2707) * (_2689 + (-1.0))) + 1.0;
                        float _2712 = _2647 * _2688;
                        float _2713 = _2712 * _2712;
                        float _2716 = ((1.0 - _2713) * _2637) + _2713;
                        float _3897 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
                        float _2718 = 1.0 - _2688;
                        float _2728 = (0.5 / (((_2717 * ((_2703 * _2718) + _2688)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2718) + _2688) * _2703))) * _2717;
                        float _3908 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2739 = (((_2689 * 3.1415927410125732421875) * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) / ((_2711 * _2711) * ((_2654 * 2.1991131305694580078125) + 3.141590118408203125))) * _2643;
                        _2470 = (_2658 * _2606.x) + _2564;
                        _2471 = (_2658 * _2606.y) + _2565;
                        _2472 = (_2658 * _2606.z) + _2566;
                        _2467 = (_2739 * _2623.x) + _2561;
                        _2468 = (_2739 * _2623.y) + _2562;
                        _2469 = (_2739 * _2623.z) + _2563;
                        if (_2568 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2561 = _2467;
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2472;
                            _2567 = _2568;
                        }
                    }
                    frontier_phi_74_pred = _2470;
                    frontier_phi_74_pred_1 = _2469;
                    frontier_phi_74_pred_2 = _2468;
                    frontier_phi_74_pred_3 = _2467;
                    frontier_phi_74_pred_4 = _2471;
                    frontier_phi_74_pred_5 = _2472;
                }
                _2217 = frontier_phi_74_pred;
                _2215 = frontier_phi_74_pred_1;
                _2213 = frontier_phi_74_pred_2;
                _2211 = frontier_phi_74_pred_3;
                _2219 = frontier_phi_74_pred_4;
                _2221 = frontier_phi_74_pred_5;
                uint _2393 = _2392 + 1u;
                if (_2393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2386 = _2211;
                    _2387 = _2213;
                    _2388 = _2215;
                    _2389 = _2217;
                    _2390 = _2219;
                    _2391 = _2221;
                    _2392 = _2393;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
            _2220 = _2221;
        }
        uvec4 _2224 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2225 = _2224.z;
        uint _2227 = (_2225 >> 8u) & 15u;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        if (((4294967295u << _2227) & _2119) == 0u)
        {
            _2354 = _2210;
            _2356 = _2212;
            _2358 = _2214;
            _2360 = _2216;
            _2362 = _2218;
            _2364 = _2220;
        }
        else
        {
            float _2379 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _2380 = _2379 * _2073;
            float _2381 = _2379 * _2074;
            float _2382 = _2379 * _2075;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2227 < ((_2225 >> 12u) & 15u))
            {
                float _2355;
                float _2357;
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2544 = _2210;
                float _2545 = _2212;
                float _2546 = _2214;
                float _2547 = _2216;
                float _2548 = _2218;
                float _2549 = _2220;
                uint _2550 = _2227;
                uint _2559;
                bool _2560;
                for (;;)
                {
                    _2559 = texelFetch(g_lightClassification, int((((_2113 << 5u) + (_2099 << 9u)) + (_2550 << 2u)) >> 2u)).x;
                    _2560 = _2559 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2560)
                    {
                        frontier_phi_83_pred = _2547;
                        frontier_phi_83_pred_1 = _2546;
                        frontier_phi_83_pred_2 = _2545;
                        frontier_phi_83_pred_3 = _2544;
                        frontier_phi_83_pred_4 = _2549;
                        frontier_phi_83_pred_5 = _2548;
                    }
                    else
                    {
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _2778 = _2544;
                        float _2779 = _2545;
                        float _2780 = _2546;
                        float _2781 = _2547;
                        float _2782 = _2548;
                        float _2783 = _2549;
                        uint _2784 = _2559;
                        uint _2785;
                        vec4 _2810;
                        float _2811;
                        vec4 _2826;
                        vec3 _2838;
                        vec4 _2853;
                        vec4 _2868;
                        float _2914;
                        bool _2915;
                        for (;;)
                        {
                            uint _2795 = ((_2550 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2784));
                            _2785 = (_2784 + 4294967295u) & _2784;
                            uint _2797 = _2795 * 40u;
                            _2810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2797 + 3u)).x));
                            _2811 = _2810.w;
                            uint _2813 = (_2795 * 40u) + 4u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            uint _2828 = (_2795 * 40u) + 8u;
                            _2838 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x));
                            uint _2840 = (_2795 * 40u) + 16u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2855 = (_2795 * 40u) + 20u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2870 = (_2795 * 40u) + 24u;
                            vec4 _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2889 = (_2795 * 40u) + 28u;
                            vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2914 = fma(_2075, _2902.z, fma(_2074, _2902.y, _2902.x * _2073)) + _2902.w;
                            _2915 = !((fma(_2075, _2883.z, fma(_2074, _2883.y, _2883.x * _2073)) + _2883.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2915)
                            {
                                float _2942 = _2810.x - _2073;
                                float _2943 = _2810.y - _2074;
                                float _2944 = _2810.z - _2075;
                                float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                                float _2948 = inversesqrt(_2945);
                                float _2949 = _2948 * _2942;
                                float _2950 = _2948 * _2943;
                                float _2951 = _2948 * _2944;
                                float _2955 = 1.0 - (_2945 / (_2811 * _2811));
                                float _3919 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                                float _2956 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
                                float _2960 = sqrt(_2945) * _2826.w;
                                float _2962 = 1.39999997615814208984375 / (_2960 + 1.39999997615814208984375);
                                float _2963 = _2962 * _2962;
                                float _2966 = ((1.0 - _2963) * dot(vec3(_2949, _2950, _2951), vec3(_692, _695, _698))) + _2963;
                                float _2969 = _2960 * _2960;
                                float _2973 = (fma(_2075, _2853.z, fma(_2074, _2853.y, _2853.x * _2073)) + _2853.w) / _2914;
                                float _2974 = (fma(_2075, _2868.z, fma(_2074, _2868.y, _2868.x * _2073)) + _2868.w) / _2914;
                                float _2978 = 1.0 - dot(vec2(_2973, _2974), vec2(_2973, _2974));
                                float _3935 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
                                float _2980 = _2979 * (((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2956) / ((_2969 * 0.699999988079071044921875) + 1.0));
                                float _2992 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                                float _2993 = 1.0 - _768;
                                float _3000 = sqrt(1.0 - ((1.0 - (_2993 * _2993)) * (1.0 - (_2992 * _2992))));
                                float _3001 = _3000 * _3000;
                                float _3002 = _3001 * _3001;
                                float _3003 = _2949 - _2380;
                                float _3004 = _2950 - _2381;
                                float _3005 = _2951 - _2382;
                                float _3009 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
                                float _3013 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2380, (-0.0) - _2381, (-0.0) - _2382));
                                float _3946 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3016 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                                float _3017 = dot(vec3(_692, _695, _698), vec3(_3009 * _3003, _3009 * _3004, _3009 * _3005));
                                float _3957 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3020 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
                                float _3024 = ((_3020 * _3020) * (_3002 + (-1.0))) + 1.0;
                                float _3025 = _2962 * _3001;
                                float _3026 = _3025 * _3025;
                                float _3032 = ((1.0 - _3026) * dot(vec3(_692, _695, _698), vec3(_2949, _2950, _2951))) + _3026;
                                float _3968 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3033 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
                                float _3034 = 1.0 - _3001;
                                float _3044 = (0.5 / (((_3033 * ((_3016 * _3034) + _3001)) + 9.9999999392252902907785028219223e-09) + (((_3033 * _3034) + _3001) * _3016))) * _3033;
                                float _3979 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3054 = (_2979 * _2956) * (((_3002 * 3.1415927410125732421875) * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) / ((_3024 * _3024) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2980 * _2826.x;
                                frontier_phi_89_pred_1 = _3054 * _2838.z;
                                frontier_phi_89_pred_2 = _3054 * _2838.y;
                                frontier_phi_89_pred_3 = _3054 * _2838.x;
                                frontier_phi_89_pred_4 = _2980 * _2826.z;
                                frontier_phi_89_pred_5 = _2980 * _2826.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3061 = frontier_phi_89_pred;
                            _3060 = frontier_phi_89_pred_1;
                            _3059 = frontier_phi_89_pred_2;
                            _3058 = frontier_phi_89_pred_3;
                            _3063 = frontier_phi_89_pred_4;
                            _3062 = frontier_phi_89_pred_5;
                            _2768 = _3061 + _2781;
                            _2769 = _3062 + _2782;
                            _2770 = _3063 + _2783;
                            _2765 = _3058 + _2778;
                            _2766 = _3059 + _2779;
                            _2767 = _3060 + _2780;
                            if (_2785 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2785;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2768;
                        frontier_phi_83_pred_1 = _2767;
                        frontier_phi_83_pred_2 = _2766;
                        frontier_phi_83_pred_3 = _2765;
                        frontier_phi_83_pred_4 = _2770;
                        frontier_phi_83_pred_5 = _2769;
                    }
                    _2361 = frontier_phi_83_pred;
                    _2359 = frontier_phi_83_pred_1;
                    _2357 = frontier_phi_83_pred_2;
                    _2355 = frontier_phi_83_pred_3;
                    _2365 = frontier_phi_83_pred_4;
                    _2363 = frontier_phi_83_pred_5;
                    uint _2551 = _2550 + 1u;
                    if (_2551 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2544 = _2355;
                        _2545 = _2357;
                        _2546 = _2359;
                        _2547 = _2361;
                        _2548 = _2363;
                        _2549 = _2365;
                        _2550 = _2551;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2365;
                frontier_phi_65_66_ladder_1 = _2363;
                frontier_phi_65_66_ladder_2 = _2359;
                frontier_phi_65_66_ladder_3 = _2357;
                frontier_phi_65_66_ladder_4 = _2361;
                frontier_phi_65_66_ladder_5 = _2355;
            }
            else
            {
                frontier_phi_65_66_ladder = _2220;
                frontier_phi_65_66_ladder_1 = _2218;
                frontier_phi_65_66_ladder_2 = _2214;
                frontier_phi_65_66_ladder_3 = _2212;
                frontier_phi_65_66_ladder_4 = _2216;
                frontier_phi_65_66_ladder_5 = _2210;
            }
            _2354 = frontier_phi_65_66_ladder_5;
            _2356 = frontier_phi_65_66_ladder_3;
            _2358 = frontier_phi_65_66_ladder_2;
            _2360 = frontier_phi_65_66_ladder_4;
            _2362 = frontier_phi_65_66_ladder_1;
            _2364 = frontier_phi_65_66_ladder;
        }
        float _2369 = isnan(1.0) ? _752 : (isnan(_752) ? 1.0 : min(_752, 1.0));
        _2132 = (_2369 * _2360) + _1851;
        _2134 = (_2369 * _2362) + _1852;
        _2136 = (_2369 * _2364) + _1853;
        _2138 = ((_2354 * _737) * _2369) + _2015;
        _2140 = ((_2356 * _739) * _2369) + _2016;
        _2142 = ((_2358 * _740) * _2369) + _2017;
    }
    else
    {
        _2132 = _1851;
        _2134 = _1852;
        _2136 = _1853;
        _2138 = _2015;
        _2140 = _2016;
        _2142 = _2017;
    }
    float _3995 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4006 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4017 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2159 = ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_2132 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _752))) + ((_2138 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2160 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_2134 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _752))) + ((_2140 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    float _2161 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * (_2136 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _752))) + ((_2142 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1561)) * cbPerFrame._m0[3u].x);
    uint _2165 = _711 + 6u;
    float _2173 = _670 / cbSceneParam._m0[86u].x;
    float _2174 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2188 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, (log2((isnan(cbSceneParam._m0[77u].w) ? _657 : (isnan(_657) ? cbSceneParam._m0[77u].w : min(_657, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2190 = _2188.x;
    float _2191 = _2188.y;
    float _2192 = _2188.z;
    float _2193 = _2188.w;
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    if (_657 > cbSceneParam._m0[78u].w)
    {
        float _2235 = isnan(_657) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _657 : min(cbSceneParam._m0[80u].w, _657));
        float _2236 = _2235 / _657;
        float _2247 = _2236 * _259;
        float _2248 = _260 * _2236;
        float _2249 = (-0.0) - _2248;
        float _2250 = _2236 * _261;
        float _2252 = (cbSceneParam._m0[77u].w * _2249) / _2235;
        float _2253 = _2252 + cbSceneParam._m0[79u].w;
        float _2254 = cbSceneParam._m0[79u].w - _2248;
        float _2260 = sqrt(((_2247 * _2247) + (_2248 * _2248)) + (_2250 * _2250));
        float _2263 = (1.0 - (cbSceneParam._m0[77u].w / _2235)) * _2260;
        float _2269 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2271 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2480;
        if (abs((_2249 - _2252) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2480 = ((((_2253 > 0.0) ? exp2(_2269 * _2253) : (2.0 - exp2(_2271 * _2253))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2263;
        }
        else
        {
            float _2415 = 1.0 / cbSceneParam._m0[80u].x;
            float _2416 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : max(_2253, _2254));
            float _2417 = isnan(_2254) ? _2253 : (isnan(_2253) ? _2254 : min(_2253, _2254));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            float _2427 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : min(_2417, 0.0));
            _2480 = ((abs(_2260 / _2249) * cbSceneParam._m0[80u].y) * ((((_2426 - _2427) * 2.0) - ((exp2(_2269 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0)))) - exp2(_2269 * (isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0))))) * _2415)) - ((exp2(_2271 * _2426) - exp2(_2271 * _2427)) * _2415))) + (_2263 * cbSceneParam._m0[80u].z);
        }
        vec4 _2482 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2173, _2174, 1.0), 0.0);
        float _2491 = exp2((_2480 * (-1.44269502162933349609375)) * (1.0 - _2482.w));
        float _2492 = log2(_2491);
        float _2508 = log2(_2193);
        _2273 = (exp2(_2508 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].x)) * _2482.x) / cbSceneParam._m0[78u].x)) + _2190;
        _2275 = (exp2(_2508 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].y)) * _2482.y) / cbSceneParam._m0[78u].y)) + _2191;
        _2277 = (exp2(_2508 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].z)) * _2482.z) / cbSceneParam._m0[78u].z)) + _2192;
        _2279 = _2491 * _2193;
    }
    else
    {
        _2273 = _2190;
        _2275 = _2191;
        _2277 = _2192;
        _2279 = _2193;
    }
    float _2291 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2292 = _2291 == 3.0;
    float _2293 = log2(_2279);
    float _2300 = exp2(_2293 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0)));
    float _2301 = exp2(_2293 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
    float _2302 = exp2(_2293 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0)));
    float _2311 = (_2291 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2311 * (_2292 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2273)));
    SV_Target.y = _2311 * (_2292 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2275)));
    SV_Target.z = _2311 * (_2292 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2277)));
    SV_Target.w = cbInstanceData._m0[_2165].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2165].w;
}


