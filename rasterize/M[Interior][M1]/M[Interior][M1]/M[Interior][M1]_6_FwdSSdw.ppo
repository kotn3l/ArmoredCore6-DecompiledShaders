#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1246;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    float _568 = (_558 * ((_514 - _434) - (_514 * _290))) + _434;
    float _569 = (_558 * ((_515 - _435) - (_515 * _290))) + _435;
    float _570 = (_558 * ((_516 - _436) - (_516 * _290))) + _436;
    float _585 = (cbMtdParam._m0[21u].z * _349) * _355;
    float _587 = (cbMtdParam._m0[21u].y * _350) * _355;
    bool _588 = _585 > 0.0;
    float _593;
    if (_588)
    {
        _593 = (1.0 - _361) / _585;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _361) / _585;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _593 = frontier_phi_27_26_ladder;
    }
    bool _595 = _587 > 0.0;
    float _600;
    if (_595)
    {
        _600 = (1.0 - _362) / _587;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _362) / _587;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _600 = frontier_phi_31_30_ladder;
    }
    float _603 = _378 ? (cbMtdParam._m0[18u].x / _356) : 5000.0;
    float _604 = isnan(_600) ? _593 : (isnan(_593) ? _600 : min(_593, _600));
    float _605 = isnan(_603) ? _604 : (isnan(_604) ? _603 : min(_604, _603));
    float _609 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _613 = ((_605 * _356) + _609) / _609;
    float _618 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _620 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _637 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_387 + (_605 * _585)) / _613) + 0.5) + _618) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_390 + (_605 * _587)) / _613) + 0.5) + _620) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _642 = _637.x * cbMtdParam._m0[14u].x;
    float _643 = _637.y * cbMtdParam._m0[14u].y;
    float _644 = _637.z * cbMtdParam._m0[14u].z;
    float _652;
    if (_588)
    {
        _652 = (1.0 - _361) / _585;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_585 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _361) / _585;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _652 = frontier_phi_35_34_ladder;
    }
    float _658;
    if (_595)
    {
        _658 = (1.0 - _362) / _587;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_587 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _362) / _587;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _658 = frontier_phi_39_38_ladder;
    }
    float _660 = isnan(_658) ? _652 : (isnan(_652) ? _658 : min(_652, _658));
    float _661 = isnan(_603) ? _660 : (isnan(_660) ? _603 : min(_660, _603));
    float _668 = ((_661 * _356) + _609) / _609;
    vec4 _682 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_387 + (_661 * _585)) / _668) + 0.5) + _618) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_390 + (_661 * _587)) / _668) + 0.5) + _620) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _684 = _682.w;
    float _686 = _684 - (_684 * _290);
    vec4 _710 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _712 = _710.x;
    vec4 _724 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _732 = (_724.x * 2.0) + (-1.0);
    float _734 = (_724.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_732, _734), vec2(_732, _734));
    float _3453 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _740 = sqrt(1.0 - (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))));
    float _741 = _724.z * _290;
    float _744 = fma(_740, _199, fma(_734, _206, _732 * _192));
    float _747 = fma(_740, _200, fma(_734, _207, _732 * _193));
    float _750 = fma(_740, _201, fma(_734, _208, _732 * _194));
    float _754 = inversesqrt(dot(vec3(_744, _747, _750), vec3(_744, _747, _750)));
    float _755 = _754 * _744;
    float _756 = _754 * _747;
    float _757 = _754 * _750;
    float _3464 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _758 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _3475 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3486 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3497 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3508 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _762 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _782 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _783 = _263 * _782;
    float _784 = _264 * _782;
    float _785 = _265 * _782;
    float _791 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _792 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_757, cbSceneParam._m0[5u].z, fma(_756, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _755));
    float _815 = fma(_757, cbSceneParam._m0[6u].z, fma(_756, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _755));
    float _818 = fma(_757, cbSceneParam._m0[7u].z, fma(_756, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _755));
    uint _831 = uint(roundEven(NORMAL.w)) * 13u;
    uint _833 = _831 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3519 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _3530 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
    float _3541 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _846 = 1.0 - _762;
    float _847 = _843 * _846;
    float _848 = _844 * _846;
    float _849 = _845 * _846;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _762;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _762;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _762;
    float _857 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _791, cbSceneParam._m0[86u].y * _792));
    float _872 = _869.x * TEXCOORD.z;
    float _873 = dot(vec3(_755, _756, _757), vec3(_783, _784, _785));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _755) - _783;
    float _881 = (_876 * _756) - _784;
    float _882 = (_876 * _757) - _785;
    float _886 = abs(dot(vec3(_783, _784, _785), vec3(_755, _756, _757)));
    float _3552 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_758);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _907 = (1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _908 = _901 * _888;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1245;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _972 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _976 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _980 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1003 = _936 + _755;
        float _1004 = _940 + _756;
        float _1005 = _944 + _757;
        float _1015 = fma(_1005, cbModelParam._m0[26u].z, fma(_1004, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[27u].z, fma(_1004, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[28u].z, fma(_1004, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_972 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_976 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[34u].z) + ((((((_980 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1073 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1039.x + (-0.5));
        float _1075 = _1073 * (_1039.y + (-0.5));
        float _1076 = _1073 * (_1039.z + (-0.5));
        float _1083 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1046.x + (-0.5));
        float _1085 = _1083 * (_1046.y + (-0.5));
        float _1086 = _1083 * (_1046.z + (-0.5));
        float _1093 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1053.x + (-0.5));
        float _1095 = _1093 * (_1053.y + (-0.5));
        float _1096 = _1093 * (_1053.z + (-0.5));
        float _1103 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1060.x + (-0.5));
        float _1105 = _1103 * (_1060.y + (-0.5));
        float _1106 = _1103 * (_1060.z + (-0.5));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = _1074 * 0.5;
        float _1111 = _1084 * 0.5;
        float _1112 = _1094 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1127 = (dot(vec3(_755, _756, _757), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1137 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3600 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1139 + 1.0))) + _1144) * _1107;
        float _1154 = _1075 * 0.5;
        float _1155 = _1085 * 0.5;
        float _1156 = _1095 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_755, _756, _757), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3633 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1181 + 1.0))) + _1186) * _1108;
        float _1196 = _1076 * 0.5;
        float _1197 = _1086 * 0.5;
        float _1198 = _1096 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_755, _756, _757), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3666 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1223 + 1.0))) + _1228) * _1109;
        _1245 = _1076;
        _1247 = _1075;
        _1248 = _1074;
        _1249 = _1086;
        _1250 = _1085;
        _1251 = _1084;
        _1252 = _1096;
        _1253 = _1095;
        _1254 = _1094;
        _1255 = _1109;
        _1256 = _1108;
        _1257 = _1107;
        _1258 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
    }
    else
    {
        _1245 = _1246;
        _1247 = _1246;
        _1248 = _1246;
        _1249 = _1246;
        _1250 = _1246;
        _1251 = _1246;
        _1252 = _1246;
        _1253 = _1246;
        _1254 = _1246;
        _1255 = _1246;
        _1256 = _1246;
        _1257 = _1246;
        _1258 = 0.0;
        _1259 = 0.0;
        _1260 = 0.0;
    }
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1286 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1290 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1294 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1317 = _936 + _755;
        float _1318 = _940 + _756;
        float _1319 = _944 + _757;
        float _1329 = fma(_1319, cbModelParam._m0[30u].z, fma(_1318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1317)) - _1286;
        float _1330 = fma(_1319, cbModelParam._m0[31u].z, fma(_1318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1317)) - _1290;
        float _1331 = fma(_1319, cbModelParam._m0[32u].z, fma(_1318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1317)) - _1294;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1286 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1290 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[35u].z) + ((((((_1294 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1385 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1352.x + (-0.5));
        float _1387 = _1385 * (_1352.y + (-0.5));
        float _1388 = _1385 * (_1352.z + (-0.5));
        float _1395 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1359.x + (-0.5));
        float _1397 = _1395 * (_1359.y + (-0.5));
        float _1398 = _1395 * (_1359.z + (-0.5));
        float _1405 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1366.x + (-0.5));
        float _1407 = _1405 * (_1366.y + (-0.5));
        float _1408 = _1405 * (_1366.z + (-0.5));
        float _1415 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1373.x + (-0.5));
        float _1417 = _1415 * (_1373.y + (-0.5));
        float _1418 = _1415 * (_1373.z + (-0.5));
        float _1419 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = _1386 * 0.5;
        float _1423 = _1396 * 0.5;
        float _1424 = _1406 * 0.5;
        float _1425 = dot(vec3(_1422, _1423, _1424), vec3(_1422, _1423, _1424));
        float _1430 = (_1425 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1425);
        float _1438 = (dot(vec3(_755, _756, _757), vec3(_1430 * _1422, _1430 * _1423, _1430 * _1424)) + 1.0) * 0.5;
        float _3707 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1447 = sqrt(((_1423 * _1423) + (_1422 * _1422)) + (_1424 * _1424)) / (_1419 + 9.9999997473787516355514526367188e-06);
        float _3718 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1448 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
        float _1449 = _1448 * 2.0;
        float _1453 = (1.0 - _1448) / (_1448 + 1.0);
        float _3729 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1463 = ((((1.0 - _1454) * (_1449 + 2.0)) * exp2(log2(isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))) * (_1449 + 1.0))) + _1454) * _1419;
        float _1464 = _1387 * 0.5;
        float _1465 = _1397 * 0.5;
        float _1466 = _1407 * 0.5;
        float _1467 = dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466));
        float _1472 = (_1467 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1467);
        float _1480 = (dot(vec3(_755, _756, _757), vec3(_1472 * _1464, _1472 * _1465, _1472 * _1466)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1489 = sqrt(((_1465 * _1465) + (_1464 * _1464)) + (_1466 * _1466)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _3762 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1491 + 1.0))) + _1496) * _1420;
        float _1506 = _1388 * 0.5;
        float _1507 = _1398 * 0.5;
        float _1508 = _1408 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_755, _756, _757), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _3795 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1533 + 1.0))) + _1538) * _1421;
        _1555 = _1388;
        _1556 = _1387;
        _1557 = _1386;
        _1558 = _1398;
        _1559 = _1397;
        _1560 = _1396;
        _1561 = _1408;
        _1562 = _1407;
        _1563 = _1406;
        _1564 = _1421;
        _1565 = _1420;
        _1566 = _1419;
        _1567 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0)));
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
    }
    else
    {
        _1555 = _1246;
        _1556 = _1246;
        _1557 = _1246;
        _1558 = _1246;
        _1559 = _1246;
        _1560 = _1246;
        _1561 = _1246;
        _1562 = _1246;
        _1563 = _1246;
        _1564 = _1246;
        _1565 = _1246;
        _1566 = _1246;
        _1567 = 0.0;
        _1568 = 0.0;
        _1569 = 0.0;
    }
    float _1579 = (cbModelParam._m0[1u].x * (_1567 - _1258)) + _1258;
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1602 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1580, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1605 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1580, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1608 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1580, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1579));
    float _1623 = _880 * 0.5;
    float _1624 = _881 * 0.5;
    float _1625 = _882 * 0.5;
    float _1626 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1629 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1632 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1555, _1558, _1561, _1564));
    float _1666;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1639 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1245, _1249, _1252, _1255));
        float _1643 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1247, _1250, _1253, _1256));
        float _1647 = dot(vec4(_1623, _1624, _1625, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1654 = dot(vec4(cbModelParam._m0[39u]), vec4(_1623, _1624, _1625, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1654) ? 0.0 : (isnan(0.0) ? _1654 : max(0.0, _1654))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1677;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1668 = dot(vec4(cbModelParam._m0[40u]), vec4(_1623, _1624, _1625, 1.0));
        _1677 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1677 = 1.0;
    }
    float _1681 = (_1677 * cbModelParam._m0[1u].x) + (_1666 * (1.0 - cbModelParam._m0[1u].x));
    float _1691 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1692 = isnan(_1691) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1691 : min(cbModelParam._m0[25u].z, _1691));
    float _1772;
    float _1774;
    float _1776;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1739 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1743 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1747 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1750 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1753 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1756 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1784;
        if (_1750 > 0.0)
        {
            _1784 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1784 = frontier_phi_54_52_ladder;
        }
        float _2166;
        if (_1753 > 0.0)
        {
            _2166 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2166 = frontier_phi_63_59_ladder;
        }
        float _2482;
        if (_1756 > 0.0)
        {
            _2482 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2482 = frontier_phi_77_70_ladder;
        }
        float _2484 = isnan(_2166) ? _1784 : (isnan(_1784) ? _2166 : min(_1784, _2166));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1750) + _1739;
        float _2490 = (_2485 * _1753) + _1743;
        float _2491 = (_2485 * _1756) + _1747;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2617 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1692);
            frontier_phi_53_77_ladder = _2617.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2617.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2617.z * cbModelParam._m0[1u].y;
        }
        _1772 = frontier_phi_53_77_ladder;
        _1774 = frontier_phi_53_77_ladder_1;
        _1776 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1760 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1692);
        _1772 = _1760.x * cbModelParam._m0[1u].y;
        _1774 = _1760.y * cbModelParam._m0[1u].y;
        _1776 = _1760.z * cbModelParam._m0[1u].y;
    }
    float _1780 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1781 = isnan(_1780) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1780 : min(cbModelParam._m0[25u].w, _1780));
    float _1869;
    float _1871;
    float _1873;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1833 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1837 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1841 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1844 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1847 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1850 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _2171;
        if (_1844 > 0.0)
        {
            _2171 = abs((1.0 - _1833) / _1844);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1833 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2171 = frontier_phi_65_61_ladder;
        }
        float _2508;
        if (_1847 > 0.0)
        {
            _2508 = abs((1.0 - _1837) / _1847);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1847 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1837 + 1.0) / _1847);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2508 = frontier_phi_79_72_ladder;
        }
        float _2677;
        if (_1850 > 0.0)
        {
            _2677 = abs((1.0 - _1841) / _1850);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1841 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2677 = frontier_phi_93_88_ladder;
        }
        float _2679 = isnan(_2508) ? _2171 : (isnan(_2171) ? _2508 : min(_2171, _2508));
        float _2680 = isnan(_2677) ? _2679 : (isnan(_2679) ? _2677 : min(_2679, _2677));
        float _2684 = (_2680 * _1844) + _1833;
        float _2685 = (_2680 * _1847) + _1837;
        float _2686 = (_2680 * _1850) + _1841;
        float _2687 = _2680 * 9.9999997473787516355514526367188e-05;
        float _2688 = (-1.0) - _2687;
        float _2690 = _2687 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2686 > _2690) || ((_2686 < _2688) || ((_2685 > _2690) || ((_2685 < _2688) || ((_2684 < _2688) || (_2684 > _2690))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2686, cbModelParam._m0[17u].z, fma(_2685, cbModelParam._m0[17u].y, _2684 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2686, cbModelParam._m0[18u].z, fma(_2685, cbModelParam._m0[18u].y, _2684 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2686, cbModelParam._m0[19u].z, fma(_2685, cbModelParam._m0[19u].y, _2684 * cbModelParam._m0[19u].x))), _1781);
            frontier_phi_62_93_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _1869 = frontier_phi_62_93_ladder_2;
        _1871 = frontier_phi_62_93_ladder_1;
        _1873 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1853 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1781);
        _1869 = _1853.x * cbModelParam._m0[1u].z;
        _1871 = _1853.y * cbModelParam._m0[1u].z;
        _1873 = _1853.z * cbModelParam._m0[1u].z;
    }
    float _1886 = (((_907 * _857) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1869 - _1772)) + _1772);
    float _1888 = (((_907 * _859) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1871 - _1774)) + _1774);
    float _1890 = (((_907 * _860) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1873 - _1776)) + _1776);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1888, cbSceneParam._m0[89u].y, _1886 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1888, cbSceneParam._m0[90u].y, _1886 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1888, cbSceneParam._m0[91u].y, _1886 * cbSceneParam._m0[91u].x));
    vec4 _1907 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_791, _792));
    float _1909 = _1907.w;
    float _1921 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1909);
    float _1922 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1909);
    float _1923 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1909);
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_831 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1935 = _872 + (-1.0);
    float _1938 = (cbLight._m0[_1930].x * _1935) + 1.0;
    float _1939 = (cbLight._m0[_1930].y * _1935) + 1.0;
    uint _1940 = _1929 + 5u;
    float _1946 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1950 = _1929 + 4u;
    float _1959 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1963 = _1929 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_755, _756, _757));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_755, _756, _757));
    float _3931 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _3942 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1940].x * _1946) * _1984) + (((cbLight._m0[_1950].x * _1921) * _1959) * _1982);
    float _1992 = ((_1946 * cbLight._m0[_1940].y) * _1984) + (((cbLight._m0[_1950].y * _1922) * _1959) * _1982);
    float _1993 = ((_1946 * cbLight._m0[_1940].z) * _1984) + (((cbLight._m0[_1950].z * _1923) * _1959) * _1982);
    uint _1995 = _1929 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _758) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1929].x + _783;
    float _2011 = cbLight._m0[_1929].y + _784;
    float _2012 = cbLight._m0[_1929].z + _785;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1929].xyz));
    float _3953 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2024 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _2025 = dot(vec3(_755, _756, _757), vec3(_2017, _2018, _2019));
    float _3975 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2017, _2018, _2019));
    float _3986 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0)))) * 5.0);
    float _2046 = 0.959999978542327880859375 - _854;
    float _2048 = 0.959999978542327880859375 - _855;
    float _2049 = 0.959999978542327880859375 - _856;
    float _2056 = 1.0 - _2009;
    float _2067 = (0.5 / (((_2024 * ((_2023 * _2056) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2056) + _2009) * _2023))) * _2023;
    float _3997 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2083 = _1929 + 9u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _758) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1963].x + _783;
    float _2097 = cbLight._m0[_1963].y + _784;
    float _2098 = cbLight._m0[_1963].z + _785;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_755, _756, _757), vec3(cbLight._m0[_1963].xyz));
    float _4008 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _2110 = dot(vec3(_755, _756, _757), vec3(_2103, _2104, _2105));
    float _4019 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2103, _2104, _2105));
    float _4030 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2095 * _2095;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * 5.0);
    float _2136 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2024 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2136) + _2095) * _2109))) * _2109;
    float _4041 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    float _2158 = (((((_2129 * _2046) + _857) * cbLight._m0[_2083].x) * _2148) * _1946) + ((((cbLight._m0[_1995].x * _1921) * ((_2045 * _2046) + _857)) * _2069) * _1959);
    float _2159 = (((((_2129 * _2048) + _859) * cbLight._m0[_2083].y) * _2148) * _1946) + ((((cbLight._m0[_1995].y * _1922) * ((_2045 * _2048) + _859)) * _2069) * _1959);
    float _2160 = (((((_2129 * _2049) + _860) * cbLight._m0[_2083].z) * _2148) * _1946) + ((((cbLight._m0[_1995].z * _1923) * ((_2045 * _2049) + _860)) * _2069) * _1959);
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1927.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _792) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _791) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
        }
        else
        {
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            float _2549 = 0.0;
            float _2550 = 0.0;
            uint _2551 = 0u;
            uint _2560;
            bool _2561;
            for (;;)
            {
                _2560 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2551 << 2u)) >> 2u)).x;
                _2561 = _2560 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2561)
                {
                    frontier_phi_90_pred = _2550;
                    frontier_phi_90_pred_1 = _2545;
                    frontier_phi_90_pred_2 = _2546;
                    frontier_phi_90_pred_3 = _2547;
                    frontier_phi_90_pred_4 = _2548;
                    frontier_phi_90_pred_5 = _2549;
                }
                else
                {
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    uint _2726;
                    _2720 = _2545;
                    _2721 = _2546;
                    _2722 = _2547;
                    _2723 = _2548;
                    _2724 = _2549;
                    _2725 = _2550;
                    _2726 = _2560;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    for (;;)
                    {
                        uint _2730 = uint(findLSB(_2726)) + (_2551 << 5u);
                        uint _2727 = (_2726 + 4294967295u) & _2726;
                        uint _2732 = _2730 * 48u;
                        vec4 _2746 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 3u)).x));
                        uint _2752 = (_2730 * 48u) + 4u;
                        vec4 _2765 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2771 = (_2730 * 48u) + 8u;
                        vec3 _2782 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x));
                        float _2786 = _2746.x - _2216;
                        float _2787 = _2746.y - _2217;
                        float _2788 = _2746.z - _2218;
                        float _2789 = dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788));
                        float _2792 = inversesqrt(_2789);
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2796 = dot(vec3(_812, _815, _818), vec3(_2793, _2794, _2795));
                        float _2801 = 1.0 - (_2789 * _2746.w);
                        float _4062 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                        float _2803 = sqrt(_2789) * _2765.w;
                        float _2806 = 1.39999997615814208984375 / (_2803 + 1.39999997615814208984375);
                        float _2807 = _2806 * _2806;
                        float _2810 = ((1.0 - _2807) * _2796) + _2807;
                        float _2813 = _2803 * _2803;
                        float _2817 = ((isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0))) * _2802) / ((_2813 * 0.699999988079071044921875) + 1.0);
                        float _2821 = (-0.0) - _2216;
                        float _2822 = (-0.0) - _2217;
                        float _2823 = (-0.0) - _2218;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2828 = _2827 * _2821;
                        float _2829 = _2827 * _2822;
                        float _2830 = _2827 * _2823;
                        float _2838 = exp2(log2(1.0 / ((_2813 * 3.5) + 5.0)) * 0.25);
                        float _2839 = 1.0 - _888;
                        float _2846 = sqrt(1.0 - ((1.0 - (_2839 * _2839)) * (1.0 - (_2838 * _2838))));
                        float _2847 = _2846 * _2846;
                        float _2848 = _2847 * _2847;
                        float _2849 = _2828 + _2793;
                        float _2850 = _2829 + _2794;
                        float _2851 = _2830 + _2795;
                        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
                        float _2859 = dot(vec3(_812, _815, _818), vec3(_2828, _2829, _2830));
                        float _4078 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2862 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2863 = dot(vec3(_812, _815, _818), vec3(_2855 * _2849, _2855 * _2850, _2855 * _2851));
                        float _4089 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
                        float _2866 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2870 = ((_2866 * _2866) * (_2848 + (-1.0))) + 1.0;
                        float _2871 = _2806 * _2847;
                        float _2872 = _2871 * _2871;
                        float _2875 = ((1.0 - _2872) * _2796) + _2872;
                        float _4100 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
                        float _2876 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2877 = 1.0 - _2847;
                        float _2887 = (0.5 / (((_2876 * ((_2862 * _2877) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2876 * _2877) + _2847) * _2862))) * _2876;
                        float _4111 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
                        float _2898 = (((_2848 * 3.1415927410125732421875) * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) / ((_2870 * _2870) * ((_2813 * 2.1991131305694580078125) + 3.141590118408203125))) * _2802;
                        _2629 = (_2817 * _2765.x) + _2723;
                        _2630 = (_2817 * _2765.y) + _2724;
                        _2631 = (_2817 * _2765.z) + _2725;
                        _2626 = (_2898 * _2782.x) + _2720;
                        _2627 = (_2898 * _2782.y) + _2721;
                        _2628 = (_2898 * _2782.z) + _2722;
                        if (_2727 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2720 = _2626;
                            _2721 = _2627;
                            _2722 = _2628;
                            _2723 = _2629;
                            _2724 = _2630;
                            _2725 = _2631;
                            _2726 = _2727;
                        }
                    }
                    frontier_phi_90_pred = _2631;
                    frontier_phi_90_pred_1 = _2626;
                    frontier_phi_90_pred_2 = _2627;
                    frontier_phi_90_pred_3 = _2628;
                    frontier_phi_90_pred_4 = _2629;
                    frontier_phi_90_pred_5 = _2630;
                }
                _2380 = frontier_phi_90_pred;
                _2370 = frontier_phi_90_pred_1;
                _2372 = frontier_phi_90_pred_2;
                _2374 = frontier_phi_90_pred_3;
                _2376 = frontier_phi_90_pred_4;
                _2378 = frontier_phi_90_pred_5;
                uint _2552 = _2551 + 1u;
                if (_2552 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2545 = _2370;
                    _2546 = _2372;
                    _2547 = _2374;
                    _2548 = _2376;
                    _2549 = _2378;
                    _2550 = _2380;
                    _2551 = _2552;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
        }
        uvec4 _2383 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2384 = _2383.z;
        uint _2386 = (_2384 >> 8u) & 15u;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        float _2523;
        if (((4294967295u << _2386) & _2262) == 0u)
        {
            _2513 = _2369;
            _2515 = _2371;
            _2517 = _2373;
            _2519 = _2375;
            _2521 = _2377;
            _2523 = _2379;
        }
        else
        {
            float _2538 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2539 = _2538 * _2216;
            float _2540 = _2538 * _2217;
            float _2541 = _2538 * _2218;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2386 < ((_2384 >> 12u) & 15u))
            {
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2524;
                float _2703 = _2369;
                float _2704 = _2371;
                float _2705 = _2373;
                float _2706 = _2375;
                float _2707 = _2377;
                float _2708 = _2379;
                uint _2709 = _2386;
                uint _2718;
                bool _2719;
                for (;;)
                {
                    _2718 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2709 << 2u)) >> 2u)).x;
                    _2719 = _2718 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2719)
                    {
                        frontier_phi_99_pred = _2706;
                        frontier_phi_99_pred_1 = _2705;
                        frontier_phi_99_pred_2 = _2704;
                        frontier_phi_99_pred_3 = _2703;
                        frontier_phi_99_pred_4 = _2708;
                        frontier_phi_99_pred_5 = _2707;
                    }
                    else
                    {
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _2937 = _2703;
                        float _2938 = _2704;
                        float _2939 = _2705;
                        float _2940 = _2706;
                        float _2941 = _2707;
                        float _2942 = _2708;
                        uint _2943 = _2718;
                        uint _2944;
                        vec4 _2969;
                        float _2970;
                        vec4 _2985;
                        vec3 _2997;
                        vec4 _3012;
                        vec4 _3027;
                        float _3073;
                        bool _3074;
                        for (;;)
                        {
                            uint _2954 = ((_2709 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2943));
                            _2944 = (_2943 + 4294967295u) & _2943;
                            uint _2956 = _2954 * 40u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            _2970 = _2969.w;
                            uint _2972 = (_2954 * 40u) + 4u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2987 = (_2954 * 40u) + 8u;
                            _2997 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x));
                            uint _2999 = (_2954 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2954 * 40u) + 20u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3029 = (_2954 * 40u) + 24u;
                            vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3029)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3029 + 3u)).x));
                            uint _3048 = (_2954 * 40u) + 28u;
                            vec4 _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3073 = fma(_2218, _3061.z, fma(_2217, _3061.y, _3061.x * _2216)) + _3061.w;
                            _3074 = !((fma(_2218, _3042.z, fma(_2217, _3042.y, _3042.x * _2216)) + _3042.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3074)
                            {
                                float _3101 = _2969.x - _2216;
                                float _3102 = _2969.y - _2217;
                                float _3103 = _2969.z - _2218;
                                float _3104 = dot(vec3(_3101, _3102, _3103), vec3(_3101, _3102, _3103));
                                float _3107 = inversesqrt(_3104);
                                float _3108 = _3107 * _3101;
                                float _3109 = _3107 * _3102;
                                float _3110 = _3107 * _3103;
                                float _3114 = 1.0 - (_3104 / (_2970 * _2970));
                                float _4122 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                                float _3119 = sqrt(_3104) * _2985.w;
                                float _3121 = 1.39999997615814208984375 / (_3119 + 1.39999997615814208984375);
                                float _3122 = _3121 * _3121;
                                float _3125 = ((1.0 - _3122) * dot(vec3(_3108, _3109, _3110), vec3(_812, _815, _818))) + _3122;
                                float _3128 = _3119 * _3119;
                                float _3132 = (fma(_2218, _3012.z, fma(_2217, _3012.y, _3012.x * _2216)) + _3012.w) / _3073;
                                float _3133 = (fma(_2218, _3027.z, fma(_2217, _3027.y, _3027.x * _2216)) + _3027.w) / _3073;
                                float _3137 = 1.0 - dot(vec2(_3132, _3133), vec2(_3132, _3133));
                                float _4138 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3139 = _3138 * (((isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0))) * _3115) / ((_3128 * 0.699999988079071044921875) + 1.0));
                                float _3151 = exp2(log2(1.0 / ((_3128 * 3.5) + 5.0)) * 0.25);
                                float _3152 = 1.0 - _888;
                                float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                                float _3160 = _3159 * _3159;
                                float _3161 = _3160 * _3160;
                                float _3162 = _3108 - _2539;
                                float _3163 = _3109 - _2540;
                                float _3164 = _3110 - _2541;
                                float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                                float _3172 = dot(vec3(_812, _815, _818), vec3((-0.0) - _2539, (-0.0) - _2540, (-0.0) - _2541));
                                float _4149 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3175 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3176 = dot(vec3(_812, _815, _818), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                                float _4160 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                                float _3184 = _3121 * _3160;
                                float _3185 = _3184 * _3184;
                                float _3191 = ((1.0 - _3185) * dot(vec3(_812, _815, _818), vec3(_3108, _3109, _3110))) + _3185;
                                float _4171 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                                float _3192 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3193 = 1.0 - _3160;
                                float _3203 = (0.5 / (((_3192 * ((_3175 * _3193) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3192 * _3193) + _3160) * _3175))) * _3192;
                                float _4182 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3213 = (_3138 * _3115) * (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) / ((_3183 * _3183) * ((_3128 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3139 * _2985.z;
                                frontier_phi_105_pred_1 = _3213 * _2997.x;
                                frontier_phi_105_pred_2 = _3213 * _2997.y;
                                frontier_phi_105_pred_3 = _3213 * _2997.z;
                                frontier_phi_105_pred_4 = _3139 * _2985.x;
                                frontier_phi_105_pred_5 = _3139 * _2985.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3222 = frontier_phi_105_pred;
                            _3217 = frontier_phi_105_pred_1;
                            _3218 = frontier_phi_105_pred_2;
                            _3219 = frontier_phi_105_pred_3;
                            _3220 = frontier_phi_105_pred_4;
                            _3221 = frontier_phi_105_pred_5;
                            _2927 = _3220 + _2940;
                            _2928 = _3221 + _2941;
                            _2929 = _3222 + _2942;
                            _2924 = _3217 + _2937;
                            _2925 = _3218 + _2938;
                            _2926 = _3219 + _2939;
                            if (_2944 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2929;
                                _2943 = _2944;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2927;
                        frontier_phi_99_pred_1 = _2926;
                        frontier_phi_99_pred_2 = _2925;
                        frontier_phi_99_pred_3 = _2924;
                        frontier_phi_99_pred_4 = _2929;
                        frontier_phi_99_pred_5 = _2928;
                    }
                    _2520 = frontier_phi_99_pred;
                    _2518 = frontier_phi_99_pred_1;
                    _2516 = frontier_phi_99_pred_2;
                    _2514 = frontier_phi_99_pred_3;
                    _2524 = frontier_phi_99_pred_4;
                    _2522 = frontier_phi_99_pred_5;
                    uint _2710 = _2709 + 1u;
                    if (_2710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2703 = _2514;
                        _2704 = _2516;
                        _2705 = _2518;
                        _2706 = _2520;
                        _2707 = _2522;
                        _2708 = _2524;
                        _2709 = _2710;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2524;
                frontier_phi_81_82_ladder_1 = _2520;
                frontier_phi_81_82_ladder_2 = _2518;
                frontier_phi_81_82_ladder_3 = _2516;
                frontier_phi_81_82_ladder_4 = _2514;
                frontier_phi_81_82_ladder_5 = _2522;
            }
            else
            {
                frontier_phi_81_82_ladder = _2379;
                frontier_phi_81_82_ladder_1 = _2375;
                frontier_phi_81_82_ladder_2 = _2373;
                frontier_phi_81_82_ladder_3 = _2371;
                frontier_phi_81_82_ladder_4 = _2369;
                frontier_phi_81_82_ladder_5 = _2377;
            }
            _2513 = frontier_phi_81_82_ladder_4;
            _2515 = frontier_phi_81_82_ladder_3;
            _2517 = frontier_phi_81_82_ladder_2;
            _2519 = frontier_phi_81_82_ladder_1;
            _2521 = frontier_phi_81_82_ladder_5;
            _2523 = frontier_phi_81_82_ladder;
        }
        float _2528 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2275 = (_2528 * _2519) + _1991;
        _2277 = (_2528 * _2521) + _1992;
        _2279 = (_2528 * _2523) + _1993;
        _2281 = ((_2513 * _857) * _2528) + _2158;
        _2283 = ((_2515 * _859) * _2528) + _2159;
        _2285 = ((_2517 * _860) * _2528) + _2160;
    }
    else
    {
        _2275 = _1991;
        _2277 = _1992;
        _2279 = _1993;
        _2281 = _2158;
        _2283 = _2159;
        _2285 = _2160;
    }
    uint _2291 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _4198 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4209 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4220 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2316 = (((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2275 + ((isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) * _872))) + ((_2281 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2291].x * ((_686 * ((_642 - _568) - (_642 * _290))) + _568));
    float _2318 = ((cbInstanceData._m0[_2291].y * ((_686 * ((_643 - _569) - (_643 * _290))) + _569)) + ((_2283 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2277 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _872)));
    float _2320 = ((cbInstanceData._m0[_2291].z * ((_686 * ((_644 - _570) - (_644 * _290))) + _570)) + ((_2285 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1681)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2279 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _872)));
    uint _2324 = _831 + 6u;
    float _2332 = _791 / cbSceneParam._m0[86u].x;
    float _2333 = _792 / cbSceneParam._m0[86u].y;
    vec4 _2347 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2349 = _2347.x;
    float _2350 = _2347.y;
    float _2351 = _2347.z;
    float _2352 = _2347.w;
    float _2432;
    float _2434;
    float _2436;
    float _2438;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2394 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2395 = _2394 / _778;
        float _2406 = _2395 * _263;
        float _2407 = _264 * _2395;
        float _2408 = (-0.0) - _2407;
        float _2409 = _2395 * _265;
        float _2411 = (cbSceneParam._m0[77u].w * _2408) / _2394;
        float _2412 = _2411 + cbSceneParam._m0[79u].w;
        float _2413 = cbSceneParam._m0[79u].w - _2407;
        float _2419 = sqrt(((_2406 * _2406) + (_2407 * _2407)) + (_2409 * _2409));
        float _2422 = (1.0 - (cbSceneParam._m0[77u].w / _2394)) * _2419;
        float _2428 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2430 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2639;
        if (abs((_2408 - _2411) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2639 = ((((_2412 > 0.0) ? exp2(_2428 * _2412) : (2.0 - exp2(_2430 * _2412))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2422;
        }
        else
        {
            float _2574 = 1.0 / cbSceneParam._m0[80u].x;
            float _2575 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : max(_2412, _2413));
            float _2576 = isnan(_2413) ? _2412 : (isnan(_2412) ? _2413 : min(_2412, _2413));
            float _2585 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : min(_2575, 0.0));
            float _2586 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : min(_2576, 0.0));
            _2639 = ((abs(_2419 / _2408) * cbSceneParam._m0[80u].y) * ((((_2585 - _2586) * 2.0) - ((exp2(_2428 * (isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0)))) - exp2(_2428 * (isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0))))) * _2574)) - ((exp2(_2430 * _2585) - exp2(_2430 * _2586)) * _2574))) + (_2422 * cbSceneParam._m0[80u].z);
        }
        vec4 _2641 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2332, _2333, 1.0), 0.0);
        float _2650 = exp2((_2639 * (-1.44269502162933349609375)) * (1.0 - _2641.w));
        float _2651 = log2(_2650);
        float _2667 = log2(_2352);
        _2432 = (exp2(_2667 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].x)) * _2641.x) / cbSceneParam._m0[78u].x)) + _2349;
        _2434 = (exp2(_2667 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].y)) * _2641.y) / cbSceneParam._m0[78u].y)) + _2350;
        _2436 = (exp2(_2667 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2651 * cbSceneParam._m0[78u].z)) * _2641.z) / cbSceneParam._m0[78u].z)) + _2351;
        _2438 = _2650 * _2352;
    }
    else
    {
        _2432 = _2349;
        _2434 = _2350;
        _2436 = _2351;
        _2438 = _2352;
    }
    float _2450 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2451 = _2450 == 3.0;
    float _2452 = log2(_2438);
    float _2459 = exp2(_2452 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2460 = exp2(_2452 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)));
    float _2461 = exp2(_2452 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0)));
    float _2470 = (_2450 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2470 * (_2451 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.y = _2470 * (_2451 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.z = _2470 * (_2451 ? _2461 : (_2461 + (cbSceneParam._m0[72u].w * _2436)));
    SV_Target.w = cbInstanceData._m0[_2324].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2324].w;
}


