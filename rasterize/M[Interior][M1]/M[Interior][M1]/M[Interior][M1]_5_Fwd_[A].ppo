#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1160;
float _3324;
float _3325;
float _3326;
float _3327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    vec4 _582 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _584 = _582.x;
    vec4 _596 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _604 = (_596.x * 2.0) + (-1.0);
    float _606 = (_596.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_604, _606), vec2(_604, _606));
    float _3366 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))));
    float _613 = _596.z * _290;
    float _616 = fma(_612, _199, fma(_606, _206, _604 * _192));
    float _619 = fma(_612, _200, fma(_606, _207, _604 * _193));
    float _622 = fma(_612, _201, fma(_606, _208, _604 * _194));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3377 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _630 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3399 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3410 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3421 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _634 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _655 = _263 * _654;
    float _656 = _264 * _654;
    float _657 = _265 * _654;
    vec4 _662 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _664 = _662.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _841 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _847 = (cbMatDynParam._m0[5u].x * _841) + cbMatDynParam._m0[5u].y;
        float _3432 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _852 = (cbMatDynParam._m0[5u].z * _841) + cbMatDynParam._m0[5u].w;
        float _3443 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) - _848)) + _848) < ((_664 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _677 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _678 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _698 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _701 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _704 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _719 = _717 + 9u;
    uint _720 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3454 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
    float _3465 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
    float _3476 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _732 = 1.0 - _634;
    float _733 = _729 * _732;
    float _734 = _730 * _732;
    float _735 = _731 * _732;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _634;
    float _741 = (_730 + (-0.039999999105930328369140625)) * _634;
    float _742 = (_731 + (-0.039999999105930328369140625)) * _634;
    float _743 = _740 + 0.039999999105930328369140625;
    float _745 = _741 + 0.039999999105930328369140625;
    float _746 = _742 + 0.039999999105930328369140625;
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _677, cbSceneParam._m0[86u].y * _678));
    float _758 = _755.x * TEXCOORD.z;
    float _759 = dot(vec3(_627, _628, _629), vec3(_655, _656, _657));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _627) - _655;
    float _767 = (_762 * _628) - _656;
    float _768 = (_762 * _629) - _657;
    float _772 = abs(dot(vec3(_655, _656, _657), vec3(_627, _628, _629)));
    float _3487 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_630);
    float _787 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _793 = (1.0 - _787) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _794 = _787 * _774;
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1159;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _886 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _890 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _894 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _917 = _822 + _627;
        float _918 = _826 + _628;
        float _919 = _830 + _629;
        float _929 = fma(_919, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_886 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_890 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[34u].z) + ((((((_894 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _987 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_953.x + (-0.5));
        float _989 = _987 * (_953.y + (-0.5));
        float _990 = _987 * (_953.z + (-0.5));
        float _997 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_960.x + (-0.5));
        float _999 = _997 * (_960.y + (-0.5));
        float _1000 = _997 * (_960.z + (-0.5));
        float _1007 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_967.x + (-0.5));
        float _1009 = _1007 * (_967.y + (-0.5));
        float _1010 = _1007 * (_967.z + (-0.5));
        float _1017 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_974.x + (-0.5));
        float _1019 = _1017 * (_974.y + (-0.5));
        float _1020 = _1017 * (_974.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1041 = (dot(vec3(_627, _628, _629), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1051 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3535 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1053 + 1.0))) + _1058) * _1021;
        float _1068 = _989 * 0.5;
        float _1069 = _999 * 0.5;
        float _1070 = _1009 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_627, _628, _629), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3568 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1095 + 1.0))) + _1100) * _1022;
        float _1110 = _990 * 0.5;
        float _1111 = _1000 * 0.5;
        float _1112 = _1010 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_627, _628, _629), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3601 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1137 + 1.0))) + _1142) * _1023;
        _1159 = _990;
        _1161 = _989;
        _1162 = _988;
        _1163 = _1000;
        _1164 = _999;
        _1165 = _998;
        _1166 = _1010;
        _1167 = _1009;
        _1168 = _1008;
        _1169 = _1023;
        _1170 = _1022;
        _1171 = _1021;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
    }
    else
    {
        _1159 = _1160;
        _1161 = _1160;
        _1162 = _1160;
        _1163 = _1160;
        _1164 = _1160;
        _1165 = _1160;
        _1166 = _1160;
        _1167 = _1160;
        _1168 = _1160;
        _1169 = _1160;
        _1170 = _1160;
        _1171 = _1160;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1207 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1211 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1234 = _822 + _627;
        float _1235 = _826 + _628;
        float _1236 = _830 + _629;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_627, _628, _629), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3664 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_627, _628, _629), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3697 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_627, _628, _629), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3730 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1160;
        _1473 = _1160;
        _1474 = _1160;
        _1475 = _1160;
        _1476 = _1160;
        _1477 = _1160;
        _1478 = _1160;
        _1479 = _1160;
        _1480 = _1160;
        _1481 = _1160;
        _1482 = _1160;
        _1483 = _1160;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1172)) + _1172;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1173)) + _1173;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1174)) + _1174;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _766 * 0.5;
    float _1541 = _767 * 0.5;
    float _1542 = _768 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1159, _1163, _1166, _1169));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1657 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1661 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1665 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1668 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1671 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1674 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1702;
        if (_1668 > 0.0)
        {
            _1702 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1702 = frontier_phi_41_39_ladder;
        }
        float _2060;
        if (_1671 > 0.0)
        {
            _2060 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2060 = frontier_phi_50_46_ladder;
        }
        float _2384;
        if (_1674 > 0.0)
        {
            _2384 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2384 = frontier_phi_64_57_ladder;
        }
        float _2386 = isnan(_2060) ? _1702 : (isnan(_1702) ? _2060 : min(_1702, _2060));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1668) + _1657;
        float _2392 = (_2387 * _1671) + _1661;
        float _2393 = (_2387 * _1674) + _1665;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2535 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_40_64_ladder = _2535.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2535.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2535.x * cbModelParam._m0[1u].y;
        }
        _1690 = frontier_phi_40_64_ladder_2;
        _1692 = frontier_phi_40_64_ladder_1;
        _1694 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1609);
        _1690 = _1678.x * cbModelParam._m0[1u].y;
        _1692 = _1678.y * cbModelParam._m0[1u].y;
        _1694 = _1678.z * cbModelParam._m0[1u].y;
    }
    float _1698 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1698 : min(cbModelParam._m0[25u].w, _1698));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1751 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1755 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1759 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1762 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1765 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1768 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _2065;
        if (_1762 > 0.0)
        {
            _2065 = abs((1.0 - _1751) / _1762);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1751 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2065 = frontier_phi_52_48_ladder;
        }
        float _2410;
        if (_1765 > 0.0)
        {
            _2410 = abs((1.0 - _1755) / _1765);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1755 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2410 = frontier_phi_66_59_ladder;
        }
        float _2600;
        if (_1768 > 0.0)
        {
            _2600 = abs((1.0 - _1759) / _1768);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1759 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2600 = frontier_phi_84_77_ladder;
        }
        float _2602 = isnan(_2410) ? _2065 : (isnan(_2065) ? _2410 : min(_2065, _2410));
        float _2603 = isnan(_2600) ? _2602 : (isnan(_2602) ? _2600 : min(_2602, _2600));
        float _2607 = (_2603 * _1762) + _1751;
        float _2608 = (_2603 * _1765) + _1755;
        float _2609 = (_2603 * _1768) + _1759;
        float _2610 = _2603 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2610;
        float _2613 = _2610 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2609 > _2613) || ((_2609 < _2611) || ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 < _2611) || (_2607 > _2613))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2609, cbModelParam._m0[17u].z, fma(_2608, cbModelParam._m0[17u].y, _2607 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2609, cbModelParam._m0[18u].z, fma(_2608, cbModelParam._m0[18u].y, _2607 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2609, cbModelParam._m0[19u].z, fma(_2608, cbModelParam._m0[19u].y, _2607 * cbModelParam._m0[19u].x))), _1699);
            frontier_phi_49_84_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1787 = frontier_phi_49_84_ladder_2;
        _1789 = frontier_phi_49_84_ladder_1;
        _1791 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1699);
        _1787 = _1771.x * cbModelParam._m0[1u].z;
        _1789 = _1771.y * cbModelParam._m0[1u].z;
        _1791 = _1771.z * cbModelParam._m0[1u].z;
    }
    float _1804 = (((_793 * _743) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1787 - _1690)) + _1690);
    float _1806 = (((_793 * _745) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1789 - _1692)) + _1692);
    float _1808 = (((_793 * _746) + _794) * _758) * ((cbModelParam._m0[1u].w * (_1791 - _1694)) + _1694);
    float _1811 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1804 * cbSceneParam._m0[91u].x));
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1835 = _758 + (-1.0);
    float _1838 = (cbLight._m0[_1830].x * _1835) + 1.0;
    float _1839 = (cbLight._m0[_1830].y * _1835) + 1.0;
    uint _1840 = _1829 + 5u;
    float _1846 = isnan(1.0) ? _1839 : (isnan(_1839) ? 1.0 : min(_1839, 1.0));
    uint _1850 = _1829 + 4u;
    float _1856 = isnan(1.0) ? _1838 : (isnan(_1838) ? 1.0 : min(_1838, 1.0));
    uint _1860 = _1829 | 1u;
    float _1871 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_627, _628, _629));
    float _1874 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_627, _628, _629));
    float _3866 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _3877 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1879 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * 0.3183098733425140380859375;
    float _1881 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.3183098733425140380859375;
    float _1888 = ((cbLight._m0[_1840].x * _1846) * _1881) + ((cbLight._m0[_1850].x * _1856) * _1879);
    float _1889 = ((_1846 * cbLight._m0[_1840].y) * _1881) + ((_1856 * cbLight._m0[_1850].y) * _1879);
    float _1890 = ((_1846 * cbLight._m0[_1840].z) * _1881) + ((_1856 * cbLight._m0[_1850].z) * _1879);
    uint _1892 = _1829 + 8u;
    float _1905 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _630) * 0.949999988079071044921875);
    float _1906 = _1905 * _1905;
    float _1907 = cbLight._m0[_1829].x + _655;
    float _1908 = cbLight._m0[_1829].y + _656;
    float _1909 = cbLight._m0[_1829].z + _657;
    float _1913 = inversesqrt(dot(vec3(_1907, _1908, _1909), vec3(_1907, _1908, _1909)));
    float _1914 = _1913 * _1907;
    float _1915 = _1913 * _1908;
    float _1916 = _1913 * _1909;
    float _1917 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1829].xyz));
    float _3888 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _3899 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1921 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1922 = dot(vec3(_627, _628, _629), vec3(_1914, _1915, _1916));
    float _3910 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1926 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_1914, _1915, _1916));
    float _3921 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1930 = _1906 * _1906;
    float _1934 = ((_1925 * _1925) * (_1930 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
    float _1943 = 0.959999978542327880859375 - _740;
    float _1945 = 0.959999978542327880859375 - _741;
    float _1946 = 0.959999978542327880859375 - _742;
    float _1953 = 1.0 - _1906;
    float _1964 = (0.5 / (((_1921 * ((_1920 * _1953) + _1906)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _1953) + _1906) * _1920))) * _1920;
    float _3932 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1966 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1930 / ((_1934 * _1934) * 3.141590118408203125));
    uint _1977 = _1829 + 9u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1860].w)) * _630) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1860].x + _655;
    float _1991 = cbLight._m0[_1860].y + _656;
    float _1992 = cbLight._m0[_1860].z + _657;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_1860].xyz));
    float _3943 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _2004 = dot(vec3(_627, _628, _629), vec3(_1997, _1998, _1999));
    float _3954 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2007 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _2008 = dot(vec3(cbLight._m0[_1860].xyz), vec3(_1997, _1998, _1999));
    float _3965 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2012 = _1989 * _1989;
    float _2016 = ((_2007 * _2007) * (_2012 + (-1.0))) + 1.0;
    float _2023 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
    float _2030 = 1.0 - _1989;
    float _2040 = (0.5 / (((_1921 * ((_2003 * _2030) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_1921 * _2030) + _1989) * _2003))) * _2003;
    float _3976 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2012 / ((_2016 * _2016) * 3.141590118408203125));
    float _2052 = (((((_2023 * _1943) + _743) * cbLight._m0[_1977].x) * _2042) * _1846) + (((((_1942 * _1943) + _743) * cbLight._m0[_1892].x) * _1966) * _1856);
    float _2053 = (((((_2023 * _1945) + _745) * cbLight._m0[_1977].y) * _2042) * _1846) + (((((_1942 * _1945) + _745) * cbLight._m0[_1892].y) * _1966) * _1856);
    float _2054 = (((((_2023 * _1946) + _746) * cbLight._m0[_1977].z) * _2042) * _1846) + (((((_1942 * _1946) + _746) * cbLight._m0[_1892].z) * _1966) * _1856);
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    if (_1827.y == 0u)
    {
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2110 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2109;
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2109;
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2109;
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.x;
        uint _2136 = uint((float(_2124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _678) / _2125))) + floor(float(uint(cbSceneParam._m0[85u].x * _677) / _2125)));
        float _2146 = (log2(_2112 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2147 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        uint _2150 = uint(isnan(14.0) ? _2147 : (isnan(_2147) ? 14.0 : min(_2147, 14.0)));
        uvec4 _2155 = texelFetch(g_lightClusterGridBuffer, int(((_2150 << 2u) + (_2136 << 6u)) >> 2u));
        uint _2156 = _2155.x;
        uint _2157 = _2124.z;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        if (((((1u << ((_2157 >> 4u) & 15u)) + 4294967295u) & _2156) == 0u) || ((_2157 & 240u) == 0u))
        {
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
            _2273 = 0.0;
        }
        else
        {
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2272;
            float _2274;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            uint _2453 = 0u;
            uint _2462;
            bool _2463;
            for (;;)
            {
                _2462 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2453 << 2u)) >> 2u)).x;
                _2463 = _2462 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2463)
                {
                    frontier_phi_79_pred = _2452;
                    frontier_phi_79_pred_1 = _2451;
                    frontier_phi_79_pred_2 = _2450;
                    frontier_phi_79_pred_3 = _2449;
                    frontier_phi_79_pred_4 = _2448;
                    frontier_phi_79_pred_5 = _2447;
                }
                else
                {
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    float _2648;
                    uint _2649;
                    _2643 = _2447;
                    _2644 = _2448;
                    _2645 = _2449;
                    _2646 = _2450;
                    _2647 = _2451;
                    _2648 = _2452;
                    _2649 = _2462;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    for (;;)
                    {
                        uint _2653 = uint(findLSB(_2649)) + (_2453 << 5u);
                        uint _2650 = (_2649 + 4294967295u) & _2649;
                        uint _2655 = _2653 * 48u;
                        vec4 _2669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2655)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2655 + 3u)).x));
                        uint _2675 = (_2653 * 48u) + 4u;
                        vec4 _2688 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2694 = (_2653 * 48u) + 8u;
                        vec3 _2705 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x));
                        float _2709 = _2669.x - _2110;
                        float _2710 = _2669.y - _2111;
                        float _2711 = _2669.z - _2112;
                        float _2712 = dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711));
                        float _2715 = inversesqrt(_2712);
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2719 = dot(vec3(_698, _701, _704), vec3(_2716, _2717, _2718));
                        float _2724 = 1.0 - (_2712 * _2669.w);
                        float _3997 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2725 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
                        float _2726 = sqrt(_2712) * _2688.w;
                        float _2729 = 1.39999997615814208984375 / (_2726 + 1.39999997615814208984375);
                        float _2730 = _2729 * _2729;
                        float _2733 = ((1.0 - _2730) * _2719) + _2730;
                        float _2736 = _2726 * _2726;
                        float _2740 = ((isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0))) * _2725) / ((_2736 * 0.699999988079071044921875) + 1.0);
                        float _2744 = (-0.0) - _2110;
                        float _2745 = (-0.0) - _2111;
                        float _2746 = (-0.0) - _2112;
                        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
                        float _2751 = _2750 * _2744;
                        float _2752 = _2750 * _2745;
                        float _2753 = _2750 * _2746;
                        float _2761 = exp2(log2(1.0 / ((_2736 * 3.5) + 5.0)) * 0.25);
                        float _2762 = 1.0 - _774;
                        float _2769 = sqrt(1.0 - ((1.0 - (_2762 * _2762)) * (1.0 - (_2761 * _2761))));
                        float _2770 = _2769 * _2769;
                        float _2771 = _2770 * _2770;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2774 = _2753 + _2718;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_698, _701, _704), vec3(_2751, _2752, _2753));
                        float _4013 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2785 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2786 = dot(vec3(_698, _701, _704), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _4024 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2789 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
                        float _2793 = ((_2789 * _2789) * (_2771 + (-1.0))) + 1.0;
                        float _2794 = _2729 * _2770;
                        float _2795 = _2794 * _2794;
                        float _2798 = ((1.0 - _2795) * _2719) + _2795;
                        float _4035 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
                        float _2799 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                        float _2800 = 1.0 - _2770;
                        float _2810 = (0.5 / (((_2799 * ((_2785 * _2800) + _2770)) + 9.9999999392252902907785028219223e-09) + (((_2799 * _2800) + _2770) * _2785))) * _2799;
                        float _4046 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
                        float _2821 = (((_2771 * 3.1415927410125732421875) * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) / ((_2793 * _2793) * ((_2736 * 2.1991131305694580078125) + 3.141590118408203125))) * _2725;
                        _2547 = (_2740 * _2688.x) + _2646;
                        _2548 = (_2740 * _2688.y) + _2647;
                        _2549 = (_2740 * _2688.z) + _2648;
                        _2544 = (_2821 * _2705.x) + _2643;
                        _2545 = (_2821 * _2705.y) + _2644;
                        _2546 = (_2821 * _2705.z) + _2645;
                        if (_2650 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2643 = _2544;
                            _2644 = _2545;
                            _2645 = _2546;
                            _2646 = _2547;
                            _2647 = _2548;
                            _2648 = _2549;
                            _2649 = _2650;
                        }
                    }
                    frontier_phi_79_pred = _2549;
                    frontier_phi_79_pred_1 = _2548;
                    frontier_phi_79_pred_2 = _2547;
                    frontier_phi_79_pred_3 = _2546;
                    frontier_phi_79_pred_4 = _2545;
                    frontier_phi_79_pred_5 = _2544;
                }
                _2274 = frontier_phi_79_pred;
                _2272 = frontier_phi_79_pred_1;
                _2270 = frontier_phi_79_pred_2;
                _2268 = frontier_phi_79_pred_3;
                _2266 = frontier_phi_79_pred_4;
                _2264 = frontier_phi_79_pred_5;
                uint _2454 = _2453 + 1u;
                if (_2454 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2447 = _2264;
                    _2448 = _2266;
                    _2449 = _2268;
                    _2450 = _2270;
                    _2451 = _2272;
                    _2452 = _2274;
                    _2453 = _2454;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
            _2273 = _2274;
        }
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.z;
        uint _2280 = (_2278 >> 8u) & 15u;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((4294967295u << _2280) & _2156) == 0u)
        {
            _2415 = _2263;
            _2417 = _2265;
            _2419 = _2267;
            _2421 = _2269;
            _2423 = _2271;
            _2425 = _2273;
        }
        else
        {
            float _2440 = inversesqrt(dot(vec3(_2110, _2111, _2112), vec3(_2110, _2111, _2112)));
            float _2441 = _2440 * _2110;
            float _2442 = _2440 * _2111;
            float _2443 = _2440 * _2112;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2280 < ((_2278 >> 12u) & 15u))
            {
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2626 = _2263;
                float _2627 = _2265;
                float _2628 = _2267;
                float _2629 = _2269;
                float _2630 = _2271;
                float _2631 = _2273;
                uint _2632 = _2280;
                uint _2641;
                bool _2642;
                for (;;)
                {
                    _2641 = texelFetch(g_lightClassification, int((((_2150 << 5u) + (_2136 << 9u)) + (_2632 << 2u)) >> 2u)).x;
                    _2642 = _2641 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2642)
                    {
                        frontier_phi_93_pred = _2630;
                        frontier_phi_93_pred_1 = _2629;
                        frontier_phi_93_pred_2 = _2628;
                        frontier_phi_93_pred_3 = _2627;
                        frontier_phi_93_pred_4 = _2626;
                        frontier_phi_93_pred_5 = _2631;
                    }
                    else
                    {
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _2869 = _2626;
                        float _2870 = _2627;
                        float _2871 = _2628;
                        float _2872 = _2629;
                        float _2873 = _2630;
                        float _2874 = _2631;
                        uint _2875 = _2641;
                        uint _2876;
                        vec4 _2901;
                        float _2902;
                        vec4 _2917;
                        vec3 _2929;
                        vec4 _2944;
                        vec4 _2959;
                        float _3005;
                        bool _3006;
                        for (;;)
                        {
                            uint _2886 = ((_2632 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2875));
                            _2876 = (_2875 + 4294967295u) & _2875;
                            uint _2888 = _2886 * 40u;
                            _2901 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2888)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2888 + 3u)).x));
                            _2902 = _2901.w;
                            uint _2904 = (_2886 * 40u) + 4u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2886 * 40u) + 8u;
                            _2929 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x));
                            uint _2931 = (_2886 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2946 = (_2886 * 40u) + 20u;
                            _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2961 = (_2886 * 40u) + 24u;
                            vec4 _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2980 = (_2886 * 40u) + 28u;
                            vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2980)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2980 + 3u)).x));
                            _3005 = fma(_2112, _2993.z, fma(_2111, _2993.y, _2993.x * _2110)) + _2993.w;
                            _3006 = !((fma(_2112, _2974.z, fma(_2111, _2974.y, _2974.x * _2110)) + _2974.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3006)
                            {
                                float _3033 = _2901.x - _2110;
                                float _3034 = _2901.y - _2111;
                                float _3035 = _2901.z - _2112;
                                float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                                float _3039 = inversesqrt(_3036);
                                float _3040 = _3039 * _3033;
                                float _3041 = _3039 * _3034;
                                float _3042 = _3039 * _3035;
                                float _3046 = 1.0 - (_3036 / (_2902 * _2902));
                                float _4057 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
                                float _3051 = sqrt(_3036) * _2917.w;
                                float _3053 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                                float _3054 = _3053 * _3053;
                                float _3057 = ((1.0 - _3054) * dot(vec3(_3040, _3041, _3042), vec3(_698, _701, _704))) + _3054;
                                float _3060 = _3051 * _3051;
                                float _3064 = (fma(_2112, _2944.z, fma(_2111, _2944.y, _2944.x * _2110)) + _2944.w) / _3005;
                                float _3065 = (fma(_2112, _2959.z, fma(_2111, _2959.y, _2959.x * _2110)) + _2959.w) / _3005;
                                float _3069 = 1.0 - dot(vec2(_3064, _3065), vec2(_3064, _3065));
                                float _4073 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3071 = _3070 * (((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3047) / ((_3060 * 0.699999988079071044921875) + 1.0));
                                float _3083 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                                float _3084 = 1.0 - _774;
                                float _3091 = sqrt(1.0 - ((1.0 - (_3084 * _3084)) * (1.0 - (_3083 * _3083))));
                                float _3092 = _3091 * _3091;
                                float _3093 = _3092 * _3092;
                                float _3094 = _3040 - _2441;
                                float _3095 = _3041 - _2442;
                                float _3096 = _3042 - _2443;
                                float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
                                float _3104 = dot(vec3(_698, _701, _704), vec3((-0.0) - _2441, (-0.0) - _2442, (-0.0) - _2443));
                                float _4084 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3108 = dot(vec3(_698, _701, _704), vec3(_3100 * _3094, _3100 * _3095, _3100 * _3096));
                                float _4095 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
                                float _3115 = ((_3111 * _3111) * (_3093 + (-1.0))) + 1.0;
                                float _3116 = _3053 * _3092;
                                float _3117 = _3116 * _3116;
                                float _3123 = ((1.0 - _3117) * dot(vec3(_698, _701, _704), vec3(_3040, _3041, _3042))) + _3117;
                                float _4106 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                                float _3124 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
                                float _3125 = 1.0 - _3092;
                                float _3135 = (0.5 / (((_3124 * ((_3107 * _3125) + _3092)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3092) * _3107))) * _3124;
                                float _4117 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3145 = (_3070 * _3047) * (((_3093 * 3.1415927410125732421875) * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) / ((_3115 * _3115) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3071 * _2917.z;
                                frontier_phi_99_pred_1 = _3071 * _2917.y;
                                frontier_phi_99_pred_2 = _3071 * _2917.x;
                                frontier_phi_99_pred_3 = _3145 * _2929.z;
                                frontier_phi_99_pred_4 = _3145 * _2929.y;
                                frontier_phi_99_pred_5 = _3145 * _2929.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3154 = frontier_phi_99_pred;
                            _3153 = frontier_phi_99_pred_1;
                            _3152 = frontier_phi_99_pred_2;
                            _3151 = frontier_phi_99_pred_3;
                            _3150 = frontier_phi_99_pred_4;
                            _3149 = frontier_phi_99_pred_5;
                            _2859 = _3152 + _2872;
                            _2860 = _3153 + _2873;
                            _2861 = _3154 + _2874;
                            _2856 = _3149 + _2869;
                            _2857 = _3150 + _2870;
                            _2858 = _3151 + _2871;
                            if (_2876 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2876;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2860;
                        frontier_phi_93_pred_1 = _2859;
                        frontier_phi_93_pred_2 = _2858;
                        frontier_phi_93_pred_3 = _2857;
                        frontier_phi_93_pred_4 = _2856;
                        frontier_phi_93_pred_5 = _2861;
                    }
                    _2424 = frontier_phi_93_pred;
                    _2422 = frontier_phi_93_pred_1;
                    _2420 = frontier_phi_93_pred_2;
                    _2418 = frontier_phi_93_pred_3;
                    _2416 = frontier_phi_93_pred_4;
                    _2426 = frontier_phi_93_pred_5;
                    uint _2633 = _2632 + 1u;
                    if (_2633 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2626 = _2416;
                        _2627 = _2418;
                        _2628 = _2420;
                        _2629 = _2422;
                        _2630 = _2424;
                        _2631 = _2426;
                        _2632 = _2633;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2426;
                frontier_phi_68_69_ladder_1 = _2424;
                frontier_phi_68_69_ladder_2 = _2422;
                frontier_phi_68_69_ladder_3 = _2420;
                frontier_phi_68_69_ladder_4 = _2416;
                frontier_phi_68_69_ladder_5 = _2418;
            }
            else
            {
                frontier_phi_68_69_ladder = _2273;
                frontier_phi_68_69_ladder_1 = _2271;
                frontier_phi_68_69_ladder_2 = _2269;
                frontier_phi_68_69_ladder_3 = _2267;
                frontier_phi_68_69_ladder_4 = _2263;
                frontier_phi_68_69_ladder_5 = _2265;
            }
            _2415 = frontier_phi_68_69_ladder_4;
            _2417 = frontier_phi_68_69_ladder_5;
            _2419 = frontier_phi_68_69_ladder_3;
            _2421 = frontier_phi_68_69_ladder_2;
            _2423 = frontier_phi_68_69_ladder_1;
            _2425 = frontier_phi_68_69_ladder;
        }
        float _2430 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2169 = (_2430 * _2421) + _1888;
        _2171 = (_2430 * _2423) + _1889;
        _2173 = (_2430 * _2425) + _1890;
        _2175 = ((_2415 * _743) * _2430) + _2052;
        _2177 = ((_2417 * _745) * _2430) + _2053;
        _2179 = ((_2419 * _746) * _2430) + _2054;
    }
    else
    {
        _2169 = _1888;
        _2171 = _1889;
        _2173 = _1890;
        _2175 = _2052;
        _2177 = _2053;
        _2179 = _2054;
    }
    uint _2185 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _4133 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4144 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4155 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _2210 = (((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2169 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _758))) + ((_2175 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2185].x * ((_558 * ((_514 - _434) - (_514 * _290))) + _434));
    float _2212 = ((cbInstanceData._m0[_2185].y * ((_558 * ((_515 - _435) - (_515 * _290))) + _435)) + ((_2177 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2171 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _758)));
    float _2214 = ((cbInstanceData._m0[_2185].z * ((_558 * ((_516 - _436) - (_516 * _290))) + _436)) + ((_2179 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1598)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_2173 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _758)));
    float _2215 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2216 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    uint _2218 = _717 + 6u;
    float _2226 = _677 / cbSceneParam._m0[86u].x;
    float _2227 = _678 / cbSceneParam._m0[86u].y;
    vec4 _2241 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2226, _2227, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2243 = _2241.x;
    float _2244 = _2241.y;
    float _2245 = _2241.z;
    float _2246 = _2241.w;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2288 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2289 = _2288 / _650;
        float _2300 = _2289 * _263;
        float _2301 = _264 * _2289;
        float _2302 = (-0.0) - _2301;
        float _2303 = _2289 * _265;
        float _2305 = (cbSceneParam._m0[77u].w * _2302) / _2288;
        float _2306 = _2305 + cbSceneParam._m0[79u].w;
        float _2307 = cbSceneParam._m0[79u].w - _2301;
        float _2313 = sqrt(((_2300 * _2300) + (_2301 * _2301)) + (_2303 * _2303));
        float _2316 = (1.0 - (cbSceneParam._m0[77u].w / _2288)) * _2313;
        float _2322 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2324 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2557;
        if (abs((_2302 - _2305) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2557 = ((((_2306 > 0.0) ? exp2(_2322 * _2306) : (2.0 - exp2(_2324 * _2306))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2316;
        }
        else
        {
            float _2476 = 1.0 / cbSceneParam._m0[80u].x;
            float _2477 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : max(_2306, _2307));
            float _2478 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : min(_2306, _2307));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            float _2488 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : min(_2478, 0.0));
            _2557 = ((abs(_2313 / _2302) * cbSceneParam._m0[80u].y) * ((((_2487 - _2488) * 2.0) - ((exp2(_2322 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)))) - exp2(_2322 * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0))))) * _2476)) - ((exp2(_2324 * _2487) - exp2(_2324 * _2488)) * _2476))) + (_2316 * cbSceneParam._m0[80u].z);
        }
        vec4 _2559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2226, _2227, 1.0), 0.0);
        float _2568 = exp2((_2557 * (-1.44269502162933349609375)) * (1.0 - _2559.w));
        float _2569 = log2(_2568);
        float _2585 = log2(_2246);
        _2326 = (exp2(_2585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].x)) * _2559.x) / cbSceneParam._m0[78u].x)) + _2243;
        _2328 = (exp2(_2585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].y)) * _2559.y) / cbSceneParam._m0[78u].y)) + _2244;
        _2330 = (exp2(_2585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2569 * cbSceneParam._m0[78u].z)) * _2559.z) / cbSceneParam._m0[78u].z)) + _2245;
        _2332 = _2568 * _2246;
    }
    else
    {
        _2326 = _2243;
        _2328 = _2244;
        _2330 = _2245;
        _2332 = _2246;
    }
    bool _2595;
    vec4 _2342;
    vec4 _2364;
    float _2366;
    float _2370;
    float _2371;
    float _2372;
    float _2373;
    bool _2383;
    for (;;)
    {
        _2342 = cbMatDynParam._m0[0u];
        float _2344 = roundEven(_2342.y);
        bool _2345 = _2344 == 3.0;
        float _2346 = log2(_2332);
        float _2353 = exp2(_2346 * cbSceneParam._m0[78u].x) * _2215;
        float _2354 = exp2(_2346 * cbSceneParam._m0[78u].y) * _2216;
        float _2355 = exp2(_2346 * cbSceneParam._m0[78u].z) * _2217;
        float _2362 = _664 + (-0.5);
        _2364 = cbMtdParam._m0[1u];
        _2366 = _2364.y * _2362;
        float _2369 = (_2344 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2370 = _2369 * (_2345 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2326)));
        _2371 = _2369 * (_2345 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2328)));
        _2372 = _2369 * (_2345 ? _2355 : (_2355 + (cbSceneParam._m0[72u].w * _2330)));
        _2373 = _2362 * 0.999000012874603271484375;
        _2383 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2383)
        {
            if ((cbInstanceData._m0[_717 + 7u].x + _2373) < 0.5)
            {
                _2595 = true;
                break;
            }
        }
        uint _2511 = _719 + uint(_2342.w);
        if ((cbInstanceData._m0[_2511].w < 1.0) && ((cbInstanceData._m0[_2511].w + _2373) < 0.5))
        {
            _2595 = true;
            break;
        }
        if ((_2366 + 1.0) < _2364.x)
        {
            _2595 = true;
            break;
        }
        _2595 = false;
        break;
    }
    float _2826;
    if (_2595)
    {
        discard_state = true;
        _2826 = 0.0;
    }
    else
    {
        _2826 = cbInstanceData._m0[_2218].w;
    }
    SV_Target.x = _2370;
    SV_Target.y = _2371;
    SV_Target.z = _2372;
    SV_Target.w = _2826;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2218].w;
    discard_exit();
}


