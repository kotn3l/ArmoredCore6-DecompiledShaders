#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    float _328 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _335 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _344 = cbMtdParam._m0[23u].x + _259;
    float _345 = cbMtdParam._m0[23u].y + _260;
    float _346 = cbMtdParam._m0[23u].z + _261;
    float _360 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_328 * _188, _328 * _189, _328 * _190));
    float _361 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_335 * _202, _335 * _203, _335 * _204));
    float _362 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _366 = inversesqrt(dot(vec3(_360, _361, _362), vec3(_360, _361, _362)));
    float _367 = _366 * _362;
    float _369 = (cbMtdParam._m0[19u].w * _360) * _366;
    float _371 = (cbMtdParam._m0[20u].x * _361) * _366;
    float _374 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _375 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _393;
    float _396;
    float _398;
    if (_369 > 0.0)
    {
        float _379 = (1.0 - _374) / _369;
        _393 = _379;
        _396 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_379 * _367)) * 0.16666667163372039794921875;
        _398 = (fract((_379 * _371) + _375) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _394 = ((-0.0) - _374) / _369;
            frontier_phi_3_2_ladder = (fract((_394 * _371) + _375) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = (fract(_394 * _367) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _393 = frontier_phi_3_2_ladder_1;
        _396 = frontier_phi_3_2_ladder_2;
        _398 = frontier_phi_3_2_ladder;
    }
    float _424;
    float _426;
    float _428;
    if (_371 > 0.0)
    {
        float _411 = (1.0 - _375) / _371;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_411 < _393)
        {
            frontier_phi_8_5_ladder = (fract((_411 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _411;
            frontier_phi_8_5_ladder_2 = (fract(_411 * _367) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _396;
            frontier_phi_8_5_ladder_1 = _393;
            frontier_phi_8_5_ladder_2 = _398;
        }
        _424 = frontier_phi_8_5_ladder_1;
        _426 = frontier_phi_8_5_ladder;
        _428 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_371 < 0.0)
        {
            float _425 = ((-0.0) - _375) / _371;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_425 < _393)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_425 * _369) + _374) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _425;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_425 * _367) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _396;
                frontier_phi_8_6_ladder_9_ladder_1 = _393;
                frontier_phi_8_6_ladder_9_ladder_2 = _398;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _396;
            frontier_phi_8_6_ladder_1 = _393;
            frontier_phi_8_6_ladder_2 = _398;
        }
        _424 = frontier_phi_8_6_ladder_1;
        _426 = frontier_phi_8_6_ladder;
        _428 = frontier_phi_8_6_ladder_2;
    }
    float _432 = (_367 > 0.0) ? (cbMtdParam._m0[16u].w / _367) : 5000.0;
    float _445;
    float _446;
    if (_432 < _424)
    {
        _445 = ((_374 + cbMtdParam._m0[17u].x) + (_432 * _369)) * 0.16666667163372039794921875;
        _446 = (((_432 * _371) + _375) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _445 = _426;
        _446 = _428;
    }
    vec4 _448 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_445, _446));
    float _453 = _448.x * cbMtdParam._m0[13u].x;
    float _454 = _448.y * cbMtdParam._m0[13u].y;
    float _455 = _448.z * cbMtdParam._m0[13u].z;
    vec4 _473 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _475 = _473.x;
    vec4 _487 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _495 = (_487.x * 2.0) + (-1.0);
    float _497 = (_487.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_495, _497), vec2(_495, _497));
    float _3145 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))));
    float _504 = _487.z * _286;
    float _507 = fma(_503, _195, fma(_497, _202, _495 * _188));
    float _510 = fma(_503, _196, fma(_497, _203, _495 * _189));
    float _513 = fma(_503, _197, fma(_497, _204, _495 * _190));
    float _517 = inversesqrt(dot(vec3(_507, _510, _513), vec3(_507, _510, _513)));
    float _518 = _517 * _507;
    float _519 = _517 * _510;
    float _520 = _517 * _513;
    float _3156 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _521 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
    float _3167 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3178 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3189 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3200 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _525 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _546 = _259 * _545;
    float _547 = _260 * _545;
    float _548 = _261 * _545;
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _576 = fma(_520, cbSceneParam._m0[5u].z, fma(_519, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _518));
    float _579 = fma(_520, cbSceneParam._m0[6u].z, fma(_519, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _518));
    float _582 = fma(_520, cbSceneParam._m0[7u].z, fma(_519, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _518));
    uint _595 = uint(roundEven(NORMAL.w)) * 13u;
    uint _596 = _595 + 9u;
    uint _597 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _603 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0)))) * cbInstanceData._m0[_597].x;
    float _604 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * cbInstanceData._m0[_597].y;
    float _605 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_597].z;
    float _3211 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _3222 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _608 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    float _609 = 1.0 - _525;
    float _610 = _606 * _609;
    float _611 = _607 * _609;
    float _612 = _608 * _609;
    float _617 = (_606 + (-0.039999999105930328369140625)) * _525;
    float _618 = (_607 + (-0.039999999105930328369140625)) * _525;
    float _619 = (_608 + (-0.039999999105930328369140625)) * _525;
    float _620 = _617 + 0.039999999105930328369140625;
    float _622 = _618 + 0.039999999105930328369140625;
    float _623 = _619 + 0.039999999105930328369140625;
    vec4 _632 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _635 = _632.x * TEXCOORD.z;
    float _636 = dot(vec3(_518, _519, _520), vec3(_546, _547, _548));
    float _639 = _636 * 2.0;
    float _643 = (_639 * _518) - _546;
    float _644 = (_639 * _519) - _547;
    float _645 = (_639 * _520) - _548;
    float _649 = abs(dot(vec3(_546, _547, _548), vec3(_518, _519, _520)));
    float _3244 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _651 = sqrt(_521);
    float _664 = exp2((_651 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_651 * 3.0));
    float _670 = (1.0 - _664) * ((_651 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _671 = _664 * _651;
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _707 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _740 = fma(_707, cbModelParam._m0[26u].z, fma(_703, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _699));
        float _744 = fma(_707, cbModelParam._m0[27u].z, fma(_703, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _699));
        float _748 = fma(_707, cbModelParam._m0[28u].z, fma(_703, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _699));
        float _772 = _699 + _518;
        float _773 = _703 + _519;
        float _774 = _707 + _520;
        float _784 = fma(_774, cbModelParam._m0[26u].z, fma(_773, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772)) - _740;
        float _785 = fma(_774, cbModelParam._m0[27u].z, fma(_773, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772)) - _744;
        float _786 = fma(_774, cbModelParam._m0[28u].z, fma(_773, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772)) - _748;
        float _790 = inversesqrt(dot(vec3(_784, _785, _786), vec3(_784, _785, _786)));
        float _803 = ((_790 * _784) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_740 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_790 * _785) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_744 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _805 = ((_790 * _786) / cbModelParam._m0[34u].z) + ((((((_748 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        float _842 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_808.x + (-0.5));
        float _844 = _842 * (_808.y + (-0.5));
        float _845 = _842 * (_808.z + (-0.5));
        float _852 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_815.x + (-0.5));
        float _854 = _852 * (_815.y + (-0.5));
        float _855 = _852 * (_815.z + (-0.5));
        float _862 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_822.x + (-0.5));
        float _864 = _862 * (_822.y + (-0.5));
        float _865 = _862 * (_822.z + (-0.5));
        float _872 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_829.x + (-0.5));
        float _874 = _872 * (_829.y + (-0.5));
        float _875 = _872 * (_829.z + (-0.5));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _879 = _843 * 0.5;
        float _880 = _853 * 0.5;
        float _881 = _863 * 0.5;
        float _882 = dot(vec3(_879, _880, _881), vec3(_879, _880, _881));
        float _887 = (_882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_882);
        float _896 = (dot(vec3(_518, _519, _520), vec3(_887 * _879, _887 * _880, _887 * _881)) + 1.0) * 0.5;
        float _3270 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _906 = sqrt(((_880 * _880) + (_879 * _879)) + (_881 * _881)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3281 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3292 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * (_908 + 1.0))) + _913) * _876;
        float _923 = _844 * 0.5;
        float _924 = _854 * 0.5;
        float _925 = _864 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_518, _519, _520), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3303 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3314 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3325 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_950 + 1.0))) + _955) * _877;
        float _965 = _845 * 0.5;
        float _966 = _855 * 0.5;
        float _967 = _865 * 0.5;
        float _968 = dot(vec3(_965, _966, _967), vec3(_965, _966, _967));
        float _973 = (_968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_968);
        float _981 = (dot(vec3(_518, _519, _520), vec3(_973 * _965, _973 * _966, _973 * _967)) + 1.0) * 0.5;
        float _3336 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _990 = sqrt(((_966 * _966) + (_965 * _965)) + (_967 * _967)) / (_878 + 9.9999997473787516355514526367188e-06);
        float _3347 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3358 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_992 + 1.0))) + _997) * _878;
        _1014 = _845;
        _1015 = _844;
        _1016 = _843;
        _1017 = _855;
        _1018 = _854;
        _1019 = _853;
        _1020 = _865;
        _1021 = _864;
        _1022 = _863;
        _1023 = _878;
        _1024 = _877;
        _1025 = _876;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
    }
    else
    {
        _1014 = _395;
        _1015 = _395;
        _1016 = _395;
        _1017 = _395;
        _1018 = _395;
        _1019 = _395;
        _1020 = _395;
        _1021 = _395;
        _1022 = _395;
        _1023 = _395;
        _1024 = _395;
        _1025 = _395;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1054 = fma(_707, cbModelParam._m0[30u].z, fma(_703, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _699));
        float _1058 = fma(_707, cbModelParam._m0[31u].z, fma(_703, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _699));
        float _1062 = fma(_707, cbModelParam._m0[32u].z, fma(_703, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _699));
        float _1085 = _699 + _518;
        float _1086 = _703 + _519;
        float _1087 = _707 + _520;
        float _1097 = fma(_1087, cbModelParam._m0[30u].z, fma(_1086, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1085)) - _1054;
        float _1098 = fma(_1087, cbModelParam._m0[31u].z, fma(_1086, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1085)) - _1058;
        float _1099 = fma(_1087, cbModelParam._m0[32u].z, fma(_1086, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1085)) - _1062;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1054 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1058 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[35u].z) + ((((((_1062 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1153 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1120.x + (-0.5));
        float _1155 = _1153 * (_1120.y + (-0.5));
        float _1156 = _1153 * (_1120.z + (-0.5));
        float _1163 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1127.x + (-0.5));
        float _1165 = _1163 * (_1127.y + (-0.5));
        float _1166 = _1163 * (_1127.z + (-0.5));
        float _1173 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1134.x + (-0.5));
        float _1175 = _1173 * (_1134.y + (-0.5));
        float _1176 = _1173 * (_1134.z + (-0.5));
        float _1183 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1141.x + (-0.5));
        float _1185 = _1183 * (_1141.y + (-0.5));
        float _1186 = _1183 * (_1141.z + (-0.5));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = _1154 * 0.5;
        float _1191 = _1164 * 0.5;
        float _1192 = _1174 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_518, _519, _520), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3421 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_1217 + 1.0))) + _1222) * _1187;
        float _1232 = _1155 * 0.5;
        float _1233 = _1165 * 0.5;
        float _1234 = _1175 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_518, _519, _520), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _3454 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1259 + 1.0))) + _1264) * _1188;
        float _1274 = _1156 * 0.5;
        float _1275 = _1166 * 0.5;
        float _1276 = _1176 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_518, _519, _520), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3487 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_1301 + 1.0))) + _1306) * _1189;
        _1323 = _1156;
        _1324 = _1155;
        _1325 = _1154;
        _1326 = _1166;
        _1327 = _1165;
        _1328 = _1164;
        _1329 = _1176;
        _1330 = _1175;
        _1331 = _1174;
        _1332 = _1189;
        _1333 = _1188;
        _1334 = _1187;
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _395;
        _1324 = _395;
        _1325 = _395;
        _1326 = _395;
        _1327 = _395;
        _1328 = _395;
        _1329 = _395;
        _1330 = _395;
        _1331 = _395;
        _1332 = _395;
        _1333 = _395;
        _1334 = _395;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1026)) + _1026;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1027)) + _1027;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1028)) + _1028;
    float _1370 = fma(_1349, cbSceneParam._m0[89u].z, fma(_1348, cbSceneParam._m0[89u].y, _1347 * cbSceneParam._m0[89u].x));
    float _1373 = fma(_1349, cbSceneParam._m0[90u].z, fma(_1348, cbSceneParam._m0[90u].y, _1347 * cbSceneParam._m0[90u].x));
    float _1376 = fma(_1349, cbSceneParam._m0[91u].z, fma(_1348, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1347));
    float _1391 = _643 * 0.5;
    float _1392 = _644 * 0.5;
    float _1393 = _645 * 0.5;
    float _1394 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1397 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1400 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1434;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1407 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1014, _1017, _1020, _1023));
        float _1411 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1415 = dot(vec4(_1391, _1392, _1393, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1422 = dot(vec4(cbModelParam._m0[39u]), vec4(_1391, _1392, _1393, 1.0));
        _1434 = dot(vec3(isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)), isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1422) ? 0.0 : (isnan(0.0) ? _1422 : max(0.0, _1422))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1434 = 1.0;
    }
    float _1445;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1436 = dot(vec4(cbModelParam._m0[40u]), vec4(_1391, _1392, _1393, 1.0));
        _1445 = dot(vec3(isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1436) ? 0.0 : (isnan(0.0) ? _1436 : max(0.0, _1436))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1445 = 1.0;
    }
    float _1449 = (_1445 * cbModelParam._m0[1u].x) + (_1434 * (1.0 - cbModelParam._m0[1u].x));
    float _1459 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _521);
    float _1460 = isnan(_1459) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1459 : min(cbModelParam._m0[25u].z, _1459));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1509 = fma(_707, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699)) + cbModelParam._m0[13u].w;
        float _1513 = fma(_707, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699)) + cbModelParam._m0[14u].w;
        float _1517 = fma(_707, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699)) + cbModelParam._m0[15u].w;
        float _1520 = fma(_645, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643));
        float _1523 = fma(_645, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643));
        float _1526 = fma(_645, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643));
        float _1554;
        if (_1520 > 0.0)
        {
            _1554 = abs((1.0 - _1509) / _1520);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1509 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1554 = frontier_phi_26_24_ladder;
        }
        float _1940;
        if (_1523 > 0.0)
        {
            _1940 = abs((1.0 - _1513) / _1523);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1513 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1940 = frontier_phi_35_31_ladder;
        }
        float _2256;
        if (_1526 > 0.0)
        {
            _2256 = abs((1.0 - _1517) / _1526);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1517 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2256 = frontier_phi_49_42_ladder;
        }
        float _2258 = isnan(_1940) ? _1554 : (isnan(_1554) ? _1940 : min(_1554, _1940));
        float _2259 = isnan(_2256) ? _2258 : (isnan(_2258) ? _2256 : min(_2258, _2256));
        float _2263 = (_2259 * _1520) + _1509;
        float _2264 = (_2259 * _1523) + _1513;
        float _2265 = (_2259 * _1526) + _1517;
        float _2266 = _2259 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2266;
        float _2269 = _2266 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2265 > _2269) || ((_2265 < _2267) || ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 < _2267) || (_2263 > _2269))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2265, cbModelParam._m0[9u].z, fma(_2264, cbModelParam._m0[9u].y, _2263 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2265, cbModelParam._m0[10u].z, fma(_2264, cbModelParam._m0[10u].y, _2263 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2265, cbModelParam._m0[11u].z, fma(_2264, cbModelParam._m0[11u].y, _2263 * cbModelParam._m0[11u].x))), _1460);
            frontier_phi_25_49_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1542 = frontier_phi_25_49_ladder_2;
        _1544 = frontier_phi_25_49_ladder_1;
        _1546 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1530 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_643, _644, _645), _1460);
        _1542 = _1530.x * cbModelParam._m0[1u].y;
        _1544 = _1530.y * cbModelParam._m0[1u].y;
        _1546 = _1530.z * cbModelParam._m0[1u].y;
    }
    float _1550 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _521);
    float _1551 = isnan(_1550) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1550 : min(cbModelParam._m0[25u].w, _1550));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1606 = fma(_707, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699)) + cbModelParam._m0[21u].w;
        float _1610 = fma(_707, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699)) + cbModelParam._m0[22u].w;
        float _1614 = fma(_707, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699)) + cbModelParam._m0[23u].w;
        float _1617 = fma(_645, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643));
        float _1620 = fma(_645, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643));
        float _1623 = fma(_645, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643));
        float _1945;
        if (_1617 > 0.0)
        {
            _1945 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1945 = frontier_phi_37_33_ladder;
        }
        float _2282;
        if (_1620 > 0.0)
        {
            _2282 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2282 = frontier_phi_51_44_ladder;
        }
        float _2451;
        if (_1623 > 0.0)
        {
            _2451 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2451 = frontier_phi_65_60_ladder;
        }
        float _2453 = isnan(_2282) ? _1945 : (isnan(_1945) ? _2282 : min(_1945, _2282));
        float _2454 = isnan(_2451) ? _2453 : (isnan(_2453) ? _2451 : min(_2453, _2451));
        float _2458 = (_2454 * _1617) + _1606;
        float _2459 = (_2454 * _1620) + _1610;
        float _2460 = (_2454 * _1623) + _1614;
        float _2461 = _2454 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2461;
        float _2464 = _2461 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2460 > _2464) || ((_2460 < _2462) || ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 < _2462) || (_2458 > _2464))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2693 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2460, cbModelParam._m0[17u].z, fma(_2459, cbModelParam._m0[17u].y, _2458 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2460, cbModelParam._m0[18u].z, fma(_2459, cbModelParam._m0[18u].y, _2458 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2460, cbModelParam._m0[19u].z, fma(_2459, cbModelParam._m0[19u].y, _2458 * cbModelParam._m0[19u].x))), _1551);
            frontier_phi_34_65_ladder = _2693.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2693.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2693.z * cbModelParam._m0[1u].z;
        }
        _1642 = frontier_phi_34_65_ladder_1;
        _1644 = frontier_phi_34_65_ladder;
        _1646 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_643, _644, _645), _1551);
        _1642 = _1626.x * cbModelParam._m0[1u].z;
        _1644 = _1626.y * cbModelParam._m0[1u].z;
        _1646 = _1626.z * cbModelParam._m0[1u].z;
    }
    float _1659 = (((_670 * _620) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1642 - _1542)) + _1542);
    float _1661 = (((_670 * _622) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1644 - _1544)) + _1544);
    float _1663 = (((_670 * _623) + _671) * _635) * ((cbModelParam._m0[1u].w * (_1646 - _1546)) + _1546);
    float _1666 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1659 * cbSceneParam._m0[91u].x));
    vec4 _1680 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_554, _555));
    float _1682 = _1680.w;
    float _1694 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1682);
    float _1695 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1682);
    float _1696 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1682);
    uvec4 _1700 = floatBitsToUint(cbInstanceData._m0[_595 + 5u]);
    uint _1702 = _1700.x * 14u;
    uint _1703 = _1702 + 13u;
    float _1708 = _635 + (-1.0);
    float _1711 = (cbLight._m0[_1703].x * _1708) + 1.0;
    float _1712 = (cbLight._m0[_1703].y * _1708) + 1.0;
    uint _1713 = _1702 + 5u;
    float _1719 = isnan(1.0) ? _1712 : (isnan(_1712) ? 1.0 : min(_1712, 1.0));
    uint _1723 = _1702 + 4u;
    float _1733 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1737 = _1702 | 1u;
    float _1748 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_518, _519, _520));
    float _1751 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_518, _519, _520));
    float _3623 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _3634 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1756 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.3183098733425140380859375;
    float _1758 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.3183098733425140380859375;
    float _1765 = ((cbLight._m0[_1713].x * _1719) * _1758) + (((cbLight._m0[_1723].x * _1694) * _1733) * _1756);
    float _1766 = ((_1719 * cbLight._m0[_1713].y) * _1758) + (((cbLight._m0[_1723].y * _1695) * _1733) * _1756);
    float _1767 = ((_1719 * cbLight._m0[_1713].z) * _1758) + (((cbLight._m0[_1723].z * _1696) * _1733) * _1756);
    uint _1769 = _1702 + 8u;
    float _1782 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1702].w)) * _521) * 0.949999988079071044921875);
    float _1783 = _1782 * _1782;
    float _1784 = cbLight._m0[_1702].x + _546;
    float _1785 = cbLight._m0[_1702].y + _547;
    float _1786 = cbLight._m0[_1702].z + _548;
    float _1790 = inversesqrt(dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786)));
    float _1791 = _1790 * _1784;
    float _1792 = _1790 * _1785;
    float _1793 = _1790 * _1786;
    float _1794 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1702].xyz));
    float _3645 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _1798 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _1799 = dot(vec3(_518, _519, _520), vec3(_1791, _1792, _1793));
    float _3667 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _1802 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1803 = dot(vec3(cbLight._m0[_1702].xyz), vec3(_1791, _1792, _1793));
    float _3678 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1807 = _1783 * _1783;
    float _1811 = ((_1802 * _1802) * (_1807 + (-1.0))) + 1.0;
    float _1819 = exp2(log2(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * 5.0);
    float _1820 = 0.959999978542327880859375 - _617;
    float _1822 = 0.959999978542327880859375 - _618;
    float _1823 = 0.959999978542327880859375 - _619;
    float _1830 = 1.0 - _1783;
    float _1841 = (0.5 / (((_1798 * ((_1797 * _1830) + _1783)) + 9.9999999392252902907785028219223e-09) + (((_1798 * _1830) + _1783) * _1797))) * _1797;
    float _3689 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1843 = (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1807 / ((_1811 * _1811) * 3.141590118408203125));
    uint _1857 = _1702 + 9u;
    float _1868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1737].w)) * _521) * 0.949999988079071044921875);
    float _1869 = _1868 * _1868;
    float _1870 = cbLight._m0[_1737].x + _546;
    float _1871 = cbLight._m0[_1737].y + _547;
    float _1872 = cbLight._m0[_1737].z + _548;
    float _1876 = inversesqrt(dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872)));
    float _1877 = _1876 * _1870;
    float _1878 = _1876 * _1871;
    float _1879 = _1876 * _1872;
    float _1880 = dot(vec3(_518, _519, _520), vec3(cbLight._m0[_1737].xyz));
    float _3700 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1884 = dot(vec3(_518, _519, _520), vec3(_1877, _1878, _1879));
    float _3711 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1887 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1888 = dot(vec3(cbLight._m0[_1737].xyz), vec3(_1877, _1878, _1879));
    float _3722 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1892 = _1869 * _1869;
    float _1896 = ((_1887 * _1887) * (_1892 + (-1.0))) + 1.0;
    float _1903 = exp2(log2(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * 5.0);
    float _1910 = 1.0 - _1869;
    float _1920 = (0.5 / (((_1798 * ((_1883 * _1910) + _1869)) + 9.9999999392252902907785028219223e-09) + (((_1798 * _1910) + _1869) * _1883))) * _1883;
    float _3733 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1922 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1892 / ((_1896 * _1896) * 3.141590118408203125));
    float _1932 = (((((_1903 * _1820) + _620) * cbLight._m0[_1857].x) * _1922) * _1719) + ((((cbLight._m0[_1769].x * _1694) * ((_1819 * _1820) + _620)) * _1843) * _1733);
    float _1933 = (((((_1903 * _1822) + _622) * cbLight._m0[_1857].y) * _1922) * _1719) + ((((cbLight._m0[_1769].y * _1695) * ((_1819 * _1822) + _622)) * _1843) * _1733);
    float _1934 = (((((_1903 * _1823) + _623) * cbLight._m0[_1857].z) * _1922) * _1719) + ((((cbLight._m0[_1769].z * _1696) * ((_1819 * _1823) + _623)) * _1843) * _1733);
    float _2049;
    float _2051;
    float _2053;
    float _2055;
    float _2057;
    float _2059;
    if (_1700.y == 0u)
    {
        float _1989 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1990 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1989;
        float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1989;
        float _1992 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1989;
        uvec4 _2004 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2005 = _2004.x;
        uint _2016 = uint((float(_2004.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2005))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2005)));
        float _2026 = (log2(_1992 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2027 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        uint _2030 = uint(isnan(14.0) ? _2027 : (isnan(_2027) ? 14.0 : min(_2027, 14.0)));
        uvec4 _2035 = texelFetch(g_lightClusterGridBuffer, int(((_2030 << 2u) + (_2016 << 6u)) >> 2u));
        uint _2036 = _2035.x;
        uint _2037 = _2004.z;
        float _2143;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        if (((((1u << ((_2037 >> 4u) & 15u)) + 4294967295u) & _2036) == 0u) || ((_2037 & 240u) == 0u))
        {
            _2143 = 0.0;
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
        }
        else
        {
            float _2144;
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2319 = 0.0;
            float _2320 = 0.0;
            float _2321 = 0.0;
            float _2322 = 0.0;
            float _2323 = 0.0;
            float _2324 = 0.0;
            uint _2325 = 0u;
            uint _2334;
            bool _2335;
            for (;;)
            {
                _2334 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2325 << 2u)) >> 2u)).x;
                _2335 = _2334 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2335)
                {
                    frontier_phi_62_pred = _2320;
                    frontier_phi_62_pred_1 = _2319;
                    frontier_phi_62_pred_2 = _2321;
                    frontier_phi_62_pred_3 = _2324;
                    frontier_phi_62_pred_4 = _2323;
                    frontier_phi_62_pred_5 = _2322;
                }
                else
                {
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    uint _2500;
                    _2494 = _2319;
                    _2495 = _2320;
                    _2496 = _2321;
                    _2497 = _2322;
                    _2498 = _2323;
                    _2499 = _2324;
                    _2500 = _2334;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    for (;;)
                    {
                        uint _2504 = uint(findLSB(_2500)) + (_2325 << 5u);
                        uint _2501 = (_2500 + 4294967295u) & _2500;
                        uint _2506 = _2504 * 48u;
                        vec4 _2520 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2506)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2506 + 3u)).x));
                        uint _2526 = (_2504 * 48u) + 4u;
                        vec4 _2539 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 3u)).x));
                        uint _2545 = (_2504 * 48u) + 8u;
                        vec3 _2556 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2545)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2545 + 2u)).x));
                        float _2560 = _2520.x - _1990;
                        float _2561 = _2520.y - _1991;
                        float _2562 = _2520.z - _1992;
                        float _2563 = dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562));
                        float _2566 = inversesqrt(_2563);
                        float _2567 = _2566 * _2560;
                        float _2568 = _2566 * _2561;
                        float _2569 = _2566 * _2562;
                        float _2570 = dot(vec3(_576, _579, _582), vec3(_2567, _2568, _2569));
                        float _2575 = 1.0 - (_2563 * _2520.w);
                        float _3754 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2576 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
                        float _2577 = sqrt(_2563) * _2539.w;
                        float _2580 = 1.39999997615814208984375 / (_2577 + 1.39999997615814208984375);
                        float _2581 = _2580 * _2580;
                        float _2584 = ((1.0 - _2581) * _2570) + _2581;
                        float _2587 = _2577 * _2577;
                        float _2591 = ((isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))) * _2576) / ((_2587 * 0.699999988079071044921875) + 1.0);
                        float _2595 = (-0.0) - _1990;
                        float _2596 = (-0.0) - _1991;
                        float _2597 = (-0.0) - _1992;
                        float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
                        float _2602 = _2601 * _2595;
                        float _2603 = _2601 * _2596;
                        float _2604 = _2601 * _2597;
                        float _2612 = exp2(log2(1.0 / ((_2587 * 3.5) + 5.0)) * 0.25);
                        float _2613 = 1.0 - _651;
                        float _2620 = sqrt(1.0 - ((1.0 - (_2613 * _2613)) * (1.0 - (_2612 * _2612))));
                        float _2621 = _2620 * _2620;
                        float _2622 = _2621 * _2621;
                        float _2623 = _2602 + _2567;
                        float _2624 = _2603 + _2568;
                        float _2625 = _2604 + _2569;
                        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
                        float _2633 = dot(vec3(_576, _579, _582), vec3(_2602, _2603, _2604));
                        float _3770 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2636 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                        float _2637 = dot(vec3(_576, _579, _582), vec3(_2629 * _2623, _2629 * _2624, _2629 * _2625));
                        float _3781 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
                        float _2640 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
                        float _2644 = ((_2640 * _2640) * (_2622 + (-1.0))) + 1.0;
                        float _2645 = _2580 * _2621;
                        float _2646 = _2645 * _2645;
                        float _2649 = ((1.0 - _2646) * _2570) + _2646;
                        float _3792 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
                        float _2650 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
                        float _2651 = 1.0 - _2621;
                        float _2661 = (0.5 / (((_2650 * ((_2636 * _2651) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2650 * _2651) + _2621) * _2636))) * _2650;
                        float _3803 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
                        float _2672 = (((_2622 * 3.1415927410125732421875) * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) / ((_2644 * _2644) * ((_2587 * 2.1991131305694580078125) + 3.141590118408203125))) * _2576;
                        _2403 = (_2591 * _2539.x) + _2497;
                        _2404 = (_2591 * _2539.y) + _2498;
                        _2405 = (_2591 * _2539.z) + _2499;
                        _2400 = (_2672 * _2556.x) + _2494;
                        _2401 = (_2672 * _2556.y) + _2495;
                        _2402 = (_2672 * _2556.z) + _2496;
                        if (_2501 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2494 = _2400;
                            _2495 = _2401;
                            _2496 = _2402;
                            _2497 = _2403;
                            _2498 = _2404;
                            _2499 = _2405;
                            _2500 = _2501;
                        }
                    }
                    frontier_phi_62_pred = _2401;
                    frontier_phi_62_pred_1 = _2400;
                    frontier_phi_62_pred_2 = _2402;
                    frontier_phi_62_pred_3 = _2405;
                    frontier_phi_62_pred_4 = _2404;
                    frontier_phi_62_pred_5 = _2403;
                }
                _2146 = frontier_phi_62_pred;
                _2144 = frontier_phi_62_pred_1;
                _2148 = frontier_phi_62_pred_2;
                _2154 = frontier_phi_62_pred_3;
                _2152 = frontier_phi_62_pred_4;
                _2150 = frontier_phi_62_pred_5;
                uint _2326 = _2325 + 1u;
                if (_2326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2319 = _2144;
                    _2320 = _2146;
                    _2321 = _2148;
                    _2322 = _2150;
                    _2323 = _2152;
                    _2324 = _2154;
                    _2325 = _2326;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2143 = _2144;
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
        }
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.z;
        uint _2160 = (_2158 >> 8u) & 15u;
        float _2287;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        if (((4294967295u << _2160) & _2036) == 0u)
        {
            _2287 = _2143;
            _2289 = _2145;
            _2291 = _2147;
            _2293 = _2149;
            _2295 = _2151;
            _2297 = _2153;
        }
        else
        {
            float _2312 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
            float _2313 = _2312 * _1990;
            float _2314 = _2312 * _1991;
            float _2315 = _2312 * _1992;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2160 < ((_2158 >> 12u) & 15u))
            {
                float _2288;
                float _2290;
                float _2292;
                float _2294;
                float _2296;
                float _2298;
                float _2477 = _2143;
                float _2478 = _2145;
                float _2479 = _2147;
                float _2480 = _2149;
                float _2481 = _2151;
                float _2482 = _2153;
                uint _2483 = _2160;
                uint _2492;
                bool _2493;
                for (;;)
                {
                    _2492 = texelFetch(g_lightClassification, int((((_2030 << 5u) + (_2016 << 9u)) + (_2483 << 2u)) >> 2u)).x;
                    _2493 = _2492 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2493)
                    {
                        frontier_phi_71_pred = _2478;
                        frontier_phi_71_pred_1 = _2477;
                        frontier_phi_71_pred_2 = _2482;
                        frontier_phi_71_pred_3 = _2481;
                        frontier_phi_71_pred_4 = _2480;
                        frontier_phi_71_pred_5 = _2479;
                    }
                    else
                    {
                        float _2698;
                        float _2699;
                        float _2700;
                        float _2701;
                        float _2702;
                        float _2703;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2711 = _2477;
                        float _2712 = _2478;
                        float _2713 = _2479;
                        float _2714 = _2480;
                        float _2715 = _2481;
                        float _2716 = _2482;
                        uint _2717 = _2492;
                        uint _2718;
                        vec4 _2743;
                        float _2744;
                        vec4 _2759;
                        vec3 _2771;
                        vec4 _2786;
                        vec4 _2801;
                        float _2847;
                        bool _2848;
                        for (;;)
                        {
                            uint _2728 = ((_2483 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2717));
                            _2718 = (_2717 + 4294967295u) & _2717;
                            uint _2730 = _2728 * 40u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            _2744 = _2743.w;
                            uint _2746 = (_2728 * 40u) + 4u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2761 = (_2728 * 40u) + 8u;
                            _2771 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x));
                            uint _2773 = (_2728 * 40u) + 16u;
                            _2786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2773 + 3u)).x));
                            uint _2788 = (_2728 * 40u) + 20u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2803 = (_2728 * 40u) + 24u;
                            vec4 _2816 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 3u)).x));
                            uint _2822 = (_2728 * 40u) + 28u;
                            vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            _2847 = fma(_1992, _2835.z, fma(_1991, _2835.y, _2835.x * _1990)) + _2835.w;
                            _2848 = !((fma(_1992, _2816.z, fma(_1991, _2816.y, _2816.x * _1990)) + _2816.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2848)
                            {
                                float _2875 = _2743.x - _1990;
                                float _2876 = _2743.y - _1991;
                                float _2877 = _2743.z - _1992;
                                float _2878 = dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877));
                                float _2881 = inversesqrt(_2878);
                                float _2882 = _2881 * _2875;
                                float _2883 = _2881 * _2876;
                                float _2884 = _2881 * _2877;
                                float _2888 = 1.0 - (_2878 / (_2744 * _2744));
                                float _3814 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2889 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                                float _2893 = sqrt(_2878) * _2759.w;
                                float _2895 = 1.39999997615814208984375 / (_2893 + 1.39999997615814208984375);
                                float _2896 = _2895 * _2895;
                                float _2899 = ((1.0 - _2896) * dot(vec3(_2882, _2883, _2884), vec3(_576, _579, _582))) + _2896;
                                float _2902 = _2893 * _2893;
                                float _2906 = (fma(_1992, _2786.z, fma(_1991, _2786.y, _2786.x * _1990)) + _2786.w) / _2847;
                                float _2907 = (fma(_1992, _2801.z, fma(_1991, _2801.y, _2801.x * _1990)) + _2801.w) / _2847;
                                float _2911 = 1.0 - dot(vec2(_2906, _2907), vec2(_2906, _2907));
                                float _3830 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                                float _2912 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                                float _2913 = _2912 * (((isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0))) * _2889) / ((_2902 * 0.699999988079071044921875) + 1.0));
                                float _2925 = exp2(log2(1.0 / ((_2902 * 3.5) + 5.0)) * 0.25);
                                float _2926 = 1.0 - _651;
                                float _2933 = sqrt(1.0 - ((1.0 - (_2926 * _2926)) * (1.0 - (_2925 * _2925))));
                                float _2934 = _2933 * _2933;
                                float _2935 = _2934 * _2934;
                                float _2936 = _2882 - _2313;
                                float _2937 = _2883 - _2314;
                                float _2938 = _2884 - _2315;
                                float _2942 = inversesqrt(dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938)));
                                float _2946 = dot(vec3(_576, _579, _582), vec3((-0.0) - _2313, (-0.0) - _2314, (-0.0) - _2315));
                                float _3841 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2949 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                                float _2950 = dot(vec3(_576, _579, _582), vec3(_2942 * _2936, _2942 * _2937, _2942 * _2938));
                                float _3852 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                                float _2953 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
                                float _2957 = ((_2953 * _2953) * (_2935 + (-1.0))) + 1.0;
                                float _2958 = _2895 * _2934;
                                float _2959 = _2958 * _2958;
                                float _2965 = ((1.0 - _2959) * dot(vec3(_576, _579, _582), vec3(_2882, _2883, _2884))) + _2959;
                                float _3863 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2966 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
                                float _2967 = 1.0 - _2934;
                                float _2977 = (0.5 / (((_2966 * ((_2949 * _2967) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2966 * _2967) + _2934) * _2949))) * _2966;
                                float _3874 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                                float _2987 = (_2912 * _2889) * (((_2935 * 3.1415927410125732421875) * (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) / ((_2957 * _2957) * ((_2902 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2987 * _2771.y;
                                frontier_phi_77_pred_1 = _2987 * _2771.x;
                                frontier_phi_77_pred_2 = _2913 * _2759.z;
                                frontier_phi_77_pred_3 = _2913 * _2759.y;
                                frontier_phi_77_pred_4 = _2913 * _2759.x;
                                frontier_phi_77_pred_5 = _2987 * _2771.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2992 = frontier_phi_77_pred;
                            _2991 = frontier_phi_77_pred_1;
                            _2996 = frontier_phi_77_pred_2;
                            _2995 = frontier_phi_77_pred_3;
                            _2994 = frontier_phi_77_pred_4;
                            _2993 = frontier_phi_77_pred_5;
                            _2701 = _2994 + _2714;
                            _2702 = _2995 + _2715;
                            _2703 = _2996 + _2716;
                            _2698 = _2991 + _2711;
                            _2699 = _2992 + _2712;
                            _2700 = _2993 + _2713;
                            if (_2718 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2711 = _2698;
                                _2712 = _2699;
                                _2713 = _2700;
                                _2714 = _2701;
                                _2715 = _2702;
                                _2716 = _2703;
                                _2717 = _2718;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2699;
                        frontier_phi_71_pred_1 = _2698;
                        frontier_phi_71_pred_2 = _2703;
                        frontier_phi_71_pred_3 = _2702;
                        frontier_phi_71_pred_4 = _2701;
                        frontier_phi_71_pred_5 = _2700;
                    }
                    _2290 = frontier_phi_71_pred;
                    _2288 = frontier_phi_71_pred_1;
                    _2298 = frontier_phi_71_pred_2;
                    _2296 = frontier_phi_71_pred_3;
                    _2294 = frontier_phi_71_pred_4;
                    _2292 = frontier_phi_71_pred_5;
                    uint _2484 = _2483 + 1u;
                    if (_2484 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2477 = _2288;
                        _2478 = _2290;
                        _2479 = _2292;
                        _2480 = _2294;
                        _2481 = _2296;
                        _2482 = _2298;
                        _2483 = _2484;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2298;
                frontier_phi_53_54_ladder_1 = _2294;
                frontier_phi_53_54_ladder_2 = _2292;
                frontier_phi_53_54_ladder_3 = _2290;
                frontier_phi_53_54_ladder_4 = _2288;
                frontier_phi_53_54_ladder_5 = _2296;
            }
            else
            {
                frontier_phi_53_54_ladder = _2153;
                frontier_phi_53_54_ladder_1 = _2149;
                frontier_phi_53_54_ladder_2 = _2147;
                frontier_phi_53_54_ladder_3 = _2145;
                frontier_phi_53_54_ladder_4 = _2143;
                frontier_phi_53_54_ladder_5 = _2151;
            }
            _2287 = frontier_phi_53_54_ladder_4;
            _2289 = frontier_phi_53_54_ladder_3;
            _2291 = frontier_phi_53_54_ladder_2;
            _2293 = frontier_phi_53_54_ladder_1;
            _2295 = frontier_phi_53_54_ladder_5;
            _2297 = frontier_phi_53_54_ladder;
        }
        float _2302 = isnan(1.0) ? _635 : (isnan(_635) ? 1.0 : min(_635, 1.0));
        _2049 = (_2302 * _2293) + _1765;
        _2051 = (_2302 * _2295) + _1766;
        _2053 = (_2302 * _2297) + _1767;
        _2055 = ((_2287 * _620) * _2302) + _1932;
        _2057 = ((_2289 * _622) * _2302) + _1933;
        _2059 = ((_2291 * _623) * _2302) + _1934;
    }
    else
    {
        _2049 = _1765;
        _2051 = _1766;
        _2053 = _1767;
        _2055 = _1932;
        _2057 = _1933;
        _2059 = _1934;
    }
    uint _2065 = _596 + uint(cbMatDynParam._m0[0u].w);
    float _3890 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3901 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _3912 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _2090 = (((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_2049 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _635))) + ((_2055 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1449)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2065].x * (_453 - (_453 * _286)));
    float _2092 = ((cbInstanceData._m0[_2065].y * (_454 - (_454 * _286))) + ((_2057 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1449)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_2051 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _635)));
    float _2094 = ((cbInstanceData._m0[_2065].z * (_455 - (_455 * _286))) + ((_2059 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _1449)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_2053 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _635)));
    uint _2098 = _595 + 6u;
    float _2106 = _554 / cbSceneParam._m0[86u].x;
    float _2107 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2121 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2123 = _2121.x;
    float _2124 = _2121.y;
    float _2125 = _2121.z;
    float _2126 = _2121.w;
    float _2206;
    float _2208;
    float _2210;
    float _2212;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2168 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2169 = _2168 / _541;
        float _2180 = _2169 * _259;
        float _2181 = _260 * _2169;
        float _2182 = (-0.0) - _2181;
        float _2183 = _2169 * _261;
        float _2185 = (cbSceneParam._m0[77u].w * _2182) / _2168;
        float _2186 = _2185 + cbSceneParam._m0[79u].w;
        float _2187 = cbSceneParam._m0[79u].w - _2181;
        float _2193 = sqrt(((_2180 * _2180) + (_2181 * _2181)) + (_2183 * _2183));
        float _2196 = (1.0 - (cbSceneParam._m0[77u].w / _2168)) * _2193;
        float _2202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2413;
        if (abs((_2182 - _2185) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2413 = ((((_2186 > 0.0) ? exp2(_2202 * _2186) : (2.0 - exp2(_2204 * _2186))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2196;
        }
        else
        {
            float _2348 = 1.0 / cbSceneParam._m0[80u].x;
            float _2349 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : max(_2186, _2187));
            float _2350 = isnan(_2187) ? _2186 : (isnan(_2186) ? _2187 : min(_2186, _2187));
            float _2359 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : min(_2349, 0.0));
            float _2360 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : min(_2350, 0.0));
            _2413 = ((abs(_2193 / _2182) * cbSceneParam._m0[80u].y) * ((((_2359 - _2360) * 2.0) - ((exp2(_2202 * (isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0)))) - exp2(_2202 * (isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))))) * _2348)) - ((exp2(_2204 * _2359) - exp2(_2204 * _2360)) * _2348))) + (_2196 * cbSceneParam._m0[80u].z);
        }
        vec4 _2415 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2106, _2107, 1.0), 0.0);
        float _2424 = exp2((_2413 * (-1.44269502162933349609375)) * (1.0 - _2415.w));
        float _2425 = log2(_2424);
        float _2441 = log2(_2126);
        _2206 = (exp2(_2441 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].x)) * _2415.x) / cbSceneParam._m0[78u].x)) + _2123;
        _2208 = (exp2(_2441 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].y)) * _2415.y) / cbSceneParam._m0[78u].y)) + _2124;
        _2210 = (exp2(_2441 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].z)) * _2415.z) / cbSceneParam._m0[78u].z)) + _2125;
        _2212 = _2424 * _2126;
    }
    else
    {
        _2206 = _2123;
        _2208 = _2124;
        _2210 = _2125;
        _2212 = _2126;
    }
    float _2224 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2225 = _2224 == 3.0;
    float _2226 = log2(_2212);
    float _2233 = exp2(_2226 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0)));
    float _2234 = exp2(_2226 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0)));
    float _2235 = exp2(_2226 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)));
    float _2244 = (_2224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2244 * (_2225 ? _2233 : (_2233 + (cbSceneParam._m0[72u].w * _2206)));
    SV_Target.y = _2244 * (_2225 ? _2234 : (_2234 + (cbSceneParam._m0[72u].w * _2208)));
    SV_Target.z = _2244 * (_2225 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2210)));
    SV_Target.w = cbInstanceData._m0[_2098].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2098].w;
}


