#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _765;
uint _2234;
uint _2235;
uint _2236;
uint _2458;
uint _2459;
uint _2460;
float _2716;
float _2717;
float _2718;
float _2719;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    float _287 = cbMtdParam._m0[22u].y + _259;
    float _288 = cbMtdParam._m0[22u].z + _260;
    float _289 = cbMtdParam._m0[22u].w + _261;
    float _303 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _304 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _305 = (-0.0) - dot(vec3(_287, _288, _289), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _305;
    float _312 = (cbMtdParam._m0[19u].x * _303) * _309;
    float _314 = (cbMtdParam._m0[18u].w * _304) * _309;
    float _315 = fract(TEXCOORD.x);
    float _316 = fract(TEXCOORD.y);
    float _322;
    if (_312 > 0.0)
    {
        _322 = (1.0 - _315) / _312;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _315) / _312;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _322 = frontier_phi_3_2_ladder;
    }
    float _330;
    if (_314 > 0.0)
    {
        _330 = (1.0 - _316) / _314;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _316) / _314;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _330 = frontier_phi_7_6_ladder;
    }
    bool _332 = _310 > 0.0;
    float _334 = _332 ? (cbMtdParam._m0[15u].x / _310) : 5000.0;
    float _335 = isnan(_330) ? _322 : (isnan(_322) ? _330 : min(_322, _330));
    float _336 = isnan(_334) ? _335 : (isnan(_335) ? _334 : min(_335, _334));
    float _340 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = _315 + (-0.5);
    float _344 = _316 + (-0.5);
    float _347 = ((_336 * _310) + _340) / _340;
    vec4 _373 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_341 + (_336 * _312)) / _347) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_344 + (_336 * _314)) / _347) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _384 = cbMtdParam._m0[9u].x * _373.x;
    float _385 = cbMtdParam._m0[9u].y * _373.y;
    float _386 = cbMtdParam._m0[9u].z * _373.z;
    float _408 = (cbMtdParam._m0[21u].x * _303) * _309;
    float _410 = (cbMtdParam._m0[20u].w * _304) * _309;
    bool _411 = _408 > 0.0;
    float _416;
    if (_411)
    {
        _416 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _416 = frontier_phi_11_10_ladder;
    }
    bool _418 = _410 > 0.0;
    float _423;
    if (_418)
    {
        _423 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _423 = frontier_phi_15_14_ladder;
    }
    float _426 = _332 ? (cbMtdParam._m0[16u].z / _310) : 5000.0;
    float _427 = isnan(_423) ? _416 : (isnan(_416) ? _423 : min(_416, _423));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _436 = ((_428 * _310) + _432) / _432;
    float _441 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _443 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _459 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_428 * _408)) / _436) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_428 * _410)) / _436) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _471;
    if (_411)
    {
        _471 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _471 = frontier_phi_19_18_ladder;
    }
    float _477;
    if (_418)
    {
        _477 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _477 = frontier_phi_23_22_ladder;
    }
    float _479 = isnan(_477) ? _471 : (isnan(_471) ? _477 : min(_471, _477));
    float _480 = isnan(_426) ? _479 : (isnan(_479) ? _426 : min(_479, _426));
    float _487 = ((_480 * _310) + _432) / _432;
    vec4 _501 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_480 * _408)) / _487) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_480 * _410)) / _487) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _503 = _501.w;
    float _528 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _532 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _533 = _259 * _532;
    float _534 = _260 * _532;
    float _535 = _261 * _532;
    vec4 _540 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _542 = _540.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _612 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _619 = (cbMatDynParam._m0[5u].x * _612) + cbMatDynParam._m0[5u].y;
        float _2758 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
        float _620 = isnan(1.0) ? _2758 : (isnan(_2758) ? 1.0 : min(_2758, 1.0));
        float _624 = (cbMatDynParam._m0[5u].z * _612) + cbMatDynParam._m0[5u].w;
        float _2769 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2769 : (isnan(_2769) ? 1.0 : min(_2769, 1.0))) - _620)) + _620) < ((_542 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _565 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_555 * cbSceneParam._m0[86u].x, _556 * cbSceneParam._m0[86u].y));
    float _568 = _565.x * TEXCOORD.z;
    float _569 = (-0.0) - _533;
    float _570 = (-0.0) - _534;
    float _571 = (-0.0) - _535;
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _764;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _686 = (cbModelParam._m0[37u].x * ((((fma(_601, cbModelParam._m0[26u].z, fma(_597, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _688 = (cbModelParam._m0[37u].y * ((((fma(_601, cbModelParam._m0[27u].z, fma(_597, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _689 = (((((fma(_601, cbModelParam._m0[28u].z, fma(_597, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_686, _688, _689), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_686, _688, _689), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_686, _688, _689), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_686, _688, _689), 0.0);
        float _726 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _737 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _747 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _757 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_713.x + (-0.5));
        float _759 = _757 * (_713.y + (-0.5));
        float _760 = _757 * (_713.z + (-0.5));
        _764 = _726 * (_692.z + (-0.5));
        _766 = _726 * (_692.y + (-0.5));
        _767 = _726 * (_692.x + (-0.5));
        _768 = _737 * (_699.z + (-0.5));
        _769 = _737 * (_699.y + (-0.5));
        _770 = _737 * (_699.x + (-0.5));
        _771 = _747 * (_706.z + (-0.5));
        _772 = _747 * (_706.y + (-0.5));
        _773 = _747 * (_706.x + (-0.5));
        _774 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        _775 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        _776 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    }
    else
    {
        _764 = _765;
        _766 = _765;
        _767 = _765;
        _768 = _765;
        _769 = _765;
        _770 = _765;
        _771 = _765;
        _772 = _765;
        _773 = _765;
        _774 = _765;
        _775 = _765;
        _776 = _765;
    }
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _833 = (cbModelParam._m0[38u].x * ((((fma(_601, cbModelParam._m0[30u].z, fma(_597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _593)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _834 = (cbModelParam._m0[38u].y * ((((fma(_601, cbModelParam._m0[31u].z, fma(_597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _593)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _835 = (((((fma(_601, cbModelParam._m0[32u].z, fma(_597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _593)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_833, _834, _835), 0.0);
        float _870 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _880 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _890 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _900 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_858.x + (-0.5));
        float _902 = _900 * (_858.y + (-0.5));
        float _903 = _900 * (_858.z + (-0.5));
        _907 = _870 * (_837.z + (-0.5));
        _908 = _870 * (_837.y + (-0.5));
        _909 = _870 * (_837.x + (-0.5));
        _910 = _880 * (_844.z + (-0.5));
        _911 = _880 * (_844.y + (-0.5));
        _912 = _880 * (_844.x + (-0.5));
        _913 = _890 * (_851.z + (-0.5));
        _914 = _890 * (_851.y + (-0.5));
        _915 = _890 * (_851.x + (-0.5));
        _916 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        _917 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        _918 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    }
    else
    {
        _907 = _765;
        _908 = _765;
        _909 = _765;
        _910 = _765;
        _911 = _765;
        _912 = _765;
        _913 = _765;
        _914 = _765;
        _915 = _765;
        _916 = _765;
        _917 = _765;
        _918 = _765;
    }
    float _933 = _533 * (-0.5);
    float _934 = _534 * (-0.5);
    float _935 = _535 * (-0.5);
    float _936 = dot(vec4(_933, _934, _935, 1.0), vec4(_909, _912, _915, _918));
    float _939 = dot(vec4(_933, _934, _935, 1.0), vec4(_908, _911, _914, _917));
    float _942 = dot(vec4(_933, _934, _935, 1.0), vec4(_907, _910, _913, _916));
    float _977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _949 = dot(vec4(_933, _934, _935, 1.0), vec4(_764, _768, _771, _774));
        float _953 = dot(vec4(_933, _934, _935, 1.0), vec4(_766, _769, _772, _775));
        float _957 = dot(vec4(_933, _934, _935, 1.0), vec4(_767, _770, _773, _776));
        float _964 = dot(vec4(cbModelParam._m0[39u]), vec4(_933, _934, _935, 1.0));
        _977 = dot(vec3(isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)), isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)), isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_964) ? 0.0 : (isnan(0.0) ? _964 : max(0.0, _964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _977 = 1.0;
    }
    float _988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _979 = dot(vec4(cbModelParam._m0[40u]), vec4(_933, _934, _935, 1.0));
        _988 = dot(vec3(isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)), isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)), isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_979) ? 0.0 : (isnan(0.0) ? _979 : max(0.0, _979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _988 = 1.0;
    }
    float _992 = (_988 * cbModelParam._m0[1u].x) + (_977 * (1.0 - cbModelParam._m0[1u].x));
    float _998 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1081;
    float _1083;
    float _1085;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1048 = fma(_601, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _593)) + cbModelParam._m0[13u].w;
        float _1052 = fma(_601, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _593)) + cbModelParam._m0[14u].w;
        float _1056 = fma(_601, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _593)) + cbModelParam._m0[15u].w;
        float _1059 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1062 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1065 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1091;
        if (_1059 > 0.0)
        {
            _1091 = abs((1.0 - _1048) / _1059);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1059 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1048 + 1.0) / _1059);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1091 = frontier_phi_41_39_ladder;
        }
        float _1279;
        if (_1062 > 0.0)
        {
            _1279 = abs((1.0 - _1052) / _1062);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1062 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1052 + 1.0) / _1062);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1279 = frontier_phi_50_46_ladder;
        }
        float _1634;
        if (_1065 > 0.0)
        {
            _1634 = abs((1.0 - _1056) / _1065);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1065 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1056 + 1.0) / _1065);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _1634 = frontier_phi_62_57_ladder;
        }
        float _1636 = isnan(_1279) ? _1091 : (isnan(_1091) ? _1279 : min(_1091, _1279));
        float _1637 = isnan(_1634) ? _1636 : (isnan(_1636) ? _1634 : min(_1636, _1634));
        float _1641 = (_1637 * _1059) + _1048;
        float _1642 = (_1637 * _1062) + _1052;
        float _1643 = (_1637 * _1065) + _1056;
        float _1644 = _1637 * 9.9999997473787516355514526367188e-05;
        float _1646 = (-1.0) - _1644;
        float _1648 = _1644 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_1643 > _1648) || ((_1643 < _1646) || ((_1642 > _1648) || ((_1642 < _1646) || ((_1641 < _1646) || (_1641 > _1648))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1876 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1643, cbModelParam._m0[9u].z, fma(_1642, cbModelParam._m0[9u].y, _1641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1643, cbModelParam._m0[10u].z, fma(_1642, cbModelParam._m0[10u].y, _1641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1643, cbModelParam._m0[11u].z, fma(_1642, cbModelParam._m0[11u].y, _1641 * cbModelParam._m0[11u].x))), _998);
            frontier_phi_40_62_ladder = _1876.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _1876.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _1876.x * cbModelParam._m0[1u].y;
        }
        _1081 = frontier_phi_40_62_ladder_2;
        _1083 = frontier_phi_40_62_ladder_1;
        _1085 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1069 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _998);
        _1081 = _1069.x * cbModelParam._m0[1u].y;
        _1083 = _1069.y * cbModelParam._m0[1u].y;
        _1085 = _1069.z * cbModelParam._m0[1u].y;
    }
    float _1088 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1176;
    float _1178;
    float _1180;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1140 = fma(_601, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _593)) + cbModelParam._m0[21u].w;
        float _1144 = fma(_601, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _593)) + cbModelParam._m0[22u].w;
        float _1148 = fma(_601, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _593)) + cbModelParam._m0[23u].w;
        float _1151 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1154 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1157 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1284;
        if (_1151 > 0.0)
        {
            _1284 = abs((1.0 - _1140) / _1151);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1151 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1140 + 1.0) / _1151);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1284 = frontier_phi_52_48_ladder;
        }
        float _1661;
        if (_1154 > 0.0)
        {
            _1661 = abs((1.0 - _1144) / _1154);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1154 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1144 + 1.0) / _1154);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _1661 = frontier_phi_64_59_ladder;
        }
        float _2001;
        if (_1157 > 0.0)
        {
            _2001 = abs((1.0 - _1148) / _1157);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1157 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1148 + 1.0) / _1157);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2001 = frontier_phi_76_71_ladder;
        }
        float _2003 = isnan(_1661) ? _1284 : (isnan(_1284) ? _1661 : min(_1284, _1661));
        float _2004 = isnan(_2001) ? _2003 : (isnan(_2003) ? _2001 : min(_2003, _2001));
        float _2008 = (_2004 * _1151) + _1140;
        float _2009 = (_2004 * _1154) + _1144;
        float _2010 = (_2004 * _1157) + _1148;
        float _2011 = _2004 * 9.9999997473787516355514526367188e-05;
        float _2012 = (-1.0) - _2011;
        float _2014 = _2011 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2010 > _2014) || ((_2010 < _2012) || ((_2009 > _2014) || ((_2009 < _2012) || ((_2008 < _2012) || (_2008 > _2014))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2010, cbModelParam._m0[17u].z, fma(_2009, cbModelParam._m0[17u].y, _2008 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2010, cbModelParam._m0[18u].z, fma(_2009, cbModelParam._m0[18u].y, _2008 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2010, cbModelParam._m0[19u].z, fma(_2009, cbModelParam._m0[19u].y, _2008 * cbModelParam._m0[19u].x))), _1088);
            frontier_phi_49_76_ladder = _2132.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2132.y * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2132.x * cbModelParam._m0[1u].z;
        }
        _1176 = frontier_phi_49_76_ladder_2;
        _1178 = frontier_phi_49_76_ladder_1;
        _1180 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1160 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1088);
        _1176 = _1160.x * cbModelParam._m0[1u].z;
        _1178 = _1160.y * cbModelParam._m0[1u].z;
        _1180 = _1160.z * cbModelParam._m0[1u].z;
    }
    float _1192 = _568 * 0.01200000010430812835693359375;
    float _1194 = _1192 * ((cbModelParam._m0[1u].w * (_1176 - _1081)) + _1081);
    float _1195 = _1192 * ((cbModelParam._m0[1u].w * (_1178 - _1083)) + _1083);
    float _1196 = _1192 * ((cbModelParam._m0[1u].w * (_1180 - _1085)) + _1085);
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, _1194 * cbSceneParam._m0[91u].x));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1271 = _1258 / _1270;
    float _1272 = _1262 / _1270;
    float _1273 = _1266 / _1270;
    float _1421;
    float _1422;
    float _1423;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1300 = ((uint(_1273 > cbSceneParam._m0[59u].y) + uint(_1273 > cbSceneParam._m0[59u].x)) + uint(_1273 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1301 = _1300 + 43u;
        uint _1309 = _1300 + 44u;
        uint _1317 = _1300 + 45u;
        uint _1325 = _1300 + 46u;
        float _1336 = fma(_1270, cbSceneParam._m0[_1301].w, fma(_1266, cbSceneParam._m0[_1301].z, fma(_1262, cbSceneParam._m0[_1301].y, _1258 * cbSceneParam._m0[_1301].x)));
        float _1340 = fma(_1270, cbSceneParam._m0[_1309].w, fma(_1266, cbSceneParam._m0[_1309].z, fma(_1262, cbSceneParam._m0[_1309].y, _1258 * cbSceneParam._m0[_1309].x)));
        float _1348 = fma(_1270, cbSceneParam._m0[_1325].w, fma(_1266, cbSceneParam._m0[_1325].z, fma(_1262, cbSceneParam._m0[_1325].y, _1258 * cbSceneParam._m0[_1325].x)));
        float _1353 = cbSceneParam._m0[33u].z * _1348;
        float _1355 = cbSceneParam._m0[33u].w * _1348;
        float _1358 = fma(_1270, cbSceneParam._m0[_1317].w, fma(_1266, cbSceneParam._m0[_1317].z, fma(_1262, cbSceneParam._m0[_1317].y, _1258 * cbSceneParam._m0[_1317].x))) / _1348;
        float _1406 = (cbSceneParam._m0[33u].x - sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273))) * cbSceneParam._m0[33u].y;
        float _2895 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1414 = (isnan(1.0) ? _2895 : (isnan(_2895) ? 1.0 : min(_2895, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1353 + _1336) / _1348, (_1355 + _1340) / _1348), _1358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1355 + _1336) / _1348, (_1340 - _1353) / _1348), _1358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1336 - _1353) / _1348, (_1340 - _1355) / _1348), _1358), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1336 - _1355) / _1348, (_1353 + _1340) / _1348), _1358), 0.0)).x), vec4(0.25)));
        _1421 = 1.0 - (_1414 * cbSceneParam._m0[34u].x);
        _1422 = 1.0 - (_1414 * cbSceneParam._m0[34u].y);
        _1423 = 1.0 - (_1414 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1421 = 1.0;
        _1422 = 1.0;
        _1423 = 1.0;
    }
    float _1487;
    float _1489;
    float _1491;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1475 = fma(_1270, cbSceneParam._m0[63u].w, fma(_1266, cbSceneParam._m0[63u].z, fma(_1262, cbSceneParam._m0[63u].y, _1258 * cbSceneParam._m0[63u].x)));
        float _1476 = fma(_1270, cbSceneParam._m0[60u].w, fma(_1266, cbSceneParam._m0[60u].z, fma(_1262, cbSceneParam._m0[60u].y, _1258 * cbSceneParam._m0[60u].x))) / _1475;
        float _1477 = fma(_1270, cbSceneParam._m0[61u].w, fma(_1266, cbSceneParam._m0[61u].z, fma(_1262, cbSceneParam._m0[61u].y, _1258 * cbSceneParam._m0[61u].x))) / _1475;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_1476 >= cbSceneParam._m0[64u].x) && (_1477 >= cbSceneParam._m0[64u].y)) && (_1476 <= cbSceneParam._m0[64u].z)) && (_1477 <= cbSceneParam._m0[64u].w))
        {
            float _1674 = fma(_1270, cbSceneParam._m0[62u].w, fma(_1266, cbSceneParam._m0[62u].z, fma(_1262, cbSceneParam._m0[62u].y, _1258 * cbSceneParam._m0[62u].x))) / _1475;
            float _1678 = isnan(cbSceneParam._m0[41u].w) ? _1674 : (isnan(_1674) ? cbSceneParam._m0[41u].w : max(_1674, cbSceneParam._m0[41u].w));
            float _1721 = (cbSceneParam._m0[33u].x - sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273))) * cbSceneParam._m0[33u].y;
            float _2911 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
            float _1728 = (isnan(1.0) ? _2911 : (isnan(_2911) ? 1.0 : min(_2911, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1476, cbSceneParam._m0[33u].w + _1477), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1476, _1477 - cbSceneParam._m0[33u].z), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1476 - cbSceneParam._m0[33u].z, _1477 - cbSceneParam._m0[33u].w), _1678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1476 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1477), _1678), 0.0)).x), vec4(0.25)));
            float _1732 = 1.0 - (_1728 * cbSceneParam._m0[34u].x);
            float _1733 = 1.0 - (_1728 * cbSceneParam._m0[34u].y);
            float _1734 = 1.0 - (_1728 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_1734) ? _1423 : (isnan(_1423) ? _1734 : min(_1423, _1734));
            frontier_phi_61_60_ladder_1 = isnan(_1733) ? _1422 : (isnan(_1422) ? _1733 : min(_1422, _1733));
            frontier_phi_61_60_ladder_2 = isnan(_1732) ? _1421 : (isnan(_1421) ? _1732 : min(_1421, _1732));
        }
        else
        {
            frontier_phi_61_60_ladder = _1423;
            frontier_phi_61_60_ladder_1 = _1422;
            frontier_phi_61_60_ladder_2 = _1421;
        }
        _1487 = frontier_phi_61_60_ladder_2;
        _1489 = frontier_phi_61_60_ladder_1;
        _1491 = frontier_phi_61_60_ladder;
    }
    else
    {
        _1487 = _1421;
        _1489 = _1422;
        _1491 = _1423;
    }
    uint _1493 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1497 = floatBitsToUint(cbInstanceData._m0[_1493 + 5u]);
    uint _1499 = _1497.x * 14u;
    uint _1500 = _1499 + 13u;
    float _1505 = _568 + (-1.0);
    float _1509 = (cbLight._m0[_1500].x * _1505) + 1.0;
    float _1510 = (cbLight._m0[_1500].y * _1505) + 1.0;
    uint _1511 = _1499 + 8u;
    float _1522 = cbLight._m0[_1499].x + _533;
    float _1523 = cbLight._m0[_1499].y + _534;
    float _1524 = cbLight._m0[_1499].z + _535;
    float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
    float _1532 = dot(vec3(0.0), vec3(cbLight._m0[_1499].xyz));
    float _2937 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
    float _1535 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
    float _1536 = dot(vec3(0.0), vec3(_533, _534, _535));
    float _2948 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1539 = isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0));
    float _1540 = dot(vec3(cbLight._m0[_1499].xyz), vec3(_1522 * _1528, _1523 * _1528, _1524 * _1528));
    float _2959 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
    float _1551 = (exp2(log2(1.0 - (isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1557 = (0.5 / ((_1535 + 9.9999999392252902907785028219223e-09) + _1539)) * _1535;
    float _2970 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
    float _1559 = (isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0))) * 0.31831014156341552734375;
    float _1561 = isnan(1.0) ? _1509 : (isnan(_1509) ? 1.0 : min(_1509, 1.0));
    uint _1574 = _1499 + 9u;
    uint _1580 = _1499 | 1u;
    float _1586 = cbLight._m0[_1580].x + _533;
    float _1587 = cbLight._m0[_1580].y + _534;
    float _1588 = cbLight._m0[_1580].z + _535;
    float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
    float _1596 = dot(vec3(0.0), vec3(cbLight._m0[_1580].xyz));
    float _2986 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1599 = isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1580].xyz), vec3(_1586 * _1592, _1587 * _1592, _1588 * _1592));
    float _2997 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1609 = (exp2(log2(1.0 - (isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1613 = (0.5 / ((_1599 + 9.9999999392252902907785028219223e-09) + _1539)) * _1599;
    float _3008 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1615 = (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0))) * 0.31831014156341552734375;
    float _1616 = isnan(1.0) ? _1510 : (isnan(_1510) ? 1.0 : min(_1510, 1.0));
    float _1626 = (((_1609 * cbLight._m0[_1574].x) * _1615) * _1616) + ((((cbLight._m0[_1511].x * _1487) * _1551) * _1559) * _1561);
    float _1627 = (((_1609 * cbLight._m0[_1574].y) * _1615) * _1616) + ((((cbLight._m0[_1511].y * _1489) * _1551) * _1559) * _1561);
    float _1628 = (((_1609 * cbLight._m0[_1574].z) * _1615) * _1616) + ((((cbLight._m0[_1511].z * _1491) * _1551) * _1559) * _1561);
    float _1791;
    float _1793;
    float _1795;
    if (_1497.y == 0u)
    {
        uvec4 _1746 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1747 = _1746.x;
        uint _1758 = uint((float(_1746.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _1747))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _1747)));
        float _1768 = (log2(_1273 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1769 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        uint _1772 = uint(isnan(14.0) ? _1769 : (isnan(_1769) ? 14.0 : min(_1769, 14.0)));
        uvec4 _1777 = texelFetch(g_lightClusterGridBuffer, int(((_1772 << 2u) + (_1758 << 6u)) >> 2u));
        uint _1778 = _1777.x;
        uint _1779 = _1746.z;
        float _1885;
        float _1887;
        float _1889;
        if (((((1u << ((_1779 >> 4u) & 15u)) + 4294967295u) & _1778) == 0u) || ((_1779 & 240u) == 0u))
        {
            _1885 = 0.0;
            _1887 = 0.0;
            _1889 = 0.0;
        }
        else
        {
            float _1886;
            float _1888;
            float _1890;
            float _2047 = 0.0;
            float _2048 = 0.0;
            float _2049 = 0.0;
            uint _2050 = 0u;
            uint _2059;
            bool _2060;
            for (;;)
            {
                _2059 = texelFetch(g_lightClassification, int((((_1772 << 5u) + (_1758 << 9u)) + (_2050 << 2u)) >> 2u)).x;
                _2060 = _2059 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                if (_2060)
                {
                    frontier_phi_87_pred = _2049;
                    frontier_phi_87_pred_1 = _2048;
                    frontier_phi_87_pred_2 = _2047;
                }
                else
                {
                    float _2204;
                    float _2205;
                    float _2206;
                    uint _2207;
                    _2204 = _2047;
                    _2205 = _2048;
                    _2206 = _2049;
                    _2207 = _2059;
                    float _2137;
                    float _2138;
                    float _2139;
                    for (;;)
                    {
                        uint _2211 = uint(findLSB(_2207)) + (_2050 << 5u);
                        uint _2208 = (_2207 + 4294967295u) & _2207;
                        uint _2213 = _2211 * 48u;
                        vec4 _2227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2213)).x, texelFetch(g_PointLightRenderingBuffer, int(_2213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2213 + 3u)).x));
                        uint _2244 = (_2211 * 48u) + 8u;
                        vec3 _2255 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2244)).x, texelFetch(g_PointLightRenderingBuffer, int(_2244 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2244 + 2u)).x));
                        float _2259 = _2227.x - _1271;
                        float _2260 = _2227.y - _1272;
                        float _2261 = _2227.z - _1273;
                        float _2262 = dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261));
                        float _2265 = inversesqrt(_2262);
                        float _2274 = 1.0 - (_2262 * _2227.w);
                        float _3034 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
                        float _2276 = sqrt(_2262) * uintBitsToFloat(uvec4(_2234, _2235, _2236, texelFetch(g_PointLightRenderingBuffer, int(((_2211 * 48u) + 4u) + 3u)).x)).w;
                        float _2279 = 1.39999997615814208984375 / (_2276 + 1.39999997615814208984375);
                        float _2280 = _2279 * _2279;
                        float _2283 = ((1.0 - _2280) * dot(vec3(0.0), vec3(_2265 * _2259, _2265 * _2260, _2265 * _2261))) + _2280;
                        float _2285 = (-0.0) - _1271;
                        float _2286 = (-0.0) - _1272;
                        float _2287 = (-0.0) - _1273;
                        float _2291 = inversesqrt(dot(vec3(_2285, _2286, _2287), vec3(_2285, _2286, _2287)));
                        float _2295 = dot(vec3(0.0), vec3(_2291 * _2285, _2291 * _2286, _2291 * _2287));
                        float _3045 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
                        float _3056 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
                        float _2299 = isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0));
                        float _2303 = (0.5 / (((isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))) + 9.9999999392252902907785028219223e-09) + _2299)) * _2299;
                        float _3067 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
                        float _2312 = (((isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))) * 3.1415927410125732421875) / (((_2276 * _2276) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0)));
                        _2137 = (_2312 * _2255.x) + _2204;
                        _2138 = (_2312 * _2255.y) + _2205;
                        _2139 = (_2312 * _2255.z) + _2206;
                        if (_2208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2204 = _2137;
                            _2205 = _2138;
                            _2206 = _2139;
                            _2207 = _2208;
                        }
                    }
                    frontier_phi_87_pred = _2139;
                    frontier_phi_87_pred_1 = _2138;
                    frontier_phi_87_pred_2 = _2137;
                }
                _1890 = frontier_phi_87_pred;
                _1888 = frontier_phi_87_pred_1;
                _1886 = frontier_phi_87_pred_2;
                uint _2051 = _2050 + 1u;
                if (_2051 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2047 = _1886;
                    _2048 = _1888;
                    _2049 = _1890;
                    _2050 = _2051;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1885 = _1886;
            _1887 = _1888;
            _1889 = _1890;
        }
        uvec4 _1893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1894 = _1893.z;
        uint _1896 = (_1894 >> 8u) & 15u;
        float _2027;
        float _2029;
        float _2031;
        if (((4294967295u << _1896) & _1778) == 0u)
        {
            _2027 = _1885;
            _2029 = _1887;
            _2031 = _1889;
        }
        else
        {
            float _2043 = inversesqrt(dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273)));
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            if (_1896 < ((_1894 >> 12u) & 15u))
            {
                float _2028;
                float _2030;
                float _2032;
                float _2190 = _1885;
                float _2191 = _1887;
                float _2192 = _1889;
                uint _2193 = _1896;
                uint _2202;
                bool _2203;
                for (;;)
                {
                    _2202 = texelFetch(g_lightClassification, int((((_1772 << 5u) + (_1758 << 9u)) + (_2193 << 2u)) >> 2u)).x;
                    _2203 = _2202 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    if (_2203)
                    {
                        frontier_phi_98_pred = _2192;
                        frontier_phi_98_pred_1 = _2191;
                        frontier_phi_98_pred_2 = _2190;
                    }
                    else
                    {
                        float _2326;
                        float _2327;
                        float _2328;
                        float _2547;
                        float _2548;
                        float _2549;
                        float _2336 = _2190;
                        float _2337 = _2191;
                        float _2338 = _2192;
                        uint _2339 = _2202;
                        uint _2340;
                        uint _2350;
                        vec4 _2365;
                        float _2366;
                        vec3 _2378;
                        vec4 _2393;
                        vec4 _2408;
                        float _2454;
                        bool _2455;
                        for (;;)
                        {
                            _2350 = ((_2193 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2339));
                            _2340 = (_2339 + 4294967295u) & _2339;
                            uint _2352 = _2350 * 40u;
                            _2365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2352 + 3u)).x));
                            _2366 = _2365.w;
                            uint _2368 = (_2350 * 40u) + 8u;
                            _2378 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2368 + 2u)).x));
                            uint _2380 = (_2350 * 40u) + 16u;
                            _2393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2380 + 3u)).x));
                            uint _2395 = (_2350 * 40u) + 20u;
                            _2408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 3u)).x));
                            uint _2410 = (_2350 * 40u) + 24u;
                            vec4 _2423 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2410)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2410 + 3u)).x));
                            uint _2429 = (_2350 * 40u) + 28u;
                            vec4 _2442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 3u)).x));
                            _2454 = fma(_1273, _2442.z, fma(_1272, _2442.y, _2442.x * _1271)) + _2442.w;
                            _2455 = !((fma(_1273, _2423.z, fma(_1272, _2423.y, _2423.x * _1271)) + _2423.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            if (_2455)
                            {
                                float _2489 = _2365.x - _1271;
                                float _2490 = _2365.y - _1272;
                                float _2491 = _2365.z - _1273;
                                float _2492 = dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491));
                                float _2495 = inversesqrt(_2492);
                                float _2502 = 1.0 - (_2492 / (_2366 * _2366));
                                float _3078 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
                                float _2504 = sqrt(_2492) * uintBitsToFloat(uvec4(_2458, _2459, _2460, texelFetch(g_SpotLightRenderingBuffer, int(((_2350 * 40u) + 4u) + 3u)).x)).w;
                                float _2506 = 1.39999997615814208984375 / (_2504 + 1.39999997615814208984375);
                                float _2507 = _2506 * _2506;
                                float _2510 = (fma(_1273, _2393.z, fma(_1272, _2393.y, _2393.x * _1271)) + _2393.w) / _2454;
                                float _2511 = (fma(_1273, _2408.z, fma(_1272, _2408.y, _2408.x * _1271)) + _2408.w) / _2454;
                                float _2515 = 1.0 - dot(vec2(_2510, _2511), vec2(_2510, _2511));
                                float _3089 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
                                float _2523 = dot(vec3(0.0), vec3((-0.0) - (_1271 * _2043), (-0.0) - (_1272 * _2043), (-0.0) - (_1273 * _2043)));
                                float _3100 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
                                float _2531 = ((1.0 - _2507) * dot(vec3(0.0), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491))) + _2507;
                                float _3111 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
                                float _2532 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
                                float _2536 = (0.5 / (((isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) + 9.9999999392252902907785028219223e-09) + _2532)) * _2532;
                                float _3122 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
                                float _2543 = ((isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0)))) * (((isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * 3.1415927410125732421875) / (((_2504 * _2504) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_104_pred = _2543 * _2378.y;
                                frontier_phi_104_pred_1 = _2543 * _2378.x;
                                frontier_phi_104_pred_2 = _2543 * _2378.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                            }
                            _2548 = frontier_phi_104_pred;
                            _2547 = frontier_phi_104_pred_1;
                            _2549 = frontier_phi_104_pred_2;
                            _2326 = _2547 + _2336;
                            _2327 = _2548 + _2337;
                            _2328 = _2549 + _2338;
                            if (_2340 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2336 = _2326;
                                _2337 = _2327;
                                _2338 = _2328;
                                _2339 = _2340;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _2328;
                        frontier_phi_98_pred_1 = _2327;
                        frontier_phi_98_pred_2 = _2326;
                    }
                    _2032 = frontier_phi_98_pred;
                    _2030 = frontier_phi_98_pred_1;
                    _2028 = frontier_phi_98_pred_2;
                    uint _2194 = _2193 + 1u;
                    if (_2194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2190 = _2028;
                        _2191 = _2030;
                        _2192 = _2032;
                        _2193 = _2194;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2032;
                frontier_phi_78_79_ladder_1 = _2030;
                frontier_phi_78_79_ladder_2 = _2028;
            }
            else
            {
                frontier_phi_78_79_ladder = _1889;
                frontier_phi_78_79_ladder_1 = _1887;
                frontier_phi_78_79_ladder_2 = _1885;
            }
            _2027 = frontier_phi_78_79_ladder_2;
            _2029 = frontier_phi_78_79_ladder_1;
            _2031 = frontier_phi_78_79_ladder;
        }
        float _2036 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _1791 = ((_2027 * 0.039999999105930328369140625) * _2036) + _1626;
        _1793 = ((_2029 * 0.039999999105930328369140625) * _2036) + _1627;
        _1795 = ((_2031 * 0.039999999105930328369140625) * _2036) + _1628;
    }
    else
    {
        _1791 = _1626;
        _1793 = _1627;
        _1795 = _1628;
    }
    uint _1801 = _1493 + 9u;
    uint _1802 = _1801 + uint(cbMatDynParam._m0[0u].w);
    float _1817 = (cbInstanceData._m0[_1802].x * ((_503 * ((_459.x * cbMtdParam._m0[10u].x) - _384)) + _384)) + ((_1791 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _992)) * cbPerFrame._m0[3u].x);
    float _1818 = (cbInstanceData._m0[_1802].y * ((_503 * ((_459.y * cbMtdParam._m0[10u].y) - _385)) + _385)) + ((_1793 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _992)) * cbPerFrame._m0[3u].x);
    float _1819 = (cbInstanceData._m0[_1802].z * ((_503 * ((_459.z * cbMtdParam._m0[10u].z) - _386)) + _386)) + ((_1795 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _992)) * cbPerFrame._m0[3u].x);
    float _1820 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1822 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    uint _1823 = _1493 + 6u;
    float _1831 = _555 / cbSceneParam._m0[86u].x;
    float _1832 = _556 / cbSceneParam._m0[86u].y;
    vec4 _1846 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1831, _1832, (log2((isnan(cbSceneParam._m0[77u].w) ? _528 : (isnan(_528) ? cbSceneParam._m0[77u].w : min(_528, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1848 = _1846.x;
    float _1849 = _1846.y;
    float _1850 = _1846.z;
    float _1851 = _1846.w;
    float _1941;
    float _1943;
    float _1945;
    float _1947;
    if (_528 > cbSceneParam._m0[78u].w)
    {
        float _1904 = isnan(_528) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _528 : min(cbSceneParam._m0[80u].w, _528));
        float _1905 = _1904 / _528;
        float _1916 = _1905 * _259;
        float _1917 = _260 * _1905;
        float _1918 = (-0.0) - _1917;
        float _1919 = _1905 * _261;
        float _1921 = (cbSceneParam._m0[77u].w * _1918) / _1904;
        float _1922 = _1921 + cbSceneParam._m0[79u].w;
        float _1923 = cbSceneParam._m0[79u].w - _1917;
        float _1929 = sqrt(((_1916 * _1916) + (_1917 * _1917)) + (_1919 * _1919));
        float _1932 = (1.0 - (cbSceneParam._m0[77u].w / _1904)) * _1929;
        float _1937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2147;
        if (abs((_1918 - _1921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2147 = ((((_1922 > 0.0) ? exp2(_1937 * _1922) : (2.0 - exp2(_1939 * _1922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1932;
        }
        else
        {
            float _2073 = 1.0 / cbSceneParam._m0[80u].x;
            float _2074 = isnan(_1923) ? _1922 : (isnan(_1922) ? _1923 : max(_1922, _1923));
            float _2075 = isnan(_1923) ? _1922 : (isnan(_1922) ? _1923 : min(_1922, _1923));
            float _2084 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : min(_2074, 0.0));
            float _2085 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : min(_2075, 0.0));
            _2147 = ((abs(_1929 / _1918) * cbSceneParam._m0[80u].y) * ((((_2084 - _2085) * 2.0) - ((exp2(_1937 * (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)))) - exp2(_1937 * (isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))))) * _2073)) - ((exp2(_1939 * _2084) - exp2(_1939 * _2085)) * _2073))) + (_1932 * cbSceneParam._m0[80u].z);
        }
        vec4 _2149 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1831, _1832, 1.0), 0.0);
        float _2158 = exp2((_2147 * (-1.44269502162933349609375)) * (1.0 - _2149.w));
        float _2159 = log2(_2158);
        float _2175 = log2(_1851);
        _1941 = (exp2(_2175 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].x)) * _2149.x) / cbSceneParam._m0[78u].x)) + _1848;
        _1943 = (exp2(_2175 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].y)) * _2149.y) / cbSceneParam._m0[78u].y)) + _1849;
        _1945 = (exp2(_2175 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2159 * cbSceneParam._m0[78u].z)) * _2149.z) / cbSceneParam._m0[78u].z)) + _1850;
        _1947 = _2158 * _1851;
    }
    else
    {
        _1941 = _1848;
        _1943 = _1849;
        _1945 = _1850;
        _1947 = _1851;
    }
    bool _2185;
    vec4 _1957;
    vec4 _1980;
    float _1982;
    float _1986;
    float _1987;
    float _1988;
    float _1989;
    bool _2000;
    for (;;)
    {
        _1957 = cbMatDynParam._m0[0u];
        float _1959 = roundEven(_1957.y);
        bool _1960 = _1959 == 3.0;
        float _1962 = log2(_1947);
        float _1969 = exp2(_1962 * cbSceneParam._m0[78u].x) * _1820;
        float _1970 = exp2(_1962 * cbSceneParam._m0[78u].y) * _1821;
        float _1971 = exp2(_1962 * cbSceneParam._m0[78u].z) * _1822;
        float _1978 = _542 + (-0.5);
        _1980 = cbMtdParam._m0[1u];
        _1982 = _1980.y * _1978;
        float _1985 = (_1959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1986 = _1985 * (_1960 ? _1969 : (_1969 + (cbSceneParam._m0[72u].w * _1941)));
        _1987 = _1985 * (_1960 ? _1970 : (_1970 + (cbSceneParam._m0[72u].w * _1943)));
        _1988 = _1985 * (_1960 ? _1971 : (_1971 + (cbSceneParam._m0[72u].w * _1945)));
        _1989 = _1978 * 0.999000012874603271484375;
        _2000 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2000)
        {
            if ((cbInstanceData._m0[_1493 + 7u].x + _1989) < 0.5)
            {
                _2185 = true;
                break;
            }
        }
        uint _2108 = _1801 + uint(_1957.w);
        if ((cbInstanceData._m0[_2108].w < 1.0) && ((cbInstanceData._m0[_2108].w + _1989) < 0.5))
        {
            _2185 = true;
            break;
        }
        if ((_1982 + 1.0) < _1980.x)
        {
            _2185 = true;
            break;
        }
        _2185 = false;
        break;
    }
    float _2317;
    if (_2185)
    {
        discard_state = true;
        _2317 = 0.0;
    }
    else
    {
        _2317 = cbInstanceData._m0[_1823].w;
    }
    SV_Target.x = _1986;
    SV_Target.y = _1987;
    SV_Target.z = _1988;
    SV_Target.w = _2317;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1823].w;
    discard_exit();
}


