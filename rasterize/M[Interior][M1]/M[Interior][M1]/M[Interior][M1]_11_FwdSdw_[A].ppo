#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _802;
float _3020;
float _3021;
float _3022;
float _3023;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    float _282 = cbMtdParam._m0[22u].y + _254;
    float _283 = cbMtdParam._m0[22u].z + _255;
    float _284 = cbMtdParam._m0[22u].w + _256;
    float _301 = (-0.0) - dot(vec3(_282, _283, _284), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _302 = (-0.0) - dot(vec3(_282, _283, _284), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _303 = (-0.0) - dot(vec3(_282, _283, _284), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _307 = inversesqrt(dot(vec3(_301, _302, _303), vec3(_301, _302, _303)));
    float _308 = _307 * _303;
    float _310 = (cbMtdParam._m0[19u].x * _301) * _307;
    float _312 = (cbMtdParam._m0[18u].w * _302) * _307;
    float _313 = fract(TEXCOORD.x);
    float _314 = fract(TEXCOORD.y);
    float _320;
    if (_310 > 0.0)
    {
        _320 = (1.0 - _313) / _310;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_310 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _313) / _310;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _320 = frontier_phi_3_2_ladder;
    }
    float _328;
    if (_312 > 0.0)
    {
        _328 = (1.0 - _314) / _312;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _314) / _312;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _328 = frontier_phi_7_6_ladder;
    }
    float _332 = (_308 > 0.0) ? (cbMtdParam._m0[15u].x / _308) : 5000.0;
    float _333 = isnan(_328) ? _320 : (isnan(_320) ? _328 : min(_320, _328));
    float _334 = isnan(_332) ? _333 : (isnan(_333) ? _332 : min(_333, _332));
    float _338 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _345 = ((_334 * _308) + _338) / _338;
    vec4 _371 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_313 + (-0.5)) + (_334 * _310)) / _345) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_314 + (-0.5)) + (_334 * _312)) / _345) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _382 = cbMtdParam._m0[9u].x * _371.x;
    float _383 = cbMtdParam._m0[9u].y * _371.y;
    float _384 = cbMtdParam._m0[9u].z * _371.z;
    float _3042 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _3053 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _3064 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _403 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _407 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _408 = _254 * _407;
    float _409 = _255 * _407;
    float _410 = _256 * _407;
    vec4 _415 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _417 = _415.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _514 = sqrt(((_254 * _254) + (_255 * _255)) + (_256 * _256));
        float _521 = (cbMatDynParam._m0[5u].x * _514) + cbMatDynParam._m0[5u].y;
        float _3075 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
        float _522 = isnan(1.0) ? _3075 : (isnan(_3075) ? 1.0 : min(_3075, 1.0));
        float _526 = (cbMatDynParam._m0[5u].z * _514) + cbMatDynParam._m0[5u].w;
        float _3086 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3086 : (isnan(_3086) ? 1.0 : min(_3086, 1.0))) - _522)) + _522) < ((_417 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _430 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _431 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3042 : (isnan(_3042) ? 1.0 : min(_3042, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3097 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3097 : (isnan(_3097) ? 1.0 : min(_3097, 1.0));
    float _3108 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
    float _3119 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _430, cbSceneParam._m0[86u].y * _431));
    float _470 = _467.x * TEXCOORD.z;
    float _471 = (-0.0) - _408;
    float _472 = (-0.0) - _409;
    float _473 = (-0.0) - _410;
    float _495 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _801;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = (cbModelParam._m0[37u].x * ((((fma(_503, cbModelParam._m0[26u].z, fma(_499, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _495)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _590 = (cbModelParam._m0[37u].y * ((((fma(_503, cbModelParam._m0[27u].z, fma(_499, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _495)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _591 = (((((fma(_503, cbModelParam._m0[28u].z, fma(_499, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _495)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _630 = _628 * (_594.x + (-0.5));
        float _631 = _628 * (_594.y + (-0.5));
        float _632 = _628 * (_594.z + (-0.5));
        float _639 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _640 = _639 * (_601.x + (-0.5));
        float _641 = _639 * (_601.y + (-0.5));
        float _642 = _639 * (_601.z + (-0.5));
        float _649 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_608.x + (-0.5));
        float _651 = _649 * (_608.y + (-0.5));
        float _652 = _649 * (_608.z + (-0.5));
        float _659 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_615.x + (-0.5));
        float _661 = _659 * (_615.y + (-0.5));
        float _662 = _659 * (_615.z + (-0.5));
        float _663 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = _630 * 0.5;
        float _667 = _640 * 0.5;
        float _668 = _650 * 0.5;
        float _669 = dot(vec3(_666, _667, _668), vec3(_666, _667, _668));
        float _674 = (_669 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_669);
        float _683 = (dot(vec3(0.0), vec3(_674 * _666, _674 * _667, _674 * _668)) + 1.0) * 0.5;
        float _3145 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _693 = sqrt(((_667 * _667) + (_666 * _666)) + (_668 * _668)) / (_663 + 9.9999997473787516355514526367188e-06);
        float _3156 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _694 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
        float _695 = _694 * 2.0;
        float _699 = (1.0 - _694) / (_694 + 1.0);
        float _3167 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
        float _709 = ((((1.0 - _700) * (_695 + 2.0)) * exp2(log2(isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))) * (_695 + 1.0))) + _700) * _663;
        float _710 = _631 * 0.5;
        float _711 = _641 * 0.5;
        float _712 = _651 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _726 = (dot(vec3(0.0), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3178 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _735 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3189 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3200 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0))) * (_737 + 1.0))) + _742) * _664;
        float _752 = _632 * 0.5;
        float _753 = _642 * 0.5;
        float _754 = _652 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(0.0), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3211 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3222 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3233 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))) * (_779 + 1.0))) + _784) * _665;
        _801 = _632;
        _803 = _631;
        _804 = _630;
        _805 = _642;
        _806 = _641;
        _807 = _640;
        _808 = _652;
        _809 = _651;
        _810 = _650;
        _811 = _665;
        _812 = _664;
        _813 = _663;
        _814 = cbModelParam._m0[36u].z * (isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0)));
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
    }
    else
    {
        _801 = _802;
        _803 = _802;
        _804 = _802;
        _805 = _802;
        _806 = _802;
        _807 = _802;
        _808 = _802;
        _809 = _802;
        _810 = _802;
        _811 = _802;
        _812 = _802;
        _813 = _802;
        _814 = 0.0;
        _815 = 0.0;
        _816 = 0.0;
    }
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _873 = (cbModelParam._m0[38u].x * ((((fma(_503, cbModelParam._m0[30u].z, fma(_499, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _495)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _874 = (cbModelParam._m0[38u].y * ((((fma(_503, cbModelParam._m0[31u].z, fma(_499, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _495)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _875 = (((((fma(_503, cbModelParam._m0[32u].z, fma(_499, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _495)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_873, _874, _875), 0.0);
        float _910 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_877.x + (-0.5));
        float _912 = _910 * (_877.y + (-0.5));
        float _913 = _910 * (_877.z + (-0.5));
        float _920 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_884.x + (-0.5));
        float _922 = _920 * (_884.y + (-0.5));
        float _923 = _920 * (_884.z + (-0.5));
        float _930 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_891.x + (-0.5));
        float _932 = _930 * (_891.y + (-0.5));
        float _933 = _930 * (_891.z + (-0.5));
        float _940 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_898.x + (-0.5));
        float _942 = _940 * (_898.y + (-0.5));
        float _943 = _940 * (_898.z + (-0.5));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _947 = _911 * 0.5;
        float _948 = _921 * 0.5;
        float _949 = _931 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(0.0), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3274 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3285 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3296 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0))) * (_974 + 1.0))) + _979) * _944;
        float _989 = _912 * 0.5;
        float _990 = _922 * 0.5;
        float _991 = _932 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(0.0), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3307 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3318 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3329 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) * (_1016 + 1.0))) + _1021) * _945;
        float _1031 = _913 * 0.5;
        float _1032 = _923 * 0.5;
        float _1033 = _933 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(0.0), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_946 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3362 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_1058 + 1.0))) + _1063) * _946;
        _1080 = _913;
        _1081 = _912;
        _1082 = _911;
        _1083 = _923;
        _1084 = _922;
        _1085 = _921;
        _1086 = _933;
        _1087 = _932;
        _1088 = _931;
        _1089 = _946;
        _1090 = _945;
        _1091 = _944;
        _1092 = cbModelParam._m0[36u].w * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
        _1093 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1094 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
    }
    else
    {
        _1080 = _802;
        _1081 = _802;
        _1082 = _802;
        _1083 = _802;
        _1084 = _802;
        _1085 = _802;
        _1086 = _802;
        _1087 = _802;
        _1088 = _802;
        _1089 = _802;
        _1090 = _802;
        _1091 = _802;
        _1092 = 0.0;
        _1093 = 0.0;
        _1094 = 0.0;
    }
    float _1104 = (cbModelParam._m0[1u].x * (_1092 - _814)) + _814;
    float _1105 = (cbModelParam._m0[1u].x * (_1093 - _815)) + _815;
    float _1106 = (cbModelParam._m0[1u].x * (_1094 - _816)) + _816;
    float _1127 = fma(_1106, cbSceneParam._m0[89u].z, fma(_1105, cbSceneParam._m0[89u].y, _1104 * cbSceneParam._m0[89u].x));
    float _1130 = fma(_1106, cbSceneParam._m0[90u].z, fma(_1105, cbSceneParam._m0[90u].y, _1104 * cbSceneParam._m0[90u].x));
    float _1133 = fma(_1106, cbSceneParam._m0[91u].z, fma(_1105, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1104));
    float _1148 = _408 * (-0.5);
    float _1149 = _409 * (-0.5);
    float _1150 = _410 * (-0.5);
    float _1151 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1082, _1085, _1088, _1091));
    float _1154 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1081, _1084, _1087, _1090));
    float _1157 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_1080, _1083, _1086, _1089));
    float _1191;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1164 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_801, _805, _808, _811));
        float _1168 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_803, _806, _809, _812));
        float _1172 = dot(vec4(_1148, _1149, _1150, 1.0), vec4(_804, _807, _810, _813));
        float _1179 = dot(vec4(cbModelParam._m0[39u]), vec4(_1148, _1149, _1150, 1.0));
        _1191 = dot(vec3(isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)), isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1179) ? 0.0 : (isnan(0.0) ? _1179 : max(0.0, _1179))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1191 = 1.0;
    }
    float _1202;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1193 = dot(vec4(cbModelParam._m0[40u]), vec4(_1148, _1149, _1150, 1.0));
        _1202 = dot(vec3(isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1193) ? 0.0 : (isnan(0.0) ? _1193 : max(0.0, _1193))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1202 = 1.0;
    }
    float _1206 = (_1202 * cbModelParam._m0[1u].x) + (_1191 * (1.0 - cbModelParam._m0[1u].x));
    float _1215 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1297;
    float _1299;
    float _1301;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1264 = fma(_503, cbModelParam._m0[13u].z, fma(_499, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495)) + cbModelParam._m0[13u].w;
        float _1268 = fma(_503, cbModelParam._m0[14u].z, fma(_499, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495)) + cbModelParam._m0[14u].w;
        float _1272 = fma(_503, cbModelParam._m0[15u].z, fma(_499, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495)) + cbModelParam._m0[15u].w;
        float _1275 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _1278 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _1281 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _1307;
        if (_1275 > 0.0)
        {
            _1307 = abs((1.0 - _1264) / _1275);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1264 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1307 = frontier_phi_25_23_ladder;
        }
        float _1478;
        if (_1278 > 0.0)
        {
            _1478 = abs((1.0 - _1268) / _1278);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1278 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1268 + 1.0) / _1278);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1478 = frontier_phi_34_30_ladder;
        }
        float _1873;
        if (_1281 > 0.0)
        {
            _1873 = abs((1.0 - _1272) / _1281);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1272 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _1873 = frontier_phi_46_41_ladder;
        }
        float _1875 = isnan(_1478) ? _1307 : (isnan(_1307) ? _1478 : min(_1307, _1478));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1275) + _1264;
        float _1881 = (_1876 * _1278) + _1268;
        float _1882 = (_1876 * _1281) + _1272;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1215);
            frontier_phi_24_46_ladder = _2116.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2116.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2116.x * cbModelParam._m0[1u].y;
        }
        _1297 = frontier_phi_24_46_ladder_2;
        _1299 = frontier_phi_24_46_ladder_1;
        _1301 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1285 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _1215);
        _1297 = _1285.x * cbModelParam._m0[1u].y;
        _1299 = _1285.y * cbModelParam._m0[1u].y;
        _1301 = _1285.z * cbModelParam._m0[1u].y;
    }
    float _1304 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1393;
    float _1395;
    float _1397;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1357 = fma(_503, cbModelParam._m0[21u].z, fma(_499, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495)) + cbModelParam._m0[21u].w;
        float _1361 = fma(_503, cbModelParam._m0[22u].z, fma(_499, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495)) + cbModelParam._m0[22u].w;
        float _1365 = fma(_503, cbModelParam._m0[23u].z, fma(_499, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495)) + cbModelParam._m0[23u].w;
        float _1368 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1371 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1374 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1483;
        if (_1368 > 0.0)
        {
            _1483 = abs((1.0 - _1357) / _1368);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1357 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1483 = frontier_phi_36_32_ladder;
        }
        float _1900;
        if (_1371 > 0.0)
        {
            _1900 = abs((1.0 - _1361) / _1371);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1361 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1900 = frontier_phi_48_43_ladder;
        }
        float _2247;
        if (_1374 > 0.0)
        {
            _2247 = abs((1.0 - _1365) / _1374);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1365 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2247 = frontier_phi_60_55_ladder;
        }
        float _2249 = isnan(_1900) ? _1483 : (isnan(_1483) ? _1900 : min(_1483, _1900));
        float _2250 = isnan(_2247) ? _2249 : (isnan(_2249) ? _2247 : min(_2249, _2247));
        float _2254 = (_2250 * _1368) + _1357;
        float _2255 = (_2250 * _1371) + _1361;
        float _2256 = (_2250 * _1374) + _1365;
        float _2257 = _2250 * 9.9999997473787516355514526367188e-05;
        float _2258 = (-1.0) - _2257;
        float _2260 = _2257 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2256 > _2260) || ((_2256 < _2258) || ((_2255 > _2260) || ((_2255 < _2258) || ((_2254 < _2258) || (_2254 > _2260))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2390 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2256, cbModelParam._m0[17u].z, fma(_2255, cbModelParam._m0[17u].y, _2254 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2256, cbModelParam._m0[18u].z, fma(_2255, cbModelParam._m0[18u].y, _2254 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2256, cbModelParam._m0[19u].z, fma(_2255, cbModelParam._m0[19u].y, _2254 * cbModelParam._m0[19u].x))), _1304);
            frontier_phi_33_60_ladder = _2390.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2390.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2390.x * cbModelParam._m0[1u].z;
        }
        _1393 = frontier_phi_33_60_ladder_2;
        _1395 = frontier_phi_33_60_ladder_1;
        _1397 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _1304);
        _1393 = _1377.x * cbModelParam._m0[1u].z;
        _1395 = _1377.y * cbModelParam._m0[1u].z;
        _1397 = _1377.z * cbModelParam._m0[1u].z;
    }
    float _1409 = _470 * 0.01200000010430812835693359375;
    float _1411 = _1409 * ((cbModelParam._m0[1u].w * (_1393 - _1297)) + _1297);
    float _1412 = _1409 * ((cbModelParam._m0[1u].w * (_1395 - _1299)) + _1299);
    float _1413 = _1409 * ((cbModelParam._m0[1u].w * (_1397 - _1301)) + _1301);
    float _1416 = fma(_1413, cbSceneParam._m0[89u].z, fma(_1412, cbSceneParam._m0[89u].y, _1411 * cbSceneParam._m0[89u].x));
    float _1419 = fma(_1413, cbSceneParam._m0[90u].z, fma(_1412, cbSceneParam._m0[90u].y, _1411 * cbSceneParam._m0[90u].x));
    float _1422 = fma(_1413, cbSceneParam._m0[91u].z, fma(_1412, cbSceneParam._m0[91u].y, _1411 * cbSceneParam._m0[91u].x));
    float _1457 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1461 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1465 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1469 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1470 = _1457 / _1469;
    float _1471 = _1461 / _1469;
    float _1472 = _1465 / _1469;
    float _1620;
    float _1621;
    float _1622;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1499 = ((uint(_1472 > cbSceneParam._m0[59u].y) + uint(_1472 > cbSceneParam._m0[59u].x)) + uint(_1472 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1500 = _1499 + 43u;
        uint _1508 = _1499 + 44u;
        uint _1516 = _1499 + 45u;
        uint _1524 = _1499 + 46u;
        float _1535 = fma(_1469, cbSceneParam._m0[_1500].w, fma(_1465, cbSceneParam._m0[_1500].z, fma(_1461, cbSceneParam._m0[_1500].y, _1457 * cbSceneParam._m0[_1500].x)));
        float _1539 = fma(_1469, cbSceneParam._m0[_1508].w, fma(_1465, cbSceneParam._m0[_1508].z, fma(_1461, cbSceneParam._m0[_1508].y, _1457 * cbSceneParam._m0[_1508].x)));
        float _1547 = fma(_1469, cbSceneParam._m0[_1524].w, fma(_1465, cbSceneParam._m0[_1524].z, fma(_1461, cbSceneParam._m0[_1524].y, _1457 * cbSceneParam._m0[_1524].x)));
        float _1552 = cbSceneParam._m0[33u].z * _1547;
        float _1554 = cbSceneParam._m0[33u].w * _1547;
        float _1557 = fma(_1469, cbSceneParam._m0[_1516].w, fma(_1465, cbSceneParam._m0[_1516].z, fma(_1461, cbSceneParam._m0[_1516].y, _1457 * cbSceneParam._m0[_1516].x))) / _1547;
        float _1605 = (cbSceneParam._m0[33u].x - sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472))) * cbSceneParam._m0[33u].y;
        float _3488 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1613 = (isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1552 + _1535) / _1547, (_1554 + _1539) / _1547), _1557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1554 + _1535) / _1547, (_1539 - _1552) / _1547), _1557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1535 - _1552) / _1547, (_1539 - _1554) / _1547), _1557), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1535 - _1554) / _1547, (_1552 + _1539) / _1547), _1557), 0.0)).x), vec4(0.25)));
        _1620 = 1.0 - (_1613 * cbSceneParam._m0[34u].x);
        _1621 = 1.0 - (_1613 * cbSceneParam._m0[34u].y);
        _1622 = 1.0 - (_1613 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1620 = 1.0;
        _1621 = 1.0;
        _1622 = 1.0;
    }
    float _1686;
    float _1688;
    float _1690;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1674 = fma(_1469, cbSceneParam._m0[63u].w, fma(_1465, cbSceneParam._m0[63u].z, fma(_1461, cbSceneParam._m0[63u].y, _1457 * cbSceneParam._m0[63u].x)));
        float _1675 = fma(_1469, cbSceneParam._m0[60u].w, fma(_1465, cbSceneParam._m0[60u].z, fma(_1461, cbSceneParam._m0[60u].y, _1457 * cbSceneParam._m0[60u].x))) / _1674;
        float _1676 = fma(_1469, cbSceneParam._m0[61u].w, fma(_1465, cbSceneParam._m0[61u].z, fma(_1461, cbSceneParam._m0[61u].y, _1457 * cbSceneParam._m0[61u].x))) / _1674;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1675 >= cbSceneParam._m0[64u].x) && (_1676 >= cbSceneParam._m0[64u].y)) && (_1675 <= cbSceneParam._m0[64u].z)) && (_1676 <= cbSceneParam._m0[64u].w))
        {
            float _1913 = fma(_1469, cbSceneParam._m0[62u].w, fma(_1465, cbSceneParam._m0[62u].z, fma(_1461, cbSceneParam._m0[62u].y, _1457 * cbSceneParam._m0[62u].x))) / _1674;
            float _1917 = isnan(cbSceneParam._m0[41u].w) ? _1913 : (isnan(_1913) ? cbSceneParam._m0[41u].w : max(_1913, cbSceneParam._m0[41u].w));
            float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472))) * cbSceneParam._m0[33u].y;
            float _3504 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
            float _1967 = (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1675, cbSceneParam._m0[33u].w + _1676), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1675, _1676 - cbSceneParam._m0[33u].z), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1675 - cbSceneParam._m0[33u].z, _1676 - cbSceneParam._m0[33u].w), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1675 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1676), _1917), 0.0)).x), vec4(0.25)));
            float _1971 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
            float _1972 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
            float _1973 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_1973) ? _1622 : (isnan(_1622) ? _1973 : min(_1622, _1973));
            frontier_phi_45_44_ladder_1 = isnan(_1972) ? _1621 : (isnan(_1621) ? _1972 : min(_1621, _1972));
            frontier_phi_45_44_ladder_2 = isnan(_1971) ? _1620 : (isnan(_1620) ? _1971 : min(_1620, _1971));
        }
        else
        {
            frontier_phi_45_44_ladder = _1622;
            frontier_phi_45_44_ladder_1 = _1621;
            frontier_phi_45_44_ladder_2 = _1620;
        }
        _1686 = frontier_phi_45_44_ladder_2;
        _1688 = frontier_phi_45_44_ladder_1;
        _1690 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1686 = _1620;
        _1688 = _1621;
        _1690 = _1622;
    }
    uvec4 _1695 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1697 = _1695.x * 14u;
    uint _1698 = _1697 + 13u;
    float _1703 = _470 + (-1.0);
    float _1707 = (cbLight._m0[_1698].x * _1703) + 1.0;
    float _1708 = (cbLight._m0[_1698].y * _1703) + 1.0;
    uint _1709 = _1697 + 5u;
    float _1715 = isnan(1.0) ? _1708 : (isnan(_1708) ? 1.0 : min(_1708, 1.0));
    uint _1719 = _1697 + 4u;
    float _1728 = isnan(1.0) ? _1707 : (isnan(_1707) ? 1.0 : min(_1707, 1.0));
    uint _1732 = _1697 | 1u;
    float _1743 = dot(vec3(cbLight._m0[_1697].xyz), vec3(0.0));
    float _1746 = dot(vec3(cbLight._m0[_1732].xyz), vec3(0.0));
    float _3540 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _3551 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1751 = (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * 0.3183098733425140380859375;
    float _1753 = (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.3183098733425140380859375;
    float _1760 = ((cbLight._m0[_1709].x * _1715) * _1753) + (((cbLight._m0[_1719].x * _1686) * _1728) * _1751);
    float _1761 = ((_1715 * cbLight._m0[_1709].y) * _1753) + (((cbLight._m0[_1719].y * _1688) * _1728) * _1751);
    float _1762 = ((_1715 * cbLight._m0[_1709].z) * _1753) + (((cbLight._m0[_1719].z * _1690) * _1728) * _1751);
    uint _1763 = _1697 + 8u;
    float _1769 = cbLight._m0[_1697].x + _408;
    float _1770 = cbLight._m0[_1697].y + _409;
    float _1771 = cbLight._m0[_1697].z + _410;
    float _1775 = inversesqrt(dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771)));
    float _1779 = dot(vec3(0.0), vec3(cbLight._m0[_1697].xyz));
    float _3562 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _1783 = dot(vec3(0.0), vec3(_408, _409, _410));
    float _3573 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1786 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _1787 = dot(vec3(cbLight._m0[_1697].xyz), vec3(_1769 * _1775, _1770 * _1775, _1771 * _1775));
    float _3584 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1798 = (exp2(log2(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = (0.5 / ((_1782 + 9.9999999392252902907785028219223e-09) + _1786)) * _1782;
    float _3595 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.31831014156341552734375;
    uint _1820 = _1697 + 9u;
    float _1826 = cbLight._m0[_1732].x + _408;
    float _1827 = cbLight._m0[_1732].y + _409;
    float _1828 = cbLight._m0[_1732].z + _410;
    float _1832 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
    float _1836 = dot(vec3(0.0), vec3(cbLight._m0[_1732].xyz));
    float _3606 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1839 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _1840 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1826 * _1832, _1827 * _1832, _1828 * _1832));
    float _3617 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1849 = (exp2(log2(1.0 - (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1853 = (0.5 / ((_1839 + 9.9999999392252902907785028219223e-09) + _1786)) * _1839;
    float _3628 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.31831014156341552734375;
    float _1865 = (((_1849 * cbLight._m0[_1820].x) * _1855) * _1715) + ((((cbLight._m0[_1763].x * _1686) * _1798) * _1806) * _1728);
    float _1866 = (((_1849 * cbLight._m0[_1820].y) * _1855) * _1715) + ((((cbLight._m0[_1763].y * _1688) * _1798) * _1806) * _1728);
    float _1867 = (((_1849 * cbLight._m0[_1820].z) * _1855) * _1715) + ((((cbLight._m0[_1763].z * _1690) * _1798) * _1806) * _1728);
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    if (_1695.y == 0u)
    {
        uvec4 _1985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1986 = _1985.x;
        uint _1997 = uint((float(_1985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _431) / _1986))) + floor(float(uint(cbSceneParam._m0[85u].x * _430) / _1986)));
        float _2007 = (log2(_1472 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2008 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        uint _2011 = uint(isnan(14.0) ? _2008 : (isnan(_2008) ? 14.0 : min(_2008, 14.0)));
        uvec4 _2016 = texelFetch(g_lightClusterGridBuffer, int(((_2011 << 2u) + (_1997 << 6u)) >> 2u));
        uint _2017 = _2016.x;
        uint _2018 = _1985.z;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        float _2135;
        if (((((1u << ((_2018 >> 4u) & 15u)) + 4294967295u) & _2017) == 0u) || ((_2018 & 240u) == 0u))
        {
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
        }
        else
        {
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2136;
            float _2302 = 0.0;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            uint _2308 = 0u;
            uint _2317;
            bool _2318;
            for (;;)
            {
                _2317 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2308 << 2u)) >> 2u)).x;
                _2318 = _2317 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2318)
                {
                    frontier_phi_71_pred = _2305;
                    frontier_phi_71_pred_1 = _2304;
                    frontier_phi_71_pred_2 = _2303;
                    frontier_phi_71_pred_3 = _2302;
                    frontier_phi_71_pred_4 = _2306;
                    frontier_phi_71_pred_5 = _2307;
                }
                else
                {
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    uint _2474;
                    _2468 = _2302;
                    _2469 = _2303;
                    _2470 = _2304;
                    _2471 = _2305;
                    _2472 = _2306;
                    _2473 = _2307;
                    _2474 = _2317;
                    float _2395;
                    float _2396;
                    float _2397;
                    float _2398;
                    float _2399;
                    float _2400;
                    for (;;)
                    {
                        uint _2478 = uint(findLSB(_2474)) + (_2308 << 5u);
                        uint _2475 = (_2474 + 4294967295u) & _2474;
                        uint _2480 = _2478 * 48u;
                        vec4 _2494 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2500 = (_2478 * 48u) + 4u;
                        vec4 _2513 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2500)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2500 + 3u)).x));
                        uint _2519 = (_2478 * 48u) + 8u;
                        vec3 _2530 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2519)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2519 + 2u)).x));
                        float _2534 = _2494.x - _1470;
                        float _2535 = _2494.y - _1471;
                        float _2536 = _2494.z - _1472;
                        float _2537 = dot(vec3(_2534, _2535, _2536), vec3(_2534, _2535, _2536));
                        float _2540 = inversesqrt(_2537);
                        float _2549 = 1.0 - (_2537 * _2494.w);
                        float _3649 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
                        float _2550 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                        float _2551 = sqrt(_2537) * _2513.w;
                        float _2554 = 1.39999997615814208984375 / (_2551 + 1.39999997615814208984375);
                        float _2555 = _2554 * _2554;
                        float _2558 = ((1.0 - _2555) * dot(vec3(0.0), vec3(_2540 * _2534, _2540 * _2535, _2540 * _2536))) + _2555;
                        float _2561 = _2551 * _2551;
                        float _2565 = ((isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0))) * _2550) / ((_2561 * 0.699999988079071044921875) + 1.0);
                        float _2569 = (-0.0) - _1470;
                        float _2570 = (-0.0) - _1471;
                        float _2571 = (-0.0) - _1472;
                        float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
                        float _2579 = dot(vec3(0.0), vec3(_2575 * _2569, _2575 * _2570, _2575 * _2571));
                        float _3665 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                        float _3676 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                        float _2583 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                        float _2587 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2583)) * _2583;
                        float _3687 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2596 = (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2561 * 2.1991131305694580078125) + 3.141590118408203125)) * _2550;
                        _2398 = (_2565 * _2513.x) + _2471;
                        _2399 = (_2565 * _2513.y) + _2472;
                        _2400 = (_2565 * _2513.z) + _2473;
                        _2395 = (_2596 * _2530.x) + _2468;
                        _2396 = (_2596 * _2530.y) + _2469;
                        _2397 = (_2596 * _2530.z) + _2470;
                        if (_2475 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2468 = _2395;
                            _2469 = _2396;
                            _2470 = _2397;
                            _2471 = _2398;
                            _2472 = _2399;
                            _2473 = _2400;
                            _2474 = _2475;
                        }
                    }
                    frontier_phi_71_pred = _2398;
                    frontier_phi_71_pred_1 = _2397;
                    frontier_phi_71_pred_2 = _2396;
                    frontier_phi_71_pred_3 = _2395;
                    frontier_phi_71_pred_4 = _2399;
                    frontier_phi_71_pred_5 = _2400;
                }
                _2132 = frontier_phi_71_pred;
                _2130 = frontier_phi_71_pred_1;
                _2128 = frontier_phi_71_pred_2;
                _2126 = frontier_phi_71_pred_3;
                _2134 = frontier_phi_71_pred_4;
                _2136 = frontier_phi_71_pred_5;
                uint _2309 = _2308 + 1u;
                if (_2309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2302 = _2126;
                    _2303 = _2128;
                    _2304 = _2130;
                    _2305 = _2132;
                    _2306 = _2134;
                    _2307 = _2136;
                    _2308 = _2309;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
        }
        uvec4 _2139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2140 = _2139.z;
        uint _2142 = (_2140 >> 8u) & 15u;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        if (((4294967295u << _2142) & _2017) == 0u)
        {
            _2273 = _2125;
            _2275 = _2127;
            _2277 = _2129;
            _2279 = _2131;
            _2281 = _2133;
            _2283 = _2135;
        }
        else
        {
            float _2298 = inversesqrt(dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2142 < ((_2140 >> 12u) & 15u))
            {
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2284;
                float _2451 = _2125;
                float _2452 = _2127;
                float _2453 = _2129;
                float _2454 = _2131;
                float _2455 = _2133;
                float _2456 = _2135;
                uint _2457 = _2142;
                uint _2466;
                bool _2467;
                for (;;)
                {
                    _2466 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2457 << 2u)) >> 2u)).x;
                    _2467 = _2466 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2467)
                    {
                        frontier_phi_82_pred = _2454;
                        frontier_phi_82_pred_1 = _2453;
                        frontier_phi_82_pred_2 = _2452;
                        frontier_phi_82_pred_3 = _2451;
                        frontier_phi_82_pred_4 = _2456;
                        frontier_phi_82_pred_5 = _2455;
                    }
                    else
                    {
                        float _2610;
                        float _2611;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2623 = _2451;
                        float _2624 = _2452;
                        float _2625 = _2453;
                        float _2626 = _2454;
                        float _2627 = _2455;
                        float _2628 = _2456;
                        uint _2629 = _2466;
                        uint _2630;
                        vec4 _2655;
                        float _2656;
                        vec4 _2671;
                        vec3 _2683;
                        vec4 _2698;
                        vec4 _2714;
                        float _2760;
                        bool _2761;
                        for (;;)
                        {
                            uint _2640 = ((_2457 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2629));
                            _2630 = (_2629 + 4294967295u) & _2629;
                            uint _2642 = _2640 * 40u;
                            _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            _2656 = _2655.w;
                            uint _2658 = (_2640 * 40u) + 4u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            uint _2673 = (_2640 * 40u) + 8u;
                            _2683 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2673 + 2u)).x));
                            uint _2685 = (_2640 * 40u) + 16u;
                            _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            uint _2701 = (_2640 * 40u) + 20u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2716 = (_2640 * 40u) + 24u;
                            vec4 _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2735 = (_2640 * 40u) + 28u;
                            vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2735 + 3u)).x));
                            _2760 = fma(_1472, _2748.z, fma(_1471, _2748.y, _2748.x * _1470)) + _2748.w;
                            _2761 = !((fma(_1472, _2729.z, fma(_1471, _2729.y, _2729.x * _1470)) + _2729.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2761)
                            {
                                float _2788 = _2655.x - _1470;
                                float _2789 = _2655.y - _1471;
                                float _2790 = _2655.z - _1472;
                                float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                                float _2794 = inversesqrt(_2791);
                                float _2795 = _2794 * _2788;
                                float _2796 = _2794 * _2789;
                                float _2797 = _2794 * _2790;
                                float _2801 = 1.0 - (_2791 / (_2656 * _2656));
                                float _3698 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2802 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
                                float _2806 = sqrt(_2791) * _2671.w;
                                float _2808 = 1.39999997615814208984375 / (_2806 + 1.39999997615814208984375);
                                float _2809 = _2808 * _2808;
                                float _2810 = 1.0 - _2809;
                                float _2812 = (_2810 * dot(vec3(_2795, _2796, _2797), vec3(0.0))) + _2809;
                                float _2815 = _2806 * _2806;
                                float _2819 = (fma(_1472, _2698.z, fma(_1471, _2698.y, _2698.x * _1470)) + _2698.w) / _2760;
                                float _2820 = (fma(_1472, _2714.z, fma(_1471, _2714.y, _2714.x * _1470)) + _2714.w) / _2760;
                                float _2824 = 1.0 - dot(vec2(_2819, _2820), vec2(_2819, _2820));
                                float _3714 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                                float _2825 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
                                float _2826 = _2825 * (((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2802) / ((_2815 * 0.699999988079071044921875) + 1.0));
                                float _2836 = dot(vec3(0.0), vec3((-0.0) - (_1470 * _2298), (-0.0) - (_1471 * _2298), (-0.0) - (_1472 * _2298)));
                                float _3725 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                                float _2844 = (_2810 * dot(vec3(0.0), vec3(_2795, _2796, _2797))) + _2809;
                                float _3736 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2845 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
                                float _2849 = (0.5 / (((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) + 9.9999999392252902907785028219223e-09) + _2845)) * _2845;
                                float _3747 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                                float _2856 = (_2825 * _2802) * (((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * 3.1415927410125732421875) / ((_2815 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2826 * _2671.x;
                                frontier_phi_88_pred_1 = _2856 * _2683.z;
                                frontier_phi_88_pred_2 = _2856 * _2683.y;
                                frontier_phi_88_pred_3 = _2856 * _2683.x;
                                frontier_phi_88_pred_4 = _2826 * _2671.z;
                                frontier_phi_88_pred_5 = _2826 * _2671.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _2863 = frontier_phi_88_pred;
                            _2862 = frontier_phi_88_pred_1;
                            _2861 = frontier_phi_88_pred_2;
                            _2860 = frontier_phi_88_pred_3;
                            _2865 = frontier_phi_88_pred_4;
                            _2864 = frontier_phi_88_pred_5;
                            _2613 = _2863 + _2626;
                            _2614 = _2864 + _2627;
                            _2615 = _2865 + _2628;
                            _2610 = _2860 + _2623;
                            _2611 = _2861 + _2624;
                            _2612 = _2862 + _2625;
                            if (_2630 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2623 = _2610;
                                _2624 = _2611;
                                _2625 = _2612;
                                _2626 = _2613;
                                _2627 = _2614;
                                _2628 = _2615;
                                _2629 = _2630;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2613;
                        frontier_phi_82_pred_1 = _2612;
                        frontier_phi_82_pred_2 = _2611;
                        frontier_phi_82_pred_3 = _2610;
                        frontier_phi_82_pred_4 = _2615;
                        frontier_phi_82_pred_5 = _2614;
                    }
                    _2280 = frontier_phi_82_pred;
                    _2278 = frontier_phi_82_pred_1;
                    _2276 = frontier_phi_82_pred_2;
                    _2274 = frontier_phi_82_pred_3;
                    _2284 = frontier_phi_82_pred_4;
                    _2282 = frontier_phi_82_pred_5;
                    uint _2458 = _2457 + 1u;
                    if (_2458 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2451 = _2274;
                        _2452 = _2276;
                        _2453 = _2278;
                        _2454 = _2280;
                        _2455 = _2282;
                        _2456 = _2284;
                        _2457 = _2458;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2284;
                frontier_phi_62_63_ladder_1 = _2282;
                frontier_phi_62_63_ladder_2 = _2280;
                frontier_phi_62_63_ladder_3 = _2276;
                frontier_phi_62_63_ladder_4 = _2274;
                frontier_phi_62_63_ladder_5 = _2278;
            }
            else
            {
                frontier_phi_62_63_ladder = _2135;
                frontier_phi_62_63_ladder_1 = _2133;
                frontier_phi_62_63_ladder_2 = _2131;
                frontier_phi_62_63_ladder_3 = _2127;
                frontier_phi_62_63_ladder_4 = _2125;
                frontier_phi_62_63_ladder_5 = _2129;
            }
            _2273 = frontier_phi_62_63_ladder_4;
            _2275 = frontier_phi_62_63_ladder_3;
            _2277 = frontier_phi_62_63_ladder_5;
            _2279 = frontier_phi_62_63_ladder_2;
            _2281 = frontier_phi_62_63_ladder_1;
            _2283 = frontier_phi_62_63_ladder;
        }
        float _2288 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2030 = (_2288 * _2279) + _1760;
        _2032 = (_2288 * _2281) + _1761;
        _2034 = (_2288 * _2283) + _1762;
        _2036 = ((_2273 * 0.039999999105930328369140625) * _2288) + _1865;
        _2038 = ((_2275 * 0.039999999105930328369140625) * _2288) + _1866;
        _2040 = ((_2277 * 0.039999999105930328369140625) * _2288) + _1867;
    }
    else
    {
        _2030 = _1760;
        _2032 = _1761;
        _2034 = _1762;
        _2036 = _1865;
        _2038 = _1866;
        _2040 = _1867;
    }
    float _3763 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3774 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3785 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _2057 = ((isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_2030 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _470))) + ((_2036 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _1206)) * cbPerFrame._m0[3u].x);
    float _2058 = ((isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_2032 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _470))) + ((_2038 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _1206)) * cbPerFrame._m0[3u].x);
    float _2059 = ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_2034 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _470))) + ((_2040 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _1206)) * cbPerFrame._m0[3u].x);
    float _2060 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2061 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2062 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    uint _2063 = _444 + 6u;
    float _2071 = _430 / cbSceneParam._m0[86u].x;
    float _2072 = _431 / cbSceneParam._m0[86u].y;
    vec4 _2086 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, (log2((isnan(cbSceneParam._m0[77u].w) ? _403 : (isnan(_403) ? cbSceneParam._m0[77u].w : min(_403, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2088 = _2086.x;
    float _2089 = _2086.y;
    float _2090 = _2086.z;
    float _2091 = _2086.w;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    if (_403 > cbSceneParam._m0[78u].w)
    {
        float _2150 = isnan(_403) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _403 : min(cbSceneParam._m0[80u].w, _403));
        float _2151 = _2150 / _403;
        float _2162 = _2151 * _254;
        float _2163 = _255 * _2151;
        float _2164 = (-0.0) - _2163;
        float _2165 = _2151 * _256;
        float _2167 = (cbSceneParam._m0[77u].w * _2164) / _2150;
        float _2168 = _2167 + cbSceneParam._m0[79u].w;
        float _2169 = cbSceneParam._m0[79u].w - _2163;
        float _2175 = sqrt(((_2162 * _2162) + (_2163 * _2163)) + (_2165 * _2165));
        float _2178 = (1.0 - (cbSceneParam._m0[77u].w / _2150)) * _2175;
        float _2183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2408;
        if (abs((_2164 - _2167) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2408 = ((((_2168 > 0.0) ? exp2(_2183 * _2168) : (2.0 - exp2(_2185 * _2168))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2178;
        }
        else
        {
            float _2331 = 1.0 / cbSceneParam._m0[80u].x;
            float _2332 = isnan(_2169) ? _2168 : (isnan(_2168) ? _2169 : max(_2168, _2169));
            float _2333 = isnan(_2169) ? _2168 : (isnan(_2168) ? _2169 : min(_2168, _2169));
            float _2342 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : min(_2332, 0.0));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            _2408 = ((abs(_2175 / _2164) * cbSceneParam._m0[80u].y) * ((((_2342 - _2343) * 2.0) - ((exp2(_2183 * (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0)))) - exp2(_2183 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0))))) * _2331)) - ((exp2(_2185 * _2342) - exp2(_2185 * _2343)) * _2331))) + (_2178 * cbSceneParam._m0[80u].z);
        }
        vec4 _2410 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2071, _2072, 1.0), 0.0);
        float _2419 = exp2((_2408 * (-1.44269502162933349609375)) * (1.0 - _2410.w));
        float _2420 = log2(_2419);
        float _2436 = log2(_2091);
        _2187 = (exp2(_2436 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].x)) * _2410.x) / cbSceneParam._m0[78u].x)) + _2088;
        _2189 = (exp2(_2436 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].y)) * _2410.y) / cbSceneParam._m0[78u].y)) + _2089;
        _2191 = (exp2(_2436 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2420 * cbSceneParam._m0[78u].z)) * _2410.z) / cbSceneParam._m0[78u].z)) + _2090;
        _2193 = _2419 * _2091;
    }
    else
    {
        _2187 = _2088;
        _2189 = _2089;
        _2191 = _2090;
        _2193 = _2091;
    }
    bool _2446;
    vec4 _2203;
    vec4 _2226;
    float _2228;
    float _2232;
    float _2233;
    float _2234;
    float _2235;
    bool _2246;
    for (;;)
    {
        _2203 = cbMatDynParam._m0[0u];
        float _2205 = roundEven(_2203.y);
        bool _2206 = _2205 == 3.0;
        float _2208 = log2(_2193);
        float _2215 = exp2(_2208 * cbSceneParam._m0[78u].x) * _2060;
        float _2216 = exp2(_2208 * cbSceneParam._m0[78u].y) * _2061;
        float _2217 = exp2(_2208 * cbSceneParam._m0[78u].z) * _2062;
        float _2224 = _417 + (-0.5);
        _2226 = cbMtdParam._m0[1u];
        _2228 = _2226.y * _2224;
        float _2231 = (_2205 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2232 = _2231 * (_2206 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2187)));
        _2233 = _2231 * (_2206 ? _2216 : (_2216 + (cbSceneParam._m0[72u].w * _2189)));
        _2234 = _2231 * (_2206 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2191)));
        _2235 = _2224 * 0.999000012874603271484375;
        _2246 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2246)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2235) < 0.5)
            {
                _2446 = true;
                break;
            }
        }
        uint _2366 = _446 + uint(_2203.w);
        if ((cbInstanceData._m0[_2366].w < 1.0) && ((cbInstanceData._m0[_2366].w + _2235) < 0.5))
        {
            _2446 = true;
            break;
        }
        if ((_2228 + 1.0) < _2226.x)
        {
            _2446 = true;
            break;
        }
        _2446 = false;
        break;
    }
    float _2601;
    if (_2446)
    {
        discard_state = true;
        _2601 = 0.0;
    }
    else
    {
        _2601 = cbInstanceData._m0[_2063].w;
    }
    SV_Target.x = _2232;
    SV_Target.y = _2233;
    SV_Target.z = _2234;
    SV_Target.w = _2601;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2063].w;
    discard_exit();
}


