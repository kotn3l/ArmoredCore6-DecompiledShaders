#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _590;
uint _2029;
uint _2030;
uint _2031;
uint _2245;
uint _2246;
uint _2247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _192 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _250 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _240);
    float _251 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _240);
    float _252 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _240);
    float _278 = cbMtdParam._m0[22u].y + _250;
    float _279 = cbMtdParam._m0[22u].z + _251;
    float _280 = cbMtdParam._m0[22u].w + _252;
    float _297 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_181 * _174, _181 * _175, _181 * _176));
    float _298 = (-0.0) - dot(vec3(_278, _279, _280), vec3(_192 * TANGENT.x, _192 * TANGENT.y, _192 * TANGENT.z));
    float _299 = (-0.0) - dot(vec3(_278, _279, _280), vec3((-0.0) - (NORMAL.x * _188), (-0.0) - (NORMAL.y * _188), (-0.0) - (NORMAL.z * _188)));
    float _303 = inversesqrt(dot(vec3(_297, _298, _299), vec3(_297, _298, _299)));
    float _304 = _303 * _299;
    float _306 = (cbMtdParam._m0[19u].x * _297) * _303;
    float _308 = (cbMtdParam._m0[18u].w * _298) * _303;
    float _309 = fract(TEXCOORD.x);
    float _310 = fract(TEXCOORD.y);
    float _316;
    if (_306 > 0.0)
    {
        _316 = (1.0 - _309) / _306;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _309) / _306;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _316 = frontier_phi_3_2_ladder;
    }
    float _324;
    if (_308 > 0.0)
    {
        _324 = (1.0 - _310) / _308;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_308 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _310) / _308;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _324 = frontier_phi_7_6_ladder;
    }
    float _328 = (_304 > 0.0) ? (cbMtdParam._m0[15u].x / _304) : 5000.0;
    float _329 = isnan(_324) ? _316 : (isnan(_316) ? _324 : min(_316, _324));
    float _330 = isnan(_328) ? _329 : (isnan(_329) ? _328 : min(_329, _328));
    float _334 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = ((_330 * _304) + _334) / _334;
    vec4 _367 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_309 + (-0.5)) + (_330 * _306)) / _341) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_310 + (-0.5)) + (_330 * _308)) / _341) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _396 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _400 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _401 = _250 * _400;
    float _402 = _251 * _400;
    float _403 = _252 * _400;
    float _409 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _410 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _419 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_409 * cbSceneParam._m0[86u].x, _410 * cbSceneParam._m0[86u].y));
    float _422 = _419.x * TEXCOORD.z;
    float _423 = (-0.0) - _401;
    float _424 = (-0.0) - _402;
    float _425 = (-0.0) - _403;
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _455 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _589;
    float _591;
    float _592;
    float _593;
    float _594;
    float _595;
    float _596;
    float _597;
    float _598;
    float _599;
    float _600;
    float _601;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _511 = (cbModelParam._m0[37u].x * ((((fma(_455, cbModelParam._m0[26u].z, fma(_451, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _447)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _513 = (cbModelParam._m0[37u].y * ((((fma(_455, cbModelParam._m0[27u].z, fma(_451, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _447)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _514 = (((((fma(_455, cbModelParam._m0[28u].z, fma(_451, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _447)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _517 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_511, _513, _514), 0.0);
        vec4 _524 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_511, _513, _514), 0.0);
        vec4 _531 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_511, _513, _514), 0.0);
        vec4 _538 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_511, _513, _514), 0.0);
        float _551 = exp2((_517.w + (-0.5)) * 20.0) * 2.0;
        float _562 = exp2((_524.w + (-0.5)) * 20.0) * 2.0;
        float _572 = exp2((_531.w + (-0.5)) * 20.0) * 2.0;
        float _582 = exp2((_538.w + (-0.5)) * 20.0) * 2.0;
        float _583 = _582 * (_538.x + (-0.5));
        float _584 = _582 * (_538.y + (-0.5));
        float _585 = _582 * (_538.z + (-0.5));
        _589 = _551 * (_517.z + (-0.5));
        _591 = _551 * (_517.y + (-0.5));
        _592 = _551 * (_517.x + (-0.5));
        _593 = _562 * (_524.z + (-0.5));
        _594 = _562 * (_524.y + (-0.5));
        _595 = _562 * (_524.x + (-0.5));
        _596 = _572 * (_531.z + (-0.5));
        _597 = _572 * (_531.y + (-0.5));
        _598 = _572 * (_531.x + (-0.5));
        _599 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
        _600 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
        _601 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    }
    else
    {
        _589 = _590;
        _591 = _590;
        _592 = _590;
        _593 = _590;
        _594 = _590;
        _595 = _590;
        _596 = _590;
        _597 = _590;
        _598 = _590;
        _599 = _590;
        _600 = _590;
        _601 = _590;
    }
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _655 = (cbModelParam._m0[38u].x * ((((fma(_455, cbModelParam._m0[30u].z, fma(_451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _447)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _656 = (cbModelParam._m0[38u].y * ((((fma(_455, cbModelParam._m0[31u].z, fma(_451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _447)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _657 = (((((fma(_455, cbModelParam._m0[32u].z, fma(_451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _447)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _666 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _673 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        vec4 _680 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_655, _656, _657), 0.0);
        float _692 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _702 = exp2((_666.w + (-0.5)) * 20.0) * 2.0;
        float _712 = exp2((_673.w + (-0.5)) * 20.0) * 2.0;
        float _722 = exp2((_680.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_680.x + (-0.5));
        float _724 = _722 * (_680.y + (-0.5));
        float _725 = _722 * (_680.z + (-0.5));
        _729 = _692 * (_659.z + (-0.5));
        _730 = _692 * (_659.y + (-0.5));
        _731 = _692 * (_659.x + (-0.5));
        _732 = _702 * (_666.z + (-0.5));
        _733 = _702 * (_666.y + (-0.5));
        _734 = _702 * (_666.x + (-0.5));
        _735 = _712 * (_673.z + (-0.5));
        _736 = _712 * (_673.y + (-0.5));
        _737 = _712 * (_673.x + (-0.5));
        _738 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        _739 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        _740 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    }
    else
    {
        _729 = _590;
        _730 = _590;
        _731 = _590;
        _732 = _590;
        _733 = _590;
        _734 = _590;
        _735 = _590;
        _736 = _590;
        _737 = _590;
        _738 = _590;
        _739 = _590;
        _740 = _590;
    }
    float _755 = _401 * (-0.5);
    float _756 = _402 * (-0.5);
    float _757 = _403 * (-0.5);
    float _758 = dot(vec4(_755, _756, _757, 1.0), vec4(_731, _734, _737, _740));
    float _761 = dot(vec4(_755, _756, _757, 1.0), vec4(_730, _733, _736, _739));
    float _764 = dot(vec4(_755, _756, _757, 1.0), vec4(_729, _732, _735, _738));
    float _799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _771 = dot(vec4(_755, _756, _757, 1.0), vec4(_589, _593, _596, _599));
        float _775 = dot(vec4(_755, _756, _757, 1.0), vec4(_591, _594, _597, _600));
        float _779 = dot(vec4(_755, _756, _757, 1.0), vec4(_592, _595, _598, _601));
        float _786 = dot(vec4(cbModelParam._m0[39u]), vec4(_755, _756, _757, 1.0));
        _799 = dot(vec3(isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)), isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)), isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_786) ? 0.0 : (isnan(0.0) ? _786 : max(0.0, _786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _799 = 1.0;
    }
    float _810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _801 = dot(vec4(cbModelParam._m0[40u]), vec4(_755, _756, _757, 1.0));
        _810 = dot(vec3(isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)), isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)), isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_801) ? 0.0 : (isnan(0.0) ? _801 : max(0.0, _801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _810 = 1.0;
    }
    float _814 = (_810 * cbModelParam._m0[1u].x) + (_799 * (1.0 - cbModelParam._m0[1u].x));
    float _820 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _903;
    float _905;
    float _907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _870 = fma(_455, cbModelParam._m0[13u].z, fma(_451, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _447)) + cbModelParam._m0[13u].w;
        float _874 = fma(_455, cbModelParam._m0[14u].z, fma(_451, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _447)) + cbModelParam._m0[14u].w;
        float _878 = fma(_455, cbModelParam._m0[15u].z, fma(_451, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _447)) + cbModelParam._m0[15u].w;
        float _881 = fma(_425, cbModelParam._m0[13u].z, fma(_424, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _423));
        float _884 = fma(_425, cbModelParam._m0[14u].z, fma(_424, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _423));
        float _887 = fma(_425, cbModelParam._m0[15u].z, fma(_424, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _423));
        float _913;
        if (_881 > 0.0)
        {
            _913 = abs((1.0 - _870) / _881);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_881 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_870 + 1.0) / _881);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _913 = frontier_phi_22_20_ladder;
        }
        float _1102;
        if (_884 > 0.0)
        {
            _1102 = abs((1.0 - _874) / _884);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_884 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_874 + 1.0) / _884);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1102 = frontier_phi_31_27_ladder;
        }
        float _1458;
        if (_887 > 0.0)
        {
            _1458 = abs((1.0 - _878) / _887);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_887 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_878 + 1.0) / _887);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1458 = frontier_phi_43_38_ladder;
        }
        float _1460 = isnan(_1102) ? _913 : (isnan(_913) ? _1102 : min(_913, _1102));
        float _1461 = isnan(_1458) ? _1460 : (isnan(_1460) ? _1458 : min(_1460, _1458));
        float _1465 = (_1461 * _881) + _870;
        float _1466 = (_1461 * _884) + _874;
        float _1467 = (_1461 * _887) + _878;
        float _1468 = _1461 * 9.9999997473787516355514526367188e-05;
        float _1470 = (-1.0) - _1468;
        float _1472 = _1468 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1467 > _1472) || ((_1467 < _1470) || ((_1466 > _1472) || ((_1466 < _1470) || ((_1465 < _1470) || (_1465 > _1472))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1467, cbModelParam._m0[9u].z, fma(_1466, cbModelParam._m0[9u].y, _1465 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1467, cbModelParam._m0[10u].z, fma(_1466, cbModelParam._m0[10u].y, _1465 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1467, cbModelParam._m0[11u].z, fma(_1466, cbModelParam._m0[11u].y, _1465 * cbModelParam._m0[11u].x))), _820);
            frontier_phi_21_43_ladder = _1701.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _1701.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _1701.x * cbModelParam._m0[1u].y;
        }
        _903 = frontier_phi_21_43_ladder_2;
        _905 = frontier_phi_21_43_ladder;
        _907 = frontier_phi_21_43_ladder_1;
    }
    else
    {
        vec4 _891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_423, _424, _425), _820);
        _903 = _891.x * cbModelParam._m0[1u].y;
        _905 = _891.y * cbModelParam._m0[1u].y;
        _907 = _891.z * cbModelParam._m0[1u].y;
    }
    float _910 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _999;
    float _1001;
    float _1003;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _963 = fma(_455, cbModelParam._m0[21u].z, fma(_451, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _447)) + cbModelParam._m0[21u].w;
        float _967 = fma(_455, cbModelParam._m0[22u].z, fma(_451, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _447)) + cbModelParam._m0[22u].w;
        float _971 = fma(_455, cbModelParam._m0[23u].z, fma(_451, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _447)) + cbModelParam._m0[23u].w;
        float _974 = fma(_425, cbModelParam._m0[21u].z, fma(_424, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _423));
        float _977 = fma(_425, cbModelParam._m0[22u].z, fma(_424, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _423));
        float _980 = fma(_425, cbModelParam._m0[23u].z, fma(_424, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _423));
        float _1107;
        if (_974 > 0.0)
        {
            _1107 = abs((1.0 - _963) / _974);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_974 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_963 + 1.0) / _974);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1107 = frontier_phi_33_29_ladder;
        }
        float _1485;
        if (_977 > 0.0)
        {
            _1485 = abs((1.0 - _967) / _977);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_977 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_967 + 1.0) / _977);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1485 = frontier_phi_45_40_ladder;
        }
        float _1817;
        if (_980 > 0.0)
        {
            _1817 = abs((1.0 - _971) / _980);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_980 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_971 + 1.0) / _980);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _1817 = frontier_phi_57_52_ladder;
        }
        float _1819 = isnan(_1485) ? _1107 : (isnan(_1107) ? _1485 : min(_1107, _1485));
        float _1820 = isnan(_1817) ? _1819 : (isnan(_1819) ? _1817 : min(_1819, _1817));
        float _1824 = (_1820 * _974) + _963;
        float _1825 = (_1820 * _977) + _967;
        float _1826 = (_1820 * _980) + _971;
        float _1827 = _1820 * 9.9999997473787516355514526367188e-05;
        float _1828 = (-1.0) - _1827;
        float _1830 = _1827 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_1826 > _1830) || ((_1826 < _1828) || ((_1825 > _1830) || ((_1825 < _1828) || ((_1824 < _1828) || (_1824 > _1830))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1932 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1826, cbModelParam._m0[17u].z, fma(_1825, cbModelParam._m0[17u].y, _1824 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1826, cbModelParam._m0[18u].z, fma(_1825, cbModelParam._m0[18u].y, _1824 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1826, cbModelParam._m0[19u].z, fma(_1825, cbModelParam._m0[19u].y, _1824 * cbModelParam._m0[19u].x))), _910);
            frontier_phi_30_57_ladder = _1932.x * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _1932.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _1932.z * cbModelParam._m0[1u].z;
        }
        _999 = frontier_phi_30_57_ladder;
        _1001 = frontier_phi_30_57_ladder_1;
        _1003 = frontier_phi_30_57_ladder_2;
    }
    else
    {
        vec4 _983 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_423, _424, _425), _910);
        _999 = _983.x * cbModelParam._m0[1u].z;
        _1001 = _983.y * cbModelParam._m0[1u].z;
        _1003 = _983.z * cbModelParam._m0[1u].z;
    }
    float _1015 = _422 * 0.01200000010430812835693359375;
    float _1017 = _1015 * ((cbModelParam._m0[1u].w * (_999 - _903)) + _903);
    float _1018 = _1015 * ((cbModelParam._m0[1u].w * (_1001 - _905)) + _905);
    float _1019 = _1015 * ((cbModelParam._m0[1u].w * (_1003 - _907)) + _907);
    float _1040 = fma(_1019, cbSceneParam._m0[89u].z, fma(_1018, cbSceneParam._m0[89u].y, _1017 * cbSceneParam._m0[89u].x));
    float _1043 = fma(_1019, cbSceneParam._m0[90u].z, fma(_1018, cbSceneParam._m0[90u].y, _1017 * cbSceneParam._m0[90u].x));
    float _1046 = fma(_1019, cbSceneParam._m0[91u].z, fma(_1018, cbSceneParam._m0[91u].y, _1017 * cbSceneParam._m0[91u].x));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1089 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1094 = _1081 / _1093;
    float _1095 = _1085 / _1093;
    float _1096 = _1089 / _1093;
    float _1244;
    float _1245;
    float _1246;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1123 = ((uint(_1096 > cbSceneParam._m0[59u].y) + uint(_1096 > cbSceneParam._m0[59u].x)) + uint(_1096 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1124 = _1123 + 43u;
        uint _1132 = _1123 + 44u;
        uint _1140 = _1123 + 45u;
        uint _1148 = _1123 + 46u;
        float _1159 = fma(_1093, cbSceneParam._m0[_1124].w, fma(_1089, cbSceneParam._m0[_1124].z, fma(_1085, cbSceneParam._m0[_1124].y, _1081 * cbSceneParam._m0[_1124].x)));
        float _1163 = fma(_1093, cbSceneParam._m0[_1132].w, fma(_1089, cbSceneParam._m0[_1132].z, fma(_1085, cbSceneParam._m0[_1132].y, _1081 * cbSceneParam._m0[_1132].x)));
        float _1171 = fma(_1093, cbSceneParam._m0[_1148].w, fma(_1089, cbSceneParam._m0[_1148].z, fma(_1085, cbSceneParam._m0[_1148].y, _1081 * cbSceneParam._m0[_1148].x)));
        float _1176 = cbSceneParam._m0[33u].z * _1171;
        float _1178 = cbSceneParam._m0[33u].w * _1171;
        float _1181 = fma(_1093, cbSceneParam._m0[_1140].w, fma(_1089, cbSceneParam._m0[_1140].z, fma(_1085, cbSceneParam._m0[_1140].y, _1081 * cbSceneParam._m0[_1140].x))) / _1171;
        float _1229 = (cbSceneParam._m0[33u].x - sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096))) * cbSceneParam._m0[33u].y;
        float _2591 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1237 = (isnan(1.0) ? _2591 : (isnan(_2591) ? 1.0 : min(_2591, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1176 + _1159) / _1171, (_1178 + _1163) / _1171), _1181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1178 + _1159) / _1171, (_1163 - _1176) / _1171), _1181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1159 - _1176) / _1171, (_1163 - _1178) / _1171), _1181), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1159 - _1178) / _1171, (_1176 + _1163) / _1171), _1181), 0.0)).x), vec4(0.25)));
        _1244 = 1.0 - (_1237 * cbSceneParam._m0[34u].x);
        _1245 = 1.0 - (_1237 * cbSceneParam._m0[34u].y);
        _1246 = 1.0 - (_1237 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1244 = 1.0;
        _1245 = 1.0;
        _1246 = 1.0;
    }
    float _1310;
    float _1312;
    float _1314;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1298 = fma(_1093, cbSceneParam._m0[63u].w, fma(_1089, cbSceneParam._m0[63u].z, fma(_1085, cbSceneParam._m0[63u].y, _1081 * cbSceneParam._m0[63u].x)));
        float _1299 = fma(_1093, cbSceneParam._m0[60u].w, fma(_1089, cbSceneParam._m0[60u].z, fma(_1085, cbSceneParam._m0[60u].y, _1081 * cbSceneParam._m0[60u].x))) / _1298;
        float _1300 = fma(_1093, cbSceneParam._m0[61u].w, fma(_1089, cbSceneParam._m0[61u].z, fma(_1085, cbSceneParam._m0[61u].y, _1081 * cbSceneParam._m0[61u].x))) / _1298;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1299 >= cbSceneParam._m0[64u].x) && (_1300 >= cbSceneParam._m0[64u].y)) && (_1299 <= cbSceneParam._m0[64u].z)) && (_1300 <= cbSceneParam._m0[64u].w))
        {
            float _1498 = fma(_1093, cbSceneParam._m0[62u].w, fma(_1089, cbSceneParam._m0[62u].z, fma(_1085, cbSceneParam._m0[62u].y, _1081 * cbSceneParam._m0[62u].x))) / _1298;
            float _1502 = isnan(cbSceneParam._m0[41u].w) ? _1498 : (isnan(_1498) ? cbSceneParam._m0[41u].w : max(_1498, cbSceneParam._m0[41u].w));
            float _1545 = (cbSceneParam._m0[33u].x - sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096))) * cbSceneParam._m0[33u].y;
            float _2607 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
            float _1552 = (isnan(1.0) ? _2607 : (isnan(_2607) ? 1.0 : min(_2607, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1299, cbSceneParam._m0[33u].w + _1300), _1502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1299, _1300 - cbSceneParam._m0[33u].z), _1502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1299 - cbSceneParam._m0[33u].z, _1300 - cbSceneParam._m0[33u].w), _1502), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1299 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1300), _1502), 0.0)).x), vec4(0.25)));
            float _1556 = 1.0 - (_1552 * cbSceneParam._m0[34u].x);
            float _1557 = 1.0 - (_1552 * cbSceneParam._m0[34u].y);
            float _1558 = 1.0 - (_1552 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1558) ? _1246 : (isnan(_1246) ? _1558 : min(_1246, _1558));
            frontier_phi_42_41_ladder_1 = isnan(_1557) ? _1245 : (isnan(_1245) ? _1557 : min(_1245, _1557));
            frontier_phi_42_41_ladder_2 = isnan(_1556) ? _1244 : (isnan(_1244) ? _1556 : min(_1244, _1556));
        }
        else
        {
            frontier_phi_42_41_ladder = _1246;
            frontier_phi_42_41_ladder_1 = _1245;
            frontier_phi_42_41_ladder_2 = _1244;
        }
        _1310 = frontier_phi_42_41_ladder_2;
        _1312 = frontier_phi_42_41_ladder_1;
        _1314 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1310 = _1244;
        _1312 = _1245;
        _1314 = _1246;
    }
    uint _1316 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1321 = floatBitsToUint(cbInstanceData._m0[_1316 + 5u]);
    uint _1323 = _1321.x * 14u;
    uint _1324 = _1323 + 13u;
    float _1329 = _422 + (-1.0);
    float _1333 = (cbLight._m0[_1324].x * _1329) + 1.0;
    float _1334 = (cbLight._m0[_1324].y * _1329) + 1.0;
    uint _1335 = _1323 + 8u;
    float _1346 = cbLight._m0[_1323].x + _401;
    float _1347 = cbLight._m0[_1323].y + _402;
    float _1348 = cbLight._m0[_1323].z + _403;
    float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
    float _1356 = dot(vec3(0.0), vec3(cbLight._m0[_1323].xyz));
    float _2633 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _1359 = isnan(1.0) ? _2633 : (isnan(_2633) ? 1.0 : min(_2633, 1.0));
    float _1360 = dot(vec3(0.0), vec3(_401, _402, _403));
    float _2644 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
    float _1363 = isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0));
    float _1364 = dot(vec3(cbLight._m0[_1323].xyz), vec3(_1346 * _1352, _1347 * _1352, _1348 * _1352));
    float _2655 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
    float _1375 = (exp2(log2(1.0 - (isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1381 = (0.5 / ((_1359 + 9.9999999392252902907785028219223e-09) + _1363)) * _1359;
    float _2666 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
    float _1383 = (isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0))) * 0.31831014156341552734375;
    float _1385 = isnan(1.0) ? _1333 : (isnan(_1333) ? 1.0 : min(_1333, 1.0));
    uint _1398 = _1323 + 9u;
    uint _1404 = _1323 | 1u;
    float _1410 = cbLight._m0[_1404].x + _401;
    float _1411 = cbLight._m0[_1404].y + _402;
    float _1412 = cbLight._m0[_1404].z + _403;
    float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
    float _1420 = dot(vec3(0.0), vec3(cbLight._m0[_1404].xyz));
    float _2682 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
    float _1423 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
    float _1424 = dot(vec3(cbLight._m0[_1404].xyz), vec3(_1410 * _1416, _1411 * _1416, _1412 * _1416));
    float _2693 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
    float _1433 = (exp2(log2(1.0 - (isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1437 = (0.5 / ((_1423 + 9.9999999392252902907785028219223e-09) + _1363)) * _1423;
    float _2704 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
    float _1439 = (isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0))) * 0.31831014156341552734375;
    float _1440 = isnan(1.0) ? _1334 : (isnan(_1334) ? 1.0 : min(_1334, 1.0));
    float _1450 = (((_1433 * cbLight._m0[_1398].x) * _1439) * _1440) + ((((cbLight._m0[_1335].x * _1310) * _1375) * _1383) * _1385);
    float _1451 = (((_1433 * cbLight._m0[_1398].y) * _1439) * _1440) + ((((cbLight._m0[_1335].y * _1312) * _1375) * _1383) * _1385);
    float _1452 = (((_1433 * cbLight._m0[_1398].z) * _1439) * _1440) + ((((cbLight._m0[_1335].z * _1314) * _1375) * _1383) * _1385);
    float _1616;
    float _1618;
    float _1620;
    if (_1321.y == 0u)
    {
        uvec4 _1570 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1571 = _1570.x;
        uint _1582 = uint((float(_1570.y) * floor(float(uint(cbSceneParam._m0[85u].y * _410) / _1571))) + floor(float(uint(cbSceneParam._m0[85u].x * _409) / _1571)));
        float _1592 = (log2(_1096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1593 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        uint _1596 = uint(isnan(14.0) ? _1593 : (isnan(_1593) ? 14.0 : min(_1593, 14.0)));
        uvec4 _1602 = texelFetch(g_lightClusterGridBuffer, int(((_1596 << 2u) + (_1582 << 6u)) >> 2u));
        uint _1603 = _1602.x;
        uint _1604 = _1570.z;
        float _1710;
        float _1712;
        float _1714;
        if (((((1u << ((_1604 >> 4u) & 15u)) + 4294967295u) & _1603) == 0u) || ((_1604 & 240u) == 0u))
        {
            _1710 = 0.0;
            _1712 = 0.0;
            _1714 = 0.0;
        }
        else
        {
            float _1711;
            float _1713;
            float _1715;
            float _1863 = 0.0;
            float _1864 = 0.0;
            float _1865 = 0.0;
            uint _1866 = 0u;
            uint _1875;
            bool _1876;
            for (;;)
            {
                _1875 = texelFetch(g_lightClassification, int((((_1596 << 5u) + (_1582 << 9u)) + (_1866 << 2u)) >> 2u)).x;
                _1876 = _1875 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                if (_1876)
                {
                    frontier_phi_66_pred = _1865;
                    frontier_phi_66_pred_1 = _1864;
                    frontier_phi_66_pred_2 = _1863;
                }
                else
                {
                    float _1999;
                    float _2000;
                    float _2001;
                    uint _2002;
                    _1999 = _1863;
                    _2000 = _1864;
                    _2001 = _1865;
                    _2002 = _1875;
                    float _1937;
                    float _1938;
                    float _1939;
                    for (;;)
                    {
                        uint _2006 = uint(findLSB(_2002)) + (_1866 << 5u);
                        uint _2003 = (_2002 + 4294967295u) & _2002;
                        uint _2008 = _2006 * 48u;
                        vec4 _2022 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2008)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2008 + 3u)).x));
                        uint _2039 = (_2006 * 48u) + 8u;
                        vec3 _2050 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2039)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2039 + 2u)).x));
                        float _2054 = _2022.x - _1094;
                        float _2055 = _2022.y - _1095;
                        float _2056 = _2022.z - _1096;
                        float _2057 = dot(vec3(_2054, _2055, _2056), vec3(_2054, _2055, _2056));
                        float _2060 = inversesqrt(_2057);
                        float _2069 = 1.0 - (_2057 * _2022.w);
                        float _2730 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
                        float _2071 = sqrt(_2057) * uintBitsToFloat(uvec4(_2029, _2030, _2031, texelFetch(g_PointLightRenderingBuffer, int(((_2006 * 48u) + 4u) + 3u)).x)).w;
                        float _2074 = 1.39999997615814208984375 / (_2071 + 1.39999997615814208984375);
                        float _2075 = _2074 * _2074;
                        float _2078 = ((1.0 - _2075) * dot(vec3(0.0), vec3(_2060 * _2054, _2060 * _2055, _2060 * _2056))) + _2075;
                        float _2080 = (-0.0) - _1094;
                        float _2081 = (-0.0) - _1095;
                        float _2082 = (-0.0) - _1096;
                        float _2086 = inversesqrt(dot(vec3(_2080, _2081, _2082), vec3(_2080, _2081, _2082)));
                        float _2090 = dot(vec3(0.0), vec3(_2086 * _2080, _2086 * _2081, _2086 * _2082));
                        float _2741 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
                        float _2752 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
                        float _2094 = isnan(1.0) ? _2752 : (isnan(_2752) ? 1.0 : min(_2752, 1.0));
                        float _2098 = (0.5 / (((isnan(1.0) ? _2741 : (isnan(_2741) ? 1.0 : min(_2741, 1.0))) + 9.9999999392252902907785028219223e-09) + _2094)) * _2094;
                        float _2763 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
                        float _2107 = (((isnan(1.0) ? _2763 : (isnan(_2763) ? 1.0 : min(_2763, 1.0))) * 3.1415927410125732421875) / (((_2071 * _2071) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2730 : (isnan(_2730) ? 1.0 : min(_2730, 1.0)));
                        _1937 = (_2107 * _2050.x) + _1999;
                        _1938 = (_2107 * _2050.y) + _2000;
                        _1939 = (_2107 * _2050.z) + _2001;
                        if (_2003 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1999 = _1937;
                            _2000 = _1938;
                            _2001 = _1939;
                            _2002 = _2003;
                        }
                    }
                    frontier_phi_66_pred = _1939;
                    frontier_phi_66_pred_1 = _1938;
                    frontier_phi_66_pred_2 = _1937;
                }
                _1715 = frontier_phi_66_pred;
                _1713 = frontier_phi_66_pred_1;
                _1711 = frontier_phi_66_pred_2;
                uint _1867 = _1866 + 1u;
                if (_1867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1863 = _1711;
                    _1864 = _1713;
                    _1865 = _1715;
                    _1866 = _1867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1710 = _1711;
            _1712 = _1713;
            _1714 = _1715;
        }
        uvec4 _1718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1719 = _1718.z;
        uint _1721 = (_1719 >> 8u) & 15u;
        float _1843;
        float _1845;
        float _1847;
        if (((4294967295u << _1721) & _1603) == 0u)
        {
            _1843 = _1710;
            _1845 = _1712;
            _1847 = _1714;
        }
        else
        {
            float _1859 = inversesqrt(dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            if (_1721 < ((_1719 >> 12u) & 15u))
            {
                float _1844;
                float _1846;
                float _1848;
                float _1985 = _1710;
                float _1986 = _1712;
                float _1987 = _1714;
                uint _1988 = _1721;
                uint _1997;
                bool _1998;
                for (;;)
                {
                    _1997 = texelFetch(g_lightClassification, int((((_1596 << 5u) + (_1582 << 9u)) + (_1988 << 2u)) >> 2u)).x;
                    _1998 = _1997 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    if (_1998)
                    {
                        frontier_phi_72_pred = _1987;
                        frontier_phi_72_pred_1 = _1986;
                        frontier_phi_72_pred_2 = _1985;
                    }
                    else
                    {
                        float _2112;
                        float _2113;
                        float _2114;
                        float _2334;
                        float _2335;
                        float _2336;
                        float _2122 = _1985;
                        float _2123 = _1986;
                        float _2124 = _1987;
                        uint _2125 = _1997;
                        uint _2126;
                        uint _2136;
                        vec4 _2151;
                        float _2152;
                        vec3 _2164;
                        vec4 _2179;
                        vec4 _2195;
                        float _2241;
                        bool _2242;
                        for (;;)
                        {
                            _2136 = ((_1988 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2125));
                            _2126 = (_2125 + 4294967295u) & _2125;
                            uint _2138 = _2136 * 40u;
                            _2151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2138 + 3u)).x));
                            _2152 = _2151.w;
                            uint _2154 = (_2136 * 40u) + 8u;
                            _2164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2154 + 2u)).x));
                            uint _2166 = (_2136 * 40u) + 16u;
                            _2179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2166 + 3u)).x));
                            uint _2182 = (_2136 * 40u) + 20u;
                            _2195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2182 + 3u)).x));
                            uint _2197 = (_2136 * 40u) + 24u;
                            vec4 _2210 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2197)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2197 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2197 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2197 + 3u)).x));
                            uint _2216 = (_2136 * 40u) + 28u;
                            vec4 _2229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2216 + 3u)).x));
                            _2241 = fma(_1096, _2229.z, fma(_1095, _2229.y, _2229.x * _1094)) + _2229.w;
                            _2242 = !((fma(_1096, _2210.z, fma(_1095, _2210.y, _2210.x * _1094)) + _2210.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            if (_2242)
                            {
                                float _2276 = _2151.x - _1094;
                                float _2277 = _2151.y - _1095;
                                float _2278 = _2151.z - _1096;
                                float _2279 = dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278));
                                float _2282 = inversesqrt(_2279);
                                float _2289 = 1.0 - (_2279 / (_2152 * _2152));
                                float _2774 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
                                float _2291 = sqrt(_2279) * uintBitsToFloat(uvec4(_2245, _2246, _2247, texelFetch(g_SpotLightRenderingBuffer, int(((_2136 * 40u) + 4u) + 3u)).x)).w;
                                float _2293 = 1.39999997615814208984375 / (_2291 + 1.39999997615814208984375);
                                float _2294 = _2293 * _2293;
                                float _2297 = (fma(_1096, _2179.z, fma(_1095, _2179.y, _2179.x * _1094)) + _2179.w) / _2241;
                                float _2298 = (fma(_1096, _2195.z, fma(_1095, _2195.y, _2195.x * _1094)) + _2195.w) / _2241;
                                float _2302 = 1.0 - dot(vec2(_2297, _2298), vec2(_2297, _2298));
                                float _2785 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
                                float _2310 = dot(vec3(0.0), vec3((-0.0) - (_1094 * _1859), (-0.0) - (_1095 * _1859), (-0.0) - (_1096 * _1859)));
                                float _2796 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
                                float _2318 = ((1.0 - _2294) * dot(vec3(0.0), vec3(_2282 * _2276, _2282 * _2277, _2282 * _2278))) + _2294;
                                float _2807 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
                                float _2319 = isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0));
                                float _2323 = (0.5 / (((isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0))) + 9.9999999392252902907785028219223e-09) + _2319)) * _2319;
                                float _2818 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                                float _2330 = ((isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0))) * (isnan(1.0) ? _2774 : (isnan(_2774) ? 1.0 : min(_2774, 1.0)))) * (((isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0))) * 3.1415927410125732421875) / (((_2291 * _2291) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2330 * _2164.z;
                                frontier_phi_78_pred_1 = _2330 * _2164.y;
                                frontier_phi_78_pred_2 = _2330 * _2164.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                            }
                            _2336 = frontier_phi_78_pred;
                            _2335 = frontier_phi_78_pred_1;
                            _2334 = frontier_phi_78_pred_2;
                            _2112 = _2334 + _2122;
                            _2113 = _2335 + _2123;
                            _2114 = _2336 + _2124;
                            if (_2126 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2122 = _2112;
                                _2123 = _2113;
                                _2124 = _2114;
                                _2125 = _2126;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2114;
                        frontier_phi_72_pred_1 = _2113;
                        frontier_phi_72_pred_2 = _2112;
                    }
                    _1848 = frontier_phi_72_pred;
                    _1846 = frontier_phi_72_pred_1;
                    _1844 = frontier_phi_72_pred_2;
                    uint _1989 = _1988 + 1u;
                    if (_1989 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1985 = _1844;
                        _1986 = _1846;
                        _1987 = _1848;
                        _1988 = _1989;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _1848;
                frontier_phi_59_60_ladder_1 = _1846;
                frontier_phi_59_60_ladder_2 = _1844;
            }
            else
            {
                frontier_phi_59_60_ladder = _1714;
                frontier_phi_59_60_ladder_1 = _1712;
                frontier_phi_59_60_ladder_2 = _1710;
            }
            _1843 = frontier_phi_59_60_ladder_2;
            _1845 = frontier_phi_59_60_ladder_1;
            _1847 = frontier_phi_59_60_ladder;
        }
        float _1852 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
        _1616 = ((_1843 * 0.039999999105930328369140625) * _1852) + _1450;
        _1618 = ((_1845 * 0.039999999105930328369140625) * _1852) + _1451;
        _1620 = ((_1847 * 0.039999999105930328369140625) * _1852) + _1452;
    }
    else
    {
        _1616 = _1450;
        _1618 = _1451;
        _1620 = _1452;
    }
    uint _1627 = (_1316 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1642 = ((cbMtdParam._m0[9u].x * _367.x) * cbInstanceData._m0[_1627].x) + ((_1616 + ((isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0))) * _814)) * cbPerFrame._m0[3u].x);
    float _1643 = ((cbMtdParam._m0[9u].y * _367.y) * cbInstanceData._m0[_1627].y) + ((_1618 + ((isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0))) * _814)) * cbPerFrame._m0[3u].x);
    float _1644 = ((cbMtdParam._m0[9u].z * _367.z) * cbInstanceData._m0[_1627].z) + ((_1620 + ((isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0))) * _814)) * cbPerFrame._m0[3u].x);
    uint _1648 = _1316 + 6u;
    float _1656 = _409 / cbSceneParam._m0[86u].x;
    float _1657 = _410 / cbSceneParam._m0[86u].y;
    vec4 _1671 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1656, _1657, (log2((isnan(cbSceneParam._m0[77u].w) ? _396 : (isnan(_396) ? cbSceneParam._m0[77u].w : min(_396, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1673 = _1671.x;
    float _1674 = _1671.y;
    float _1675 = _1671.z;
    float _1676 = _1671.w;
    float _1766;
    float _1768;
    float _1770;
    float _1772;
    if (_396 > cbSceneParam._m0[78u].w)
    {
        float _1729 = isnan(_396) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _396 : min(cbSceneParam._m0[80u].w, _396));
        float _1730 = _1729 / _396;
        float _1741 = _1730 * _250;
        float _1742 = _251 * _1730;
        float _1743 = (-0.0) - _1742;
        float _1744 = _1730 * _252;
        float _1746 = (cbSceneParam._m0[77u].w * _1743) / _1729;
        float _1747 = _1746 + cbSceneParam._m0[79u].w;
        float _1748 = cbSceneParam._m0[79u].w - _1742;
        float _1754 = sqrt(((_1741 * _1741) + (_1742 * _1742)) + (_1744 * _1744));
        float _1757 = (1.0 - (cbSceneParam._m0[77u].w / _1729)) * _1754;
        float _1762 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1764 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1947;
        if (abs((_1743 - _1746) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1947 = ((((_1747 > 0.0) ? exp2(_1762 * _1747) : (2.0 - exp2(_1764 * _1747))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1757;
        }
        else
        {
            float _1889 = 1.0 / cbSceneParam._m0[80u].x;
            float _1890 = isnan(_1748) ? _1747 : (isnan(_1747) ? _1748 : max(_1747, _1748));
            float _1891 = isnan(_1748) ? _1747 : (isnan(_1747) ? _1748 : min(_1747, _1748));
            float _1900 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : min(_1890, 0.0));
            float _1901 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : min(_1891, 0.0));
            _1947 = ((abs(_1754 / _1743) * cbSceneParam._m0[80u].y) * ((((_1900 - _1901) * 2.0) - ((exp2(_1762 * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)))) - exp2(_1762 * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))))) * _1889)) - ((exp2(_1764 * _1900) - exp2(_1764 * _1901)) * _1889))) + (_1757 * cbSceneParam._m0[80u].z);
        }
        vec4 _1949 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1656, _1657, 1.0), 0.0);
        float _1958 = exp2((_1947 * (-1.44269502162933349609375)) * (1.0 - _1949.w));
        float _1959 = log2(_1958);
        float _1975 = log2(_1676);
        _1766 = (exp2(_1975 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1959 * cbSceneParam._m0[78u].x)) * _1949.x) / cbSceneParam._m0[78u].x)) + _1673;
        _1768 = (exp2(_1975 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1959 * cbSceneParam._m0[78u].y)) * _1949.y) / cbSceneParam._m0[78u].y)) + _1674;
        _1770 = (exp2(_1975 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1959 * cbSceneParam._m0[78u].z)) * _1949.z) / cbSceneParam._m0[78u].z)) + _1675;
        _1772 = _1958 * _1676;
    }
    else
    {
        _1766 = _1673;
        _1768 = _1674;
        _1770 = _1675;
        _1772 = _1676;
    }
    float _1784 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1785 = _1784 == 3.0;
    float _1787 = log2(_1772);
    float _1794 = exp2(_1787 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    float _1795 = exp2(_1787 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
    float _1796 = exp2(_1787 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)));
    float _1805 = (_1784 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1805 * (_1785 ? _1794 : (_1794 + (cbSceneParam._m0[72u].w * _1766)));
    SV_Target.y = _1805 * (_1785 ? _1795 : (_1795 + (cbSceneParam._m0[72u].w * _1768)));
    SV_Target.z = _1805 * (_1785 ? _1796 : (_1796 + (cbSceneParam._m0[72u].w * _1770)));
    SV_Target.w = cbInstanceData._m0[_1648].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1648].w;
}


