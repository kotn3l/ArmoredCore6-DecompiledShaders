#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _586;
uint _1731;
uint _1732;
uint _1733;
uint _1968;
uint _1969;
uint _1970;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _170 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _171 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _172 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _177 = inversesqrt(dot(vec3(_170, _171, _172), vec3(_170, _171, _172)));
    float _184 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _188 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _246 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _236);
    float _247 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _236);
    float _248 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _236);
    float _274 = cbMtdParam._m0[22u].y + _246;
    float _275 = cbMtdParam._m0[22u].z + _247;
    float _276 = cbMtdParam._m0[22u].w + _248;
    float _293 = (-0.0) - dot(vec3(_274, _275, _276), vec3(_177 * _170, _177 * _171, _177 * _172));
    float _294 = (-0.0) - dot(vec3(_274, _275, _276), vec3(_188 * TANGENT.x, _188 * TANGENT.y, _188 * TANGENT.z));
    float _295 = (-0.0) - dot(vec3(_274, _275, _276), vec3((-0.0) - (NORMAL.x * _184), (-0.0) - (NORMAL.y * _184), (-0.0) - (NORMAL.z * _184)));
    float _299 = inversesqrt(dot(vec3(_293, _294, _295), vec3(_293, _294, _295)));
    float _300 = _299 * _295;
    float _302 = (cbMtdParam._m0[19u].x * _293) * _299;
    float _304 = (cbMtdParam._m0[18u].w * _294) * _299;
    float _305 = fract(TEXCOORD.x);
    float _306 = fract(TEXCOORD.y);
    float _312;
    if (_302 > 0.0)
    {
        _312 = (1.0 - _305) / _302;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_302 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _305) / _302;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _312 = frontier_phi_3_2_ladder;
    }
    float _320;
    if (_304 > 0.0)
    {
        _320 = (1.0 - _306) / _304;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _306) / _304;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _320 = frontier_phi_7_6_ladder;
    }
    float _324 = (_300 > 0.0) ? (cbMtdParam._m0[15u].x / _300) : 5000.0;
    float _325 = isnan(_320) ? _312 : (isnan(_312) ? _320 : min(_312, _320));
    float _326 = isnan(_324) ? _325 : (isnan(_325) ? _324 : min(_325, _324));
    float _330 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _337 = ((_326 * _300) + _330) / _330;
    vec4 _363 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_305 + (-0.5)) + (_326 * _302)) / _337) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_306 + (-0.5)) + (_326 * _304)) / _337) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _392 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _396 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _397 = _246 * _396;
    float _398 = _247 * _396;
    float _399 = _248 * _396;
    float _405 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _406 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _415 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_405 * cbSceneParam._m0[86u].x, _406 * cbSceneParam._m0[86u].y));
    float _418 = _415.x * TEXCOORD.z;
    float _419 = (-0.0) - _397;
    float _420 = (-0.0) - _398;
    float _421 = (-0.0) - _399;
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _447 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _451 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _585;
    float _587;
    float _588;
    float _589;
    float _590;
    float _591;
    float _592;
    float _593;
    float _594;
    float _595;
    float _596;
    float _597;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _507 = (cbModelParam._m0[37u].x * ((((fma(_451, cbModelParam._m0[26u].z, fma(_447, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _443)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _509 = (cbModelParam._m0[37u].y * ((((fma(_451, cbModelParam._m0[27u].z, fma(_447, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _443)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _510 = (((((fma(_451, cbModelParam._m0[28u].z, fma(_447, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _443)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _513 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_507, _509, _510), 0.0);
        vec4 _520 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_507, _509, _510), 0.0);
        vec4 _527 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_507, _509, _510), 0.0);
        vec4 _534 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_507, _509, _510), 0.0);
        float _547 = exp2((_513.w + (-0.5)) * 20.0) * 2.0;
        float _558 = exp2((_520.w + (-0.5)) * 20.0) * 2.0;
        float _568 = exp2((_527.w + (-0.5)) * 20.0) * 2.0;
        float _578 = exp2((_534.w + (-0.5)) * 20.0) * 2.0;
        float _579 = _578 * (_534.x + (-0.5));
        float _580 = _578 * (_534.y + (-0.5));
        float _581 = _578 * (_534.z + (-0.5));
        _585 = _547 * (_513.z + (-0.5));
        _587 = _547 * (_513.y + (-0.5));
        _588 = _547 * (_513.x + (-0.5));
        _589 = _558 * (_520.z + (-0.5));
        _590 = _558 * (_520.y + (-0.5));
        _591 = _558 * (_520.x + (-0.5));
        _592 = _568 * (_527.z + (-0.5));
        _593 = _568 * (_527.y + (-0.5));
        _594 = _568 * (_527.x + (-0.5));
        _595 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        _596 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
        _597 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    }
    else
    {
        _585 = _586;
        _587 = _586;
        _588 = _586;
        _589 = _586;
        _590 = _586;
        _591 = _586;
        _592 = _586;
        _593 = _586;
        _594 = _586;
        _595 = _586;
        _596 = _586;
        _597 = _586;
    }
    float _725;
    float _726;
    float _727;
    float _728;
    float _729;
    float _730;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _651 = (cbModelParam._m0[38u].x * ((((fma(_451, cbModelParam._m0[30u].z, fma(_447, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _443)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _652 = (cbModelParam._m0[38u].y * ((((fma(_451, cbModelParam._m0[31u].z, fma(_447, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _443)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _653 = (((((fma(_451, cbModelParam._m0[32u].z, fma(_447, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _443)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _688 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _698 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _708 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _718 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_676.x + (-0.5));
        float _720 = _718 * (_676.y + (-0.5));
        float _721 = _718 * (_676.z + (-0.5));
        _725 = _688 * (_655.z + (-0.5));
        _726 = _688 * (_655.y + (-0.5));
        _727 = _688 * (_655.x + (-0.5));
        _728 = _698 * (_662.z + (-0.5));
        _729 = _698 * (_662.y + (-0.5));
        _730 = _698 * (_662.x + (-0.5));
        _731 = _708 * (_669.z + (-0.5));
        _732 = _708 * (_669.y + (-0.5));
        _733 = _708 * (_669.x + (-0.5));
        _734 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        _735 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        _736 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    }
    else
    {
        _725 = _586;
        _726 = _586;
        _727 = _586;
        _728 = _586;
        _729 = _586;
        _730 = _586;
        _731 = _586;
        _732 = _586;
        _733 = _586;
        _734 = _586;
        _735 = _586;
        _736 = _586;
    }
    float _751 = _397 * (-0.5);
    float _752 = _398 * (-0.5);
    float _753 = _399 * (-0.5);
    float _754 = dot(vec4(_751, _752, _753, 1.0), vec4(_727, _730, _733, _736));
    float _757 = dot(vec4(_751, _752, _753, 1.0), vec4(_726, _729, _732, _735));
    float _760 = dot(vec4(_751, _752, _753, 1.0), vec4(_725, _728, _731, _734));
    float _795;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _767 = dot(vec4(_751, _752, _753, 1.0), vec4(_585, _589, _592, _595));
        float _771 = dot(vec4(_751, _752, _753, 1.0), vec4(_587, _590, _593, _596));
        float _775 = dot(vec4(_751, _752, _753, 1.0), vec4(_588, _591, _594, _597));
        float _782 = dot(vec4(cbModelParam._m0[39u]), vec4(_751, _752, _753, 1.0));
        _795 = dot(vec3(isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)), isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)), isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_782) ? 0.0 : (isnan(0.0) ? _782 : max(0.0, _782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _795 = 1.0;
    }
    float _806;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _797 = dot(vec4(cbModelParam._m0[40u]), vec4(_751, _752, _753, 1.0));
        _806 = dot(vec3(isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)), isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)), isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_797) ? 0.0 : (isnan(0.0) ? _797 : max(0.0, _797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _806 = 1.0;
    }
    float _810 = (_806 * cbModelParam._m0[1u].x) + (_795 * (1.0 - cbModelParam._m0[1u].x));
    float _816 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _899;
    float _901;
    float _903;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _866 = fma(_451, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _443)) + cbModelParam._m0[13u].w;
        float _870 = fma(_451, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _443)) + cbModelParam._m0[14u].w;
        float _874 = fma(_451, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _443)) + cbModelParam._m0[15u].w;
        float _877 = fma(_421, cbModelParam._m0[13u].z, fma(_420, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419));
        float _880 = fma(_421, cbModelParam._m0[14u].z, fma(_420, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419));
        float _883 = fma(_421, cbModelParam._m0[15u].z, fma(_420, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419));
        float _909;
        if (_877 > 0.0)
        {
            _909 = abs((1.0 - _866) / _877);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_877 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_866 + 1.0) / _877);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _909 = frontier_phi_22_20_ladder;
        }
        float _1188;
        if (_880 > 0.0)
        {
            _1188 = abs((1.0 - _870) / _880);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_880 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_870 + 1.0) / _880);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1188 = frontier_phi_31_27_ladder;
        }
        float _1484;
        if (_883 > 0.0)
        {
            _1484 = abs((1.0 - _874) / _883);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_883 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_874 + 1.0) / _883);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1484 = frontier_phi_45_38_ladder;
        }
        float _1486 = isnan(_1188) ? _909 : (isnan(_909) ? _1188 : min(_909, _1188));
        float _1487 = isnan(_1484) ? _1486 : (isnan(_1486) ? _1484 : min(_1486, _1484));
        float _1491 = (_1487 * _877) + _866;
        float _1492 = (_1487 * _880) + _870;
        float _1493 = (_1487 * _883) + _874;
        float _1494 = _1487 * 9.9999997473787516355514526367188e-05;
        float _1495 = (-1.0) - _1494;
        float _1497 = _1494 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1493 > _1497) || ((_1493 < _1495) || ((_1492 > _1497) || ((_1492 < _1495) || ((_1491 < _1495) || (_1491 > _1497))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1493, cbModelParam._m0[9u].z, fma(_1492, cbModelParam._m0[9u].y, _1491 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1493, cbModelParam._m0[10u].z, fma(_1492, cbModelParam._m0[10u].y, _1491 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1493, cbModelParam._m0[11u].z, fma(_1492, cbModelParam._m0[11u].y, _1491 * cbModelParam._m0[11u].x))), _816);
            frontier_phi_21_45_ladder = _1604.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1604.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1604.x * cbModelParam._m0[1u].y;
        }
        _899 = frontier_phi_21_45_ladder_2;
        _901 = frontier_phi_21_45_ladder_1;
        _903 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _887 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_419, _420, _421), _816);
        _899 = _887.x * cbModelParam._m0[1u].y;
        _901 = _887.y * cbModelParam._m0[1u].y;
        _903 = _887.z * cbModelParam._m0[1u].y;
    }
    float _906 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _995;
    float _997;
    float _999;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _959 = fma(_451, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _443)) + cbModelParam._m0[21u].w;
        float _963 = fma(_451, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _443)) + cbModelParam._m0[22u].w;
        float _967 = fma(_451, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _443)) + cbModelParam._m0[23u].w;
        float _970 = fma(_421, cbModelParam._m0[21u].z, fma(_420, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419));
        float _973 = fma(_421, cbModelParam._m0[22u].z, fma(_420, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419));
        float _976 = fma(_421, cbModelParam._m0[23u].z, fma(_420, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419));
        float _1193;
        if (_970 > 0.0)
        {
            _1193 = abs((1.0 - _959) / _970);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_970 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_959 + 1.0) / _970);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1193 = frontier_phi_33_29_ladder;
        }
        float _1510;
        if (_973 > 0.0)
        {
            _1510 = abs((1.0 - _963) / _973);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_973 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_963 + 1.0) / _973);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1510 = frontier_phi_47_40_ladder;
        }
        float _1661;
        if (_976 > 0.0)
        {
            _1661 = abs((1.0 - _967) / _976);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_976 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_967 + 1.0) / _976);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1661 = frontier_phi_61_56_ladder;
        }
        float _1663 = isnan(_1510) ? _1193 : (isnan(_1193) ? _1510 : min(_1193, _1510));
        float _1664 = isnan(_1661) ? _1663 : (isnan(_1663) ? _1661 : min(_1663, _1661));
        float _1668 = (_1664 * _970) + _959;
        float _1669 = (_1664 * _973) + _963;
        float _1670 = (_1664 * _976) + _967;
        float _1671 = _1664 * 9.9999997473787516355514526367188e-05;
        float _1672 = (-1.0) - _1671;
        float _1674 = _1671 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1670 > _1674) || ((_1670 < _1672) || ((_1669 > _1674) || ((_1669 < _1672) || ((_1668 < _1672) || (_1668 > _1674))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1670, cbModelParam._m0[17u].z, fma(_1669, cbModelParam._m0[17u].y, _1668 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1670, cbModelParam._m0[18u].z, fma(_1669, cbModelParam._m0[18u].y, _1668 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1670, cbModelParam._m0[19u].z, fma(_1669, cbModelParam._m0[19u].y, _1668 * cbModelParam._m0[19u].x))), _906);
            frontier_phi_30_61_ladder = _1830.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1830.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1830.x * cbModelParam._m0[1u].z;
        }
        _995 = frontier_phi_30_61_ladder_2;
        _997 = frontier_phi_30_61_ladder;
        _999 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_419, _420, _421), _906);
        _995 = _979.x * cbModelParam._m0[1u].z;
        _997 = _979.y * cbModelParam._m0[1u].z;
        _999 = _979.z * cbModelParam._m0[1u].z;
    }
    float _1011 = _418 * 0.01200000010430812835693359375;
    float _1013 = _1011 * ((cbModelParam._m0[1u].w * (_995 - _899)) + _899);
    float _1014 = _1011 * ((cbModelParam._m0[1u].w * (_997 - _901)) + _901);
    float _1015 = _1011 * ((cbModelParam._m0[1u].w * (_999 - _903)) + _903);
    float _1036 = fma(_1015, cbSceneParam._m0[89u].z, fma(_1014, cbSceneParam._m0[89u].y, _1013 * cbSceneParam._m0[89u].x));
    float _1039 = fma(_1015, cbSceneParam._m0[90u].z, fma(_1014, cbSceneParam._m0[90u].y, _1013 * cbSceneParam._m0[90u].x));
    float _1042 = fma(_1015, cbSceneParam._m0[91u].z, fma(_1014, cbSceneParam._m0[91u].y, _1013 * cbSceneParam._m0[91u].x));
    uint _1049 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1054 = floatBitsToUint(cbInstanceData._m0[_1049 + 5u]);
    uint _1056 = _1054.x * 14u;
    uint _1057 = _1056 + 13u;
    float _1062 = _418 + (-1.0);
    float _1066 = (cbLight._m0[_1057].x * _1062) + 1.0;
    float _1067 = (cbLight._m0[_1057].y * _1062) + 1.0;
    uint _1068 = _1056 + 8u;
    float _1079 = cbLight._m0[_1056].x + _397;
    float _1080 = cbLight._m0[_1056].y + _398;
    float _1081 = cbLight._m0[_1056].z + _399;
    float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
    float _1089 = dot(vec3(0.0), vec3(cbLight._m0[_1056].xyz));
    float _2305 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    float _1093 = dot(vec3(0.0), vec3(_397, _398, _399));
    float _2316 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    float _1097 = dot(vec3(cbLight._m0[_1056].xyz), vec3(_1079 * _1085, _1080 * _1085, _1081 * _1085));
    float _2327 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1108 = (exp2(log2(1.0 - (isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1114 = (0.5 / ((_1092 + 9.9999999392252902907785028219223e-09) + _1096)) * _1092;
    float _2338 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
    float _1116 = (isnan(1.0) ? _2338 : (isnan(_2338) ? 1.0 : min(_2338, 1.0))) * 0.31831014156341552734375;
    float _1118 = isnan(1.0) ? _1066 : (isnan(_1066) ? 1.0 : min(_1066, 1.0));
    uint _1128 = _1056 + 9u;
    uint _1134 = _1056 | 1u;
    float _1140 = cbLight._m0[_1134].x + _397;
    float _1141 = cbLight._m0[_1134].y + _398;
    float _1142 = cbLight._m0[_1134].z + _399;
    float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
    float _1150 = dot(vec3(0.0), vec3(cbLight._m0[_1134].xyz));
    float _2354 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _1153 = isnan(1.0) ? _2354 : (isnan(_2354) ? 1.0 : min(_2354, 1.0));
    float _1154 = dot(vec3(cbLight._m0[_1134].xyz), vec3(_1140 * _1146, _1141 * _1146, _1142 * _1146));
    float _2365 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1163 = (exp2(log2(1.0 - (isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1167 = (0.5 / ((_1153 + 9.9999999392252902907785028219223e-09) + _1096)) * _1153;
    float _2376 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = (isnan(1.0) ? _2376 : (isnan(_2376) ? 1.0 : min(_2376, 1.0))) * 0.31831014156341552734375;
    float _1170 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
    float _1180 = (((_1163 * cbLight._m0[_1128].x) * _1169) * _1170) + (((_1108 * cbLight._m0[_1068].x) * _1116) * _1118);
    float _1181 = (((_1163 * cbLight._m0[_1128].y) * _1169) * _1170) + (((_1108 * cbLight._m0[_1068].y) * _1116) * _1118);
    float _1182 = (((_1163 * cbLight._m0[_1128].z) * _1169) * _1170) + (((_1108 * cbLight._m0[_1068].z) * _1116) * _1118);
    float _1299;
    float _1301;
    float _1303;
    if (_1054.y == 0u)
    {
        float _1238 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1239 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1238;
        float _1240 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1238;
        float _1241 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1238;
        uvec4 _1253 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1254 = _1253.x;
        uint _1265 = uint((float(_1253.y) * floor(float(uint(cbSceneParam._m0[85u].y * _406) / _1254))) + floor(float(uint(cbSceneParam._m0[85u].x * _405) / _1254)));
        float _1275 = (log2(_1241 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1276 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        uint _1279 = uint(isnan(14.0) ? _1276 : (isnan(_1276) ? 14.0 : min(_1276, 14.0)));
        uvec4 _1285 = texelFetch(g_lightClusterGridBuffer, int(((_1279 << 2u) + (_1265 << 6u)) >> 2u));
        uint _1286 = _1285.x;
        uint _1287 = _1253.z;
        float _1376;
        float _1378;
        float _1380;
        if (((((1u << ((_1287 >> 4u) & 15u)) + 4294967295u) & _1286) == 0u) || ((_1287 & 240u) == 0u))
        {
            _1376 = 0.0;
            _1378 = 0.0;
            _1380 = 0.0;
        }
        else
        {
            float _1377;
            float _1379;
            float _1381;
            float _1535 = 0.0;
            float _1536 = 0.0;
            float _1537 = 0.0;
            uint _1538 = 0u;
            uint _1547;
            bool _1548;
            for (;;)
            {
                _1547 = texelFetch(g_lightClassification, int((((_1279 << 5u) + (_1265 << 9u)) + (_1538 << 2u)) >> 2u)).x;
                _1548 = _1547 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1548)
                {
                    frontier_phi_58_pred = _1537;
                    frontier_phi_58_pred_1 = _1536;
                    frontier_phi_58_pred_2 = _1535;
                }
                else
                {
                    float _1701;
                    float _1702;
                    float _1703;
                    uint _1704;
                    _1701 = _1535;
                    _1702 = _1536;
                    _1703 = _1537;
                    _1704 = _1547;
                    float _1613;
                    float _1614;
                    float _1615;
                    for (;;)
                    {
                        uint _1708 = uint(findLSB(_1704)) + (_1538 << 5u);
                        uint _1705 = (_1704 + 4294967295u) & _1704;
                        uint _1710 = _1708 * 48u;
                        vec4 _1724 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1710)).x, texelFetch(g_PointLightRenderingBuffer, int(_1710 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1710 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1710 + 3u)).x));
                        uint _1741 = (_1708 * 48u) + 8u;
                        vec3 _1752 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1741)).x, texelFetch(g_PointLightRenderingBuffer, int(_1741 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1741 + 2u)).x));
                        float _1756 = _1724.x - _1239;
                        float _1757 = _1724.y - _1240;
                        float _1758 = _1724.z - _1241;
                        float _1759 = dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758));
                        float _1762 = inversesqrt(_1759);
                        float _1771 = 1.0 - (_1759 * _1724.w);
                        float _2402 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
                        float _1773 = sqrt(_1759) * uintBitsToFloat(uvec4(_1731, _1732, _1733, texelFetch(g_PointLightRenderingBuffer, int(((_1708 * 48u) + 4u) + 3u)).x)).w;
                        float _1776 = 1.39999997615814208984375 / (_1773 + 1.39999997615814208984375);
                        float _1777 = _1776 * _1776;
                        float _1780 = ((1.0 - _1777) * dot(vec3(0.0), vec3(_1762 * _1756, _1762 * _1757, _1762 * _1758))) + _1777;
                        float _1782 = (-0.0) - _1239;
                        float _1783 = (-0.0) - _1240;
                        float _1784 = (-0.0) - _1241;
                        float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
                        float _1792 = dot(vec3(0.0), vec3(_1788 * _1782, _1788 * _1783, _1788 * _1784));
                        float _2413 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
                        float _2424 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
                        float _1796 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
                        float _1800 = (0.5 / (((isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0))) + 9.9999999392252902907785028219223e-09) + _1796)) * _1796;
                        float _2435 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
                        float _1809 = (((isnan(1.0) ? _2435 : (isnan(_2435) ? 1.0 : min(_2435, 1.0))) * 3.1415927410125732421875) / (((_1773 * _1773) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0)));
                        _1613 = (_1809 * _1752.x) + _1701;
                        _1614 = (_1809 * _1752.y) + _1702;
                        _1615 = (_1809 * _1752.z) + _1703;
                        if (_1705 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1701 = _1613;
                            _1702 = _1614;
                            _1703 = _1615;
                            _1704 = _1705;
                        }
                    }
                    frontier_phi_58_pred = _1615;
                    frontier_phi_58_pred_1 = _1614;
                    frontier_phi_58_pred_2 = _1613;
                }
                _1381 = frontier_phi_58_pred;
                _1379 = frontier_phi_58_pred_1;
                _1377 = frontier_phi_58_pred_2;
                uint _1539 = _1538 + 1u;
                if (_1539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1535 = _1377;
                    _1536 = _1379;
                    _1537 = _1381;
                    _1538 = _1539;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1376 = _1377;
            _1378 = _1379;
            _1380 = _1381;
        }
        uvec4 _1384 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1385 = _1384.z;
        uint _1387 = (_1385 >> 8u) & 15u;
        float _1515;
        float _1517;
        float _1519;
        if (((4294967295u << _1387) & _1286) == 0u)
        {
            _1515 = _1376;
            _1517 = _1378;
            _1519 = _1380;
        }
        else
        {
            float _1531 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1387 < ((_1385 >> 12u) & 15u))
            {
                float _1516;
                float _1518;
                float _1520;
                float _1687 = _1376;
                float _1688 = _1378;
                float _1689 = _1380;
                uint _1690 = _1387;
                uint _1699;
                bool _1700;
                for (;;)
                {
                    _1699 = texelFetch(g_lightClassification, int((((_1279 << 5u) + (_1265 << 9u)) + (_1690 << 2u)) >> 2u)).x;
                    _1700 = _1699 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1700)
                    {
                        frontier_phi_67_pred = _1689;
                        frontier_phi_67_pred_1 = _1688;
                        frontier_phi_67_pred_2 = _1687;
                    }
                    else
                    {
                        float _1835;
                        float _1836;
                        float _1837;
                        float _2057;
                        float _2058;
                        float _2059;
                        float _1845 = _1687;
                        float _1846 = _1688;
                        float _1847 = _1689;
                        uint _1848 = _1699;
                        uint _1849;
                        uint _1859;
                        vec4 _1874;
                        float _1875;
                        vec3 _1887;
                        vec4 _1902;
                        vec4 _1918;
                        float _1964;
                        bool _1965;
                        for (;;)
                        {
                            _1859 = ((_1690 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1848));
                            _1849 = (_1848 + 4294967295u) & _1848;
                            uint _1861 = _1859 * 40u;
                            _1874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1861 + 3u)).x));
                            _1875 = _1874.w;
                            uint _1877 = (_1859 * 40u) + 8u;
                            _1887 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1877 + 2u)).x));
                            uint _1889 = (_1859 * 40u) + 16u;
                            _1902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1889 + 3u)).x));
                            uint _1905 = (_1859 * 40u) + 20u;
                            _1918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1905 + 3u)).x));
                            uint _1920 = (_1859 * 40u) + 24u;
                            vec4 _1933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1920 + 3u)).x));
                            uint _1939 = (_1859 * 40u) + 28u;
                            vec4 _1952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1939 + 3u)).x));
                            _1964 = fma(_1241, _1952.z, fma(_1240, _1952.y, _1952.x * _1239)) + _1952.w;
                            _1965 = !((fma(_1241, _1933.z, fma(_1240, _1933.y, _1933.x * _1239)) + _1933.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_1965)
                            {
                                float _1999 = _1874.x - _1239;
                                float _2000 = _1874.y - _1240;
                                float _2001 = _1874.z - _1241;
                                float _2002 = dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001));
                                float _2005 = inversesqrt(_2002);
                                float _2012 = 1.0 - (_2002 / (_1875 * _1875));
                                float _2446 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
                                float _2014 = sqrt(_2002) * uintBitsToFloat(uvec4(_1968, _1969, _1970, texelFetch(g_SpotLightRenderingBuffer, int(((_1859 * 40u) + 4u) + 3u)).x)).w;
                                float _2016 = 1.39999997615814208984375 / (_2014 + 1.39999997615814208984375);
                                float _2017 = _2016 * _2016;
                                float _2020 = (fma(_1241, _1902.z, fma(_1240, _1902.y, _1902.x * _1239)) + _1902.w) / _1964;
                                float _2021 = (fma(_1241, _1918.z, fma(_1240, _1918.y, _1918.x * _1239)) + _1918.w) / _1964;
                                float _2025 = 1.0 - dot(vec2(_2020, _2021), vec2(_2020, _2021));
                                float _2457 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
                                float _2033 = dot(vec3(0.0), vec3((-0.0) - (_1239 * _1531), (-0.0) - (_1240 * _1531), (-0.0) - (_1241 * _1531)));
                                float _2468 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
                                float _2041 = ((1.0 - _2017) * dot(vec3(0.0), vec3(_2005 * _1999, _2005 * _2000, _2005 * _2001))) + _2017;
                                float _2479 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
                                float _2042 = isnan(1.0) ? _2479 : (isnan(_2479) ? 1.0 : min(_2479, 1.0));
                                float _2046 = (0.5 / (((isnan(1.0) ? _2468 : (isnan(_2468) ? 1.0 : min(_2468, 1.0))) + 9.9999999392252902907785028219223e-09) + _2042)) * _2042;
                                float _2490 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
                                float _2053 = ((isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0))) * (isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0)))) * (((isnan(1.0) ? _2490 : (isnan(_2490) ? 1.0 : min(_2490, 1.0))) * 3.1415927410125732421875) / (((_2014 * _2014) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2053 * _1887.z;
                                frontier_phi_73_pred_1 = _2053 * _1887.y;
                                frontier_phi_73_pred_2 = _2053 * _1887.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2059 = frontier_phi_73_pred;
                            _2058 = frontier_phi_73_pred_1;
                            _2057 = frontier_phi_73_pred_2;
                            _1835 = _2057 + _1845;
                            _1836 = _2058 + _1846;
                            _1837 = _2059 + _1847;
                            if (_1849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1845 = _1835;
                                _1846 = _1836;
                                _1847 = _1837;
                                _1848 = _1849;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1837;
                        frontier_phi_67_pred_1 = _1836;
                        frontier_phi_67_pred_2 = _1835;
                    }
                    _1520 = frontier_phi_67_pred;
                    _1518 = frontier_phi_67_pred_1;
                    _1516 = frontier_phi_67_pred_2;
                    uint _1691 = _1690 + 1u;
                    if (_1691 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1687 = _1516;
                        _1688 = _1518;
                        _1689 = _1520;
                        _1690 = _1691;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1518;
                frontier_phi_49_50_ladder_1 = _1520;
                frontier_phi_49_50_ladder_2 = _1516;
            }
            else
            {
                frontier_phi_49_50_ladder = _1378;
                frontier_phi_49_50_ladder_1 = _1380;
                frontier_phi_49_50_ladder_2 = _1376;
            }
            _1515 = frontier_phi_49_50_ladder_2;
            _1517 = frontier_phi_49_50_ladder;
            _1519 = frontier_phi_49_50_ladder_1;
        }
        float _1524 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
        _1299 = ((_1515 * 0.039999999105930328369140625) * _1524) + _1180;
        _1301 = ((_1517 * 0.039999999105930328369140625) * _1524) + _1181;
        _1303 = ((_1519 * 0.039999999105930328369140625) * _1524) + _1182;
    }
    else
    {
        _1299 = _1180;
        _1301 = _1181;
        _1303 = _1182;
    }
    uint _1310 = (_1049 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1325 = ((cbMtdParam._m0[9u].x * _363.x) * cbInstanceData._m0[_1310].x) + ((_1299 + ((isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0))) * _810)) * cbPerFrame._m0[3u].x);
    float _1326 = ((cbMtdParam._m0[9u].y * _363.y) * cbInstanceData._m0[_1310].y) + ((_1301 + ((isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0))) * _810)) * cbPerFrame._m0[3u].x);
    float _1327 = ((cbMtdParam._m0[9u].z * _363.z) * cbInstanceData._m0[_1310].z) + ((_1303 + ((isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0))) * _810)) * cbPerFrame._m0[3u].x);
    uint _1331 = _1049 + 6u;
    float _1339 = _405 / cbSceneParam._m0[86u].x;
    float _1340 = _406 / cbSceneParam._m0[86u].y;
    vec4 _1354 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1339, _1340, (log2((isnan(cbSceneParam._m0[77u].w) ? _392 : (isnan(_392) ? cbSceneParam._m0[77u].w : min(_392, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1356 = _1354.x;
    float _1357 = _1354.y;
    float _1358 = _1354.z;
    float _1359 = _1354.w;
    float _1433;
    float _1435;
    float _1437;
    float _1439;
    if (_392 > cbSceneParam._m0[78u].w)
    {
        float _1395 = isnan(_392) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _392 : min(cbSceneParam._m0[80u].w, _392));
        float _1396 = _1395 / _392;
        float _1407 = _1396 * _246;
        float _1408 = _247 * _1396;
        float _1409 = (-0.0) - _1408;
        float _1410 = _1396 * _248;
        float _1412 = (cbSceneParam._m0[77u].w * _1409) / _1395;
        float _1413 = _1412 + cbSceneParam._m0[79u].w;
        float _1414 = cbSceneParam._m0[79u].w - _1408;
        float _1420 = sqrt(((_1407 * _1407) + (_1408 * _1408)) + (_1410 * _1410));
        float _1423 = (1.0 - (cbSceneParam._m0[77u].w / _1395)) * _1420;
        float _1429 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1431 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1623;
        if (abs((_1409 - _1412) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1623 = ((((_1413 > 0.0) ? exp2(_1429 * _1413) : (2.0 - exp2(_1431 * _1413))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1423;
        }
        else
        {
            float _1561 = 1.0 / cbSceneParam._m0[80u].x;
            float _1562 = isnan(_1414) ? _1413 : (isnan(_1413) ? _1414 : max(_1413, _1414));
            float _1563 = isnan(_1414) ? _1413 : (isnan(_1413) ? _1414 : min(_1413, _1414));
            float _1572 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : min(_1562, 0.0));
            float _1573 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : min(_1563, 0.0));
            _1623 = ((abs(_1420 / _1409) * cbSceneParam._m0[80u].y) * ((((_1572 - _1573) * 2.0) - ((exp2(_1429 * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)))) - exp2(_1429 * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))))) * _1561)) - ((exp2(_1431 * _1572) - exp2(_1431 * _1573)) * _1561))) + (_1423 * cbSceneParam._m0[80u].z);
        }
        vec4 _1625 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1339, _1340, 1.0), 0.0);
        float _1634 = exp2((_1623 * (-1.44269502162933349609375)) * (1.0 - _1625.w));
        float _1635 = log2(_1634);
        float _1651 = log2(_1359);
        _1433 = (exp2(_1651 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1635 * cbSceneParam._m0[78u].x)) * _1625.x) / cbSceneParam._m0[78u].x)) + _1356;
        _1435 = (exp2(_1651 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1635 * cbSceneParam._m0[78u].y)) * _1625.y) / cbSceneParam._m0[78u].y)) + _1357;
        _1437 = (exp2(_1651 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1635 * cbSceneParam._m0[78u].z)) * _1625.z) / cbSceneParam._m0[78u].z)) + _1358;
        _1439 = _1634 * _1359;
    }
    else
    {
        _1433 = _1356;
        _1435 = _1357;
        _1437 = _1358;
        _1439 = _1359;
    }
    float _1451 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1452 = _1451 == 3.0;
    float _1454 = log2(_1439);
    float _1461 = exp2(_1454 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)));
    float _1462 = exp2(_1454 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
    float _1463 = exp2(_1454 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    float _1472 = (_1451 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1472 * (_1452 ? _1461 : (_1461 + (cbSceneParam._m0[72u].w * _1433)));
    SV_Target.y = _1472 * (_1452 ? _1462 : (_1462 + (cbSceneParam._m0[72u].w * _1435)));
    SV_Target.z = _1472 * (_1452 ? _1463 : (_1463 + (cbSceneParam._m0[72u].w * _1437)));
    SV_Target.w = cbInstanceData._m0[_1331].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1331].w;
}


