#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _979;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _327 = cbMtdParam._m0[22u].y + _257;
    float _328 = cbMtdParam._m0[22u].z + _258;
    float _329 = cbMtdParam._m0[22u].w + _259;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_186, _187, _188));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_200, _201, _202));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _349 * _345;
    float _352 = (cbMtdParam._m0[19u].x * _343) * _349;
    float _354 = (cbMtdParam._m0[18u].w * _344) * _349;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_352 > 0.0)
    {
        _362 = (1.0 - _355) / _352;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _352;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    float _374 = (_350 > 0.0) ? (cbMtdParam._m0[15u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_355 + (-0.5)) + (_376 * _352)) / _387) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_356 + (-0.5)) + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    vec4 _442 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = _442.x;
    vec4 _456 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _464 = (_456.x * 2.0) + (-1.0);
    float _466 = (_456.y * 2.0) + (-1.0);
    float _467 = dot(vec2(_464, _466), vec2(_464, _466));
    float _3077 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))));
    float _473 = _456.z * _284;
    float _476 = fma(_472, _193, fma(_466, _200, _464 * _186));
    float _479 = fma(_472, _194, fma(_466, _201, _464 * _187));
    float _482 = fma(_472, _195, fma(_466, _202, _464 * _188));
    float _486 = inversesqrt(dot(vec3(_476, _479, _482), vec3(_476, _479, _482)));
    float _487 = _486 * _476;
    float _488 = _486 * _479;
    float _489 = _486 * _482;
    float _3088 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _490 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
    float _3099 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _3110 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3121 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3132 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _494 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
    float _510 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _514 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _515 = _257 * _514;
    float _516 = _258 * _514;
    float _517 = _259 * _514;
    float _523 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _524 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _545 = fma(_489, cbSceneParam._m0[5u].z, fma(_488, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _487));
    float _548 = fma(_489, cbSceneParam._m0[6u].z, fma(_488, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _487));
    float _551 = fma(_489, cbSceneParam._m0[7u].z, fma(_488, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _487));
    uint _564 = uint(roundEven(NORMAL.w)) * 13u;
    uint _566 = _564 + 9u;
    uint _567 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _573 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0)))) * cbInstanceData._m0[_567].x;
    float _574 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0)))) * cbInstanceData._m0[_567].y;
    float _575 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0)))) * cbInstanceData._m0[_567].z;
    float _3143 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _576 = isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0));
    float _3154 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _577 = isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0));
    float _3165 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _578 = isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0));
    float _579 = 1.0 - _494;
    float _580 = _576 * _579;
    float _581 = _577 * _579;
    float _582 = _578 * _579;
    float _587 = (_576 + (-0.039999999105930328369140625)) * _494;
    float _588 = (_577 + (-0.039999999105930328369140625)) * _494;
    float _589 = (_578 + (-0.039999999105930328369140625)) * _494;
    float _590 = _587 + 0.039999999105930328369140625;
    float _592 = _588 + 0.039999999105930328369140625;
    float _593 = _589 + 0.039999999105930328369140625;
    vec4 _602 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _523, cbSceneParam._m0[86u].y * _524));
    float _605 = _602.x * TEXCOORD.z;
    float _606 = dot(vec3(_487, _488, _489), vec3(_515, _516, _517));
    float _609 = _606 * 2.0;
    float _613 = (_609 * _487) - _515;
    float _614 = (_609 * _488) - _516;
    float _615 = (_609 * _489) - _517;
    float _619 = abs(dot(vec3(_515, _516, _517), vec3(_487, _488, _489)));
    float _3176 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _621 = sqrt(_490);
    float _634 = exp2((_621 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_621 * 3.0));
    float _640 = (1.0 - _634) * ((_621 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _641 = _634 * _621;
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _978;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _705 = fma(_677, cbModelParam._m0[26u].z, fma(_673, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _669));
        float _709 = fma(_677, cbModelParam._m0[27u].z, fma(_673, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _669));
        float _713 = fma(_677, cbModelParam._m0[28u].z, fma(_673, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _669));
        float _736 = _669 + _487;
        float _737 = _673 + _488;
        float _738 = _677 + _489;
        float _748 = fma(_738, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _736)) - _705;
        float _749 = fma(_738, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _736)) - _709;
        float _750 = fma(_738, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _736)) - _713;
        float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
        float _767 = ((_754 * _748) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_705 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _768 = ((_754 * _749) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_709 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _769 = ((_754 * _750) / cbModelParam._m0[34u].z) + ((((((_713 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _772 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_767, _768, _769), 0.0);
        float _806 = exp2((_772.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_772.x + (-0.5));
        float _808 = _806 * (_772.y + (-0.5));
        float _809 = _806 * (_772.z + (-0.5));
        float _816 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _817 = _816 * (_779.x + (-0.5));
        float _818 = _816 * (_779.y + (-0.5));
        float _819 = _816 * (_779.z + (-0.5));
        float _826 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_786.x + (-0.5));
        float _828 = _826 * (_786.y + (-0.5));
        float _829 = _826 * (_786.z + (-0.5));
        float _836 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_793.x + (-0.5));
        float _838 = _836 * (_793.y + (-0.5));
        float _839 = _836 * (_793.z + (-0.5));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _842 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _843 = _807 * 0.5;
        float _844 = _817 * 0.5;
        float _845 = _827 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _860 = (dot(vec3(_487, _488, _489), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3202 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _870 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3213 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _872 = _871 * 2.0;
        float _876 = (1.0 - _871) / (_871 + 1.0);
        float _3224 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
        float _886 = ((((1.0 - _877) * (_872 + 2.0)) * exp2(log2(isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) * (_872 + 1.0))) + _877) * _840;
        float _887 = _808 * 0.5;
        float _888 = _818 * 0.5;
        float _889 = _828 * 0.5;
        float _890 = dot(vec3(_887, _888, _889), vec3(_887, _888, _889));
        float _895 = (_890 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_890);
        float _903 = (dot(vec3(_487, _488, _489), vec3(_895 * _887, _895 * _888, _895 * _889)) + 1.0) * 0.5;
        float _3235 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _912 = sqrt(((_888 * _888) + (_887 * _887)) + (_889 * _889)) / (_841 + 9.9999997473787516355514526367188e-06);
        float _3246 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _914 = _913 * 2.0;
        float _918 = (1.0 - _913) / (_913 + 1.0);
        float _3257 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _919 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
        float _928 = ((((1.0 - _919) * (_914 + 2.0)) * exp2(log2(isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0))) * (_914 + 1.0))) + _919) * _841;
        float _929 = _809 * 0.5;
        float _930 = _819 * 0.5;
        float _931 = _829 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _945 = (dot(vec3(_487, _488, _489), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _954 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_842 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3290 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_956 + 1.0))) + _961) * _842;
        _978 = _809;
        _980 = _808;
        _981 = _807;
        _982 = _819;
        _983 = _818;
        _984 = _817;
        _985 = _829;
        _986 = _828;
        _987 = _827;
        _988 = _842;
        _989 = _841;
        _990 = _840;
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0)));
        _992 = cbModelParam._m0[36u].z * (isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0)));
        _993 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
    }
    else
    {
        _978 = _979;
        _980 = _979;
        _981 = _979;
        _982 = _979;
        _983 = _979;
        _984 = _979;
        _985 = _979;
        _986 = _979;
        _987 = _979;
        _988 = _979;
        _989 = _979;
        _990 = _979;
        _991 = 0.0;
        _992 = 0.0;
        _993 = 0.0;
    }
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1019 = fma(_677, cbModelParam._m0[30u].z, fma(_673, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _669));
        float _1023 = fma(_677, cbModelParam._m0[31u].z, fma(_673, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _669));
        float _1027 = fma(_677, cbModelParam._m0[32u].z, fma(_673, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _669));
        float _1050 = _669 + _487;
        float _1051 = _673 + _488;
        float _1052 = _677 + _489;
        float _1062 = fma(_1052, cbModelParam._m0[30u].z, fma(_1051, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050)) - _1019;
        float _1063 = fma(_1052, cbModelParam._m0[31u].z, fma(_1051, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050)) - _1023;
        float _1064 = fma(_1052, cbModelParam._m0[32u].z, fma(_1051, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050)) - _1027;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1019 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1023 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[35u].z) + ((((((_1027 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1118 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1085.x + (-0.5));
        float _1120 = _1118 * (_1085.y + (-0.5));
        float _1121 = _1118 * (_1085.z + (-0.5));
        float _1128 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1092.x + (-0.5));
        float _1130 = _1128 * (_1092.y + (-0.5));
        float _1131 = _1128 * (_1092.z + (-0.5));
        float _1138 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1099.x + (-0.5));
        float _1140 = _1138 * (_1099.y + (-0.5));
        float _1141 = _1138 * (_1099.z + (-0.5));
        float _1148 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1106.x + (-0.5));
        float _1150 = _1148 * (_1106.y + (-0.5));
        float _1151 = _1148 * (_1106.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_487, _488, _489), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3331 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3342 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3353 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))) * (_1182 + 1.0))) + _1187) * _1152;
        float _1197 = _1120 * 0.5;
        float _1198 = _1130 * 0.5;
        float _1199 = _1140 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_487, _488, _489), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3364 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3375 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3386 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))) * (_1224 + 1.0))) + _1229) * _1153;
        float _1239 = _1121 * 0.5;
        float _1240 = _1131 * 0.5;
        float _1241 = _1141 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_487, _488, _489), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3419 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1266 + 1.0))) + _1271) * _1154;
        _1288 = _1121;
        _1289 = _1120;
        _1290 = _1119;
        _1291 = _1131;
        _1292 = _1130;
        _1293 = _1129;
        _1294 = _1141;
        _1295 = _1140;
        _1296 = _1139;
        _1297 = _1154;
        _1298 = _1153;
        _1299 = _1152;
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
    }
    else
    {
        _1288 = _979;
        _1289 = _979;
        _1290 = _979;
        _1291 = _979;
        _1292 = _979;
        _1293 = _979;
        _1294 = _979;
        _1295 = _979;
        _1296 = _979;
        _1297 = _979;
        _1298 = _979;
        _1299 = _979;
        _1300 = 0.0;
        _1301 = 0.0;
        _1302 = 0.0;
    }
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _991)) + _991;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _992)) + _992;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _993)) + _993;
    float _1335 = fma(_1314, cbSceneParam._m0[89u].z, fma(_1313, cbSceneParam._m0[89u].y, _1312 * cbSceneParam._m0[89u].x));
    float _1338 = fma(_1314, cbSceneParam._m0[90u].z, fma(_1313, cbSceneParam._m0[90u].y, _1312 * cbSceneParam._m0[90u].x));
    float _1341 = fma(_1314, cbSceneParam._m0[91u].z, fma(_1313, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1312));
    float _1356 = _613 * 0.5;
    float _1357 = _614 * 0.5;
    float _1358 = _615 * 0.5;
    float _1359 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1362 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1365 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1399;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1372 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_978, _982, _985, _988));
        float _1376 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_980, _983, _986, _989));
        float _1380 = dot(vec4(_1356, _1357, _1358, 1.0), vec4(_981, _984, _987, _990));
        float _1387 = dot(vec4(cbModelParam._m0[39u]), vec4(_1356, _1357, _1358, 1.0));
        _1399 = dot(vec3(isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1387) ? 0.0 : (isnan(0.0) ? _1387 : max(0.0, _1387))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1399 = 1.0;
    }
    float _1410;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1401 = dot(vec4(cbModelParam._m0[40u]), vec4(_1356, _1357, _1358, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)), isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1401) ? 0.0 : (isnan(0.0) ? _1401 : max(0.0, _1401))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1414 = (_1410 * cbModelParam._m0[1u].x) + (_1399 * (1.0 - cbModelParam._m0[1u].x));
    float _1424 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _490);
    float _1425 = isnan(_1424) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1424 : min(cbModelParam._m0[25u].z, _1424));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_677, cbModelParam._m0[13u].z, fma(_673, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _669)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_677, cbModelParam._m0[14u].z, fma(_673, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _669)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_677, cbModelParam._m0[15u].z, fma(_673, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _669)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_615, cbModelParam._m0[13u].z, fma(_614, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613));
        float _1487 = fma(_615, cbModelParam._m0[14u].z, fma(_614, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613));
        float _1490 = fma(_615, cbModelParam._m0[15u].z, fma(_614, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1518 = frontier_phi_22_20_ladder;
        }
        float _1877;
        if (_1487 > 0.0)
        {
            _1877 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1877 = frontier_phi_31_27_ladder;
        }
        float _2193;
        if (_1490 > 0.0)
        {
            _2193 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2193 = frontier_phi_45_38_ladder;
        }
        float _2195 = isnan(_1877) ? _1518 : (isnan(_1518) ? _1877 : min(_1518, _1877));
        float _2196 = isnan(_2193) ? _2195 : (isnan(_2195) ? _2193 : min(_2195, _2193));
        float _2200 = (_2196 * _1484) + _1473;
        float _2201 = (_2196 * _1487) + _1477;
        float _2202 = (_2196 * _1490) + _1481;
        float _2203 = _2196 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2203;
        float _2206 = _2203 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2202 > _2206) || ((_2202 < _2204) || ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 < _2204) || (_2200 > _2206))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2202, cbModelParam._m0[9u].z, fma(_2201, cbModelParam._m0[9u].y, _2200 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2202, cbModelParam._m0[10u].z, fma(_2201, cbModelParam._m0[10u].y, _2200 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2202, cbModelParam._m0[11u].z, fma(_2201, cbModelParam._m0[11u].y, _2200 * cbModelParam._m0[11u].x))), _1425);
            frontier_phi_21_45_ladder = _2328.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2328.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2328.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_21_45_ladder_2;
        _1508 = frontier_phi_21_45_ladder_1;
        _1510 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_613, _614, _615), _1425);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _490);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1604;
    float _1606;
    float _1608;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1568 = fma(_677, cbModelParam._m0[21u].z, fma(_673, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _669)) + cbModelParam._m0[21u].w;
        float _1572 = fma(_677, cbModelParam._m0[22u].z, fma(_673, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _669)) + cbModelParam._m0[22u].w;
        float _1576 = fma(_677, cbModelParam._m0[23u].z, fma(_673, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _669)) + cbModelParam._m0[23u].w;
        float _1579 = fma(_615, cbModelParam._m0[21u].z, fma(_614, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613));
        float _1582 = fma(_615, cbModelParam._m0[22u].z, fma(_614, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613));
        float _1585 = fma(_615, cbModelParam._m0[23u].z, fma(_614, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613));
        float _1882;
        if (_1579 > 0.0)
        {
            _1882 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1882 = frontier_phi_33_29_ladder;
        }
        float _2219;
        if (_1582 > 0.0)
        {
            _2219 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2219 = frontier_phi_47_40_ladder;
        }
        float _2388;
        if (_1585 > 0.0)
        {
            _2388 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2388 = frontier_phi_61_56_ladder;
        }
        float _2390 = isnan(_2219) ? _1882 : (isnan(_1882) ? _2219 : min(_1882, _2219));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1579) + _1568;
        float _2396 = (_2391 * _1582) + _1572;
        float _2397 = (_2391 * _1585) + _1576;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2398;
        float _2401 = _2398 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2397 > _2401) || ((_2397 < _2399) || ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 < _2399) || (_2395 > _2401))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2397, cbModelParam._m0[17u].z, fma(_2396, cbModelParam._m0[17u].y, _2395 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2397, cbModelParam._m0[18u].z, fma(_2396, cbModelParam._m0[18u].y, _2395 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2397, cbModelParam._m0[19u].z, fma(_2396, cbModelParam._m0[19u].y, _2395 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_30_61_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1604 = frontier_phi_30_61_ladder_2;
        _1606 = frontier_phi_30_61_ladder_1;
        _1608 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1588 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_613, _614, _615), _1515);
        _1604 = _1588.x * cbModelParam._m0[1u].z;
        _1606 = _1588.y * cbModelParam._m0[1u].z;
        _1608 = _1588.z * cbModelParam._m0[1u].z;
    }
    float _1621 = (((_640 * _590) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1604 - _1506)) + _1506);
    float _1623 = (((_640 * _592) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1606 - _1508)) + _1508);
    float _1625 = (((_640 * _593) + _641) * _605) * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1628 = fma(_1625, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1621 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1625, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1621 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1625, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, _1621 * cbSceneParam._m0[91u].x));
    uvec4 _1644 = floatBitsToUint(cbInstanceData._m0[_564 + 5u]);
    uint _1646 = _1644.x * 14u;
    uint _1647 = _1646 + 13u;
    float _1652 = _605 + (-1.0);
    float _1655 = (cbLight._m0[_1647].x * _1652) + 1.0;
    float _1656 = (cbLight._m0[_1647].y * _1652) + 1.0;
    uint _1657 = _1646 + 5u;
    float _1663 = isnan(1.0) ? _1656 : (isnan(_1656) ? 1.0 : min(_1656, 1.0));
    uint _1667 = _1646 + 4u;
    float _1673 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    uint _1677 = _1646 | 1u;
    float _1688 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_487, _488, _489));
    float _1691 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_487, _488, _489));
    float _3555 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
    float _3566 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1696 = (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * 0.3183098733425140380859375;
    float _1698 = (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * 0.3183098733425140380859375;
    float _1705 = ((cbLight._m0[_1657].x * _1663) * _1698) + ((cbLight._m0[_1667].x * _1673) * _1696);
    float _1706 = ((_1663 * cbLight._m0[_1657].y) * _1698) + ((_1673 * cbLight._m0[_1667].y) * _1696);
    float _1707 = ((_1663 * cbLight._m0[_1657].z) * _1698) + ((_1673 * cbLight._m0[_1667].z) * _1696);
    uint _1709 = _1646 + 8u;
    float _1722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1646].w)) * _490) * 0.949999988079071044921875);
    float _1723 = _1722 * _1722;
    float _1724 = cbLight._m0[_1646].x + _515;
    float _1725 = cbLight._m0[_1646].y + _516;
    float _1726 = cbLight._m0[_1646].z + _517;
    float _1730 = inversesqrt(dot(vec3(_1724, _1725, _1726), vec3(_1724, _1725, _1726)));
    float _1731 = _1730 * _1724;
    float _1732 = _1730 * _1725;
    float _1733 = _1730 * _1726;
    float _1734 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1646].xyz));
    float _3577 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
    float _1737 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
    float _3588 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _1738 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _1739 = dot(vec3(_487, _488, _489), vec3(_1731, _1732, _1733));
    float _3599 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1742 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _1743 = dot(vec3(cbLight._m0[_1646].xyz), vec3(_1731, _1732, _1733));
    float _3610 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1747 = _1723 * _1723;
    float _1751 = ((_1742 * _1742) * (_1747 + (-1.0))) + 1.0;
    float _1759 = exp2(log2(1.0 - (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * 5.0);
    float _1760 = 0.959999978542327880859375 - _587;
    float _1762 = 0.959999978542327880859375 - _588;
    float _1763 = 0.959999978542327880859375 - _589;
    float _1770 = 1.0 - _1723;
    float _1781 = (0.5 / (((_1738 * ((_1737 * _1770) + _1723)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1770) + _1723) * _1737))) * _1737;
    float _3621 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1747 / ((_1751 * _1751) * 3.141590118408203125));
    uint _1794 = _1646 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1677].w)) * _490) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1677].x + _515;
    float _1808 = cbLight._m0[_1677].y + _516;
    float _1809 = cbLight._m0[_1677].z + _517;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_487, _488, _489), vec3(cbLight._m0[_1677].xyz));
    float _3632 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _1821 = dot(vec3(_487, _488, _489), vec3(_1814, _1815, _1816));
    float _3643 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1677].xyz), vec3(_1814, _1815, _1816));
    float _3654 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1840 = exp2(log2(1.0 - (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * 5.0);
    float _1847 = 1.0 - _1806;
    float _1857 = (0.5 / (((_1738 * ((_1820 * _1847) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1738 * _1847) + _1806) * _1820))) * _1820;
    float _3665 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1869 = (((((_1840 * _1760) + _590) * cbLight._m0[_1794].x) * _1859) * _1663) + (((((_1759 * _1760) + _590) * cbLight._m0[_1709].x) * _1783) * _1673);
    float _1870 = (((((_1840 * _1762) + _592) * cbLight._m0[_1794].y) * _1859) * _1663) + (((((_1759 * _1762) + _592) * cbLight._m0[_1709].y) * _1783) * _1673);
    float _1871 = (((((_1840 * _1763) + _593) * cbLight._m0[_1794].z) * _1859) * _1663) + (((((_1759 * _1763) + _593) * cbLight._m0[_1709].z) * _1783) * _1673);
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    float _1994;
    float _1996;
    if (_1644.y == 0u)
    {
        float _1926 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1926;
        float _1928 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1926;
        float _1929 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1926;
        uvec4 _1941 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1942 = _1941.x;
        uint _1953 = uint((float(_1941.y) * floor(float(uint(cbSceneParam._m0[85u].y * _524) / _1942))) + floor(float(uint(cbSceneParam._m0[85u].x * _523) / _1942)));
        float _1963 = (log2(_1929 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1964 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        uint _1967 = uint(isnan(14.0) ? _1964 : (isnan(_1964) ? 14.0 : min(_1964, 14.0)));
        uvec4 _1972 = texelFetch(g_lightClusterGridBuffer, int(((_1967 << 2u) + (_1953 << 6u)) >> 2u));
        uint _1973 = _1972.x;
        uint _1974 = _1941.z;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        float _2088;
        float _2090;
        if (((((1u << ((_1974 >> 4u) & 15u)) + 4294967295u) & _1973) == 0u) || ((_1974 & 240u) == 0u))
        {
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
            _2088 = 0.0;
            _2090 = 0.0;
        }
        else
        {
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2089;
            float _2091;
            float _2256 = 0.0;
            float _2257 = 0.0;
            float _2258 = 0.0;
            float _2259 = 0.0;
            float _2260 = 0.0;
            float _2261 = 0.0;
            uint _2262 = 0u;
            uint _2271;
            bool _2272;
            for (;;)
            {
                _2271 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2262 << 2u)) >> 2u)).x;
                _2272 = _2271 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2272)
                {
                    frontier_phi_58_pred = _2257;
                    frontier_phi_58_pred_1 = _2261;
                    frontier_phi_58_pred_2 = _2260;
                    frontier_phi_58_pred_3 = _2259;
                    frontier_phi_58_pred_4 = _2258;
                    frontier_phi_58_pred_5 = _2256;
                }
                else
                {
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    uint _2437;
                    _2431 = _2256;
                    _2432 = _2257;
                    _2433 = _2258;
                    _2434 = _2259;
                    _2435 = _2260;
                    _2436 = _2261;
                    _2437 = _2271;
                    float _2337;
                    float _2338;
                    float _2339;
                    float _2340;
                    float _2341;
                    float _2342;
                    for (;;)
                    {
                        uint _2441 = uint(findLSB(_2437)) + (_2262 << 5u);
                        uint _2438 = (_2437 + 4294967295u) & _2437;
                        uint _2443 = _2441 * 48u;
                        vec4 _2457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2443)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 3u)).x));
                        uint _2463 = (_2441 * 48u) + 4u;
                        vec4 _2476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2463)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2463 + 3u)).x));
                        uint _2482 = (_2441 * 48u) + 8u;
                        vec3 _2493 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2482)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2482 + 2u)).x));
                        float _2497 = _2457.x - _1927;
                        float _2498 = _2457.y - _1928;
                        float _2499 = _2457.z - _1929;
                        float _2500 = dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499));
                        float _2503 = inversesqrt(_2500);
                        float _2504 = _2503 * _2497;
                        float _2505 = _2503 * _2498;
                        float _2506 = _2503 * _2499;
                        float _2507 = dot(vec3(_545, _548, _551), vec3(_2504, _2505, _2506));
                        float _2512 = 1.0 - (_2500 * _2457.w);
                        float _3686 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
                        float _2513 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                        float _2514 = sqrt(_2500) * _2476.w;
                        float _2517 = 1.39999997615814208984375 / (_2514 + 1.39999997615814208984375);
                        float _2518 = _2517 * _2517;
                        float _2521 = ((1.0 - _2518) * _2507) + _2518;
                        float _2524 = _2514 * _2514;
                        float _2528 = ((isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0))) * _2513) / ((_2524 * 0.699999988079071044921875) + 1.0);
                        float _2532 = (-0.0) - _1927;
                        float _2533 = (-0.0) - _1928;
                        float _2534 = (-0.0) - _1929;
                        float _2538 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
                        float _2539 = _2538 * _2532;
                        float _2540 = _2538 * _2533;
                        float _2541 = _2538 * _2534;
                        float _2549 = exp2(log2(1.0 / ((_2524 * 3.5) + 5.0)) * 0.25);
                        float _2550 = 1.0 - _621;
                        float _2557 = sqrt(1.0 - ((1.0 - (_2550 * _2550)) * (1.0 - (_2549 * _2549))));
                        float _2558 = _2557 * _2557;
                        float _2559 = _2558 * _2558;
                        float _2560 = _2539 + _2504;
                        float _2561 = _2540 + _2505;
                        float _2562 = _2541 + _2506;
                        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
                        float _2570 = dot(vec3(_545, _548, _551), vec3(_2539, _2540, _2541));
                        float _3702 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2573 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2574 = dot(vec3(_545, _548, _551), vec3(_2566 * _2560, _2566 * _2561, _2566 * _2562));
                        float _3713 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
                        float _2577 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
                        float _2581 = ((_2577 * _2577) * (_2559 + (-1.0))) + 1.0;
                        float _2582 = _2517 * _2558;
                        float _2583 = _2582 * _2582;
                        float _2586 = ((1.0 - _2583) * _2507) + _2583;
                        float _3724 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
                        float _2587 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
                        float _2588 = 1.0 - _2558;
                        float _2598 = (0.5 / (((_2587 * ((_2573 * _2588) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2588) + _2558) * _2573))) * _2587;
                        float _3735 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
                        float _2609 = (((_2559 * 3.1415927410125732421875) * (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0)))) / ((_2581 * _2581) * ((_2524 * 2.1991131305694580078125) + 3.141590118408203125))) * _2513;
                        _2340 = (_2528 * _2476.x) + _2434;
                        _2341 = (_2528 * _2476.y) + _2435;
                        _2342 = (_2528 * _2476.z) + _2436;
                        _2337 = (_2609 * _2493.x) + _2431;
                        _2338 = (_2609 * _2493.y) + _2432;
                        _2339 = (_2609 * _2493.z) + _2433;
                        if (_2438 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2431 = _2337;
                            _2432 = _2338;
                            _2433 = _2339;
                            _2434 = _2340;
                            _2435 = _2341;
                            _2436 = _2342;
                            _2437 = _2438;
                        }
                    }
                    frontier_phi_58_pred = _2338;
                    frontier_phi_58_pred_1 = _2342;
                    frontier_phi_58_pred_2 = _2341;
                    frontier_phi_58_pred_3 = _2340;
                    frontier_phi_58_pred_4 = _2339;
                    frontier_phi_58_pred_5 = _2337;
                }
                _2083 = frontier_phi_58_pred;
                _2091 = frontier_phi_58_pred_1;
                _2089 = frontier_phi_58_pred_2;
                _2087 = frontier_phi_58_pred_3;
                _2085 = frontier_phi_58_pred_4;
                _2081 = frontier_phi_58_pred_5;
                uint _2263 = _2262 + 1u;
                if (_2263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2256 = _2081;
                    _2257 = _2083;
                    _2258 = _2085;
                    _2259 = _2087;
                    _2260 = _2089;
                    _2261 = _2091;
                    _2262 = _2263;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
            _2088 = _2089;
            _2090 = _2091;
        }
        uvec4 _2094 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2095 = _2094.z;
        uint _2097 = (_2095 >> 8u) & 15u;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        float _2232;
        float _2234;
        if (((4294967295u << _2097) & _1973) == 0u)
        {
            _2224 = _2080;
            _2226 = _2082;
            _2228 = _2084;
            _2230 = _2086;
            _2232 = _2088;
            _2234 = _2090;
        }
        else
        {
            float _2249 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
            float _2250 = _2249 * _1927;
            float _2251 = _2249 * _1928;
            float _2252 = _2249 * _1929;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2097 < ((_2095 >> 12u) & 15u))
            {
                float _2225;
                float _2227;
                float _2229;
                float _2231;
                float _2233;
                float _2235;
                float _2414 = _2080;
                float _2415 = _2082;
                float _2416 = _2084;
                float _2417 = _2086;
                float _2418 = _2088;
                float _2419 = _2090;
                uint _2420 = _2097;
                uint _2429;
                bool _2430;
                for (;;)
                {
                    _2429 = texelFetch(g_lightClassification, int((((_1967 << 5u) + (_1953 << 9u)) + (_2420 << 2u)) >> 2u)).x;
                    _2430 = _2429 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2430)
                    {
                        frontier_phi_67_pred = _2419;
                        frontier_phi_67_pred_1 = _2418;
                        frontier_phi_67_pred_2 = _2417;
                        frontier_phi_67_pred_3 = _2416;
                        frontier_phi_67_pred_4 = _2415;
                        frontier_phi_67_pred_5 = _2414;
                    }
                    else
                    {
                        float _2635;
                        float _2636;
                        float _2637;
                        float _2638;
                        float _2639;
                        float _2640;
                        float _2929;
                        float _2930;
                        float _2931;
                        float _2932;
                        float _2933;
                        float _2934;
                        float _2648 = _2414;
                        float _2649 = _2415;
                        float _2650 = _2416;
                        float _2651 = _2417;
                        float _2652 = _2418;
                        float _2653 = _2419;
                        uint _2654 = _2429;
                        uint _2655;
                        vec4 _2680;
                        float _2681;
                        vec4 _2696;
                        vec3 _2708;
                        vec4 _2723;
                        vec4 _2739;
                        float _2785;
                        bool _2786;
                        for (;;)
                        {
                            uint _2665 = ((_2420 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2654));
                            _2655 = (_2654 + 4294967295u) & _2654;
                            uint _2667 = _2665 * 40u;
                            _2680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2667 + 3u)).x));
                            _2681 = _2680.w;
                            uint _2683 = (_2665 * 40u) + 4u;
                            _2696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2683 + 3u)).x));
                            uint _2698 = (_2665 * 40u) + 8u;
                            _2708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2698 + 2u)).x));
                            uint _2710 = (_2665 * 40u) + 16u;
                            _2723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2710 + 3u)).x));
                            uint _2726 = (_2665 * 40u) + 20u;
                            _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            uint _2741 = (_2665 * 40u) + 24u;
                            vec4 _2754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2741 + 3u)).x));
                            uint _2760 = (_2665 * 40u) + 28u;
                            vec4 _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            _2785 = fma(_1929, _2773.z, fma(_1928, _2773.y, _2773.x * _1927)) + _2773.w;
                            _2786 = !((fma(_1929, _2754.z, fma(_1928, _2754.y, _2754.x * _1927)) + _2754.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2786)
                            {
                                float _2813 = _2680.x - _1927;
                                float _2814 = _2680.y - _1928;
                                float _2815 = _2680.z - _1929;
                                float _2816 = dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815));
                                float _2819 = inversesqrt(_2816);
                                float _2820 = _2819 * _2813;
                                float _2821 = _2819 * _2814;
                                float _2822 = _2819 * _2815;
                                float _2826 = 1.0 - (_2816 / (_2681 * _2681));
                                float _3746 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                                float _2827 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                                float _2831 = sqrt(_2816) * _2696.w;
                                float _2833 = 1.39999997615814208984375 / (_2831 + 1.39999997615814208984375);
                                float _2834 = _2833 * _2833;
                                float _2837 = ((1.0 - _2834) * dot(vec3(_2820, _2821, _2822), vec3(_545, _548, _551))) + _2834;
                                float _2840 = _2831 * _2831;
                                float _2844 = (fma(_1929, _2723.z, fma(_1928, _2723.y, _2723.x * _1927)) + _2723.w) / _2785;
                                float _2845 = (fma(_1929, _2739.z, fma(_1928, _2739.y, _2739.x * _1927)) + _2739.w) / _2785;
                                float _2849 = 1.0 - dot(vec2(_2844, _2845), vec2(_2844, _2845));
                                float _3762 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                                float _2850 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                                float _2851 = _2850 * (((isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))) * _2827) / ((_2840 * 0.699999988079071044921875) + 1.0));
                                float _2863 = exp2(log2(1.0 / ((_2840 * 3.5) + 5.0)) * 0.25);
                                float _2864 = 1.0 - _621;
                                float _2871 = sqrt(1.0 - ((1.0 - (_2864 * _2864)) * (1.0 - (_2863 * _2863))));
                                float _2872 = _2871 * _2871;
                                float _2873 = _2872 * _2872;
                                float _2874 = _2820 - _2250;
                                float _2875 = _2821 - _2251;
                                float _2876 = _2822 - _2252;
                                float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
                                float _2884 = dot(vec3(_545, _548, _551), vec3((-0.0) - _2250, (-0.0) - _2251, (-0.0) - _2252));
                                float _3773 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                                float _2887 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
                                float _2888 = dot(vec3(_545, _548, _551), vec3(_2880 * _2874, _2880 * _2875, _2880 * _2876));
                                float _3784 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                                float _2891 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
                                float _2895 = ((_2891 * _2891) * (_2873 + (-1.0))) + 1.0;
                                float _2896 = _2833 * _2872;
                                float _2897 = _2896 * _2896;
                                float _2903 = ((1.0 - _2897) * dot(vec3(_545, _548, _551), vec3(_2820, _2821, _2822))) + _2897;
                                float _3795 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                                float _2904 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
                                float _2905 = 1.0 - _2872;
                                float _2915 = (0.5 / (((_2904 * ((_2887 * _2905) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2904 * _2905) + _2872) * _2887))) * _2904;
                                float _3806 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2925 = (_2850 * _2827) * (((_2873 * 3.1415927410125732421875) * (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) / ((_2895 * _2895) * ((_2840 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2851 * _2696.z;
                                frontier_phi_73_pred_1 = _2851 * _2696.y;
                                frontier_phi_73_pred_2 = _2851 * _2696.x;
                                frontier_phi_73_pred_3 = _2925 * _2708.z;
                                frontier_phi_73_pred_4 = _2925 * _2708.y;
                                frontier_phi_73_pred_5 = _2925 * _2708.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2934 = frontier_phi_73_pred;
                            _2933 = frontier_phi_73_pred_1;
                            _2932 = frontier_phi_73_pred_2;
                            _2931 = frontier_phi_73_pred_3;
                            _2930 = frontier_phi_73_pred_4;
                            _2929 = frontier_phi_73_pred_5;
                            _2638 = _2932 + _2651;
                            _2639 = _2933 + _2652;
                            _2640 = _2934 + _2653;
                            _2635 = _2929 + _2648;
                            _2636 = _2930 + _2649;
                            _2637 = _2931 + _2650;
                            if (_2655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2637;
                                _2651 = _2638;
                                _2652 = _2639;
                                _2653 = _2640;
                                _2654 = _2655;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2640;
                        frontier_phi_67_pred_1 = _2639;
                        frontier_phi_67_pred_2 = _2638;
                        frontier_phi_67_pred_3 = _2637;
                        frontier_phi_67_pred_4 = _2636;
                        frontier_phi_67_pred_5 = _2635;
                    }
                    _2235 = frontier_phi_67_pred;
                    _2233 = frontier_phi_67_pred_1;
                    _2231 = frontier_phi_67_pred_2;
                    _2229 = frontier_phi_67_pred_3;
                    _2227 = frontier_phi_67_pred_4;
                    _2225 = frontier_phi_67_pred_5;
                    uint _2421 = _2420 + 1u;
                    if (_2421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2414 = _2225;
                        _2415 = _2227;
                        _2416 = _2229;
                        _2417 = _2231;
                        _2418 = _2233;
                        _2419 = _2235;
                        _2420 = _2421;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2231;
                frontier_phi_49_50_ladder_1 = _2235;
                frontier_phi_49_50_ladder_2 = _2233;
                frontier_phi_49_50_ladder_3 = _2229;
                frontier_phi_49_50_ladder_4 = _2227;
                frontier_phi_49_50_ladder_5 = _2225;
            }
            else
            {
                frontier_phi_49_50_ladder = _2086;
                frontier_phi_49_50_ladder_1 = _2090;
                frontier_phi_49_50_ladder_2 = _2088;
                frontier_phi_49_50_ladder_3 = _2084;
                frontier_phi_49_50_ladder_4 = _2082;
                frontier_phi_49_50_ladder_5 = _2080;
            }
            _2224 = frontier_phi_49_50_ladder_5;
            _2226 = frontier_phi_49_50_ladder_4;
            _2228 = frontier_phi_49_50_ladder_3;
            _2230 = frontier_phi_49_50_ladder;
            _2232 = frontier_phi_49_50_ladder_2;
            _2234 = frontier_phi_49_50_ladder_1;
        }
        float _2239 = isnan(1.0) ? _605 : (isnan(_605) ? 1.0 : min(_605, 1.0));
        _1986 = (_2239 * _2230) + _1705;
        _1988 = (_2239 * _2232) + _1706;
        _1990 = (_2239 * _2234) + _1707;
        _1992 = ((_2224 * _590) * _2239) + _1869;
        _1994 = ((_2226 * _592) * _2239) + _1870;
        _1996 = ((_2228 * _593) * _2239) + _1871;
    }
    else
    {
        _1986 = _1705;
        _1988 = _1706;
        _1990 = _1707;
        _1992 = _1869;
        _1994 = _1870;
        _1996 = _1871;
    }
    uint _2002 = _566 + uint(cbMatDynParam._m0[0u].w);
    float _3822 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3833 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3844 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _2027 = (((isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (_1986 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _605))) + ((_1992 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + (((_414 - (_414 * _284)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2002].x);
    float _2029 = ((((_415 - (_415 * _284)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2002].y) + ((_1994 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1988 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _605)));
    float _2031 = (((cbMtdParam._m0[9u].z * (_416 - (_416 * _284))) * cbInstanceData._m0[_2002].z) + ((_1996 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1414)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1990 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _605)));
    uint _2035 = _564 + 6u;
    float _2043 = _523 / cbSceneParam._m0[86u].x;
    float _2044 = _524 / cbSceneParam._m0[86u].y;
    vec4 _2058 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2043, _2044, (log2((isnan(cbSceneParam._m0[77u].w) ? _510 : (isnan(_510) ? cbSceneParam._m0[77u].w : min(_510, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2060 = _2058.x;
    float _2061 = _2058.y;
    float _2062 = _2058.z;
    float _2063 = _2058.w;
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    if (_510 > cbSceneParam._m0[78u].w)
    {
        float _2105 = isnan(_510) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _510 : min(cbSceneParam._m0[80u].w, _510));
        float _2106 = _2105 / _510;
        float _2117 = _2106 * _257;
        float _2118 = _258 * _2106;
        float _2119 = (-0.0) - _2118;
        float _2120 = _2106 * _259;
        float _2122 = (cbSceneParam._m0[77u].w * _2119) / _2105;
        float _2123 = _2122 + cbSceneParam._m0[79u].w;
        float _2124 = cbSceneParam._m0[79u].w - _2118;
        float _2130 = sqrt(((_2117 * _2117) + (_2118 * _2118)) + (_2120 * _2120));
        float _2133 = (1.0 - (cbSceneParam._m0[77u].w / _2105)) * _2130;
        float _2139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2350;
        if (abs((_2119 - _2122) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2350 = ((((_2123 > 0.0) ? exp2(_2139 * _2123) : (2.0 - exp2(_2141 * _2123))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2133;
        }
        else
        {
            float _2285 = 1.0 / cbSceneParam._m0[80u].x;
            float _2286 = isnan(_2124) ? _2123 : (isnan(_2123) ? _2124 : max(_2123, _2124));
            float _2287 = isnan(_2124) ? _2123 : (isnan(_2123) ? _2124 : min(_2123, _2124));
            float _2296 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : min(_2286, 0.0));
            float _2297 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : min(_2287, 0.0));
            _2350 = ((abs(_2130 / _2119) * cbSceneParam._m0[80u].y) * ((((_2296 - _2297) * 2.0) - ((exp2(_2139 * (isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0)))) - exp2(_2139 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0))))) * _2285)) - ((exp2(_2141 * _2296) - exp2(_2141 * _2297)) * _2285))) + (_2133 * cbSceneParam._m0[80u].z);
        }
        vec4 _2352 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2043, _2044, 1.0), 0.0);
        float _2361 = exp2((_2350 * (-1.44269502162933349609375)) * (1.0 - _2352.w));
        float _2362 = log2(_2361);
        float _2378 = log2(_2063);
        _2143 = (exp2(_2378 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].x)) * _2352.x) / cbSceneParam._m0[78u].x)) + _2060;
        _2145 = (exp2(_2378 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].y)) * _2352.y) / cbSceneParam._m0[78u].y)) + _2061;
        _2147 = (exp2(_2378 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2362 * cbSceneParam._m0[78u].z)) * _2352.z) / cbSceneParam._m0[78u].z)) + _2062;
        _2149 = _2361 * _2063;
    }
    else
    {
        _2143 = _2060;
        _2145 = _2061;
        _2147 = _2062;
        _2149 = _2063;
    }
    float _2161 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2162 = _2161 == 3.0;
    float _2163 = log2(_2149);
    float _2170 = exp2(_2163 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
    float _2171 = exp2(_2163 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0)));
    float _2172 = exp2(_2163 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)));
    float _2181 = (_2161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2181 * (_2162 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.y = _2181 * (_2162 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2145)));
    SV_Target.z = _2181 * (_2162 ? _2172 : (_2172 + (cbSceneParam._m0[72u].w * _2147)));
    SV_Target.w = cbInstanceData._m0[_2035].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2035].w;
}


