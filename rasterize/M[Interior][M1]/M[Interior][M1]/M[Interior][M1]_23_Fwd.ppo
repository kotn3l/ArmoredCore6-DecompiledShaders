#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _424;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _339 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _343 = _339.z;
    float _347 = (_339.x * 2.0) + (-1.0);
    float _349 = (_339.y * 2.0) + (-1.0);
    float _355 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _362 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _371 = cbMtdParam._m0[23u].x + _259;
    float _372 = cbMtdParam._m0[23u].y + _260;
    float _373 = cbMtdParam._m0[23u].z + _261;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_355 * _188, _355 * _189, _355 * _190));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_362 * _202, _362 * _203, _362 * _204));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _394 = _393 * _389;
    float _399 = ((cbMtdParam._m0[19u].w * _387) * _393) + (_347 * cbMtdParam._m0[20u].y);
    float _400 = ((cbMtdParam._m0[20u].x * _388) * _393) + (_349 * cbMtdParam._m0[20u].z);
    float _403 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _404 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _422;
    float _425;
    float _427;
    if (_399 > 0.0)
    {
        float _408 = (1.0 - _403) / _399;
        _422 = _408;
        _425 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_408 * _394)) * 0.16666667163372039794921875;
        _427 = (fract((_408 * _400) + _404) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_399 < 0.0)
        {
            float _423 = ((-0.0) - _403) / _399;
            frontier_phi_3_2_ladder = (fract((_423 * _400) + _404) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _423;
            frontier_phi_3_2_ladder_2 = (fract(_423 * _394) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _424;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _422 = frontier_phi_3_2_ladder_1;
        _425 = frontier_phi_3_2_ladder_2;
        _427 = frontier_phi_3_2_ladder;
    }
    float _453;
    float _455;
    float _457;
    if (_400 > 0.0)
    {
        float _440 = (1.0 - _404) / _400;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_440 < _422)
        {
            frontier_phi_8_5_ladder = (fract((_440 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _440;
            frontier_phi_8_5_ladder_2 = (fract(_440 * _394) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _425;
            frontier_phi_8_5_ladder_1 = _422;
            frontier_phi_8_5_ladder_2 = _427;
        }
        _453 = frontier_phi_8_5_ladder_1;
        _455 = frontier_phi_8_5_ladder;
        _457 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_400 < 0.0)
        {
            float _454 = ((-0.0) - _404) / _400;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_454 < _422)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_454 * _399) + _403) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _454;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_454 * _394) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _425;
                frontier_phi_8_6_ladder_9_ladder_1 = _422;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _425;
            frontier_phi_8_6_ladder_1 = _422;
            frontier_phi_8_6_ladder_2 = _427;
        }
        _453 = frontier_phi_8_6_ladder_1;
        _455 = frontier_phi_8_6_ladder;
        _457 = frontier_phi_8_6_ladder_2;
    }
    float _461 = (_394 > 0.0) ? (cbMtdParam._m0[16u].w / _394) : 5000.0;
    float _474;
    float _475;
    if (_461 < _453)
    {
        _474 = ((_403 + cbMtdParam._m0[17u].x) + (_461 * _399)) * 0.16666667163372039794921875;
        _475 = (((_461 * _400) + _404) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _474 = _455;
        _475 = _457;
    }
    vec4 _477 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_474, _475));
    float _482 = _477.x * cbMtdParam._m0[13u].x;
    float _483 = _477.y * cbMtdParam._m0[13u].y;
    float _484 = _477.z * cbMtdParam._m0[13u].z;
    vec4 _502 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _504 = _502.x;
    vec4 _516 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _520 = _516.z;
    float _523 = (_516.x * 2.0) + (-1.0);
    float _524 = (_516.y * 2.0) + (-1.0);
    float _525 = dot(vec2(_523, _524), vec2(_523, _524));
    float _3165 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _530 = sqrt(1.0 - (isnan(1.0) ? _3165 : (isnan(_3165) ? 1.0 : min(_3165, 1.0))));
    float _531 = _520 * _286;
    float _541 = (cbMtdParam._m0[15u].w * ((_343 - _531) + ((_520 - _343) * _286))) + _531;
    float _549 = (cbMtdParam._m0[16u].x * (_347 - (_347 * _286))) + _523;
    float _550 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _286))) + _524;
    float _553 = fma(_530, _195, fma(_550, _202, _549 * _188));
    float _556 = fma(_530, _196, fma(_550, _203, _549 * _189));
    float _559 = fma(_530, _197, fma(_550, _204, _549 * _190));
    float _563 = inversesqrt(dot(vec3(_553, _556, _559), vec3(_553, _556, _559)));
    float _564 = _563 * _553;
    float _565 = _563 * _556;
    float _566 = _563 * _559;
    float _3176 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _567 = isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0));
    float _3187 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3198 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3209 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3220 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _571 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _587 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _591 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _592 = _259 * _591;
    float _593 = _260 * _591;
    float _594 = _261 * _591;
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _621 = fma(_566, cbSceneParam._m0[5u].z, fma(_565, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _564));
    float _624 = fma(_566, cbSceneParam._m0[6u].z, fma(_565, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _564));
    float _627 = fma(_566, cbSceneParam._m0[7u].z, fma(_565, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _564));
    uint _640 = uint(roundEven(NORMAL.w)) * 13u;
    uint _641 = _640 + 9u;
    uint _642 = _641 + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3231 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _3242 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _3253 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
    float _654 = 1.0 - _571;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _571;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _571;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _571;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _680 = _677.x * TEXCOORD.z;
    float _681 = dot(vec3(_564, _565, _566), vec3(_592, _593, _594));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _564) - _592;
    float _689 = (_684 * _565) - _593;
    float _690 = (_684 * _566) - _594;
    float _694 = abs(dot(vec3(_592, _593, _594), vec3(_564, _565, _566)));
    float _3264 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_567);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _789 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _793 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _817 = _744 + _564;
        float _818 = _748 + _565;
        float _819 = _752 + _566;
        float _829 = fma(_819, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _817)) - _785;
        float _830 = fma(_819, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _817)) - _789;
        float _831 = fma(_819, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _817)) - _793;
        float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
        float _848 = ((_835 * _829) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _849 = ((_835 * _830) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_835 * _831) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_848, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_853.x + (-0.5));
        float _889 = _887 * (_853.y + (-0.5));
        float _890 = _887 * (_853.z + (-0.5));
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _898 = _897 * (_860.x + (-0.5));
        float _899 = _897 * (_860.y + (-0.5));
        float _900 = _897 * (_860.z + (-0.5));
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _908 = _907 * (_867.x + (-0.5));
        float _909 = _907 * (_867.y + (-0.5));
        float _910 = _907 * (_867.z + (-0.5));
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = _888 * 0.5;
        float _925 = _898 * 0.5;
        float _926 = _908 * 0.5;
        float _927 = dot(vec3(_924, _925, _926), vec3(_924, _925, _926));
        float _932 = (_927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_927);
        float _941 = (dot(vec3(_564, _565, _566), vec3(_932 * _924, _932 * _925, _932 * _926)) + 1.0) * 0.5;
        float _3290 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _951 = sqrt(((_925 * _925) + (_924 * _924)) + (_926 * _926)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3301 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
        float _953 = _952 * 2.0;
        float _957 = (1.0 - _952) / (_952 + 1.0);
        float _3312 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _967 = ((((1.0 - _958) * (_953 + 2.0)) * exp2(log2(isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))) * (_953 + 1.0))) + _958) * _921;
        float _968 = _889 * 0.5;
        float _969 = _899 * 0.5;
        float _970 = _909 * 0.5;
        float _971 = dot(vec3(_968, _969, _970), vec3(_968, _969, _970));
        float _976 = (_971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_971);
        float _984 = (dot(vec3(_564, _565, _566), vec3(_976 * _968, _976 * _969, _976 * _970)) + 1.0) * 0.5;
        float _3323 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _993 = sqrt(((_969 * _969) + (_968 * _968)) + (_970 * _970)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3334 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3345 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * (_995 + 1.0))) + _1000) * _922;
        float _1010 = _890 * 0.5;
        float _1011 = _900 * 0.5;
        float _1012 = _910 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_564, _565, _566), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3356 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3367 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3378 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * (_1037 + 1.0))) + _1042) * _923;
        _1059 = _890;
        _1060 = _889;
        _1061 = _888;
        _1062 = _900;
        _1063 = _899;
        _1064 = _898;
        _1065 = _910;
        _1066 = _909;
        _1067 = _908;
        _1068 = _923;
        _1069 = _922;
        _1070 = _921;
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)));
        _1072 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
    }
    else
    {
        _1059 = _424;
        _1060 = _424;
        _1061 = _424;
        _1062 = _424;
        _1063 = _424;
        _1064 = _424;
        _1065 = _424;
        _1066 = _424;
        _1067 = _424;
        _1068 = _424;
        _1069 = _424;
        _1070 = _424;
        _1071 = 0.0;
        _1072 = 0.0;
        _1073 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1099 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1103 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1107 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1130 = _744 + _564;
        float _1131 = _748 + _565;
        float _1132 = _752 + _566;
        float _1142 = fma(_1132, cbModelParam._m0[30u].z, fma(_1131, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1130)) - _1099;
        float _1143 = fma(_1132, cbModelParam._m0[31u].z, fma(_1131, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1130)) - _1103;
        float _1144 = fma(_1132, cbModelParam._m0[32u].z, fma(_1131, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1130)) - _1107;
        float _1148 = inversesqrt(dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144)));
        float _1161 = ((_1148 * _1142) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1099 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1162 = ((_1148 * _1143) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1103 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1148 * _1144) / cbModelParam._m0[35u].z) + ((((((_1107 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_564, _565, _566), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3419 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3430 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3441 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_564, _565, _566), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3474 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(_564, _565, _566), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3507 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _424;
        _1369 = _424;
        _1370 = _424;
        _1371 = _424;
        _1372 = _424;
        _1373 = _424;
        _1374 = _424;
        _1375 = _424;
        _1376 = _424;
        _1377 = _424;
        _1378 = _424;
        _1379 = _424;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1071)) + _1071;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1072)) + _1072;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _688 * 0.5;
    float _1437 = _689 * 0.5;
    float _1438 = _690 * 0.5;
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1060, _1063, _1066, _1069));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1061, _1064, _1067, _1070));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1504 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _567);
    float _1505 = isnan(_1504) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1504 : min(cbModelParam._m0[25u].z, _1504));
    float _1586;
    float _1588;
    float _1590;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1553 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1557 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1561 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1564 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1567 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1570 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1598;
        if (_1564 > 0.0)
        {
            _1598 = abs((1.0 - _1553) / _1564);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1564 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1553 + 1.0) / _1564);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1598 = frontier_phi_26_24_ladder;
        }
        float _1960;
        if (_1567 > 0.0)
        {
            _1960 = abs((1.0 - _1557) / _1567);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1557 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1960 = frontier_phi_35_31_ladder;
        }
        float _2276;
        if (_1570 > 0.0)
        {
            _2276 = abs((1.0 - _1561) / _1570);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1561 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2276 = frontier_phi_49_42_ladder;
        }
        float _2278 = isnan(_1960) ? _1598 : (isnan(_1598) ? _1960 : min(_1598, _1960));
        float _2279 = isnan(_2276) ? _2278 : (isnan(_2278) ? _2276 : min(_2278, _2276));
        float _2283 = (_2279 * _1564) + _1553;
        float _2284 = (_2279 * _1567) + _1557;
        float _2285 = (_2279 * _1570) + _1561;
        float _2286 = _2279 * 9.9999997473787516355514526367188e-05;
        float _2287 = (-1.0) - _2286;
        float _2289 = _2286 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2285 > _2289) || ((_2285 < _2287) || ((_2284 > _2289) || ((_2284 < _2287) || ((_2283 < _2287) || (_2283 > _2289))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2285, cbModelParam._m0[9u].z, fma(_2284, cbModelParam._m0[9u].y, _2283 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2285, cbModelParam._m0[10u].z, fma(_2284, cbModelParam._m0[10u].y, _2283 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2285, cbModelParam._m0[11u].z, fma(_2284, cbModelParam._m0[11u].y, _2283 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_25_49_ladder = _2411.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2411.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2411.x * cbModelParam._m0[1u].y;
        }
        _1586 = frontier_phi_25_49_ladder_2;
        _1588 = frontier_phi_25_49_ladder_1;
        _1590 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1574 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1505);
        _1586 = _1574.x * cbModelParam._m0[1u].y;
        _1588 = _1574.y * cbModelParam._m0[1u].y;
        _1590 = _1574.z * cbModelParam._m0[1u].y;
    }
    float _1594 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _567);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1594 : min(cbModelParam._m0[25u].w, _1594));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1650 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1654 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1658 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1661 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1664 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1667 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1965;
        if (_1661 > 0.0)
        {
            _1965 = abs((1.0 - _1650) / _1661);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1650 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1965 = frontier_phi_37_33_ladder;
        }
        float _2302;
        if (_1664 > 0.0)
        {
            _2302 = abs((1.0 - _1654) / _1664);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1654 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2302 = frontier_phi_51_44_ladder;
        }
        float _2471;
        if (_1667 > 0.0)
        {
            _2471 = abs((1.0 - _1658) / _1667);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1658 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2471 = frontier_phi_65_60_ladder;
        }
        float _2473 = isnan(_2302) ? _1965 : (isnan(_1965) ? _2302 : min(_1965, _2302));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1661) + _1650;
        float _2479 = (_2474 * _1664) + _1654;
        float _2480 = (_2474 * _1667) + _1658;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2482 = (-1.0) - _2481;
        float _2484 = _2481 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2480 > _2484) || ((_2480 < _2482) || ((_2479 > _2484) || ((_2479 < _2482) || ((_2478 < _2482) || (_2478 > _2484))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2713 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2480, cbModelParam._m0[17u].z, fma(_2479, cbModelParam._m0[17u].y, _2478 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2480, cbModelParam._m0[18u].z, fma(_2479, cbModelParam._m0[18u].y, _2478 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2480, cbModelParam._m0[19u].z, fma(_2479, cbModelParam._m0[19u].y, _2478 * cbModelParam._m0[19u].x))), _1595);
            frontier_phi_34_65_ladder = _2713.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2713.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2713.z * cbModelParam._m0[1u].z;
        }
        _1686 = frontier_phi_34_65_ladder_1;
        _1688 = frontier_phi_34_65_ladder;
        _1690 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1670 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1595);
        _1686 = _1670.x * cbModelParam._m0[1u].z;
        _1688 = _1670.y * cbModelParam._m0[1u].z;
        _1690 = _1670.z * cbModelParam._m0[1u].z;
    }
    float _1703 = (((_715 * _665) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1686 - _1586)) + _1586);
    float _1705 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1688 - _1588)) + _1588);
    float _1707 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1710 = fma(_1707, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1713 = fma(_1707, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1716 = fma(_1707, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, _1703 * cbSceneParam._m0[91u].x));
    uvec4 _1726 = floatBitsToUint(cbInstanceData._m0[_640 + 5u]);
    uint _1728 = _1726.x * 14u;
    uint _1729 = _1728 + 13u;
    float _1734 = _680 + (-1.0);
    float _1737 = (cbLight._m0[_1729].x * _1734) + 1.0;
    float _1738 = (cbLight._m0[_1729].y * _1734) + 1.0;
    uint _1739 = _1728 + 5u;
    float _1745 = isnan(1.0) ? _1738 : (isnan(_1738) ? 1.0 : min(_1738, 1.0));
    uint _1749 = _1728 + 4u;
    float _1756 = isnan(1.0) ? _1737 : (isnan(_1737) ? 1.0 : min(_1737, 1.0));
    uint _1760 = _1728 | 1u;
    float _1771 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_564, _565, _566));
    float _1774 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_564, _565, _566));
    float _3643 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _3654 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
    float _1779 = (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * 0.3183098733425140380859375;
    float _1781 = (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * 0.3183098733425140380859375;
    float _1788 = ((cbLight._m0[_1739].x * _1745) * _1781) + ((cbLight._m0[_1749].x * _1756) * _1779);
    float _1789 = ((_1745 * cbLight._m0[_1739].y) * _1781) + ((_1756 * cbLight._m0[_1749].y) * _1779);
    float _1790 = ((_1745 * cbLight._m0[_1739].z) * _1781) + ((_1756 * cbLight._m0[_1749].z) * _1779);
    uint _1792 = _1728 + 8u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1728].w)) * _567) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1728].x + _592;
    float _1808 = cbLight._m0[_1728].y + _593;
    float _1809 = cbLight._m0[_1728].z + _594;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1728].xyz));
    float _3665 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _3676 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1821 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _1822 = dot(vec3(_564, _565, _566), vec3(_1814, _1815, _1816));
    float _3687 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
    float _1825 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _1826 = dot(vec3(cbLight._m0[_1728].xyz), vec3(_1814, _1815, _1816));
    float _3698 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1830 = _1806 * _1806;
    float _1834 = ((_1825 * _1825) * (_1830 + (-1.0))) + 1.0;
    float _1842 = exp2(log2(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0)))) * 5.0);
    float _1843 = 0.959999978542327880859375 - _662;
    float _1845 = 0.959999978542327880859375 - _663;
    float _1846 = 0.959999978542327880859375 - _664;
    float _1853 = 1.0 - _1806;
    float _1864 = (0.5 / (((_1821 * ((_1820 * _1853) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1821 * _1853) + _1806) * _1820))) * _1820;
    float _3709 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_1830 / ((_1834 * _1834) * 3.141590118408203125));
    uint _1877 = _1728 + 9u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1760].w)) * _567) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1760].x + _592;
    float _1891 = cbLight._m0[_1760].y + _593;
    float _1892 = cbLight._m0[_1760].z + _594;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_564, _565, _566), vec3(cbLight._m0[_1760].xyz));
    float _3720 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _1904 = dot(vec3(_564, _565, _566), vec3(_1897, _1898, _1899));
    float _3731 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1907 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _1908 = dot(vec3(cbLight._m0[_1760].xyz), vec3(_1897, _1898, _1899));
    float _3742 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1912 = _1889 * _1889;
    float _1916 = ((_1907 * _1907) * (_1912 + (-1.0))) + 1.0;
    float _1923 = exp2(log2(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * 5.0);
    float _1930 = 1.0 - _1889;
    float _1940 = (0.5 / (((_1821 * ((_1903 * _1930) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1821 * _1930) + _1889) * _1903))) * _1903;
    float _3753 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1912 / ((_1916 * _1916) * 3.141590118408203125));
    float _1952 = (((((_1923 * _1843) + _665) * cbLight._m0[_1877].x) * _1942) * _1745) + (((((_1842 * _1843) + _665) * cbLight._m0[_1792].x) * _1866) * _1756);
    float _1953 = (((((_1923 * _1845) + _667) * cbLight._m0[_1877].y) * _1942) * _1745) + (((((_1842 * _1845) + _667) * cbLight._m0[_1792].y) * _1866) * _1756);
    float _1954 = (((((_1923 * _1846) + _668) * cbLight._m0[_1877].z) * _1942) * _1745) + (((((_1842 * _1846) + _668) * cbLight._m0[_1792].z) * _1866) * _1756);
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    if (_1726.y == 0u)
    {
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2009;
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2009;
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2009;
        uvec4 _2024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2025 = _2024.x;
        uint _2036 = uint((float(_2024.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2025))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2025)));
        float _2046 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2047 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        uint _2050 = uint(isnan(14.0) ? _2047 : (isnan(_2047) ? 14.0 : min(_2047, 14.0)));
        uvec4 _2055 = texelFetch(g_lightClusterGridBuffer, int(((_2050 << 2u) + (_2036 << 6u)) >> 2u));
        uint _2056 = _2055.x;
        uint _2057 = _2024.z;
        float _2163;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        if (((((1u << ((_2057 >> 4u) & 15u)) + 4294967295u) & _2056) == 0u) || ((_2057 & 240u) == 0u))
        {
            _2163 = 0.0;
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
        }
        else
        {
            float _2164;
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2339 = 0.0;
            float _2340 = 0.0;
            float _2341 = 0.0;
            float _2342 = 0.0;
            float _2343 = 0.0;
            float _2344 = 0.0;
            uint _2345 = 0u;
            uint _2354;
            bool _2355;
            for (;;)
            {
                _2354 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2345 << 2u)) >> 2u)).x;
                _2355 = _2354 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2355)
                {
                    frontier_phi_62_pred = _2340;
                    frontier_phi_62_pred_1 = _2339;
                    frontier_phi_62_pred_2 = _2341;
                    frontier_phi_62_pred_3 = _2344;
                    frontier_phi_62_pred_4 = _2343;
                    frontier_phi_62_pred_5 = _2342;
                }
                else
                {
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    float _2518;
                    float _2519;
                    uint _2520;
                    _2514 = _2339;
                    _2515 = _2340;
                    _2516 = _2341;
                    _2517 = _2342;
                    _2518 = _2343;
                    _2519 = _2344;
                    _2520 = _2354;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    for (;;)
                    {
                        uint _2524 = uint(findLSB(_2520)) + (_2345 << 5u);
                        uint _2521 = (_2520 + 4294967295u) & _2520;
                        uint _2526 = _2524 * 48u;
                        vec4 _2540 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2526)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2526 + 3u)).x));
                        uint _2546 = (_2524 * 48u) + 4u;
                        vec4 _2559 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2546)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 3u)).x));
                        uint _2565 = (_2524 * 48u) + 8u;
                        vec3 _2576 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2565)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 2u)).x));
                        float _2580 = _2540.x - _2010;
                        float _2581 = _2540.y - _2011;
                        float _2582 = _2540.z - _2012;
                        float _2583 = dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582));
                        float _2586 = inversesqrt(_2583);
                        float _2587 = _2586 * _2580;
                        float _2588 = _2586 * _2581;
                        float _2589 = _2586 * _2582;
                        float _2590 = dot(vec3(_621, _624, _627), vec3(_2587, _2588, _2589));
                        float _2595 = 1.0 - (_2583 * _2540.w);
                        float _3774 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
                        float _2596 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                        float _2597 = sqrt(_2583) * _2559.w;
                        float _2600 = 1.39999997615814208984375 / (_2597 + 1.39999997615814208984375);
                        float _2601 = _2600 * _2600;
                        float _2604 = ((1.0 - _2601) * _2590) + _2601;
                        float _2607 = _2597 * _2597;
                        float _2611 = ((isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))) * _2596) / ((_2607 * 0.699999988079071044921875) + 1.0);
                        float _2615 = (-0.0) - _2010;
                        float _2616 = (-0.0) - _2011;
                        float _2617 = (-0.0) - _2012;
                        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
                        float _2622 = _2621 * _2615;
                        float _2623 = _2621 * _2616;
                        float _2624 = _2621 * _2617;
                        float _2632 = exp2(log2(1.0 / ((_2607 * 3.5) + 5.0)) * 0.25);
                        float _2633 = 1.0 - _696;
                        float _2640 = sqrt(1.0 - ((1.0 - (_2633 * _2633)) * (1.0 - (_2632 * _2632))));
                        float _2641 = _2640 * _2640;
                        float _2642 = _2641 * _2641;
                        float _2643 = _2622 + _2587;
                        float _2644 = _2623 + _2588;
                        float _2645 = _2624 + _2589;
                        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
                        float _2653 = dot(vec3(_621, _624, _627), vec3(_2622, _2623, _2624));
                        float _3790 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
                        float _2656 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
                        float _2657 = dot(vec3(_621, _624, _627), vec3(_2649 * _2643, _2649 * _2644, _2649 * _2645));
                        float _3801 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                        float _2660 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
                        float _2664 = ((_2660 * _2660) * (_2642 + (-1.0))) + 1.0;
                        float _2665 = _2600 * _2641;
                        float _2666 = _2665 * _2665;
                        float _2669 = ((1.0 - _2666) * _2590) + _2666;
                        float _3812 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2670 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
                        float _2671 = 1.0 - _2641;
                        float _2681 = (0.5 / (((_2670 * ((_2656 * _2671) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2670 * _2671) + _2641) * _2656))) * _2670;
                        float _3823 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
                        float _2692 = (((_2642 * 3.1415927410125732421875) * (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0)))) / ((_2664 * _2664) * ((_2607 * 2.1991131305694580078125) + 3.141590118408203125))) * _2596;
                        _2423 = (_2611 * _2559.x) + _2517;
                        _2424 = (_2611 * _2559.y) + _2518;
                        _2425 = (_2611 * _2559.z) + _2519;
                        _2420 = (_2692 * _2576.x) + _2514;
                        _2421 = (_2692 * _2576.y) + _2515;
                        _2422 = (_2692 * _2576.z) + _2516;
                        if (_2521 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2514 = _2420;
                            _2515 = _2421;
                            _2516 = _2422;
                            _2517 = _2423;
                            _2518 = _2424;
                            _2519 = _2425;
                            _2520 = _2521;
                        }
                    }
                    frontier_phi_62_pred = _2421;
                    frontier_phi_62_pred_1 = _2420;
                    frontier_phi_62_pred_2 = _2422;
                    frontier_phi_62_pred_3 = _2425;
                    frontier_phi_62_pred_4 = _2424;
                    frontier_phi_62_pred_5 = _2423;
                }
                _2166 = frontier_phi_62_pred;
                _2164 = frontier_phi_62_pred_1;
                _2168 = frontier_phi_62_pred_2;
                _2174 = frontier_phi_62_pred_3;
                _2172 = frontier_phi_62_pred_4;
                _2170 = frontier_phi_62_pred_5;
                uint _2346 = _2345 + 1u;
                if (_2346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2339 = _2164;
                    _2340 = _2166;
                    _2341 = _2168;
                    _2342 = _2170;
                    _2343 = _2172;
                    _2344 = _2174;
                    _2345 = _2346;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2163 = _2164;
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
        }
        uvec4 _2177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2178 = _2177.z;
        uint _2180 = (_2178 >> 8u) & 15u;
        float _2307;
        float _2309;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        if (((4294967295u << _2180) & _2056) == 0u)
        {
            _2307 = _2163;
            _2309 = _2165;
            _2311 = _2167;
            _2313 = _2169;
            _2315 = _2171;
            _2317 = _2173;
        }
        else
        {
            float _2332 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _2333 = _2332 * _2010;
            float _2334 = _2332 * _2011;
            float _2335 = _2332 * _2012;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2180 < ((_2178 >> 12u) & 15u))
            {
                float _2308;
                float _2310;
                float _2312;
                float _2314;
                float _2316;
                float _2318;
                float _2497 = _2163;
                float _2498 = _2165;
                float _2499 = _2167;
                float _2500 = _2169;
                float _2501 = _2171;
                float _2502 = _2173;
                uint _2503 = _2180;
                uint _2512;
                bool _2513;
                for (;;)
                {
                    _2512 = texelFetch(g_lightClassification, int((((_2050 << 5u) + (_2036 << 9u)) + (_2503 << 2u)) >> 2u)).x;
                    _2513 = _2512 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2513)
                    {
                        frontier_phi_71_pred = _2498;
                        frontier_phi_71_pred_1 = _2497;
                        frontier_phi_71_pred_2 = _2502;
                        frontier_phi_71_pred_3 = _2501;
                        frontier_phi_71_pred_4 = _2500;
                        frontier_phi_71_pred_5 = _2499;
                    }
                    else
                    {
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2722;
                        float _2723;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _2731 = _2497;
                        float _2732 = _2498;
                        float _2733 = _2499;
                        float _2734 = _2500;
                        float _2735 = _2501;
                        float _2736 = _2502;
                        uint _2737 = _2512;
                        uint _2738;
                        vec4 _2763;
                        float _2764;
                        vec4 _2779;
                        vec3 _2791;
                        vec4 _2806;
                        vec4 _2821;
                        float _2867;
                        bool _2868;
                        for (;;)
                        {
                            uint _2748 = ((_2503 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2737));
                            _2738 = (_2737 + 4294967295u) & _2737;
                            uint _2750 = _2748 * 40u;
                            _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            _2764 = _2763.w;
                            uint _2766 = (_2748 * 40u) + 4u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2781 = (_2748 * 40u) + 8u;
                            _2791 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x));
                            uint _2793 = (_2748 * 40u) + 16u;
                            _2806 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2793 + 3u)).x));
                            uint _2808 = (_2748 * 40u) + 20u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            uint _2823 = (_2748 * 40u) + 24u;
                            vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2842 = (_2748 * 40u) + 28u;
                            vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2867 = fma(_2012, _2855.z, fma(_2011, _2855.y, _2855.x * _2010)) + _2855.w;
                            _2868 = !((fma(_2012, _2836.z, fma(_2011, _2836.y, _2836.x * _2010)) + _2836.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2868)
                            {
                                float _2895 = _2763.x - _2010;
                                float _2896 = _2763.y - _2011;
                                float _2897 = _2763.z - _2012;
                                float _2898 = dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897));
                                float _2901 = inversesqrt(_2898);
                                float _2902 = _2901 * _2895;
                                float _2903 = _2901 * _2896;
                                float _2904 = _2901 * _2897;
                                float _2908 = 1.0 - (_2898 / (_2764 * _2764));
                                float _3834 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2909 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                                float _2913 = sqrt(_2898) * _2779.w;
                                float _2915 = 1.39999997615814208984375 / (_2913 + 1.39999997615814208984375);
                                float _2916 = _2915 * _2915;
                                float _2919 = ((1.0 - _2916) * dot(vec3(_2902, _2903, _2904), vec3(_621, _624, _627))) + _2916;
                                float _2922 = _2913 * _2913;
                                float _2926 = (fma(_2012, _2806.z, fma(_2011, _2806.y, _2806.x * _2010)) + _2806.w) / _2867;
                                float _2927 = (fma(_2012, _2821.z, fma(_2011, _2821.y, _2821.x * _2010)) + _2821.w) / _2867;
                                float _2931 = 1.0 - dot(vec2(_2926, _2927), vec2(_2926, _2927));
                                float _3850 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2932 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                                float _2933 = _2932 * (((isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))) * _2909) / ((_2922 * 0.699999988079071044921875) + 1.0));
                                float _2945 = exp2(log2(1.0 / ((_2922 * 3.5) + 5.0)) * 0.25);
                                float _2946 = 1.0 - _696;
                                float _2953 = sqrt(1.0 - ((1.0 - (_2946 * _2946)) * (1.0 - (_2945 * _2945))));
                                float _2954 = _2953 * _2953;
                                float _2955 = _2954 * _2954;
                                float _2956 = _2902 - _2333;
                                float _2957 = _2903 - _2334;
                                float _2958 = _2904 - _2335;
                                float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                                float _2966 = dot(vec3(_621, _624, _627), vec3((-0.0) - _2333, (-0.0) - _2334, (-0.0) - _2335));
                                float _3861 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2969 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                                float _2970 = dot(vec3(_621, _624, _627), vec3(_2962 * _2956, _2962 * _2957, _2962 * _2958));
                                float _3872 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2973 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                                float _2977 = ((_2973 * _2973) * (_2955 + (-1.0))) + 1.0;
                                float _2978 = _2915 * _2954;
                                float _2979 = _2978 * _2978;
                                float _2985 = ((1.0 - _2979) * dot(vec3(_621, _624, _627), vec3(_2902, _2903, _2904))) + _2979;
                                float _3883 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                                float _2987 = 1.0 - _2954;
                                float _2997 = (0.5 / (((_2986 * ((_2969 * _2987) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2986 * _2987) + _2954) * _2969))) * _2986;
                                float _3894 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3007 = (_2932 * _2909) * (((_2955 * 3.1415927410125732421875) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) / ((_2977 * _2977) * ((_2922 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3007 * _2791.y;
                                frontier_phi_77_pred_1 = _3007 * _2791.x;
                                frontier_phi_77_pred_2 = _2933 * _2779.z;
                                frontier_phi_77_pred_3 = _2933 * _2779.y;
                                frontier_phi_77_pred_4 = _2933 * _2779.x;
                                frontier_phi_77_pred_5 = _3007 * _2791.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3012 = frontier_phi_77_pred;
                            _3011 = frontier_phi_77_pred_1;
                            _3016 = frontier_phi_77_pred_2;
                            _3015 = frontier_phi_77_pred_3;
                            _3014 = frontier_phi_77_pred_4;
                            _3013 = frontier_phi_77_pred_5;
                            _2721 = _3014 + _2734;
                            _2722 = _3015 + _2735;
                            _2723 = _3016 + _2736;
                            _2718 = _3011 + _2731;
                            _2719 = _3012 + _2732;
                            _2720 = _3013 + _2733;
                            if (_2738 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2738;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2719;
                        frontier_phi_71_pred_1 = _2718;
                        frontier_phi_71_pred_2 = _2723;
                        frontier_phi_71_pred_3 = _2722;
                        frontier_phi_71_pred_4 = _2721;
                        frontier_phi_71_pred_5 = _2720;
                    }
                    _2310 = frontier_phi_71_pred;
                    _2308 = frontier_phi_71_pred_1;
                    _2318 = frontier_phi_71_pred_2;
                    _2316 = frontier_phi_71_pred_3;
                    _2314 = frontier_phi_71_pred_4;
                    _2312 = frontier_phi_71_pred_5;
                    uint _2504 = _2503 + 1u;
                    if (_2504 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2497 = _2308;
                        _2498 = _2310;
                        _2499 = _2312;
                        _2500 = _2314;
                        _2501 = _2316;
                        _2502 = _2318;
                        _2503 = _2504;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2318;
                frontier_phi_53_54_ladder_1 = _2314;
                frontier_phi_53_54_ladder_2 = _2312;
                frontier_phi_53_54_ladder_3 = _2310;
                frontier_phi_53_54_ladder_4 = _2308;
                frontier_phi_53_54_ladder_5 = _2316;
            }
            else
            {
                frontier_phi_53_54_ladder = _2173;
                frontier_phi_53_54_ladder_1 = _2169;
                frontier_phi_53_54_ladder_2 = _2167;
                frontier_phi_53_54_ladder_3 = _2165;
                frontier_phi_53_54_ladder_4 = _2163;
                frontier_phi_53_54_ladder_5 = _2171;
            }
            _2307 = frontier_phi_53_54_ladder_4;
            _2309 = frontier_phi_53_54_ladder_3;
            _2311 = frontier_phi_53_54_ladder_2;
            _2313 = frontier_phi_53_54_ladder_1;
            _2315 = frontier_phi_53_54_ladder_5;
            _2317 = frontier_phi_53_54_ladder;
        }
        float _2322 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2069 = (_2322 * _2313) + _1788;
        _2071 = (_2322 * _2315) + _1789;
        _2073 = (_2322 * _2317) + _1790;
        _2075 = ((_2307 * _665) * _2322) + _1952;
        _2077 = ((_2309 * _667) * _2322) + _1953;
        _2079 = ((_2311 * _668) * _2322) + _1954;
    }
    else
    {
        _2069 = _1788;
        _2071 = _1789;
        _2073 = _1790;
        _2075 = _1952;
        _2077 = _1953;
        _2079 = _1954;
    }
    uint _2085 = _641 + uint(cbMatDynParam._m0[0u].w);
    float _3910 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3921 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3932 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2110 = (((isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_2069 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _680))) + ((_2075 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2085].x * (_482 - (_482 * _286)));
    float _2112 = ((cbInstanceData._m0[_2085].y * (_483 - (_483 * _286))) + ((_2077 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_2071 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _680)));
    float _2114 = ((cbInstanceData._m0[_2085].z * (_484 - (_484 * _286))) + ((_2079 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1494)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2073 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _680)));
    uint _2118 = _640 + 6u;
    float _2126 = _600 / cbSceneParam._m0[86u].x;
    float _2127 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2141 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, (log2((isnan(cbSceneParam._m0[77u].w) ? _587 : (isnan(_587) ? cbSceneParam._m0[77u].w : min(_587, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2143 = _2141.x;
    float _2144 = _2141.y;
    float _2145 = _2141.z;
    float _2146 = _2141.w;
    float _2226;
    float _2228;
    float _2230;
    float _2232;
    if (_587 > cbSceneParam._m0[78u].w)
    {
        float _2188 = isnan(_587) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _587 : min(cbSceneParam._m0[80u].w, _587));
        float _2189 = _2188 / _587;
        float _2200 = _2189 * _259;
        float _2201 = _260 * _2189;
        float _2202 = (-0.0) - _2201;
        float _2203 = _2189 * _261;
        float _2205 = (cbSceneParam._m0[77u].w * _2202) / _2188;
        float _2206 = _2205 + cbSceneParam._m0[79u].w;
        float _2207 = cbSceneParam._m0[79u].w - _2201;
        float _2213 = sqrt(((_2200 * _2200) + (_2201 * _2201)) + (_2203 * _2203));
        float _2216 = (1.0 - (cbSceneParam._m0[77u].w / _2188)) * _2213;
        float _2222 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2224 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2433;
        if (abs((_2202 - _2205) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2433 = ((((_2206 > 0.0) ? exp2(_2222 * _2206) : (2.0 - exp2(_2224 * _2206))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2216;
        }
        else
        {
            float _2368 = 1.0 / cbSceneParam._m0[80u].x;
            float _2369 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : max(_2206, _2207));
            float _2370 = isnan(_2207) ? _2206 : (isnan(_2206) ? _2207 : min(_2206, _2207));
            float _2379 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : min(_2369, 0.0));
            float _2380 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : min(_2370, 0.0));
            _2433 = ((abs(_2213 / _2202) * cbSceneParam._m0[80u].y) * ((((_2379 - _2380) * 2.0) - ((exp2(_2222 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0)))) - exp2(_2222 * (isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0))))) * _2368)) - ((exp2(_2224 * _2379) - exp2(_2224 * _2380)) * _2368))) + (_2216 * cbSceneParam._m0[80u].z);
        }
        vec4 _2435 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2126, _2127, 1.0), 0.0);
        float _2444 = exp2((_2433 * (-1.44269502162933349609375)) * (1.0 - _2435.w));
        float _2445 = log2(_2444);
        float _2461 = log2(_2146);
        _2226 = (exp2(_2461 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].x)) * _2435.x) / cbSceneParam._m0[78u].x)) + _2143;
        _2228 = (exp2(_2461 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].y)) * _2435.y) / cbSceneParam._m0[78u].y)) + _2144;
        _2230 = (exp2(_2461 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2445 * cbSceneParam._m0[78u].z)) * _2435.z) / cbSceneParam._m0[78u].z)) + _2145;
        _2232 = _2444 * _2146;
    }
    else
    {
        _2226 = _2143;
        _2228 = _2144;
        _2230 = _2145;
        _2232 = _2146;
    }
    float _2244 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2245 = _2244 == 3.0;
    float _2246 = log2(_2232);
    float _2253 = exp2(_2246 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0)));
    float _2254 = exp2(_2246 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0)));
    float _2255 = exp2(_2246 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0)));
    float _2264 = (_2244 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2264 * (_2245 ? _2253 : (_2253 + (cbSceneParam._m0[72u].w * _2226)));
    SV_Target.y = _2264 * (_2245 ? _2254 : (_2254 + (cbSceneParam._m0[72u].w * _2228)));
    SV_Target.z = _2264 * (_2245 ? _2255 : (_2255 + (cbSceneParam._m0[72u].w * _2230)));
    SV_Target.w = cbInstanceData._m0[_2118].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2118].w;
}


