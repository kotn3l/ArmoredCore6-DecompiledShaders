#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1329;
float _3516;
float _3517;
float _3518;
float _3519;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    vec4 _329 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _333 = _329.z;
    float _356 = (_329.x * 2.0) + (-1.0);
    float _358 = (_329.y * 2.0) + (-1.0);
    float _361 = _356 - (_356 * _294);
    float _362 = _358 - (_358 * _294);
    float _371 = cbMtdParam._m0[22u].y + _267;
    float _372 = cbMtdParam._m0[22u].z + _268;
    float _373 = cbMtdParam._m0[22u].w + _269;
    float _387 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_196, _197, _198));
    float _388 = (-0.0) - dot(vec3(_371, _372, _373), vec3(_210, _211, _212));
    float _389 = (-0.0) - dot(vec3(_371, _372, _373), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _393 = inversesqrt(dot(vec3(_387, _388, _389), vec3(_387, _388, _389)));
    float _396 = _393 * _389;
    float _397 = (_393 * _387) + (_361 * cbMtdParam._m0[20u].y);
    float _398 = (_393 * _388) + (_362 * cbMtdParam._m0[20u].z);
    float _399 = _397 * cbMtdParam._m0[19u].x;
    float _400 = _398 * cbMtdParam._m0[18u].w;
    float _401 = fract(TEXCOORD.x);
    float _402 = fract(TEXCOORD.y);
    float _408;
    if (_399 > 0.0)
    {
        _408 = (1.0 - _401) / _399;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_399 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _401) / _399;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _408 = frontier_phi_3_2_ladder;
    }
    float _416;
    if (_400 > 0.0)
    {
        _416 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _416 = frontier_phi_7_6_ladder;
    }
    bool _418 = _396 > 0.0;
    float _420 = _418 ? (cbMtdParam._m0[15u].x / _396) : 5000.0;
    float _421 = isnan(_416) ? _408 : (isnan(_408) ? _416 : min(_408, _416));
    float _422 = isnan(_420) ? _421 : (isnan(_421) ? _420 : min(_421, _420));
    float _426 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _427 = _401 + (-0.5);
    float _430 = _402 + (-0.5);
    float _433 = ((_422 * _396) + _426) / _426;
    vec4 _458 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_427 + (_422 * _399)) / _433) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_430 + (_422 * _400)) / _433) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _460 = _458.x;
    float _461 = _458.y;
    float _462 = _458.z;
    float _474 = (_460 - (_460 * _294)) * cbMtdParam._m0[9u].x;
    float _475 = (_461 - (_461 * _294)) * cbMtdParam._m0[9u].y;
    float _476 = cbMtdParam._m0[9u].z * (_462 - (_462 * _294));
    float _494 = _397 * cbMtdParam._m0[21u].x;
    float _495 = _398 * cbMtdParam._m0[20u].w;
    bool _496 = _494 > 0.0;
    float _501;
    if (_496)
    {
        _501 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _501 = frontier_phi_11_10_ladder;
    }
    bool _503 = _495 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _508 = frontier_phi_15_14_ladder;
    }
    float _511 = _418 ? (cbMtdParam._m0[16u].z / _396) : 5000.0;
    float _512 = isnan(_508) ? _501 : (isnan(_501) ? _508 : min(_501, _508));
    float _513 = isnan(_511) ? _512 : (isnan(_512) ? _511 : min(_512, _511));
    float _517 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _521 = ((_513 * _396) + _517) / _517;
    float _526 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _528 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _544 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_513 * _494)) / _521) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_513 * _495)) / _521) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _549 = _544.x * cbMtdParam._m0[10u].x;
    float _550 = _544.y * cbMtdParam._m0[10u].y;
    float _551 = _544.z * cbMtdParam._m0[10u].z;
    float _559;
    if (_496)
    {
        _559 = (1.0 - _401) / _494;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_494 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _401) / _494;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _559 = frontier_phi_19_18_ladder;
    }
    float _565;
    if (_503)
    {
        _565 = (1.0 - _402) / _495;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_495 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _402) / _495;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _565 = frontier_phi_23_22_ladder;
    }
    float _567 = isnan(_565) ? _559 : (isnan(_559) ? _565 : min(_559, _565));
    float _568 = isnan(_511) ? _567 : (isnan(_567) ? _511 : min(_567, _511));
    float _575 = ((_568 * _396) + _517) / _517;
    vec4 _589 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_427 + (_568 * _494)) / _575) + 0.5) + _526) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_430 + (_568 * _495)) / _575) + 0.5) + _528) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _591 = _589.w;
    float _593 = _591 - (_591 * _294);
    float _603 = (_593 * ((_549 - _474) - (_549 * _294))) + _474;
    float _604 = (_593 * ((_550 - _475) - (_550 * _294))) + _475;
    float _605 = (_593 * ((_551 - _476) - (_551 * _294))) + _476;
    float _619 = _397 * cbMtdParam._m0[21u].z;
    float _620 = _398 * cbMtdParam._m0[21u].y;
    bool _621 = _619 > 0.0;
    float _626;
    if (_621)
    {
        _626 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _626 = frontier_phi_27_26_ladder;
    }
    bool _628 = _620 > 0.0;
    float _633;
    if (_628)
    {
        _633 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _633 = frontier_phi_31_30_ladder;
    }
    float _636 = _418 ? (cbMtdParam._m0[18u].x / _396) : 5000.0;
    float _637 = isnan(_633) ? _626 : (isnan(_626) ? _633 : min(_626, _633));
    float _638 = isnan(_636) ? _637 : (isnan(_637) ? _636 : min(_637, _636));
    float _642 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _646 = ((_638 * _396) + _642) / _642;
    float _651 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _653 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _670 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_638 * _619)) / _646) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_638 * _620)) / _646) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _675 = _670.x * cbMtdParam._m0[14u].x;
    float _676 = _670.y * cbMtdParam._m0[14u].y;
    float _677 = _670.z * cbMtdParam._m0[14u].z;
    float _685;
    if (_621)
    {
        _685 = (1.0 - _401) / _619;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_619 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _401) / _619;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _685 = frontier_phi_35_34_ladder;
    }
    float _691;
    if (_628)
    {
        _691 = (1.0 - _402) / _620;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_620 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _402) / _620;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _691 = frontier_phi_39_38_ladder;
    }
    float _693 = isnan(_691) ? _685 : (isnan(_685) ? _691 : min(_685, _691));
    float _694 = isnan(_636) ? _693 : (isnan(_693) ? _636 : min(_693, _636));
    float _701 = ((_694 * _396) + _642) / _642;
    vec4 _715 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_427 + (_694 * _619)) / _701) + 0.5) + _651) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_430 + (_694 * _620)) / _701) + 0.5) + _653) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _717 = _715.w;
    float _719 = _717 - (_717 * _294);
    vec4 _743 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _745 = _743.x;
    vec4 _757 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _761 = _757.z;
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3578 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _771 = sqrt(1.0 - (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))));
    float _772 = _761 * _294;
    float _779 = (cbMtdParam._m0[15u].w * ((_333 - _772) + ((_761 - _333) * _294))) + _772;
    float _783 = (cbMtdParam._m0[16u].x * _361) + _764;
    float _784 = (cbMtdParam._m0[16u].x * _362) + _765;
    float _787 = fma(_771, _203, fma(_784, _210, _783 * _196));
    float _790 = fma(_771, _204, fma(_784, _211, _783 * _197));
    float _793 = fma(_771, _205, fma(_784, _212, _783 * _198));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3589 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _801 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3611 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3622 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3633 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _805 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _826 = _267 * _825;
    float _827 = _268 * _825;
    float _828 = _269 * _825;
    vec4 _833 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _835 = _833.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1010 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _1016 = (cbMatDynParam._m0[5u].x * _1010) + cbMatDynParam._m0[5u].y;
        float _3644 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1021 = (cbMatDynParam._m0[5u].z * _1010) + cbMatDynParam._m0[5u].w;
        float _3655 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) - _1017)) + _1017) < ((_835 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _870 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _873 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _886 = uint(roundEven(NORMAL.w)) * 13u;
    uint _888 = _886 + 9u;
    uint _889 = _888 + uint(cbMatDynParam._m0[0u].w);
    float _895 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_889].x;
    float _896 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_889].y;
    float _897 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_889].z;
    float _3666 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _3677 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _901 = 1.0 - _805;
    float _902 = _898 * _901;
    float _903 = _899 * _901;
    float _904 = _900 * _901;
    float _909 = (_898 + (-0.039999999105930328369140625)) * _805;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _805;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _805;
    float _912 = _909 + 0.039999999105930328369140625;
    float _914 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    vec4 _924 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _927 = _924.x * TEXCOORD.z;
    float _928 = dot(vec3(_798, _799, _800), vec3(_826, _827, _828));
    float _931 = _928 * 2.0;
    float _935 = (_931 * _798) - _826;
    float _936 = (_931 * _799) - _827;
    float _937 = (_931 * _800) - _828;
    float _941 = abs(dot(vec3(_826, _827, _828), vec3(_798, _799, _800)));
    float _3699 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _943 = sqrt(_801);
    float _956 = exp2((_943 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_943 * 3.0));
    float _962 = (1.0 - _956) * ((_943 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _963 = _956 * _943;
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1328;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_999, cbModelParam._m0[26u].z, fma(_995, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991));
        float _1059 = fma(_999, cbModelParam._m0[27u].z, fma(_995, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991));
        float _1063 = fma(_999, cbModelParam._m0[28u].z, fma(_995, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991));
        float _1086 = _991 + _798;
        float _1087 = _995 + _799;
        float _1088 = _999 + _800;
        float _1098 = fma(_1088, cbModelParam._m0[26u].z, fma(_1087, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1086)) - _1055;
        float _1099 = fma(_1088, cbModelParam._m0[27u].z, fma(_1087, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1086)) - _1059;
        float _1100 = fma(_1088, cbModelParam._m0[28u].z, fma(_1087, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1086)) - _1063;
        float _1104 = inversesqrt(dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100)));
        float _1117 = ((_1104 * _1098) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1104 * _1099) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1104 * _1100) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1156 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1122.x + (-0.5));
        float _1158 = _1156 * (_1122.y + (-0.5));
        float _1159 = _1156 * (_1122.z + (-0.5));
        float _1166 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1129.x + (-0.5));
        float _1168 = _1166 * (_1129.y + (-0.5));
        float _1169 = _1166 * (_1129.z + (-0.5));
        float _1176 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1136.x + (-0.5));
        float _1178 = _1176 * (_1136.y + (-0.5));
        float _1179 = _1176 * (_1136.z + (-0.5));
        float _1186 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1143.x + (-0.5));
        float _1188 = _1186 * (_1143.y + (-0.5));
        float _1189 = _1186 * (_1143.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1210 = (dot(vec3(_798, _799, _800), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1220 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3747 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1222 + 1.0))) + _1227) * _1190;
        float _1237 = _1158 * 0.5;
        float _1238 = _1168 * 0.5;
        float _1239 = _1178 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_798, _799, _800), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3780 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1264 + 1.0))) + _1269) * _1191;
        float _1279 = _1159 * 0.5;
        float _1280 = _1169 * 0.5;
        float _1281 = _1179 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_798, _799, _800), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3813 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1306 + 1.0))) + _1311) * _1192;
        _1328 = _1159;
        _1330 = _1158;
        _1331 = _1157;
        _1332 = _1169;
        _1333 = _1168;
        _1334 = _1167;
        _1335 = _1179;
        _1336 = _1178;
        _1337 = _1177;
        _1338 = _1192;
        _1339 = _1191;
        _1340 = _1190;
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
    }
    else
    {
        _1328 = _1329;
        _1330 = _1329;
        _1331 = _1329;
        _1332 = _1329;
        _1333 = _1329;
        _1334 = _1329;
        _1335 = _1329;
        _1336 = _1329;
        _1337 = _1329;
        _1338 = _1329;
        _1339 = _1329;
        _1340 = _1329;
        _1341 = 0.0;
        _1342 = 0.0;
        _1343 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_999, cbModelParam._m0[30u].z, fma(_995, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _991));
        float _1376 = fma(_999, cbModelParam._m0[31u].z, fma(_995, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _991));
        float _1380 = fma(_999, cbModelParam._m0[32u].z, fma(_995, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _991));
        float _1403 = _991 + _798;
        float _1404 = _995 + _799;
        float _1405 = _999 + _800;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_798, _799, _800), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _3854 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _3865 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _3876 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_798, _799, _800), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _3909 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_798, _799, _800), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _3942 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1329;
        _1642 = _1329;
        _1643 = _1329;
        _1644 = _1329;
        _1645 = _1329;
        _1646 = _1329;
        _1647 = _1329;
        _1648 = _1329;
        _1649 = _1329;
        _1650 = _1329;
        _1651 = _1329;
        _1652 = _1329;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1341)) + _1341;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1342)) + _1342;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1343)) + _1343;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _935 * 0.5;
    float _1710 = _936 * 0.5;
    float _1711 = _937 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1328, _1332, _1335, _1338));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_999, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _991)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_999, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _991)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_999, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _991)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_937, cbModelParam._m0[13u].z, fma(_936, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _935));
        float _1839 = fma(_937, cbModelParam._m0[14u].z, fma(_936, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _935));
        float _1842 = fma(_937, cbModelParam._m0[15u].z, fma(_936, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _935));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1870 = frontier_phi_57_55_ladder;
        }
        float _2228;
        if (_1839 > 0.0)
        {
            _2228 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2228 = frontier_phi_66_62_ladder;
        }
        float _2552;
        if (_1842 > 0.0)
        {
            _2552 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2552 = frontier_phi_80_73_ladder;
        }
        float _2554 = isnan(_2228) ? _1870 : (isnan(_1870) ? _2228 : min(_1870, _2228));
        float _2555 = isnan(_2552) ? _2554 : (isnan(_2554) ? _2552 : min(_2554, _2552));
        float _2559 = (_2555 * _1836) + _1825;
        float _2560 = (_2555 * _1839) + _1829;
        float _2561 = (_2555 * _1842) + _1833;
        float _2562 = _2555 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2562;
        float _2565 = _2562 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2561 > _2565) || ((_2561 < _2563) || ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 < _2563) || (_2559 > _2565))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2561, cbModelParam._m0[9u].z, fma(_2560, cbModelParam._m0[9u].y, _2559 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2561, cbModelParam._m0[10u].z, fma(_2560, cbModelParam._m0[10u].y, _2559 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2561, cbModelParam._m0[11u].z, fma(_2560, cbModelParam._m0[11u].y, _2559 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_56_80_ladder = _2703.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2703.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2703.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_56_80_ladder_2;
        _1860 = frontier_phi_56_80_ladder_1;
        _1862 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_935, _936, _937), _1778);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1955;
    float _1957;
    float _1959;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1919 = fma(_999, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _991)) + cbModelParam._m0[21u].w;
        float _1923 = fma(_999, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _991)) + cbModelParam._m0[22u].w;
        float _1927 = fma(_999, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _991)) + cbModelParam._m0[23u].w;
        float _1930 = fma(_937, cbModelParam._m0[21u].z, fma(_936, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _935));
        float _1933 = fma(_937, cbModelParam._m0[22u].z, fma(_936, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _935));
        float _1936 = fma(_937, cbModelParam._m0[23u].z, fma(_936, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _935));
        float _2233;
        if (_1930 > 0.0)
        {
            _2233 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2233 = frontier_phi_68_64_ladder;
        }
        float _2578;
        if (_1933 > 0.0)
        {
            _2578 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2578 = frontier_phi_82_75_ladder;
        }
        float _2768;
        if (_1936 > 0.0)
        {
            _2768 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2768 = frontier_phi_100_93_ladder;
        }
        float _2770 = isnan(_2578) ? _2233 : (isnan(_2233) ? _2578 : min(_2233, _2578));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _1930) + _1919;
        float _2776 = (_2771 * _1933) + _1923;
        float _2777 = (_2771 * _1936) + _1927;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2779 = (-1.0) - _2778;
        float _2781 = _2778 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2777 > _2781) || ((_2777 < _2779) || ((_2776 > _2781) || ((_2776 < _2779) || ((_2775 < _2779) || (_2775 > _2781))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3019 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2777, cbModelParam._m0[17u].z, fma(_2776, cbModelParam._m0[17u].y, _2775 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2777, cbModelParam._m0[18u].z, fma(_2776, cbModelParam._m0[18u].y, _2775 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2777, cbModelParam._m0[19u].z, fma(_2776, cbModelParam._m0[19u].y, _2775 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_65_100_ladder = _3019.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3019.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3019.z * cbModelParam._m0[1u].z;
        }
        _1955 = frontier_phi_65_100_ladder_1;
        _1957 = frontier_phi_65_100_ladder;
        _1959 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_935, _936, _937), _1867);
        _1955 = _1939.x * cbModelParam._m0[1u].z;
        _1957 = _1939.y * cbModelParam._m0[1u].z;
        _1959 = _1939.z * cbModelParam._m0[1u].z;
    }
    float _1972 = (((_962 * _912) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1955 - _1858)) + _1858);
    float _1974 = (((_962 * _914) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1957 - _1860)) + _1860);
    float _1976 = (((_962 * _915) + _963) * _927) * ((cbModelParam._m0[1u].w * (_1959 - _1862)) + _1862);
    float _1979 = fma(_1976, cbSceneParam._m0[89u].z, fma(_1974, cbSceneParam._m0[89u].y, _1972 * cbSceneParam._m0[89u].x));
    float _1982 = fma(_1976, cbSceneParam._m0[90u].z, fma(_1974, cbSceneParam._m0[90u].y, _1972 * cbSceneParam._m0[90u].x));
    float _1985 = fma(_1976, cbSceneParam._m0[91u].z, fma(_1974, cbSceneParam._m0[91u].y, _1972 * cbSceneParam._m0[91u].x));
    uvec4 _1995 = floatBitsToUint(cbInstanceData._m0[_886 + 5u]);
    uint _1997 = _1995.x * 14u;
    uint _1998 = _1997 + 13u;
    float _2003 = _927 + (-1.0);
    float _2006 = (cbLight._m0[_1998].x * _2003) + 1.0;
    float _2007 = (cbLight._m0[_1998].y * _2003) + 1.0;
    uint _2008 = _1997 + 5u;
    float _2014 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2018 = _1997 + 4u;
    float _2024 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2028 = _1997 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_798, _799, _800));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_798, _799, _800));
    float _4078 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _4089 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2008].x * _2014) * _2049) + ((cbLight._m0[_2018].x * _2024) * _2047);
    float _2057 = ((_2014 * cbLight._m0[_2008].y) * _2049) + ((_2024 * cbLight._m0[_2018].y) * _2047);
    float _2058 = ((_2014 * cbLight._m0[_2008].z) * _2049) + ((_2024 * cbLight._m0[_2018].z) * _2047);
    uint _2060 = _1997 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1997].w)) * _801) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1997].x + _826;
    float _2076 = cbLight._m0[_1997].y + _827;
    float _2077 = cbLight._m0[_1997].z + _828;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_1997].xyz));
    float _4100 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _2089 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2090 = dot(vec3(_798, _799, _800), vec3(_2082, _2083, _2084));
    float _4122 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1997].xyz), vec3(_2082, _2083, _2084));
    float _4133 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _909;
    float _2113 = 0.959999978542327880859375 - _910;
    float _2114 = 0.959999978542327880859375 - _911;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4144 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2145 = _1997 + 9u;
    float _2156 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _801) * 0.949999988079071044921875);
    float _2157 = _2156 * _2156;
    float _2158 = cbLight._m0[_2028].x + _826;
    float _2159 = cbLight._m0[_2028].y + _827;
    float _2160 = cbLight._m0[_2028].z + _828;
    float _2164 = inversesqrt(dot(vec3(_2158, _2159, _2160), vec3(_2158, _2159, _2160)));
    float _2165 = _2164 * _2158;
    float _2166 = _2164 * _2159;
    float _2167 = _2164 * _2160;
    float _2168 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2028].xyz));
    float _4155 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
    float _2171 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _2172 = dot(vec3(_798, _799, _800), vec3(_2165, _2166, _2167));
    float _4166 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _2176 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2165, _2166, _2167));
    float _4177 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2180 = _2157 * _2157;
    float _2184 = ((_2175 * _2175) * (_2180 + (-1.0))) + 1.0;
    float _2191 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
    float _2198 = 1.0 - _2157;
    float _2208 = (0.5 / (((_2089 * ((_2171 * _2198) + _2157)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2198) + _2157) * _2171))) * _2171;
    float _4188 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2180 / ((_2184 * _2184) * 3.141590118408203125));
    float _2220 = (((((_2191 * _2111) + _912) * cbLight._m0[_2145].x) * _2210) * _2014) + (((((_2110 * _2111) + _912) * cbLight._m0[_2060].x) * _2134) * _2024);
    float _2221 = (((((_2191 * _2113) + _914) * cbLight._m0[_2145].y) * _2210) * _2014) + (((((_2110 * _2113) + _914) * cbLight._m0[_2060].y) * _2134) * _2024);
    float _2222 = (((((_2191 * _2114) + _915) * cbLight._m0[_2145].z) * _2210) * _2014) + (((((_2110 * _2114) + _915) * cbLight._m0[_2060].z) * _2134) * _2024);
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_1995.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uvec4 _2323 = texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u));
        uint _2324 = _2323.x;
        uint _2325 = _2292.z;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & _2324) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
            _2441 = 0.0;
        }
        else
        {
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2442;
            float _2615 = 0.0;
            float _2616 = 0.0;
            float _2617 = 0.0;
            float _2618 = 0.0;
            float _2619 = 0.0;
            float _2620 = 0.0;
            uint _2621 = 0u;
            uint _2630;
            bool _2631;
            for (;;)
            {
                _2630 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2621 << 2u)) >> 2u)).x;
                _2631 = _2630 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2631)
                {
                    frontier_phi_95_pred = _2616;
                    frontier_phi_95_pred_1 = _2615;
                    frontier_phi_95_pred_2 = _2617;
                    frontier_phi_95_pred_3 = _2620;
                    frontier_phi_95_pred_4 = _2619;
                    frontier_phi_95_pred_5 = _2618;
                }
                else
                {
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    float _2816;
                    uint _2817;
                    _2811 = _2615;
                    _2812 = _2616;
                    _2813 = _2617;
                    _2814 = _2618;
                    _2815 = _2619;
                    _2816 = _2620;
                    _2817 = _2630;
                    float _2712;
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    for (;;)
                    {
                        uint _2821 = uint(findLSB(_2817)) + (_2621 << 5u);
                        uint _2818 = (_2817 + 4294967295u) & _2817;
                        uint _2823 = _2821 * 48u;
                        vec4 _2837 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2823)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2823 + 3u)).x));
                        uint _2843 = (_2821 * 48u) + 4u;
                        vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2843)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2843 + 3u)).x));
                        uint _2862 = (_2821 * 48u) + 8u;
                        vec3 _2873 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2862)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2862 + 2u)).x));
                        float _2877 = _2837.x - _2278;
                        float _2878 = _2837.y - _2279;
                        float _2879 = _2837.z - _2280;
                        float _2880 = dot(vec3(_2877, _2878, _2879), vec3(_2877, _2878, _2879));
                        float _2883 = inversesqrt(_2880);
                        float _2884 = _2883 * _2877;
                        float _2885 = _2883 * _2878;
                        float _2886 = _2883 * _2879;
                        float _2887 = dot(vec3(_867, _870, _873), vec3(_2884, _2885, _2886));
                        float _2892 = 1.0 - (_2880 * _2837.w);
                        float _4209 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
                        float _2893 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2894 = sqrt(_2880) * _2856.w;
                        float _2897 = 1.39999997615814208984375 / (_2894 + 1.39999997615814208984375);
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2887) + _2898;
                        float _2904 = _2894 * _2894;
                        float _2908 = ((isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0))) * _2893) / ((_2904 * 0.699999988079071044921875) + 1.0);
                        float _2912 = (-0.0) - _2278;
                        float _2913 = (-0.0) - _2279;
                        float _2914 = (-0.0) - _2280;
                        float _2918 = inversesqrt(dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914)));
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2929 = exp2(log2(1.0 / ((_2904 * 3.5) + 5.0)) * 0.25);
                        float _2930 = 1.0 - _943;
                        float _2937 = sqrt(1.0 - ((1.0 - (_2930 * _2930)) * (1.0 - (_2929 * _2929))));
                        float _2938 = _2937 * _2937;
                        float _2939 = _2938 * _2938;
                        float _2940 = _2919 + _2884;
                        float _2941 = _2920 + _2885;
                        float _2942 = _2921 + _2886;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2950 = dot(vec3(_867, _870, _873), vec3(_2919, _2920, _2921));
                        float _4225 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2953 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2954 = dot(vec3(_867, _870, _873), vec3(_2946 * _2940, _2946 * _2941, _2946 * _2942));
                        float _4236 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                        float _2961 = ((_2957 * _2957) * (_2939 + (-1.0))) + 1.0;
                        float _2962 = _2897 * _2938;
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2887) + _2963;
                        float _4247 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2967 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2968 = 1.0 - _2938;
                        float _2978 = (0.5 / (((_2967 * ((_2953 * _2968) + _2938)) + 9.9999999392252902907785028219223e-09) + (((_2967 * _2968) + _2938) * _2953))) * _2967;
                        float _4258 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2989 = (((_2939 * 3.1415927410125732421875) * (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) / ((_2961 * _2961) * ((_2904 * 2.1991131305694580078125) + 3.141590118408203125))) * _2893;
                        _2715 = (_2908 * _2856.x) + _2814;
                        _2716 = (_2908 * _2856.y) + _2815;
                        _2717 = (_2908 * _2856.z) + _2816;
                        _2712 = (_2989 * _2873.x) + _2811;
                        _2713 = (_2989 * _2873.y) + _2812;
                        _2714 = (_2989 * _2873.z) + _2813;
                        if (_2818 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2811 = _2712;
                            _2812 = _2713;
                            _2813 = _2714;
                            _2814 = _2715;
                            _2815 = _2716;
                            _2816 = _2717;
                            _2817 = _2818;
                        }
                    }
                    frontier_phi_95_pred = _2713;
                    frontier_phi_95_pred_1 = _2712;
                    frontier_phi_95_pred_2 = _2714;
                    frontier_phi_95_pred_3 = _2717;
                    frontier_phi_95_pred_4 = _2716;
                    frontier_phi_95_pred_5 = _2715;
                }
                _2434 = frontier_phi_95_pred;
                _2432 = frontier_phi_95_pred_1;
                _2436 = frontier_phi_95_pred_2;
                _2442 = frontier_phi_95_pred_3;
                _2440 = frontier_phi_95_pred_4;
                _2438 = frontier_phi_95_pred_5;
                uint _2622 = _2621 + 1u;
                if (_2622 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2615 = _2432;
                    _2616 = _2434;
                    _2617 = _2436;
                    _2618 = _2438;
                    _2619 = _2440;
                    _2620 = _2442;
                    _2621 = _2622;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
            _2441 = _2442;
        }
        uvec4 _2445 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2446 = _2445.z;
        uint _2448 = (_2446 >> 8u) & 15u;
        float _2583;
        float _2585;
        float _2587;
        float _2589;
        float _2591;
        float _2593;
        if (((4294967295u << _2448) & _2324) == 0u)
        {
            _2583 = _2431;
            _2585 = _2433;
            _2587 = _2435;
            _2589 = _2437;
            _2591 = _2439;
            _2593 = _2441;
        }
        else
        {
            float _2608 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _2609 = _2608 * _2278;
            float _2610 = _2608 * _2279;
            float _2611 = _2608 * _2280;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2448 < ((_2446 >> 12u) & 15u))
            {
                float _2584;
                float _2586;
                float _2588;
                float _2590;
                float _2592;
                float _2594;
                float _2794 = _2431;
                float _2795 = _2433;
                float _2796 = _2435;
                float _2797 = _2437;
                float _2798 = _2439;
                float _2799 = _2441;
                uint _2800 = _2448;
                uint _2809;
                bool _2810;
                for (;;)
                {
                    _2809 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2800 << 2u)) >> 2u)).x;
                    _2810 = _2809 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2810)
                    {
                        frontier_phi_109_pred = _2795;
                        frontier_phi_109_pred_1 = _2794;
                        frontier_phi_109_pred_2 = _2799;
                        frontier_phi_109_pred_3 = _2798;
                        frontier_phi_109_pred_4 = _2797;
                        frontier_phi_109_pred_5 = _2796;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3037 = _2794;
                        float _3038 = _2795;
                        float _3039 = _2796;
                        float _3040 = _2797;
                        float _3041 = _2798;
                        float _3042 = _2799;
                        uint _3043 = _2809;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3112;
                        vec4 _3127;
                        float _3173;
                        bool _3174;
                        for (;;)
                        {
                            uint _3054 = ((_2800 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3099 = (_3054 * 40u) + 16u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3114 = (_3054 * 40u) + 20u;
                            _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            uint _3129 = (_3054 * 40u) + 24u;
                            vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3148 = (_3054 * 40u) + 28u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            _3173 = fma(_2280, _3161.z, fma(_2279, _3161.y, _3161.x * _2278)) + _3161.w;
                            _3174 = !((fma(_2280, _3142.z, fma(_2279, _3142.y, _3142.x * _2278)) + _3142.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3174)
                            {
                                float _3201 = _3069.x - _2278;
                                float _3202 = _3069.y - _2279;
                                float _3203 = _3069.z - _2280;
                                float _3204 = dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203));
                                float _3207 = inversesqrt(_3204);
                                float _3208 = _3207 * _3201;
                                float _3209 = _3207 * _3202;
                                float _3210 = _3207 * _3203;
                                float _3214 = 1.0 - (_3204 / (_3070 * _3070));
                                float _4269 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3219 = sqrt(_3204) * _3085.w;
                                float _3221 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                                float _3222 = _3221 * _3221;
                                float _3225 = ((1.0 - _3222) * dot(vec3(_3208, _3209, _3210), vec3(_867, _870, _873))) + _3222;
                                float _3228 = _3219 * _3219;
                                float _3232 = (fma(_2280, _3112.z, fma(_2279, _3112.y, _3112.x * _2278)) + _3112.w) / _3173;
                                float _3233 = (fma(_2280, _3127.z, fma(_2279, _3127.y, _3127.x * _2278)) + _3127.w) / _3173;
                                float _3237 = 1.0 - dot(vec2(_3232, _3233), vec2(_3232, _3233));
                                float _4285 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                                float _3238 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3239 = _3238 * (((isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))) * _3215) / ((_3228 * 0.699999988079071044921875) + 1.0));
                                float _3251 = exp2(log2(1.0 / ((_3228 * 3.5) + 5.0)) * 0.25);
                                float _3252 = 1.0 - _943;
                                float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                                float _3260 = _3259 * _3259;
                                float _3261 = _3260 * _3260;
                                float _3262 = _3208 - _2609;
                                float _3263 = _3209 - _2610;
                                float _3264 = _3210 - _2611;
                                float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                                float _3272 = dot(vec3(_867, _870, _873), vec3((-0.0) - _2609, (-0.0) - _2610, (-0.0) - _2611));
                                float _4296 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                                float _3275 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3276 = dot(vec3(_867, _870, _873), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                                float _4307 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                                float _3279 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                                float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                                float _3284 = _3221 * _3260;
                                float _3285 = _3284 * _3284;
                                float _3291 = ((1.0 - _3285) * dot(vec3(_867, _870, _873), vec3(_3208, _3209, _3210))) + _3285;
                                float _4318 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3292 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                                float _3293 = 1.0 - _3260;
                                float _3303 = (0.5 / (((_3292 * ((_3275 * _3293) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3260) * _3275))) * _3292;
                                float _4329 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3313 = (_3238 * _3215) * (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3283 * _3283) * ((_3228 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3239 * _3085.y;
                                frontier_phi_115_pred_1 = _3239 * _3085.x;
                                frontier_phi_115_pred_2 = _3313 * _3097.z;
                                frontier_phi_115_pred_3 = _3313 * _3097.y;
                                frontier_phi_115_pred_4 = _3313 * _3097.x;
                                frontier_phi_115_pred_5 = _3239 * _3085.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3321 = frontier_phi_115_pred;
                            _3320 = frontier_phi_115_pred_1;
                            _3319 = frontier_phi_115_pred_2;
                            _3318 = frontier_phi_115_pred_3;
                            _3317 = frontier_phi_115_pred_4;
                            _3322 = frontier_phi_115_pred_5;
                            _3027 = _3320 + _3040;
                            _3028 = _3321 + _3041;
                            _3029 = _3322 + _3042;
                            _3024 = _3317 + _3037;
                            _3025 = _3318 + _3038;
                            _3026 = _3319 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3025;
                        frontier_phi_109_pred_1 = _3024;
                        frontier_phi_109_pred_2 = _3029;
                        frontier_phi_109_pred_3 = _3028;
                        frontier_phi_109_pred_4 = _3027;
                        frontier_phi_109_pred_5 = _3026;
                    }
                    _2586 = frontier_phi_109_pred;
                    _2584 = frontier_phi_109_pred_1;
                    _2594 = frontier_phi_109_pred_2;
                    _2592 = frontier_phi_109_pred_3;
                    _2590 = frontier_phi_109_pred_4;
                    _2588 = frontier_phi_109_pred_5;
                    uint _2801 = _2800 + 1u;
                    if (_2801 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2794 = _2584;
                        _2795 = _2586;
                        _2796 = _2588;
                        _2797 = _2590;
                        _2798 = _2592;
                        _2799 = _2594;
                        _2800 = _2801;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2584;
                frontier_phi_84_85_ladder_1 = _2588;
                frontier_phi_84_85_ladder_2 = _2594;
                frontier_phi_84_85_ladder_3 = _2592;
                frontier_phi_84_85_ladder_4 = _2590;
                frontier_phi_84_85_ladder_5 = _2586;
            }
            else
            {
                frontier_phi_84_85_ladder = _2431;
                frontier_phi_84_85_ladder_1 = _2435;
                frontier_phi_84_85_ladder_2 = _2441;
                frontier_phi_84_85_ladder_3 = _2439;
                frontier_phi_84_85_ladder_4 = _2437;
                frontier_phi_84_85_ladder_5 = _2433;
            }
            _2583 = frontier_phi_84_85_ladder;
            _2585 = frontier_phi_84_85_ladder_5;
            _2587 = frontier_phi_84_85_ladder_1;
            _2589 = frontier_phi_84_85_ladder_4;
            _2591 = frontier_phi_84_85_ladder_3;
            _2593 = frontier_phi_84_85_ladder_2;
        }
        float _2598 = isnan(1.0) ? _927 : (isnan(_927) ? 1.0 : min(_927, 1.0));
        _2337 = (_2598 * _2589) + _2056;
        _2339 = (_2598 * _2591) + _2057;
        _2341 = (_2598 * _2593) + _2058;
        _2343 = ((_2583 * _912) * _2598) + _2220;
        _2345 = ((_2585 * _914) * _2598) + _2221;
        _2347 = ((_2587 * _915) * _2598) + _2222;
    }
    else
    {
        _2337 = _2056;
        _2339 = _2057;
        _2341 = _2058;
        _2343 = _2220;
        _2345 = _2221;
        _2347 = _2222;
    }
    uint _2353 = _888 + uint(cbMatDynParam._m0[0u].w);
    float _4345 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4356 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4367 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2378 = (((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2337 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _927))) + ((_2343 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2353].x * ((_719 * ((_675 - _603) - (_675 * _294))) + _603));
    float _2380 = ((cbInstanceData._m0[_2353].y * ((_719 * ((_676 - _604) - (_676 * _294))) + _604)) + ((_2345 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2339 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _927)));
    float _2382 = ((cbInstanceData._m0[_2353].z * ((_719 * ((_677 - _605) - (_677 * _294))) + _605)) + ((_2347 + ((isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0))) * _1767)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_2341 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _927)));
    float _2383 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2384 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2385 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    uint _2386 = _886 + 6u;
    float _2394 = _848 / cbSceneParam._m0[86u].x;
    float _2395 = _849 / cbSceneParam._m0[86u].y;
    vec4 _2409 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2411 = _2409.x;
    float _2412 = _2409.y;
    float _2413 = _2409.z;
    float _2414 = _2409.w;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2456 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2457 = _2456 / _821;
        float _2468 = _2457 * _267;
        float _2469 = _268 * _2457;
        float _2470 = (-0.0) - _2469;
        float _2471 = _2457 * _269;
        float _2473 = (cbSceneParam._m0[77u].w * _2470) / _2456;
        float _2474 = _2473 + cbSceneParam._m0[79u].w;
        float _2475 = cbSceneParam._m0[79u].w - _2469;
        float _2481 = sqrt(((_2468 * _2468) + (_2469 * _2469)) + (_2471 * _2471));
        float _2484 = (1.0 - (cbSceneParam._m0[77u].w / _2456)) * _2481;
        float _2490 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2492 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2725;
        if (abs((_2470 - _2473) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2725 = ((((_2474 > 0.0) ? exp2(_2490 * _2474) : (2.0 - exp2(_2492 * _2474))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2484;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : max(_2474, _2475));
            float _2646 = isnan(_2475) ? _2474 : (isnan(_2474) ? _2475 : min(_2474, _2475));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2725 = ((abs(_2481 / _2470) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2490 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2490 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2492 * _2655) - exp2(_2492 * _2656)) * _2644))) + (_2484 * cbSceneParam._m0[80u].z);
        }
        vec4 _2727 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2394, _2395, 1.0), 0.0);
        float _2736 = exp2((_2725 * (-1.44269502162933349609375)) * (1.0 - _2727.w));
        float _2737 = log2(_2736);
        float _2753 = log2(_2414);
        _2494 = (exp2(_2753 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].x)) * _2727.x) / cbSceneParam._m0[78u].x)) + _2411;
        _2496 = (exp2(_2753 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].y)) * _2727.y) / cbSceneParam._m0[78u].y)) + _2412;
        _2498 = (exp2(_2753 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2737 * cbSceneParam._m0[78u].z)) * _2727.z) / cbSceneParam._m0[78u].z)) + _2413;
        _2500 = _2736 * _2414;
    }
    else
    {
        _2494 = _2411;
        _2496 = _2412;
        _2498 = _2413;
        _2500 = _2414;
    }
    bool _2763;
    vec4 _2510;
    vec4 _2532;
    float _2534;
    float _2538;
    float _2539;
    float _2540;
    float _2541;
    bool _2551;
    for (;;)
    {
        _2510 = cbMatDynParam._m0[0u];
        float _2512 = roundEven(_2510.y);
        bool _2513 = _2512 == 3.0;
        float _2514 = log2(_2500);
        float _2521 = exp2(_2514 * cbSceneParam._m0[78u].x) * _2383;
        float _2522 = exp2(_2514 * cbSceneParam._m0[78u].y) * _2384;
        float _2523 = exp2(_2514 * cbSceneParam._m0[78u].z) * _2385;
        float _2530 = _835 + (-0.5);
        _2532 = cbMtdParam._m0[1u];
        _2534 = _2532.y * _2530;
        float _2537 = (_2512 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2538 = _2537 * (_2513 ? _2521 : (_2521 + (cbSceneParam._m0[72u].w * _2494)));
        _2539 = _2537 * (_2513 ? _2522 : (_2522 + (cbSceneParam._m0[72u].w * _2496)));
        _2540 = _2537 * (_2513 ? _2523 : (_2523 + (cbSceneParam._m0[72u].w * _2498)));
        _2541 = _2530 * 0.999000012874603271484375;
        _2551 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2551)
        {
            if ((cbInstanceData._m0[_886 + 7u].x + _2541) < 0.5)
            {
                _2763 = true;
                break;
            }
        }
        uint _2679 = _888 + uint(_2510.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2541) < 0.5))
        {
            _2763 = true;
            break;
        }
        if ((_2534 + 1.0) < _2532.x)
        {
            _2763 = true;
            break;
        }
        _2763 = false;
        break;
    }
    float _2994;
    if (_2763)
    {
        discard_state = true;
        _2994 = 0.0;
    }
    else
    {
        _2994 = cbInstanceData._m0[_2386].w;
    }
    SV_Target.x = _2538;
    SV_Target.y = _2539;
    SV_Target.z = _2540;
    SV_Target.w = _2994;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2386].w;
    discard_exit();
}


