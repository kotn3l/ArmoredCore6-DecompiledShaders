#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1344;
float _3798;
float _3799;
float _3800;
float _3801;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _298 = _292.w;
    float _311 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _298) + cbMtdParam._m0[11u].x) * _292.x;
    float _313 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _298) + cbMtdParam._m0[11u].y) * _292.y;
    float _315 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _298) + cbMtdParam._m0[11u].z) * _292.z;
    vec4 _333 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _337 = _333.z;
    float _360 = (_333.x * 2.0) + (-1.0);
    float _362 = (_333.y * 2.0) + (-1.0);
    float _365 = _360 - (_360 * _298);
    float _366 = _362 - (_362 * _298);
    float _375 = cbMtdParam._m0[22u].y + _271;
    float _376 = cbMtdParam._m0[22u].z + _272;
    float _377 = cbMtdParam._m0[22u].w + _273;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_200, _201, _202));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_214, _215, _216));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _400 = _397 * _393;
    float _401 = (_397 * _391) + (_365 * cbMtdParam._m0[20u].y);
    float _402 = (_397 * _392) + (_366 * cbMtdParam._m0[20u].z);
    float _403 = _401 * cbMtdParam._m0[19u].x;
    float _404 = _402 * cbMtdParam._m0[18u].w;
    float _405 = fract(TEXCOORD.x);
    float _406 = fract(TEXCOORD.y);
    float _412;
    if (_403 > 0.0)
    {
        _412 = (1.0 - _405) / _403;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_403 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _405) / _403;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _412 = frontier_phi_3_2_ladder;
    }
    float _420;
    if (_404 > 0.0)
    {
        _420 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _420 = frontier_phi_7_6_ladder;
    }
    bool _422 = _400 > 0.0;
    float _424 = _422 ? (cbMtdParam._m0[15u].x / _400) : 5000.0;
    float _425 = isnan(_420) ? _412 : (isnan(_412) ? _420 : min(_412, _420));
    float _426 = isnan(_424) ? _425 : (isnan(_425) ? _424 : min(_425, _424));
    float _430 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _431 = _405 + (-0.5);
    float _434 = _406 + (-0.5);
    float _437 = ((_426 * _400) + _430) / _430;
    vec4 _462 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_431 + (_426 * _403)) / _437) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_434 + (_426 * _404)) / _437) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _464 = _462.x;
    float _465 = _462.y;
    float _466 = _462.z;
    float _478 = (_464 - (_464 * _298)) * cbMtdParam._m0[9u].x;
    float _479 = (_465 - (_465 * _298)) * cbMtdParam._m0[9u].y;
    float _480 = cbMtdParam._m0[9u].z * (_466 - (_466 * _298));
    float _498 = _401 * cbMtdParam._m0[21u].x;
    float _499 = _402 * cbMtdParam._m0[20u].w;
    bool _500 = _498 > 0.0;
    float _505;
    if (_500)
    {
        _505 = (1.0 - _405) / _498;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _405) / _498;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _505 = frontier_phi_11_10_ladder;
    }
    bool _507 = _499 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _406) / _499;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _406) / _499;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _512 = frontier_phi_15_14_ladder;
    }
    float _515 = _422 ? (cbMtdParam._m0[16u].z / _400) : 5000.0;
    float _516 = isnan(_512) ? _505 : (isnan(_505) ? _512 : min(_505, _512));
    float _517 = isnan(_515) ? _516 : (isnan(_516) ? _515 : min(_516, _515));
    float _521 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _525 = ((_517 * _400) + _521) / _521;
    float _530 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _532 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _548 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_431 + (_517 * _498)) / _525) + 0.5) + _530) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_434 + (_517 * _499)) / _525) + 0.5) + _532) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _553 = _548.x * cbMtdParam._m0[10u].x;
    float _554 = _548.y * cbMtdParam._m0[10u].y;
    float _555 = _548.z * cbMtdParam._m0[10u].z;
    float _563;
    if (_500)
    {
        _563 = (1.0 - _405) / _498;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _405) / _498;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _563 = frontier_phi_19_18_ladder;
    }
    float _569;
    if (_507)
    {
        _569 = (1.0 - _406) / _499;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _406) / _499;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _569 = frontier_phi_23_22_ladder;
    }
    float _571 = isnan(_569) ? _563 : (isnan(_563) ? _569 : min(_563, _569));
    float _572 = isnan(_515) ? _571 : (isnan(_571) ? _515 : min(_571, _515));
    float _579 = ((_572 * _400) + _521) / _521;
    vec4 _593 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_431 + (_572 * _498)) / _579) + 0.5) + _530) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_434 + (_572 * _499)) / _579) + 0.5) + _532) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _595 = _593.w;
    float _597 = _595 - (_595 * _298);
    float _607 = (_597 * ((_553 - _478) - (_553 * _298))) + _478;
    float _608 = (_597 * ((_554 - _479) - (_554 * _298))) + _479;
    float _609 = (_597 * ((_555 - _480) - (_555 * _298))) + _480;
    float _623 = _401 * cbMtdParam._m0[21u].z;
    float _624 = _402 * cbMtdParam._m0[21u].y;
    bool _625 = _623 > 0.0;
    float _630;
    if (_625)
    {
        _630 = (1.0 - _405) / _623;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_623 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _405) / _623;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _630 = frontier_phi_27_26_ladder;
    }
    bool _632 = _624 > 0.0;
    float _637;
    if (_632)
    {
        _637 = (1.0 - _406) / _624;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_624 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _406) / _624;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _637 = frontier_phi_31_30_ladder;
    }
    float _640 = _422 ? (cbMtdParam._m0[18u].x / _400) : 5000.0;
    float _641 = isnan(_637) ? _630 : (isnan(_630) ? _637 : min(_630, _637));
    float _642 = isnan(_640) ? _641 : (isnan(_641) ? _640 : min(_641, _640));
    float _646 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _650 = ((_642 * _400) + _646) / _646;
    float _655 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _657 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _674 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_431 + (_642 * _623)) / _650) + 0.5) + _655) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_434 + (_642 * _624)) / _650) + 0.5) + _657) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _679 = _674.x * cbMtdParam._m0[14u].x;
    float _680 = _674.y * cbMtdParam._m0[14u].y;
    float _681 = _674.z * cbMtdParam._m0[14u].z;
    float _689;
    if (_625)
    {
        _689 = (1.0 - _405) / _623;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_623 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _405) / _623;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _689 = frontier_phi_35_34_ladder;
    }
    float _695;
    if (_632)
    {
        _695 = (1.0 - _406) / _624;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_624 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _406) / _624;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _695 = frontier_phi_39_38_ladder;
    }
    float _697 = isnan(_695) ? _689 : (isnan(_689) ? _695 : min(_689, _695));
    float _698 = isnan(_640) ? _697 : (isnan(_697) ? _640 : min(_697, _640));
    float _705 = ((_698 * _400) + _646) / _646;
    vec4 _719 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_431 + (_698 * _623)) / _705) + 0.5) + _655) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_434 + (_698 * _624)) / _705) + 0.5) + _657) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _721 = _719.w;
    float _723 = _721 - (_721 * _298);
    float _734 = 0.5 - (_298 * 0.5);
    float _744 = (((_607 - _311) + (_723 * ((_679 - _607) - (_679 * _298)))) * _734) + _311;
    float _745 = (((_608 - _313) + (_723 * ((_680 - _608) - (_680 * _298)))) * _734) + _313;
    float _746 = (((_609 - _315) + (_723 * ((_681 - _609) - (_681 * _298)))) * _734) + _315;
    vec4 _758 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _760 = _758.x;
    vec4 _772 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _776 = _772.z;
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3860 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _786 = sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))));
    float _787 = _776 * _298;
    float _794 = (cbMtdParam._m0[15u].w * ((_337 - _787) + ((_776 - _337) * _298))) + _787;
    float _798 = (cbMtdParam._m0[16u].x * _365) + _779;
    float _799 = (cbMtdParam._m0[16u].x * _366) + _780;
    float _802 = fma(_786, _207, fma(_799, _214, _798 * _200));
    float _805 = fma(_786, _208, fma(_799, _215, _798 * _201));
    float _808 = fma(_786, _209, fma(_799, _216, _798 * _202));
    float _812 = inversesqrt(dot(vec3(_802, _805, _808), vec3(_802, _805, _808)));
    float _813 = _812 * _802;
    float _814 = _812 * _805;
    float _815 = _812 * _808;
    float _3871 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _816 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _3893 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _3904 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3915 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _820 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _836 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _841 = _271 * _840;
    float _842 = _272 * _840;
    float _843 = _273 * _840;
    vec4 _848 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _850 = _848.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1025 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _1031 = (cbMatDynParam._m0[5u].x * _1025) + cbMatDynParam._m0[5u].y;
        float _3926 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1036 = (cbMatDynParam._m0[5u].z * _1025) + cbMatDynParam._m0[5u].w;
        float _3937 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) - _1032)) + _1032) < ((_850 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _863 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _864 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _882 = fma(_815, cbSceneParam._m0[5u].z, fma(_814, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _813));
    float _885 = fma(_815, cbSceneParam._m0[6u].z, fma(_814, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _813));
    float _888 = fma(_815, cbSceneParam._m0[7u].z, fma(_814, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _813));
    uint _901 = uint(roundEven(NORMAL.w)) * 13u;
    uint _903 = _901 + 9u;
    uint _904 = _903 + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_904].z;
    float _3948 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _916 = 1.0 - _820;
    float _917 = _913 * _916;
    float _918 = _914 * _916;
    float _919 = _915 * _916;
    float _924 = (_913 + (-0.039999999105930328369140625)) * _820;
    float _925 = (_914 + (-0.039999999105930328369140625)) * _820;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _820;
    float _927 = _924 + 0.039999999105930328369140625;
    float _929 = _925 + 0.039999999105930328369140625;
    float _930 = _926 + 0.039999999105930328369140625;
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _863, cbSceneParam._m0[86u].y * _864));
    float _942 = _939.x * TEXCOORD.z;
    float _943 = dot(vec3(_813, _814, _815), vec3(_841, _842, _843));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _813) - _841;
    float _951 = (_946 * _814) - _842;
    float _952 = (_946 * _815) - _843;
    float _956 = abs(dot(vec3(_841, _842, _843), vec3(_813, _814, _815)));
    float _3981 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_816);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _977 = (1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _978 = _971 * _958;
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1343;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1070 = fma(_1014, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006));
        float _1074 = fma(_1014, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006));
        float _1078 = fma(_1014, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006));
        float _1101 = _1006 + _813;
        float _1102 = _1010 + _814;
        float _1103 = _1014 + _815;
        float _1113 = fma(_1103, cbModelParam._m0[26u].z, fma(_1102, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1101)) - _1070;
        float _1114 = fma(_1103, cbModelParam._m0[27u].z, fma(_1102, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1101)) - _1074;
        float _1115 = fma(_1103, cbModelParam._m0[28u].z, fma(_1102, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1101)) - _1078;
        float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
        float _1132 = ((_1119 * _1113) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1070 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1133 = ((_1119 * _1114) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1074 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1134 = ((_1119 * _1115) / cbModelParam._m0[34u].z) + ((((((_1078 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1132, _1133, _1134), 0.0);
        float _1171 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1137.x + (-0.5));
        float _1173 = _1171 * (_1137.y + (-0.5));
        float _1174 = _1171 * (_1137.z + (-0.5));
        float _1181 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1144.x + (-0.5));
        float _1183 = _1181 * (_1144.y + (-0.5));
        float _1184 = _1181 * (_1144.z + (-0.5));
        float _1191 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1192 = _1191 * (_1151.x + (-0.5));
        float _1193 = _1191 * (_1151.y + (-0.5));
        float _1194 = _1191 * (_1151.z + (-0.5));
        float _1201 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1158.x + (-0.5));
        float _1203 = _1201 * (_1158.y + (-0.5));
        float _1204 = _1201 * (_1158.z + (-0.5));
        float _1205 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1206 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = _1172 * 0.5;
        float _1209 = _1182 * 0.5;
        float _1210 = _1192 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1225 = (dot(vec3(_813, _814, _815), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1235 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1205 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4029 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1237 + 1.0))) + _1242) * _1205;
        float _1252 = _1173 * 0.5;
        float _1253 = _1183 * 0.5;
        float _1254 = _1193 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_813, _814, _815), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1206 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _4062 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1279 + 1.0))) + _1284) * _1206;
        float _1294 = _1174 * 0.5;
        float _1295 = _1184 * 0.5;
        float _1296 = _1194 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_813, _814, _815), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4095 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1321 + 1.0))) + _1326) * _1207;
        _1343 = _1174;
        _1345 = _1173;
        _1346 = _1172;
        _1347 = _1184;
        _1348 = _1183;
        _1349 = _1182;
        _1350 = _1194;
        _1351 = _1193;
        _1352 = _1192;
        _1353 = _1207;
        _1354 = _1206;
        _1355 = _1205;
        _1356 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1357 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1358 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1344;
        _1345 = _1344;
        _1346 = _1344;
        _1347 = _1344;
        _1348 = _1344;
        _1349 = _1344;
        _1350 = _1344;
        _1351 = _1344;
        _1352 = _1344;
        _1353 = _1344;
        _1354 = _1344;
        _1355 = _1344;
        _1356 = 0.0;
        _1357 = 0.0;
        _1358 = 0.0;
    }
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1387 = fma(_1014, cbModelParam._m0[30u].z, fma(_1010, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1006));
        float _1391 = fma(_1014, cbModelParam._m0[31u].z, fma(_1010, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1006));
        float _1395 = fma(_1014, cbModelParam._m0[32u].z, fma(_1010, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1006));
        float _1418 = _1006 + _813;
        float _1419 = _1010 + _814;
        float _1420 = _1014 + _815;
        float _1430 = fma(_1420, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1418)) - _1387;
        float _1431 = fma(_1420, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1418)) - _1391;
        float _1432 = fma(_1420, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1418)) - _1395;
        float _1436 = inversesqrt(dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432)));
        float _1449 = ((_1436 * _1430) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1387 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1436 * _1431) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1391 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1436 * _1432) / cbModelParam._m0[35u].z) + ((((((_1395 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1449, _1450, _1451), 0.0);
        float _1486 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1453.x + (-0.5));
        float _1488 = _1486 * (_1453.y + (-0.5));
        float _1489 = _1486 * (_1453.z + (-0.5));
        float _1496 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1460.x + (-0.5));
        float _1498 = _1496 * (_1460.y + (-0.5));
        float _1499 = _1496 * (_1460.z + (-0.5));
        float _1506 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1467.x + (-0.5));
        float _1508 = _1506 * (_1467.y + (-0.5));
        float _1509 = _1506 * (_1467.z + (-0.5));
        float _1516 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1474.x + (-0.5));
        float _1518 = _1516 * (_1474.y + (-0.5));
        float _1519 = _1516 * (_1474.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_813, _814, _815), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4158 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1550 + 1.0))) + _1555) * _1520;
        float _1565 = _1488 * 0.5;
        float _1566 = _1498 * 0.5;
        float _1567 = _1508 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_813, _814, _815), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4191 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1592 + 1.0))) + _1597) * _1521;
        float _1607 = _1489 * 0.5;
        float _1608 = _1499 * 0.5;
        float _1609 = _1509 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_813, _814, _815), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4224 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1634 + 1.0))) + _1639) * _1522;
        _1656 = _1489;
        _1657 = _1488;
        _1658 = _1487;
        _1659 = _1499;
        _1660 = _1498;
        _1661 = _1497;
        _1662 = _1509;
        _1663 = _1508;
        _1664 = _1507;
        _1665 = _1522;
        _1666 = _1521;
        _1667 = _1520;
        _1668 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1669 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1670 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1344;
        _1657 = _1344;
        _1658 = _1344;
        _1659 = _1344;
        _1660 = _1344;
        _1661 = _1344;
        _1662 = _1344;
        _1663 = _1344;
        _1664 = _1344;
        _1665 = _1344;
        _1666 = _1344;
        _1667 = _1344;
        _1668 = 0.0;
        _1669 = 0.0;
        _1670 = 0.0;
    }
    float _1680 = (cbModelParam._m0[1u].x * (_1668 - _1356)) + _1356;
    float _1681 = (cbModelParam._m0[1u].x * (_1669 - _1357)) + _1357;
    float _1682 = (cbModelParam._m0[1u].x * (_1670 - _1358)) + _1358;
    float _1703 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1680));
    float _1724 = _950 * 0.5;
    float _1725 = _951 * 0.5;
    float _1726 = _952 * 0.5;
    float _1727 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1658, _1661, _1664, _1667));
    float _1730 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1657, _1660, _1663, _1666));
    float _1733 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1656, _1659, _1662, _1665));
    float _1767;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1740 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1343, _1347, _1350, _1353));
        float _1744 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1345, _1348, _1351, _1354));
        float _1748 = dot(vec4(_1724, _1725, _1726, 1.0), vec4(_1346, _1349, _1352, _1355));
        float _1755 = dot(vec4(cbModelParam._m0[39u]), vec4(_1724, _1725, _1726, 1.0));
        _1767 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1767 = 1.0;
    }
    float _1778;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1769 = dot(vec4(cbModelParam._m0[40u]), vec4(_1724, _1725, _1726, 1.0));
        _1778 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1778 = 1.0;
    }
    float _1782 = (_1778 * cbModelParam._m0[1u].x) + (_1767 * (1.0 - cbModelParam._m0[1u].x));
    float _1792 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _816);
    float _1793 = isnan(_1792) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1792 : min(cbModelParam._m0[25u].z, _1792));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1840 = fma(_1014, cbModelParam._m0[13u].z, fma(_1010, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006)) + cbModelParam._m0[13u].w;
        float _1844 = fma(_1014, cbModelParam._m0[14u].z, fma(_1010, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006)) + cbModelParam._m0[14u].w;
        float _1848 = fma(_1014, cbModelParam._m0[15u].z, fma(_1010, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006)) + cbModelParam._m0[15u].w;
        float _1851 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1854 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1857 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1885;
        if (_1851 > 0.0)
        {
            _1885 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1885 = frontier_phi_57_55_ladder;
        }
        float _2055;
        if (_1854 > 0.0)
        {
            _2055 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2055 = frontier_phi_66_62_ladder;
        }
        float _2510;
        if (_1857 > 0.0)
        {
            _2510 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2510 = frontier_phi_78_73_ladder;
        }
        float _2512 = isnan(_2055) ? _1885 : (isnan(_1885) ? _2055 : min(_1885, _2055));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1851) + _1840;
        float _2518 = (_2513 * _1854) + _1844;
        float _2519 = (_2513 * _1857) + _1848;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1793);
            frontier_phi_56_78_ladder = _2753.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2753.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2753.x * cbModelParam._m0[1u].y;
        }
        _1873 = frontier_phi_56_78_ladder_2;
        _1875 = frontier_phi_56_78_ladder_1;
        _1877 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1861 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1793);
        _1873 = _1861.x * cbModelParam._m0[1u].y;
        _1875 = _1861.y * cbModelParam._m0[1u].y;
        _1877 = _1861.z * cbModelParam._m0[1u].y;
    }
    float _1881 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _816);
    float _1882 = isnan(_1881) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1881 : min(cbModelParam._m0[25u].w, _1881));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1014, cbModelParam._m0[21u].z, fma(_1010, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1014, cbModelParam._m0[22u].z, fma(_1010, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1014, cbModelParam._m0[23u].z, fma(_1010, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1948 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1951 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2060;
        if (_1945 > 0.0)
        {
            _2060 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2060 = frontier_phi_68_64_ladder;
        }
        float _2537;
        if (_1948 > 0.0)
        {
            _2537 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2537 = frontier_phi_80_75_ladder;
        }
        float _2882;
        if (_1951 > 0.0)
        {
            _2882 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2882 = frontier_phi_92_87_ladder;
        }
        float _2884 = isnan(_2537) ? _2060 : (isnan(_2060) ? _2537 : min(_2060, _2537));
        float _2885 = isnan(_2882) ? _2884 : (isnan(_2884) ? _2882 : min(_2884, _2882));
        float _2889 = (_2885 * _1945) + _1934;
        float _2890 = (_2885 * _1948) + _1938;
        float _2891 = (_2885 * _1951) + _1942;
        float _2892 = _2885 * 9.9999997473787516355514526367188e-05;
        float _2893 = (-1.0) - _2892;
        float _2895 = _2892 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2891 > _2895) || ((_2891 < _2893) || ((_2890 > _2895) || ((_2890 < _2893) || ((_2889 < _2893) || (_2889 > _2895))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3028 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2891, cbModelParam._m0[17u].z, fma(_2890, cbModelParam._m0[17u].y, _2889 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2891, cbModelParam._m0[18u].z, fma(_2890, cbModelParam._m0[18u].y, _2889 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2891, cbModelParam._m0[19u].z, fma(_2890, cbModelParam._m0[19u].y, _2889 * cbModelParam._m0[19u].x))), _1882);
            frontier_phi_65_92_ladder = _3028.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _3028.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _3028.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_65_92_ladder_2;
        _1972 = frontier_phi_65_92_ladder_1;
        _1974 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1882);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_977 * _927) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1970 - _1873)) + _1873);
    float _1989 = (((_977 * _929) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1972 - _1875)) + _1875);
    float _1991 = (((_977 * _930) + _978) * _942) * ((cbModelParam._m0[1u].w * (_1974 - _1877)) + _1877);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2047 = _2034 / _2046;
    float _2048 = _2038 / _2046;
    float _2049 = _2042 / _2046;
    float _2196;
    float _2197;
    float _2198;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2076 = ((uint(_2049 > cbSceneParam._m0[59u].y) + uint(_2049 > cbSceneParam._m0[59u].x)) + uint(_2049 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2077 = _2076 + 43u;
        uint _2085 = _2076 + 44u;
        uint _2093 = _2076 + 45u;
        uint _2101 = _2076 + 46u;
        float _2112 = fma(_2046, cbSceneParam._m0[_2077].w, fma(_2042, cbSceneParam._m0[_2077].z, fma(_2038, cbSceneParam._m0[_2077].y, _2034 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2046, cbSceneParam._m0[_2085].w, fma(_2042, cbSceneParam._m0[_2085].z, fma(_2038, cbSceneParam._m0[_2085].y, _2034 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2046, cbSceneParam._m0[_2101].w, fma(_2042, cbSceneParam._m0[_2101].z, fma(_2038, cbSceneParam._m0[_2101].y, _2034 * cbSceneParam._m0[_2101].x)));
        float _2129 = cbSceneParam._m0[33u].z * _2124;
        float _2131 = cbSceneParam._m0[33u].w * _2124;
        float _2134 = fma(_2046, cbSceneParam._m0[_2093].w, fma(_2042, cbSceneParam._m0[_2093].z, fma(_2038, cbSceneParam._m0[_2093].y, _2034 * cbSceneParam._m0[_2093].x))) / _2124;
        float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
        float _4350 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2189 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2112) / _2124, (_2131 + _2116) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2112) / _2124, (_2116 - _2129) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2129) / _2124, (_2116 - _2131) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2131) / _2124, (_2129 + _2116) / _2124), _2134), 0.0)).x), vec4(0.25)));
        _2196 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
        _2197 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
        _2198 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2196 = 1.0;
        _2197 = 1.0;
        _2198 = 1.0;
    }
    float _2262;
    float _2264;
    float _2266;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2250 = fma(_2046, cbSceneParam._m0[63u].w, fma(_2042, cbSceneParam._m0[63u].z, fma(_2038, cbSceneParam._m0[63u].y, _2034 * cbSceneParam._m0[63u].x)));
        float _2251 = fma(_2046, cbSceneParam._m0[60u].w, fma(_2042, cbSceneParam._m0[60u].z, fma(_2038, cbSceneParam._m0[60u].y, _2034 * cbSceneParam._m0[60u].x))) / _2250;
        float _2252 = fma(_2046, cbSceneParam._m0[61u].w, fma(_2042, cbSceneParam._m0[61u].z, fma(_2038, cbSceneParam._m0[61u].y, _2034 * cbSceneParam._m0[61u].x))) / _2250;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2251 >= cbSceneParam._m0[64u].x) && (_2252 >= cbSceneParam._m0[64u].y)) && (_2251 <= cbSceneParam._m0[64u].z)) && (_2252 <= cbSceneParam._m0[64u].w))
        {
            float _2550 = fma(_2046, cbSceneParam._m0[62u].w, fma(_2042, cbSceneParam._m0[62u].z, fma(_2038, cbSceneParam._m0[62u].y, _2034 * cbSceneParam._m0[62u].x))) / _2250;
            float _2554 = isnan(cbSceneParam._m0[41u].w) ? _2550 : (isnan(_2550) ? cbSceneParam._m0[41u].w : max(_2550, cbSceneParam._m0[41u].w));
            float _2597 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
            float _4366 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
            float _2604 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2251, cbSceneParam._m0[33u].w + _2252), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2251, _2252 - cbSceneParam._m0[33u].z), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].z, _2252 - cbSceneParam._m0[33u].w), _2554), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2252), _2554), 0.0)).x), vec4(0.25)));
            float _2608 = 1.0 - (_2604 * cbSceneParam._m0[34u].x);
            float _2609 = 1.0 - (_2604 * cbSceneParam._m0[34u].y);
            float _2610 = 1.0 - (_2604 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2610) ? _2198 : (isnan(_2198) ? _2610 : min(_2198, _2610));
            frontier_phi_77_76_ladder_1 = isnan(_2609) ? _2197 : (isnan(_2197) ? _2609 : min(_2197, _2609));
            frontier_phi_77_76_ladder_2 = isnan(_2608) ? _2196 : (isnan(_2196) ? _2608 : min(_2196, _2608));
        }
        else
        {
            frontier_phi_77_76_ladder = _2198;
            frontier_phi_77_76_ladder_1 = _2197;
            frontier_phi_77_76_ladder_2 = _2196;
        }
        _2262 = frontier_phi_77_76_ladder_2;
        _2264 = frontier_phi_77_76_ladder_1;
        _2266 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2262 = _2196;
        _2264 = _2197;
        _2266 = _2198;
    }
    uvec4 _2271 = floatBitsToUint(cbInstanceData._m0[_901 + 5u]);
    uint _2273 = _2271.x * 14u;
    uint _2274 = _2273 + 13u;
    float _2279 = _942 + (-1.0);
    float _2282 = (cbLight._m0[_2274].x * _2279) + 1.0;
    float _2283 = (cbLight._m0[_2274].y * _2279) + 1.0;
    uint _2284 = _2273 + 5u;
    float _2290 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
    uint _2294 = _2273 + 4u;
    float _2303 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2307 = _2273 | 1u;
    float _2318 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_813, _814, _815));
    float _2321 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_813, _814, _815));
    float _4402 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _4413 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2326 = (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.3183098733425140380859375;
    float _2328 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * 0.3183098733425140380859375;
    float _2335 = ((cbLight._m0[_2284].x * _2290) * _2328) + (((cbLight._m0[_2294].x * _2262) * _2303) * _2326);
    float _2336 = ((_2290 * cbLight._m0[_2284].y) * _2328) + (((cbLight._m0[_2294].y * _2264) * _2303) * _2326);
    float _2337 = ((_2290 * cbLight._m0[_2284].z) * _2328) + (((cbLight._m0[_2294].z * _2266) * _2303) * _2326);
    uint _2339 = _2273 + 8u;
    float _2352 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _816) * 0.949999988079071044921875);
    float _2353 = _2352 * _2352;
    float _2354 = cbLight._m0[_2273].x + _841;
    float _2355 = cbLight._m0[_2273].y + _842;
    float _2356 = cbLight._m0[_2273].z + _843;
    float _2360 = inversesqrt(dot(vec3(_2354, _2355, _2356), vec3(_2354, _2355, _2356)));
    float _2361 = _2360 * _2354;
    float _2362 = _2360 * _2355;
    float _2363 = _2360 * _2356;
    float _2364 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2273].xyz));
    float _4424 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _4435 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2368 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _2369 = dot(vec3(_813, _814, _815), vec3(_2361, _2362, _2363));
    float _4446 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2372 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _2373 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2361, _2362, _2363));
    float _4457 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2377 = _2353 * _2353;
    float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
    float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0)))) * 5.0);
    float _2390 = 0.959999978542327880859375 - _924;
    float _2392 = 0.959999978542327880859375 - _925;
    float _2393 = 0.959999978542327880859375 - _926;
    float _2400 = 1.0 - _2353;
    float _2411 = (0.5 / (((_2368 * ((_2367 * _2400) + _2353)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2400) + _2353) * _2367))) * _2367;
    float _4468 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2413 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
    uint _2427 = _2273 + 9u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _816) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2307].x + _841;
    float _2441 = cbLight._m0[_2307].y + _842;
    float _2442 = cbLight._m0[_2307].z + _843;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_813, _814, _815), vec3(cbLight._m0[_2307].xyz));
    float _4479 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2454 = dot(vec3(_813, _814, _815), vec3(_2447, _2448, _2449));
    float _4490 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2458 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2447, _2448, _2449));
    float _4501 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2462 = _2439 * _2439;
    float _2466 = ((_2457 * _2457) * (_2462 + (-1.0))) + 1.0;
    float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2480 = 1.0 - _2439;
    float _2490 = (0.5 / (((_2368 * ((_2453 * _2480) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2368 * _2480) + _2439) * _2453))) * _2453;
    float _4512 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2462 / ((_2466 * _2466) * 3.141590118408203125));
    float _2502 = (((((_2473 * _2390) + _927) * cbLight._m0[_2427].x) * _2492) * _2290) + ((((cbLight._m0[_2339].x * _2262) * ((_2389 * _2390) + _927)) * _2413) * _2303);
    float _2503 = (((((_2473 * _2392) + _929) * cbLight._m0[_2427].y) * _2492) * _2290) + ((((cbLight._m0[_2339].y * _2264) * ((_2389 * _2392) + _929)) * _2413) * _2303);
    float _2504 = (((((_2473 * _2393) + _930) * cbLight._m0[_2427].z) * _2492) * _2290) + ((((cbLight._m0[_2339].z * _2266) * ((_2389 * _2393) + _930)) * _2413) * _2303);
    float _2667;
    float _2669;
    float _2671;
    float _2673;
    float _2675;
    float _2677;
    if (_2271.y == 0u)
    {
        uvec4 _2622 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2623 = _2622.x;
        uint _2634 = uint((float(_2622.y) * floor(float(uint(cbSceneParam._m0[85u].y * _864) / _2623))) + floor(float(uint(cbSceneParam._m0[85u].x * _863) / _2623)));
        float _2644 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2645 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        uint _2648 = uint(isnan(14.0) ? _2645 : (isnan(_2645) ? 14.0 : min(_2645, 14.0)));
        uvec4 _2653 = texelFetch(g_lightClusterGridBuffer, int(((_2648 << 2u) + (_2634 << 6u)) >> 2u));
        uint _2654 = _2653.x;
        uint _2655 = _2622.z;
        float _2762;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        if (((((1u << ((_2655 >> 4u) & 15u)) + 4294967295u) & _2654) == 0u) || ((_2655 & 240u) == 0u))
        {
            _2762 = 0.0;
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
        }
        else
        {
            float _2763;
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            uint _2946 = 0u;
            uint _2955;
            bool _2956;
            for (;;)
            {
                _2955 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                _2956 = _2955 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2956)
                {
                    frontier_phi_103_pred = _2941;
                    frontier_phi_103_pred_1 = _2945;
                    frontier_phi_103_pred_2 = _2944;
                    frontier_phi_103_pred_3 = _2943;
                    frontier_phi_103_pred_4 = _2942;
                    frontier_phi_103_pred_5 = _2940;
                }
                else
                {
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    uint _3112;
                    _3106 = _2940;
                    _3107 = _2941;
                    _3108 = _2942;
                    _3109 = _2943;
                    _3110 = _2944;
                    _3111 = _2945;
                    _3112 = _2955;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3116 = uint(findLSB(_3112)) + (_2946 << 5u);
                        uint _3113 = (_3112 + 4294967295u) & _3112;
                        uint _3118 = _3116 * 48u;
                        vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3118)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3118 + 3u)).x));
                        uint _3138 = (_3116 * 48u) + 4u;
                        vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3138)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3138 + 3u)).x));
                        uint _3157 = (_3116 * 48u) + 8u;
                        vec3 _3168 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3157)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3157 + 2u)).x));
                        float _3172 = _3132.x - _2047;
                        float _3173 = _3132.y - _2048;
                        float _3174 = _3132.z - _2049;
                        float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                        float _3178 = inversesqrt(_3175);
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3182 = dot(vec3(_882, _885, _888), vec3(_3179, _3180, _3181));
                        float _3187 = 1.0 - (_3175 * _3132.w);
                        float _4533 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3189 = sqrt(_3175) * _3151.w;
                        float _3192 = 1.39999997615814208984375 / (_3189 + 1.39999997615814208984375);
                        float _3193 = _3192 * _3192;
                        float _3196 = ((1.0 - _3193) * _3182) + _3193;
                        float _3199 = _3189 * _3189;
                        float _3203 = ((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3188) / ((_3199 * 0.699999988079071044921875) + 1.0);
                        float _3207 = (-0.0) - _2047;
                        float _3208 = (-0.0) - _2048;
                        float _3209 = (-0.0) - _2049;
                        float _3213 = inversesqrt(dot(vec3(_3207, _3208, _3209), vec3(_3207, _3208, _3209)));
                        float _3214 = _3213 * _3207;
                        float _3215 = _3213 * _3208;
                        float _3216 = _3213 * _3209;
                        float _3223 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                        float _3224 = 1.0 - _958;
                        float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                        float _3232 = _3231 * _3231;
                        float _3233 = _3232 * _3232;
                        float _3234 = _3214 + _3179;
                        float _3235 = _3215 + _3180;
                        float _3236 = _3216 + _3181;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3244 = dot(vec3(_882, _885, _888), vec3(_3214, _3215, _3216));
                        float _4549 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3248 = dot(vec3(_882, _885, _888), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                        float _4560 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3251 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                        float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                        float _3256 = _3192 * _3232;
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3182) + _3257;
                        float _4571 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3261 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3262 = 1.0 - _3232;
                        float _3272 = (0.5 / (((_3261 * ((_3247 * _3262) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3261 * _3262) + _3232) * _3247))) * _3261;
                        float _4582 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3283 = (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) / ((_3255 * _3255) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125))) * _3188;
                        _3036 = (_3203 * _3151.x) + _3109;
                        _3037 = (_3203 * _3151.y) + _3110;
                        _3038 = (_3203 * _3151.z) + _3111;
                        _3033 = (_3283 * _3168.x) + _3106;
                        _3034 = (_3283 * _3168.y) + _3107;
                        _3035 = (_3283 * _3168.z) + _3108;
                        if (_3113 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3036;
                            _3110 = _3037;
                            _3111 = _3038;
                            _3112 = _3113;
                        }
                    }
                    frontier_phi_103_pred = _3034;
                    frontier_phi_103_pred_1 = _3038;
                    frontier_phi_103_pred_2 = _3037;
                    frontier_phi_103_pred_3 = _3036;
                    frontier_phi_103_pred_4 = _3035;
                    frontier_phi_103_pred_5 = _3033;
                }
                _2765 = frontier_phi_103_pred;
                _2773 = frontier_phi_103_pred_1;
                _2771 = frontier_phi_103_pred_2;
                _2769 = frontier_phi_103_pred_3;
                _2767 = frontier_phi_103_pred_4;
                _2763 = frontier_phi_103_pred_5;
                uint _2947 = _2946 + 1u;
                if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2940 = _2763;
                    _2941 = _2765;
                    _2942 = _2767;
                    _2943 = _2769;
                    _2944 = _2771;
                    _2945 = _2773;
                    _2946 = _2947;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2762 = _2763;
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
        }
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.z;
        uint _2779 = (_2777 >> 8u) & 15u;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((4294967295u << _2779) & _2654) == 0u)
        {
            _2908 = _2762;
            _2910 = _2764;
            _2912 = _2766;
            _2914 = _2768;
            _2916 = _2770;
            _2918 = _2772;
        }
        else
        {
            float _2933 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _2934 = _2933 * _2047;
            float _2935 = _2933 * _2048;
            float _2936 = _2933 * _2049;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2779 < ((_2777 >> 12u) & 15u))
            {
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _3089 = _2762;
                float _3090 = _2764;
                float _3091 = _2766;
                float _3092 = _2768;
                float _3093 = _2770;
                float _3094 = _2772;
                uint _3095 = _2779;
                uint _3104;
                bool _3105;
                for (;;)
                {
                    _3104 = texelFetch(g_lightClassification, int((((_2648 << 5u) + (_2634 << 9u)) + (_3095 << 2u)) >> 2u)).x;
                    _3105 = _3104 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3105)
                    {
                        frontier_phi_114_pred = _3094;
                        frontier_phi_114_pred_1 = _3093;
                        frontier_phi_114_pred_2 = _3092;
                        frontier_phi_114_pred_3 = _3091;
                        frontier_phi_114_pred_4 = _3090;
                        frontier_phi_114_pred_5 = _3089;
                    }
                    else
                    {
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3310 = _3089;
                        float _3311 = _3090;
                        float _3312 = _3091;
                        float _3313 = _3092;
                        float _3314 = _3093;
                        float _3315 = _3094;
                        uint _3316 = _3104;
                        uint _3317;
                        vec4 _3342;
                        float _3343;
                        vec4 _3358;
                        vec3 _3370;
                        vec4 _3385;
                        vec4 _3400;
                        float _3446;
                        bool _3447;
                        for (;;)
                        {
                            uint _3327 = ((_3095 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3316));
                            _3317 = (_3316 + 4294967295u) & _3316;
                            uint _3329 = _3327 * 40u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            _3343 = _3342.w;
                            uint _3345 = (_3327 * 40u) + 4u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            uint _3360 = (_3327 * 40u) + 8u;
                            _3370 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x));
                            uint _3372 = (_3327 * 40u) + 16u;
                            _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3387 = (_3327 * 40u) + 20u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3327 * 40u) + 24u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3421 = (_3327 * 40u) + 28u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3446 = fma(_2049, _3434.z, fma(_2048, _3434.y, _3434.x * _2047)) + _3434.w;
                            _3447 = !((fma(_2049, _3415.z, fma(_2048, _3415.y, _3415.x * _2047)) + _3415.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3447)
                            {
                                float _3474 = _3342.x - _2047;
                                float _3475 = _3342.y - _2048;
                                float _3476 = _3342.z - _2049;
                                float _3477 = dot(vec3(_3474, _3475, _3476), vec3(_3474, _3475, _3476));
                                float _3480 = inversesqrt(_3477);
                                float _3481 = _3480 * _3474;
                                float _3482 = _3480 * _3475;
                                float _3483 = _3480 * _3476;
                                float _3487 = 1.0 - (_3477 / (_3343 * _3343));
                                float _4593 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                                float _3488 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3492 = sqrt(_3477) * _3358.w;
                                float _3494 = 1.39999997615814208984375 / (_3492 + 1.39999997615814208984375);
                                float _3495 = _3494 * _3494;
                                float _3498 = ((1.0 - _3495) * dot(vec3(_3481, _3482, _3483), vec3(_882, _885, _888))) + _3495;
                                float _3501 = _3492 * _3492;
                                float _3505 = (fma(_2049, _3385.z, fma(_2048, _3385.y, _3385.x * _2047)) + _3385.w) / _3446;
                                float _3506 = (fma(_2049, _3400.z, fma(_2048, _3400.y, _3400.x * _2047)) + _3400.w) / _3446;
                                float _3510 = 1.0 - dot(vec2(_3505, _3506), vec2(_3505, _3506));
                                float _4609 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3512 = _3511 * (((isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0))) * _3488) / ((_3501 * 0.699999988079071044921875) + 1.0));
                                float _3524 = exp2(log2(1.0 / ((_3501 * 3.5) + 5.0)) * 0.25);
                                float _3525 = 1.0 - _958;
                                float _3532 = sqrt(1.0 - ((1.0 - (_3525 * _3525)) * (1.0 - (_3524 * _3524))));
                                float _3533 = _3532 * _3532;
                                float _3534 = _3533 * _3533;
                                float _3535 = _3481 - _2934;
                                float _3536 = _3482 - _2935;
                                float _3537 = _3483 - _2936;
                                float _3541 = inversesqrt(dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537)));
                                float _3545 = dot(vec3(_882, _885, _888), vec3((-0.0) - _2934, (-0.0) - _2935, (-0.0) - _2936));
                                float _4620 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3548 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
                                float _3549 = dot(vec3(_882, _885, _888), vec3(_3541 * _3535, _3541 * _3536, _3541 * _3537));
                                float _4631 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3552 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3556 = ((_3552 * _3552) * (_3534 + (-1.0))) + 1.0;
                                float _3557 = _3494 * _3533;
                                float _3558 = _3557 * _3557;
                                float _3564 = ((1.0 - _3558) * dot(vec3(_882, _885, _888), vec3(_3481, _3482, _3483))) + _3558;
                                float _4642 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3566 = 1.0 - _3533;
                                float _3576 = (0.5 / (((_3565 * ((_3548 * _3566) + _3533)) + 9.9999999392252902907785028219223e-09) + (((_3565 * _3566) + _3533) * _3548))) * _3565;
                                float _4653 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3586 = (_3511 * _3488) * (((_3534 * 3.1415927410125732421875) * (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0)))) / ((_3556 * _3556) * ((_3501 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3512 * _3358.z;
                                frontier_phi_120_pred_1 = _3512 * _3358.y;
                                frontier_phi_120_pred_2 = _3512 * _3358.x;
                                frontier_phi_120_pred_3 = _3586 * _3370.z;
                                frontier_phi_120_pred_4 = _3586 * _3370.y;
                                frontier_phi_120_pred_5 = _3586 * _3370.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3595 = frontier_phi_120_pred;
                            _3594 = frontier_phi_120_pred_1;
                            _3593 = frontier_phi_120_pred_2;
                            _3592 = frontier_phi_120_pred_3;
                            _3591 = frontier_phi_120_pred_4;
                            _3590 = frontier_phi_120_pred_5;
                            _3300 = _3593 + _3313;
                            _3301 = _3594 + _3314;
                            _3302 = _3595 + _3315;
                            _3297 = _3590 + _3310;
                            _3298 = _3591 + _3311;
                            _3299 = _3592 + _3312;
                            if (_3317 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3301;
                                _3315 = _3302;
                                _3316 = _3317;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3302;
                        frontier_phi_114_pred_1 = _3301;
                        frontier_phi_114_pred_2 = _3300;
                        frontier_phi_114_pred_3 = _3299;
                        frontier_phi_114_pred_4 = _3298;
                        frontier_phi_114_pred_5 = _3297;
                    }
                    _2919 = frontier_phi_114_pred;
                    _2917 = frontier_phi_114_pred_1;
                    _2915 = frontier_phi_114_pred_2;
                    _2913 = frontier_phi_114_pred_3;
                    _2911 = frontier_phi_114_pred_4;
                    _2909 = frontier_phi_114_pred_5;
                    uint _3096 = _3095 + 1u;
                    if (_3096 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3089 = _2909;
                        _3090 = _2911;
                        _3091 = _2913;
                        _3092 = _2915;
                        _3093 = _2917;
                        _3094 = _2919;
                        _3095 = _3096;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2915;
                frontier_phi_94_95_ladder_1 = _2919;
                frontier_phi_94_95_ladder_2 = _2917;
                frontier_phi_94_95_ladder_3 = _2913;
                frontier_phi_94_95_ladder_4 = _2911;
                frontier_phi_94_95_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_94_95_ladder = _2768;
                frontier_phi_94_95_ladder_1 = _2772;
                frontier_phi_94_95_ladder_2 = _2770;
                frontier_phi_94_95_ladder_3 = _2766;
                frontier_phi_94_95_ladder_4 = _2764;
                frontier_phi_94_95_ladder_5 = _2762;
            }
            _2908 = frontier_phi_94_95_ladder_5;
            _2910 = frontier_phi_94_95_ladder_4;
            _2912 = frontier_phi_94_95_ladder_3;
            _2914 = frontier_phi_94_95_ladder;
            _2916 = frontier_phi_94_95_ladder_2;
            _2918 = frontier_phi_94_95_ladder_1;
        }
        float _2923 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2667 = (_2923 * _2914) + _2335;
        _2669 = (_2923 * _2916) + _2336;
        _2671 = (_2923 * _2918) + _2337;
        _2673 = ((_2908 * _927) * _2923) + _2502;
        _2675 = ((_2910 * _929) * _2923) + _2503;
        _2677 = ((_2912 * _930) * _2923) + _2504;
    }
    else
    {
        _2667 = _2335;
        _2669 = _2336;
        _2671 = _2337;
        _2673 = _2502;
        _2675 = _2503;
        _2677 = _2504;
    }
    float _4669 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4680 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4691 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2694 = ((isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2667 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _942))) + ((_2673 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2695 = ((isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2669 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _942))) + ((_2675 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2696 = ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2671 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _942))) + ((_2677 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1782)) * cbPerFrame._m0[3u].x);
    float _2697 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2699 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
    uint _2700 = _901 + 6u;
    float _2708 = _863 / cbSceneParam._m0[86u].x;
    float _2709 = _864 / cbSceneParam._m0[86u].y;
    vec4 _2723 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, (log2((isnan(cbSceneParam._m0[77u].w) ? _836 : (isnan(_836) ? cbSceneParam._m0[77u].w : min(_836, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2725 = _2723.x;
    float _2726 = _2723.y;
    float _2727 = _2723.z;
    float _2728 = _2723.w;
    float _2824;
    float _2826;
    float _2828;
    float _2830;
    if (_836 > cbSceneParam._m0[78u].w)
    {
        float _2787 = isnan(_836) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _836 : min(cbSceneParam._m0[80u].w, _836));
        float _2788 = _2787 / _836;
        float _2799 = _2788 * _271;
        float _2800 = _272 * _2788;
        float _2801 = (-0.0) - _2800;
        float _2802 = _2788 * _273;
        float _2804 = (cbSceneParam._m0[77u].w * _2801) / _2787;
        float _2805 = _2804 + cbSceneParam._m0[79u].w;
        float _2806 = cbSceneParam._m0[79u].w - _2800;
        float _2812 = sqrt(((_2799 * _2799) + (_2800 * _2800)) + (_2802 * _2802));
        float _2815 = (1.0 - (cbSceneParam._m0[77u].w / _2787)) * _2812;
        float _2820 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2822 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2801 - _2804) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2805 > 0.0) ? exp2(_2820 * _2805) : (2.0 - exp2(_2822 * _2805))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2815;
        }
        else
        {
            float _2969 = 1.0 / cbSceneParam._m0[80u].x;
            float _2970 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : max(_2805, _2806));
            float _2971 = isnan(_2806) ? _2805 : (isnan(_2805) ? _2806 : min(_2805, _2806));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            _3046 = ((abs(_2812 / _2801) * cbSceneParam._m0[80u].y) * ((((_2980 - _2981) * 2.0) - ((exp2(_2820 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)))) - exp2(_2820 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))))) * _2969)) - ((exp2(_2822 * _2980) - exp2(_2822 * _2981)) * _2969))) + (_2815 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2708, _2709, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2728);
        _2824 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2725;
        _2826 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2726;
        _2828 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2727;
        _2830 = _3057 * _2728;
    }
    else
    {
        _2824 = _2725;
        _2826 = _2726;
        _2828 = _2727;
        _2830 = _2728;
    }
    bool _3084;
    vec4 _2840;
    vec4 _2862;
    float _2864;
    float _2868;
    float _2869;
    float _2870;
    float _2871;
    bool _2881;
    for (;;)
    {
        _2840 = cbMatDynParam._m0[0u];
        float _2842 = roundEven(_2840.y);
        bool _2843 = _2842 == 3.0;
        float _2844 = log2(_2830);
        float _2851 = exp2(_2844 * cbSceneParam._m0[78u].x) * _2697;
        float _2852 = exp2(_2844 * cbSceneParam._m0[78u].y) * _2698;
        float _2853 = exp2(_2844 * cbSceneParam._m0[78u].z) * _2699;
        float _2860 = _850 + (-0.5);
        _2862 = cbMtdParam._m0[1u];
        _2864 = _2862.y * _2860;
        float _2867 = (_2842 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2868 = _2867 * (_2843 ? _2851 : (_2851 + (cbSceneParam._m0[72u].w * _2824)));
        _2869 = _2867 * (_2843 ? _2852 : (_2852 + (cbSceneParam._m0[72u].w * _2826)));
        _2870 = _2867 * (_2843 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2828)));
        _2871 = _2860 * 0.999000012874603271484375;
        _2881 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2881)
        {
            if ((cbInstanceData._m0[_901 + 7u].x + _2871) < 0.5)
            {
                _3084 = true;
                break;
            }
        }
        uint _3004 = _903 + uint(_2840.w);
        if ((cbInstanceData._m0[_3004].w < 1.0) && ((cbInstanceData._m0[_3004].w + _2871) < 0.5))
        {
            _3084 = true;
            break;
        }
        if ((_2864 + 1.0) < _2862.x)
        {
            _3084 = true;
            break;
        }
        _3084 = false;
        break;
    }
    float _3288;
    if (_3084)
    {
        discard_state = true;
        _3288 = 0.0;
    }
    else
    {
        _3288 = cbInstanceData._m0[_2700].w;
    }
    SV_Target.x = _2868;
    SV_Target.y = _2869;
    SV_Target.z = _2870;
    SV_Target.w = _3288;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2700].w;
    discard_exit();
}


