#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1217;
float _3648;
float _3649;
float _3650;
float _3651;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _296 = _290.w;
    float _309 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _296) + cbMtdParam._m0[11u].x) * _290.x;
    float _311 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _296) + cbMtdParam._m0[11u].y) * _290.y;
    float _313 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _296) + cbMtdParam._m0[11u].z) * _290.z;
    vec4 _331 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _335 = _331.z;
    float _358 = (_331.x * 2.0) + (-1.0);
    float _360 = (_331.y * 2.0) + (-1.0);
    float _363 = _358 - (_358 * _296);
    float _364 = _360 - (_360 * _296);
    float _373 = cbMtdParam._m0[22u].y + _269;
    float _374 = cbMtdParam._m0[22u].z + _270;
    float _375 = cbMtdParam._m0[22u].w + _271;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_198, _199, _200));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_212, _213, _214));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _398 = _395 * _391;
    float _399 = (_395 * _389) + (_363 * cbMtdParam._m0[20u].y);
    float _400 = (_395 * _390) + (_364 * cbMtdParam._m0[20u].z);
    float _401 = _399 * cbMtdParam._m0[19u].x;
    float _402 = _400 * cbMtdParam._m0[18u].w;
    float _403 = fract(TEXCOORD.x);
    float _404 = fract(TEXCOORD.y);
    float _410;
    if (_401 > 0.0)
    {
        _410 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _410 = frontier_phi_3_2_ladder;
    }
    float _418;
    if (_402 > 0.0)
    {
        _418 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _418 = frontier_phi_7_6_ladder;
    }
    bool _420 = _398 > 0.0;
    float _422 = _420 ? (cbMtdParam._m0[15u].x / _398) : 5000.0;
    float _423 = isnan(_418) ? _410 : (isnan(_410) ? _418 : min(_410, _418));
    float _424 = isnan(_422) ? _423 : (isnan(_423) ? _422 : min(_423, _422));
    float _428 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = _403 + (-0.5);
    float _432 = _404 + (-0.5);
    float _435 = ((_424 * _398) + _428) / _428;
    vec4 _460 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_429 + (_424 * _401)) / _435) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_432 + (_424 * _402)) / _435) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _462 = _460.x;
    float _463 = _460.y;
    float _464 = _460.z;
    float _476 = (_462 - (_462 * _296)) * cbMtdParam._m0[9u].x;
    float _477 = (_463 - (_463 * _296)) * cbMtdParam._m0[9u].y;
    float _478 = cbMtdParam._m0[9u].z * (_464 - (_464 * _296));
    float _496 = _399 * cbMtdParam._m0[21u].x;
    float _497 = _400 * cbMtdParam._m0[20u].w;
    bool _498 = _496 > 0.0;
    float _503;
    if (_498)
    {
        _503 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _503 = frontier_phi_11_10_ladder;
    }
    bool _505 = _497 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _510 = frontier_phi_15_14_ladder;
    }
    float _513 = _420 ? (cbMtdParam._m0[16u].z / _398) : 5000.0;
    float _514 = isnan(_510) ? _503 : (isnan(_503) ? _510 : min(_503, _510));
    float _515 = isnan(_513) ? _514 : (isnan(_514) ? _513 : min(_514, _513));
    float _519 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _523 = ((_515 * _398) + _519) / _519;
    float _528 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _530 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _546 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_515 * _496)) / _523) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_515 * _497)) / _523) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _551 = _546.x * cbMtdParam._m0[10u].x;
    float _552 = _546.y * cbMtdParam._m0[10u].y;
    float _553 = _546.z * cbMtdParam._m0[10u].z;
    float _561;
    if (_498)
    {
        _561 = (1.0 - _403) / _496;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_496 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _403) / _496;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _561 = frontier_phi_19_18_ladder;
    }
    float _567;
    if (_505)
    {
        _567 = (1.0 - _404) / _497;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _404) / _497;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _567 = frontier_phi_23_22_ladder;
    }
    float _569 = isnan(_567) ? _561 : (isnan(_561) ? _567 : min(_561, _567));
    float _570 = isnan(_513) ? _569 : (isnan(_569) ? _513 : min(_569, _513));
    float _577 = ((_570 * _398) + _519) / _519;
    vec4 _591 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_429 + (_570 * _496)) / _577) + 0.5) + _528) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_432 + (_570 * _497)) / _577) + 0.5) + _530) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _593 = _591.w;
    float _595 = _593 - (_593 * _296);
    float _606 = 0.5 - (_296 * 0.5);
    float _616 = (((_476 - _309) + (_595 * ((_551 - _476) - (_551 * _296)))) * _606) + _309;
    float _617 = (((_477 - _311) + (_595 * ((_552 - _477) - (_552 * _296)))) * _606) + _311;
    float _618 = (((_478 - _313) + (_595 * ((_553 - _478) - (_553 * _296)))) * _606) + _313;
    vec4 _630 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _632 = _630.x;
    vec4 _644 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _648 = _644.z;
    float _651 = (_644.x * 2.0) + (-1.0);
    float _652 = (_644.y * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3690 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    float _659 = _648 * _296;
    float _666 = (cbMtdParam._m0[15u].w * ((_335 - _659) + ((_648 - _335) * _296))) + _659;
    float _670 = (cbMtdParam._m0[16u].x * _363) + _651;
    float _671 = (cbMtdParam._m0[16u].x * _364) + _652;
    float _674 = fma(_658, _205, fma(_671, _212, _670 * _198));
    float _677 = fma(_658, _206, fma(_671, _213, _670 * _199));
    float _680 = fma(_658, _207, fma(_671, _214, _670 * _200));
    float _684 = inversesqrt(dot(vec3(_674, _677, _680), vec3(_674, _677, _680)));
    float _685 = _684 * _674;
    float _686 = _684 * _677;
    float _687 = _684 * _680;
    float _3701 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _688 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _3712 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3723 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3734 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3745 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _692 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _712 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _713 = _269 * _712;
    float _714 = _270 * _712;
    float _715 = _271 * _712;
    vec4 _720 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _722 = _720.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _898 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _904 = (cbMatDynParam._m0[5u].x * _898) + cbMatDynParam._m0[5u].y;
        float _3756 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _905 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _909 = (cbMatDynParam._m0[5u].z * _898) + cbMatDynParam._m0[5u].w;
        float _3767 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) - _905)) + _905) < ((_722 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_687, cbSceneParam._m0[5u].z, fma(_686, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _685));
    float _758 = fma(_687, cbSceneParam._m0[6u].z, fma(_686, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _685));
    float _761 = fma(_687, cbSceneParam._m0[7u].z, fma(_686, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _685));
    uint _774 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = _774 + 9u;
    uint _777 = _776 + uint(cbMatDynParam._m0[0u].w);
    float _783 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) * cbInstanceData._m0[_777].x;
    float _784 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0)))) * cbInstanceData._m0[_777].y;
    float _785 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0)))) * cbInstanceData._m0[_777].z;
    float _3778 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _3789 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _789 = 1.0 - _692;
    float _790 = _786 * _789;
    float _791 = _787 * _789;
    float _792 = _788 * _789;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _692;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _692;
    float _799 = (_788 + (-0.039999999105930328369140625)) * _692;
    float _800 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    float _803 = _799 + 0.039999999105930328369140625;
    vec4 _812 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _815 = _812.x * TEXCOORD.z;
    float _816 = dot(vec3(_685, _686, _687), vec3(_713, _714, _715));
    float _819 = _816 * 2.0;
    float _823 = (_819 * _685) - _713;
    float _824 = (_819 * _686) - _714;
    float _825 = (_819 * _687) - _715;
    float _829 = abs(dot(vec3(_713, _714, _715), vec3(_685, _686, _687)));
    float _3811 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _831 = sqrt(_688);
    float _844 = exp2((_831 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_831 * 3.0));
    float _850 = (1.0 - _844) * ((_831 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _851 = _844 * _831;
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _887 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1216;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_887, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _879));
        float _947 = fma(_887, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _879));
        float _951 = fma(_887, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _879));
        float _974 = _879 + _685;
        float _975 = _883 + _686;
        float _976 = _887 + _687;
        float _986 = fma(_976, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _974)) - _943;
        float _987 = fma(_976, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _974)) - _947;
        float _988 = fma(_976, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _974)) - _951;
        float _992 = inversesqrt(dot(vec3(_986, _987, _988), vec3(_986, _987, _988)));
        float _1005 = ((_992 * _986) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_992 * _987) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_992 * _988) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1005, _1006, _1007), 0.0);
        float _1044 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1010.x + (-0.5));
        float _1046 = _1044 * (_1010.y + (-0.5));
        float _1047 = _1044 * (_1010.z + (-0.5));
        float _1054 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1017.x + (-0.5));
        float _1056 = _1054 * (_1017.y + (-0.5));
        float _1057 = _1054 * (_1017.z + (-0.5));
        float _1064 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1024.x + (-0.5));
        float _1066 = _1064 * (_1024.y + (-0.5));
        float _1067 = _1064 * (_1024.z + (-0.5));
        float _1074 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1031.x + (-0.5));
        float _1076 = _1074 * (_1031.y + (-0.5));
        float _1077 = _1074 * (_1031.z + (-0.5));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = _1045 * 0.5;
        float _1082 = _1055 * 0.5;
        float _1083 = _1065 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1098 = (dot(vec3(_685, _686, _687), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3837 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1108 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3848 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3859 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_1110 + 1.0))) + _1115) * _1078;
        float _1125 = _1046 * 0.5;
        float _1126 = _1056 * 0.5;
        float _1127 = _1066 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_685, _686, _687), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3892 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1152 + 1.0))) + _1157) * _1079;
        float _1167 = _1047 * 0.5;
        float _1168 = _1057 * 0.5;
        float _1169 = _1067 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_685, _686, _687), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3925 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1194 + 1.0))) + _1199) * _1080;
        _1216 = _1047;
        _1218 = _1046;
        _1219 = _1045;
        _1220 = _1057;
        _1221 = _1056;
        _1222 = _1055;
        _1223 = _1067;
        _1224 = _1066;
        _1225 = _1065;
        _1226 = _1080;
        _1227 = _1079;
        _1228 = _1078;
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
    }
    else
    {
        _1216 = _1217;
        _1218 = _1217;
        _1219 = _1217;
        _1220 = _1217;
        _1221 = _1217;
        _1222 = _1217;
        _1223 = _1217;
        _1224 = _1217;
        _1225 = _1217;
        _1226 = _1217;
        _1227 = _1217;
        _1228 = _1217;
        _1229 = 0.0;
        _1230 = 0.0;
        _1231 = 0.0;
    }
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1260 = fma(_887, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879));
        float _1264 = fma(_887, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879));
        float _1268 = fma(_887, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879));
        float _1291 = _879 + _685;
        float _1292 = _883 + _686;
        float _1293 = _887 + _687;
        float _1303 = fma(_1293, cbModelParam._m0[30u].z, fma(_1292, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1291)) - _1260;
        float _1304 = fma(_1293, cbModelParam._m0[31u].z, fma(_1292, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1291)) - _1264;
        float _1305 = fma(_1293, cbModelParam._m0[32u].z, fma(_1292, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1291)) - _1268;
        float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
        float _1322 = ((_1309 * _1303) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1260 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1309 * _1304) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1264 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1324 = ((_1309 * _1305) / cbModelParam._m0[35u].z) + ((((((_1268 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1322, _1323, _1324), 0.0);
        float _1359 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1326.x + (-0.5));
        float _1361 = _1359 * (_1326.y + (-0.5));
        float _1362 = _1359 * (_1326.z + (-0.5));
        float _1369 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1333.x + (-0.5));
        float _1371 = _1369 * (_1333.y + (-0.5));
        float _1372 = _1369 * (_1333.z + (-0.5));
        float _1379 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1340.x + (-0.5));
        float _1381 = _1379 * (_1340.y + (-0.5));
        float _1382 = _1379 * (_1340.z + (-0.5));
        float _1389 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1347.x + (-0.5));
        float _1391 = _1389 * (_1347.y + (-0.5));
        float _1392 = _1389 * (_1347.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_685, _686, _687), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3966 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3977 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3988 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_1423 + 1.0))) + _1428) * _1393;
        float _1438 = _1361 * 0.5;
        float _1439 = _1371 * 0.5;
        float _1440 = _1381 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_685, _686, _687), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4021 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1465 + 1.0))) + _1470) * _1394;
        float _1480 = _1362 * 0.5;
        float _1481 = _1372 * 0.5;
        float _1482 = _1382 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_685, _686, _687), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4054 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1507 + 1.0))) + _1512) * _1395;
        _1529 = _1362;
        _1530 = _1361;
        _1531 = _1360;
        _1532 = _1372;
        _1533 = _1371;
        _1534 = _1370;
        _1535 = _1382;
        _1536 = _1381;
        _1537 = _1380;
        _1538 = _1395;
        _1539 = _1394;
        _1540 = _1393;
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1543 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1217;
        _1530 = _1217;
        _1531 = _1217;
        _1532 = _1217;
        _1533 = _1217;
        _1534 = _1217;
        _1535 = _1217;
        _1536 = _1217;
        _1537 = _1217;
        _1538 = _1217;
        _1539 = _1217;
        _1540 = _1217;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1229)) + _1229;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1230)) + _1230;
    float _1555 = (cbModelParam._m0[1u].x * (_1543 - _1231)) + _1231;
    float _1576 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1554, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1579 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1554, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1582 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1554, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1553));
    float _1597 = _823 * 0.5;
    float _1598 = _824 * 0.5;
    float _1599 = _825 * 0.5;
    float _1600 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1531, _1534, _1537, _1540));
    float _1603 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1606 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1640;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1613 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1216, _1220, _1223, _1226));
        float _1617 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1621 = dot(vec4(_1597, _1598, _1599, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1628 = dot(vec4(cbModelParam._m0[39u]), vec4(_1597, _1598, _1599, 1.0));
        _1640 = dot(vec3(isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)), isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1628) ? 0.0 : (isnan(0.0) ? _1628 : max(0.0, _1628))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1640 = 1.0;
    }
    float _1651;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1642 = dot(vec4(cbModelParam._m0[40u]), vec4(_1597, _1598, _1599, 1.0));
        _1651 = dot(vec3(isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)), isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)), isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1642) ? 0.0 : (isnan(0.0) ? _1642 : max(0.0, _1642))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1651 = 1.0;
    }
    float _1655 = (_1651 * cbModelParam._m0[1u].x) + (_1640 * (1.0 - cbModelParam._m0[1u].x));
    float _1665 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _688);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1665 : min(cbModelParam._m0[25u].z, _1665));
    float _1747;
    float _1749;
    float _1751;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1714 = fma(_887, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _879)) + cbModelParam._m0[13u].w;
        float _1718 = fma(_887, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _879)) + cbModelParam._m0[14u].w;
        float _1722 = fma(_887, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _879)) + cbModelParam._m0[15u].w;
        float _1725 = fma(_825, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _823));
        float _1728 = fma(_825, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _823));
        float _1731 = fma(_825, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _823));
        float _1759;
        if (_1725 > 0.0)
        {
            _1759 = abs((1.0 - _1714) / _1725);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1714 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1759 = frontier_phi_41_39_ladder;
        }
        float _1929;
        if (_1728 > 0.0)
        {
            _1929 = abs((1.0 - _1718) / _1728);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1718 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1929 = frontier_phi_50_46_ladder;
        }
        float _2384;
        if (_1731 > 0.0)
        {
            _2384 = abs((1.0 - _1722) / _1731);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1722 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2384 = frontier_phi_62_57_ladder;
        }
        float _2386 = isnan(_1929) ? _1759 : (isnan(_1759) ? _1929 : min(_1759, _1929));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1725) + _1714;
        float _2392 = (_2387 * _1728) + _1718;
        float _2393 = (_2387 * _1731) + _1722;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1666);
            frontier_phi_40_62_ladder = _2627.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2627.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2627.x * cbModelParam._m0[1u].y;
        }
        _1747 = frontier_phi_40_62_ladder_2;
        _1749 = frontier_phi_40_62_ladder_1;
        _1751 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_823, _824, _825), _1666);
        _1747 = _1735.x * cbModelParam._m0[1u].y;
        _1749 = _1735.y * cbModelParam._m0[1u].y;
        _1751 = _1735.z * cbModelParam._m0[1u].y;
    }
    float _1755 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _688);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1755 : min(cbModelParam._m0[25u].w, _1755));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_887, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _879)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_887, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _879)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_887, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _879)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_825, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _823));
        float _1822 = fma(_825, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _823));
        float _1825 = fma(_825, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _823));
        float _1934;
        if (_1819 > 0.0)
        {
            _1934 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1934 = frontier_phi_52_48_ladder;
        }
        float _2411;
        if (_1822 > 0.0)
        {
            _2411 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2411 = frontier_phi_64_59_ladder;
        }
        float _2756;
        if (_1825 > 0.0)
        {
            _2756 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2756 = frontier_phi_76_71_ladder;
        }
        float _2758 = isnan(_2411) ? _1934 : (isnan(_1934) ? _2411 : min(_1934, _2411));
        float _2759 = isnan(_2756) ? _2758 : (isnan(_2758) ? _2756 : min(_2758, _2756));
        float _2763 = (_2759 * _1819) + _1808;
        float _2764 = (_2759 * _1822) + _1812;
        float _2765 = (_2759 * _1825) + _1816;
        float _2766 = _2759 * 9.9999997473787516355514526367188e-05;
        float _2767 = (-1.0) - _2766;
        float _2769 = _2766 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2765 > _2769) || ((_2765 < _2767) || ((_2764 > _2769) || ((_2764 < _2767) || ((_2763 < _2767) || (_2763 > _2769))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2765, cbModelParam._m0[17u].z, fma(_2764, cbModelParam._m0[17u].y, _2763 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2765, cbModelParam._m0[18u].z, fma(_2764, cbModelParam._m0[18u].y, _2763 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2765, cbModelParam._m0[19u].z, fma(_2764, cbModelParam._m0[19u].y, _2763 * cbModelParam._m0[19u].x))), _1756);
            frontier_phi_49_76_ladder = _2902.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2902.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2902.y * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_49_76_ladder_1;
        _1846 = frontier_phi_49_76_ladder_2;
        _1848 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_823, _824, _825), _1756);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1861 = (((_850 * _800) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1844 - _1747)) + _1747);
    float _1863 = (((_850 * _802) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1846 - _1749)) + _1749);
    float _1865 = (((_850 * _803) + _851) * _815) * ((cbModelParam._m0[1u].w * (_1848 - _1751)) + _1751);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1921 = _1908 / _1920;
    float _1922 = _1912 / _1920;
    float _1923 = _1916 / _1920;
    float _2070;
    float _2071;
    float _2072;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1950 = ((uint(_1923 > cbSceneParam._m0[59u].y) + uint(_1923 > cbSceneParam._m0[59u].x)) + uint(_1923 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1951 = _1950 + 43u;
        uint _1959 = _1950 + 44u;
        uint _1967 = _1950 + 45u;
        uint _1975 = _1950 + 46u;
        float _1986 = fma(_1920, cbSceneParam._m0[_1951].w, fma(_1916, cbSceneParam._m0[_1951].z, fma(_1912, cbSceneParam._m0[_1951].y, _1908 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1920, cbSceneParam._m0[_1959].w, fma(_1916, cbSceneParam._m0[_1959].z, fma(_1912, cbSceneParam._m0[_1959].y, _1908 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1920, cbSceneParam._m0[_1975].w, fma(_1916, cbSceneParam._m0[_1975].z, fma(_1912, cbSceneParam._m0[_1975].y, _1908 * cbSceneParam._m0[_1975].x)));
        float _2003 = cbSceneParam._m0[33u].z * _1998;
        float _2005 = cbSceneParam._m0[33u].w * _1998;
        float _2008 = fma(_1920, cbSceneParam._m0[_1967].w, fma(_1916, cbSceneParam._m0[_1967].z, fma(_1912, cbSceneParam._m0[_1967].y, _1908 * cbSceneParam._m0[_1967].x))) / _1998;
        float _2056 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
        float _4180 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2063 = (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 + _1986) / _1998, (_2005 + _1990) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1986) / _1998, (_1990 - _2003) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2003) / _1998, (_1990 - _2005) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2005) / _1998, (_2003 + _1990) / _1998), _2008), 0.0)).x), vec4(0.25)));
        _2070 = 1.0 - (_2063 * cbSceneParam._m0[34u].x);
        _2071 = 1.0 - (_2063 * cbSceneParam._m0[34u].y);
        _2072 = 1.0 - (_2063 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2070 = 1.0;
        _2071 = 1.0;
        _2072 = 1.0;
    }
    float _2136;
    float _2138;
    float _2140;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2124 = fma(_1920, cbSceneParam._m0[63u].w, fma(_1916, cbSceneParam._m0[63u].z, fma(_1912, cbSceneParam._m0[63u].y, _1908 * cbSceneParam._m0[63u].x)));
        float _2125 = fma(_1920, cbSceneParam._m0[60u].w, fma(_1916, cbSceneParam._m0[60u].z, fma(_1912, cbSceneParam._m0[60u].y, _1908 * cbSceneParam._m0[60u].x))) / _2124;
        float _2126 = fma(_1920, cbSceneParam._m0[61u].w, fma(_1916, cbSceneParam._m0[61u].z, fma(_1912, cbSceneParam._m0[61u].y, _1908 * cbSceneParam._m0[61u].x))) / _2124;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2125 >= cbSceneParam._m0[64u].x) && (_2126 >= cbSceneParam._m0[64u].y)) && (_2125 <= cbSceneParam._m0[64u].z)) && (_2126 <= cbSceneParam._m0[64u].w))
        {
            float _2424 = fma(_1920, cbSceneParam._m0[62u].w, fma(_1916, cbSceneParam._m0[62u].z, fma(_1912, cbSceneParam._m0[62u].y, _1908 * cbSceneParam._m0[62u].x))) / _2124;
            float _2428 = isnan(cbSceneParam._m0[41u].w) ? _2424 : (isnan(_2424) ? cbSceneParam._m0[41u].w : max(_2424, cbSceneParam._m0[41u].w));
            float _2471 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
            float _4196 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
            float _2478 = (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2125, cbSceneParam._m0[33u].w + _2126), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2125, _2126 - cbSceneParam._m0[33u].z), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].z, _2126 - cbSceneParam._m0[33u].w), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2126), _2428), 0.0)).x), vec4(0.25)));
            float _2482 = 1.0 - (_2478 * cbSceneParam._m0[34u].x);
            float _2483 = 1.0 - (_2478 * cbSceneParam._m0[34u].y);
            float _2484 = 1.0 - (_2478 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2484) ? _2072 : (isnan(_2072) ? _2484 : min(_2072, _2484));
            frontier_phi_61_60_ladder_1 = isnan(_2483) ? _2071 : (isnan(_2071) ? _2483 : min(_2071, _2483));
            frontier_phi_61_60_ladder_2 = isnan(_2482) ? _2070 : (isnan(_2070) ? _2482 : min(_2070, _2482));
        }
        else
        {
            frontier_phi_61_60_ladder = _2072;
            frontier_phi_61_60_ladder_1 = _2071;
            frontier_phi_61_60_ladder_2 = _2070;
        }
        _2136 = frontier_phi_61_60_ladder_2;
        _2138 = frontier_phi_61_60_ladder_1;
        _2140 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2136 = _2070;
        _2138 = _2071;
        _2140 = _2072;
    }
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_774 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2153 = _815 + (-1.0);
    float _2156 = (cbLight._m0[_2148].x * _2153) + 1.0;
    float _2157 = (cbLight._m0[_2148].y * _2153) + 1.0;
    uint _2158 = _2147 + 5u;
    float _2164 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
    uint _2168 = _2147 + 4u;
    float _2177 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
    uint _2181 = _2147 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_685, _686, _687));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_685, _686, _687));
    float _4232 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4243 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2158].x * _2164) * _2202) + (((cbLight._m0[_2168].x * _2136) * _2177) * _2200);
    float _2210 = ((_2164 * cbLight._m0[_2158].y) * _2202) + (((cbLight._m0[_2168].y * _2138) * _2177) * _2200);
    float _2211 = ((_2164 * cbLight._m0[_2158].z) * _2202) + (((cbLight._m0[_2168].z * _2140) * _2177) * _2200);
    uint _2213 = _2147 + 8u;
    float _2226 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _688) * 0.949999988079071044921875);
    float _2227 = _2226 * _2226;
    float _2228 = cbLight._m0[_2147].x + _713;
    float _2229 = cbLight._m0[_2147].y + _714;
    float _2230 = cbLight._m0[_2147].z + _715;
    float _2234 = inversesqrt(dot(vec3(_2228, _2229, _2230), vec3(_2228, _2229, _2230)));
    float _2235 = _2234 * _2228;
    float _2236 = _2234 * _2229;
    float _2237 = _2234 * _2230;
    float _2238 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2147].xyz));
    float _4254 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _4265 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _2242 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2243 = dot(vec3(_685, _686, _687), vec3(_2235, _2236, _2237));
    float _4276 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2235, _2236, _2237));
    float _4287 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2227 * _2227;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2263 = exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0);
    float _2264 = 0.959999978542327880859375 - _797;
    float _2266 = 0.959999978542327880859375 - _798;
    float _2267 = 0.959999978542327880859375 - _799;
    float _2274 = 1.0 - _2227;
    float _2285 = (0.5 / (((_2242 * ((_2241 * _2274) + _2227)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2274) + _2227) * _2241))) * _2241;
    float _4298 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2287 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    uint _2301 = _2147 + 9u;
    float _2312 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _688) * 0.949999988079071044921875);
    float _2313 = _2312 * _2312;
    float _2314 = cbLight._m0[_2181].x + _713;
    float _2315 = cbLight._m0[_2181].y + _714;
    float _2316 = cbLight._m0[_2181].z + _715;
    float _2320 = inversesqrt(dot(vec3(_2314, _2315, _2316), vec3(_2314, _2315, _2316)));
    float _2321 = _2320 * _2314;
    float _2322 = _2320 * _2315;
    float _2323 = _2320 * _2316;
    float _2324 = dot(vec3(_685, _686, _687), vec3(cbLight._m0[_2181].xyz));
    float _4309 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2327 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2328 = dot(vec3(_685, _686, _687), vec3(_2321, _2322, _2323));
    float _4320 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2331 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2332 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2321, _2322, _2323));
    float _4331 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2336 = _2313 * _2313;
    float _2340 = ((_2331 * _2331) * (_2336 + (-1.0))) + 1.0;
    float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2354 = 1.0 - _2313;
    float _2364 = (0.5 / (((_2242 * ((_2327 * _2354) + _2313)) + 9.9999999392252902907785028219223e-09) + (((_2242 * _2354) + _2313) * _2327))) * _2327;
    float _4342 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2366 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2336 / ((_2340 * _2340) * 3.141590118408203125));
    float _2376 = (((((_2347 * _2264) + _800) * cbLight._m0[_2301].x) * _2366) * _2164) + ((((cbLight._m0[_2213].x * _2136) * ((_2263 * _2264) + _800)) * _2287) * _2177);
    float _2377 = (((((_2347 * _2266) + _802) * cbLight._m0[_2301].y) * _2366) * _2164) + ((((cbLight._m0[_2213].y * _2138) * ((_2263 * _2266) + _802)) * _2287) * _2177);
    float _2378 = (((((_2347 * _2267) + _803) * cbLight._m0[_2301].z) * _2366) * _2164) + ((((cbLight._m0[_2213].z * _2140) * ((_2263 * _2267) + _803)) * _2287) * _2177);
    float _2541;
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    if (_2145.y == 0u)
    {
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2497)));
        float _2518 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        float _2644;
        float _2646;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2636 = 0.0;
            _2638 = 0.0;
            _2640 = 0.0;
            _2642 = 0.0;
            _2644 = 0.0;
            _2646 = 0.0;
        }
        else
        {
            float _2637;
            float _2639;
            float _2641;
            float _2643;
            float _2645;
            float _2647;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            float _2819 = 0.0;
            uint _2820 = 0u;
            uint _2829;
            bool _2830;
            for (;;)
            {
                _2829 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2820 << 2u)) >> 2u)).x;
                _2830 = _2829 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2830)
                {
                    frontier_phi_87_pred = _2814;
                    frontier_phi_87_pred_1 = _2819;
                    frontier_phi_87_pred_2 = _2818;
                    frontier_phi_87_pred_3 = _2817;
                    frontier_phi_87_pred_4 = _2816;
                    frontier_phi_87_pred_5 = _2815;
                }
                else
                {
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    uint _2986;
                    _2980 = _2814;
                    _2981 = _2815;
                    _2982 = _2816;
                    _2983 = _2817;
                    _2984 = _2818;
                    _2985 = _2819;
                    _2986 = _2829;
                    float _2907;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    for (;;)
                    {
                        uint _2990 = uint(findLSB(_2986)) + (_2820 << 5u);
                        uint _2987 = (_2986 + 4294967295u) & _2986;
                        uint _2992 = _2990 * 48u;
                        vec4 _3006 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2992)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2992 + 3u)).x));
                        uint _3012 = (_2990 * 48u) + 4u;
                        vec4 _3025 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3012)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3012 + 3u)).x));
                        uint _3031 = (_2990 * 48u) + 8u;
                        vec3 _3042 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3031)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3031 + 2u)).x));
                        float _3046 = _3006.x - _1921;
                        float _3047 = _3006.y - _1922;
                        float _3048 = _3006.z - _1923;
                        float _3049 = dot(vec3(_3046, _3047, _3048), vec3(_3046, _3047, _3048));
                        float _3052 = inversesqrt(_3049);
                        float _3053 = _3052 * _3046;
                        float _3054 = _3052 * _3047;
                        float _3055 = _3052 * _3048;
                        float _3056 = dot(vec3(_755, _758, _761), vec3(_3053, _3054, _3055));
                        float _3061 = 1.0 - (_3049 * _3006.w);
                        float _4363 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3062 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3063 = sqrt(_3049) * _3025.w;
                        float _3066 = 1.39999997615814208984375 / (_3063 + 1.39999997615814208984375);
                        float _3067 = _3066 * _3066;
                        float _3070 = ((1.0 - _3067) * _3056) + _3067;
                        float _3073 = _3063 * _3063;
                        float _3077 = ((isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0))) * _3062) / ((_3073 * 0.699999988079071044921875) + 1.0);
                        float _3081 = (-0.0) - _1921;
                        float _3082 = (-0.0) - _1922;
                        float _3083 = (-0.0) - _1923;
                        float _3087 = inversesqrt(dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083)));
                        float _3088 = _3087 * _3081;
                        float _3089 = _3087 * _3082;
                        float _3090 = _3087 * _3083;
                        float _3097 = exp2(log2(1.0 / ((_3073 * 3.5) + 5.0)) * 0.25);
                        float _3098 = 1.0 - _831;
                        float _3105 = sqrt(1.0 - ((1.0 - (_3098 * _3098)) * (1.0 - (_3097 * _3097))));
                        float _3106 = _3105 * _3105;
                        float _3107 = _3106 * _3106;
                        float _3108 = _3088 + _3053;
                        float _3109 = _3089 + _3054;
                        float _3110 = _3090 + _3055;
                        float _3114 = inversesqrt(dot(vec3(_3108, _3109, _3110), vec3(_3108, _3109, _3110)));
                        float _3118 = dot(vec3(_755, _758, _761), vec3(_3088, _3089, _3090));
                        float _4379 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
                        float _3121 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
                        float _3122 = dot(vec3(_755, _758, _761), vec3(_3114 * _3108, _3114 * _3109, _3114 * _3110));
                        float _4390 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3125 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                        float _3129 = ((_3125 * _3125) * (_3107 + (-1.0))) + 1.0;
                        float _3130 = _3066 * _3106;
                        float _3131 = _3130 * _3130;
                        float _3134 = ((1.0 - _3131) * _3056) + _3131;
                        float _4401 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
                        float _3136 = 1.0 - _3106;
                        float _3146 = (0.5 / (((_3135 * ((_3121 * _3136) + _3106)) + 9.9999999392252902907785028219223e-09) + (((_3135 * _3136) + _3106) * _3121))) * _3135;
                        float _4412 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                        float _3157 = (((_3107 * 3.1415927410125732421875) * (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) / ((_3129 * _3129) * ((_3073 * 2.1991131305694580078125) + 3.141590118408203125))) * _3062;
                        _2910 = (_3077 * _3025.x) + _2983;
                        _2911 = (_3077 * _3025.y) + _2984;
                        _2912 = (_3077 * _3025.z) + _2985;
                        _2907 = (_3157 * _3042.x) + _2980;
                        _2908 = (_3157 * _3042.y) + _2981;
                        _2909 = (_3157 * _3042.z) + _2982;
                        if (_2987 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2980 = _2907;
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2987;
                        }
                    }
                    frontier_phi_87_pred = _2907;
                    frontier_phi_87_pred_1 = _2912;
                    frontier_phi_87_pred_2 = _2911;
                    frontier_phi_87_pred_3 = _2910;
                    frontier_phi_87_pred_4 = _2909;
                    frontier_phi_87_pred_5 = _2908;
                }
                _2637 = frontier_phi_87_pred;
                _2647 = frontier_phi_87_pred_1;
                _2645 = frontier_phi_87_pred_2;
                _2643 = frontier_phi_87_pred_3;
                _2641 = frontier_phi_87_pred_4;
                _2639 = frontier_phi_87_pred_5;
                uint _2821 = _2820 + 1u;
                if (_2821 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2814 = _2637;
                    _2815 = _2639;
                    _2816 = _2641;
                    _2817 = _2643;
                    _2818 = _2645;
                    _2819 = _2647;
                    _2820 = _2821;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2636 = _2637;
            _2638 = _2639;
            _2640 = _2641;
            _2642 = _2643;
            _2644 = _2645;
            _2646 = _2647;
        }
        uvec4 _2650 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2651 = _2650.z;
        uint _2653 = (_2651 >> 8u) & 15u;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        float _2792;
        if (((4294967295u << _2653) & _2528) == 0u)
        {
            _2782 = _2636;
            _2784 = _2638;
            _2786 = _2640;
            _2788 = _2642;
            _2790 = _2644;
            _2792 = _2646;
        }
        else
        {
            float _2807 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float _2808 = _2807 * _1921;
            float _2809 = _2807 * _1922;
            float _2810 = _2807 * _1923;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2653 < ((_2651 >> 12u) & 15u))
            {
                float _2783;
                float _2785;
                float _2787;
                float _2789;
                float _2791;
                float _2793;
                float _2963 = _2636;
                float _2964 = _2638;
                float _2965 = _2640;
                float _2966 = _2642;
                float _2967 = _2644;
                float _2968 = _2646;
                uint _2969 = _2653;
                uint _2978;
                bool _2979;
                for (;;)
                {
                    _2978 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2969 << 2u)) >> 2u)).x;
                    _2979 = _2978 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2979)
                    {
                        frontier_phi_98_pred = _2968;
                        frontier_phi_98_pred_1 = _2967;
                        frontier_phi_98_pred_2 = _2966;
                        frontier_phi_98_pred_3 = _2965;
                        frontier_phi_98_pred_4 = _2964;
                        frontier_phi_98_pred_5 = _2963;
                    }
                    else
                    {
                        float _3171;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3184 = _2963;
                        float _3185 = _2964;
                        float _3186 = _2965;
                        float _3187 = _2966;
                        float _3188 = _2967;
                        float _3189 = _2968;
                        uint _3190 = _2978;
                        uint _3191;
                        vec4 _3216;
                        float _3217;
                        vec4 _3232;
                        vec3 _3244;
                        vec4 _3259;
                        vec4 _3274;
                        float _3320;
                        bool _3321;
                        for (;;)
                        {
                            uint _3201 = ((_2969 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3190));
                            _3191 = (_3190 + 4294967295u) & _3190;
                            uint _3203 = _3201 * 40u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            _3217 = _3216.w;
                            uint _3219 = (_3201 * 40u) + 4u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3201 * 40u) + 8u;
                            _3244 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x));
                            uint _3246 = (_3201 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3261 = (_3201 * 40u) + 20u;
                            _3274 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3261)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3261 + 3u)).x));
                            uint _3276 = (_3201 * 40u) + 24u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3295 = (_3201 * 40u) + 28u;
                            vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            _3320 = fma(_1923, _3308.z, fma(_1922, _3308.y, _3308.x * _1921)) + _3308.w;
                            _3321 = !((fma(_1923, _3289.z, fma(_1922, _3289.y, _3289.x * _1921)) + _3289.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3321)
                            {
                                float _3348 = _3216.x - _1921;
                                float _3349 = _3216.y - _1922;
                                float _3350 = _3216.z - _1923;
                                float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                                float _3354 = inversesqrt(_3351);
                                float _3355 = _3354 * _3348;
                                float _3356 = _3354 * _3349;
                                float _3357 = _3354 * _3350;
                                float _3361 = 1.0 - (_3351 / (_3217 * _3217));
                                float _4423 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3362 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3366 = sqrt(_3351) * _3232.w;
                                float _3368 = 1.39999997615814208984375 / (_3366 + 1.39999997615814208984375);
                                float _3369 = _3368 * _3368;
                                float _3372 = ((1.0 - _3369) * dot(vec3(_3355, _3356, _3357), vec3(_755, _758, _761))) + _3369;
                                float _3375 = _3366 * _3366;
                                float _3379 = (fma(_1923, _3259.z, fma(_1922, _3259.y, _3259.x * _1921)) + _3259.w) / _3320;
                                float _3380 = (fma(_1923, _3274.z, fma(_1922, _3274.y, _3274.x * _1921)) + _3274.w) / _3320;
                                float _3384 = 1.0 - dot(vec2(_3379, _3380), vec2(_3379, _3380));
                                float _4439 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                                float _3385 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3386 = _3385 * (((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3362) / ((_3375 * 0.699999988079071044921875) + 1.0));
                                float _3398 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                                float _3399 = 1.0 - _831;
                                float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                                float _3407 = _3406 * _3406;
                                float _3408 = _3407 * _3407;
                                float _3409 = _3355 - _2808;
                                float _3410 = _3356 - _2809;
                                float _3411 = _3357 - _2810;
                                float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                                float _3419 = dot(vec3(_755, _758, _761), vec3((-0.0) - _2808, (-0.0) - _2809, (-0.0) - _2810));
                                float _4450 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3422 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
                                float _3423 = dot(vec3(_755, _758, _761), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                                float _4461 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3426 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
                                float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                                float _3431 = _3368 * _3407;
                                float _3432 = _3431 * _3431;
                                float _3438 = ((1.0 - _3432) * dot(vec3(_755, _758, _761), vec3(_3355, _3356, _3357))) + _3432;
                                float _4472 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                                float _3440 = 1.0 - _3407;
                                float _3450 = (0.5 / (((_3439 * ((_3422 * _3440) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3439 * _3440) + _3407) * _3422))) * _3439;
                                float _4483 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3460 = (_3385 * _3362) * (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) / ((_3430 * _3430) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3386 * _3232.y;
                                frontier_phi_104_pred_1 = _3386 * _3232.x;
                                frontier_phi_104_pred_2 = _3460 * _3244.z;
                                frontier_phi_104_pred_3 = _3460 * _3244.y;
                                frontier_phi_104_pred_4 = _3460 * _3244.x;
                                frontier_phi_104_pred_5 = _3386 * _3232.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3468 = frontier_phi_104_pred;
                            _3467 = frontier_phi_104_pred_1;
                            _3466 = frontier_phi_104_pred_2;
                            _3465 = frontier_phi_104_pred_3;
                            _3464 = frontier_phi_104_pred_4;
                            _3469 = frontier_phi_104_pred_5;
                            _3174 = _3467 + _3187;
                            _3175 = _3468 + _3188;
                            _3176 = _3469 + _3189;
                            _3171 = _3464 + _3184;
                            _3172 = _3465 + _3185;
                            _3173 = _3466 + _3186;
                            if (_3191 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3184 = _3171;
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3191;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3176;
                        frontier_phi_98_pred_1 = _3175;
                        frontier_phi_98_pred_2 = _3174;
                        frontier_phi_98_pred_3 = _3173;
                        frontier_phi_98_pred_4 = _3172;
                        frontier_phi_98_pred_5 = _3171;
                    }
                    _2793 = frontier_phi_98_pred;
                    _2791 = frontier_phi_98_pred_1;
                    _2789 = frontier_phi_98_pred_2;
                    _2787 = frontier_phi_98_pred_3;
                    _2785 = frontier_phi_98_pred_4;
                    _2783 = frontier_phi_98_pred_5;
                    uint _2970 = _2969 + 1u;
                    if (_2970 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2963 = _2783;
                        _2964 = _2785;
                        _2965 = _2787;
                        _2966 = _2789;
                        _2967 = _2791;
                        _2968 = _2793;
                        _2969 = _2970;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2787;
                frontier_phi_78_79_ladder_1 = _2793;
                frontier_phi_78_79_ladder_2 = _2791;
                frontier_phi_78_79_ladder_3 = _2789;
                frontier_phi_78_79_ladder_4 = _2785;
                frontier_phi_78_79_ladder_5 = _2783;
            }
            else
            {
                frontier_phi_78_79_ladder = _2640;
                frontier_phi_78_79_ladder_1 = _2646;
                frontier_phi_78_79_ladder_2 = _2644;
                frontier_phi_78_79_ladder_3 = _2642;
                frontier_phi_78_79_ladder_4 = _2638;
                frontier_phi_78_79_ladder_5 = _2636;
            }
            _2782 = frontier_phi_78_79_ladder_5;
            _2784 = frontier_phi_78_79_ladder_4;
            _2786 = frontier_phi_78_79_ladder;
            _2788 = frontier_phi_78_79_ladder_3;
            _2790 = frontier_phi_78_79_ladder_2;
            _2792 = frontier_phi_78_79_ladder_1;
        }
        float _2797 = isnan(1.0) ? _815 : (isnan(_815) ? 1.0 : min(_815, 1.0));
        _2541 = (_2797 * _2788) + _2209;
        _2543 = (_2797 * _2790) + _2210;
        _2545 = (_2797 * _2792) + _2211;
        _2547 = ((_2782 * _800) * _2797) + _2376;
        _2549 = ((_2784 * _802) * _2797) + _2377;
        _2551 = ((_2786 * _803) * _2797) + _2378;
    }
    else
    {
        _2541 = _2209;
        _2543 = _2210;
        _2545 = _2211;
        _2547 = _2376;
        _2549 = _2377;
        _2551 = _2378;
    }
    float _4499 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4510 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4521 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _2568 = ((isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_2541 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _815))) + ((_2547 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2543 + ((isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) * _815))) + ((_2549 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2570 = ((isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2545 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _815))) + ((_2551 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1655)) * cbPerFrame._m0[3u].x);
    float _2571 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2572 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    uint _2574 = _774 + 6u;
    float _2582 = _735 / cbSceneParam._m0[86u].x;
    float _2583 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2597 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2599 = _2597.x;
    float _2600 = _2597.y;
    float _2601 = _2597.z;
    float _2602 = _2597.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2661 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2662 = _2661 / _708;
        float _2673 = _2662 * _269;
        float _2674 = _270 * _2662;
        float _2675 = (-0.0) - _2674;
        float _2676 = _2662 * _271;
        float _2678 = (cbSceneParam._m0[77u].w * _2675) / _2661;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2674;
        float _2686 = sqrt(((_2673 * _2673) + (_2674 * _2674)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2661)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2920;
        if (abs((_2675 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2920 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2843 = 1.0 / cbSceneParam._m0[80u].x;
            float _2844 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2845 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            float _2855 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : min(_2845, 0.0));
            _2920 = ((abs(_2686 / _2675) * cbSceneParam._m0[80u].y) * ((((_2854 - _2855) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0))))) * _2843)) - ((exp2(_2696 * _2854) - exp2(_2696 * _2855)) * _2843))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2922 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2582, _2583, 1.0), 0.0);
        float _2931 = exp2((_2920 * (-1.44269502162933349609375)) * (1.0 - _2922.w));
        float _2932 = log2(_2931);
        float _2948 = log2(_2602);
        _2698 = (exp2(_2948 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].x)) * _2922.x) / cbSceneParam._m0[78u].x)) + _2599;
        _2700 = (exp2(_2948 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].y)) * _2922.y) / cbSceneParam._m0[78u].y)) + _2600;
        _2702 = (exp2(_2948 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2932 * cbSceneParam._m0[78u].z)) * _2922.z) / cbSceneParam._m0[78u].z)) + _2601;
        _2704 = _2931 * _2602;
    }
    else
    {
        _2698 = _2599;
        _2700 = _2600;
        _2702 = _2601;
        _2704 = _2602;
    }
    bool _2958;
    vec4 _2714;
    vec4 _2736;
    float _2738;
    float _2742;
    float _2743;
    float _2744;
    float _2745;
    bool _2755;
    for (;;)
    {
        _2714 = cbMatDynParam._m0[0u];
        float _2716 = roundEven(_2714.y);
        bool _2717 = _2716 == 3.0;
        float _2718 = log2(_2704);
        float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * _2571;
        float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * _2572;
        float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * _2573;
        float _2734 = _722 + (-0.5);
        _2736 = cbMtdParam._m0[1u];
        _2738 = _2736.y * _2734;
        float _2741 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2742 = _2741 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
        _2743 = _2741 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
        _2744 = _2741 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
        _2745 = _2734 * 0.999000012874603271484375;
        _2755 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2755)
        {
            if ((cbInstanceData._m0[_774 + 7u].x + _2745) < 0.5)
            {
                _2958 = true;
                break;
            }
        }
        uint _2878 = _776 + uint(_2714.w);
        if ((cbInstanceData._m0[_2878].w < 1.0) && ((cbInstanceData._m0[_2878].w + _2745) < 0.5))
        {
            _2958 = true;
            break;
        }
        if ((_2738 + 1.0) < _2736.x)
        {
            _2958 = true;
            break;
        }
        _2958 = false;
        break;
    }
    float _3162;
    if (_2958)
    {
        discard_state = true;
        _3162 = 0.0;
    }
    else
    {
        _3162 = cbInstanceData._m0[_2574].w;
    }
    SV_Target.x = _2742;
    SV_Target.y = _2743;
    SV_Target.z = _2744;
    SV_Target.w = _3162;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2574].w;
    discard_exit();
}


