#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1130;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    float _569 = 0.5 - (_290 * 0.5);
    float _579 = (((_434 - _303) + (_558 * ((_514 - _434) - (_514 * _290)))) * _569) + _303;
    float _580 = (((_435 - _305) + (_558 * ((_515 - _435) - (_515 * _290)))) * _569) + _305;
    float _581 = (((_436 - _307) + (_558 * ((_516 - _436) - (_516 * _290)))) * _569) + _307;
    vec4 _593 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _595 = _593.x;
    vec4 _607 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _615 = (_607.x * 2.0) + (-1.0);
    float _617 = (_607.y * 2.0) + (-1.0);
    float _618 = dot(vec2(_615, _617), vec2(_615, _617));
    float _3537 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _623 = sqrt(1.0 - (isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))));
    float _624 = _607.z * _290;
    float _627 = fma(_623, _199, fma(_617, _206, _615 * _192));
    float _630 = fma(_623, _200, fma(_617, _207, _615 * _193));
    float _633 = fma(_623, _201, fma(_617, _208, _615 * _194));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3548 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _641 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3570 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _3581 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3592 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _645 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
    float _661 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _666 = _263 * _665;
    float _667 = _264 * _665;
    float _668 = _265 * _665;
    float _674 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _675 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _699 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _702 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _715 = uint(roundEven(NORMAL.w)) * 13u;
    uint _718 = (_715 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3603 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
    float _3614 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _730 = 1.0 - _645;
    float _731 = _727 * _730;
    float _732 = _728 * _730;
    float _733 = _729 * _730;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _645;
    float _739 = (_728 + (-0.039999999105930328369140625)) * _645;
    float _740 = (_729 + (-0.039999999105930328369140625)) * _645;
    float _741 = _738 + 0.039999999105930328369140625;
    float _743 = _739 + 0.039999999105930328369140625;
    float _744 = _740 + 0.039999999105930328369140625;
    vec4 _753 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _674, cbSceneParam._m0[86u].y * _675));
    float _756 = _753.x * TEXCOORD.z;
    float _757 = dot(vec3(_638, _639, _640), vec3(_666, _667, _668));
    float _760 = _757 * 2.0;
    float _764 = (_760 * _638) - _666;
    float _765 = (_760 * _639) - _667;
    float _766 = (_760 * _640) - _668;
    float _770 = abs(dot(vec3(_666, _667, _668), vec3(_638, _639, _640)));
    float _3636 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = sqrt(_641);
    float _785 = exp2((_772 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_772 * 3.0));
    float _791 = (1.0 - _785) * ((_772 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _792 = _785 * _772;
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1129;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _856 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _860 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _864 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _887 = _820 + _638;
        float _888 = _824 + _639;
        float _889 = _828 + _640;
        float _899 = fma(_889, cbModelParam._m0[26u].z, fma(_888, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _887)) - _856;
        float _900 = fma(_889, cbModelParam._m0[27u].z, fma(_888, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _887)) - _860;
        float _901 = fma(_889, cbModelParam._m0[28u].z, fma(_888, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _887)) - _864;
        float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
        float _918 = ((_905 * _899) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_856 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_905 * _900) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_860 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _920 = ((_905 * _901) / cbModelParam._m0[34u].z) + ((((((_864 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_918, _919, _920), 0.0);
        float _957 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_923.x + (-0.5));
        float _959 = _957 * (_923.y + (-0.5));
        float _960 = _957 * (_923.z + (-0.5));
        float _967 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_930.x + (-0.5));
        float _969 = _967 * (_930.y + (-0.5));
        float _970 = _967 * (_930.z + (-0.5));
        float _977 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_937.x + (-0.5));
        float _979 = _977 * (_937.y + (-0.5));
        float _980 = _977 * (_937.z + (-0.5));
        float _987 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_944.x + (-0.5));
        float _989 = _987 * (_944.y + (-0.5));
        float _990 = _987 * (_944.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1011 = (dot(vec3(_638, _639, _640), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1021 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3684 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1023 + 1.0))) + _1028) * _991;
        float _1038 = _959 * 0.5;
        float _1039 = _969 * 0.5;
        float _1040 = _979 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_638, _639, _640), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3695 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3706 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3717 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) * (_1065 + 1.0))) + _1070) * _992;
        float _1080 = _960 * 0.5;
        float _1081 = _970 * 0.5;
        float _1082 = _980 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_638, _639, _640), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3728 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3739 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3750 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * (_1107 + 1.0))) + _1112) * _993;
        _1129 = _960;
        _1131 = _959;
        _1132 = _958;
        _1133 = _970;
        _1134 = _969;
        _1135 = _968;
        _1136 = _980;
        _1137 = _979;
        _1138 = _978;
        _1139 = _993;
        _1140 = _992;
        _1141 = _991;
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1144 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _1130;
        _1131 = _1130;
        _1132 = _1130;
        _1133 = _1130;
        _1134 = _1130;
        _1135 = _1130;
        _1136 = _1130;
        _1137 = _1130;
        _1138 = _1130;
        _1139 = _1130;
        _1140 = _1130;
        _1141 = _1130;
        _1142 = 0.0;
        _1143 = 0.0;
        _1144 = 0.0;
    }
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1170 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1174 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1178 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1201 = _820 + _638;
        float _1202 = _824 + _639;
        float _1203 = _828 + _640;
        float _1213 = fma(_1203, cbModelParam._m0[30u].z, fma(_1202, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1201)) - _1170;
        float _1214 = fma(_1203, cbModelParam._m0[31u].z, fma(_1202, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1201)) - _1174;
        float _1215 = fma(_1203, cbModelParam._m0[32u].z, fma(_1202, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1201)) - _1178;
        float _1219 = inversesqrt(dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215)));
        float _1232 = ((_1219 * _1213) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1170 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1219 * _1214) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1174 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1234 = ((_1219 * _1215) / cbModelParam._m0[35u].z) + ((((((_1178 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1232, _1233, _1234), 0.0);
        float _1269 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1270 = _1269 * (_1236.x + (-0.5));
        float _1271 = _1269 * (_1236.y + (-0.5));
        float _1272 = _1269 * (_1236.z + (-0.5));
        float _1279 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1280 = _1279 * (_1243.x + (-0.5));
        float _1281 = _1279 * (_1243.y + (-0.5));
        float _1282 = _1279 * (_1243.z + (-0.5));
        float _1289 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1290 = _1289 * (_1250.x + (-0.5));
        float _1291 = _1289 * (_1250.y + (-0.5));
        float _1292 = _1289 * (_1250.z + (-0.5));
        float _1299 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1300 = _1299 * (_1257.x + (-0.5));
        float _1301 = _1299 * (_1257.y + (-0.5));
        float _1302 = _1299 * (_1257.z + (-0.5));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1306 = _1270 * 0.5;
        float _1307 = _1280 * 0.5;
        float _1308 = _1290 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_638, _639, _640), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _3813 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1333 + 1.0))) + _1338) * _1303;
        float _1348 = _1271 * 0.5;
        float _1349 = _1281 * 0.5;
        float _1350 = _1291 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_638, _639, _640), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3846 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1375 + 1.0))) + _1380) * _1304;
        float _1390 = _1272 * 0.5;
        float _1391 = _1282 * 0.5;
        float _1392 = _1292 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_638, _639, _640), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3857 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1305 + 9.9999997473787516355514526367188e-06);
        float _3868 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3879 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1417 + 1.0))) + _1422) * _1305;
        _1439 = _1272;
        _1440 = _1271;
        _1441 = _1270;
        _1442 = _1282;
        _1443 = _1281;
        _1444 = _1280;
        _1445 = _1292;
        _1446 = _1291;
        _1447 = _1290;
        _1448 = _1305;
        _1449 = _1304;
        _1450 = _1303;
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1453 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
    }
    else
    {
        _1439 = _1130;
        _1440 = _1130;
        _1441 = _1130;
        _1442 = _1130;
        _1443 = _1130;
        _1444 = _1130;
        _1445 = _1130;
        _1446 = _1130;
        _1447 = _1130;
        _1448 = _1130;
        _1449 = _1130;
        _1450 = _1130;
        _1451 = 0.0;
        _1452 = 0.0;
        _1453 = 0.0;
    }
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1465 = (cbModelParam._m0[1u].x * (_1453 - _1144)) + _1144;
    float _1486 = fma(_1465, cbSceneParam._m0[89u].z, fma(_1464, cbSceneParam._m0[89u].y, _1463 * cbSceneParam._m0[89u].x));
    float _1489 = fma(_1465, cbSceneParam._m0[90u].z, fma(_1464, cbSceneParam._m0[90u].y, _1463 * cbSceneParam._m0[90u].x));
    float _1492 = fma(_1465, cbSceneParam._m0[91u].z, fma(_1464, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1463));
    float _1507 = _764 * 0.5;
    float _1508 = _765 * 0.5;
    float _1509 = _766 * 0.5;
    float _1510 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1441, _1444, _1447, _1450));
    float _1513 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1516 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1550;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1523 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1129, _1133, _1136, _1139));
        float _1527 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1531 = dot(vec4(_1507, _1508, _1509, 1.0), vec4(_1132, _1135, _1138, _1141));
        float _1538 = dot(vec4(cbModelParam._m0[39u]), vec4(_1507, _1508, _1509, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1561;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1552 = dot(vec4(cbModelParam._m0[40u]), vec4(_1507, _1508, _1509, 1.0));
        _1561 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1561 = 1.0;
    }
    float _1565 = (_1561 * cbModelParam._m0[1u].x) + (_1550 * (1.0 - cbModelParam._m0[1u].x));
    float _1575 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1576 = isnan(_1575) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1575 : min(cbModelParam._m0[25u].z, _1575));
    float _1657;
    float _1659;
    float _1661;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1624 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1628 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1632 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1635 = fma(_766, cbModelParam._m0[13u].z, fma(_765, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _764));
        float _1638 = fma(_766, cbModelParam._m0[14u].z, fma(_765, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _764));
        float _1641 = fma(_766, cbModelParam._m0[15u].z, fma(_765, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _764));
        float _1669;
        if (_1635 > 0.0)
        {
            _1669 = abs((1.0 - _1624) / _1635);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1624 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1669 = frontier_phi_38_36_ladder;
        }
        float _1839;
        if (_1638 > 0.0)
        {
            _1839 = abs((1.0 - _1628) / _1638);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1628 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1839 = frontier_phi_47_43_ladder;
        }
        float _2294;
        if (_1641 > 0.0)
        {
            _2294 = abs((1.0 - _1632) / _1641);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1632 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2294 = frontier_phi_59_54_ladder;
        }
        float _2296 = isnan(_1839) ? _1669 : (isnan(_1669) ? _1839 : min(_1669, _1839));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1635) + _1624;
        float _2302 = (_2297 * _1638) + _1628;
        float _2303 = (_2297 * _1641) + _1632;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1576);
            frontier_phi_37_59_ladder = _2537.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2537.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2537.x * cbModelParam._m0[1u].y;
        }
        _1657 = frontier_phi_37_59_ladder_2;
        _1659 = frontier_phi_37_59_ladder_1;
        _1661 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_764, _765, _766), _1576);
        _1657 = _1645.x * cbModelParam._m0[1u].y;
        _1659 = _1645.y * cbModelParam._m0[1u].y;
        _1661 = _1645.z * cbModelParam._m0[1u].y;
    }
    float _1665 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1666 = isnan(_1665) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1665 : min(cbModelParam._m0[25u].w, _1665));
    float _1754;
    float _1756;
    float _1758;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1718 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1722 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1726 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1729 = fma(_766, cbModelParam._m0[21u].z, fma(_765, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _764));
        float _1732 = fma(_766, cbModelParam._m0[22u].z, fma(_765, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _764));
        float _1735 = fma(_766, cbModelParam._m0[23u].z, fma(_765, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _764));
        float _1844;
        if (_1729 > 0.0)
        {
            _1844 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1844 = frontier_phi_49_45_ladder;
        }
        float _2321;
        if (_1732 > 0.0)
        {
            _2321 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2321 = frontier_phi_61_56_ladder;
        }
        float _2658;
        if (_1735 > 0.0)
        {
            _2658 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2658 = frontier_phi_73_68_ladder;
        }
        float _2660 = isnan(_2321) ? _1844 : (isnan(_1844) ? _2321 : min(_1844, _2321));
        float _2661 = isnan(_2658) ? _2660 : (isnan(_2660) ? _2658 : min(_2660, _2658));
        float _2665 = (_2661 * _1729) + _1718;
        float _2666 = (_2661 * _1732) + _1722;
        float _2667 = (_2661 * _1735) + _1726;
        float _2668 = _2661 * 9.9999997473787516355514526367188e-05;
        float _2669 = (-1.0) - _2668;
        float _2671 = _2668 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2667 > _2671) || ((_2667 < _2669) || ((_2666 > _2671) || ((_2666 < _2669) || ((_2665 < _2669) || (_2665 > _2671))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2667, cbModelParam._m0[17u].z, fma(_2666, cbModelParam._m0[17u].y, _2665 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2667, cbModelParam._m0[18u].z, fma(_2666, cbModelParam._m0[18u].y, _2665 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2667, cbModelParam._m0[19u].z, fma(_2666, cbModelParam._m0[19u].y, _2665 * cbModelParam._m0[19u].x))), _1666);
            frontier_phi_46_73_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1754 = frontier_phi_46_73_ladder_2;
        _1756 = frontier_phi_46_73_ladder_1;
        _1758 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_764, _765, _766), _1666);
        _1754 = _1738.x * cbModelParam._m0[1u].z;
        _1756 = _1738.y * cbModelParam._m0[1u].z;
        _1758 = _1738.z * cbModelParam._m0[1u].z;
    }
    float _1771 = (((_791 * _741) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1773 = (((_791 * _743) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1756 - _1659)) + _1659);
    float _1775 = (((_791 * _744) + _792) * _756) * ((cbModelParam._m0[1u].w * (_1758 - _1661)) + _1661);
    float _1778 = fma(_1775, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1771 * cbSceneParam._m0[89u].x));
    float _1781 = fma(_1775, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1771 * cbSceneParam._m0[90u].x));
    float _1784 = fma(_1775, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1771 * cbSceneParam._m0[91u].x));
    float _1818 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1822 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1831 = _1818 / _1830;
    float _1832 = _1822 / _1830;
    float _1833 = _1826 / _1830;
    float _1980;
    float _1981;
    float _1982;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1860 = ((uint(_1833 > cbSceneParam._m0[59u].y) + uint(_1833 > cbSceneParam._m0[59u].x)) + uint(_1833 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1861 = _1860 + 43u;
        uint _1869 = _1860 + 44u;
        uint _1877 = _1860 + 45u;
        uint _1885 = _1860 + 46u;
        float _1896 = fma(_1830, cbSceneParam._m0[_1861].w, fma(_1826, cbSceneParam._m0[_1861].z, fma(_1822, cbSceneParam._m0[_1861].y, _1818 * cbSceneParam._m0[_1861].x)));
        float _1900 = fma(_1830, cbSceneParam._m0[_1869].w, fma(_1826, cbSceneParam._m0[_1869].z, fma(_1822, cbSceneParam._m0[_1869].y, _1818 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1830, cbSceneParam._m0[_1885].w, fma(_1826, cbSceneParam._m0[_1885].z, fma(_1822, cbSceneParam._m0[_1885].y, _1818 * cbSceneParam._m0[_1885].x)));
        float _1913 = cbSceneParam._m0[33u].z * _1908;
        float _1915 = cbSceneParam._m0[33u].w * _1908;
        float _1918 = fma(_1830, cbSceneParam._m0[_1877].w, fma(_1826, cbSceneParam._m0[_1877].z, fma(_1822, cbSceneParam._m0[_1877].y, _1818 * cbSceneParam._m0[_1877].x))) / _1908;
        float _1966 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
        float _4005 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
        float _1973 = (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1913 + _1896) / _1908, (_1915 + _1900) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1915 + _1896) / _1908, (_1900 - _1913) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1913) / _1908, (_1900 - _1915) / _1908), _1918), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1896 - _1915) / _1908, (_1913 + _1900) / _1908), _1918), 0.0)).x), vec4(0.25)));
        _1980 = 1.0 - (_1973 * cbSceneParam._m0[34u].x);
        _1981 = 1.0 - (_1973 * cbSceneParam._m0[34u].y);
        _1982 = 1.0 - (_1973 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1980 = 1.0;
        _1981 = 1.0;
        _1982 = 1.0;
    }
    float _2046;
    float _2048;
    float _2050;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2034 = fma(_1830, cbSceneParam._m0[63u].w, fma(_1826, cbSceneParam._m0[63u].z, fma(_1822, cbSceneParam._m0[63u].y, _1818 * cbSceneParam._m0[63u].x)));
        float _2035 = fma(_1830, cbSceneParam._m0[60u].w, fma(_1826, cbSceneParam._m0[60u].z, fma(_1822, cbSceneParam._m0[60u].y, _1818 * cbSceneParam._m0[60u].x))) / _2034;
        float _2036 = fma(_1830, cbSceneParam._m0[61u].w, fma(_1826, cbSceneParam._m0[61u].z, fma(_1822, cbSceneParam._m0[61u].y, _1818 * cbSceneParam._m0[61u].x))) / _2034;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2035 >= cbSceneParam._m0[64u].x) && (_2036 >= cbSceneParam._m0[64u].y)) && (_2035 <= cbSceneParam._m0[64u].z)) && (_2036 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1830, cbSceneParam._m0[62u].w, fma(_1826, cbSceneParam._m0[62u].z, fma(_1822, cbSceneParam._m0[62u].y, _1818 * cbSceneParam._m0[62u].x))) / _2034;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833))) * cbSceneParam._m0[33u].y;
            float _4021 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2035, cbSceneParam._m0[33u].w + _2036), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2035, _2036 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].z, _2036 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2035 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2036), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2394) ? _1982 : (isnan(_1982) ? _2394 : min(_1982, _2394));
            frontier_phi_58_57_ladder_1 = isnan(_2393) ? _1981 : (isnan(_1981) ? _2393 : min(_1981, _2393));
            frontier_phi_58_57_ladder_2 = isnan(_2392) ? _1980 : (isnan(_1980) ? _2392 : min(_1980, _2392));
        }
        else
        {
            frontier_phi_58_57_ladder = _1982;
            frontier_phi_58_57_ladder_1 = _1981;
            frontier_phi_58_57_ladder_2 = _1980;
        }
        _2046 = frontier_phi_58_57_ladder_2;
        _2048 = frontier_phi_58_57_ladder_1;
        _2050 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2046 = _1980;
        _2048 = _1981;
        _2050 = _1982;
    }
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_715 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2063 = _756 + (-1.0);
    float _2066 = (cbLight._m0[_2058].x * _2063) + 1.0;
    float _2067 = (cbLight._m0[_2058].y * _2063) + 1.0;
    uint _2068 = _2057 + 5u;
    float _2074 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2078 = _2057 + 4u;
    float _2087 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2091 = _2057 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_638, _639, _640));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_638, _639, _640));
    float _4057 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4068 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2068].x * _2074) * _2112) + (((cbLight._m0[_2078].x * _2046) * _2087) * _2110);
    float _2120 = ((_2074 * cbLight._m0[_2068].y) * _2112) + (((cbLight._m0[_2078].y * _2048) * _2087) * _2110);
    float _2121 = ((_2074 * cbLight._m0[_2068].z) * _2112) + (((cbLight._m0[_2078].z * _2050) * _2087) * _2110);
    uint _2123 = _2057 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _641) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_2057].x + _666;
    float _2139 = cbLight._m0[_2057].y + _667;
    float _2140 = cbLight._m0[_2057].z + _668;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2057].xyz));
    float _4079 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _2152 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _2153 = dot(vec3(_638, _639, _640), vec3(_2145, _2146, _2147));
    float _4101 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2145, _2146, _2147));
    float _4112 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2173 = exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0);
    float _2174 = 0.959999978542327880859375 - _738;
    float _2176 = 0.959999978542327880859375 - _739;
    float _2177 = 0.959999978542327880859375 - _740;
    float _2184 = 1.0 - _2137;
    float _2195 = (0.5 / (((_2152 * ((_2151 * _2184) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2184) + _2137) * _2151))) * _2151;
    float _4123 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2197 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2211 = _2057 + 9u;
    float _2222 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _641) * 0.949999988079071044921875);
    float _2223 = _2222 * _2222;
    float _2224 = cbLight._m0[_2091].x + _666;
    float _2225 = cbLight._m0[_2091].y + _667;
    float _2226 = cbLight._m0[_2091].z + _668;
    float _2230 = inversesqrt(dot(vec3(_2224, _2225, _2226), vec3(_2224, _2225, _2226)));
    float _2231 = _2230 * _2224;
    float _2232 = _2230 * _2225;
    float _2233 = _2230 * _2226;
    float _2234 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_2091].xyz));
    float _4134 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2238 = dot(vec3(_638, _639, _640), vec3(_2231, _2232, _2233));
    float _4145 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2241 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2242 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2231, _2232, _2233));
    float _4156 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2246 = _2223 * _2223;
    float _2250 = ((_2241 * _2241) * (_2246 + (-1.0))) + 1.0;
    float _2257 = exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0);
    float _2264 = 1.0 - _2223;
    float _2274 = (0.5 / (((_2152 * ((_2237 * _2264) + _2223)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2264) + _2223) * _2237))) * _2237;
    float _4167 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2276 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2246 / ((_2250 * _2250) * 3.141590118408203125));
    float _2286 = (((((_2257 * _2174) + _741) * cbLight._m0[_2211].x) * _2276) * _2074) + ((((cbLight._m0[_2123].x * _2046) * ((_2173 * _2174) + _741)) * _2197) * _2087);
    float _2287 = (((((_2257 * _2176) + _743) * cbLight._m0[_2211].y) * _2276) * _2074) + ((((cbLight._m0[_2123].y * _2048) * ((_2173 * _2176) + _743)) * _2197) * _2087);
    float _2288 = (((((_2257 * _2177) + _744) * cbLight._m0[_2211].z) * _2276) * _2074) + ((((cbLight._m0[_2123].z * _2050) * ((_2173 * _2177) + _744)) * _2197) * _2087);
    float _2451;
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_2055.y == 0u)
    {
        uvec4 _2406 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2407 = _2406.x;
        uint _2418 = uint((float(_2406.y) * floor(float(uint(cbSceneParam._m0[85u].y * _675) / _2407))) + floor(float(uint(cbSceneParam._m0[85u].x * _674) / _2407)));
        float _2428 = (log2(_1833 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2429 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        uint _2432 = uint(isnan(14.0) ? _2429 : (isnan(_2429) ? 14.0 : min(_2429, 14.0)));
        uvec4 _2437 = texelFetch(g_lightClusterGridBuffer, int(((_2432 << 2u) + (_2418 << 6u)) >> 2u));
        uint _2438 = _2437.x;
        uint _2439 = _2406.z;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        if (((((1u << ((_2439 >> 4u) & 15u)) + 4294967295u) & _2438) == 0u) || ((_2439 & 240u) == 0u))
        {
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
            _2554 = 0.0;
            _2556 = 0.0;
        }
        else
        {
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2555;
            float _2557;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            uint _2722 = 0u;
            uint _2731;
            bool _2732;
            for (;;)
            {
                _2731 = texelFetch(g_lightClassification, int((((_2432 << 5u) + (_2418 << 9u)) + (_2722 << 2u)) >> 2u)).x;
                _2732 = _2731 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2732)
                {
                    frontier_phi_82_pred = _2716;
                    frontier_phi_82_pred_1 = _2721;
                    frontier_phi_82_pred_2 = _2720;
                    frontier_phi_82_pred_3 = _2719;
                    frontier_phi_82_pred_4 = _2718;
                    frontier_phi_82_pred_5 = _2717;
                }
                else
                {
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    uint _2867;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2731;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    for (;;)
                    {
                        uint _2871 = uint(findLSB(_2867)) + (_2722 << 5u);
                        uint _2868 = (_2867 + 4294967295u) & _2867;
                        uint _2873 = _2871 * 48u;
                        vec4 _2887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2893 = (_2871 * 48u) + 4u;
                        vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2893)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2893 + 3u)).x));
                        uint _2912 = (_2871 * 48u) + 8u;
                        vec3 _2923 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x));
                        float _2927 = _2887.x - _1831;
                        float _2928 = _2887.y - _1832;
                        float _2929 = _2887.z - _1833;
                        float _2930 = dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929));
                        float _2933 = inversesqrt(_2930);
                        float _2934 = _2933 * _2927;
                        float _2935 = _2933 * _2928;
                        float _2936 = _2933 * _2929;
                        float _2937 = dot(vec3(_696, _699, _702), vec3(_2934, _2935, _2936));
                        float _2942 = 1.0 - (_2930 * _2887.w);
                        float _4188 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2943 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
                        float _2944 = sqrt(_2930) * _2906.w;
                        float _2947 = 1.39999997615814208984375 / (_2944 + 1.39999997615814208984375);
                        float _2948 = _2947 * _2947;
                        float _2951 = ((1.0 - _2948) * _2937) + _2948;
                        float _2954 = _2944 * _2944;
                        float _2958 = ((isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0))) * _2943) / ((_2954 * 0.699999988079071044921875) + 1.0);
                        float _2962 = (-0.0) - _1831;
                        float _2963 = (-0.0) - _1832;
                        float _2964 = (-0.0) - _1833;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2969 = _2968 * _2962;
                        float _2970 = _2968 * _2963;
                        float _2971 = _2968 * _2964;
                        float _2978 = exp2(log2(1.0 / ((_2954 * 3.5) + 5.0)) * 0.25);
                        float _2979 = 1.0 - _772;
                        float _2986 = sqrt(1.0 - ((1.0 - (_2979 * _2979)) * (1.0 - (_2978 * _2978))));
                        float _2987 = _2986 * _2986;
                        float _2988 = _2987 * _2987;
                        float _2989 = _2969 + _2934;
                        float _2990 = _2970 + _2935;
                        float _2991 = _2971 + _2936;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2999 = dot(vec3(_696, _699, _702), vec3(_2969, _2970, _2971));
                        float _4204 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
                        float _3002 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
                        float _3003 = dot(vec3(_696, _699, _702), vec3(_2995 * _2989, _2995 * _2990, _2995 * _2991));
                        float _4215 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3006 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _3010 = ((_3006 * _3006) * (_2988 + (-1.0))) + 1.0;
                        float _3011 = _2947 * _2987;
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _2937) + _3012;
                        float _4226 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3016 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _3017 = 1.0 - _2987;
                        float _3027 = (0.5 / (((_3016 * ((_3002 * _3017) + _2987)) + 9.9999999392252902907785028219223e-09) + (((_3016 * _3017) + _2987) * _3002))) * _3016;
                        float _4237 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3038 = (((_2988 * 3.1415927410125732421875) * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) / ((_3010 * _3010) * ((_2954 * 2.1991131305694580078125) + 3.141590118408203125))) * _2943;
                        _2796 = (_2958 * _2906.x) + _2864;
                        _2797 = (_2958 * _2906.y) + _2865;
                        _2798 = (_2958 * _2906.z) + _2866;
                        _2793 = (_3038 * _2923.x) + _2861;
                        _2794 = (_3038 * _2923.y) + _2862;
                        _2795 = (_3038 * _2923.z) + _2863;
                        if (_2868 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2796;
                            _2865 = _2797;
                            _2866 = _2798;
                            _2867 = _2868;
                        }
                    }
                    frontier_phi_82_pred = _2793;
                    frontier_phi_82_pred_1 = _2798;
                    frontier_phi_82_pred_2 = _2797;
                    frontier_phi_82_pred_3 = _2796;
                    frontier_phi_82_pred_4 = _2795;
                    frontier_phi_82_pred_5 = _2794;
                }
                _2547 = frontier_phi_82_pred;
                _2557 = frontier_phi_82_pred_1;
                _2555 = frontier_phi_82_pred_2;
                _2553 = frontier_phi_82_pred_3;
                _2551 = frontier_phi_82_pred_4;
                _2549 = frontier_phi_82_pred_5;
                uint _2723 = _2722 + 1u;
                if (_2723 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2716 = _2547;
                    _2717 = _2549;
                    _2718 = _2551;
                    _2719 = _2553;
                    _2720 = _2555;
                    _2721 = _2557;
                    _2722 = _2723;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
            _2554 = _2555;
            _2556 = _2557;
        }
        uvec4 _2560 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2561 = _2560.z;
        uint _2563 = (_2561 >> 8u) & 15u;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        if (((4294967295u << _2563) & _2438) == 0u)
        {
            _2684 = _2546;
            _2686 = _2548;
            _2688 = _2550;
            _2690 = _2552;
            _2692 = _2554;
            _2694 = _2556;
        }
        else
        {
            float _2709 = inversesqrt(dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833)));
            float _2710 = _2709 * _1831;
            float _2711 = _2709 * _1832;
            float _2712 = _2709 * _1833;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2563 < ((_2561 >> 12u) & 15u))
            {
                float _2685;
                float _2687;
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2844 = _2546;
                float _2845 = _2548;
                float _2846 = _2550;
                float _2847 = _2552;
                float _2848 = _2554;
                float _2849 = _2556;
                uint _2850 = _2563;
                uint _2859;
                bool _2860;
                for (;;)
                {
                    _2859 = texelFetch(g_lightClassification, int((((_2432 << 5u) + (_2418 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                    _2860 = _2859 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2860)
                    {
                        frontier_phi_88_pred = _2847;
                        frontier_phi_88_pred_1 = _2848;
                        frontier_phi_88_pred_2 = _2849;
                        frontier_phi_88_pred_3 = _2846;
                        frontier_phi_88_pred_4 = _2845;
                        frontier_phi_88_pred_5 = _2844;
                    }
                    else
                    {
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        float _3059 = _2847;
                        float _3060 = _2848;
                        float _3061 = _2849;
                        uint _3062 = _2859;
                        uint _3063;
                        vec4 _3088;
                        float _3089;
                        vec4 _3104;
                        vec3 _3116;
                        vec4 _3131;
                        vec4 _3146;
                        float _3192;
                        bool _3193;
                        for (;;)
                        {
                            uint _3073 = ((_2850 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3062));
                            _3063 = (_3062 + 4294967295u) & _3062;
                            uint _3075 = _3073 * 40u;
                            _3088 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3075)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3075 + 3u)).x));
                            _3089 = _3088.w;
                            uint _3091 = (_3073 * 40u) + 4u;
                            _3104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 3u)).x));
                            uint _3106 = (_3073 * 40u) + 8u;
                            _3116 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x));
                            uint _3118 = (_3073 * 40u) + 16u;
                            _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3133 = (_3073 * 40u) + 20u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3148 = (_3073 * 40u) + 24u;
                            vec4 _3161 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3148)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3148 + 3u)).x));
                            uint _3167 = (_3073 * 40u) + 28u;
                            vec4 _3180 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3167)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3167 + 3u)).x));
                            _3192 = fma(_1833, _3180.z, fma(_1832, _3180.y, _3180.x * _1831)) + _3180.w;
                            _3193 = !((fma(_1833, _3161.z, fma(_1832, _3161.y, _3161.x * _1831)) + _3161.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3193)
                            {
                                float _3220 = _3088.x - _1831;
                                float _3221 = _3088.y - _1832;
                                float _3222 = _3088.z - _1833;
                                float _3223 = dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222));
                                float _3226 = inversesqrt(_3223);
                                float _3227 = _3226 * _3220;
                                float _3228 = _3226 * _3221;
                                float _3229 = _3226 * _3222;
                                float _3233 = 1.0 - (_3223 / (_3089 * _3089));
                                float _4248 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                                float _3234 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3238 = sqrt(_3223) * _3104.w;
                                float _3240 = 1.39999997615814208984375 / (_3238 + 1.39999997615814208984375);
                                float _3241 = _3240 * _3240;
                                float _3244 = ((1.0 - _3241) * dot(vec3(_3227, _3228, _3229), vec3(_696, _699, _702))) + _3241;
                                float _3247 = _3238 * _3238;
                                float _3251 = (fma(_1833, _3131.z, fma(_1832, _3131.y, _3131.x * _1831)) + _3131.w) / _3192;
                                float _3252 = (fma(_1833, _3146.z, fma(_1832, _3146.y, _3146.x * _1831)) + _3146.w) / _3192;
                                float _3256 = 1.0 - dot(vec2(_3251, _3252), vec2(_3251, _3252));
                                float _4264 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3257 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
                                float _3258 = _3257 * (((isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0))) * _3234) / ((_3247 * 0.699999988079071044921875) + 1.0));
                                float _3270 = exp2(log2(1.0 / ((_3247 * 3.5) + 5.0)) * 0.25);
                                float _3271 = 1.0 - _772;
                                float _3278 = sqrt(1.0 - ((1.0 - (_3271 * _3271)) * (1.0 - (_3270 * _3270))));
                                float _3279 = _3278 * _3278;
                                float _3280 = _3279 * _3279;
                                float _3281 = _3227 - _2710;
                                float _3282 = _3228 - _2711;
                                float _3283 = _3229 - _2712;
                                float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
                                float _3291 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2710, (-0.0) - _2711, (-0.0) - _2712));
                                float _4275 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                                float _3294 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3295 = dot(vec3(_696, _699, _702), vec3(_3287 * _3281, _3287 * _3282, _3287 * _3283));
                                float _4286 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                                float _3298 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3302 = ((_3298 * _3298) * (_3280 + (-1.0))) + 1.0;
                                float _3303 = _3240 * _3279;
                                float _3304 = _3303 * _3303;
                                float _3310 = ((1.0 - _3304) * dot(vec3(_696, _699, _702), vec3(_3227, _3228, _3229))) + _3304;
                                float _4297 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3311 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3312 = 1.0 - _3279;
                                float _3322 = (0.5 / (((_3311 * ((_3294 * _3312) + _3279)) + 9.9999999392252902907785028219223e-09) + (((_3311 * _3312) + _3279) * _3294))) * _3311;
                                float _4308 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3332 = (_3257 * _3234) * (((_3280 * 3.1415927410125732421875) * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) / ((_3302 * _3302) * ((_3247 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3332 * _3116.x;
                                frontier_phi_94_pred_1 = _3332 * _3116.y;
                                frontier_phi_94_pred_2 = _3258 * _3104.z;
                                frontier_phi_94_pred_3 = _3258 * _3104.y;
                                frontier_phi_94_pred_4 = _3258 * _3104.x;
                                frontier_phi_94_pred_5 = _3332 * _3116.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3336 = frontier_phi_94_pred;
                            _3337 = frontier_phi_94_pred_1;
                            _3341 = frontier_phi_94_pred_2;
                            _3340 = frontier_phi_94_pred_3;
                            _3339 = frontier_phi_94_pred_4;
                            _3338 = frontier_phi_94_pred_5;
                            _3046 = _3339 + _3059;
                            _3047 = _3340 + _3060;
                            _3048 = _3341 + _3061;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            if (_3063 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3046;
                                _3060 = _3047;
                                _3061 = _3048;
                                _3062 = _3063;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3046;
                        frontier_phi_88_pred_1 = _3047;
                        frontier_phi_88_pred_2 = _3048;
                        frontier_phi_88_pred_3 = _3045;
                        frontier_phi_88_pred_4 = _3044;
                        frontier_phi_88_pred_5 = _3043;
                    }
                    _2691 = frontier_phi_88_pred;
                    _2693 = frontier_phi_88_pred_1;
                    _2695 = frontier_phi_88_pred_2;
                    _2689 = frontier_phi_88_pred_3;
                    _2687 = frontier_phi_88_pred_4;
                    _2685 = frontier_phi_88_pred_5;
                    uint _2851 = _2850 + 1u;
                    if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2844 = _2685;
                        _2845 = _2687;
                        _2846 = _2689;
                        _2847 = _2691;
                        _2848 = _2693;
                        _2849 = _2695;
                        _2850 = _2851;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2693;
                frontier_phi_75_76_ladder_1 = _2695;
                frontier_phi_75_76_ladder_2 = _2691;
                frontier_phi_75_76_ladder_3 = _2689;
                frontier_phi_75_76_ladder_4 = _2687;
                frontier_phi_75_76_ladder_5 = _2685;
            }
            else
            {
                frontier_phi_75_76_ladder = _2554;
                frontier_phi_75_76_ladder_1 = _2556;
                frontier_phi_75_76_ladder_2 = _2552;
                frontier_phi_75_76_ladder_3 = _2550;
                frontier_phi_75_76_ladder_4 = _2548;
                frontier_phi_75_76_ladder_5 = _2546;
            }
            _2684 = frontier_phi_75_76_ladder_5;
            _2686 = frontier_phi_75_76_ladder_4;
            _2688 = frontier_phi_75_76_ladder_3;
            _2690 = frontier_phi_75_76_ladder_2;
            _2692 = frontier_phi_75_76_ladder;
            _2694 = frontier_phi_75_76_ladder_1;
        }
        float _2699 = isnan(1.0) ? _756 : (isnan(_756) ? 1.0 : min(_756, 1.0));
        _2451 = (_2699 * _2690) + _2119;
        _2453 = (_2699 * _2692) + _2120;
        _2455 = (_2699 * _2694) + _2121;
        _2457 = ((_2684 * _741) * _2699) + _2286;
        _2459 = ((_2686 * _743) * _2699) + _2287;
        _2461 = ((_2688 * _744) * _2699) + _2288;
    }
    else
    {
        _2451 = _2119;
        _2453 = _2120;
        _2455 = _2121;
        _2457 = _2286;
        _2459 = _2287;
        _2461 = _2288;
    }
    float _4324 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _4335 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _4346 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2478 = ((isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2451 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _756))) + ((_2457 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2479 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2453 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _756))) + ((_2459 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    float _2480 = ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2455 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _756))) + ((_2461 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1565)) * cbPerFrame._m0[3u].x);
    uint _2484 = _715 + 6u;
    float _2492 = _674 / cbSceneParam._m0[86u].x;
    float _2493 = _675 / cbSceneParam._m0[86u].y;
    vec4 _2507 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, (log2((isnan(cbSceneParam._m0[77u].w) ? _661 : (isnan(_661) ? cbSceneParam._m0[77u].w : min(_661, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2509 = _2507.x;
    float _2510 = _2507.y;
    float _2511 = _2507.z;
    float _2512 = _2507.w;
    float _2608;
    float _2610;
    float _2612;
    float _2614;
    if (_661 > cbSceneParam._m0[78u].w)
    {
        float _2571 = isnan(_661) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _661 : min(cbSceneParam._m0[80u].w, _661));
        float _2572 = _2571 / _661;
        float _2583 = _2572 * _263;
        float _2584 = _264 * _2572;
        float _2585 = (-0.0) - _2584;
        float _2586 = _2572 * _265;
        float _2588 = (cbSceneParam._m0[77u].w * _2585) / _2571;
        float _2589 = _2588 + cbSceneParam._m0[79u].w;
        float _2590 = cbSceneParam._m0[79u].w - _2584;
        float _2596 = sqrt(((_2583 * _2583) + (_2584 * _2584)) + (_2586 * _2586));
        float _2599 = (1.0 - (cbSceneParam._m0[77u].w / _2571)) * _2596;
        float _2604 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2606 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2806;
        if (abs((_2585 - _2588) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2806 = ((((_2589 > 0.0) ? exp2(_2604 * _2589) : (2.0 - exp2(_2606 * _2589))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2599;
        }
        else
        {
            float _2745 = 1.0 / cbSceneParam._m0[80u].x;
            float _2746 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : max(_2589, _2590));
            float _2747 = isnan(_2590) ? _2589 : (isnan(_2589) ? _2590 : min(_2589, _2590));
            float _2756 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : min(_2746, 0.0));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            _2806 = ((abs(_2596 / _2585) * cbSceneParam._m0[80u].y) * ((((_2756 - _2757) * 2.0) - ((exp2(_2604 * (isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0)))) - exp2(_2604 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0))))) * _2745)) - ((exp2(_2606 * _2756) - exp2(_2606 * _2757)) * _2745))) + (_2599 * cbSceneParam._m0[80u].z);
        }
        vec4 _2808 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2492, _2493, 1.0), 0.0);
        float _2817 = exp2((_2806 * (-1.44269502162933349609375)) * (1.0 - _2808.w));
        float _2818 = log2(_2817);
        float _2834 = log2(_2512);
        _2608 = (exp2(_2834 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].x)) * _2808.x) / cbSceneParam._m0[78u].x)) + _2509;
        _2610 = (exp2(_2834 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].y)) * _2808.y) / cbSceneParam._m0[78u].y)) + _2510;
        _2612 = (exp2(_2834 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2818 * cbSceneParam._m0[78u].z)) * _2808.z) / cbSceneParam._m0[78u].z)) + _2511;
        _2614 = _2817 * _2512;
    }
    else
    {
        _2608 = _2509;
        _2610 = _2510;
        _2612 = _2511;
        _2614 = _2512;
    }
    float _2626 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2627 = _2626 == 3.0;
    float _2628 = log2(_2614);
    float _2635 = exp2(_2628 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0)));
    float _2636 = exp2(_2628 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)));
    float _2637 = exp2(_2628 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0)));
    float _2646 = (_2626 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2646 * (_2627 ? _2635 : (_2635 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.y = _2646 * (_2627 ? _2636 : (_2636 + (cbSceneParam._m0[72u].w * _2610)));
    SV_Target.z = _2646 * (_2627 ? _2637 : (_2637 + (cbSceneParam._m0[72u].w * _2612)));
    SV_Target.w = cbInstanceData._m0[_2484].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2484].w;
}


