#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _397;
float _3218;
float _3219;
float _3220;
float _3221;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _330 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _337 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _346 = cbMtdParam._m0[23u].x + _261;
    float _347 = cbMtdParam._m0[23u].y + _262;
    float _348 = cbMtdParam._m0[23u].z + _263;
    float _362 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_330 * _190, _330 * _191, _330 * _192));
    float _363 = (-0.0) - dot(vec3(_346, _347, _348), vec3(_337 * _204, _337 * _205, _337 * _206));
    float _364 = (-0.0) - dot(vec3(_346, _347, _348), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _368 * _364;
    float _371 = (cbMtdParam._m0[19u].w * _362) * _368;
    float _373 = (cbMtdParam._m0[20u].x * _363) * _368;
    float _376 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _377 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _395;
    float _398;
    float _400;
    if (_371 > 0.0)
    {
        float _381 = (1.0 - _376) / _371;
        _395 = _381;
        _398 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_381 * _369)) * 0.16666667163372039794921875;
        _400 = (fract((_381 * _373) + _377) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _396 = ((-0.0) - _376) / _371;
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = (fract((_396 * _373) + _377) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_396 * _369) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _397;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _395 = frontier_phi_3_2_ladder;
        _398 = frontier_phi_3_2_ladder_2;
        _400 = frontier_phi_3_2_ladder_1;
    }
    float _426;
    float _428;
    float _430;
    if (_373 > 0.0)
    {
        float _413 = (1.0 - _377) / _373;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_413 < _395)
        {
            frontier_phi_8_5_ladder = (fract(_413 * _369) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_413 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _413;
        }
        else
        {
            frontier_phi_8_5_ladder = _400;
            frontier_phi_8_5_ladder_1 = _398;
            frontier_phi_8_5_ladder_2 = _395;
        }
        _426 = frontier_phi_8_5_ladder_2;
        _428 = frontier_phi_8_5_ladder_1;
        _430 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_373 < 0.0)
        {
            float _427 = ((-0.0) - _377) / _373;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_427 < _395)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_427 * _369) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_427 * _371) + _376) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _427;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _400;
                frontier_phi_8_6_ladder_9_ladder_1 = _398;
                frontier_phi_8_6_ladder_9_ladder_2 = _395;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _400;
            frontier_phi_8_6_ladder_1 = _398;
            frontier_phi_8_6_ladder_2 = _395;
        }
        _426 = frontier_phi_8_6_ladder_2;
        _428 = frontier_phi_8_6_ladder_1;
        _430 = frontier_phi_8_6_ladder;
    }
    float _434 = (_369 > 0.0) ? (cbMtdParam._m0[16u].w / _369) : 5000.0;
    float _447;
    float _448;
    if (_434 < _426)
    {
        _447 = ((_376 + cbMtdParam._m0[17u].x) + (_434 * _371)) * 0.16666667163372039794921875;
        _448 = (((_434 * _373) + _377) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _447 = _428;
        _448 = _430;
    }
    vec4 _450 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_447, _448));
    float _455 = _450.x * cbMtdParam._m0[13u].x;
    float _456 = _450.y * cbMtdParam._m0[13u].y;
    float _457 = _450.z * cbMtdParam._m0[13u].z;
    vec4 _475 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _477 = _475.x;
    vec4 _489 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _497 = (_489.x * 2.0) + (-1.0);
    float _499 = (_489.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_497, _499), vec2(_497, _499));
    float _3230 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0))));
    float _506 = _489.z * _288;
    float _509 = fma(_505, _197, fma(_499, _204, _497 * _190));
    float _512 = fma(_505, _198, fma(_499, _205, _497 * _191));
    float _515 = fma(_505, _199, fma(_499, _206, _497 * _192));
    float _519 = inversesqrt(dot(vec3(_509, _512, _515), vec3(_509, _512, _515)));
    float _520 = _519 * _509;
    float _521 = _519 * _512;
    float _522 = _519 * _515;
    float _3241 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _523 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3263 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3274 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3285 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _527 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _548 = _261 * _547;
    float _549 = _262 * _547;
    float _550 = _263 * _547;
    vec4 _555 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _557 = _555.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _738 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _744 = (cbMatDynParam._m0[5u].x * _738) + cbMatDynParam._m0[5u].y;
        float _3296 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
        float _749 = (cbMatDynParam._m0[5u].z * _738) + cbMatDynParam._m0[5u].w;
        float _3307 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0))) - _745)) + _745) < ((_557 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _596 = fma(_522, cbSceneParam._m0[5u].z, fma(_521, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _520));
    float _599 = fma(_522, cbSceneParam._m0[6u].z, fma(_521, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _520));
    float _602 = fma(_522, cbSceneParam._m0[7u].z, fma(_521, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _520));
    uint _615 = uint(roundEven(NORMAL.w)) * 13u;
    uint _616 = _615 + 9u;
    uint _617 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _623 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_617].x;
    float _624 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_617].y;
    float _625 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_617].z;
    float _3318 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _626 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _627 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _628 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
    float _629 = 1.0 - _527;
    float _630 = _626 * _629;
    float _631 = _627 * _629;
    float _632 = _628 * _629;
    float _637 = (_626 + (-0.039999999105930328369140625)) * _527;
    float _638 = (_627 + (-0.039999999105930328369140625)) * _527;
    float _639 = (_628 + (-0.039999999105930328369140625)) * _527;
    float _640 = _637 + 0.039999999105930328369140625;
    float _642 = _638 + 0.039999999105930328369140625;
    float _643 = _639 + 0.039999999105930328369140625;
    vec4 _652 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _575, cbSceneParam._m0[86u].y * _576));
    float _655 = _652.x * TEXCOORD.z;
    float _656 = dot(vec3(_520, _521, _522), vec3(_548, _549, _550));
    float _659 = _656 * 2.0;
    float _663 = (_659 * _520) - _548;
    float _664 = (_659 * _521) - _549;
    float _665 = (_659 * _522) - _550;
    float _669 = abs(dot(vec3(_548, _549, _550), vec3(_520, _521, _522)));
    float _3351 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _671 = sqrt(_523);
    float _684 = exp2((_671 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_671 * 3.0));
    float _690 = (1.0 - _684) * ((_671 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _691 = _684 * _671;
    float _719 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _723 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _727 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _783 = fma(_727, cbModelParam._m0[26u].z, fma(_723, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _719));
        float _787 = fma(_727, cbModelParam._m0[27u].z, fma(_723, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _719));
        float _791 = fma(_727, cbModelParam._m0[28u].z, fma(_723, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _719));
        float _815 = _719 + _520;
        float _816 = _723 + _521;
        float _817 = _727 + _522;
        float _827 = fma(_817, cbModelParam._m0[26u].z, fma(_816, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _815)) - _783;
        float _828 = fma(_817, cbModelParam._m0[27u].z, fma(_816, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _815)) - _787;
        float _829 = fma(_817, cbModelParam._m0[28u].z, fma(_816, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _815)) - _791;
        float _833 = inversesqrt(dot(vec3(_827, _828, _829), vec3(_827, _828, _829)));
        float _846 = ((_833 * _827) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_783 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _847 = ((_833 * _828) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_787 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _848 = ((_833 * _829) / cbModelParam._m0[34u].z) + ((((((_791 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_846, _847, _848), 0.0);
        float _885 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_851.x + (-0.5));
        float _887 = _885 * (_851.y + (-0.5));
        float _888 = _885 * (_851.z + (-0.5));
        float _895 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _896 = _895 * (_858.x + (-0.5));
        float _897 = _895 * (_858.y + (-0.5));
        float _898 = _895 * (_858.z + (-0.5));
        float _905 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _906 = _905 * (_865.x + (-0.5));
        float _907 = _905 * (_865.y + (-0.5));
        float _908 = _905 * (_865.z + (-0.5));
        float _915 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_872.x + (-0.5));
        float _917 = _915 * (_872.y + (-0.5));
        float _918 = _915 * (_872.z + (-0.5));
        float _919 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _920 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _921 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
        float _922 = _886 * 0.5;
        float _923 = _896 * 0.5;
        float _924 = _906 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _939 = (dot(vec3(_520, _521, _522), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _949 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_919 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _951 = _950 * 2.0;
        float _955 = (1.0 - _950) / (_950 + 1.0);
        float _3399 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _965 = ((((1.0 - _956) * (_951 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_951 + 1.0))) + _956) * _919;
        float _966 = _887 * 0.5;
        float _967 = _897 * 0.5;
        float _968 = _907 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _982 = (dot(vec3(_520, _521, _522), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _991 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_920 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _993 = _992 * 2.0;
        float _997 = (1.0 - _992) / (_992 + 1.0);
        float _3432 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1007 = ((((1.0 - _998) * (_993 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_993 + 1.0))) + _998) * _920;
        float _1008 = _888 * 0.5;
        float _1009 = _898 * 0.5;
        float _1010 = _908 * 0.5;
        float _1011 = dot(vec3(_1008, _1009, _1010), vec3(_1008, _1009, _1010));
        float _1016 = (_1011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1011);
        float _1024 = (dot(vec3(_520, _521, _522), vec3(_1016 * _1008, _1016 * _1009, _1016 * _1010)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1033 = sqrt(((_1009 * _1009) + (_1008 * _1008)) + (_1010 * _1010)) / (_921 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3465 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1035 + 1.0))) + _1040) * _921;
        _1057 = _888;
        _1058 = _887;
        _1059 = _886;
        _1060 = _898;
        _1061 = _897;
        _1062 = _896;
        _1063 = _908;
        _1064 = _907;
        _1065 = _906;
        _1066 = _921;
        _1067 = _920;
        _1068 = _919;
        _1069 = cbModelParam._m0[36u].z * (isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0)));
        _1070 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0)));
        _1071 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
    }
    else
    {
        _1057 = _397;
        _1058 = _397;
        _1059 = _397;
        _1060 = _397;
        _1061 = _397;
        _1062 = _397;
        _1063 = _397;
        _1064 = _397;
        _1065 = _397;
        _1066 = _397;
        _1067 = _397;
        _1068 = _397;
        _1069 = 0.0;
        _1070 = 0.0;
        _1071 = 0.0;
    }
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1100 = fma(_727, cbModelParam._m0[30u].z, fma(_723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _719));
        float _1104 = fma(_727, cbModelParam._m0[31u].z, fma(_723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _719));
        float _1108 = fma(_727, cbModelParam._m0[32u].z, fma(_723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _719));
        float _1131 = _719 + _520;
        float _1132 = _723 + _521;
        float _1133 = _727 + _522;
        float _1143 = fma(_1133, cbModelParam._m0[30u].z, fma(_1132, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1131)) - _1100;
        float _1144 = fma(_1133, cbModelParam._m0[31u].z, fma(_1132, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1131)) - _1104;
        float _1145 = fma(_1133, cbModelParam._m0[32u].z, fma(_1132, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1131)) - _1108;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1100 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1104 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[35u].z) + ((((((_1108 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1199 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1166.x + (-0.5));
        float _1201 = _1199 * (_1166.y + (-0.5));
        float _1202 = _1199 * (_1166.z + (-0.5));
        float _1209 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1173.x + (-0.5));
        float _1211 = _1209 * (_1173.y + (-0.5));
        float _1212 = _1209 * (_1173.z + (-0.5));
        float _1219 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1180.x + (-0.5));
        float _1221 = _1219 * (_1180.y + (-0.5));
        float _1222 = _1219 * (_1180.z + (-0.5));
        float _1229 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1187.x + (-0.5));
        float _1231 = _1229 * (_1187.y + (-0.5));
        float _1232 = _1229 * (_1187.z + (-0.5));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = _1200 * 0.5;
        float _1237 = _1210 * 0.5;
        float _1238 = _1220 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_520, _521, _522), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3528 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1263 + 1.0))) + _1268) * _1233;
        float _1278 = _1201 * 0.5;
        float _1279 = _1211 * 0.5;
        float _1280 = _1221 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_520, _521, _522), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3561 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1305 + 1.0))) + _1310) * _1234;
        float _1320 = _1202 * 0.5;
        float _1321 = _1212 * 0.5;
        float _1322 = _1222 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_520, _521, _522), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3594 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1347 + 1.0))) + _1352) * _1235;
        _1369 = _1202;
        _1370 = _1201;
        _1371 = _1200;
        _1372 = _1212;
        _1373 = _1211;
        _1374 = _1210;
        _1375 = _1222;
        _1376 = _1221;
        _1377 = _1220;
        _1378 = _1235;
        _1379 = _1234;
        _1380 = _1233;
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
    }
    else
    {
        _1369 = _397;
        _1370 = _397;
        _1371 = _397;
        _1372 = _397;
        _1373 = _397;
        _1374 = _397;
        _1375 = _397;
        _1376 = _397;
        _1377 = _397;
        _1378 = _397;
        _1379 = _397;
        _1380 = _397;
        _1381 = 0.0;
        _1382 = 0.0;
        _1383 = 0.0;
    }
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1069)) + _1069;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1070)) + _1070;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1071)) + _1071;
    float _1416 = fma(_1395, cbSceneParam._m0[89u].z, fma(_1394, cbSceneParam._m0[89u].y, _1393 * cbSceneParam._m0[89u].x));
    float _1419 = fma(_1395, cbSceneParam._m0[90u].z, fma(_1394, cbSceneParam._m0[90u].y, _1393 * cbSceneParam._m0[90u].x));
    float _1422 = fma(_1395, cbSceneParam._m0[91u].z, fma(_1394, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1393));
    float _1437 = _663 * 0.5;
    float _1438 = _664 * 0.5;
    float _1439 = _665 * 0.5;
    float _1440 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1443 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1446 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1480;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1453 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1057, _1060, _1063, _1066));
        float _1457 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1058, _1061, _1064, _1067));
        float _1461 = dot(vec4(_1437, _1438, _1439, 1.0), vec4(_1059, _1062, _1065, _1068));
        float _1468 = dot(vec4(cbModelParam._m0[39u]), vec4(_1437, _1438, _1439, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1468) ? 0.0 : (isnan(0.0) ? _1468 : max(0.0, _1468))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1491;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1482 = dot(vec4(cbModelParam._m0[40u]), vec4(_1437, _1438, _1439, 1.0));
        _1491 = dot(vec3(isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1491 = 1.0;
    }
    float _1495 = (_1491 * cbModelParam._m0[1u].x) + (_1480 * (1.0 - cbModelParam._m0[1u].x));
    float _1505 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _523);
    float _1506 = isnan(_1505) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1505 : min(cbModelParam._m0[25u].z, _1505));
    float _1588;
    float _1590;
    float _1592;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1555 = fma(_727, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _719)) + cbModelParam._m0[13u].w;
        float _1559 = fma(_727, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _719)) + cbModelParam._m0[14u].w;
        float _1563 = fma(_727, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _719)) + cbModelParam._m0[15u].w;
        float _1566 = fma(_665, cbModelParam._m0[13u].z, fma(_664, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _663));
        float _1569 = fma(_665, cbModelParam._m0[14u].z, fma(_664, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _663));
        float _1572 = fma(_665, cbModelParam._m0[15u].z, fma(_664, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _663));
        float _1600;
        if (_1566 > 0.0)
        {
            _1600 = abs((1.0 - _1555) / _1566);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1555 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1600 = frontier_phi_29_27_ladder;
        }
        float _1962;
        if (_1569 > 0.0)
        {
            _1962 = abs((1.0 - _1559) / _1569);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1559 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1962 = frontier_phi_38_34_ladder;
        }
        float _2286;
        if (_1572 > 0.0)
        {
            _2286 = abs((1.0 - _1563) / _1572);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1563 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2286 = frontier_phi_52_45_ladder;
        }
        float _2288 = isnan(_1962) ? _1600 : (isnan(_1600) ? _1962 : min(_1600, _1962));
        float _2289 = isnan(_2286) ? _2288 : (isnan(_2288) ? _2286 : min(_2288, _2286));
        float _2293 = (_2289 * _1566) + _1555;
        float _2294 = (_2289 * _1569) + _1559;
        float _2295 = (_2289 * _1572) + _1563;
        float _2296 = _2289 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2296;
        float _2299 = _2296 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2295 > _2299) || ((_2295 < _2297) || ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 < _2297) || (_2293 > _2299))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2437 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2295, cbModelParam._m0[9u].z, fma(_2294, cbModelParam._m0[9u].y, _2293 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2295, cbModelParam._m0[10u].z, fma(_2294, cbModelParam._m0[10u].y, _2293 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2295, cbModelParam._m0[11u].z, fma(_2294, cbModelParam._m0[11u].y, _2293 * cbModelParam._m0[11u].x))), _1506);
            frontier_phi_28_52_ladder = _2437.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2437.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2437.x * cbModelParam._m0[1u].y;
        }
        _1588 = frontier_phi_28_52_ladder_2;
        _1590 = frontier_phi_28_52_ladder_1;
        _1592 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_663, _664, _665), _1506);
        _1588 = _1576.x * cbModelParam._m0[1u].y;
        _1590 = _1576.y * cbModelParam._m0[1u].y;
        _1592 = _1576.z * cbModelParam._m0[1u].y;
    }
    float _1596 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _523);
    float _1597 = isnan(_1596) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1596 : min(cbModelParam._m0[25u].w, _1596));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1652 = fma(_727, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _719)) + cbModelParam._m0[21u].w;
        float _1656 = fma(_727, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _719)) + cbModelParam._m0[22u].w;
        float _1660 = fma(_727, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _719)) + cbModelParam._m0[23u].w;
        float _1663 = fma(_665, cbModelParam._m0[21u].z, fma(_664, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _663));
        float _1666 = fma(_665, cbModelParam._m0[22u].z, fma(_664, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _663));
        float _1669 = fma(_665, cbModelParam._m0[23u].z, fma(_664, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _663));
        float _1967;
        if (_1663 > 0.0)
        {
            _1967 = abs((1.0 - _1652) / _1663);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1652 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1967 = frontier_phi_40_36_ladder;
        }
        float _2312;
        if (_1666 > 0.0)
        {
            _2312 = abs((1.0 - _1656) / _1666);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1656 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2312 = frontier_phi_54_47_ladder;
        }
        float _2502;
        if (_1669 > 0.0)
        {
            _2502 = abs((1.0 - _1660) / _1669);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1660 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2502 = frontier_phi_72_65_ladder;
        }
        float _2504 = isnan(_2312) ? _1967 : (isnan(_1967) ? _2312 : min(_1967, _2312));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1663) + _1652;
        float _2510 = (_2505 * _1666) + _1656;
        float _2511 = (_2505 * _1669) + _1660;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2512;
        float _2515 = _2512 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2511 > _2515) || ((_2511 < _2513) || ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 < _2513) || (_2509 > _2515))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2511, cbModelParam._m0[17u].z, fma(_2510, cbModelParam._m0[17u].y, _2509 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2511, cbModelParam._m0[18u].z, fma(_2510, cbModelParam._m0[18u].y, _2509 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2511, cbModelParam._m0[19u].z, fma(_2510, cbModelParam._m0[19u].y, _2509 * cbModelParam._m0[19u].x))), _1597);
            frontier_phi_37_72_ladder = _2753.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2753.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2753.x * cbModelParam._m0[1u].z;
        }
        _1688 = frontier_phi_37_72_ladder_2;
        _1690 = frontier_phi_37_72_ladder_1;
        _1692 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1672 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_663, _664, _665), _1597);
        _1688 = _1672.x * cbModelParam._m0[1u].z;
        _1690 = _1672.y * cbModelParam._m0[1u].z;
        _1692 = _1672.z * cbModelParam._m0[1u].z;
    }
    float _1705 = (((_690 * _640) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1688 - _1588)) + _1588);
    float _1707 = (((_690 * _642) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1709 = (((_690 * _643) + _691) * _655) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1712 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1707, cbSceneParam._m0[89u].y, _1705 * cbSceneParam._m0[89u].x));
    float _1715 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1707, cbSceneParam._m0[90u].y, _1705 * cbSceneParam._m0[90u].x));
    float _1718 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1707, cbSceneParam._m0[91u].y, _1705 * cbSceneParam._m0[91u].x));
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_615 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1736 = _655 + (-1.0);
    float _1739 = (cbLight._m0[_1731].x * _1736) + 1.0;
    float _1740 = (cbLight._m0[_1731].y * _1736) + 1.0;
    uint _1741 = _1730 + 5u;
    float _1747 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1751 = _1730 + 4u;
    float _1758 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1762 = _1730 | 1u;
    float _1773 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_520, _521, _522));
    float _1776 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_520, _521, _522));
    float _3730 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _3741 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1781 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1783 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.3183098733425140380859375;
    float _1790 = ((cbLight._m0[_1741].x * _1747) * _1783) + ((cbLight._m0[_1751].x * _1758) * _1781);
    float _1791 = ((_1747 * cbLight._m0[_1741].y) * _1783) + ((_1758 * cbLight._m0[_1751].y) * _1781);
    float _1792 = ((_1747 * cbLight._m0[_1741].z) * _1783) + ((_1758 * cbLight._m0[_1751].z) * _1781);
    uint _1794 = _1730 + 8u;
    float _1807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1730].w)) * _523) * 0.949999988079071044921875);
    float _1808 = _1807 * _1807;
    float _1809 = cbLight._m0[_1730].x + _548;
    float _1810 = cbLight._m0[_1730].y + _549;
    float _1811 = cbLight._m0[_1730].z + _550;
    float _1815 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
    float _1816 = _1815 * _1809;
    float _1817 = _1815 * _1810;
    float _1818 = _1815 * _1811;
    float _1819 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1730].xyz));
    float _3752 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1822 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _1823 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1824 = dot(vec3(_520, _521, _522), vec3(_1816, _1817, _1818));
    float _3774 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _1828 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1816, _1817, _1818));
    float _3785 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1832 = _1808 * _1808;
    float _1836 = ((_1827 * _1827) * (_1832 + (-1.0))) + 1.0;
    float _1844 = exp2(log2(1.0 - (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * 5.0);
    float _1845 = 0.959999978542327880859375 - _637;
    float _1847 = 0.959999978542327880859375 - _638;
    float _1848 = 0.959999978542327880859375 - _639;
    float _1855 = 1.0 - _1808;
    float _1866 = (0.5 / (((_1823 * ((_1822 * _1855) + _1808)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1855) + _1808) * _1822))) * _1822;
    float _3796 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1832 / ((_1836 * _1836) * 3.141590118408203125));
    uint _1879 = _1730 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _523) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1762].x + _548;
    float _1893 = cbLight._m0[_1762].y + _549;
    float _1894 = cbLight._m0[_1762].z + _550;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_520, _521, _522), vec3(cbLight._m0[_1762].xyz));
    float _3807 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1906 = dot(vec3(_520, _521, _522), vec3(_1899, _1900, _1901));
    float _3818 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1899, _1900, _1901));
    float _3829 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1925 = exp2(log2(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * 5.0);
    float _1932 = 1.0 - _1891;
    float _1942 = (0.5 / (((_1823 * ((_1905 * _1932) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1823 * _1932) + _1891) * _1905))) * _1905;
    float _3840 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1944 = (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1954 = (((((_1925 * _1845) + _640) * cbLight._m0[_1879].x) * _1944) * _1747) + (((((_1844 * _1845) + _640) * cbLight._m0[_1794].x) * _1868) * _1758);
    float _1955 = (((((_1925 * _1847) + _642) * cbLight._m0[_1879].y) * _1944) * _1747) + (((((_1844 * _1847) + _642) * cbLight._m0[_1794].y) * _1868) * _1758);
    float _1956 = (((((_1925 * _1848) + _643) * cbLight._m0[_1879].z) * _1944) * _1747) + (((((_1844 * _1848) + _643) * cbLight._m0[_1794].z) * _1868) * _1758);
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    float _2079;
    float _2081;
    if (_1728.y == 0u)
    {
        float _2011 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2012 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2011;
        float _2013 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2011;
        float _2014 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2011;
        uvec4 _2026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2027 = _2026.x;
        uint _2038 = uint((float(_2026.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _2027))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _2027)));
        float _2048 = (log2(_2014 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2049 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
        uint _2052 = uint(isnan(14.0) ? _2049 : (isnan(_2049) ? 14.0 : min(_2049, 14.0)));
        uvec4 _2057 = texelFetch(g_lightClusterGridBuffer, int(((_2052 << 2u) + (_2038 << 6u)) >> 2u));
        uint _2058 = _2057.x;
        uint _2059 = _2026.z;
        float _2165;
        float _2167;
        float _2169;
        float _2171;
        float _2173;
        float _2175;
        if (((((1u << ((_2059 >> 4u) & 15u)) + 4294967295u) & _2058) == 0u) || ((_2059 & 240u) == 0u))
        {
            _2165 = 0.0;
            _2167 = 0.0;
            _2169 = 0.0;
            _2171 = 0.0;
            _2173 = 0.0;
            _2175 = 0.0;
        }
        else
        {
            float _2166;
            float _2168;
            float _2170;
            float _2172;
            float _2174;
            float _2176;
            float _2349 = 0.0;
            float _2350 = 0.0;
            float _2351 = 0.0;
            float _2352 = 0.0;
            float _2353 = 0.0;
            float _2354 = 0.0;
            uint _2355 = 0u;
            uint _2364;
            bool _2365;
            for (;;)
            {
                _2364 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2355 << 2u)) >> 2u)).x;
                _2365 = _2364 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2365)
                {
                    frontier_phi_67_pred = _2352;
                    frontier_phi_67_pred_1 = _2351;
                    frontier_phi_67_pred_2 = _2350;
                    frontier_phi_67_pred_3 = _2349;
                    frontier_phi_67_pred_4 = _2353;
                    frontier_phi_67_pred_5 = _2354;
                }
                else
                {
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    float _2549;
                    float _2550;
                    uint _2551;
                    _2545 = _2349;
                    _2546 = _2350;
                    _2547 = _2351;
                    _2548 = _2352;
                    _2549 = _2353;
                    _2550 = _2354;
                    _2551 = _2364;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    for (;;)
                    {
                        uint _2555 = uint(findLSB(_2551)) + (_2355 << 5u);
                        uint _2552 = (_2551 + 4294967295u) & _2551;
                        uint _2557 = _2555 * 48u;
                        vec4 _2571 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 3u)).x));
                        uint _2577 = (_2555 * 48u) + 4u;
                        vec4 _2590 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2577)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2577 + 3u)).x));
                        uint _2596 = (_2555 * 48u) + 8u;
                        vec3 _2607 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x));
                        float _2611 = _2571.x - _2012;
                        float _2612 = _2571.y - _2013;
                        float _2613 = _2571.z - _2014;
                        float _2614 = dot(vec3(_2611, _2612, _2613), vec3(_2611, _2612, _2613));
                        float _2617 = inversesqrt(_2614);
                        float _2618 = _2617 * _2611;
                        float _2619 = _2617 * _2612;
                        float _2620 = _2617 * _2613;
                        float _2621 = dot(vec3(_596, _599, _602), vec3(_2618, _2619, _2620));
                        float _2626 = 1.0 - (_2614 * _2571.w);
                        float _3861 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
                        float _2627 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2628 = sqrt(_2614) * _2590.w;
                        float _2631 = 1.39999997615814208984375 / (_2628 + 1.39999997615814208984375);
                        float _2632 = _2631 * _2631;
                        float _2635 = ((1.0 - _2632) * _2621) + _2632;
                        float _2638 = _2628 * _2628;
                        float _2642 = ((isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))) * _2627) / ((_2638 * 0.699999988079071044921875) + 1.0);
                        float _2646 = (-0.0) - _2012;
                        float _2647 = (-0.0) - _2013;
                        float _2648 = (-0.0) - _2014;
                        float _2652 = inversesqrt(dot(vec3(_2646, _2647, _2648), vec3(_2646, _2647, _2648)));
                        float _2653 = _2652 * _2646;
                        float _2654 = _2652 * _2647;
                        float _2655 = _2652 * _2648;
                        float _2663 = exp2(log2(1.0 / ((_2638 * 3.5) + 5.0)) * 0.25);
                        float _2664 = 1.0 - _671;
                        float _2671 = sqrt(1.0 - ((1.0 - (_2664 * _2664)) * (1.0 - (_2663 * _2663))));
                        float _2672 = _2671 * _2671;
                        float _2673 = _2672 * _2672;
                        float _2674 = _2653 + _2618;
                        float _2675 = _2654 + _2619;
                        float _2676 = _2655 + _2620;
                        float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
                        float _2684 = dot(vec3(_596, _599, _602), vec3(_2653, _2654, _2655));
                        float _3877 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2687 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
                        float _2688 = dot(vec3(_596, _599, _602), vec3(_2680 * _2674, _2680 * _2675, _2680 * _2676));
                        float _3888 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
                        float _2691 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                        float _2695 = ((_2691 * _2691) * (_2673 + (-1.0))) + 1.0;
                        float _2696 = _2631 * _2672;
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2621) + _2697;
                        float _3899 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2701 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                        float _2702 = 1.0 - _2672;
                        float _2712 = (0.5 / (((_2701 * ((_2687 * _2702) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2701 * _2702) + _2672) * _2687))) * _2701;
                        float _3910 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2723 = (((_2673 * 3.1415927410125732421875) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) / ((_2695 * _2695) * ((_2638 * 2.1991131305694580078125) + 3.141590118408203125))) * _2627;
                        _2449 = (_2642 * _2590.x) + _2548;
                        _2450 = (_2642 * _2590.y) + _2549;
                        _2451 = (_2642 * _2590.z) + _2550;
                        _2446 = (_2723 * _2607.x) + _2545;
                        _2447 = (_2723 * _2607.y) + _2546;
                        _2448 = (_2723 * _2607.z) + _2547;
                        if (_2552 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2545 = _2446;
                            _2546 = _2447;
                            _2547 = _2448;
                            _2548 = _2449;
                            _2549 = _2450;
                            _2550 = _2451;
                            _2551 = _2552;
                        }
                    }
                    frontier_phi_67_pred = _2449;
                    frontier_phi_67_pred_1 = _2448;
                    frontier_phi_67_pred_2 = _2447;
                    frontier_phi_67_pred_3 = _2446;
                    frontier_phi_67_pred_4 = _2450;
                    frontier_phi_67_pred_5 = _2451;
                }
                _2172 = frontier_phi_67_pred;
                _2170 = frontier_phi_67_pred_1;
                _2168 = frontier_phi_67_pred_2;
                _2166 = frontier_phi_67_pred_3;
                _2174 = frontier_phi_67_pred_4;
                _2176 = frontier_phi_67_pred_5;
                uint _2356 = _2355 + 1u;
                if (_2356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2349 = _2166;
                    _2350 = _2168;
                    _2351 = _2170;
                    _2352 = _2172;
                    _2353 = _2174;
                    _2354 = _2176;
                    _2355 = _2356;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2165 = _2166;
            _2167 = _2168;
            _2169 = _2170;
            _2171 = _2172;
            _2173 = _2174;
            _2175 = _2176;
        }
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.z;
        uint _2182 = (_2180 >> 8u) & 15u;
        float _2317;
        float _2319;
        float _2321;
        float _2323;
        float _2325;
        float _2327;
        if (((4294967295u << _2182) & _2058) == 0u)
        {
            _2317 = _2165;
            _2319 = _2167;
            _2321 = _2169;
            _2323 = _2171;
            _2325 = _2173;
            _2327 = _2175;
        }
        else
        {
            float _2342 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
            float _2343 = _2342 * _2012;
            float _2344 = _2342 * _2013;
            float _2345 = _2342 * _2014;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2182 < ((_2180 >> 12u) & 15u))
            {
                float _2318;
                float _2320;
                float _2322;
                float _2324;
                float _2326;
                float _2328;
                float _2528 = _2165;
                float _2529 = _2167;
                float _2530 = _2169;
                float _2531 = _2171;
                float _2532 = _2173;
                float _2533 = _2175;
                uint _2534 = _2182;
                uint _2543;
                bool _2544;
                for (;;)
                {
                    _2543 = texelFetch(g_lightClassification, int((((_2052 << 5u) + (_2038 << 9u)) + (_2534 << 2u)) >> 2u)).x;
                    _2544 = _2543 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2544)
                    {
                        frontier_phi_81_pred = _2531;
                        frontier_phi_81_pred_1 = _2530;
                        frontier_phi_81_pred_2 = _2529;
                        frontier_phi_81_pred_3 = _2528;
                        frontier_phi_81_pred_4 = _2533;
                        frontier_phi_81_pred_5 = _2532;
                    }
                    else
                    {
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _2763;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _2771 = _2528;
                        float _2772 = _2529;
                        float _2773 = _2530;
                        float _2774 = _2531;
                        float _2775 = _2532;
                        float _2776 = _2533;
                        uint _2777 = _2543;
                        uint _2778;
                        vec4 _2803;
                        float _2804;
                        vec4 _2819;
                        vec3 _2831;
                        vec4 _2846;
                        vec4 _2861;
                        float _2907;
                        bool _2908;
                        for (;;)
                        {
                            uint _2788 = ((_2534 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2777));
                            _2778 = (_2777 + 4294967295u) & _2777;
                            uint _2790 = _2788 * 40u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            _2804 = _2803.w;
                            uint _2806 = (_2788 * 40u) + 4u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2821 = (_2788 * 40u) + 8u;
                            _2831 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2821 + 2u)).x));
                            uint _2833 = (_2788 * 40u) + 16u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2788 * 40u) + 20u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2788 * 40u) + 24u;
                            vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2882 = (_2788 * 40u) + 28u;
                            vec4 _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2907 = fma(_2014, _2895.z, fma(_2013, _2895.y, _2895.x * _2012)) + _2895.w;
                            _2908 = !((fma(_2014, _2876.z, fma(_2013, _2876.y, _2876.x * _2012)) + _2876.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2908)
                            {
                                float _2935 = _2803.x - _2012;
                                float _2936 = _2803.y - _2013;
                                float _2937 = _2803.z - _2014;
                                float _2938 = dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937));
                                float _2941 = inversesqrt(_2938);
                                float _2942 = _2941 * _2935;
                                float _2943 = _2941 * _2936;
                                float _2944 = _2941 * _2937;
                                float _2948 = 1.0 - (_2938 / (_2804 * _2804));
                                float _3921 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                                float _2949 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2953 = sqrt(_2938) * _2819.w;
                                float _2955 = 1.39999997615814208984375 / (_2953 + 1.39999997615814208984375);
                                float _2956 = _2955 * _2955;
                                float _2959 = ((1.0 - _2956) * dot(vec3(_2942, _2943, _2944), vec3(_596, _599, _602))) + _2956;
                                float _2962 = _2953 * _2953;
                                float _2966 = (fma(_2014, _2846.z, fma(_2013, _2846.y, _2846.x * _2012)) + _2846.w) / _2907;
                                float _2967 = (fma(_2014, _2861.z, fma(_2013, _2861.y, _2861.x * _2012)) + _2861.w) / _2907;
                                float _2971 = 1.0 - dot(vec2(_2966, _2967), vec2(_2966, _2967));
                                float _3937 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
                                float _2972 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _2973 = _2972 * (((isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))) * _2949) / ((_2962 * 0.699999988079071044921875) + 1.0));
                                float _2985 = exp2(log2(1.0 / ((_2962 * 3.5) + 5.0)) * 0.25);
                                float _2986 = 1.0 - _671;
                                float _2993 = sqrt(1.0 - ((1.0 - (_2986 * _2986)) * (1.0 - (_2985 * _2985))));
                                float _2994 = _2993 * _2993;
                                float _2995 = _2994 * _2994;
                                float _2996 = _2942 - _2343;
                                float _2997 = _2943 - _2344;
                                float _2998 = _2944 - _2345;
                                float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
                                float _3006 = dot(vec3(_596, _599, _602), vec3((-0.0) - _2343, (-0.0) - _2344, (-0.0) - _2345));
                                float _3948 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3009 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                                float _3010 = dot(vec3(_596, _599, _602), vec3(_3002 * _2996, _3002 * _2997, _3002 * _2998));
                                float _3959 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                                float _3017 = ((_3013 * _3013) * (_2995 + (-1.0))) + 1.0;
                                float _3018 = _2955 * _2994;
                                float _3019 = _3018 * _3018;
                                float _3025 = ((1.0 - _3019) * dot(vec3(_596, _599, _602), vec3(_2942, _2943, _2944))) + _3019;
                                float _3970 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                                float _3027 = 1.0 - _2994;
                                float _3037 = (0.5 / (((_3026 * ((_3009 * _3027) + _2994)) + 9.9999999392252902907785028219223e-09) + (((_3026 * _3027) + _2994) * _3009))) * _3026;
                                float _3981 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3047 = (_2972 * _2949) * (((_2995 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_3017 * _3017) * ((_2962 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _2973 * _2819.x;
                                frontier_phi_87_pred_1 = _3047 * _2831.z;
                                frontier_phi_87_pred_2 = _3047 * _2831.y;
                                frontier_phi_87_pred_3 = _3047 * _2831.x;
                                frontier_phi_87_pred_4 = _2973 * _2819.z;
                                frontier_phi_87_pred_5 = _2973 * _2819.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3054 = frontier_phi_87_pred;
                            _3053 = frontier_phi_87_pred_1;
                            _3052 = frontier_phi_87_pred_2;
                            _3051 = frontier_phi_87_pred_3;
                            _3056 = frontier_phi_87_pred_4;
                            _3055 = frontier_phi_87_pred_5;
                            _2761 = _3054 + _2774;
                            _2762 = _3055 + _2775;
                            _2763 = _3056 + _2776;
                            _2758 = _3051 + _2771;
                            _2759 = _3052 + _2772;
                            _2760 = _3053 + _2773;
                            if (_2778 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2778;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2761;
                        frontier_phi_81_pred_1 = _2760;
                        frontier_phi_81_pred_2 = _2759;
                        frontier_phi_81_pred_3 = _2758;
                        frontier_phi_81_pred_4 = _2763;
                        frontier_phi_81_pred_5 = _2762;
                    }
                    _2324 = frontier_phi_81_pred;
                    _2322 = frontier_phi_81_pred_1;
                    _2320 = frontier_phi_81_pred_2;
                    _2318 = frontier_phi_81_pred_3;
                    _2328 = frontier_phi_81_pred_4;
                    _2326 = frontier_phi_81_pred_5;
                    uint _2535 = _2534 + 1u;
                    if (_2535 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2528 = _2318;
                        _2529 = _2320;
                        _2530 = _2322;
                        _2531 = _2324;
                        _2532 = _2326;
                        _2533 = _2328;
                        _2534 = _2535;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2328;
                frontier_phi_56_57_ladder_1 = _2326;
                frontier_phi_56_57_ladder_2 = _2324;
                frontier_phi_56_57_ladder_3 = _2320;
                frontier_phi_56_57_ladder_4 = _2318;
                frontier_phi_56_57_ladder_5 = _2322;
            }
            else
            {
                frontier_phi_56_57_ladder = _2175;
                frontier_phi_56_57_ladder_1 = _2173;
                frontier_phi_56_57_ladder_2 = _2171;
                frontier_phi_56_57_ladder_3 = _2167;
                frontier_phi_56_57_ladder_4 = _2165;
                frontier_phi_56_57_ladder_5 = _2169;
            }
            _2317 = frontier_phi_56_57_ladder_4;
            _2319 = frontier_phi_56_57_ladder_3;
            _2321 = frontier_phi_56_57_ladder_5;
            _2323 = frontier_phi_56_57_ladder_2;
            _2325 = frontier_phi_56_57_ladder_1;
            _2327 = frontier_phi_56_57_ladder;
        }
        float _2332 = isnan(1.0) ? _655 : (isnan(_655) ? 1.0 : min(_655, 1.0));
        _2071 = (_2332 * _2323) + _1790;
        _2073 = (_2332 * _2325) + _1791;
        _2075 = (_2332 * _2327) + _1792;
        _2077 = ((_2317 * _640) * _2332) + _1954;
        _2079 = ((_2319 * _642) * _2332) + _1955;
        _2081 = ((_2321 * _643) * _2332) + _1956;
    }
    else
    {
        _2071 = _1790;
        _2073 = _1791;
        _2075 = _1792;
        _2077 = _1954;
        _2079 = _1955;
        _2081 = _1956;
    }
    uint _2087 = _616 + uint(cbMatDynParam._m0[0u].w);
    float _3997 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _4008 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _4019 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2112 = (((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2071 + ((isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))) * _655))) + ((_2077 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2087].x * (_455 - (_455 * _288)));
    float _2114 = ((cbInstanceData._m0[_2087].y * (_456 - (_456 * _288))) + ((_2079 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2073 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _655)));
    float _2116 = ((cbInstanceData._m0[_2087].z * (_457 - (_457 * _288))) + ((_2081 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1495)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_2075 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _655)));
    float _2117 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2118 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2119 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    uint _2120 = _615 + 6u;
    float _2128 = _575 / cbSceneParam._m0[86u].x;
    float _2129 = _576 / cbSceneParam._m0[86u].y;
    vec4 _2143 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2145 = _2143.x;
    float _2146 = _2143.y;
    float _2147 = _2143.z;
    float _2148 = _2143.w;
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2190 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2191 = _2190 / _543;
        float _2202 = _2191 * _261;
        float _2203 = _262 * _2191;
        float _2204 = (-0.0) - _2203;
        float _2205 = _2191 * _263;
        float _2207 = (cbSceneParam._m0[77u].w * _2204) / _2190;
        float _2208 = _2207 + cbSceneParam._m0[79u].w;
        float _2209 = cbSceneParam._m0[79u].w - _2203;
        float _2215 = sqrt(((_2202 * _2202) + (_2203 * _2203)) + (_2205 * _2205));
        float _2218 = (1.0 - (cbSceneParam._m0[77u].w / _2190)) * _2215;
        float _2224 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2226 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2459;
        if (abs((_2204 - _2207) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2459 = ((((_2208 > 0.0) ? exp2(_2224 * _2208) : (2.0 - exp2(_2226 * _2208))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2218;
        }
        else
        {
            float _2378 = 1.0 / cbSceneParam._m0[80u].x;
            float _2379 = isnan(_2209) ? _2208 : (isnan(_2208) ? _2209 : max(_2208, _2209));
            float _2380 = isnan(_2209) ? _2208 : (isnan(_2208) ? _2209 : min(_2208, _2209));
            float _2389 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : min(_2379, 0.0));
            float _2390 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : min(_2380, 0.0));
            _2459 = ((abs(_2215 / _2204) * cbSceneParam._m0[80u].y) * ((((_2389 - _2390) * 2.0) - ((exp2(_2224 * (isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0)))) - exp2(_2224 * (isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0))))) * _2378)) - ((exp2(_2226 * _2389) - exp2(_2226 * _2390)) * _2378))) + (_2218 * cbSceneParam._m0[80u].z);
        }
        vec4 _2461 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2128, _2129, 1.0), 0.0);
        float _2470 = exp2((_2459 * (-1.44269502162933349609375)) * (1.0 - _2461.w));
        float _2471 = log2(_2470);
        float _2487 = log2(_2148);
        _2228 = (exp2(_2487 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].x)) * _2461.x) / cbSceneParam._m0[78u].x)) + _2145;
        _2230 = (exp2(_2487 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].y)) * _2461.y) / cbSceneParam._m0[78u].y)) + _2146;
        _2232 = (exp2(_2487 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2471 * cbSceneParam._m0[78u].z)) * _2461.z) / cbSceneParam._m0[78u].z)) + _2147;
        _2234 = _2470 * _2148;
    }
    else
    {
        _2228 = _2145;
        _2230 = _2146;
        _2232 = _2147;
        _2234 = _2148;
    }
    bool _2497;
    vec4 _2244;
    vec4 _2266;
    float _2268;
    float _2272;
    float _2273;
    float _2274;
    float _2275;
    bool _2285;
    for (;;)
    {
        _2244 = cbMatDynParam._m0[0u];
        float _2246 = roundEven(_2244.y);
        bool _2247 = _2246 == 3.0;
        float _2248 = log2(_2234);
        float _2255 = exp2(_2248 * cbSceneParam._m0[78u].x) * _2117;
        float _2256 = exp2(_2248 * cbSceneParam._m0[78u].y) * _2118;
        float _2257 = exp2(_2248 * cbSceneParam._m0[78u].z) * _2119;
        float _2264 = _557 + (-0.5);
        _2266 = cbMtdParam._m0[1u];
        _2268 = _2266.y * _2264;
        float _2271 = (_2246 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2272 = _2271 * (_2247 ? _2255 : (_2255 + (cbSceneParam._m0[72u].w * _2228)));
        _2273 = _2271 * (_2247 ? _2256 : (_2256 + (cbSceneParam._m0[72u].w * _2230)));
        _2274 = _2271 * (_2247 ? _2257 : (_2257 + (cbSceneParam._m0[72u].w * _2232)));
        _2275 = _2264 * 0.999000012874603271484375;
        _2285 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2285)
        {
            if ((cbInstanceData._m0[_615 + 7u].x + _2275) < 0.5)
            {
                _2497 = true;
                break;
            }
        }
        uint _2413 = _616 + uint(_2244.w);
        if ((cbInstanceData._m0[_2413].w < 1.0) && ((cbInstanceData._m0[_2413].w + _2275) < 0.5))
        {
            _2497 = true;
            break;
        }
        if ((_2268 + 1.0) < _2266.x)
        {
            _2497 = true;
            break;
        }
        _2497 = false;
        break;
    }
    float _2728;
    if (_2497)
    {
        discard_state = true;
        _2728 = 0.0;
    }
    else
    {
        _2728 = cbInstanceData._m0[_2120].w;
    }
    SV_Target.x = _2272;
    SV_Target.y = _2273;
    SV_Target.z = _2274;
    SV_Target.w = _2728;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2120].w;
    discard_exit();
}


