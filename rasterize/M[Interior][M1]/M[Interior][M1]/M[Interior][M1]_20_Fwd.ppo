#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _188 = _187 * _180;
    float _189 = _187 * _181;
    float _190 = _187 * _182;
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _202 = _201 * TANGENT.x;
    float _203 = _201 * TANGENT.y;
    float _204 = _201 * TANGENT.z;
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _286 = _280.w;
    float _299 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _286) + cbMtdParam._m0[11u].x) * _280.x;
    float _301 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _286) + cbMtdParam._m0[11u].y) * _280.y;
    float _303 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _286) + cbMtdParam._m0[11u].z) * _280.z;
    vec4 _321 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _325 = _321.z;
    float _348 = (_321.x * 2.0) + (-1.0);
    float _350 = (_321.y * 2.0) + (-1.0);
    float _353 = _348 - (_348 * _286);
    float _354 = _350 - (_350 * _286);
    float _363 = cbMtdParam._m0[22u].y + _259;
    float _364 = cbMtdParam._m0[22u].z + _260;
    float _365 = cbMtdParam._m0[22u].w + _261;
    float _379 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_188, _189, _190));
    float _380 = (-0.0) - dot(vec3(_363, _364, _365), vec3(_202, _203, _204));
    float _381 = (-0.0) - dot(vec3(_363, _364, _365), vec3((-0.0) - _195, (-0.0) - _196, (-0.0) - _197));
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _388 = _385 * _381;
    float _391 = ((_385 * _379) + (_353 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _392 = ((_385 * _380) + (_354 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _393 = fract(TEXCOORD.x);
    float _394 = fract(TEXCOORD.y);
    float _400;
    if (_391 > 0.0)
    {
        _400 = (1.0 - _393) / _391;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_391 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _393) / _391;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _400 = frontier_phi_3_2_ladder;
    }
    float _408;
    if (_392 > 0.0)
    {
        _408 = (1.0 - _394) / _392;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_392 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _394) / _392;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _408 = frontier_phi_7_6_ladder;
    }
    float _412 = (_388 > 0.0) ? (cbMtdParam._m0[15u].x / _388) : 5000.0;
    float _413 = isnan(_408) ? _400 : (isnan(_400) ? _408 : min(_400, _408));
    float _414 = isnan(_412) ? _413 : (isnan(_413) ? _412 : min(_413, _412));
    float _418 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _425 = ((_414 * _388) + _418) / _418;
    vec4 _450 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_393 + (-0.5)) + (_414 * _391)) / _425) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_394 + (-0.5)) + (_414 * _392)) / _425) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _452 = _450.x;
    float _453 = _450.y;
    float _454 = _450.z;
    vec4 _480 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _482 = _480.x;
    vec4 _494 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _498 = _494.z;
    float _501 = (_494.x * 2.0) + (-1.0);
    float _502 = (_494.y * 2.0) + (-1.0);
    float _503 = dot(vec2(_501, _502), vec2(_501, _502));
    float _3123 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _508 = sqrt(1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))));
    float _509 = _498 * _286;
    float _516 = (cbMtdParam._m0[15u].w * ((_325 - _509) + ((_498 - _325) * _286))) + _509;
    float _520 = (cbMtdParam._m0[16u].x * _353) + _501;
    float _521 = (cbMtdParam._m0[16u].x * _354) + _502;
    float _524 = fma(_508, _195, fma(_521, _202, _520 * _188));
    float _527 = fma(_508, _196, fma(_521, _203, _520 * _189));
    float _530 = fma(_508, _197, fma(_521, _204, _520 * _190));
    float _534 = inversesqrt(dot(vec3(_524, _527, _530), vec3(_524, _527, _530)));
    float _535 = _534 * _524;
    float _536 = _534 * _527;
    float _537 = _534 * _530;
    float _3134 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _538 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
    float _3145 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3156 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3167 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3178 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _542 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _563 = _259 * _562;
    float _564 = _260 * _562;
    float _565 = _261 * _562;
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _592 = fma(_537, cbSceneParam._m0[5u].z, fma(_536, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _535));
    float _595 = fma(_537, cbSceneParam._m0[6u].z, fma(_536, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _535));
    float _598 = fma(_537, cbSceneParam._m0[7u].z, fma(_536, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _535));
    uint _611 = uint(roundEven(NORMAL.w)) * 13u;
    uint _613 = _611 + 9u;
    uint _614 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _620 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * cbInstanceData._m0[_614].x;
    float _621 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0)))) * cbInstanceData._m0[_614].y;
    float _622 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0)))) * cbInstanceData._m0[_614].z;
    float _3189 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    float _3200 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    float _3211 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _625 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _626 = 1.0 - _542;
    float _627 = _623 * _626;
    float _628 = _624 * _626;
    float _629 = _625 * _626;
    float _634 = (_623 + (-0.039999999105930328369140625)) * _542;
    float _635 = (_624 + (-0.039999999105930328369140625)) * _542;
    float _636 = (_625 + (-0.039999999105930328369140625)) * _542;
    float _637 = _634 + 0.039999999105930328369140625;
    float _639 = _635 + 0.039999999105930328369140625;
    float _640 = _636 + 0.039999999105930328369140625;
    vec4 _649 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572));
    float _652 = _649.x * TEXCOORD.z;
    float _653 = dot(vec3(_535, _536, _537), vec3(_563, _564, _565));
    float _656 = _653 * 2.0;
    float _660 = (_656 * _535) - _563;
    float _661 = (_656 * _536) - _564;
    float _662 = (_656 * _537) - _565;
    float _666 = abs(dot(vec3(_563, _564, _565), vec3(_535, _536, _537)));
    float _3222 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _668 = sqrt(_538);
    float _681 = exp2((_668 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_668 * 3.0));
    float _687 = (1.0 - _681) * ((_668 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _688 = _681 * _668;
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _720 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _724 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1025;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _752 = fma(_724, cbModelParam._m0[26u].z, fma(_720, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _716));
        float _756 = fma(_724, cbModelParam._m0[27u].z, fma(_720, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _716));
        float _760 = fma(_724, cbModelParam._m0[28u].z, fma(_720, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _716));
        float _783 = _716 + _535;
        float _784 = _720 + _536;
        float _785 = _724 + _537;
        float _795 = fma(_785, cbModelParam._m0[26u].z, fma(_784, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783)) - _752;
        float _796 = fma(_785, cbModelParam._m0[27u].z, fma(_784, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783)) - _756;
        float _797 = fma(_785, cbModelParam._m0[28u].z, fma(_784, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783)) - _760;
        float _801 = inversesqrt(dot(vec3(_795, _796, _797), vec3(_795, _796, _797)));
        float _814 = ((_801 * _795) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_752 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _815 = ((_801 * _796) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_756 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _816 = ((_801 * _797) / cbModelParam._m0[34u].z) + ((((((_760 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_814, _815, _816), 0.0);
        float _853 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _854 = _853 * (_819.x + (-0.5));
        float _855 = _853 * (_819.y + (-0.5));
        float _856 = _853 * (_819.z + (-0.5));
        float _863 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _864 = _863 * (_826.x + (-0.5));
        float _865 = _863 * (_826.y + (-0.5));
        float _866 = _863 * (_826.z + (-0.5));
        float _873 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_833.x + (-0.5));
        float _875 = _873 * (_833.y + (-0.5));
        float _876 = _873 * (_833.z + (-0.5));
        float _883 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_840.x + (-0.5));
        float _885 = _883 * (_840.y + (-0.5));
        float _886 = _883 * (_840.z + (-0.5));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _889 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _890 = _854 * 0.5;
        float _891 = _864 * 0.5;
        float _892 = _874 * 0.5;
        float _893 = dot(vec3(_890, _891, _892), vec3(_890, _891, _892));
        float _898 = (_893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_893);
        float _907 = (dot(vec3(_535, _536, _537), vec3(_898 * _890, _898 * _891, _898 * _892)) + 1.0) * 0.5;
        float _3248 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _917 = sqrt(((_891 * _891) + (_890 * _890)) + (_892 * _892)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3259 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _918 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _919 = _918 * 2.0;
        float _923 = (1.0 - _918) / (_918 + 1.0);
        float _3270 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _933 = ((((1.0 - _924) * (_919 + 2.0)) * exp2(log2(isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0))) * (_919 + 1.0))) + _924) * _887;
        float _934 = _855 * 0.5;
        float _935 = _865 * 0.5;
        float _936 = _875 * 0.5;
        float _937 = dot(vec3(_934, _935, _936), vec3(_934, _935, _936));
        float _942 = (_937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_937);
        float _950 = (dot(vec3(_535, _536, _537), vec3(_942 * _934, _942 * _935, _942 * _936)) + 1.0) * 0.5;
        float _3281 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _959 = sqrt(((_935 * _935) + (_934 * _934)) + (_936 * _936)) / (_888 + 9.9999997473787516355514526367188e-06);
        float _3292 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _960 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _961 = _960 * 2.0;
        float _965 = (1.0 - _960) / (_960 + 1.0);
        float _3303 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _975 = ((((1.0 - _966) * (_961 + 2.0)) * exp2(log2(isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * (_961 + 1.0))) + _966) * _888;
        float _976 = _856 * 0.5;
        float _977 = _866 * 0.5;
        float _978 = _876 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(_535, _536, _537), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_889 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3336 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_1003 + 1.0))) + _1008) * _889;
        _1025 = _856;
        _1027 = _855;
        _1028 = _854;
        _1029 = _866;
        _1030 = _865;
        _1031 = _864;
        _1032 = _876;
        _1033 = _875;
        _1034 = _874;
        _1035 = _889;
        _1036 = _888;
        _1037 = _887;
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0)));
        _1039 = cbModelParam._m0[36u].z * (isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0)));
        _1040 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
    }
    else
    {
        _1025 = _1026;
        _1027 = _1026;
        _1028 = _1026;
        _1029 = _1026;
        _1030 = _1026;
        _1031 = _1026;
        _1032 = _1026;
        _1033 = _1026;
        _1034 = _1026;
        _1035 = _1026;
        _1036 = _1026;
        _1037 = _1026;
        _1038 = 0.0;
        _1039 = 0.0;
        _1040 = 0.0;
    }
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1066 = fma(_724, cbModelParam._m0[30u].z, fma(_720, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _716));
        float _1070 = fma(_724, cbModelParam._m0[31u].z, fma(_720, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _716));
        float _1074 = fma(_724, cbModelParam._m0[32u].z, fma(_720, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _716));
        float _1097 = _716 + _535;
        float _1098 = _720 + _536;
        float _1099 = _724 + _537;
        float _1109 = fma(_1099, cbModelParam._m0[30u].z, fma(_1098, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1097)) - _1066;
        float _1110 = fma(_1099, cbModelParam._m0[31u].z, fma(_1098, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1097)) - _1070;
        float _1111 = fma(_1099, cbModelParam._m0[32u].z, fma(_1098, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1097)) - _1074;
        float _1115 = inversesqrt(dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111)));
        float _1128 = ((_1115 * _1109) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1066 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1129 = ((_1115 * _1110) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1070 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1115 * _1111) / cbModelParam._m0[35u].z) + ((((((_1074 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1139 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1128, _1129, _1130), 0.0);
        float _1165 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1132.x + (-0.5));
        float _1167 = _1165 * (_1132.y + (-0.5));
        float _1168 = _1165 * (_1132.z + (-0.5));
        float _1175 = exp2((_1139.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1139.x + (-0.5));
        float _1177 = _1175 * (_1139.y + (-0.5));
        float _1178 = _1175 * (_1139.z + (-0.5));
        float _1185 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1146.x + (-0.5));
        float _1187 = _1185 * (_1146.y + (-0.5));
        float _1188 = _1185 * (_1146.z + (-0.5));
        float _1195 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1153.x + (-0.5));
        float _1197 = _1195 * (_1153.y + (-0.5));
        float _1198 = _1195 * (_1153.z + (-0.5));
        float _1199 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = _1166 * 0.5;
        float _1203 = _1176 * 0.5;
        float _1204 = _1186 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_535, _536, _537), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1199 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3399 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_1229 + 1.0))) + _1234) * _1199;
        float _1244 = _1167 * 0.5;
        float _1245 = _1177 * 0.5;
        float _1246 = _1187 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_535, _536, _537), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3432 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_1271 + 1.0))) + _1276) * _1200;
        float _1286 = _1168 * 0.5;
        float _1287 = _1178 * 0.5;
        float _1288 = _1188 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_535, _536, _537), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _3465 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1313 + 1.0))) + _1318) * _1201;
        _1335 = _1168;
        _1336 = _1167;
        _1337 = _1166;
        _1338 = _1178;
        _1339 = _1177;
        _1340 = _1176;
        _1341 = _1188;
        _1342 = _1187;
        _1343 = _1186;
        _1344 = _1201;
        _1345 = _1200;
        _1346 = _1199;
        _1347 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
    }
    else
    {
        _1335 = _1026;
        _1336 = _1026;
        _1337 = _1026;
        _1338 = _1026;
        _1339 = _1026;
        _1340 = _1026;
        _1341 = _1026;
        _1342 = _1026;
        _1343 = _1026;
        _1344 = _1026;
        _1345 = _1026;
        _1346 = _1026;
        _1347 = 0.0;
        _1348 = 0.0;
        _1349 = 0.0;
    }
    float _1359 = (cbModelParam._m0[1u].x * (_1347 - _1038)) + _1038;
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1039)) + _1039;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1040)) + _1040;
    float _1382 = fma(_1361, cbSceneParam._m0[89u].z, fma(_1360, cbSceneParam._m0[89u].y, _1359 * cbSceneParam._m0[89u].x));
    float _1385 = fma(_1361, cbSceneParam._m0[90u].z, fma(_1360, cbSceneParam._m0[90u].y, _1359 * cbSceneParam._m0[90u].x));
    float _1388 = fma(_1361, cbSceneParam._m0[91u].z, fma(_1360, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1359));
    float _1403 = _660 * 0.5;
    float _1404 = _661 * 0.5;
    float _1405 = _662 * 0.5;
    float _1406 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1409 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1412 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1335, _1338, _1341, _1344));
    float _1446;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1419 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1025, _1029, _1032, _1035));
        float _1423 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1027, _1030, _1033, _1036));
        float _1427 = dot(vec4(_1403, _1404, _1405, 1.0), vec4(_1028, _1031, _1034, _1037));
        float _1434 = dot(vec4(cbModelParam._m0[39u]), vec4(_1403, _1404, _1405, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1434) ? 0.0 : (isnan(0.0) ? _1434 : max(0.0, _1434))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1457;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1448 = dot(vec4(cbModelParam._m0[40u]), vec4(_1403, _1404, _1405, 1.0));
        _1457 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1448) ? 0.0 : (isnan(0.0) ? _1448 : max(0.0, _1448))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1457 = 1.0;
    }
    float _1461 = (_1457 * cbModelParam._m0[1u].x) + (_1446 * (1.0 - cbModelParam._m0[1u].x));
    float _1471 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _538);
    float _1472 = isnan(_1471) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1471 : min(cbModelParam._m0[25u].z, _1471));
    float _1553;
    float _1555;
    float _1557;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1520 = fma(_724, cbModelParam._m0[13u].z, fma(_720, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716)) + cbModelParam._m0[13u].w;
        float _1524 = fma(_724, cbModelParam._m0[14u].z, fma(_720, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716)) + cbModelParam._m0[14u].w;
        float _1528 = fma(_724, cbModelParam._m0[15u].z, fma(_720, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716)) + cbModelParam._m0[15u].w;
        float _1531 = fma(_662, cbModelParam._m0[13u].z, fma(_661, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _660));
        float _1534 = fma(_662, cbModelParam._m0[14u].z, fma(_661, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _660));
        float _1537 = fma(_662, cbModelParam._m0[15u].z, fma(_661, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _660));
        float _1565;
        if (_1531 > 0.0)
        {
            _1565 = abs((1.0 - _1520) / _1531);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1531 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1520 + 1.0) / _1531);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1565 = frontier_phi_22_20_ladder;
        }
        float _1924;
        if (_1534 > 0.0)
        {
            _1924 = abs((1.0 - _1524) / _1534);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1534 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1524 + 1.0) / _1534);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1924 = frontier_phi_31_27_ladder;
        }
        float _2240;
        if (_1537 > 0.0)
        {
            _2240 = abs((1.0 - _1528) / _1537);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1528 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2240 = frontier_phi_45_38_ladder;
        }
        float _2242 = isnan(_1924) ? _1565 : (isnan(_1565) ? _1924 : min(_1565, _1924));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1531) + _1520;
        float _2248 = (_2243 * _1534) + _1524;
        float _2249 = (_2243 * _1537) + _1528;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1472);
            frontier_phi_21_45_ladder = _2375.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2375.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2375.x * cbModelParam._m0[1u].y;
        }
        _1553 = frontier_phi_21_45_ladder_2;
        _1555 = frontier_phi_21_45_ladder_1;
        _1557 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_660, _661, _662), _1472);
        _1553 = _1541.x * cbModelParam._m0[1u].y;
        _1555 = _1541.y * cbModelParam._m0[1u].y;
        _1557 = _1541.z * cbModelParam._m0[1u].y;
    }
    float _1561 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _538);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1561 : min(cbModelParam._m0[25u].w, _1561));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_724, cbModelParam._m0[21u].z, fma(_720, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_724, cbModelParam._m0[22u].z, fma(_720, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_724, cbModelParam._m0[23u].z, fma(_720, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_662, cbModelParam._m0[21u].z, fma(_661, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _660));
        float _1629 = fma(_662, cbModelParam._m0[22u].z, fma(_661, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _660));
        float _1632 = fma(_662, cbModelParam._m0[23u].z, fma(_661, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _660));
        float _1929;
        if (_1626 > 0.0)
        {
            _1929 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1929 = frontier_phi_33_29_ladder;
        }
        float _2266;
        if (_1629 > 0.0)
        {
            _2266 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2266 = frontier_phi_47_40_ladder;
        }
        float _2435;
        if (_1632 > 0.0)
        {
            _2435 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2435 = frontier_phi_61_56_ladder;
        }
        float _2437 = isnan(_2266) ? _1929 : (isnan(_1929) ? _2266 : min(_1929, _2266));
        float _2438 = isnan(_2435) ? _2437 : (isnan(_2437) ? _2435 : min(_2437, _2435));
        float _2442 = (_2438 * _1626) + _1615;
        float _2443 = (_2438 * _1629) + _1619;
        float _2444 = (_2438 * _1632) + _1623;
        float _2445 = _2438 * 9.9999997473787516355514526367188e-05;
        float _2446 = (-1.0) - _2445;
        float _2448 = _2445 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2444 > _2448) || ((_2444 < _2446) || ((_2443 > _2448) || ((_2443 < _2446) || ((_2442 < _2446) || (_2442 > _2448))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2444, cbModelParam._m0[17u].z, fma(_2443, cbModelParam._m0[17u].y, _2442 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2444, cbModelParam._m0[18u].z, fma(_2443, cbModelParam._m0[18u].y, _2442 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2444, cbModelParam._m0[19u].z, fma(_2443, cbModelParam._m0[19u].y, _2442 * cbModelParam._m0[19u].x))), _1562);
            frontier_phi_30_61_ladder = _2677.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2677.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2677.x * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_30_61_ladder_2;
        _1653 = frontier_phi_30_61_ladder_1;
        _1655 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_660, _661, _662), _1562);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1668 = (((_687 * _637) + _688) * _652) * ((cbModelParam._m0[1u].w * (_1651 - _1553)) + _1553);
    float _1670 = (((_687 * _639) + _688) * _652) * ((cbModelParam._m0[1u].w * (_1653 - _1555)) + _1555);
    float _1672 = (((_687 * _640) + _688) * _652) * ((cbModelParam._m0[1u].w * (_1655 - _1557)) + _1557);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    uvec4 _1691 = floatBitsToUint(cbInstanceData._m0[_611 + 5u]);
    uint _1693 = _1691.x * 14u;
    uint _1694 = _1693 + 13u;
    float _1699 = _652 + (-1.0);
    float _1702 = (cbLight._m0[_1694].x * _1699) + 1.0;
    float _1703 = (cbLight._m0[_1694].y * _1699) + 1.0;
    uint _1704 = _1693 + 5u;
    float _1710 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1714 = _1693 + 4u;
    float _1720 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1724 = _1693 | 1u;
    float _1735 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_535, _536, _537));
    float _1738 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_535, _536, _537));
    float _3601 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _3612 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1743 = (isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * 0.3183098733425140380859375;
    float _1745 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.3183098733425140380859375;
    float _1752 = ((cbLight._m0[_1704].x * _1710) * _1745) + ((cbLight._m0[_1714].x * _1720) * _1743);
    float _1753 = ((_1710 * cbLight._m0[_1704].y) * _1745) + ((_1720 * cbLight._m0[_1714].y) * _1743);
    float _1754 = ((_1710 * cbLight._m0[_1704].z) * _1745) + ((_1720 * cbLight._m0[_1714].z) * _1743);
    uint _1756 = _1693 + 8u;
    float _1769 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _538) * 0.949999988079071044921875);
    float _1770 = _1769 * _1769;
    float _1771 = cbLight._m0[_1693].x + _563;
    float _1772 = cbLight._m0[_1693].y + _564;
    float _1773 = cbLight._m0[_1693].z + _565;
    float _1777 = inversesqrt(dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773)));
    float _1778 = _1777 * _1771;
    float _1779 = _1777 * _1772;
    float _1780 = _1777 * _1773;
    float _1781 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1693].xyz));
    float _3623 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1784 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _3634 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _1785 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _1786 = dot(vec3(_535, _536, _537), vec3(_1778, _1779, _1780));
    float _3645 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1789 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _1790 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1778, _1779, _1780));
    float _3656 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1794 = _1770 * _1770;
    float _1798 = ((_1789 * _1789) * (_1794 + (-1.0))) + 1.0;
    float _1806 = exp2(log2(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * 5.0);
    float _1807 = 0.959999978542327880859375 - _634;
    float _1809 = 0.959999978542327880859375 - _635;
    float _1810 = 0.959999978542327880859375 - _636;
    float _1817 = 1.0 - _1770;
    float _1828 = (0.5 / (((_1785 * ((_1784 * _1817) + _1770)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1817) + _1770) * _1784))) * _1784;
    float _3667 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1830 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1794 / ((_1798 * _1798) * 3.141590118408203125));
    uint _1841 = _1693 + 9u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1724].w)) * _538) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1724].x + _563;
    float _1855 = cbLight._m0[_1724].y + _564;
    float _1856 = cbLight._m0[_1724].z + _565;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_535, _536, _537), vec3(cbLight._m0[_1724].xyz));
    float _3678 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _1868 = dot(vec3(_535, _536, _537), vec3(_1861, _1862, _1863));
    float _3689 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1871 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _1872 = dot(vec3(cbLight._m0[_1724].xyz), vec3(_1861, _1862, _1863));
    float _3700 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _1876 = _1853 * _1853;
    float _1880 = ((_1871 * _1871) * (_1876 + (-1.0))) + 1.0;
    float _1887 = exp2(log2(1.0 - (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * 5.0);
    float _1894 = 1.0 - _1853;
    float _1904 = (0.5 / (((_1785 * ((_1867 * _1894) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1785 * _1894) + _1853) * _1867))) * _1867;
    float _3711 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))) * (_1876 / ((_1880 * _1880) * 3.141590118408203125));
    float _1916 = (((((_1887 * _1807) + _637) * cbLight._m0[_1841].x) * _1906) * _1710) + (((((_1806 * _1807) + _637) * cbLight._m0[_1756].x) * _1830) * _1720);
    float _1917 = (((((_1887 * _1809) + _639) * cbLight._m0[_1841].y) * _1906) * _1710) + (((((_1806 * _1809) + _639) * cbLight._m0[_1756].y) * _1830) * _1720);
    float _1918 = (((((_1887 * _1810) + _640) * cbLight._m0[_1841].z) * _1906) * _1710) + (((((_1806 * _1810) + _640) * cbLight._m0[_1756].z) * _1830) * _1720);
    float _2033;
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    if (_1691.y == 0u)
    {
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1973;
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1973;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1973;
        uvec4 _1988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1989 = _1988.x;
        uint _2000 = uint((float(_1988.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _1989))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _1989)));
        float _2010 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2011 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        uint _2014 = uint(isnan(14.0) ? _2011 : (isnan(_2011) ? 14.0 : min(_2011, 14.0)));
        uvec4 _2019 = texelFetch(g_lightClusterGridBuffer, int(((_2014 << 2u) + (_2000 << 6u)) >> 2u));
        uint _2020 = _2019.x;
        uint _2021 = _1988.z;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        float _2135;
        float _2137;
        if (((((1u << ((_2021 >> 4u) & 15u)) + 4294967295u) & _2020) == 0u) || ((_2021 & 240u) == 0u))
        {
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
            _2135 = 0.0;
            _2137 = 0.0;
        }
        else
        {
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2136;
            float _2138;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2319)
                {
                    frontier_phi_58_pred = _2304;
                    frontier_phi_58_pred_1 = _2308;
                    frontier_phi_58_pred_2 = _2307;
                    frontier_phi_58_pred_3 = _2306;
                    frontier_phi_58_pred_4 = _2305;
                    frontier_phi_58_pred_5 = _2303;
                }
                else
                {
                    float _2478;
                    float _2479;
                    float _2480;
                    float _2481;
                    float _2482;
                    float _2483;
                    uint _2484;
                    _2478 = _2303;
                    _2479 = _2304;
                    _2480 = _2305;
                    _2481 = _2306;
                    _2482 = _2307;
                    _2483 = _2308;
                    _2484 = _2318;
                    float _2384;
                    float _2385;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    for (;;)
                    {
                        uint _2488 = uint(findLSB(_2484)) + (_2309 << 5u);
                        uint _2485 = (_2484 + 4294967295u) & _2484;
                        uint _2490 = _2488 * 48u;
                        vec4 _2504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2490)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 3u)).x));
                        uint _2510 = (_2488 * 48u) + 4u;
                        vec4 _2523 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2510)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2510 + 3u)).x));
                        uint _2529 = (_2488 * 48u) + 8u;
                        vec3 _2540 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2529)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2529 + 2u)).x));
                        float _2544 = _2504.x - _1974;
                        float _2545 = _2504.y - _1975;
                        float _2546 = _2504.z - _1976;
                        float _2547 = dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546));
                        float _2550 = inversesqrt(_2547);
                        float _2551 = _2550 * _2544;
                        float _2552 = _2550 * _2545;
                        float _2553 = _2550 * _2546;
                        float _2554 = dot(vec3(_592, _595, _598), vec3(_2551, _2552, _2553));
                        float _2559 = 1.0 - (_2547 * _2504.w);
                        float _3732 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
                        float _2560 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
                        float _2561 = sqrt(_2547) * _2523.w;
                        float _2564 = 1.39999997615814208984375 / (_2561 + 1.39999997615814208984375);
                        float _2565 = _2564 * _2564;
                        float _2568 = ((1.0 - _2565) * _2554) + _2565;
                        float _2571 = _2561 * _2561;
                        float _2575 = ((isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0))) * _2560) / ((_2571 * 0.699999988079071044921875) + 1.0);
                        float _2579 = (-0.0) - _1974;
                        float _2580 = (-0.0) - _1975;
                        float _2581 = (-0.0) - _1976;
                        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
                        float _2586 = _2585 * _2579;
                        float _2587 = _2585 * _2580;
                        float _2588 = _2585 * _2581;
                        float _2596 = exp2(log2(1.0 / ((_2571 * 3.5) + 5.0)) * 0.25);
                        float _2597 = 1.0 - _668;
                        float _2604 = sqrt(1.0 - ((1.0 - (_2597 * _2597)) * (1.0 - (_2596 * _2596))));
                        float _2605 = _2604 * _2604;
                        float _2606 = _2605 * _2605;
                        float _2607 = _2586 + _2551;
                        float _2608 = _2587 + _2552;
                        float _2609 = _2588 + _2553;
                        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
                        float _2617 = dot(vec3(_592, _595, _598), vec3(_2586, _2587, _2588));
                        float _3748 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
                        float _2620 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
                        float _2621 = dot(vec3(_592, _595, _598), vec3(_2613 * _2607, _2613 * _2608, _2613 * _2609));
                        float _3759 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
                        float _2624 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
                        float _2628 = ((_2624 * _2624) * (_2606 + (-1.0))) + 1.0;
                        float _2629 = _2564 * _2605;
                        float _2630 = _2629 * _2629;
                        float _2633 = ((1.0 - _2630) * _2554) + _2630;
                        float _3770 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
                        float _2634 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                        float _2635 = 1.0 - _2605;
                        float _2645 = (0.5 / (((_2634 * ((_2620 * _2635) + _2605)) + 9.9999999392252902907785028219223e-09) + (((_2634 * _2635) + _2605) * _2620))) * _2634;
                        float _3781 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
                        float _2656 = (((_2606 * 3.1415927410125732421875) * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) / ((_2628 * _2628) * ((_2571 * 2.1991131305694580078125) + 3.141590118408203125))) * _2560;
                        _2387 = (_2575 * _2523.x) + _2481;
                        _2388 = (_2575 * _2523.y) + _2482;
                        _2389 = (_2575 * _2523.z) + _2483;
                        _2384 = (_2656 * _2540.x) + _2478;
                        _2385 = (_2656 * _2540.y) + _2479;
                        _2386 = (_2656 * _2540.z) + _2480;
                        if (_2485 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2478 = _2384;
                            _2479 = _2385;
                            _2480 = _2386;
                            _2481 = _2387;
                            _2482 = _2388;
                            _2483 = _2389;
                            _2484 = _2485;
                        }
                    }
                    frontier_phi_58_pred = _2385;
                    frontier_phi_58_pred_1 = _2389;
                    frontier_phi_58_pred_2 = _2388;
                    frontier_phi_58_pred_3 = _2387;
                    frontier_phi_58_pred_4 = _2386;
                    frontier_phi_58_pred_5 = _2384;
                }
                _2130 = frontier_phi_58_pred;
                _2138 = frontier_phi_58_pred_1;
                _2136 = frontier_phi_58_pred_2;
                _2134 = frontier_phi_58_pred_3;
                _2132 = frontier_phi_58_pred_4;
                _2128 = frontier_phi_58_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2128;
                    _2304 = _2130;
                    _2305 = _2132;
                    _2306 = _2134;
                    _2307 = _2136;
                    _2308 = _2138;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
            _2135 = _2136;
            _2137 = _2138;
        }
        uvec4 _2141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2142 = _2141.z;
        uint _2144 = (_2142 >> 8u) & 15u;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        if (((4294967295u << _2144) & _2020) == 0u)
        {
            _2271 = _2127;
            _2273 = _2129;
            _2275 = _2131;
            _2277 = _2133;
            _2279 = _2135;
            _2281 = _2137;
        }
        else
        {
            float _2296 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _2297 = _2296 * _1974;
            float _2298 = _2296 * _1975;
            float _2299 = _2296 * _1976;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2144 < ((_2142 >> 12u) & 15u))
            {
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2461 = _2127;
                float _2462 = _2129;
                float _2463 = _2131;
                float _2464 = _2133;
                float _2465 = _2135;
                float _2466 = _2137;
                uint _2467 = _2144;
                uint _2476;
                bool _2477;
                for (;;)
                {
                    _2476 = texelFetch(g_lightClassification, int((((_2014 << 5u) + (_2000 << 9u)) + (_2467 << 2u)) >> 2u)).x;
                    _2477 = _2476 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2477)
                    {
                        frontier_phi_67_pred = _2466;
                        frontier_phi_67_pred_1 = _2465;
                        frontier_phi_67_pred_2 = _2464;
                        frontier_phi_67_pred_3 = _2463;
                        frontier_phi_67_pred_4 = _2462;
                        frontier_phi_67_pred_5 = _2461;
                    }
                    else
                    {
                        float _2682;
                        float _2683;
                        float _2684;
                        float _2685;
                        float _2686;
                        float _2687;
                        float _2975;
                        float _2976;
                        float _2977;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2695 = _2461;
                        float _2696 = _2462;
                        float _2697 = _2463;
                        float _2698 = _2464;
                        float _2699 = _2465;
                        float _2700 = _2466;
                        uint _2701 = _2476;
                        uint _2702;
                        vec4 _2727;
                        float _2728;
                        vec4 _2743;
                        vec3 _2755;
                        vec4 _2770;
                        vec4 _2785;
                        float _2831;
                        bool _2832;
                        for (;;)
                        {
                            uint _2712 = ((_2467 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2701));
                            _2702 = (_2701 + 4294967295u) & _2701;
                            uint _2714 = _2712 * 40u;
                            _2727 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2714 + 3u)).x));
                            _2728 = _2727.w;
                            uint _2730 = (_2712 * 40u) + 4u;
                            _2743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 3u)).x));
                            uint _2745 = (_2712 * 40u) + 8u;
                            _2755 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x));
                            uint _2757 = (_2712 * 40u) + 16u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2772 = (_2712 * 40u) + 20u;
                            _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            uint _2787 = (_2712 * 40u) + 24u;
                            vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            uint _2806 = (_2712 * 40u) + 28u;
                            vec4 _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            _2831 = fma(_1976, _2819.z, fma(_1975, _2819.y, _2819.x * _1974)) + _2819.w;
                            _2832 = !((fma(_1976, _2800.z, fma(_1975, _2800.y, _2800.x * _1974)) + _2800.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2832)
                            {
                                float _2859 = _2727.x - _1974;
                                float _2860 = _2727.y - _1975;
                                float _2861 = _2727.z - _1976;
                                float _2862 = dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861));
                                float _2865 = inversesqrt(_2862);
                                float _2866 = _2865 * _2859;
                                float _2867 = _2865 * _2860;
                                float _2868 = _2865 * _2861;
                                float _2872 = 1.0 - (_2862 / (_2728 * _2728));
                                float _3792 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                                float _2873 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
                                float _2877 = sqrt(_2862) * _2743.w;
                                float _2879 = 1.39999997615814208984375 / (_2877 + 1.39999997615814208984375);
                                float _2880 = _2879 * _2879;
                                float _2883 = ((1.0 - _2880) * dot(vec3(_2866, _2867, _2868), vec3(_592, _595, _598))) + _2880;
                                float _2886 = _2877 * _2877;
                                float _2890 = (fma(_1976, _2770.z, fma(_1975, _2770.y, _2770.x * _1974)) + _2770.w) / _2831;
                                float _2891 = (fma(_1976, _2785.z, fma(_1975, _2785.y, _2785.x * _1974)) + _2785.w) / _2831;
                                float _2895 = 1.0 - dot(vec2(_2890, _2891), vec2(_2890, _2891));
                                float _3808 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                                float _2896 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                                float _2897 = _2896 * (((isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))) * _2873) / ((_2886 * 0.699999988079071044921875) + 1.0));
                                float _2909 = exp2(log2(1.0 / ((_2886 * 3.5) + 5.0)) * 0.25);
                                float _2910 = 1.0 - _668;
                                float _2917 = sqrt(1.0 - ((1.0 - (_2910 * _2910)) * (1.0 - (_2909 * _2909))));
                                float _2918 = _2917 * _2917;
                                float _2919 = _2918 * _2918;
                                float _2920 = _2866 - _2297;
                                float _2921 = _2867 - _2298;
                                float _2922 = _2868 - _2299;
                                float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
                                float _2930 = dot(vec3(_592, _595, _598), vec3((-0.0) - _2297, (-0.0) - _2298, (-0.0) - _2299));
                                float _3819 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2933 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                                float _2934 = dot(vec3(_592, _595, _598), vec3(_2926 * _2920, _2926 * _2921, _2926 * _2922));
                                float _3830 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2937 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                                float _2941 = ((_2937 * _2937) * (_2919 + (-1.0))) + 1.0;
                                float _2942 = _2879 * _2918;
                                float _2943 = _2942 * _2942;
                                float _2949 = ((1.0 - _2943) * dot(vec3(_592, _595, _598), vec3(_2866, _2867, _2868))) + _2943;
                                float _3841 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                                float _2951 = 1.0 - _2918;
                                float _2961 = (0.5 / (((_2950 * ((_2933 * _2951) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2950 * _2951) + _2918) * _2933))) * _2950;
                                float _3852 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                                float _2971 = (_2896 * _2873) * (((_2919 * 3.1415927410125732421875) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) / ((_2941 * _2941) * ((_2886 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2897 * _2743.z;
                                frontier_phi_73_pred_1 = _2897 * _2743.y;
                                frontier_phi_73_pred_2 = _2897 * _2743.x;
                                frontier_phi_73_pred_3 = _2971 * _2755.z;
                                frontier_phi_73_pred_4 = _2971 * _2755.y;
                                frontier_phi_73_pred_5 = _2971 * _2755.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2980 = frontier_phi_73_pred;
                            _2979 = frontier_phi_73_pred_1;
                            _2978 = frontier_phi_73_pred_2;
                            _2977 = frontier_phi_73_pred_3;
                            _2976 = frontier_phi_73_pred_4;
                            _2975 = frontier_phi_73_pred_5;
                            _2685 = _2978 + _2698;
                            _2686 = _2979 + _2699;
                            _2687 = _2980 + _2700;
                            _2682 = _2975 + _2695;
                            _2683 = _2976 + _2696;
                            _2684 = _2977 + _2697;
                            if (_2702 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2695 = _2682;
                                _2696 = _2683;
                                _2697 = _2684;
                                _2698 = _2685;
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2702;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2687;
                        frontier_phi_67_pred_1 = _2686;
                        frontier_phi_67_pred_2 = _2685;
                        frontier_phi_67_pred_3 = _2684;
                        frontier_phi_67_pred_4 = _2683;
                        frontier_phi_67_pred_5 = _2682;
                    }
                    _2282 = frontier_phi_67_pred;
                    _2280 = frontier_phi_67_pred_1;
                    _2278 = frontier_phi_67_pred_2;
                    _2276 = frontier_phi_67_pred_3;
                    _2274 = frontier_phi_67_pred_4;
                    _2272 = frontier_phi_67_pred_5;
                    uint _2468 = _2467 + 1u;
                    if (_2468 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2461 = _2272;
                        _2462 = _2274;
                        _2463 = _2276;
                        _2464 = _2278;
                        _2465 = _2280;
                        _2466 = _2282;
                        _2467 = _2468;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2278;
                frontier_phi_49_50_ladder_1 = _2282;
                frontier_phi_49_50_ladder_2 = _2280;
                frontier_phi_49_50_ladder_3 = _2276;
                frontier_phi_49_50_ladder_4 = _2274;
                frontier_phi_49_50_ladder_5 = _2272;
            }
            else
            {
                frontier_phi_49_50_ladder = _2133;
                frontier_phi_49_50_ladder_1 = _2137;
                frontier_phi_49_50_ladder_2 = _2135;
                frontier_phi_49_50_ladder_3 = _2131;
                frontier_phi_49_50_ladder_4 = _2129;
                frontier_phi_49_50_ladder_5 = _2127;
            }
            _2271 = frontier_phi_49_50_ladder_5;
            _2273 = frontier_phi_49_50_ladder_4;
            _2275 = frontier_phi_49_50_ladder_3;
            _2277 = frontier_phi_49_50_ladder;
            _2279 = frontier_phi_49_50_ladder_2;
            _2281 = frontier_phi_49_50_ladder_1;
        }
        float _2286 = isnan(1.0) ? _652 : (isnan(_652) ? 1.0 : min(_652, 1.0));
        _2033 = (_2286 * _2277) + _1752;
        _2035 = (_2286 * _2279) + _1753;
        _2037 = (_2286 * _2281) + _1754;
        _2039 = ((_2271 * _637) * _2286) + _1916;
        _2041 = ((_2273 * _639) * _2286) + _1917;
        _2043 = ((_2275 * _640) * _2286) + _1918;
    }
    else
    {
        _2033 = _1752;
        _2035 = _1753;
        _2037 = _1754;
        _2039 = _1916;
        _2041 = _1917;
        _2043 = _1918;
    }
    uint _2049 = _613 + uint(cbMatDynParam._m0[0u].w);
    float _3868 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3879 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3890 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _2074 = (((isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_2033 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _652))) + ((_2039 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + (((_452 - (_452 * _286)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2049].x);
    float _2076 = ((((_453 - (_453 * _286)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2049].y) + ((_2041 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_2035 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _652)));
    float _2078 = (((cbMtdParam._m0[9u].z * (_454 - (_454 * _286))) * cbInstanceData._m0[_2049].z) + ((_2043 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1461)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_2037 + ((isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0))) * _652)));
    uint _2082 = _611 + 6u;
    float _2090 = _571 / cbSceneParam._m0[86u].x;
    float _2091 = _572 / cbSceneParam._m0[86u].y;
    vec4 _2105 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2090, _2091, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2107 = _2105.x;
    float _2108 = _2105.y;
    float _2109 = _2105.z;
    float _2110 = _2105.w;
    float _2190;
    float _2192;
    float _2194;
    float _2196;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _2152 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _2153 = _2152 / _558;
        float _2164 = _2153 * _259;
        float _2165 = _260 * _2153;
        float _2166 = (-0.0) - _2165;
        float _2167 = _2153 * _261;
        float _2169 = (cbSceneParam._m0[77u].w * _2166) / _2152;
        float _2170 = _2169 + cbSceneParam._m0[79u].w;
        float _2171 = cbSceneParam._m0[79u].w - _2165;
        float _2177 = sqrt(((_2164 * _2164) + (_2165 * _2165)) + (_2167 * _2167));
        float _2180 = (1.0 - (cbSceneParam._m0[77u].w / _2152)) * _2177;
        float _2186 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2188 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2397;
        if (abs((_2166 - _2169) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2397 = ((((_2170 > 0.0) ? exp2(_2186 * _2170) : (2.0 - exp2(_2188 * _2170))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2180;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : max(_2170, _2171));
            float _2334 = isnan(_2171) ? _2170 : (isnan(_2170) ? _2171 : min(_2170, _2171));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2397 = ((abs(_2177 / _2166) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2186 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2186 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2188 * _2343) - exp2(_2188 * _2344)) * _2332))) + (_2180 * cbSceneParam._m0[80u].z);
        }
        vec4 _2399 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2090, _2091, 1.0), 0.0);
        float _2408 = exp2((_2397 * (-1.44269502162933349609375)) * (1.0 - _2399.w));
        float _2409 = log2(_2408);
        float _2425 = log2(_2110);
        _2190 = (exp2(_2425 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].x)) * _2399.x) / cbSceneParam._m0[78u].x)) + _2107;
        _2192 = (exp2(_2425 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].y)) * _2399.y) / cbSceneParam._m0[78u].y)) + _2108;
        _2194 = (exp2(_2425 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2409 * cbSceneParam._m0[78u].z)) * _2399.z) / cbSceneParam._m0[78u].z)) + _2109;
        _2196 = _2408 * _2110;
    }
    else
    {
        _2190 = _2107;
        _2192 = _2108;
        _2194 = _2109;
        _2196 = _2110;
    }
    float _2208 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2209 = _2208 == 3.0;
    float _2210 = log2(_2196);
    float _2217 = exp2(_2210 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0)));
    float _2218 = exp2(_2210 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0)));
    float _2219 = exp2(_2210 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0)));
    float _2228 = (_2208 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2228 * (_2209 ? _2217 : (_2217 + (cbSceneParam._m0[72u].w * _2190)));
    SV_Target.y = _2228 * (_2209 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2192)));
    SV_Target.z = _2228 * (_2209 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2194)));
    SV_Target.w = cbInstanceData._m0[_2082].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2082].w;
}


