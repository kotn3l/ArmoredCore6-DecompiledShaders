#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1073;
float _3238;
float _3239;
float _3240;
float _3241;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _327 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _331 = _327.z;
    float _354 = (_327.x * 2.0) + (-1.0);
    float _356 = (_327.y * 2.0) + (-1.0);
    float _359 = _354 - (_354 * _292);
    float _360 = _356 - (_356 * _292);
    float _369 = cbMtdParam._m0[22u].y + _265;
    float _370 = cbMtdParam._m0[22u].z + _266;
    float _371 = cbMtdParam._m0[22u].w + _267;
    float _385 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_194, _195, _196));
    float _386 = (-0.0) - dot(vec3(_369, _370, _371), vec3(_208, _209, _210));
    float _387 = (-0.0) - dot(vec3(_369, _370, _371), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _394 = _391 * _387;
    float _397 = ((_391 * _385) + (_359 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _398 = ((_391 * _386) + (_360 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _399 = fract(TEXCOORD.x);
    float _400 = fract(TEXCOORD.y);
    float _406;
    if (_397 > 0.0)
    {
        _406 = (1.0 - _399) / _397;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_397 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _399) / _397;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _406 = frontier_phi_3_2_ladder;
    }
    float _414;
    if (_398 > 0.0)
    {
        _414 = (1.0 - _400) / _398;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_398 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _400) / _398;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _414 = frontier_phi_7_6_ladder;
    }
    float _418 = (_394 > 0.0) ? (cbMtdParam._m0[15u].x / _394) : 5000.0;
    float _419 = isnan(_414) ? _406 : (isnan(_406) ? _414 : min(_406, _414));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _431 = ((_420 * _394) + _424) / _424;
    vec4 _456 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_399 + (-0.5)) + (_420 * _397)) / _431) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_400 + (-0.5)) + (_420 * _398)) / _431) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _458 = _456.x;
    float _459 = _456.y;
    float _460 = _456.z;
    vec4 _486 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _488 = _486.x;
    vec4 _500 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _504 = _500.z;
    float _507 = (_500.x * 2.0) + (-1.0);
    float _508 = (_500.y * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3260 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))));
    float _515 = _504 * _292;
    float _522 = (cbMtdParam._m0[15u].w * ((_331 - _515) + ((_504 - _331) * _292))) + _515;
    float _526 = (cbMtdParam._m0[16u].x * _359) + _507;
    float _527 = (cbMtdParam._m0[16u].x * _360) + _508;
    float _530 = fma(_514, _201, fma(_527, _208, _526 * _194));
    float _533 = fma(_514, _202, fma(_527, _209, _526 * _195));
    float _536 = fma(_514, _203, fma(_527, _210, _526 * _196));
    float _540 = inversesqrt(dot(vec3(_530, _533, _536), vec3(_530, _533, _536)));
    float _541 = _540 * _530;
    float _542 = _540 * _533;
    float _543 = _540 * _536;
    float _3271 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _544 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3293 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3304 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3315 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _548 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _569 = _265 * _568;
    float _570 = _266 * _568;
    float _571 = _267 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _754 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _760 = (cbMatDynParam._m0[5u].x * _754) + cbMatDynParam._m0[5u].y;
        float _3326 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _765 = (cbMatDynParam._m0[5u].z * _754) + cbMatDynParam._m0[5u].w;
        float _3337 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) - _761)) + _761) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _611 = fma(_543, cbSceneParam._m0[5u].z, fma(_542, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _541));
    float _614 = fma(_543, cbSceneParam._m0[6u].z, fma(_542, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _541));
    float _617 = fma(_543, cbSceneParam._m0[7u].z, fma(_542, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _541));
    uint _630 = uint(roundEven(NORMAL.w)) * 13u;
    uint _632 = _630 + 9u;
    uint _633 = _632 + uint(cbMatDynParam._m0[0u].w);
    float _639 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0)))) * cbInstanceData._m0[_633].x;
    float _640 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0)))) * cbInstanceData._m0[_633].y;
    float _641 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0)))) * cbInstanceData._m0[_633].z;
    float _3348 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
    float _3359 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _643 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
    float _3370 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _644 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _645 = 1.0 - _548;
    float _646 = _642 * _645;
    float _647 = _643 * _645;
    float _648 = _644 * _645;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _548;
    float _654 = (_643 + (-0.039999999105930328369140625)) * _548;
    float _655 = (_644 + (-0.039999999105930328369140625)) * _548;
    float _656 = _653 + 0.039999999105930328369140625;
    float _658 = _654 + 0.039999999105930328369140625;
    float _659 = _655 + 0.039999999105930328369140625;
    vec4 _668 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _671 = _668.x * TEXCOORD.z;
    float _672 = dot(vec3(_541, _542, _543), vec3(_569, _570, _571));
    float _675 = _672 * 2.0;
    float _679 = (_675 * _541) - _569;
    float _680 = (_675 * _542) - _570;
    float _681 = (_675 * _543) - _571;
    float _685 = abs(dot(vec3(_569, _570, _571), vec3(_541, _542, _543)));
    float _3381 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _687 = sqrt(_544);
    float _700 = exp2((_687 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_687 * 3.0));
    float _706 = (1.0 - _700) * ((_687 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _707 = _700 * _687;
    float _735 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _799 = fma(_743, cbModelParam._m0[26u].z, fma(_739, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _735));
        float _803 = fma(_743, cbModelParam._m0[27u].z, fma(_739, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _735));
        float _807 = fma(_743, cbModelParam._m0[28u].z, fma(_739, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _735));
        float _830 = _735 + _541;
        float _831 = _739 + _542;
        float _832 = _743 + _543;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _799;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _803;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _807;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_799 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_803 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_807 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_541, _542, _543), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3429 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_541, _542, _543), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3462 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_541, _542, _543), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3495 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1074 = _902;
        _1075 = _901;
        _1076 = _913;
        _1077 = _912;
        _1078 = _911;
        _1079 = _923;
        _1080 = _922;
        _1081 = _921;
        _1082 = _936;
        _1083 = _935;
        _1084 = _934;
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1087 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _1073;
        _1074 = _1073;
        _1075 = _1073;
        _1076 = _1073;
        _1077 = _1073;
        _1078 = _1073;
        _1079 = _1073;
        _1080 = _1073;
        _1081 = _1073;
        _1082 = _1073;
        _1083 = _1073;
        _1084 = _1073;
        _1085 = 0.0;
        _1086 = 0.0;
        _1087 = 0.0;
    }
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1116 = fma(_743, cbModelParam._m0[30u].z, fma(_739, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _735));
        float _1120 = fma(_743, cbModelParam._m0[31u].z, fma(_739, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _735));
        float _1124 = fma(_743, cbModelParam._m0[32u].z, fma(_739, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _735));
        float _1147 = _735 + _541;
        float _1148 = _739 + _542;
        float _1149 = _743 + _543;
        float _1159 = fma(_1149, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147)) - _1116;
        float _1160 = fma(_1149, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147)) - _1120;
        float _1161 = fma(_1149, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147)) - _1124;
        float _1165 = inversesqrt(dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161)));
        float _1178 = ((_1165 * _1159) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1116 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1179 = ((_1165 * _1160) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1120 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1180 = ((_1165 * _1161) / cbModelParam._m0[35u].z) + ((((((_1124 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1178, _1179, _1180), 0.0);
        float _1215 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1182.x + (-0.5));
        float _1217 = _1215 * (_1182.y + (-0.5));
        float _1218 = _1215 * (_1182.z + (-0.5));
        float _1225 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1189.x + (-0.5));
        float _1227 = _1225 * (_1189.y + (-0.5));
        float _1228 = _1225 * (_1189.z + (-0.5));
        float _1235 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1196.x + (-0.5));
        float _1237 = _1235 * (_1196.y + (-0.5));
        float _1238 = _1235 * (_1196.z + (-0.5));
        float _1245 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1203.x + (-0.5));
        float _1247 = _1245 * (_1203.y + (-0.5));
        float _1248 = _1245 * (_1203.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_541, _542, _543), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3558 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_1279 + 1.0))) + _1284) * _1249;
        float _1294 = _1217 * 0.5;
        float _1295 = _1227 * 0.5;
        float _1296 = _1237 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_541, _542, _543), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3569 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3580 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3591 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (_1321 + 1.0))) + _1326) * _1250;
        float _1336 = _1218 * 0.5;
        float _1337 = _1228 * 0.5;
        float _1338 = _1238 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_541, _542, _543), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _3624 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1363 + 1.0))) + _1368) * _1251;
        _1385 = _1218;
        _1386 = _1217;
        _1387 = _1216;
        _1388 = _1228;
        _1389 = _1227;
        _1390 = _1226;
        _1391 = _1238;
        _1392 = _1237;
        _1393 = _1236;
        _1394 = _1251;
        _1395 = _1250;
        _1396 = _1249;
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1398 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1399 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
    }
    else
    {
        _1385 = _1073;
        _1386 = _1073;
        _1387 = _1073;
        _1388 = _1073;
        _1389 = _1073;
        _1390 = _1073;
        _1391 = _1073;
        _1392 = _1073;
        _1393 = _1073;
        _1394 = _1073;
        _1395 = _1073;
        _1396 = _1073;
        _1397 = 0.0;
        _1398 = 0.0;
        _1399 = 0.0;
    }
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1410 = (cbModelParam._m0[1u].x * (_1398 - _1086)) + _1086;
    float _1411 = (cbModelParam._m0[1u].x * (_1399 - _1087)) + _1087;
    float _1432 = fma(_1411, cbSceneParam._m0[89u].z, fma(_1410, cbSceneParam._m0[89u].y, _1409 * cbSceneParam._m0[89u].x));
    float _1435 = fma(_1411, cbSceneParam._m0[90u].z, fma(_1410, cbSceneParam._m0[90u].y, _1409 * cbSceneParam._m0[90u].x));
    float _1438 = fma(_1411, cbSceneParam._m0[91u].z, fma(_1410, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1409));
    float _1453 = _679 * 0.5;
    float _1454 = _680 * 0.5;
    float _1455 = _681 * 0.5;
    float _1456 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1387, _1390, _1393, _1396));
    float _1459 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1386, _1389, _1392, _1395));
    float _1462 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1496;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1469 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1072, _1076, _1079, _1082));
        float _1473 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1477 = dot(vec4(_1453, _1454, _1455, 1.0), vec4(_1075, _1078, _1081, _1084));
        float _1484 = dot(vec4(cbModelParam._m0[39u]), vec4(_1453, _1454, _1455, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1484) ? 0.0 : (isnan(0.0) ? _1484 : max(0.0, _1484))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1507;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1498 = dot(vec4(cbModelParam._m0[40u]), vec4(_1453, _1454, _1455, 1.0));
        _1507 = dot(vec3(isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1498) ? 0.0 : (isnan(0.0) ? _1498 : max(0.0, _1498))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1507 = 1.0;
    }
    float _1511 = (_1507 * cbModelParam._m0[1u].x) + (_1496 * (1.0 - cbModelParam._m0[1u].x));
    float _1521 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _544);
    float _1522 = isnan(_1521) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1521 : min(cbModelParam._m0[25u].z, _1521));
    float _1603;
    float _1605;
    float _1607;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1570 = fma(_743, cbModelParam._m0[13u].z, fma(_739, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _735)) + cbModelParam._m0[13u].w;
        float _1574 = fma(_743, cbModelParam._m0[14u].z, fma(_739, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _735)) + cbModelParam._m0[14u].w;
        float _1578 = fma(_743, cbModelParam._m0[15u].z, fma(_739, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _735)) + cbModelParam._m0[15u].w;
        float _1581 = fma(_681, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _679));
        float _1584 = fma(_681, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _679));
        float _1587 = fma(_681, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _679));
        float _1615;
        if (_1581 > 0.0)
        {
            _1615 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1615 = frontier_phi_25_23_ladder;
        }
        float _1998;
        if (_1584 > 0.0)
        {
            _1998 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1998 = frontier_phi_34_30_ladder;
        }
        float _2322;
        if (_1587 > 0.0)
        {
            _2322 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2322 = frontier_phi_48_41_ladder;
        }
        float _2324 = isnan(_1998) ? _1615 : (isnan(_1615) ? _1998 : min(_1615, _1998));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1581) + _1570;
        float _2330 = (_2325 * _1584) + _1574;
        float _2331 = (_2325 * _1587) + _1578;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2473 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1522);
            frontier_phi_24_48_ladder = _2473.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2473.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2473.x * cbModelParam._m0[1u].y;
        }
        _1603 = frontier_phi_24_48_ladder_2;
        _1605 = frontier_phi_24_48_ladder_1;
        _1607 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1591 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_679, _680, _681), _1522);
        _1603 = _1591.x * cbModelParam._m0[1u].y;
        _1605 = _1591.y * cbModelParam._m0[1u].y;
        _1607 = _1591.z * cbModelParam._m0[1u].y;
    }
    float _1611 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _544);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1611 : min(cbModelParam._m0[25u].w, _1611));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1665 = fma(_743, cbModelParam._m0[21u].z, fma(_739, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _735)) + cbModelParam._m0[21u].w;
        float _1669 = fma(_743, cbModelParam._m0[22u].z, fma(_739, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _735)) + cbModelParam._m0[22u].w;
        float _1673 = fma(_743, cbModelParam._m0[23u].z, fma(_739, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _735)) + cbModelParam._m0[23u].w;
        float _1676 = fma(_681, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _679));
        float _1679 = fma(_681, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _679));
        float _1682 = fma(_681, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _679));
        float _2003;
        if (_1676 > 0.0)
        {
            _2003 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2003 = frontier_phi_36_32_ladder;
        }
        float _2348;
        if (_1679 > 0.0)
        {
            _2348 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2348 = frontier_phi_50_43_ladder;
        }
        float _2538;
        if (_1682 > 0.0)
        {
            _2538 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2538 = frontier_phi_68_61_ladder;
        }
        float _2540 = isnan(_2348) ? _2003 : (isnan(_2003) ? _2348 : min(_2003, _2348));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1676) + _1665;
        float _2546 = (_2541 * _1679) + _1669;
        float _2547 = (_2541 * _1682) + _1673;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1612);
            frontier_phi_33_68_ladder = _2789.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2789.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2789.x * cbModelParam._m0[1u].z;
        }
        _1701 = frontier_phi_33_68_ladder_2;
        _1703 = frontier_phi_33_68_ladder;
        _1705 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1685 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_679, _680, _681), _1612);
        _1701 = _1685.x * cbModelParam._m0[1u].z;
        _1703 = _1685.y * cbModelParam._m0[1u].z;
        _1705 = _1685.z * cbModelParam._m0[1u].z;
    }
    float _1718 = (((_706 * _656) + _707) * _671) * ((cbModelParam._m0[1u].w * (_1701 - _1603)) + _1603);
    float _1720 = (((_706 * _658) + _707) * _671) * ((cbModelParam._m0[1u].w * (_1703 - _1605)) + _1605);
    float _1722 = (((_706 * _659) + _707) * _671) * ((cbModelParam._m0[1u].w * (_1705 - _1607)) + _1607);
    float _1725 = fma(_1722, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1718 * cbSceneParam._m0[89u].x));
    float _1728 = fma(_1722, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1718 * cbSceneParam._m0[90u].x));
    float _1731 = fma(_1722, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, _1718 * cbSceneParam._m0[91u].x));
    vec4 _1739 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_591, _592));
    float _1741 = _1739.w;
    float _1753 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1741);
    float _1754 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1741);
    float _1755 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1741);
    uvec4 _1759 = floatBitsToUint(cbInstanceData._m0[_630 + 5u]);
    uint _1761 = _1759.x * 14u;
    uint _1762 = _1761 + 13u;
    float _1767 = _671 + (-1.0);
    float _1770 = (cbLight._m0[_1762].x * _1767) + 1.0;
    float _1771 = (cbLight._m0[_1762].y * _1767) + 1.0;
    uint _1772 = _1761 + 5u;
    float _1778 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1782 = _1761 + 4u;
    float _1791 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
    uint _1795 = _1761 | 1u;
    float _1806 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_541, _542, _543));
    float _1809 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_541, _542, _543));
    float _3760 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _3771 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1814 = (isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.3183098733425140380859375;
    float _1816 = (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * 0.3183098733425140380859375;
    float _1823 = ((cbLight._m0[_1772].x * _1778) * _1816) + (((cbLight._m0[_1782].x * _1753) * _1791) * _1814);
    float _1824 = ((_1778 * cbLight._m0[_1772].y) * _1816) + (((cbLight._m0[_1782].y * _1754) * _1791) * _1814);
    float _1825 = ((_1778 * cbLight._m0[_1772].z) * _1816) + (((cbLight._m0[_1782].z * _1755) * _1791) * _1814);
    uint _1827 = _1761 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1761].w)) * _544) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1761].x + _569;
    float _1843 = cbLight._m0[_1761].y + _570;
    float _1844 = cbLight._m0[_1761].z + _571;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1761].xyz));
    float _3782 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _1856 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1857 = dot(vec3(_541, _542, _543), vec3(_1849, _1850, _1851));
    float _3804 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1761].xyz), vec3(_1849, _1850, _1851));
    float _3815 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0);
    float _1878 = 0.959999978542327880859375 - _653;
    float _1880 = 0.959999978542327880859375 - _654;
    float _1881 = 0.959999978542327880859375 - _655;
    float _1888 = 1.0 - _1841;
    float _1899 = (0.5 / (((_1856 * ((_1855 * _1888) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1888) + _1841) * _1855))) * _1855;
    float _3826 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    uint _1915 = _1761 + 9u;
    float _1926 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _544) * 0.949999988079071044921875);
    float _1927 = _1926 * _1926;
    float _1928 = cbLight._m0[_1795].x + _569;
    float _1929 = cbLight._m0[_1795].y + _570;
    float _1930 = cbLight._m0[_1795].z + _571;
    float _1934 = inversesqrt(dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930)));
    float _1935 = _1934 * _1928;
    float _1936 = _1934 * _1929;
    float _1937 = _1934 * _1930;
    float _1938 = dot(vec3(_541, _542, _543), vec3(cbLight._m0[_1795].xyz));
    float _3837 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1941 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1942 = dot(vec3(_541, _542, _543), vec3(_1935, _1936, _1937));
    float _3848 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
    float _1945 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1946 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1935, _1936, _1937));
    float _3859 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
    float _1950 = _1927 * _1927;
    float _1954 = ((_1945 * _1945) * (_1950 + (-1.0))) + 1.0;
    float _1961 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1968 = 1.0 - _1927;
    float _1978 = (0.5 / (((_1856 * ((_1941 * _1968) + _1927)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1968) + _1927) * _1941))) * _1941;
    float _3870 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1950 / ((_1954 * _1954) * 3.141590118408203125));
    float _1990 = (((((_1961 * _1878) + _656) * cbLight._m0[_1915].x) * _1980) * _1778) + ((((cbLight._m0[_1827].x * _1753) * ((_1877 * _1878) + _656)) * _1901) * _1791);
    float _1991 = (((((_1961 * _1880) + _658) * cbLight._m0[_1915].y) * _1980) * _1778) + ((((cbLight._m0[_1827].y * _1754) * ((_1877 * _1880) + _658)) * _1901) * _1791);
    float _1992 = (((((_1961 * _1881) + _659) * cbLight._m0[_1915].z) * _1980) * _1778) + ((((cbLight._m0[_1827].z * _1755) * ((_1877 * _1881) + _659)) * _1901) * _1791);
    float _2107;
    float _2109;
    float _2111;
    float _2113;
    float _2115;
    float _2117;
    if (_1759.y == 0u)
    {
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2047;
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2047;
        float _2050 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2047;
        uvec4 _2062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2063 = _2062.x;
        uint _2074 = uint((float(_2062.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _2063))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _2063)));
        float _2084 = (log2(_2050 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2085 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        uint _2088 = uint(isnan(14.0) ? _2085 : (isnan(_2085) ? 14.0 : min(_2085, 14.0)));
        uvec4 _2093 = texelFetch(g_lightClusterGridBuffer, int(((_2088 << 2u) + (_2074 << 6u)) >> 2u));
        uint _2094 = _2093.x;
        uint _2095 = _2062.z;
        float _2201;
        float _2203;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        if (((((1u << ((_2095 >> 4u) & 15u)) + 4294967295u) & _2094) == 0u) || ((_2095 & 240u) == 0u))
        {
            _2201 = 0.0;
            _2203 = 0.0;
            _2205 = 0.0;
            _2207 = 0.0;
            _2209 = 0.0;
            _2211 = 0.0;
        }
        else
        {
            float _2202;
            float _2204;
            float _2206;
            float _2208;
            float _2210;
            float _2212;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            uint _2391 = 0u;
            uint _2400;
            bool _2401;
            for (;;)
            {
                _2400 = texelFetch(g_lightClassification, int((((_2088 << 5u) + (_2074 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                _2401 = _2400 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2401)
                {
                    frontier_phi_63_pred = _2387;
                    frontier_phi_63_pred_1 = _2390;
                    frontier_phi_63_pred_2 = _2389;
                    frontier_phi_63_pred_3 = _2388;
                    frontier_phi_63_pred_4 = _2386;
                    frontier_phi_63_pred_5 = _2385;
                }
                else
                {
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    uint _2587;
                    _2581 = _2385;
                    _2582 = _2386;
                    _2583 = _2387;
                    _2584 = _2388;
                    _2585 = _2389;
                    _2586 = _2390;
                    _2587 = _2400;
                    float _2482;
                    float _2483;
                    float _2484;
                    float _2485;
                    float _2486;
                    float _2487;
                    for (;;)
                    {
                        uint _2591 = uint(findLSB(_2587)) + (_2391 << 5u);
                        uint _2588 = (_2587 + 4294967295u) & _2587;
                        uint _2593 = _2591 * 48u;
                        vec4 _2607 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2593)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2593 + 3u)).x));
                        uint _2613 = (_2591 * 48u) + 4u;
                        vec4 _2626 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2613)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2613 + 3u)).x));
                        uint _2632 = (_2591 * 48u) + 8u;
                        vec3 _2643 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2632)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2632 + 2u)).x));
                        float _2647 = _2607.x - _2048;
                        float _2648 = _2607.y - _2049;
                        float _2649 = _2607.z - _2050;
                        float _2650 = dot(vec3(_2647, _2648, _2649), vec3(_2647, _2648, _2649));
                        float _2653 = inversesqrt(_2650);
                        float _2654 = _2653 * _2647;
                        float _2655 = _2653 * _2648;
                        float _2656 = _2653 * _2649;
                        float _2657 = dot(vec3(_611, _614, _617), vec3(_2654, _2655, _2656));
                        float _2662 = 1.0 - (_2650 * _2607.w);
                        float _3891 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
                        float _2663 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
                        float _2664 = sqrt(_2650) * _2626.w;
                        float _2667 = 1.39999997615814208984375 / (_2664 + 1.39999997615814208984375);
                        float _2668 = _2667 * _2667;
                        float _2671 = ((1.0 - _2668) * _2657) + _2668;
                        float _2674 = _2664 * _2664;
                        float _2678 = ((isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0))) * _2663) / ((_2674 * 0.699999988079071044921875) + 1.0);
                        float _2682 = (-0.0) - _2048;
                        float _2683 = (-0.0) - _2049;
                        float _2684 = (-0.0) - _2050;
                        float _2688 = inversesqrt(dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684)));
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2699 = exp2(log2(1.0 / ((_2674 * 3.5) + 5.0)) * 0.25);
                        float _2700 = 1.0 - _687;
                        float _2707 = sqrt(1.0 - ((1.0 - (_2700 * _2700)) * (1.0 - (_2699 * _2699))));
                        float _2708 = _2707 * _2707;
                        float _2709 = _2708 * _2708;
                        float _2710 = _2689 + _2654;
                        float _2711 = _2690 + _2655;
                        float _2712 = _2691 + _2656;
                        float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
                        float _2720 = dot(vec3(_611, _614, _617), vec3(_2689, _2690, _2691));
                        float _3907 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
                        float _2723 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                        float _2724 = dot(vec3(_611, _614, _617), vec3(_2716 * _2710, _2716 * _2711, _2716 * _2712));
                        float _3918 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2727 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
                        float _2731 = ((_2727 * _2727) * (_2709 + (-1.0))) + 1.0;
                        float _2732 = _2667 * _2708;
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2657) + _2733;
                        float _3929 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2737 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
                        float _2738 = 1.0 - _2708;
                        float _2748 = (0.5 / (((_2737 * ((_2723 * _2738) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2738) + _2708) * _2723))) * _2737;
                        float _3940 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2759 = (((_2709 * 3.1415927410125732421875) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) / ((_2731 * _2731) * ((_2674 * 2.1991131305694580078125) + 3.141590118408203125))) * _2663;
                        _2485 = (_2678 * _2626.x) + _2584;
                        _2486 = (_2678 * _2626.y) + _2585;
                        _2487 = (_2678 * _2626.z) + _2586;
                        _2482 = (_2759 * _2643.x) + _2581;
                        _2483 = (_2759 * _2643.y) + _2582;
                        _2484 = (_2759 * _2643.z) + _2583;
                        if (_2588 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2581 = _2482;
                            _2582 = _2483;
                            _2583 = _2484;
                            _2584 = _2485;
                            _2585 = _2486;
                            _2586 = _2487;
                            _2587 = _2588;
                        }
                    }
                    frontier_phi_63_pred = _2484;
                    frontier_phi_63_pred_1 = _2487;
                    frontier_phi_63_pred_2 = _2486;
                    frontier_phi_63_pred_3 = _2485;
                    frontier_phi_63_pred_4 = _2483;
                    frontier_phi_63_pred_5 = _2482;
                }
                _2206 = frontier_phi_63_pred;
                _2212 = frontier_phi_63_pred_1;
                _2210 = frontier_phi_63_pred_2;
                _2208 = frontier_phi_63_pred_3;
                _2204 = frontier_phi_63_pred_4;
                _2202 = frontier_phi_63_pred_5;
                uint _2392 = _2391 + 1u;
                if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2385 = _2202;
                    _2386 = _2204;
                    _2387 = _2206;
                    _2388 = _2208;
                    _2389 = _2210;
                    _2390 = _2212;
                    _2391 = _2392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2201 = _2202;
            _2203 = _2204;
            _2205 = _2206;
            _2207 = _2208;
            _2209 = _2210;
            _2211 = _2212;
        }
        uvec4 _2215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2216 = _2215.z;
        uint _2218 = (_2216 >> 8u) & 15u;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((4294967295u << _2218) & _2094) == 0u)
        {
            _2353 = _2201;
            _2355 = _2203;
            _2357 = _2205;
            _2359 = _2207;
            _2361 = _2209;
            _2363 = _2211;
        }
        else
        {
            float _2378 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
            float _2379 = _2378 * _2048;
            float _2380 = _2378 * _2049;
            float _2381 = _2378 * _2050;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2218 < ((_2216 >> 12u) & 15u))
            {
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2564 = _2201;
                float _2565 = _2203;
                float _2566 = _2205;
                float _2567 = _2207;
                float _2568 = _2209;
                float _2569 = _2211;
                uint _2570 = _2218;
                uint _2579;
                bool _2580;
                for (;;)
                {
                    _2579 = texelFetch(g_lightClassification, int((((_2088 << 5u) + (_2074 << 9u)) + (_2570 << 2u)) >> 2u)).x;
                    _2580 = _2579 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2580)
                    {
                        frontier_phi_77_pred = _2569;
                        frontier_phi_77_pred_1 = _2568;
                        frontier_phi_77_pred_2 = _2567;
                        frontier_phi_77_pred_3 = _2566;
                        frontier_phi_77_pred_4 = _2565;
                        frontier_phi_77_pred_5 = _2564;
                    }
                    else
                    {
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _2807 = _2564;
                        float _2808 = _2565;
                        float _2809 = _2566;
                        float _2810 = _2567;
                        float _2811 = _2568;
                        float _2812 = _2569;
                        uint _2813 = _2579;
                        uint _2814;
                        vec4 _2839;
                        float _2840;
                        vec4 _2855;
                        vec3 _2867;
                        vec4 _2882;
                        vec4 _2897;
                        float _2943;
                        bool _2944;
                        for (;;)
                        {
                            uint _2824 = ((_2570 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2813));
                            _2814 = (_2813 + 4294967295u) & _2813;
                            uint _2826 = _2824 * 40u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            _2840 = _2839.w;
                            uint _2842 = (_2824 * 40u) + 4u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2857 = (_2824 * 40u) + 8u;
                            _2867 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x));
                            uint _2869 = (_2824 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2884 = (_2824 * 40u) + 20u;
                            _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2899 = (_2824 * 40u) + 24u;
                            vec4 _2912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2899 + 3u)).x));
                            uint _2918 = (_2824 * 40u) + 28u;
                            vec4 _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            _2943 = fma(_2050, _2931.z, fma(_2049, _2931.y, _2931.x * _2048)) + _2931.w;
                            _2944 = !((fma(_2050, _2912.z, fma(_2049, _2912.y, _2912.x * _2048)) + _2912.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2944)
                            {
                                float _2971 = _2839.x - _2048;
                                float _2972 = _2839.y - _2049;
                                float _2973 = _2839.z - _2050;
                                float _2974 = dot(vec3(_2971, _2972, _2973), vec3(_2971, _2972, _2973));
                                float _2977 = inversesqrt(_2974);
                                float _2978 = _2977 * _2971;
                                float _2979 = _2977 * _2972;
                                float _2980 = _2977 * _2973;
                                float _2984 = 1.0 - (_2974 / (_2840 * _2840));
                                float _3951 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                                float _2989 = sqrt(_2974) * _2855.w;
                                float _2991 = 1.39999997615814208984375 / (_2989 + 1.39999997615814208984375);
                                float _2992 = _2991 * _2991;
                                float _2995 = ((1.0 - _2992) * dot(vec3(_2978, _2979, _2980), vec3(_611, _614, _617))) + _2992;
                                float _2998 = _2989 * _2989;
                                float _3002 = (fma(_2050, _2882.z, fma(_2049, _2882.y, _2882.x * _2048)) + _2882.w) / _2943;
                                float _3003 = (fma(_2050, _2897.z, fma(_2049, _2897.y, _2897.x * _2048)) + _2897.w) / _2943;
                                float _3007 = 1.0 - dot(vec2(_3002, _3003), vec2(_3002, _3003));
                                float _3967 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                                float _3009 = _3008 * (((isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0))) * _2985) / ((_2998 * 0.699999988079071044921875) + 1.0));
                                float _3021 = exp2(log2(1.0 / ((_2998 * 3.5) + 5.0)) * 0.25);
                                float _3022 = 1.0 - _687;
                                float _3029 = sqrt(1.0 - ((1.0 - (_3022 * _3022)) * (1.0 - (_3021 * _3021))));
                                float _3030 = _3029 * _3029;
                                float _3031 = _3030 * _3030;
                                float _3032 = _2978 - _2379;
                                float _3033 = _2979 - _2380;
                                float _3034 = _2980 - _2381;
                                float _3038 = inversesqrt(dot(vec3(_3032, _3033, _3034), vec3(_3032, _3033, _3034)));
                                float _3042 = dot(vec3(_611, _614, _617), vec3((-0.0) - _2379, (-0.0) - _2380, (-0.0) - _2381));
                                float _3978 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3045 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                                float _3046 = dot(vec3(_611, _614, _617), vec3(_3038 * _3032, _3038 * _3033, _3038 * _3034));
                                float _3989 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3049 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                                float _3053 = ((_3049 * _3049) * (_3031 + (-1.0))) + 1.0;
                                float _3054 = _2991 * _3030;
                                float _3055 = _3054 * _3054;
                                float _3061 = ((1.0 - _3055) * dot(vec3(_611, _614, _617), vec3(_2978, _2979, _2980))) + _3055;
                                float _4000 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                                float _3063 = 1.0 - _3030;
                                float _3073 = (0.5 / (((_3062 * ((_3045 * _3063) + _3030)) + 9.9999999392252902907785028219223e-09) + (((_3062 * _3063) + _3030) * _3045))) * _3062;
                                float _4011 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3083 = (_3008 * _2985) * (((_3031 * 3.1415927410125732421875) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) / ((_3053 * _3053) * ((_2998 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3009 * _2855.x;
                                frontier_phi_83_pred_1 = _3009 * _2855.z;
                                frontier_phi_83_pred_2 = _3009 * _2855.y;
                                frontier_phi_83_pred_3 = _3083 * _2867.z;
                                frontier_phi_83_pred_4 = _3083 * _2867.y;
                                frontier_phi_83_pred_5 = _3083 * _2867.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_83_pred;
                            _3092 = frontier_phi_83_pred_1;
                            _3091 = frontier_phi_83_pred_2;
                            _3089 = frontier_phi_83_pred_3;
                            _3088 = frontier_phi_83_pred_4;
                            _3087 = frontier_phi_83_pred_5;
                            _2797 = _3090 + _2810;
                            _2798 = _3091 + _2811;
                            _2799 = _3092 + _2812;
                            _2794 = _3087 + _2807;
                            _2795 = _3088 + _2808;
                            _2796 = _3089 + _2809;
                            if (_2814 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2814;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2799;
                        frontier_phi_77_pred_1 = _2798;
                        frontier_phi_77_pred_2 = _2797;
                        frontier_phi_77_pred_3 = _2796;
                        frontier_phi_77_pred_4 = _2795;
                        frontier_phi_77_pred_5 = _2794;
                    }
                    _2364 = frontier_phi_77_pred;
                    _2362 = frontier_phi_77_pred_1;
                    _2360 = frontier_phi_77_pred_2;
                    _2358 = frontier_phi_77_pred_3;
                    _2356 = frontier_phi_77_pred_4;
                    _2354 = frontier_phi_77_pred_5;
                    uint _2571 = _2570 + 1u;
                    if (_2571 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2564 = _2354;
                        _2565 = _2356;
                        _2566 = _2358;
                        _2567 = _2360;
                        _2568 = _2362;
                        _2569 = _2364;
                        _2570 = _2571;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2356;
                frontier_phi_52_53_ladder_1 = _2364;
                frontier_phi_52_53_ladder_2 = _2362;
                frontier_phi_52_53_ladder_3 = _2360;
                frontier_phi_52_53_ladder_4 = _2358;
                frontier_phi_52_53_ladder_5 = _2354;
            }
            else
            {
                frontier_phi_52_53_ladder = _2203;
                frontier_phi_52_53_ladder_1 = _2211;
                frontier_phi_52_53_ladder_2 = _2209;
                frontier_phi_52_53_ladder_3 = _2207;
                frontier_phi_52_53_ladder_4 = _2205;
                frontier_phi_52_53_ladder_5 = _2201;
            }
            _2353 = frontier_phi_52_53_ladder_5;
            _2355 = frontier_phi_52_53_ladder;
            _2357 = frontier_phi_52_53_ladder_4;
            _2359 = frontier_phi_52_53_ladder_3;
            _2361 = frontier_phi_52_53_ladder_2;
            _2363 = frontier_phi_52_53_ladder_1;
        }
        float _2368 = isnan(1.0) ? _671 : (isnan(_671) ? 1.0 : min(_671, 1.0));
        _2107 = (_2368 * _2359) + _1823;
        _2109 = (_2368 * _2361) + _1824;
        _2111 = (_2368 * _2363) + _1825;
        _2113 = ((_2353 * _656) * _2368) + _1990;
        _2115 = ((_2355 * _658) * _2368) + _1991;
        _2117 = ((_2357 * _659) * _2368) + _1992;
    }
    else
    {
        _2107 = _1823;
        _2109 = _1824;
        _2111 = _1825;
        _2113 = _1990;
        _2115 = _1991;
        _2117 = _1992;
    }
    uint _2123 = _632 + uint(cbMatDynParam._m0[0u].w);
    float _4027 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4038 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4049 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2148 = (((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_2107 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _671))) + ((_2113 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + (((_458 - (_458 * _292)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2123].x);
    float _2150 = ((((_459 - (_459 * _292)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2123].y) + ((_2115 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2109 + ((isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))) * _671)));
    float _2152 = (((cbMtdParam._m0[9u].z * (_460 - (_460 * _292))) * cbInstanceData._m0[_2123].z) + ((_2117 + ((isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0))) * _1511)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_2111 + ((isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))) * _671)));
    float _2153 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2154 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2155 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    uint _2156 = _630 + 6u;
    float _2164 = _591 / cbSceneParam._m0[86u].x;
    float _2165 = _592 / cbSceneParam._m0[86u].y;
    vec4 _2179 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2164, _2165, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2181 = _2179.x;
    float _2182 = _2179.y;
    float _2183 = _2179.z;
    float _2184 = _2179.w;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2226 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2227 = _2226 / _564;
        float _2238 = _2227 * _265;
        float _2239 = _266 * _2227;
        float _2240 = (-0.0) - _2239;
        float _2241 = _2227 * _267;
        float _2243 = (cbSceneParam._m0[77u].w * _2240) / _2226;
        float _2244 = _2243 + cbSceneParam._m0[79u].w;
        float _2245 = cbSceneParam._m0[79u].w - _2239;
        float _2251 = sqrt(((_2238 * _2238) + (_2239 * _2239)) + (_2241 * _2241));
        float _2254 = (1.0 - (cbSceneParam._m0[77u].w / _2226)) * _2251;
        float _2260 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2262 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2495;
        if (abs((_2240 - _2243) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2495 = ((((_2244 > 0.0) ? exp2(_2260 * _2244) : (2.0 - exp2(_2262 * _2244))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2254;
        }
        else
        {
            float _2414 = 1.0 / cbSceneParam._m0[80u].x;
            float _2415 = isnan(_2245) ? _2244 : (isnan(_2244) ? _2245 : max(_2244, _2245));
            float _2416 = isnan(_2245) ? _2244 : (isnan(_2244) ? _2245 : min(_2244, _2245));
            float _2425 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : min(_2415, 0.0));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            _2495 = ((abs(_2251 / _2240) * cbSceneParam._m0[80u].y) * ((((_2425 - _2426) * 2.0) - ((exp2(_2260 * (isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0)))) - exp2(_2260 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))))) * _2414)) - ((exp2(_2262 * _2425) - exp2(_2262 * _2426)) * _2414))) + (_2254 * cbSceneParam._m0[80u].z);
        }
        vec4 _2497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2164, _2165, 1.0), 0.0);
        float _2506 = exp2((_2495 * (-1.44269502162933349609375)) * (1.0 - _2497.w));
        float _2507 = log2(_2506);
        float _2523 = log2(_2184);
        _2264 = (exp2(_2523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].x)) * _2497.x) / cbSceneParam._m0[78u].x)) + _2181;
        _2266 = (exp2(_2523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].y)) * _2497.y) / cbSceneParam._m0[78u].y)) + _2182;
        _2268 = (exp2(_2523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2507 * cbSceneParam._m0[78u].z)) * _2497.z) / cbSceneParam._m0[78u].z)) + _2183;
        _2270 = _2506 * _2184;
    }
    else
    {
        _2264 = _2181;
        _2266 = _2182;
        _2268 = _2183;
        _2270 = _2184;
    }
    bool _2533;
    vec4 _2280;
    vec4 _2302;
    float _2304;
    float _2308;
    float _2309;
    float _2310;
    float _2311;
    bool _2321;
    for (;;)
    {
        _2280 = cbMatDynParam._m0[0u];
        float _2282 = roundEven(_2280.y);
        bool _2283 = _2282 == 3.0;
        float _2284 = log2(_2270);
        float _2291 = exp2(_2284 * cbSceneParam._m0[78u].x) * _2153;
        float _2292 = exp2(_2284 * cbSceneParam._m0[78u].y) * _2154;
        float _2293 = exp2(_2284 * cbSceneParam._m0[78u].z) * _2155;
        float _2300 = _578 + (-0.5);
        _2302 = cbMtdParam._m0[1u];
        _2304 = _2302.y * _2300;
        float _2307 = (_2282 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2308 = _2307 * (_2283 ? _2291 : (_2291 + (cbSceneParam._m0[72u].w * _2264)));
        _2309 = _2307 * (_2283 ? _2292 : (_2292 + (cbSceneParam._m0[72u].w * _2266)));
        _2310 = _2307 * (_2283 ? _2293 : (_2293 + (cbSceneParam._m0[72u].w * _2268)));
        _2311 = _2300 * 0.999000012874603271484375;
        _2321 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2321)
        {
            if ((cbInstanceData._m0[_630 + 7u].x + _2311) < 0.5)
            {
                _2533 = true;
                break;
            }
        }
        uint _2449 = _632 + uint(_2280.w);
        if ((cbInstanceData._m0[_2449].w < 1.0) && ((cbInstanceData._m0[_2449].w + _2311) < 0.5))
        {
            _2533 = true;
            break;
        }
        if ((_2304 + 1.0) < _2302.x)
        {
            _2533 = true;
            break;
        }
        _2533 = false;
        break;
    }
    float _2764;
    if (_2533)
    {
        discard_state = true;
        _2764 = 0.0;
    }
    else
    {
        _2764 = cbInstanceData._m0[_2156].w;
    }
    SV_Target.x = _2308;
    SV_Target.y = _2309;
    SV_Target.z = _2310;
    SV_Target.w = _2764;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2156].w;
    discard_exit();
}


