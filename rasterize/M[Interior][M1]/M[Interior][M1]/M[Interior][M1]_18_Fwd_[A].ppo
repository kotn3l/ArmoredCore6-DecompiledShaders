#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _342;
float _2779;
float _2780;
float _2781;
float _2782;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _170 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _171 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _176 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _177 = _176 * _169;
    float _178 = _176 * _170;
    float _179 = _176 * _171;
    float _183 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _187 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _188 = _187 * TANGENT.x;
    float _189 = _187 * TANGENT.y;
    float _190 = _187 * TANGENT.z;
    float _235 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _245 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _235);
    float _246 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _235);
    float _247 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _235);
    float _272 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _279 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _288 = cbMtdParam._m0[23u].x + _245;
    float _289 = cbMtdParam._m0[23u].y + _246;
    float _290 = cbMtdParam._m0[23u].z + _247;
    float _307 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_272 * _177, _272 * _178, _272 * _179));
    float _308 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_279 * _188, _279 * _189, _279 * _190));
    float _309 = (-0.0) - dot(vec3(_288, _289, _290), vec3((-0.0) - (NORMAL.x * _183), (-0.0) - (NORMAL.y * _183), (-0.0) - (NORMAL.z * _183)));
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _313 * _309;
    float _316 = (cbMtdParam._m0[19u].w * _307) * _313;
    float _318 = (cbMtdParam._m0[20u].x * _308) * _313;
    float _321 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _322 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _340;
    float _343;
    float _345;
    if (_316 > 0.0)
    {
        float _326 = (1.0 - _321) / _316;
        _340 = _326;
        _343 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_326 * _314)) * 0.16666667163372039794921875;
        _345 = (fract((_326 * _318) + _322) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_316 < 0.0)
        {
            float _341 = ((-0.0) - _321) / _316;
            frontier_phi_3_2_ladder = _341;
            frontier_phi_3_2_ladder_1 = (fract((_341 * _318) + _322) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_341 * _314) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _342;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _340 = frontier_phi_3_2_ladder;
        _343 = frontier_phi_3_2_ladder_2;
        _345 = frontier_phi_3_2_ladder_1;
    }
    float _371;
    float _373;
    float _375;
    if (_318 > 0.0)
    {
        float _358 = (1.0 - _322) / _318;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_358 < _340)
        {
            frontier_phi_8_5_ladder = (fract(_358 * _314) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_358 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _358;
        }
        else
        {
            frontier_phi_8_5_ladder = _345;
            frontier_phi_8_5_ladder_1 = _343;
            frontier_phi_8_5_ladder_2 = _340;
        }
        _371 = frontier_phi_8_5_ladder_2;
        _373 = frontier_phi_8_5_ladder_1;
        _375 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_318 < 0.0)
        {
            float _372 = ((-0.0) - _322) / _318;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_372 < _340)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_372 * _314) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_372 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _372;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _345;
                frontier_phi_8_6_ladder_9_ladder_1 = _343;
                frontier_phi_8_6_ladder_9_ladder_2 = _340;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _345;
            frontier_phi_8_6_ladder_1 = _343;
            frontier_phi_8_6_ladder_2 = _340;
        }
        _371 = frontier_phi_8_6_ladder_2;
        _373 = frontier_phi_8_6_ladder_1;
        _375 = frontier_phi_8_6_ladder;
    }
    float _379 = (_314 > 0.0) ? (cbMtdParam._m0[16u].w / _314) : 5000.0;
    float _392;
    float _393;
    if (_379 < _371)
    {
        _392 = ((_321 + cbMtdParam._m0[17u].x) + (_379 * _316)) * 0.16666667163372039794921875;
        _393 = (((_379 * _318) + _322) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _392 = _373;
        _393 = _375;
    }
    vec4 _396 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_392, _393));
    float _402 = _396.x * cbMtdParam._m0[13u].x;
    float _403 = _396.y * cbMtdParam._m0[13u].y;
    float _404 = _396.z * cbMtdParam._m0[13u].z;
    float _2791 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _2802 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _2813 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _423 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _427 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _428 = _245 * _427;
    float _429 = _246 * _427;
    float _430 = _247 * _427;
    vec4 _435 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _437 = _435.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _538 = sqrt(((_245 * _245) + (_246 * _246)) + (_247 * _247));
        float _545 = (cbMatDynParam._m0[5u].x * _538) + cbMatDynParam._m0[5u].y;
        float _2824 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
        float _546 = isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0));
        float _550 = (cbMatDynParam._m0[5u].z * _538) + cbMatDynParam._m0[5u].w;
        float _2835 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0))) - _546)) + _546) < ((_437 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _455 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _456 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _469 = uint(roundEven(NORMAL.w)) * 13u;
    uint _470 = _469 + 9u;
    uint _471 = _470 + uint(cbMatDynParam._m0[0u].w);
    float _477 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0)))) * cbInstanceData._m0[_471].x;
    float _478 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0)))) * cbInstanceData._m0[_471].y;
    float _479 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0)))) * cbInstanceData._m0[_471].z;
    float _2846 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _480 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
    float _2857 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _481 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
    float _2868 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _482 = isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0));
    vec4 _491 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _455, cbSceneParam._m0[86u].y * _456));
    float _494 = _491.x * TEXCOORD.z;
    float _495 = (-0.0) - _428;
    float _496 = (-0.0) - _429;
    float _497 = (-0.0) - _430;
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _523 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = (cbModelParam._m0[37u].x * ((((fma(_527, cbModelParam._m0[26u].z, fma(_523, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _519)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _615 = (cbModelParam._m0[37u].y * ((((fma(_527, cbModelParam._m0[27u].z, fma(_523, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _519)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _616 = (((((fma(_527, cbModelParam._m0[28u].z, fma(_523, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _519)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _619 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_613, _615, _616), 0.0);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_613, _615, _616), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_613, _615, _616), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_613, _615, _616), 0.0);
        float _653 = exp2((_619.w + (-0.5)) * 20.0) * 2.0;
        float _655 = _653 * (_619.x + (-0.5));
        float _656 = _653 * (_619.y + (-0.5));
        float _657 = _653 * (_619.z + (-0.5));
        float _664 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _665 = _664 * (_626.x + (-0.5));
        float _666 = _664 * (_626.y + (-0.5));
        float _667 = _664 * (_626.z + (-0.5));
        float _674 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_633.x + (-0.5));
        float _676 = _674 * (_633.y + (-0.5));
        float _677 = _674 * (_633.z + (-0.5));
        float _684 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_640.x + (-0.5));
        float _686 = _684 * (_640.y + (-0.5));
        float _687 = _684 * (_640.z + (-0.5));
        float _688 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _689 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = _655 * 0.5;
        float _692 = _665 * 0.5;
        float _693 = _675 * 0.5;
        float _694 = dot(vec3(_691, _692, _693), vec3(_691, _692, _693));
        float _699 = (_694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_694);
        float _708 = (dot(vec3(0.0), vec3(_699 * _691, _699 * _692, _699 * _693)) + 1.0) * 0.5;
        float _2894 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _718 = sqrt(((_692 * _692) + (_691 * _691)) + (_693 * _693)) / (_688 + 9.9999997473787516355514526367188e-06);
        float _2905 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0));
        float _720 = _719 * 2.0;
        float _724 = (1.0 - _719) / (_719 + 1.0);
        float _2916 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0));
        float _734 = ((((1.0 - _725) * (_720 + 2.0)) * exp2(log2(isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0))) * (_720 + 1.0))) + _725) * _688;
        float _735 = _656 * 0.5;
        float _736 = _666 * 0.5;
        float _737 = _676 * 0.5;
        float _738 = dot(vec3(_735, _736, _737), vec3(_735, _736, _737));
        float _743 = (_738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_738);
        float _751 = (dot(vec3(0.0), vec3(_743 * _735, _743 * _736, _743 * _737)) + 1.0) * 0.5;
        float _2927 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _760 = sqrt(((_736 * _736) + (_735 * _735)) + (_737 * _737)) / (_689 + 9.9999997473787516355514526367188e-06);
        float _2938 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0));
        float _762 = _761 * 2.0;
        float _766 = (1.0 - _761) / (_761 + 1.0);
        float _2949 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0));
        float _776 = ((((1.0 - _767) * (_762 + 2.0)) * exp2(log2(isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * (_762 + 1.0))) + _767) * _689;
        float _777 = _657 * 0.5;
        float _778 = _667 * 0.5;
        float _779 = _677 * 0.5;
        float _780 = dot(vec3(_777, _778, _779), vec3(_777, _778, _779));
        float _785 = (_780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_780);
        float _793 = (dot(vec3(0.0), vec3(_785 * _777, _785 * _778, _785 * _779)) + 1.0) * 0.5;
        float _2960 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _802 = sqrt(((_778 * _778) + (_777 * _777)) + (_779 * _779)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _2971 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
        float _804 = _803 * 2.0;
        float _808 = (1.0 - _803) / (_803 + 1.0);
        float _2982 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0));
        float _818 = ((((1.0 - _809) * (_804 + 2.0)) * exp2(log2(isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) * (_804 + 1.0))) + _809) * _690;
        _826 = _657;
        _827 = _656;
        _828 = _655;
        _829 = _667;
        _830 = _666;
        _831 = _665;
        _832 = _677;
        _833 = _676;
        _834 = _675;
        _835 = _690;
        _836 = _689;
        _837 = _688;
        _838 = cbModelParam._m0[36u].z * (isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0)));
        _839 = cbModelParam._m0[36u].z * (isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0)));
        _840 = cbModelParam._m0[36u].z * (isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0)));
    }
    else
    {
        _826 = _342;
        _827 = _342;
        _828 = _342;
        _829 = _342;
        _830 = _342;
        _831 = _342;
        _832 = _342;
        _833 = _342;
        _834 = _342;
        _835 = _342;
        _836 = _342;
        _837 = _342;
        _838 = 0.0;
        _839 = 0.0;
        _840 = 0.0;
    }
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = (cbModelParam._m0[38u].x * ((((fma(_527, cbModelParam._m0[30u].z, fma(_523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _519)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _898 = (cbModelParam._m0[38u].y * ((((fma(_527, cbModelParam._m0[31u].z, fma(_523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _519)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _899 = (((((fma(_527, cbModelParam._m0[32u].z, fma(_523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _519)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_897, _898, _899), 0.0);
        float _934 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_901.x + (-0.5));
        float _936 = _934 * (_901.y + (-0.5));
        float _937 = _934 * (_901.z + (-0.5));
        float _944 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_908.x + (-0.5));
        float _946 = _944 * (_908.y + (-0.5));
        float _947 = _944 * (_908.z + (-0.5));
        float _954 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_915.x + (-0.5));
        float _956 = _954 * (_915.y + (-0.5));
        float _957 = _954 * (_915.z + (-0.5));
        float _964 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_922.x + (-0.5));
        float _966 = _964 * (_922.y + (-0.5));
        float _967 = _964 * (_922.z + (-0.5));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = _935 * 0.5;
        float _972 = _945 * 0.5;
        float _973 = _955 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(0.0), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3023 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3034 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3034 : (isnan(_3034) ? 1.0 : min(_3034, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3045 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3023 : (isnan(_3023) ? 1.0 : min(_3023, 1.0))) * (_998 + 1.0))) + _1003) * _968;
        float _1013 = _936 * 0.5;
        float _1014 = _946 * 0.5;
        float _1015 = _956 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(0.0), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3056 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3067 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3078 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0))) * (_1040 + 1.0))) + _1045) * _969;
        float _1055 = _937 * 0.5;
        float _1056 = _947 * 0.5;
        float _1057 = _957 * 0.5;
        float _1058 = dot(vec3(_1055, _1056, _1057), vec3(_1055, _1056, _1057));
        float _1063 = (_1058 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1058);
        float _1071 = (dot(vec3(0.0), vec3(_1063 * _1055, _1063 * _1056, _1063 * _1057)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1080 = sqrt(((_1056 * _1056) + (_1055 * _1055)) + (_1057 * _1057)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3111 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_1082 + 1.0))) + _1087) * _970;
        _1104 = _937;
        _1105 = _936;
        _1106 = _935;
        _1107 = _947;
        _1108 = _946;
        _1109 = _945;
        _1110 = _957;
        _1111 = _956;
        _1112 = _955;
        _1113 = _970;
        _1114 = _969;
        _1115 = _968;
        _1116 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1117 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
        _1118 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
    }
    else
    {
        _1104 = _342;
        _1105 = _342;
        _1106 = _342;
        _1107 = _342;
        _1108 = _342;
        _1109 = _342;
        _1110 = _342;
        _1111 = _342;
        _1112 = _342;
        _1113 = _342;
        _1114 = _342;
        _1115 = _342;
        _1116 = 0.0;
        _1117 = 0.0;
        _1118 = 0.0;
    }
    float _1128 = (cbModelParam._m0[1u].x * (_1116 - _838)) + _838;
    float _1129 = (cbModelParam._m0[1u].x * (_1117 - _839)) + _839;
    float _1130 = (cbModelParam._m0[1u].x * (_1118 - _840)) + _840;
    float _1151 = fma(_1130, cbSceneParam._m0[89u].z, fma(_1129, cbSceneParam._m0[89u].y, _1128 * cbSceneParam._m0[89u].x));
    float _1154 = fma(_1130, cbSceneParam._m0[90u].z, fma(_1129, cbSceneParam._m0[90u].y, _1128 * cbSceneParam._m0[90u].x));
    float _1157 = fma(_1130, cbSceneParam._m0[91u].z, fma(_1129, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1128));
    float _1172 = _428 * (-0.5);
    float _1173 = _429 * (-0.5);
    float _1174 = _430 * (-0.5);
    float _1175 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_1106, _1109, _1112, _1115));
    float _1178 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_1105, _1108, _1111, _1114));
    float _1181 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_1104, _1107, _1110, _1113));
    float _1215;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1188 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_826, _829, _832, _835));
        float _1192 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_827, _830, _833, _836));
        float _1196 = dot(vec4(_1172, _1173, _1174, 1.0), vec4(_828, _831, _834, _837));
        float _1203 = dot(vec4(cbModelParam._m0[39u]), vec4(_1172, _1173, _1174, 1.0));
        _1215 = dot(vec3(isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1203) ? 0.0 : (isnan(0.0) ? _1203 : max(0.0, _1203))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1215 = 1.0;
    }
    float _1226;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1217 = dot(vec4(cbModelParam._m0[40u]), vec4(_1172, _1173, _1174, 1.0));
        _1226 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1217) ? 0.0 : (isnan(0.0) ? _1217 : max(0.0, _1217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1226 = 1.0;
    }
    float _1230 = (_1226 * cbModelParam._m0[1u].x) + (_1215 * (1.0 - cbModelParam._m0[1u].x));
    float _1240 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1323;
    float _1325;
    float _1327;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1290 = fma(_527, cbModelParam._m0[13u].z, fma(_523, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _519)) + cbModelParam._m0[13u].w;
        float _1294 = fma(_527, cbModelParam._m0[14u].z, fma(_523, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _519)) + cbModelParam._m0[14u].w;
        float _1298 = fma(_527, cbModelParam._m0[15u].z, fma(_523, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _519)) + cbModelParam._m0[15u].w;
        float _1301 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1304 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1307 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1333;
        if (_1301 > 0.0)
        {
            _1333 = abs((1.0 - _1290) / _1301);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1301 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1290 + 1.0) / _1301);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1333 = frontier_phi_29_27_ladder;
        }
        float _1633;
        if (_1304 > 0.0)
        {
            _1633 = abs((1.0 - _1294) / _1304);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1304 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1294 + 1.0) / _1304);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1633 = frontier_phi_38_34_ladder;
        }
        float _1944;
        if (_1307 > 0.0)
        {
            _1944 = abs((1.0 - _1298) / _1307);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1298 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _1944 = frontier_phi_52_45_ladder;
        }
        float _1946 = isnan(_1633) ? _1333 : (isnan(_1333) ? _1633 : min(_1333, _1633));
        float _1947 = isnan(_1944) ? _1946 : (isnan(_1946) ? _1944 : min(_1946, _1944));
        float _1951 = (_1947 * _1301) + _1290;
        float _1952 = (_1947 * _1304) + _1294;
        float _1953 = (_1947 * _1307) + _1298;
        float _1954 = _1947 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1954;
        float _1957 = _1954 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_1953 > _1957) || ((_1953 < _1955) || ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 < _1955) || (_1951 > _1957))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1953, cbModelParam._m0[9u].z, fma(_1952, cbModelParam._m0[9u].y, _1951 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1953, cbModelParam._m0[10u].z, fma(_1952, cbModelParam._m0[10u].y, _1951 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1953, cbModelParam._m0[11u].z, fma(_1952, cbModelParam._m0[11u].y, _1951 * cbModelParam._m0[11u].x))), _1240);
            frontier_phi_28_52_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1323 = frontier_phi_28_52_ladder_2;
        _1325 = frontier_phi_28_52_ladder_1;
        _1327 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1311 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1240);
        _1323 = _1311.x * cbModelParam._m0[1u].y;
        _1325 = _1311.y * cbModelParam._m0[1u].y;
        _1327 = _1311.z * cbModelParam._m0[1u].y;
    }
    float _1330 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1421;
    float _1423;
    float _1425;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1385 = fma(_527, cbModelParam._m0[21u].z, fma(_523, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _519)) + cbModelParam._m0[21u].w;
        float _1389 = fma(_527, cbModelParam._m0[22u].z, fma(_523, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _519)) + cbModelParam._m0[22u].w;
        float _1393 = fma(_527, cbModelParam._m0[23u].z, fma(_523, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _519)) + cbModelParam._m0[23u].w;
        float _1396 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1399 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1402 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1638;
        if (_1396 > 0.0)
        {
            _1638 = abs((1.0 - _1385) / _1396);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1396 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1385 + 1.0) / _1396);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1638 = frontier_phi_40_36_ladder;
        }
        float _1970;
        if (_1399 > 0.0)
        {
            _1970 = abs((1.0 - _1389) / _1399);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1389 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _1970 = frontier_phi_54_47_ladder;
        }
        float _2157;
        if (_1402 > 0.0)
        {
            _2157 = abs((1.0 - _1393) / _1402);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1393 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2157 = frontier_phi_72_65_ladder;
        }
        float _2159 = isnan(_1970) ? _1638 : (isnan(_1638) ? _1970 : min(_1638, _1970));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1396) + _1385;
        float _2165 = (_2160 * _1399) + _1389;
        float _2166 = (_2160 * _1402) + _1393;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2167;
        float _2170 = _2167 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2166 > _2170) || ((_2166 < _2168) || ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 < _2168) || (_2164 > _2170))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2166, cbModelParam._m0[17u].z, fma(_2165, cbModelParam._m0[17u].y, _2164 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2166, cbModelParam._m0[18u].z, fma(_2165, cbModelParam._m0[18u].y, _2164 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2166, cbModelParam._m0[19u].z, fma(_2165, cbModelParam._m0[19u].y, _2164 * cbModelParam._m0[19u].x))), _1330);
            frontier_phi_37_72_ladder = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1421 = frontier_phi_37_72_ladder_2;
        _1423 = frontier_phi_37_72_ladder_1;
        _1425 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1405 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1330);
        _1421 = _1405.x * cbModelParam._m0[1u].z;
        _1423 = _1405.y * cbModelParam._m0[1u].z;
        _1425 = _1405.z * cbModelParam._m0[1u].z;
    }
    float _1437 = _494 * 0.01200000010430812835693359375;
    float _1439 = _1437 * ((cbModelParam._m0[1u].w * (_1421 - _1323)) + _1323);
    float _1440 = _1437 * ((cbModelParam._m0[1u].w * (_1423 - _1325)) + _1325);
    float _1441 = _1437 * ((cbModelParam._m0[1u].w * (_1425 - _1327)) + _1327);
    float _1444 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, _1439 * cbSceneParam._m0[91u].x));
    uvec4 _1460 = floatBitsToUint(cbInstanceData._m0[_469 + 5u]);
    uint _1462 = _1460.x * 14u;
    uint _1463 = _1462 + 13u;
    float _1468 = _494 + (-1.0);
    float _1472 = (cbLight._m0[_1463].x * _1468) + 1.0;
    float _1473 = (cbLight._m0[_1463].y * _1468) + 1.0;
    uint _1474 = _1462 + 5u;
    float _1480 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
    uint _1484 = _1462 + 4u;
    float _1491 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
    uint _1495 = _1462 | 1u;
    float _1506 = dot(vec3(cbLight._m0[_1462].xyz), vec3(0.0));
    float _1509 = dot(vec3(cbLight._m0[_1495].xyz), vec3(0.0));
    float _3247 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
    float _3258 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1514 = (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) * 0.3183098733425140380859375;
    float _1516 = (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0))) * 0.3183098733425140380859375;
    float _1523 = ((cbLight._m0[_1474].x * _1480) * _1516) + ((cbLight._m0[_1484].x * _1491) * _1514);
    float _1524 = ((_1480 * cbLight._m0[_1474].y) * _1516) + ((_1491 * cbLight._m0[_1484].y) * _1514);
    float _1525 = ((_1480 * cbLight._m0[_1474].z) * _1516) + ((_1491 * cbLight._m0[_1484].z) * _1514);
    uint _1526 = _1462 + 8u;
    float _1532 = cbLight._m0[_1462].x + _428;
    float _1533 = cbLight._m0[_1462].y + _429;
    float _1534 = cbLight._m0[_1462].z + _430;
    float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
    float _1542 = dot(vec3(0.0), vec3(cbLight._m0[_1462].xyz));
    float _3269 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1545 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
    float _1546 = dot(vec3(0.0), vec3(_428, _429, _430));
    float _3280 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1549 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _1550 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1532 * _1538, _1533 * _1538, _1534 * _1538));
    float _3291 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1561 = (exp2(log2(1.0 - (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1567 = (0.5 / ((_1545 + 9.9999999392252902907785028219223e-09) + _1549)) * _1545;
    float _3302 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1569 = (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))) * 0.31831014156341552734375;
    uint _1580 = _1462 + 9u;
    float _1586 = cbLight._m0[_1495].x + _428;
    float _1587 = cbLight._m0[_1495].y + _429;
    float _1588 = cbLight._m0[_1495].z + _430;
    float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
    float _1596 = dot(vec3(0.0), vec3(cbLight._m0[_1495].xyz));
    float _3313 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1599 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_1586 * _1592, _1587 * _1592, _1588 * _1592));
    float _3324 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1609 = (exp2(log2(1.0 - (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1613 = (0.5 / ((_1599 + 9.9999999392252902907785028219223e-09) + _1549)) * _1599;
    float _3335 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1615 = (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.31831014156341552734375;
    float _1625 = (((_1609 * cbLight._m0[_1580].x) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].x) * _1569) * _1491);
    float _1626 = (((_1609 * cbLight._m0[_1580].y) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].y) * _1569) * _1491);
    float _1627 = (((_1609 * cbLight._m0[_1580].z) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].z) * _1569) * _1491);
    float _1743;
    float _1745;
    float _1747;
    float _1749;
    float _1751;
    float _1753;
    if (_1460.y == 0u)
    {
        float _1683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1683;
        float _1685 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1683;
        float _1686 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1683;
        uvec4 _1698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1699 = _1698.x;
        uint _1710 = uint((float(_1698.y) * floor(float(uint(cbSceneParam._m0[85u].y * _456) / _1699))) + floor(float(uint(cbSceneParam._m0[85u].x * _455) / _1699)));
        float _1720 = (log2(_1686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1721 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        uint _1724 = uint(isnan(14.0) ? _1721 : (isnan(_1721) ? 14.0 : min(_1721, 14.0)));
        uvec4 _1729 = texelFetch(g_lightClusterGridBuffer, int(((_1724 << 2u) + (_1710 << 6u)) >> 2u));
        uint _1730 = _1729.x;
        uint _1731 = _1698.z;
        float _1821;
        float _1823;
        float _1825;
        float _1827;
        float _1829;
        float _1831;
        if (((((1u << ((_1731 >> 4u) & 15u)) + 4294967295u) & _1730) == 0u) || ((_1731 & 240u) == 0u))
        {
            _1821 = 0.0;
            _1823 = 0.0;
            _1825 = 0.0;
            _1827 = 0.0;
            _1829 = 0.0;
            _1831 = 0.0;
        }
        else
        {
            float _1822;
            float _1824;
            float _1826;
            float _1828;
            float _1830;
            float _1832;
            float _2004 = 0.0;
            float _2005 = 0.0;
            float _2006 = 0.0;
            float _2007 = 0.0;
            float _2008 = 0.0;
            float _2009 = 0.0;
            uint _2010 = 0u;
            uint _2019;
            bool _2020;
            for (;;)
            {
                _2019 = texelFetch(g_lightClassification, int((((_1724 << 5u) + (_1710 << 9u)) + (_2010 << 2u)) >> 2u)).x;
                _2020 = _2019 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2020)
                {
                    frontier_phi_67_pred = _2007;
                    frontier_phi_67_pred_1 = _2006;
                    frontier_phi_67_pred_2 = _2005;
                    frontier_phi_67_pred_3 = _2004;
                    frontier_phi_67_pred_4 = _2008;
                    frontier_phi_67_pred_5 = _2009;
                }
                else
                {
                    float _2200;
                    float _2201;
                    float _2202;
                    float _2203;
                    float _2204;
                    float _2205;
                    uint _2206;
                    _2200 = _2004;
                    _2201 = _2005;
                    _2202 = _2006;
                    _2203 = _2007;
                    _2204 = _2008;
                    _2205 = _2009;
                    _2206 = _2019;
                    float _2101;
                    float _2102;
                    float _2103;
                    float _2104;
                    float _2105;
                    float _2106;
                    for (;;)
                    {
                        uint _2210 = uint(findLSB(_2206)) + (_2010 << 5u);
                        uint _2207 = (_2206 + 4294967295u) & _2206;
                        uint _2212 = _2210 * 48u;
                        vec4 _2226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2212)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 3u)).x));
                        uint _2232 = (_2210 * 48u) + 4u;
                        vec4 _2245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2232)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 3u)).x));
                        uint _2251 = (_2210 * 48u) + 8u;
                        vec3 _2262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2251)).x, texelFetch(g_PointLightRenderingBuffer, int(_2251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2251 + 2u)).x));
                        float _2266 = _2226.x - _1684;
                        float _2267 = _2226.y - _1685;
                        float _2268 = _2226.z - _1686;
                        float _2269 = dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268));
                        float _2272 = inversesqrt(_2269);
                        float _2281 = 1.0 - (_2269 * _2226.w);
                        float _3356 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
                        float _2282 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
                        float _2283 = sqrt(_2269) * _2245.w;
                        float _2286 = 1.39999997615814208984375 / (_2283 + 1.39999997615814208984375);
                        float _2287 = _2286 * _2286;
                        float _2290 = ((1.0 - _2287) * dot(vec3(0.0), vec3(_2272 * _2266, _2272 * _2267, _2272 * _2268))) + _2287;
                        float _2293 = _2283 * _2283;
                        float _2297 = ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2282) / ((_2293 * 0.699999988079071044921875) + 1.0);
                        float _2301 = (-0.0) - _1684;
                        float _2302 = (-0.0) - _1685;
                        float _2303 = (-0.0) - _1686;
                        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
                        float _2311 = dot(vec3(0.0), vec3(_2307 * _2301, _2307 * _2302, _2307 * _2303));
                        float _3372 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
                        float _3383 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
                        float _2315 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
                        float _2319 = (0.5 / (((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) + 9.9999999392252902907785028219223e-09) + _2315)) * _2315;
                        float _3394 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
                        float _2328 = (((isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * 3.1415927410125732421875) / ((_2293 * 2.1991131305694580078125) + 3.141590118408203125)) * _2282;
                        _2104 = (_2297 * _2245.x) + _2203;
                        _2105 = (_2297 * _2245.y) + _2204;
                        _2106 = (_2297 * _2245.z) + _2205;
                        _2101 = (_2328 * _2262.x) + _2200;
                        _2102 = (_2328 * _2262.y) + _2201;
                        _2103 = (_2328 * _2262.z) + _2202;
                        if (_2207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2200 = _2101;
                            _2201 = _2102;
                            _2202 = _2103;
                            _2203 = _2104;
                            _2204 = _2105;
                            _2205 = _2106;
                            _2206 = _2207;
                        }
                    }
                    frontier_phi_67_pred = _2104;
                    frontier_phi_67_pred_1 = _2103;
                    frontier_phi_67_pred_2 = _2102;
                    frontier_phi_67_pred_3 = _2101;
                    frontier_phi_67_pred_4 = _2105;
                    frontier_phi_67_pred_5 = _2106;
                }
                _1828 = frontier_phi_67_pred;
                _1826 = frontier_phi_67_pred_1;
                _1824 = frontier_phi_67_pred_2;
                _1822 = frontier_phi_67_pred_3;
                _1830 = frontier_phi_67_pred_4;
                _1832 = frontier_phi_67_pred_5;
                uint _2011 = _2010 + 1u;
                if (_2011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2004 = _1822;
                    _2005 = _1824;
                    _2006 = _1826;
                    _2007 = _1828;
                    _2008 = _1830;
                    _2009 = _1832;
                    _2010 = _2011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1821 = _1822;
            _1823 = _1824;
            _1825 = _1826;
            _1827 = _1828;
            _1829 = _1830;
            _1831 = _1832;
        }
        uvec4 _1835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1836 = _1835.z;
        uint _1838 = (_1836 >> 8u) & 15u;
        float _1975;
        float _1977;
        float _1979;
        float _1981;
        float _1983;
        float _1985;
        if (((4294967295u << _1838) & _1730) == 0u)
        {
            _1975 = _1821;
            _1977 = _1823;
            _1979 = _1825;
            _1981 = _1827;
            _1983 = _1829;
            _1985 = _1831;
        }
        else
        {
            float _2000 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1838 < ((_1836 >> 12u) & 15u))
            {
                float _1976;
                float _1978;
                float _1980;
                float _1982;
                float _1984;
                float _1986;
                float _2183 = _1821;
                float _2184 = _1823;
                float _2185 = _1825;
                float _2186 = _1827;
                float _2187 = _1829;
                float _2188 = _1831;
                uint _2189 = _1838;
                uint _2198;
                bool _2199;
                for (;;)
                {
                    _2198 = texelFetch(g_lightClassification, int((((_1724 << 5u) + (_1710 << 9u)) + (_2189 << 2u)) >> 2u)).x;
                    _2199 = _2198 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2199)
                    {
                        frontier_phi_81_pred = _2186;
                        frontier_phi_81_pred_1 = _2185;
                        frontier_phi_81_pred_2 = _2184;
                        frontier_phi_81_pred_3 = _2183;
                        frontier_phi_81_pred_4 = _2188;
                        frontier_phi_81_pred_5 = _2187;
                    }
                    else
                    {
                        float _2363;
                        float _2364;
                        float _2365;
                        float _2366;
                        float _2367;
                        float _2368;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2617;
                        float _2376 = _2183;
                        float _2377 = _2184;
                        float _2378 = _2185;
                        float _2379 = _2186;
                        float _2380 = _2187;
                        float _2381 = _2188;
                        uint _2382 = _2198;
                        uint _2383;
                        vec4 _2408;
                        float _2409;
                        vec4 _2424;
                        vec3 _2436;
                        vec4 _2451;
                        vec4 _2466;
                        float _2512;
                        bool _2513;
                        for (;;)
                        {
                            uint _2393 = ((_2189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2382));
                            _2383 = (_2382 + 4294967295u) & _2382;
                            uint _2395 = _2393 * 40u;
                            _2408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 3u)).x));
                            _2409 = _2408.w;
                            uint _2411 = (_2393 * 40u) + 4u;
                            _2424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 3u)).x));
                            uint _2426 = (_2393 * 40u) + 8u;
                            _2436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x));
                            uint _2438 = (_2393 * 40u) + 16u;
                            _2451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 3u)).x));
                            uint _2453 = (_2393 * 40u) + 20u;
                            _2466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 3u)).x));
                            uint _2468 = (_2393 * 40u) + 24u;
                            vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 3u)).x));
                            uint _2487 = (_2393 * 40u) + 28u;
                            vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 3u)).x));
                            _2512 = fma(_1686, _2500.z, fma(_1685, _2500.y, _2500.x * _1684)) + _2500.w;
                            _2513 = !((fma(_1686, _2481.z, fma(_1685, _2481.y, _2481.x * _1684)) + _2481.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2513)
                            {
                                float _2540 = _2408.x - _1684;
                                float _2541 = _2408.y - _1685;
                                float _2542 = _2408.z - _1686;
                                float _2543 = dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542));
                                float _2546 = inversesqrt(_2543);
                                float _2547 = _2546 * _2540;
                                float _2548 = _2546 * _2541;
                                float _2549 = _2546 * _2542;
                                float _2553 = 1.0 - (_2543 / (_2409 * _2409));
                                float _3405 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                                float _2554 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
                                float _2558 = sqrt(_2543) * _2424.w;
                                float _2560 = 1.39999997615814208984375 / (_2558 + 1.39999997615814208984375);
                                float _2561 = _2560 * _2560;
                                float _2562 = 1.0 - _2561;
                                float _2564 = (_2562 * dot(vec3(_2547, _2548, _2549), vec3(0.0))) + _2561;
                                float _2567 = _2558 * _2558;
                                float _2571 = (fma(_1686, _2451.z, fma(_1685, _2451.y, _2451.x * _1684)) + _2451.w) / _2512;
                                float _2572 = (fma(_1686, _2466.z, fma(_1685, _2466.y, _2466.x * _1684)) + _2466.w) / _2512;
                                float _2576 = 1.0 - dot(vec2(_2571, _2572), vec2(_2571, _2572));
                                float _3421 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                                float _2577 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
                                float _2578 = _2577 * (((isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))) * _2554) / ((_2567 * 0.699999988079071044921875) + 1.0));
                                float _2588 = dot(vec3(0.0), vec3((-0.0) - (_1684 * _2000), (-0.0) - (_1685 * _2000), (-0.0) - (_1686 * _2000)));
                                float _3432 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                                float _2596 = (_2562 * dot(vec3(0.0), vec3(_2547, _2548, _2549))) + _2561;
                                float _3443 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2597 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
                                float _2601 = (0.5 / (((isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) + 9.9999999392252902907785028219223e-09) + _2597)) * _2597;
                                float _3454 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                                float _2608 = (_2577 * _2554) * (((isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0))) * 3.1415927410125732421875) / ((_2567 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2578 * _2424.x;
                                frontier_phi_87_pred_1 = _2608 * _2436.z;
                                frontier_phi_87_pred_2 = _2608 * _2436.y;
                                frontier_phi_87_pred_3 = _2608 * _2436.x;
                                frontier_phi_87_pred_4 = _2578 * _2424.z;
                                frontier_phi_87_pred_5 = _2578 * _2424.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2615 = frontier_phi_87_pred;
                            _2614 = frontier_phi_87_pred_1;
                            _2613 = frontier_phi_87_pred_2;
                            _2612 = frontier_phi_87_pred_3;
                            _2617 = frontier_phi_87_pred_4;
                            _2616 = frontier_phi_87_pred_5;
                            _2366 = _2615 + _2379;
                            _2367 = _2616 + _2380;
                            _2368 = _2617 + _2381;
                            _2363 = _2612 + _2376;
                            _2364 = _2613 + _2377;
                            _2365 = _2614 + _2378;
                            if (_2383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2376 = _2363;
                                _2377 = _2364;
                                _2378 = _2365;
                                _2379 = _2366;
                                _2380 = _2367;
                                _2381 = _2368;
                                _2382 = _2383;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2366;
                        frontier_phi_81_pred_1 = _2365;
                        frontier_phi_81_pred_2 = _2364;
                        frontier_phi_81_pred_3 = _2363;
                        frontier_phi_81_pred_4 = _2368;
                        frontier_phi_81_pred_5 = _2367;
                    }
                    _1982 = frontier_phi_81_pred;
                    _1980 = frontier_phi_81_pred_1;
                    _1978 = frontier_phi_81_pred_2;
                    _1976 = frontier_phi_81_pred_3;
                    _1986 = frontier_phi_81_pred_4;
                    _1984 = frontier_phi_81_pred_5;
                    uint _2190 = _2189 + 1u;
                    if (_2190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2183 = _1976;
                        _2184 = _1978;
                        _2185 = _1980;
                        _2186 = _1982;
                        _2187 = _1984;
                        _2188 = _1986;
                        _2189 = _2190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _1986;
                frontier_phi_56_57_ladder_1 = _1984;
                frontier_phi_56_57_ladder_2 = _1982;
                frontier_phi_56_57_ladder_3 = _1978;
                frontier_phi_56_57_ladder_4 = _1976;
                frontier_phi_56_57_ladder_5 = _1980;
            }
            else
            {
                frontier_phi_56_57_ladder = _1831;
                frontier_phi_56_57_ladder_1 = _1829;
                frontier_phi_56_57_ladder_2 = _1827;
                frontier_phi_56_57_ladder_3 = _1823;
                frontier_phi_56_57_ladder_4 = _1821;
                frontier_phi_56_57_ladder_5 = _1825;
            }
            _1975 = frontier_phi_56_57_ladder_4;
            _1977 = frontier_phi_56_57_ladder_3;
            _1979 = frontier_phi_56_57_ladder_5;
            _1981 = frontier_phi_56_57_ladder_2;
            _1983 = frontier_phi_56_57_ladder_1;
            _1985 = frontier_phi_56_57_ladder;
        }
        float _1990 = isnan(1.0) ? _494 : (isnan(_494) ? 1.0 : min(_494, 1.0));
        _1743 = (_1990 * _1981) + _1523;
        _1745 = (_1990 * _1983) + _1524;
        _1747 = (_1990 * _1985) + _1525;
        _1749 = ((_1975 * 0.039999999105930328369140625) * _1990) + _1625;
        _1751 = ((_1977 * 0.039999999105930328369140625) * _1990) + _1626;
        _1753 = ((_1979 * 0.039999999105930328369140625) * _1990) + _1627;
    }
    else
    {
        _1743 = _1523;
        _1745 = _1524;
        _1747 = _1525;
        _1749 = _1625;
        _1751 = _1626;
        _1753 = _1627;
    }
    float _3470 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _3481 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3492 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _1770 = ((isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_1743 + ((isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0))) * _494))) + ((_1749 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _1230)) * cbPerFrame._m0[3u].x);
    float _1771 = ((isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1745 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _494))) + ((_1751 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1230)) * cbPerFrame._m0[3u].x);
    float _1772 = ((isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1747 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _494))) + ((_1753 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1230)) * cbPerFrame._m0[3u].x);
    float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    uint _1776 = _469 + 6u;
    float _1784 = _455 / cbSceneParam._m0[86u].x;
    float _1785 = _456 / cbSceneParam._m0[86u].y;
    vec4 _1799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1784, _1785, (log2((isnan(cbSceneParam._m0[77u].w) ? _423 : (isnan(_423) ? cbSceneParam._m0[77u].w : min(_423, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1801 = _1799.x;
    float _1802 = _1799.y;
    float _1803 = _1799.z;
    float _1804 = _1799.w;
    float _1884;
    float _1886;
    float _1888;
    float _1890;
    if (_423 > cbSceneParam._m0[78u].w)
    {
        float _1846 = isnan(_423) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _423 : min(cbSceneParam._m0[80u].w, _423));
        float _1847 = _1846 / _423;
        float _1858 = _1847 * _245;
        float _1859 = _246 * _1847;
        float _1860 = (-0.0) - _1859;
        float _1861 = _1847 * _247;
        float _1863 = (cbSceneParam._m0[77u].w * _1860) / _1846;
        float _1864 = _1863 + cbSceneParam._m0[79u].w;
        float _1865 = cbSceneParam._m0[79u].w - _1859;
        float _1871 = sqrt(((_1858 * _1858) + (_1859 * _1859)) + (_1861 * _1861));
        float _1874 = (1.0 - (cbSceneParam._m0[77u].w / _1846)) * _1871;
        float _1880 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1882 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2114;
        if (abs((_1860 - _1863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2114 = ((((_1864 > 0.0) ? exp2(_1880 * _1864) : (2.0 - exp2(_1882 * _1864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1874;
        }
        else
        {
            float _2033 = 1.0 / cbSceneParam._m0[80u].x;
            float _2034 = isnan(_1865) ? _1864 : (isnan(_1864) ? _1865 : max(_1864, _1865));
            float _2035 = isnan(_1865) ? _1864 : (isnan(_1864) ? _1865 : min(_1864, _1865));
            float _2044 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : min(_2034, 0.0));
            float _2045 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : min(_2035, 0.0));
            _2114 = ((abs(_1871 / _1860) * cbSceneParam._m0[80u].y) * ((((_2044 - _2045) * 2.0) - ((exp2(_1880 * (isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)))) - exp2(_1880 * (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))))) * _2033)) - ((exp2(_1882 * _2044) - exp2(_1882 * _2045)) * _2033))) + (_1874 * cbSceneParam._m0[80u].z);
        }
        vec4 _2116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1784, _1785, 1.0), 0.0);
        float _2125 = exp2((_2114 * (-1.44269502162933349609375)) * (1.0 - _2116.w));
        float _2126 = log2(_2125);
        float _2142 = log2(_1804);
        _1884 = (exp2(_2142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].x)) * _2116.x) / cbSceneParam._m0[78u].x)) + _1801;
        _1886 = (exp2(_2142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].y)) * _2116.y) / cbSceneParam._m0[78u].y)) + _1802;
        _1888 = (exp2(_2142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].z)) * _2116.z) / cbSceneParam._m0[78u].z)) + _1803;
        _1890 = _2125 * _1804;
    }
    else
    {
        _1884 = _1801;
        _1886 = _1802;
        _1888 = _1803;
        _1890 = _1804;
    }
    bool _2152;
    vec4 _1900;
    vec4 _1923;
    float _1925;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    bool _1943;
    for (;;)
    {
        _1900 = cbMatDynParam._m0[0u];
        float _1902 = roundEven(_1900.y);
        bool _1903 = _1902 == 3.0;
        float _1905 = log2(_1890);
        float _1912 = exp2(_1905 * cbSceneParam._m0[78u].x) * _1773;
        float _1913 = exp2(_1905 * cbSceneParam._m0[78u].y) * _1774;
        float _1914 = exp2(_1905 * cbSceneParam._m0[78u].z) * _1775;
        float _1921 = _437 + (-0.5);
        _1923 = cbMtdParam._m0[1u];
        _1925 = _1923.y * _1921;
        float _1928 = (_1902 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1929 = _1928 * (_1903 ? _1912 : (_1912 + (cbSceneParam._m0[72u].w * _1884)));
        _1930 = _1928 * (_1903 ? _1913 : (_1913 + (cbSceneParam._m0[72u].w * _1886)));
        _1931 = _1928 * (_1903 ? _1914 : (_1914 + (cbSceneParam._m0[72u].w * _1888)));
        _1932 = _1921 * 0.999000012874603271484375;
        _1943 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1943)
        {
            if ((cbInstanceData._m0[_469 + 7u].x + _1932) < 0.5)
            {
                _2152 = true;
                break;
            }
        }
        uint _2068 = _470 + uint(_1900.w);
        if ((cbInstanceData._m0[_2068].w < 1.0) && ((cbInstanceData._m0[_2068].w + _1932) < 0.5))
        {
            _2152 = true;
            break;
        }
        if ((_1925 + 1.0) < _1923.x)
        {
            _2152 = true;
            break;
        }
        _2152 = false;
        break;
    }
    float _2333;
    if (_2152)
    {
        discard_state = true;
        _2333 = 0.0;
    }
    else
    {
        _2333 = cbInstanceData._m0[_1776].w;
    }
    SV_Target.x = _1929;
    SV_Target.y = _1930;
    SV_Target.z = _1931;
    SV_Target.w = _2333;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1776].w;
    discard_exit();
}


