#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _426;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _341 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _345 = _341.z;
    float _349 = (_341.x * 2.0) + (-1.0);
    float _351 = (_341.y * 2.0) + (-1.0);
    float _357 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _364 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _373 = cbMtdParam._m0[23u].x + _261;
    float _374 = cbMtdParam._m0[23u].y + _262;
    float _375 = cbMtdParam._m0[23u].z + _263;
    float _389 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_357 * _190, _357 * _191, _357 * _192));
    float _390 = (-0.0) - dot(vec3(_373, _374, _375), vec3(_364 * _204, _364 * _205, _364 * _206));
    float _391 = (-0.0) - dot(vec3(_373, _374, _375), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _395 * _391;
    float _401 = ((cbMtdParam._m0[19u].w * _389) * _395) + (_349 * cbMtdParam._m0[20u].y);
    float _402 = ((cbMtdParam._m0[20u].x * _390) * _395) + (_351 * cbMtdParam._m0[20u].z);
    float _405 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _406 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _424;
    float _427;
    float _429;
    if (_401 > 0.0)
    {
        float _410 = (1.0 - _405) / _401;
        _424 = _410;
        _427 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_410 * _396)) * 0.16666667163372039794921875;
        _429 = (fract((_410 * _402) + _406) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_401 < 0.0)
        {
            float _425 = ((-0.0) - _405) / _401;
            frontier_phi_3_2_ladder = (fract((_425 * _402) + _406) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _425;
            frontier_phi_3_2_ladder_2 = (fract(_425 * _396) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _426;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _424 = frontier_phi_3_2_ladder_1;
        _427 = frontier_phi_3_2_ladder_2;
        _429 = frontier_phi_3_2_ladder;
    }
    float _455;
    float _457;
    float _459;
    if (_402 > 0.0)
    {
        float _442 = (1.0 - _406) / _402;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_442 < _424)
        {
            frontier_phi_8_5_ladder = (fract((_442 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _442;
            frontier_phi_8_5_ladder_2 = (fract(_442 * _396) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _427;
            frontier_phi_8_5_ladder_1 = _424;
            frontier_phi_8_5_ladder_2 = _429;
        }
        _455 = frontier_phi_8_5_ladder_1;
        _457 = frontier_phi_8_5_ladder;
        _459 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_402 < 0.0)
        {
            float _456 = ((-0.0) - _406) / _402;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_456 < _424)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_456 * _401) + _405) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_456 * _396) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _427;
                frontier_phi_8_6_ladder_9_ladder_1 = _424;
                frontier_phi_8_6_ladder_9_ladder_2 = _429;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _427;
            frontier_phi_8_6_ladder_1 = _424;
            frontier_phi_8_6_ladder_2 = _429;
        }
        _455 = frontier_phi_8_6_ladder_1;
        _457 = frontier_phi_8_6_ladder;
        _459 = frontier_phi_8_6_ladder_2;
    }
    float _463 = (_396 > 0.0) ? (cbMtdParam._m0[16u].w / _396) : 5000.0;
    float _476;
    float _477;
    if (_463 < _455)
    {
        _476 = ((_405 + cbMtdParam._m0[17u].x) + (_463 * _401)) * 0.16666667163372039794921875;
        _477 = (((_463 * _402) + _406) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _476 = _457;
        _477 = _459;
    }
    vec4 _479 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_476, _477));
    float _484 = _479.x * cbMtdParam._m0[13u].x;
    float _485 = _479.y * cbMtdParam._m0[13u].y;
    float _486 = _479.z * cbMtdParam._m0[13u].z;
    float _491 = 0.5 - (_288 * 0.5);
    float _501 = (((_484 - _301) - (_484 * _288)) * _491) + _301;
    float _502 = (((_485 - _303) - (_485 * _288)) * _491) + _303;
    float _503 = (((_486 - _305) - (_486 * _288)) * _491) + _305;
    vec4 _515 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _517 = _515.x;
    vec4 _529 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _533 = _529.z;
    float _536 = (_529.x * 2.0) + (-1.0);
    float _537 = (_529.y * 2.0) + (-1.0);
    float _538 = dot(vec2(_536, _537), vec2(_536, _537));
    float _3186 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _543 = sqrt(1.0 - (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))));
    float _544 = _533 * _288;
    float _554 = (cbMtdParam._m0[15u].w * ((_345 - _544) + ((_533 - _345) * _288))) + _544;
    float _562 = (cbMtdParam._m0[16u].x * (_349 - (_349 * _288))) + _536;
    float _563 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _288))) + _537;
    float _566 = fma(_543, _197, fma(_563, _204, _562 * _190));
    float _569 = fma(_543, _198, fma(_563, _205, _562 * _191));
    float _572 = fma(_543, _199, fma(_563, _206, _562 * _192));
    float _576 = inversesqrt(dot(vec3(_566, _569, _572), vec3(_566, _569, _572)));
    float _577 = _576 * _566;
    float _578 = _576 * _569;
    float _579 = _576 * _572;
    float _3197 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _580 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _3219 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3230 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3241 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _584 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _600 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _605 = _261 * _604;
    float _606 = _262 * _604;
    float _607 = _263 * _604;
    float _613 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _614 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _634 = fma(_579, cbSceneParam._m0[5u].z, fma(_578, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _577));
    float _637 = fma(_579, cbSceneParam._m0[6u].z, fma(_578, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _577));
    float _640 = fma(_579, cbSceneParam._m0[7u].z, fma(_578, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _577));
    uint _653 = uint(roundEven(NORMAL.w)) * 13u;
    uint _655 = (_653 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _661 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_655].x;
    float _662 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_655].y;
    float _663 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_655].z;
    float _3252 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _665 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _666 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _667 = 1.0 - _584;
    float _668 = _664 * _667;
    float _669 = _665 * _667;
    float _670 = _666 * _667;
    float _675 = (_664 + (-0.039999999105930328369140625)) * _584;
    float _676 = (_665 + (-0.039999999105930328369140625)) * _584;
    float _677 = (_666 + (-0.039999999105930328369140625)) * _584;
    float _678 = _675 + 0.039999999105930328369140625;
    float _680 = _676 + 0.039999999105930328369140625;
    float _681 = _677 + 0.039999999105930328369140625;
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _613, cbSceneParam._m0[86u].y * _614));
    float _693 = _690.x * TEXCOORD.z;
    float _694 = dot(vec3(_577, _578, _579), vec3(_605, _606, _607));
    float _697 = _694 * 2.0;
    float _701 = (_697 * _577) - _605;
    float _702 = (_697 * _578) - _606;
    float _703 = (_697 * _579) - _607;
    float _707 = abs(dot(vec3(_605, _606, _607), vec3(_577, _578, _579)));
    float _3285 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _709 = sqrt(_580);
    float _722 = exp2((_709 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _728 = (1.0 - _722) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _729 = _722 * _709;
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _761 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _798 = fma(_765, cbModelParam._m0[26u].z, fma(_761, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _757));
        float _802 = fma(_765, cbModelParam._m0[27u].z, fma(_761, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _757));
        float _806 = fma(_765, cbModelParam._m0[28u].z, fma(_761, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _757));
        float _830 = _757 + _577;
        float _831 = _761 + _578;
        float _832 = _765 + _579;
        float _842 = fma(_832, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830)) - _798;
        float _843 = fma(_832, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830)) - _802;
        float _844 = fma(_832, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830)) - _806;
        float _848 = inversesqrt(dot(vec3(_842, _843, _844), vec3(_842, _843, _844)));
        float _861 = ((_848 * _842) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_798 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _862 = ((_848 * _843) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_802 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _863 = ((_848 * _844) / cbModelParam._m0[34u].z) + ((((((_806 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _866 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _873 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_861, _862, _863), 0.0);
        float _900 = exp2((_866.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_866.x + (-0.5));
        float _902 = _900 * (_866.y + (-0.5));
        float _903 = _900 * (_866.z + (-0.5));
        float _910 = exp2((_873.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_873.x + (-0.5));
        float _912 = _910 * (_873.y + (-0.5));
        float _913 = _910 * (_873.z + (-0.5));
        float _920 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_880.x + (-0.5));
        float _922 = _920 * (_880.y + (-0.5));
        float _923 = _920 * (_880.z + (-0.5));
        float _930 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _931 = _930 * (_887.x + (-0.5));
        float _932 = _930 * (_887.y + (-0.5));
        float _933 = _930 * (_887.z + (-0.5));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _936 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _937 = _901 * 0.5;
        float _938 = _911 * 0.5;
        float _939 = _921 * 0.5;
        float _940 = dot(vec3(_937, _938, _939), vec3(_937, _938, _939));
        float _945 = (_940 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_940);
        float _954 = (dot(vec3(_577, _578, _579), vec3(_945 * _937, _945 * _938, _945 * _939)) + 1.0) * 0.5;
        float _3311 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _964 = sqrt(((_938 * _938) + (_937 * _937)) + (_939 * _939)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3322 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3333 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) * (_966 + 1.0))) + _971) * _934;
        float _981 = _902 * 0.5;
        float _982 = _912 * 0.5;
        float _983 = _922 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_577, _578, _579), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_935 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3366 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_1008 + 1.0))) + _1013) * _935;
        float _1023 = _903 * 0.5;
        float _1024 = _913 * 0.5;
        float _1025 = _923 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_577, _578, _579), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_936 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3399 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_1050 + 1.0))) + _1055) * _936;
        _1072 = _903;
        _1073 = _902;
        _1074 = _901;
        _1075 = _913;
        _1076 = _912;
        _1077 = _911;
        _1078 = _923;
        _1079 = _922;
        _1080 = _921;
        _1081 = _936;
        _1082 = _935;
        _1083 = _934;
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
        _1086 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
    }
    else
    {
        _1072 = _426;
        _1073 = _426;
        _1074 = _426;
        _1075 = _426;
        _1076 = _426;
        _1077 = _426;
        _1078 = _426;
        _1079 = _426;
        _1080 = _426;
        _1081 = _426;
        _1082 = _426;
        _1083 = _426;
        _1084 = 0.0;
        _1085 = 0.0;
        _1086 = 0.0;
    }
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1112 = fma(_765, cbModelParam._m0[30u].z, fma(_761, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _757));
        float _1116 = fma(_765, cbModelParam._m0[31u].z, fma(_761, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _757));
        float _1120 = fma(_765, cbModelParam._m0[32u].z, fma(_761, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _757));
        float _1143 = _757 + _577;
        float _1144 = _761 + _578;
        float _1145 = _765 + _579;
        float _1155 = fma(_1145, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1143)) - _1112;
        float _1156 = fma(_1145, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1143)) - _1116;
        float _1157 = fma(_1145, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1143)) - _1120;
        float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
        float _1174 = ((_1161 * _1155) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1112 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1175 = ((_1161 * _1156) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1116 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1161 * _1157) / cbModelParam._m0[35u].z) + ((((((_1120 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1174, _1175, _1176), 0.0);
        float _1211 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1178.x + (-0.5));
        float _1213 = _1211 * (_1178.y + (-0.5));
        float _1214 = _1211 * (_1178.z + (-0.5));
        float _1221 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1185.x + (-0.5));
        float _1223 = _1221 * (_1185.y + (-0.5));
        float _1224 = _1221 * (_1185.z + (-0.5));
        float _1231 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1192.x + (-0.5));
        float _1233 = _1231 * (_1192.y + (-0.5));
        float _1234 = _1231 * (_1192.z + (-0.5));
        float _1241 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1199.x + (-0.5));
        float _1243 = _1241 * (_1199.y + (-0.5));
        float _1244 = _1241 * (_1199.z + (-0.5));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = _1212 * 0.5;
        float _1249 = _1222 * 0.5;
        float _1250 = _1232 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_577, _578, _579), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3440 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _3451 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3462 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0))) * (_1275 + 1.0))) + _1280) * _1245;
        float _1290 = _1213 * 0.5;
        float _1291 = _1223 * 0.5;
        float _1292 = _1233 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_577, _578, _579), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1246 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _3495 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1317 + 1.0))) + _1322) * _1246;
        float _1332 = _1214 * 0.5;
        float _1333 = _1224 * 0.5;
        float _1334 = _1234 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_577, _578, _579), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _3528 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1359 + 1.0))) + _1364) * _1247;
        _1381 = _1214;
        _1382 = _1213;
        _1383 = _1212;
        _1384 = _1224;
        _1385 = _1223;
        _1386 = _1222;
        _1387 = _1234;
        _1388 = _1233;
        _1389 = _1232;
        _1390 = _1247;
        _1391 = _1246;
        _1392 = _1245;
        _1393 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1394 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _426;
        _1382 = _426;
        _1383 = _426;
        _1384 = _426;
        _1385 = _426;
        _1386 = _426;
        _1387 = _426;
        _1388 = _426;
        _1389 = _426;
        _1390 = _426;
        _1391 = _426;
        _1392 = _426;
        _1393 = 0.0;
        _1394 = 0.0;
        _1395 = 0.0;
    }
    float _1405 = (cbModelParam._m0[1u].x * (_1393 - _1084)) + _1084;
    float _1406 = (cbModelParam._m0[1u].x * (_1394 - _1085)) + _1085;
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1086)) + _1086;
    float _1428 = fma(_1407, cbSceneParam._m0[89u].z, fma(_1406, cbSceneParam._m0[89u].y, _1405 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1407, cbSceneParam._m0[90u].z, fma(_1406, cbSceneParam._m0[90u].y, _1405 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1407, cbSceneParam._m0[91u].z, fma(_1406, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1405));
    float _1449 = _701 * 0.5;
    float _1450 = _702 * 0.5;
    float _1451 = _703 * 0.5;
    float _1452 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1455 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1382, _1385, _1388, _1391));
    float _1458 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1381, _1384, _1387, _1390));
    float _1492;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1465 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1469 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1473 = dot(vec4(_1449, _1450, _1451, 1.0), vec4(_1074, _1077, _1080, _1083));
        float _1480 = dot(vec4(cbModelParam._m0[39u]), vec4(_1449, _1450, _1451, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)), isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)), isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1480) ? 0.0 : (isnan(0.0) ? _1480 : max(0.0, _1480))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1503;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1494 = dot(vec4(cbModelParam._m0[40u]), vec4(_1449, _1450, _1451, 1.0));
        _1503 = dot(vec3(isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1494) ? 0.0 : (isnan(0.0) ? _1494 : max(0.0, _1494))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1503 = 1.0;
    }
    float _1507 = (_1503 * cbModelParam._m0[1u].x) + (_1492 * (1.0 - cbModelParam._m0[1u].x));
    float _1517 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _580);
    float _1518 = isnan(_1517) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1517 : min(cbModelParam._m0[25u].z, _1517));
    float _1599;
    float _1601;
    float _1603;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1566 = fma(_765, cbModelParam._m0[13u].z, fma(_761, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _757)) + cbModelParam._m0[13u].w;
        float _1570 = fma(_765, cbModelParam._m0[14u].z, fma(_761, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _757)) + cbModelParam._m0[14u].w;
        float _1574 = fma(_765, cbModelParam._m0[15u].z, fma(_761, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _757)) + cbModelParam._m0[15u].w;
        float _1577 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1580 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1583 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1611;
        if (_1577 > 0.0)
        {
            _1611 = abs((1.0 - _1566) / _1577);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1566 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1611 = frontier_phi_26_24_ladder;
        }
        float _1997;
        if (_1580 > 0.0)
        {
            _1997 = abs((1.0 - _1570) / _1580);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1580 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1570 + 1.0) / _1580);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1997 = frontier_phi_35_31_ladder;
        }
        float _2297;
        if (_1583 > 0.0)
        {
            _2297 = abs((1.0 - _1574) / _1583);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1574 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2297 = frontier_phi_49_42_ladder;
        }
        float _2299 = isnan(_1997) ? _1611 : (isnan(_1611) ? _1997 : min(_1611, _1997));
        float _2300 = isnan(_2297) ? _2299 : (isnan(_2299) ? _2297 : min(_2299, _2297));
        float _2304 = (_2300 * _1577) + _1566;
        float _2305 = (_2300 * _1580) + _1570;
        float _2306 = (_2300 * _1583) + _1574;
        float _2307 = _2300 * 9.9999997473787516355514526367188e-05;
        float _2308 = (-1.0) - _2307;
        float _2310 = _2307 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2306 > _2310) || ((_2306 < _2308) || ((_2305 > _2310) || ((_2305 < _2308) || ((_2304 < _2308) || (_2304 > _2310))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2432 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2306, cbModelParam._m0[9u].z, fma(_2305, cbModelParam._m0[9u].y, _2304 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2306, cbModelParam._m0[10u].z, fma(_2305, cbModelParam._m0[10u].y, _2304 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2306, cbModelParam._m0[11u].z, fma(_2305, cbModelParam._m0[11u].y, _2304 * cbModelParam._m0[11u].x))), _1518);
            frontier_phi_25_49_ladder = _2432.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2432.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2432.x * cbModelParam._m0[1u].y;
        }
        _1599 = frontier_phi_25_49_ladder_2;
        _1601 = frontier_phi_25_49_ladder_1;
        _1603 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1518);
        _1599 = _1587.x * cbModelParam._m0[1u].y;
        _1601 = _1587.y * cbModelParam._m0[1u].y;
        _1603 = _1587.z * cbModelParam._m0[1u].y;
    }
    float _1607 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _580);
    float _1608 = isnan(_1607) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1607 : min(cbModelParam._m0[25u].w, _1607));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_765, cbModelParam._m0[21u].z, fma(_761, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _757)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_765, cbModelParam._m0[22u].z, fma(_761, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _757)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_765, cbModelParam._m0[23u].z, fma(_761, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _757)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1677 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1680 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _2002;
        if (_1674 > 0.0)
        {
            _2002 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2002 = frontier_phi_37_33_ladder;
        }
        float _2323;
        if (_1677 > 0.0)
        {
            _2323 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2323 = frontier_phi_51_44_ladder;
        }
        float _2492;
        if (_1680 > 0.0)
        {
            _2492 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2492 = frontier_phi_65_60_ladder;
        }
        float _2494 = isnan(_2323) ? _2002 : (isnan(_2002) ? _2323 : min(_2002, _2323));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1674) + _1663;
        float _2500 = (_2495 * _1677) + _1667;
        float _2501 = (_2495 * _1680) + _1671;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2502;
        float _2505 = _2502 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2501 > _2505) || ((_2501 < _2503) || ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 < _2503) || (_2499 > _2505))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2734 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2501, cbModelParam._m0[17u].z, fma(_2500, cbModelParam._m0[17u].y, _2499 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2501, cbModelParam._m0[18u].z, fma(_2500, cbModelParam._m0[18u].y, _2499 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2501, cbModelParam._m0[19u].z, fma(_2500, cbModelParam._m0[19u].y, _2499 * cbModelParam._m0[19u].x))), _1608);
            frontier_phi_34_65_ladder = _2734.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2734.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2734.z * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_34_65_ladder_1;
        _1701 = frontier_phi_34_65_ladder;
        _1703 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1608);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1716 = (((_728 * _678) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1718 = (((_728 * _680) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1701 - _1601)) + _1601);
    float _1720 = (((_728 * _681) + _729) * _693) * ((cbModelParam._m0[1u].w * (_1703 - _1603)) + _1603);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    vec4 _1737 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_613, _614));
    float _1739 = _1737.w;
    float _1751 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1739);
    float _1752 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1739);
    float _1753 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1739);
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_653 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1765 = _693 + (-1.0);
    float _1768 = (cbLight._m0[_1760].x * _1765) + 1.0;
    float _1769 = (cbLight._m0[_1760].y * _1765) + 1.0;
    uint _1770 = _1759 + 5u;
    float _1776 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1780 = _1759 + 4u;
    float _1790 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1794 = _1759 | 1u;
    float _1805 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_577, _578, _579));
    float _1808 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_577, _578, _579));
    float _3664 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _3675 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1813 = (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.3183098733425140380859375;
    float _1815 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.3183098733425140380859375;
    float _1822 = ((cbLight._m0[_1770].x * _1776) * _1815) + (((cbLight._m0[_1780].x * _1751) * _1790) * _1813);
    float _1823 = ((_1776 * cbLight._m0[_1770].y) * _1815) + (((cbLight._m0[_1780].y * _1752) * _1790) * _1813);
    float _1824 = ((_1776 * cbLight._m0[_1770].z) * _1815) + (((cbLight._m0[_1780].z * _1753) * _1790) * _1813);
    uint _1826 = _1759 + 8u;
    float _1839 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _580) * 0.949999988079071044921875);
    float _1840 = _1839 * _1839;
    float _1841 = cbLight._m0[_1759].x + _605;
    float _1842 = cbLight._m0[_1759].y + _606;
    float _1843 = cbLight._m0[_1759].z + _607;
    float _1847 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
    float _1848 = _1847 * _1841;
    float _1849 = _1847 * _1842;
    float _1850 = _1847 * _1843;
    float _1851 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1759].xyz));
    float _3686 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1854 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _3697 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _1855 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _1856 = dot(vec3(_577, _578, _579), vec3(_1848, _1849, _1850));
    float _3708 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1848, _1849, _1850));
    float _3719 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1840 * _1840;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1876 = exp2(log2(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * 5.0);
    float _1877 = 0.959999978542327880859375 - _675;
    float _1879 = 0.959999978542327880859375 - _676;
    float _1880 = 0.959999978542327880859375 - _677;
    float _1887 = 1.0 - _1840;
    float _1898 = (0.5 / (((_1855 * ((_1854 * _1887) + _1840)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1887) + _1840) * _1854))) * _1854;
    float _3730 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    uint _1914 = _1759 + 9u;
    float _1925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1794].w)) * _580) * 0.949999988079071044921875);
    float _1926 = _1925 * _1925;
    float _1927 = cbLight._m0[_1794].x + _605;
    float _1928 = cbLight._m0[_1794].y + _606;
    float _1929 = cbLight._m0[_1794].z + _607;
    float _1933 = inversesqrt(dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929)));
    float _1934 = _1933 * _1927;
    float _1935 = _1933 * _1928;
    float _1936 = _1933 * _1929;
    float _1937 = dot(vec3(_577, _578, _579), vec3(cbLight._m0[_1794].xyz));
    float _3741 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
    float _1940 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _1941 = dot(vec3(_577, _578, _579), vec3(_1934, _1935, _1936));
    float _3752 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1794].xyz), vec3(_1934, _1935, _1936));
    float _3763 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1926 * _1926;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1960 = exp2(log2(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * 5.0);
    float _1967 = 1.0 - _1926;
    float _1977 = (0.5 / (((_1855 * ((_1940 * _1967) + _1926)) + 9.9999999392252902907785028219223e-09) + (((_1855 * _1967) + _1926) * _1940))) * _1940;
    float _3774 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1979 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    float _1989 = (((((_1960 * _1877) + _678) * cbLight._m0[_1914].x) * _1979) * _1776) + ((((cbLight._m0[_1826].x * _1751) * ((_1876 * _1877) + _678)) * _1900) * _1790);
    float _1990 = (((((_1960 * _1879) + _680) * cbLight._m0[_1914].y) * _1979) * _1776) + ((((cbLight._m0[_1826].y * _1752) * ((_1876 * _1879) + _680)) * _1900) * _1790);
    float _1991 = (((((_1960 * _1880) + _681) * cbLight._m0[_1914].z) * _1979) * _1776) + ((((cbLight._m0[_1826].z * _1753) * ((_1876 * _1880) + _681)) * _1900) * _1790);
    float _2106;
    float _2108;
    float _2110;
    float _2112;
    float _2114;
    float _2116;
    if (_1757.y == 0u)
    {
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2046;
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2046;
        float _2049 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2046;
        uvec4 _2061 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2062 = _2061.x;
        uint _2073 = uint((float(_2061.y) * floor(float(uint(cbSceneParam._m0[85u].y * _614) / _2062))) + floor(float(uint(cbSceneParam._m0[85u].x * _613) / _2062)));
        float _2083 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2084 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        uint _2087 = uint(isnan(14.0) ? _2084 : (isnan(_2084) ? 14.0 : min(_2084, 14.0)));
        uvec4 _2092 = texelFetch(g_lightClusterGridBuffer, int(((_2087 << 2u) + (_2073 << 6u)) >> 2u));
        uint _2093 = _2092.x;
        uint _2094 = _2061.z;
        float _2184;
        float _2186;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        if (((((1u << ((_2094 >> 4u) & 15u)) + 4294967295u) & _2093) == 0u) || ((_2094 & 240u) == 0u))
        {
            _2184 = 0.0;
            _2186 = 0.0;
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
        }
        else
        {
            float _2185;
            float _2187;
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            float _2365 = 0.0;
            uint _2366 = 0u;
            uint _2375;
            bool _2376;
            for (;;)
            {
                _2375 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2366 << 2u)) >> 2u)).x;
                _2376 = _2375 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2376)
                {
                    frontier_phi_62_pred = _2361;
                    frontier_phi_62_pred_1 = _2360;
                    frontier_phi_62_pred_2 = _2362;
                    frontier_phi_62_pred_3 = _2365;
                    frontier_phi_62_pred_4 = _2364;
                    frontier_phi_62_pred_5 = _2363;
                }
                else
                {
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    uint _2541;
                    _2535 = _2360;
                    _2536 = _2361;
                    _2537 = _2362;
                    _2538 = _2363;
                    _2539 = _2364;
                    _2540 = _2365;
                    _2541 = _2375;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    for (;;)
                    {
                        uint _2545 = uint(findLSB(_2541)) + (_2366 << 5u);
                        uint _2542 = (_2541 + 4294967295u) & _2541;
                        uint _2547 = _2545 * 48u;
                        vec4 _2561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2547)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 3u)).x));
                        uint _2567 = (_2545 * 48u) + 4u;
                        vec4 _2580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2586 = (_2545 * 48u) + 8u;
                        vec3 _2597 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x));
                        float _2601 = _2561.x - _2047;
                        float _2602 = _2561.y - _2048;
                        float _2603 = _2561.z - _2049;
                        float _2604 = dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603));
                        float _2607 = inversesqrt(_2604);
                        float _2608 = _2607 * _2601;
                        float _2609 = _2607 * _2602;
                        float _2610 = _2607 * _2603;
                        float _2611 = dot(vec3(_634, _637, _640), vec3(_2608, _2609, _2610));
                        float _2616 = 1.0 - (_2604 * _2561.w);
                        float _3795 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2617 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
                        float _2618 = sqrt(_2604) * _2580.w;
                        float _2621 = 1.39999997615814208984375 / (_2618 + 1.39999997615814208984375);
                        float _2622 = _2621 * _2621;
                        float _2625 = ((1.0 - _2622) * _2611) + _2622;
                        float _2628 = _2618 * _2618;
                        float _2632 = ((isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))) * _2617) / ((_2628 * 0.699999988079071044921875) + 1.0);
                        float _2636 = (-0.0) - _2047;
                        float _2637 = (-0.0) - _2048;
                        float _2638 = (-0.0) - _2049;
                        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2653 = exp2(log2(1.0 / ((_2628 * 3.5) + 5.0)) * 0.25);
                        float _2654 = 1.0 - _709;
                        float _2661 = sqrt(1.0 - ((1.0 - (_2654 * _2654)) * (1.0 - (_2653 * _2653))));
                        float _2662 = _2661 * _2661;
                        float _2663 = _2662 * _2662;
                        float _2664 = _2643 + _2608;
                        float _2665 = _2644 + _2609;
                        float _2666 = _2645 + _2610;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2674 = dot(vec3(_634, _637, _640), vec3(_2643, _2644, _2645));
                        float _3811 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2677 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
                        float _2678 = dot(vec3(_634, _637, _640), vec3(_2670 * _2664, _2670 * _2665, _2670 * _2666));
                        float _3822 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2681 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
                        float _2685 = ((_2681 * _2681) * (_2663 + (-1.0))) + 1.0;
                        float _2686 = _2621 * _2662;
                        float _2687 = _2686 * _2686;
                        float _2690 = ((1.0 - _2687) * _2611) + _2687;
                        float _3833 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2691 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
                        float _2692 = 1.0 - _2662;
                        float _2702 = (0.5 / (((_2691 * ((_2677 * _2692) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2692) + _2662) * _2677))) * _2691;
                        float _3844 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2713 = (((_2663 * 3.1415927410125732421875) * (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) / ((_2685 * _2685) * ((_2628 * 2.1991131305694580078125) + 3.141590118408203125))) * _2617;
                        _2444 = (_2632 * _2580.x) + _2538;
                        _2445 = (_2632 * _2580.y) + _2539;
                        _2446 = (_2632 * _2580.z) + _2540;
                        _2441 = (_2713 * _2597.x) + _2535;
                        _2442 = (_2713 * _2597.y) + _2536;
                        _2443 = (_2713 * _2597.z) + _2537;
                        if (_2542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2535 = _2441;
                            _2536 = _2442;
                            _2537 = _2443;
                            _2538 = _2444;
                            _2539 = _2445;
                            _2540 = _2446;
                            _2541 = _2542;
                        }
                    }
                    frontier_phi_62_pred = _2442;
                    frontier_phi_62_pred_1 = _2441;
                    frontier_phi_62_pred_2 = _2443;
                    frontier_phi_62_pred_3 = _2446;
                    frontier_phi_62_pred_4 = _2445;
                    frontier_phi_62_pred_5 = _2444;
                }
                _2187 = frontier_phi_62_pred;
                _2185 = frontier_phi_62_pred_1;
                _2189 = frontier_phi_62_pred_2;
                _2195 = frontier_phi_62_pred_3;
                _2193 = frontier_phi_62_pred_4;
                _2191 = frontier_phi_62_pred_5;
                uint _2367 = _2366 + 1u;
                if (_2367 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2360 = _2185;
                    _2361 = _2187;
                    _2362 = _2189;
                    _2363 = _2191;
                    _2364 = _2193;
                    _2365 = _2195;
                    _2366 = _2367;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2184 = _2185;
            _2186 = _2187;
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
        }
        uvec4 _2198 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2199 = _2198.z;
        uint _2201 = (_2199 >> 8u) & 15u;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((4294967295u << _2201) & _2093) == 0u)
        {
            _2328 = _2184;
            _2330 = _2186;
            _2332 = _2188;
            _2334 = _2190;
            _2336 = _2192;
            _2338 = _2194;
        }
        else
        {
            float _2353 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _2354 = _2353 * _2047;
            float _2355 = _2353 * _2048;
            float _2356 = _2353 * _2049;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2201 < ((_2199 >> 12u) & 15u))
            {
                float _2329;
                float _2331;
                float _2333;
                float _2335;
                float _2337;
                float _2339;
                float _2518 = _2184;
                float _2519 = _2186;
                float _2520 = _2188;
                float _2521 = _2190;
                float _2522 = _2192;
                float _2523 = _2194;
                uint _2524 = _2201;
                uint _2533;
                bool _2534;
                for (;;)
                {
                    _2533 = texelFetch(g_lightClassification, int((((_2087 << 5u) + (_2073 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                    _2534 = _2533 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2534)
                    {
                        frontier_phi_71_pred = _2519;
                        frontier_phi_71_pred_1 = _2518;
                        frontier_phi_71_pred_2 = _2523;
                        frontier_phi_71_pred_3 = _2522;
                        frontier_phi_71_pred_4 = _2521;
                        frontier_phi_71_pred_5 = _2520;
                    }
                    else
                    {
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _2752 = _2518;
                        float _2753 = _2519;
                        float _2754 = _2520;
                        float _2755 = _2521;
                        float _2756 = _2522;
                        float _2757 = _2523;
                        uint _2758 = _2533;
                        uint _2759;
                        vec4 _2784;
                        float _2785;
                        vec4 _2800;
                        vec3 _2812;
                        vec4 _2827;
                        vec4 _2842;
                        float _2888;
                        bool _2889;
                        for (;;)
                        {
                            uint _2769 = ((_2524 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2758));
                            _2759 = (_2758 + 4294967295u) & _2758;
                            uint _2771 = _2769 * 40u;
                            _2784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2771 + 3u)).x));
                            _2785 = _2784.w;
                            uint _2787 = (_2769 * 40u) + 4u;
                            _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            uint _2802 = (_2769 * 40u) + 8u;
                            _2812 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x));
                            uint _2814 = (_2769 * 40u) + 16u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2829 = (_2769 * 40u) + 20u;
                            _2842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2829 + 3u)).x));
                            uint _2844 = (_2769 * 40u) + 24u;
                            vec4 _2857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2844 + 3u)).x));
                            uint _2863 = (_2769 * 40u) + 28u;
                            vec4 _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            _2888 = fma(_2049, _2876.z, fma(_2048, _2876.y, _2876.x * _2047)) + _2876.w;
                            _2889 = !((fma(_2049, _2857.z, fma(_2048, _2857.y, _2857.x * _2047)) + _2857.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2889)
                            {
                                float _2916 = _2784.x - _2047;
                                float _2917 = _2784.y - _2048;
                                float _2918 = _2784.z - _2049;
                                float _2919 = dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918));
                                float _2922 = inversesqrt(_2919);
                                float _2923 = _2922 * _2916;
                                float _2924 = _2922 * _2917;
                                float _2925 = _2922 * _2918;
                                float _2929 = 1.0 - (_2919 / (_2785 * _2785));
                                float _3855 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                                float _2930 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
                                float _2934 = sqrt(_2919) * _2800.w;
                                float _2936 = 1.39999997615814208984375 / (_2934 + 1.39999997615814208984375);
                                float _2937 = _2936 * _2936;
                                float _2940 = ((1.0 - _2937) * dot(vec3(_2923, _2924, _2925), vec3(_634, _637, _640))) + _2937;
                                float _2943 = _2934 * _2934;
                                float _2947 = (fma(_2049, _2827.z, fma(_2048, _2827.y, _2827.x * _2047)) + _2827.w) / _2888;
                                float _2948 = (fma(_2049, _2842.z, fma(_2048, _2842.y, _2842.x * _2047)) + _2842.w) / _2888;
                                float _2952 = 1.0 - dot(vec2(_2947, _2948), vec2(_2947, _2948));
                                float _3871 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2953 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                                float _2954 = _2953 * (((isnan(0.0) ? _2940 : (isnan(_2940) ? 0.0 : max(_2940, 0.0))) * _2930) / ((_2943 * 0.699999988079071044921875) + 1.0));
                                float _2966 = exp2(log2(1.0 / ((_2943 * 3.5) + 5.0)) * 0.25);
                                float _2967 = 1.0 - _709;
                                float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                                float _2975 = _2974 * _2974;
                                float _2976 = _2975 * _2975;
                                float _2977 = _2923 - _2354;
                                float _2978 = _2924 - _2355;
                                float _2979 = _2925 - _2356;
                                float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                                float _2987 = dot(vec3(_634, _637, _640), vec3((-0.0) - _2354, (-0.0) - _2355, (-0.0) - _2356));
                                float _3882 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2990 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                                float _2991 = dot(vec3(_634, _637, _640), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                                float _3893 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                                float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                                float _2999 = _2936 * _2975;
                                float _3000 = _2999 * _2999;
                                float _3006 = ((1.0 - _3000) * dot(vec3(_634, _637, _640), vec3(_2923, _2924, _2925))) + _3000;
                                float _3904 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _3008 = 1.0 - _2975;
                                float _3018 = (0.5 / (((_3007 * ((_2990 * _3008) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3007 * _3008) + _2975) * _2990))) * _3007;
                                float _3915 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3028 = (_2953 * _2930) * (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) / ((_2998 * _2998) * ((_2943 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3028 * _2812.y;
                                frontier_phi_77_pred_1 = _3028 * _2812.x;
                                frontier_phi_77_pred_2 = _2954 * _2800.z;
                                frontier_phi_77_pred_3 = _2954 * _2800.y;
                                frontier_phi_77_pred_4 = _2954 * _2800.x;
                                frontier_phi_77_pred_5 = _3028 * _2812.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3033 = frontier_phi_77_pred;
                            _3032 = frontier_phi_77_pred_1;
                            _3037 = frontier_phi_77_pred_2;
                            _3036 = frontier_phi_77_pred_3;
                            _3035 = frontier_phi_77_pred_4;
                            _3034 = frontier_phi_77_pred_5;
                            _2742 = _3035 + _2755;
                            _2743 = _3036 + _2756;
                            _2744 = _3037 + _2757;
                            _2739 = _3032 + _2752;
                            _2740 = _3033 + _2753;
                            _2741 = _3034 + _2754;
                            if (_2759 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2759;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2740;
                        frontier_phi_71_pred_1 = _2739;
                        frontier_phi_71_pred_2 = _2744;
                        frontier_phi_71_pred_3 = _2743;
                        frontier_phi_71_pred_4 = _2742;
                        frontier_phi_71_pred_5 = _2741;
                    }
                    _2331 = frontier_phi_71_pred;
                    _2329 = frontier_phi_71_pred_1;
                    _2339 = frontier_phi_71_pred_2;
                    _2337 = frontier_phi_71_pred_3;
                    _2335 = frontier_phi_71_pred_4;
                    _2333 = frontier_phi_71_pred_5;
                    uint _2525 = _2524 + 1u;
                    if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2518 = _2329;
                        _2519 = _2331;
                        _2520 = _2333;
                        _2521 = _2335;
                        _2522 = _2337;
                        _2523 = _2339;
                        _2524 = _2525;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2339;
                frontier_phi_53_54_ladder_1 = _2335;
                frontier_phi_53_54_ladder_2 = _2333;
                frontier_phi_53_54_ladder_3 = _2331;
                frontier_phi_53_54_ladder_4 = _2329;
                frontier_phi_53_54_ladder_5 = _2337;
            }
            else
            {
                frontier_phi_53_54_ladder = _2194;
                frontier_phi_53_54_ladder_1 = _2190;
                frontier_phi_53_54_ladder_2 = _2188;
                frontier_phi_53_54_ladder_3 = _2186;
                frontier_phi_53_54_ladder_4 = _2184;
                frontier_phi_53_54_ladder_5 = _2192;
            }
            _2328 = frontier_phi_53_54_ladder_4;
            _2330 = frontier_phi_53_54_ladder_3;
            _2332 = frontier_phi_53_54_ladder_2;
            _2334 = frontier_phi_53_54_ladder_1;
            _2336 = frontier_phi_53_54_ladder_5;
            _2338 = frontier_phi_53_54_ladder;
        }
        float _2343 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
        _2106 = (_2343 * _2334) + _1822;
        _2108 = (_2343 * _2336) + _1823;
        _2110 = (_2343 * _2338) + _1824;
        _2112 = ((_2328 * _678) * _2343) + _1989;
        _2114 = ((_2330 * _680) * _2343) + _1990;
        _2116 = ((_2332 * _681) * _2343) + _1991;
    }
    else
    {
        _2106 = _1822;
        _2108 = _1823;
        _2110 = _1824;
        _2112 = _1989;
        _2114 = _1990;
        _2116 = _1991;
    }
    float _3931 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _3942 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3953 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _2133 = ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_2106 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _693))) + ((_2112 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1507)) * cbPerFrame._m0[3u].x);
    float _2134 = ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) * (_2108 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _693))) + ((_2114 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1507)) * cbPerFrame._m0[3u].x);
    float _2135 = ((isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_2110 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _693))) + ((_2116 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1507)) * cbPerFrame._m0[3u].x);
    uint _2139 = _653 + 6u;
    float _2147 = _613 / cbSceneParam._m0[86u].x;
    float _2148 = _614 / cbSceneParam._m0[86u].y;
    vec4 _2162 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, (log2((isnan(cbSceneParam._m0[77u].w) ? _600 : (isnan(_600) ? cbSceneParam._m0[77u].w : min(_600, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2164 = _2162.x;
    float _2165 = _2162.y;
    float _2166 = _2162.z;
    float _2167 = _2162.w;
    float _2247;
    float _2249;
    float _2251;
    float _2253;
    if (_600 > cbSceneParam._m0[78u].w)
    {
        float _2209 = isnan(_600) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _600 : min(cbSceneParam._m0[80u].w, _600));
        float _2210 = _2209 / _600;
        float _2221 = _2210 * _261;
        float _2222 = _262 * _2210;
        float _2223 = (-0.0) - _2222;
        float _2224 = _2210 * _263;
        float _2226 = (cbSceneParam._m0[77u].w * _2223) / _2209;
        float _2227 = _2226 + cbSceneParam._m0[79u].w;
        float _2228 = cbSceneParam._m0[79u].w - _2222;
        float _2234 = sqrt(((_2221 * _2221) + (_2222 * _2222)) + (_2224 * _2224));
        float _2237 = (1.0 - (cbSceneParam._m0[77u].w / _2209)) * _2234;
        float _2243 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2245 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2454;
        if (abs((_2223 - _2226) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2454 = ((((_2227 > 0.0) ? exp2(_2243 * _2227) : (2.0 - exp2(_2245 * _2227))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2237;
        }
        else
        {
            float _2389 = 1.0 / cbSceneParam._m0[80u].x;
            float _2390 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : max(_2227, _2228));
            float _2391 = isnan(_2228) ? _2227 : (isnan(_2227) ? _2228 : min(_2227, _2228));
            float _2400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : min(_2390, 0.0));
            float _2401 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : min(_2391, 0.0));
            _2454 = ((abs(_2234 / _2223) * cbSceneParam._m0[80u].y) * ((((_2400 - _2401) * 2.0) - ((exp2(_2243 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0)))) - exp2(_2243 * (isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0))))) * _2389)) - ((exp2(_2245 * _2400) - exp2(_2245 * _2401)) * _2389))) + (_2237 * cbSceneParam._m0[80u].z);
        }
        vec4 _2456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2147, _2148, 1.0), 0.0);
        float _2465 = exp2((_2454 * (-1.44269502162933349609375)) * (1.0 - _2456.w));
        float _2466 = log2(_2465);
        float _2482 = log2(_2167);
        _2247 = (exp2(_2482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].x)) * _2456.x) / cbSceneParam._m0[78u].x)) + _2164;
        _2249 = (exp2(_2482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].y)) * _2456.y) / cbSceneParam._m0[78u].y)) + _2165;
        _2251 = (exp2(_2482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].z)) * _2456.z) / cbSceneParam._m0[78u].z)) + _2166;
        _2253 = _2465 * _2167;
    }
    else
    {
        _2247 = _2164;
        _2249 = _2165;
        _2251 = _2166;
        _2253 = _2167;
    }
    float _2265 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2266 = _2265 == 3.0;
    float _2267 = log2(_2253);
    float _2274 = exp2(_2267 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)));
    float _2275 = exp2(_2267 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0)));
    float _2276 = exp2(_2267 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0)));
    float _2285 = (_2265 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2285 * (_2266 ? _2274 : (_2274 + (cbSceneParam._m0[72u].w * _2247)));
    SV_Target.y = _2285 * (_2266 ? _2275 : (_2275 + (cbSceneParam._m0[72u].w * _2249)));
    SV_Target.z = _2285 * (_2266 ? _2276 : (_2276 + (cbSceneParam._m0[72u].w * _2251)));
    SV_Target.w = cbInstanceData._m0[_2139].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2139].w;
}


