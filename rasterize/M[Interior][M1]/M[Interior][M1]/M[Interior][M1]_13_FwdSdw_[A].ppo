#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1052;
float _3314;
float _3315;
float _3316;
float _3317;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    float _289 = cbMtdParam._m0[22u].y + _261;
    float _290 = cbMtdParam._m0[22u].z + _262;
    float _291 = cbMtdParam._m0[22u].w + _263;
    float _305 = (-0.0) - dot(vec3(_289, _290, _291), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _306 = (-0.0) - dot(vec3(_289, _290, _291), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _307 = (-0.0) - dot(vec3(_289, _290, _291), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _311 = inversesqrt(dot(vec3(_305, _306, _307), vec3(_305, _306, _307)));
    float _312 = _311 * _307;
    float _314 = (cbMtdParam._m0[19u].x * _305) * _311;
    float _316 = (cbMtdParam._m0[18u].w * _306) * _311;
    float _317 = fract(TEXCOORD.x);
    float _318 = fract(TEXCOORD.y);
    float _324;
    if (_314 > 0.0)
    {
        _324 = (1.0 - _317) / _314;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _317) / _314;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _324 = frontier_phi_3_2_ladder;
    }
    float _332;
    if (_316 > 0.0)
    {
        _332 = (1.0 - _318) / _316;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_316 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _318) / _316;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _332 = frontier_phi_7_6_ladder;
    }
    bool _334 = _312 > 0.0;
    float _336 = _334 ? (cbMtdParam._m0[15u].x / _312) : 5000.0;
    float _337 = isnan(_332) ? _324 : (isnan(_324) ? _332 : min(_324, _332));
    float _338 = isnan(_336) ? _337 : (isnan(_337) ? _336 : min(_337, _336));
    float _342 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _343 = _317 + (-0.5);
    float _346 = _318 + (-0.5);
    float _349 = ((_338 * _312) + _342) / _342;
    vec4 _375 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_343 + (_338 * _314)) / _349) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_346 + (_338 * _316)) / _349) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _386 = cbMtdParam._m0[9u].x * _375.x;
    float _387 = cbMtdParam._m0[9u].y * _375.y;
    float _388 = cbMtdParam._m0[9u].z * _375.z;
    float _410 = (cbMtdParam._m0[21u].x * _305) * _311;
    float _412 = (cbMtdParam._m0[20u].w * _306) * _311;
    bool _413 = _410 > 0.0;
    float _418;
    if (_413)
    {
        _418 = (1.0 - _317) / _410;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _317) / _410;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _418 = frontier_phi_11_10_ladder;
    }
    bool _420 = _412 > 0.0;
    float _425;
    if (_420)
    {
        _425 = (1.0 - _318) / _412;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _318) / _412;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _425 = frontier_phi_15_14_ladder;
    }
    float _428 = _334 ? (cbMtdParam._m0[16u].z / _312) : 5000.0;
    float _429 = isnan(_425) ? _418 : (isnan(_418) ? _425 : min(_418, _425));
    float _430 = isnan(_428) ? _429 : (isnan(_429) ? _428 : min(_429, _428));
    float _434 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _438 = ((_430 * _312) + _434) / _434;
    float _443 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _445 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _461 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_343 + (_430 * _410)) / _438) + 0.5) + _443) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_346 + (_430 * _412)) / _438) + 0.5) + _445) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _473;
    if (_413)
    {
        _473 = (1.0 - _317) / _410;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _317) / _410;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _473 = frontier_phi_19_18_ladder;
    }
    float _479;
    if (_420)
    {
        _479 = (1.0 - _318) / _412;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _318) / _412;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _479 = frontier_phi_23_22_ladder;
    }
    float _481 = isnan(_479) ? _473 : (isnan(_473) ? _479 : min(_473, _479));
    float _482 = isnan(_428) ? _481 : (isnan(_481) ? _428 : min(_481, _428));
    float _489 = ((_482 * _312) + _434) / _434;
    vec4 _503 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_343 + (_482 * _410)) / _489) + 0.5) + _443) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_346 + (_482 * _412)) / _489) + 0.5) + _445) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _505 = _503.w;
    float _512 = (_505 * ((_461.x * cbMtdParam._m0[10u].x) - _386)) + _386;
    float _513 = (_505 * ((_461.y * cbMtdParam._m0[10u].y) - _387)) + _387;
    float _514 = (_505 * ((_461.z * cbMtdParam._m0[10u].z) - _388)) + _388;
    float _529 = (cbMtdParam._m0[21u].z * _305) * _311;
    float _531 = (cbMtdParam._m0[21u].y * _306) * _311;
    bool _532 = _529 > 0.0;
    float _537;
    if (_532)
    {
        _537 = (1.0 - _317) / _529;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _317) / _529;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _537 = frontier_phi_27_26_ladder;
    }
    bool _539 = _531 > 0.0;
    float _544;
    if (_539)
    {
        _544 = (1.0 - _318) / _531;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_531 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _318) / _531;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _544 = frontier_phi_31_30_ladder;
    }
    float _547 = _334 ? (cbMtdParam._m0[18u].x / _312) : 5000.0;
    float _548 = isnan(_544) ? _537 : (isnan(_537) ? _544 : min(_537, _544));
    float _549 = isnan(_547) ? _548 : (isnan(_548) ? _547 : min(_548, _547));
    float _553 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _557 = ((_549 * _312) + _553) / _553;
    float _562 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _564 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _581 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_343 + (_549 * _529)) / _557) + 0.5) + _562) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_346 + (_549 * _531)) / _557) + 0.5) + _564) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _593;
    if (_532)
    {
        _593 = (1.0 - _317) / _529;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _317) / _529;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _593 = frontier_phi_35_34_ladder;
    }
    float _599;
    if (_539)
    {
        _599 = (1.0 - _318) / _531;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_531 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _318) / _531;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _599 = frontier_phi_39_38_ladder;
    }
    float _601 = isnan(_599) ? _593 : (isnan(_593) ? _599 : min(_593, _599));
    float _602 = isnan(_547) ? _601 : (isnan(_601) ? _547 : min(_601, _547));
    float _609 = ((_602 * _312) + _553) / _553;
    vec4 _623 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_343 + (_602 * _529)) / _609) + 0.5) + _562) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_346 + (_602 * _531)) / _609) + 0.5) + _564) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _625 = _623.w;
    float _632 = (_625 * ((_581.x * cbMtdParam._m0[14u].x) - _512)) + _512;
    float _633 = (_625 * ((_581.y * cbMtdParam._m0[14u].y) - _513)) + _513;
    float _634 = (_625 * ((_581.z * cbMtdParam._m0[14u].z) - _514)) + _514;
    float _3376 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3387 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3398 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _653 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _657 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _658 = _261 * _657;
    float _659 = _262 * _657;
    float _660 = _263 * _657;
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _764 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _771 = (cbMatDynParam._m0[5u].x * _764) + cbMatDynParam._m0[5u].y;
        float _3409 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _776 = (cbMatDynParam._m0[5u].z * _764) + cbMatDynParam._m0[5u].w;
        float _3420 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) - _772)) + _772) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _680 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _681 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _694 = uint(roundEven(NORMAL.w)) * 13u;
    uint _696 = _694 + 9u;
    uint _697 = _696 + uint(cbMatDynParam._m0[0u].w);
    float _703 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_697].x;
    float _704 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_697].y;
    float _705 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_697].z;
    float _3431 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    float _3453 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    vec4 _717 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _680, cbSceneParam._m0[86u].y * _681));
    float _720 = _717.x * TEXCOORD.z;
    float _721 = (-0.0) - _658;
    float _722 = (-0.0) - _659;
    float _723 = (-0.0) - _660;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1051;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _838 = (cbModelParam._m0[37u].x * ((((fma(_753, cbModelParam._m0[26u].z, fma(_749, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _840 = (cbModelParam._m0[37u].y * ((((fma(_753, cbModelParam._m0[27u].z, fma(_749, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _841 = (((((fma(_753, cbModelParam._m0[28u].z, fma(_749, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_838, _840, _841), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_838, _840, _841), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_838, _840, _841), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_838, _840, _841), 0.0);
        float _878 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _878 * (_844.x + (-0.5));
        float _881 = _878 * (_844.y + (-0.5));
        float _882 = _878 * (_844.z + (-0.5));
        float _889 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_851.x + (-0.5));
        float _891 = _889 * (_851.y + (-0.5));
        float _892 = _889 * (_851.z + (-0.5));
        float _899 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_858.x + (-0.5));
        float _901 = _899 * (_858.y + (-0.5));
        float _902 = _899 * (_858.z + (-0.5));
        float _909 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_865.x + (-0.5));
        float _911 = _909 * (_865.y + (-0.5));
        float _912 = _909 * (_865.z + (-0.5));
        float _913 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _914 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _915 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _916 = _880 * 0.5;
        float _917 = _890 * 0.5;
        float _918 = _900 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _933 = (dot(vec3(0.0), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _943 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_913 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _945 = _944 * 2.0;
        float _949 = (1.0 - _944) / (_944 + 1.0);
        float _3501 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _950 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _959 = ((((1.0 - _950) * (_945 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_945 + 1.0))) + _950) * _913;
        float _960 = _881 * 0.5;
        float _961 = _891 * 0.5;
        float _962 = _901 * 0.5;
        float _963 = dot(vec3(_960, _961, _962), vec3(_960, _961, _962));
        float _968 = (_963 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_963);
        float _976 = (dot(vec3(0.0), vec3(_968 * _960, _968 * _961, _968 * _962)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _985 = sqrt(((_961 * _961) + (_960 * _960)) + (_962 * _962)) / (_914 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3534 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_987 + 1.0))) + _992) * _914;
        float _1002 = _882 * 0.5;
        float _1003 = _892 * 0.5;
        float _1004 = _902 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(0.0), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_915 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3567 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_1029 + 1.0))) + _1034) * _915;
        _1051 = _882;
        _1053 = _881;
        _1054 = _880;
        _1055 = _892;
        _1056 = _891;
        _1057 = _890;
        _1058 = _902;
        _1059 = _901;
        _1060 = _900;
        _1061 = _915;
        _1062 = _914;
        _1063 = _913;
        _1064 = cbModelParam._m0[36u].z * (isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0)));
        _1065 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1066 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
    }
    else
    {
        _1051 = _1052;
        _1053 = _1052;
        _1054 = _1052;
        _1055 = _1052;
        _1056 = _1052;
        _1057 = _1052;
        _1058 = _1052;
        _1059 = _1052;
        _1060 = _1052;
        _1061 = _1052;
        _1062 = _1052;
        _1063 = _1052;
        _1064 = 0.0;
        _1065 = 0.0;
        _1066 = 0.0;
    }
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1123 = (cbModelParam._m0[38u].x * ((((fma(_753, cbModelParam._m0[30u].z, fma(_749, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _745)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1124 = (cbModelParam._m0[38u].y * ((((fma(_753, cbModelParam._m0[31u].z, fma(_749, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _745)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1125 = (((((fma(_753, cbModelParam._m0[32u].z, fma(_749, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _745)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1127 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1123, _1124, _1125), 0.0);
        float _1160 = exp2((_1127.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1127.x + (-0.5));
        float _1162 = _1160 * (_1127.y + (-0.5));
        float _1163 = _1160 * (_1127.z + (-0.5));
        float _1170 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1134.x + (-0.5));
        float _1172 = _1170 * (_1134.y + (-0.5));
        float _1173 = _1170 * (_1134.z + (-0.5));
        float _1180 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1141.x + (-0.5));
        float _1182 = _1180 * (_1141.y + (-0.5));
        float _1183 = _1180 * (_1141.z + (-0.5));
        float _1190 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1148.x + (-0.5));
        float _1192 = _1190 * (_1148.y + (-0.5));
        float _1193 = _1190 * (_1148.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(0.0), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3630 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1224 + 1.0))) + _1229) * _1194;
        float _1239 = _1162 * 0.5;
        float _1240 = _1172 * 0.5;
        float _1241 = _1182 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(0.0), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3663 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1266 + 1.0))) + _1271) * _1195;
        float _1281 = _1163 * 0.5;
        float _1282 = _1173 * 0.5;
        float _1283 = _1183 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(0.0), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3696 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1308 + 1.0))) + _1313) * _1196;
        _1330 = _1163;
        _1331 = _1162;
        _1332 = _1161;
        _1333 = _1173;
        _1334 = _1172;
        _1335 = _1171;
        _1336 = _1183;
        _1337 = _1182;
        _1338 = _1181;
        _1339 = _1196;
        _1340 = _1195;
        _1341 = _1194;
        _1342 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1343 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1052;
        _1331 = _1052;
        _1332 = _1052;
        _1333 = _1052;
        _1334 = _1052;
        _1335 = _1052;
        _1336 = _1052;
        _1337 = _1052;
        _1338 = _1052;
        _1339 = _1052;
        _1340 = _1052;
        _1341 = _1052;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1354 = (cbModelParam._m0[1u].x * (_1342 - _1064)) + _1064;
    float _1355 = (cbModelParam._m0[1u].x * (_1343 - _1065)) + _1065;
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1066)) + _1066;
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1354));
    float _1398 = _658 * (-0.5);
    float _1399 = _659 * (-0.5);
    float _1400 = _660 * (-0.5);
    float _1401 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1404 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1331, _1334, _1337, _1340));
    float _1407 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1330, _1333, _1336, _1339));
    float _1441;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1414 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1051, _1055, _1058, _1061));
        float _1418 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1053, _1056, _1059, _1062));
        float _1422 = dot(vec4(_1398, _1399, _1400, 1.0), vec4(_1054, _1057, _1060, _1063));
        float _1429 = dot(vec4(cbModelParam._m0[39u]), vec4(_1398, _1399, _1400, 1.0));
        _1441 = dot(vec3(isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)), isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1429) ? 0.0 : (isnan(0.0) ? _1429 : max(0.0, _1429))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1441 = 1.0;
    }
    float _1452;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1443 = dot(vec4(cbModelParam._m0[40u]), vec4(_1398, _1399, _1400, 1.0));
        _1452 = dot(vec3(isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)), isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1443) ? 0.0 : (isnan(0.0) ? _1443 : max(0.0, _1443))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1452 = 1.0;
    }
    float _1456 = (_1452 * cbModelParam._m0[1u].x) + (_1441 * (1.0 - cbModelParam._m0[1u].x));
    float _1465 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1545;
    float _1547;
    float _1549;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1512 = fma(_753, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _745)) + cbModelParam._m0[13u].w;
        float _1516 = fma(_753, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _745)) + cbModelParam._m0[14u].w;
        float _1520 = fma(_753, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _745)) + cbModelParam._m0[15u].w;
        float _1523 = fma(_723, cbModelParam._m0[13u].z, fma(_722, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _721));
        float _1526 = fma(_723, cbModelParam._m0[14u].z, fma(_722, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _721));
        float _1529 = fma(_723, cbModelParam._m0[15u].z, fma(_722, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _721));
        float _1555;
        if (_1523 > 0.0)
        {
            _1555 = abs((1.0 - _1512) / _1523);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1512 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1555 = frontier_phi_57_55_ladder;
        }
        float _1725;
        if (_1526 > 0.0)
        {
            _1725 = abs((1.0 - _1516) / _1526);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1526 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1516 + 1.0) / _1526);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1725 = frontier_phi_66_62_ladder;
        }
        float _2120;
        if (_1529 > 0.0)
        {
            _2120 = abs((1.0 - _1520) / _1529);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1520 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2120 = frontier_phi_78_73_ladder;
        }
        float _2122 = isnan(_1725) ? _1555 : (isnan(_1555) ? _1725 : min(_1555, _1725));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1523) + _1512;
        float _2128 = (_2123 * _1526) + _1516;
        float _2129 = (_2123 * _1529) + _1520;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1465);
            frontier_phi_56_78_ladder = _2363.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2363.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2363.x * cbModelParam._m0[1u].y;
        }
        _1545 = frontier_phi_56_78_ladder_2;
        _1547 = frontier_phi_56_78_ladder_1;
        _1549 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_721, _722, _723), _1465);
        _1545 = _1533.x * cbModelParam._m0[1u].y;
        _1547 = _1533.y * cbModelParam._m0[1u].y;
        _1549 = _1533.z * cbModelParam._m0[1u].y;
    }
    float _1552 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1604 = fma(_753, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _745)) + cbModelParam._m0[21u].w;
        float _1608 = fma(_753, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _745)) + cbModelParam._m0[22u].w;
        float _1612 = fma(_753, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _745)) + cbModelParam._m0[23u].w;
        float _1615 = fma(_723, cbModelParam._m0[21u].z, fma(_722, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _721));
        float _1618 = fma(_723, cbModelParam._m0[22u].z, fma(_722, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _721));
        float _1621 = fma(_723, cbModelParam._m0[23u].z, fma(_722, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _721));
        float _1730;
        if (_1615 > 0.0)
        {
            _1730 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1730 = frontier_phi_68_64_ladder;
        }
        float _2147;
        if (_1618 > 0.0)
        {
            _2147 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2147 = frontier_phi_80_75_ladder;
        }
        float _2494;
        if (_1621 > 0.0)
        {
            _2494 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2494 = frontier_phi_92_87_ladder;
        }
        float _2496 = isnan(_2147) ? _1730 : (isnan(_1730) ? _2147 : min(_1730, _2147));
        float _2497 = isnan(_2494) ? _2496 : (isnan(_2496) ? _2494 : min(_2496, _2494));
        float _2501 = (_2497 * _1615) + _1604;
        float _2502 = (_2497 * _1618) + _1608;
        float _2503 = (_2497 * _1621) + _1612;
        float _2504 = _2497 * 9.9999997473787516355514526367188e-05;
        float _2505 = (-1.0) - _2504;
        float _2507 = _2504 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2503 > _2507) || ((_2503 < _2505) || ((_2502 > _2507) || ((_2502 < _2505) || ((_2501 < _2505) || (_2501 > _2507))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2503, cbModelParam._m0[17u].z, fma(_2502, cbModelParam._m0[17u].y, _2501 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2503, cbModelParam._m0[18u].z, fma(_2502, cbModelParam._m0[18u].y, _2501 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2503, cbModelParam._m0[19u].z, fma(_2502, cbModelParam._m0[19u].y, _2501 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_65_92_ladder = _2637.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2637.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2637.x * cbModelParam._m0[1u].z;
        }
        _1640 = frontier_phi_65_92_ladder_2;
        _1642 = frontier_phi_65_92_ladder_1;
        _1644 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_721, _722, _723), _1552);
        _1640 = _1624.x * cbModelParam._m0[1u].z;
        _1642 = _1624.y * cbModelParam._m0[1u].z;
        _1644 = _1624.z * cbModelParam._m0[1u].z;
    }
    float _1656 = _720 * 0.01200000010430812835693359375;
    float _1658 = _1656 * ((cbModelParam._m0[1u].w * (_1640 - _1545)) + _1545);
    float _1659 = _1656 * ((cbModelParam._m0[1u].w * (_1642 - _1547)) + _1547);
    float _1660 = _1656 * ((cbModelParam._m0[1u].w * (_1644 - _1549)) + _1549);
    float _1663 = fma(_1660, cbSceneParam._m0[89u].z, fma(_1659, cbSceneParam._m0[89u].y, _1658 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1660, cbSceneParam._m0[90u].z, fma(_1659, cbSceneParam._m0[90u].y, _1658 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1660, cbSceneParam._m0[91u].z, fma(_1659, cbSceneParam._m0[91u].y, _1658 * cbSceneParam._m0[91u].x));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1716 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1717 = _1704 / _1716;
    float _1718 = _1708 / _1716;
    float _1719 = _1712 / _1716;
    float _1867;
    float _1868;
    float _1869;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1746 = ((uint(_1719 > cbSceneParam._m0[59u].y) + uint(_1719 > cbSceneParam._m0[59u].x)) + uint(_1719 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1747 = _1746 + 43u;
        uint _1755 = _1746 + 44u;
        uint _1763 = _1746 + 45u;
        uint _1771 = _1746 + 46u;
        float _1782 = fma(_1716, cbSceneParam._m0[_1747].w, fma(_1712, cbSceneParam._m0[_1747].z, fma(_1708, cbSceneParam._m0[_1747].y, _1704 * cbSceneParam._m0[_1747].x)));
        float _1786 = fma(_1716, cbSceneParam._m0[_1755].w, fma(_1712, cbSceneParam._m0[_1755].z, fma(_1708, cbSceneParam._m0[_1755].y, _1704 * cbSceneParam._m0[_1755].x)));
        float _1794 = fma(_1716, cbSceneParam._m0[_1771].w, fma(_1712, cbSceneParam._m0[_1771].z, fma(_1708, cbSceneParam._m0[_1771].y, _1704 * cbSceneParam._m0[_1771].x)));
        float _1799 = cbSceneParam._m0[33u].z * _1794;
        float _1801 = cbSceneParam._m0[33u].w * _1794;
        float _1804 = fma(_1716, cbSceneParam._m0[_1763].w, fma(_1712, cbSceneParam._m0[_1763].z, fma(_1708, cbSceneParam._m0[_1763].y, _1704 * cbSceneParam._m0[_1763].x))) / _1794;
        float _1852 = (cbSceneParam._m0[33u].x - sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719))) * cbSceneParam._m0[33u].y;
        float _3822 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1860 = (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1799 + _1782) / _1794, (_1801 + _1786) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 + _1782) / _1794, (_1786 - _1799) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 - _1799) / _1794, (_1786 - _1801) / _1794), _1804), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1782 - _1801) / _1794, (_1799 + _1786) / _1794), _1804), 0.0)).x), vec4(0.25)));
        _1867 = 1.0 - (_1860 * cbSceneParam._m0[34u].x);
        _1868 = 1.0 - (_1860 * cbSceneParam._m0[34u].y);
        _1869 = 1.0 - (_1860 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1867 = 1.0;
        _1868 = 1.0;
        _1869 = 1.0;
    }
    float _1933;
    float _1935;
    float _1937;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1921 = fma(_1716, cbSceneParam._m0[63u].w, fma(_1712, cbSceneParam._m0[63u].z, fma(_1708, cbSceneParam._m0[63u].y, _1704 * cbSceneParam._m0[63u].x)));
        float _1922 = fma(_1716, cbSceneParam._m0[60u].w, fma(_1712, cbSceneParam._m0[60u].z, fma(_1708, cbSceneParam._m0[60u].y, _1704 * cbSceneParam._m0[60u].x))) / _1921;
        float _1923 = fma(_1716, cbSceneParam._m0[61u].w, fma(_1712, cbSceneParam._m0[61u].z, fma(_1708, cbSceneParam._m0[61u].y, _1704 * cbSceneParam._m0[61u].x))) / _1921;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_1922 >= cbSceneParam._m0[64u].x) && (_1923 >= cbSceneParam._m0[64u].y)) && (_1922 <= cbSceneParam._m0[64u].z)) && (_1923 <= cbSceneParam._m0[64u].w))
        {
            float _2160 = fma(_1716, cbSceneParam._m0[62u].w, fma(_1712, cbSceneParam._m0[62u].z, fma(_1708, cbSceneParam._m0[62u].y, _1704 * cbSceneParam._m0[62u].x))) / _1921;
            float _2164 = isnan(cbSceneParam._m0[41u].w) ? _2160 : (isnan(_2160) ? cbSceneParam._m0[41u].w : max(_2160, cbSceneParam._m0[41u].w));
            float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719))) * cbSceneParam._m0[33u].y;
            float _3838 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
            float _2214 = (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1922, cbSceneParam._m0[33u].w + _1923), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1922, _1923 - cbSceneParam._m0[33u].z), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1922 - cbSceneParam._m0[33u].z, _1923 - cbSceneParam._m0[33u].w), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1922 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1923), _2164), 0.0)).x), vec4(0.25)));
            float _2218 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
            float _2219 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
            float _2220 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2220) ? _1869 : (isnan(_1869) ? _2220 : min(_1869, _2220));
            frontier_phi_77_76_ladder_1 = isnan(_2219) ? _1868 : (isnan(_1868) ? _2219 : min(_1868, _2219));
            frontier_phi_77_76_ladder_2 = isnan(_2218) ? _1867 : (isnan(_1867) ? _2218 : min(_1867, _2218));
        }
        else
        {
            frontier_phi_77_76_ladder = _1869;
            frontier_phi_77_76_ladder_1 = _1868;
            frontier_phi_77_76_ladder_2 = _1867;
        }
        _1933 = frontier_phi_77_76_ladder_2;
        _1935 = frontier_phi_77_76_ladder_1;
        _1937 = frontier_phi_77_76_ladder;
    }
    else
    {
        _1933 = _1867;
        _1935 = _1868;
        _1937 = _1869;
    }
    uvec4 _1942 = floatBitsToUint(cbInstanceData._m0[_694 + 5u]);
    uint _1944 = _1942.x * 14u;
    uint _1945 = _1944 + 13u;
    float _1950 = _720 + (-1.0);
    float _1954 = (cbLight._m0[_1945].x * _1950) + 1.0;
    float _1955 = (cbLight._m0[_1945].y * _1950) + 1.0;
    uint _1956 = _1944 + 5u;
    float _1962 = isnan(1.0) ? _1955 : (isnan(_1955) ? 1.0 : min(_1955, 1.0));
    uint _1966 = _1944 + 4u;
    float _1975 = isnan(1.0) ? _1954 : (isnan(_1954) ? 1.0 : min(_1954, 1.0));
    uint _1979 = _1944 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1944].xyz), vec3(0.0));
    float _1993 = dot(vec3(cbLight._m0[_1979].xyz), vec3(0.0));
    float _3874 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _3885 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1998 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _2000 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 0.3183098733425140380859375;
    float _2007 = ((cbLight._m0[_1956].x * _1962) * _2000) + (((cbLight._m0[_1966].x * _1933) * _1975) * _1998);
    float _2008 = ((_1962 * cbLight._m0[_1956].y) * _2000) + (((cbLight._m0[_1966].y * _1935) * _1975) * _1998);
    float _2009 = ((_1962 * cbLight._m0[_1956].z) * _2000) + (((cbLight._m0[_1966].z * _1937) * _1975) * _1998);
    uint _2010 = _1944 + 8u;
    float _2016 = cbLight._m0[_1944].x + _658;
    float _2017 = cbLight._m0[_1944].y + _659;
    float _2018 = cbLight._m0[_1944].z + _660;
    float _2022 = inversesqrt(dot(vec3(_2016, _2017, _2018), vec3(_2016, _2017, _2018)));
    float _2026 = dot(vec3(0.0), vec3(cbLight._m0[_1944].xyz));
    float _3896 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _2030 = dot(vec3(0.0), vec3(_658, _659, _660));
    float _3907 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1944].xyz), vec3(_2016 * _2022, _2017 * _2022, _2018 * _2022));
    float _3918 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2045 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = (0.5 / ((_2029 + 9.9999999392252902907785028219223e-09) + _2033)) * _2029;
    float _3929 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.31831014156341552734375;
    uint _2067 = _1944 + 9u;
    float _2073 = cbLight._m0[_1979].x + _658;
    float _2074 = cbLight._m0[_1979].y + _659;
    float _2075 = cbLight._m0[_1979].z + _660;
    float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
    float _2083 = dot(vec3(0.0), vec3(cbLight._m0[_1979].xyz));
    float _3940 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1979].xyz), vec3(_2073 * _2079, _2074 * _2079, _2075 * _2079));
    float _3951 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2100 = (0.5 / ((_2086 + 9.9999999392252902907785028219223e-09) + _2033)) * _2086;
    float _3962 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2102 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.31831014156341552734375;
    float _2112 = (((_2096 * cbLight._m0[_2067].x) * _2102) * _1962) + ((((cbLight._m0[_2010].x * _1933) * _2045) * _2053) * _1975);
    float _2113 = (((_2096 * cbLight._m0[_2067].y) * _2102) * _1962) + ((((cbLight._m0[_2010].y * _1935) * _2045) * _2053) * _1975);
    float _2114 = (((_2096 * cbLight._m0[_2067].z) * _2102) * _1962) + ((((cbLight._m0[_2010].z * _1937) * _2045) * _2053) * _1975);
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1942.y == 0u)
    {
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _681) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _680) / _2233)));
        float _2254 = (log2(_1719 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2549 = 0.0;
            float _2550 = 0.0;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            uint _2555 = 0u;
            uint _2564;
            bool _2565;
            for (;;)
            {
                _2564 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2555 << 2u)) >> 2u)).x;
                _2565 = _2564 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2565)
                {
                    frontier_phi_103_pred = _2550;
                    frontier_phi_103_pred_1 = _2554;
                    frontier_phi_103_pred_2 = _2553;
                    frontier_phi_103_pred_3 = _2552;
                    frontier_phi_103_pred_4 = _2551;
                    frontier_phi_103_pred_5 = _2549;
                }
                else
                {
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    float _2719;
                    float _2720;
                    uint _2721;
                    _2715 = _2549;
                    _2716 = _2550;
                    _2717 = _2551;
                    _2718 = _2552;
                    _2719 = _2553;
                    _2720 = _2554;
                    _2721 = _2564;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    for (;;)
                    {
                        uint _2725 = uint(findLSB(_2721)) + (_2555 << 5u);
                        uint _2722 = (_2721 + 4294967295u) & _2721;
                        uint _2727 = _2725 * 48u;
                        vec4 _2741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2727)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2727 + 3u)).x));
                        uint _2747 = (_2725 * 48u) + 4u;
                        vec4 _2760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2747)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2747 + 3u)).x));
                        uint _2766 = (_2725 * 48u) + 8u;
                        vec3 _2777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2766)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2766 + 2u)).x));
                        float _2781 = _2741.x - _1717;
                        float _2782 = _2741.y - _1718;
                        float _2783 = _2741.z - _1719;
                        float _2784 = dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783));
                        float _2787 = inversesqrt(_2784);
                        float _2796 = 1.0 - (_2784 * _2741.w);
                        float _3983 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2797 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2798 = sqrt(_2784) * _2760.w;
                        float _2801 = 1.39999997615814208984375 / (_2798 + 1.39999997615814208984375);
                        float _2802 = _2801 * _2801;
                        float _2805 = ((1.0 - _2802) * dot(vec3(0.0), vec3(_2787 * _2781, _2787 * _2782, _2787 * _2783))) + _2802;
                        float _2808 = _2798 * _2798;
                        float _2812 = ((isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0))) * _2797) / ((_2808 * 0.699999988079071044921875) + 1.0);
                        float _2816 = (-0.0) - _1717;
                        float _2817 = (-0.0) - _1718;
                        float _2818 = (-0.0) - _1719;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(0.0), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _3999 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _4010 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2830 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2834 = (0.5 / (((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) + 9.9999999392252902907785028219223e-09) + _2830)) * _2830;
                        float _4021 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                        float _2843 = (((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 3.1415927410125732421875) / ((_2808 * 2.1991131305694580078125) + 3.141590118408203125)) * _2797;
                        _2645 = (_2812 * _2760.x) + _2718;
                        _2646 = (_2812 * _2760.y) + _2719;
                        _2647 = (_2812 * _2760.z) + _2720;
                        _2642 = (_2843 * _2777.x) + _2715;
                        _2643 = (_2843 * _2777.y) + _2716;
                        _2644 = (_2843 * _2777.z) + _2717;
                        if (_2722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2715 = _2642;
                            _2716 = _2643;
                            _2717 = _2644;
                            _2718 = _2645;
                            _2719 = _2646;
                            _2720 = _2647;
                            _2721 = _2722;
                        }
                    }
                    frontier_phi_103_pred = _2643;
                    frontier_phi_103_pred_1 = _2647;
                    frontier_phi_103_pred_2 = _2646;
                    frontier_phi_103_pred_3 = _2645;
                    frontier_phi_103_pred_4 = _2644;
                    frontier_phi_103_pred_5 = _2642;
                }
                _2375 = frontier_phi_103_pred;
                _2383 = frontier_phi_103_pred_1;
                _2381 = frontier_phi_103_pred_2;
                _2379 = frontier_phi_103_pred_3;
                _2377 = frontier_phi_103_pred_4;
                _2373 = frontier_phi_103_pred_5;
                uint _2556 = _2555 + 1u;
                if (_2556 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2549 = _2373;
                    _2550 = _2375;
                    _2551 = _2377;
                    _2552 = _2379;
                    _2553 = _2381;
                    _2554 = _2383;
                    _2555 = _2556;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((4294967295u << _2389) & _2264) == 0u)
        {
            _2520 = _2372;
            _2522 = _2374;
            _2524 = _2376;
            _2526 = _2378;
            _2528 = _2380;
            _2530 = _2382;
        }
        else
        {
            float _2545 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2521;
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2698 = _2372;
                float _2699 = _2374;
                float _2700 = _2376;
                float _2701 = _2378;
                float _2702 = _2380;
                float _2703 = _2382;
                uint _2704 = _2389;
                uint _2713;
                bool _2714;
                for (;;)
                {
                    _2713 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                    _2714 = _2713 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_2714)
                    {
                        frontier_phi_114_pred = _2703;
                        frontier_phi_114_pred_1 = _2702;
                        frontier_phi_114_pred_2 = _2701;
                        frontier_phi_114_pred_3 = _2700;
                        frontier_phi_114_pred_4 = _2699;
                        frontier_phi_114_pred_5 = _2698;
                    }
                    else
                    {
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _3106;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _2870 = _2698;
                        float _2871 = _2699;
                        float _2872 = _2700;
                        float _2873 = _2701;
                        float _2874 = _2702;
                        float _2875 = _2703;
                        uint _2876 = _2713;
                        uint _2877;
                        vec4 _2902;
                        float _2903;
                        vec4 _2918;
                        vec3 _2930;
                        vec4 _2945;
                        vec4 _2960;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2887 = ((_2704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2876));
                            _2877 = (_2876 + 4294967295u) & _2876;
                            uint _2889 = _2887 * 40u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2903 = _2902.w;
                            uint _2905 = (_2887 * 40u) + 4u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2920 = (_2887 * 40u) + 8u;
                            _2930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x));
                            uint _2932 = (_2887 * 40u) + 16u;
                            _2945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2932 + 3u)).x));
                            uint _2947 = (_2887 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2887 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2887 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_1719, _2994.z, fma(_1718, _2994.y, _2994.x * _1717)) + _2994.w;
                            _3007 = !((fma(_1719, _2975.z, fma(_1718, _2975.y, _2975.x * _1717)) + _2975.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2902.x - _1717;
                                float _3035 = _2902.y - _1718;
                                float _3036 = _2902.z - _1719;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2903 * _2903));
                                float _4032 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3052 = sqrt(_3037) * _2918.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3056 = 1.0 - _3055;
                                float _3058 = (_3056 * dot(vec3(_3041, _3042, _3043), vec3(0.0))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_1719, _2945.z, fma(_1718, _2945.y, _2945.x * _1717)) + _2945.w) / _3006;
                                float _3066 = (fma(_1719, _2960.z, fma(_1718, _2960.y, _2960.x * _1717)) + _2960.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4048 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3082 = dot(vec3(0.0), vec3((-0.0) - (_1717 * _2545), (-0.0) - (_1718 * _2545), (-0.0) - (_1719 * _2545)));
                                float _4059 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3090 = (_3056 * dot(vec3(0.0), vec3(_3041, _3042, _3043))) + _3055;
                                float _4070 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3095 = (0.5 / (((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) + 9.9999999392252902907785028219223e-09) + _3091)) * _3091;
                                float _4081 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3102 = (_3071 * _3048) * (((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * 3.1415927410125732421875) / ((_3061 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_120_pred = _3072 * _2918.z;
                                frontier_phi_120_pred_1 = _3072 * _2918.y;
                                frontier_phi_120_pred_2 = _3072 * _2918.x;
                                frontier_phi_120_pred_3 = _3102 * _2930.z;
                                frontier_phi_120_pred_4 = _3102 * _2930.y;
                                frontier_phi_120_pred_5 = _3102 * _2930.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3111 = frontier_phi_120_pred;
                            _3110 = frontier_phi_120_pred_1;
                            _3109 = frontier_phi_120_pred_2;
                            _3108 = frontier_phi_120_pred_3;
                            _3107 = frontier_phi_120_pred_4;
                            _3106 = frontier_phi_120_pred_5;
                            _2860 = _3109 + _2873;
                            _2861 = _3110 + _2874;
                            _2862 = _3111 + _2875;
                            _2857 = _3106 + _2870;
                            _2858 = _3107 + _2871;
                            _2859 = _3108 + _2872;
                            if (_2877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2877;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _2862;
                        frontier_phi_114_pred_1 = _2861;
                        frontier_phi_114_pred_2 = _2860;
                        frontier_phi_114_pred_3 = _2859;
                        frontier_phi_114_pred_4 = _2858;
                        frontier_phi_114_pred_5 = _2857;
                    }
                    _2531 = frontier_phi_114_pred;
                    _2529 = frontier_phi_114_pred_1;
                    _2527 = frontier_phi_114_pred_2;
                    _2525 = frontier_phi_114_pred_3;
                    _2523 = frontier_phi_114_pred_4;
                    _2521 = frontier_phi_114_pred_5;
                    uint _2705 = _2704 + 1u;
                    if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2698 = _2521;
                        _2699 = _2523;
                        _2700 = _2525;
                        _2701 = _2527;
                        _2702 = _2529;
                        _2703 = _2531;
                        _2704 = _2705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2527;
                frontier_phi_94_95_ladder_1 = _2531;
                frontier_phi_94_95_ladder_2 = _2529;
                frontier_phi_94_95_ladder_3 = _2525;
                frontier_phi_94_95_ladder_4 = _2523;
                frontier_phi_94_95_ladder_5 = _2521;
            }
            else
            {
                frontier_phi_94_95_ladder = _2378;
                frontier_phi_94_95_ladder_1 = _2382;
                frontier_phi_94_95_ladder_2 = _2380;
                frontier_phi_94_95_ladder_3 = _2376;
                frontier_phi_94_95_ladder_4 = _2374;
                frontier_phi_94_95_ladder_5 = _2372;
            }
            _2520 = frontier_phi_94_95_ladder_5;
            _2522 = frontier_phi_94_95_ladder_4;
            _2524 = frontier_phi_94_95_ladder_3;
            _2526 = frontier_phi_94_95_ladder;
            _2528 = frontier_phi_94_95_ladder_2;
            _2530 = frontier_phi_94_95_ladder_1;
        }
        float _2535 = isnan(1.0) ? _720 : (isnan(_720) ? 1.0 : min(_720, 1.0));
        _2277 = (_2535 * _2526) + _2007;
        _2279 = (_2535 * _2528) + _2008;
        _2281 = (_2535 * _2530) + _2009;
        _2283 = ((_2520 * 0.039999999105930328369140625) * _2535) + _2112;
        _2285 = ((_2522 * 0.039999999105930328369140625) * _2535) + _2113;
        _2287 = ((_2524 * 0.039999999105930328369140625) * _2535) + _2114;
    }
    else
    {
        _2277 = _2007;
        _2279 = _2008;
        _2281 = _2009;
        _2283 = _2112;
        _2285 = _2113;
        _2287 = _2114;
    }
    float _4097 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _4108 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4119 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _2304 = ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2277 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _720))) + ((_2283 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2305 = ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2279 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _720))) + ((_2285 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2281 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _720))) + ((_2287 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _1456)) * cbPerFrame._m0[3u].x);
    float _2307 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2308 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    uint _2310 = _694 + 6u;
    float _2318 = _680 / cbSceneParam._m0[86u].x;
    float _2319 = _681 / cbSceneParam._m0[86u].y;
    vec4 _2333 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, (log2((isnan(cbSceneParam._m0[77u].w) ? _653 : (isnan(_653) ? cbSceneParam._m0[77u].w : min(_653, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2335 = _2333.x;
    float _2336 = _2333.y;
    float _2337 = _2333.z;
    float _2338 = _2333.w;
    float _2434;
    float _2436;
    float _2438;
    float _2440;
    if (_653 > cbSceneParam._m0[78u].w)
    {
        float _2397 = isnan(_653) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _653 : min(cbSceneParam._m0[80u].w, _653));
        float _2398 = _2397 / _653;
        float _2409 = _2398 * _261;
        float _2410 = _262 * _2398;
        float _2411 = (-0.0) - _2410;
        float _2412 = _2398 * _263;
        float _2414 = (cbSceneParam._m0[77u].w * _2411) / _2397;
        float _2415 = _2414 + cbSceneParam._m0[79u].w;
        float _2416 = cbSceneParam._m0[79u].w - _2410;
        float _2422 = sqrt(((_2409 * _2409) + (_2410 * _2410)) + (_2412 * _2412));
        float _2425 = (1.0 - (cbSceneParam._m0[77u].w / _2397)) * _2422;
        float _2430 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2432 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2655;
        if (abs((_2411 - _2414) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2655 = ((((_2415 > 0.0) ? exp2(_2430 * _2415) : (2.0 - exp2(_2432 * _2415))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2425;
        }
        else
        {
            float _2578 = 1.0 / cbSceneParam._m0[80u].x;
            float _2579 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : max(_2415, _2416));
            float _2580 = isnan(_2416) ? _2415 : (isnan(_2415) ? _2416 : min(_2415, _2416));
            float _2589 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : min(_2579, 0.0));
            float _2590 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : min(_2580, 0.0));
            _2655 = ((abs(_2422 / _2411) * cbSceneParam._m0[80u].y) * ((((_2589 - _2590) * 2.0) - ((exp2(_2430 * (isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0)))) - exp2(_2430 * (isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0))))) * _2578)) - ((exp2(_2432 * _2589) - exp2(_2432 * _2590)) * _2578))) + (_2425 * cbSceneParam._m0[80u].z);
        }
        vec4 _2657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2318, _2319, 1.0), 0.0);
        float _2666 = exp2((_2655 * (-1.44269502162933349609375)) * (1.0 - _2657.w));
        float _2667 = log2(_2666);
        float _2683 = log2(_2338);
        _2434 = (exp2(_2683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].x)) * _2657.x) / cbSceneParam._m0[78u].x)) + _2335;
        _2436 = (exp2(_2683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].y)) * _2657.y) / cbSceneParam._m0[78u].y)) + _2336;
        _2438 = (exp2(_2683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2667 * cbSceneParam._m0[78u].z)) * _2657.z) / cbSceneParam._m0[78u].z)) + _2337;
        _2440 = _2666 * _2338;
    }
    else
    {
        _2434 = _2335;
        _2436 = _2336;
        _2438 = _2337;
        _2440 = _2338;
    }
    bool _2693;
    vec4 _2450;
    vec4 _2473;
    float _2475;
    float _2479;
    float _2480;
    float _2481;
    float _2482;
    bool _2493;
    for (;;)
    {
        _2450 = cbMatDynParam._m0[0u];
        float _2452 = roundEven(_2450.y);
        bool _2453 = _2452 == 3.0;
        float _2455 = log2(_2440);
        float _2462 = exp2(_2455 * cbSceneParam._m0[78u].x) * _2307;
        float _2463 = exp2(_2455 * cbSceneParam._m0[78u].y) * _2308;
        float _2464 = exp2(_2455 * cbSceneParam._m0[78u].z) * _2309;
        float _2471 = _667 + (-0.5);
        _2473 = cbMtdParam._m0[1u];
        _2475 = _2473.y * _2471;
        float _2478 = (_2452 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2479 = _2478 * (_2453 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2434)));
        _2480 = _2478 * (_2453 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2436)));
        _2481 = _2478 * (_2453 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2438)));
        _2482 = _2471 * 0.999000012874603271484375;
        _2493 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2493)
        {
            if ((cbInstanceData._m0[_694 + 7u].x + _2482) < 0.5)
            {
                _2693 = true;
                break;
            }
        }
        uint _2613 = _696 + uint(_2450.w);
        if ((cbInstanceData._m0[_2613].w < 1.0) && ((cbInstanceData._m0[_2613].w + _2482) < 0.5))
        {
            _2693 = true;
            break;
        }
        if ((_2475 + 1.0) < _2473.x)
        {
            _2693 = true;
            break;
        }
        _2693 = false;
        break;
    }
    float _2848;
    if (_2693)
    {
        discard_state = true;
        _2848 = 0.0;
    }
    else
    {
        _2848 = cbInstanceData._m0[_2310].w;
    }
    SV_Target.x = _2479;
    SV_Target.y = _2480;
    SV_Target.z = _2481;
    SV_Target.w = _2848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2310].w;
    discard_exit();
}


