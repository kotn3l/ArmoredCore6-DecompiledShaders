#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _393;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _186 = _185 * _178;
    float _187 = _185 * _179;
    float _188 = _185 * _180;
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _200 = _199 * TANGENT.x;
    float _201 = _199 * TANGENT.y;
    float _202 = _199 * TANGENT.z;
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    vec4 _278 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _284 = _278.w;
    float _297 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _284) + cbMtdParam._m0[11u].x) * _278.x;
    float _299 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _284) + cbMtdParam._m0[11u].y) * _278.y;
    float _301 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _284) + cbMtdParam._m0[11u].z) * _278.z;
    float _326 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _333 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _342 = cbMtdParam._m0[23u].x + _257;
    float _343 = cbMtdParam._m0[23u].y + _258;
    float _344 = cbMtdParam._m0[23u].z + _259;
    float _358 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_326 * _186, _326 * _187, _326 * _188));
    float _359 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_333 * _200, _333 * _201, _333 * _202));
    float _360 = (-0.0) - dot(vec3(_342, _343, _344), vec3((-0.0) - _193, (-0.0) - _194, (-0.0) - _195));
    float _364 = inversesqrt(dot(vec3(_358, _359, _360), vec3(_358, _359, _360)));
    float _365 = _364 * _360;
    float _367 = (cbMtdParam._m0[19u].w * _358) * _364;
    float _369 = (cbMtdParam._m0[20u].x * _359) * _364;
    float _372 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _373 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _391;
    float _394;
    float _396;
    if (_367 > 0.0)
    {
        float _377 = (1.0 - _372) / _367;
        _391 = _377;
        _394 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_377 * _365)) * 0.16666667163372039794921875;
        _396 = (fract((_377 * _369) + _373) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _392 = ((-0.0) - _372) / _367;
            frontier_phi_3_2_ladder = (fract((_392 * _369) + _373) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = (fract(_392 * _365) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _391 = frontier_phi_3_2_ladder_1;
        _394 = frontier_phi_3_2_ladder_2;
        _396 = frontier_phi_3_2_ladder;
    }
    float _422;
    float _424;
    float _426;
    if (_369 > 0.0)
    {
        float _409 = (1.0 - _373) / _369;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_409 < _391)
        {
            frontier_phi_8_5_ladder = (fract((_409 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _409;
            frontier_phi_8_5_ladder_2 = (fract(_409 * _365) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _394;
            frontier_phi_8_5_ladder_1 = _391;
            frontier_phi_8_5_ladder_2 = _396;
        }
        _422 = frontier_phi_8_5_ladder_1;
        _424 = frontier_phi_8_5_ladder;
        _426 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_369 < 0.0)
        {
            float _423 = ((-0.0) - _373) / _369;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_423 < _391)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_423 * _367) + _372) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _423;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_423 * _365) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _394;
                frontier_phi_8_6_ladder_9_ladder_1 = _391;
                frontier_phi_8_6_ladder_9_ladder_2 = _396;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _394;
            frontier_phi_8_6_ladder_1 = _391;
            frontier_phi_8_6_ladder_2 = _396;
        }
        _422 = frontier_phi_8_6_ladder_1;
        _424 = frontier_phi_8_6_ladder;
        _426 = frontier_phi_8_6_ladder_2;
    }
    float _430 = (_365 > 0.0) ? (cbMtdParam._m0[16u].w / _365) : 5000.0;
    float _443;
    float _444;
    if (_430 < _422)
    {
        _443 = ((_372 + cbMtdParam._m0[17u].x) + (_430 * _367)) * 0.16666667163372039794921875;
        _444 = (((_430 * _369) + _373) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _443 = _424;
        _444 = _426;
    }
    vec4 _446 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_443, _444));
    float _451 = _446.x * cbMtdParam._m0[13u].x;
    float _452 = _446.y * cbMtdParam._m0[13u].y;
    float _453 = _446.z * cbMtdParam._m0[13u].z;
    float _458 = 0.5 - (_284 * 0.5);
    float _468 = (((_451 - _297) - (_451 * _284)) * _458) + _297;
    float _469 = (((_452 - _299) - (_452 * _284)) * _458) + _299;
    float _470 = (((_453 - _301) - (_453 * _284)) * _458) + _301;
    vec4 _482 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _484 = _482.x;
    vec4 _496 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _504 = (_496.x * 2.0) + (-1.0);
    float _506 = (_496.y * 2.0) + (-1.0);
    float _507 = dot(vec2(_504, _506), vec2(_504, _506));
    float _3114 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0))));
    float _513 = _496.z * _284;
    float _516 = fma(_512, _193, fma(_506, _200, _504 * _186));
    float _519 = fma(_512, _194, fma(_506, _201, _504 * _187));
    float _522 = fma(_512, _195, fma(_506, _202, _504 * _188));
    float _526 = inversesqrt(dot(vec3(_516, _519, _522), vec3(_516, _519, _522)));
    float _527 = _526 * _516;
    float _528 = _526 * _519;
    float _529 = _526 * _522;
    float _3125 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _530 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
    float _3136 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3147 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _3158 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3169 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _534 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _550 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _554 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _555 = _257 * _554;
    float _556 = _258 * _554;
    float _557 = _259 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_529, cbSceneParam._m0[5u].z, fma(_528, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _527));
    float _588 = fma(_529, cbSceneParam._m0[6u].z, fma(_528, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _527));
    float _591 = fma(_529, cbSceneParam._m0[7u].z, fma(_528, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _527));
    uint _604 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = (_604 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _612 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_606].x;
    float _613 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0)))) * cbInstanceData._m0[_606].y;
    float _614 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_606].z;
    float _3180 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    float _3202 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
    float _618 = 1.0 - _534;
    float _619 = _615 * _618;
    float _620 = _616 * _618;
    float _621 = _617 * _618;
    float _626 = (_615 + (-0.039999999105930328369140625)) * _534;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _534;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _534;
    float _629 = _626 + 0.039999999105930328369140625;
    float _631 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    vec4 _641 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _644 = _641.x * TEXCOORD.z;
    float _645 = dot(vec3(_527, _528, _529), vec3(_555, _556, _557));
    float _648 = _645 * 2.0;
    float _652 = (_648 * _527) - _555;
    float _653 = (_648 * _528) - _556;
    float _654 = (_648 * _529) - _557;
    float _658 = abs(dot(vec3(_555, _556, _557), vec3(_527, _528, _529)));
    float _3213 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _660 = sqrt(_530);
    float _673 = exp2((_660 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_660 * 3.0));
    float _679 = (1.0 - _673) * ((_660 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _680 = _673 * _660;
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _749 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _753 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _757 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _781 = _708 + _527;
        float _782 = _712 + _528;
        float _783 = _716 + _529;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _749;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _753;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _757;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_749 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_753 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_757 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_527, _528, _529), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3239 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3250 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3261 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_527, _528, _529), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3272 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3283 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3294 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_527, _528, _529), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3305 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3316 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3327 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1024 = _853;
        _1025 = _852;
        _1026 = _864;
        _1027 = _863;
        _1028 = _862;
        _1029 = _874;
        _1030 = _873;
        _1031 = _872;
        _1032 = _887;
        _1033 = _886;
        _1034 = _885;
        _1035 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _393;
        _1024 = _393;
        _1025 = _393;
        _1026 = _393;
        _1027 = _393;
        _1028 = _393;
        _1029 = _393;
        _1030 = _393;
        _1031 = _393;
        _1032 = _393;
        _1033 = _393;
        _1034 = _393;
        _1035 = 0.0;
        _1036 = 0.0;
        _1037 = 0.0;
    }
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1063 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1067 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1071 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1094 = _708 + _527;
        float _1095 = _712 + _528;
        float _1096 = _716 + _529;
        float _1106 = fma(_1096, cbModelParam._m0[30u].z, fma(_1095, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1094)) - _1063;
        float _1107 = fma(_1096, cbModelParam._m0[31u].z, fma(_1095, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1094)) - _1067;
        float _1108 = fma(_1096, cbModelParam._m0[32u].z, fma(_1095, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1094)) - _1071;
        float _1112 = inversesqrt(dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108)));
        float _1125 = ((_1112 * _1106) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1063 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1126 = ((_1112 * _1107) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1067 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1127 = ((_1112 * _1108) / cbModelParam._m0[35u].z) + ((((((_1071 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1136 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1143 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1125, _1126, _1127), 0.0);
        float _1162 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1129.x + (-0.5));
        float _1164 = _1162 * (_1129.y + (-0.5));
        float _1165 = _1162 * (_1129.z + (-0.5));
        float _1172 = exp2((_1136.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1136.x + (-0.5));
        float _1174 = _1172 * (_1136.y + (-0.5));
        float _1175 = _1172 * (_1136.z + (-0.5));
        float _1182 = exp2((_1143.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1143.x + (-0.5));
        float _1184 = _1182 * (_1143.y + (-0.5));
        float _1185 = _1182 * (_1143.z + (-0.5));
        float _1192 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1150.x + (-0.5));
        float _1194 = _1192 * (_1150.y + (-0.5));
        float _1195 = _1192 * (_1150.z + (-0.5));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1198 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1199 = _1163 * 0.5;
        float _1200 = _1173 * 0.5;
        float _1201 = _1183 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_527, _528, _529), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3390 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_1226 + 1.0))) + _1231) * _1196;
        float _1241 = _1164 * 0.5;
        float _1242 = _1174 * 0.5;
        float _1243 = _1184 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_527, _528, _529), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1197 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3423 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1268 + 1.0))) + _1273) * _1197;
        float _1283 = _1165 * 0.5;
        float _1284 = _1175 * 0.5;
        float _1285 = _1185 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_527, _528, _529), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1198 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3456 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1310 + 1.0))) + _1315) * _1198;
        _1332 = _1165;
        _1333 = _1164;
        _1334 = _1163;
        _1335 = _1175;
        _1336 = _1174;
        _1337 = _1173;
        _1338 = _1185;
        _1339 = _1184;
        _1340 = _1183;
        _1341 = _1198;
        _1342 = _1197;
        _1343 = _1196;
        _1344 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1345 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1346 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _393;
        _1333 = _393;
        _1334 = _393;
        _1335 = _393;
        _1336 = _393;
        _1337 = _393;
        _1338 = _393;
        _1339 = _393;
        _1340 = _393;
        _1341 = _393;
        _1342 = _393;
        _1343 = _393;
        _1344 = 0.0;
        _1345 = 0.0;
        _1346 = 0.0;
    }
    float _1356 = (cbModelParam._m0[1u].x * (_1344 - _1035)) + _1035;
    float _1357 = (cbModelParam._m0[1u].x * (_1345 - _1036)) + _1036;
    float _1358 = (cbModelParam._m0[1u].x * (_1346 - _1037)) + _1037;
    float _1379 = fma(_1358, cbSceneParam._m0[89u].z, fma(_1357, cbSceneParam._m0[89u].y, _1356 * cbSceneParam._m0[89u].x));
    float _1382 = fma(_1358, cbSceneParam._m0[90u].z, fma(_1357, cbSceneParam._m0[90u].y, _1356 * cbSceneParam._m0[90u].x));
    float _1385 = fma(_1358, cbSceneParam._m0[91u].z, fma(_1357, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1356));
    float _1400 = _652 * 0.5;
    float _1401 = _653 * 0.5;
    float _1402 = _654 * 0.5;
    float _1403 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1334, _1337, _1340, _1343));
    float _1406 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1333, _1336, _1339, _1342));
    float _1409 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1332, _1335, _1338, _1341));
    float _1443;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1416 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1023, _1026, _1029, _1032));
        float _1420 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1024, _1027, _1030, _1033));
        float _1424 = dot(vec4(_1400, _1401, _1402, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1431 = dot(vec4(cbModelParam._m0[39u]), vec4(_1400, _1401, _1402, 1.0));
        _1443 = dot(vec3(isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)), isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1431) ? 0.0 : (isnan(0.0) ? _1431 : max(0.0, _1431))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1443 = 1.0;
    }
    float _1454;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1445 = dot(vec4(cbModelParam._m0[40u]), vec4(_1400, _1401, _1402, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1445) ? 0.0 : (isnan(0.0) ? _1445 : max(0.0, _1445))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1458 = (_1454 * cbModelParam._m0[1u].x) + (_1443 * (1.0 - cbModelParam._m0[1u].x));
    float _1468 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _530);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1468 : min(cbModelParam._m0[25u].z, _1468));
    float _1551;
    float _1553;
    float _1555;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1518 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1522 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1526 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1529 = fma(_654, cbModelParam._m0[13u].z, fma(_653, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _652));
        float _1532 = fma(_654, cbModelParam._m0[14u].z, fma(_653, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _652));
        float _1535 = fma(_654, cbModelParam._m0[15u].z, fma(_653, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _652));
        float _1563;
        if (_1529 > 0.0)
        {
            _1563 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1563 = frontier_phi_26_24_ladder;
        }
        float _1925;
        if (_1532 > 0.0)
        {
            _1925 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1925 = frontier_phi_35_31_ladder;
        }
        float _2225;
        if (_1535 > 0.0)
        {
            _2225 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2225 = frontier_phi_49_42_ladder;
        }
        float _2227 = isnan(_1925) ? _1563 : (isnan(_1563) ? _1925 : min(_1563, _1925));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1529) + _1518;
        float _2233 = (_2228 * _1532) + _1522;
        float _2234 = (_2228 * _1535) + _1526;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2235;
        float _2238 = _2235 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2234 > _2238) || ((_2234 < _2236) || ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 < _2236) || (_2232 > _2238))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1469);
            frontier_phi_25_49_ladder = _2360.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2360.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2360.x * cbModelParam._m0[1u].y;
        }
        _1551 = frontier_phi_25_49_ladder_2;
        _1553 = frontier_phi_25_49_ladder_1;
        _1555 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_652, _653, _654), _1469);
        _1551 = _1539.x * cbModelParam._m0[1u].y;
        _1553 = _1539.y * cbModelParam._m0[1u].y;
        _1555 = _1539.z * cbModelParam._m0[1u].y;
    }
    float _1559 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _530);
    float _1560 = isnan(_1559) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1559 : min(cbModelParam._m0[25u].w, _1559));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1615 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1619 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1623 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1626 = fma(_654, cbModelParam._m0[21u].z, fma(_653, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _652));
        float _1629 = fma(_654, cbModelParam._m0[22u].z, fma(_653, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _652));
        float _1632 = fma(_654, cbModelParam._m0[23u].z, fma(_653, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _652));
        float _1930;
        if (_1626 > 0.0)
        {
            _1930 = abs((1.0 - _1615) / _1626);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1615 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1930 = frontier_phi_37_33_ladder;
        }
        float _2251;
        if (_1629 > 0.0)
        {
            _2251 = abs((1.0 - _1619) / _1629);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1619 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2251 = frontier_phi_51_44_ladder;
        }
        float _2420;
        if (_1632 > 0.0)
        {
            _2420 = abs((1.0 - _1623) / _1632);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1623 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2420 = frontier_phi_65_60_ladder;
        }
        float _2422 = isnan(_2251) ? _1930 : (isnan(_1930) ? _2251 : min(_1930, _2251));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1626) + _1615;
        float _2428 = (_2423 * _1629) + _1619;
        float _2429 = (_2423 * _1632) + _1623;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2431 = (-1.0) - _2430;
        float _2433 = _2430 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2429 > _2433) || ((_2429 < _2431) || ((_2428 > _2433) || ((_2428 < _2431) || ((_2427 < _2431) || (_2427 > _2433))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2662 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2429, cbModelParam._m0[17u].z, fma(_2428, cbModelParam._m0[17u].y, _2427 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2429, cbModelParam._m0[18u].z, fma(_2428, cbModelParam._m0[18u].y, _2427 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2429, cbModelParam._m0[19u].z, fma(_2428, cbModelParam._m0[19u].y, _2427 * cbModelParam._m0[19u].x))), _1560);
            frontier_phi_34_65_ladder = _2662.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2662.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2662.z * cbModelParam._m0[1u].z;
        }
        _1651 = frontier_phi_34_65_ladder_1;
        _1653 = frontier_phi_34_65_ladder;
        _1655 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1635 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_652, _653, _654), _1560);
        _1651 = _1635.x * cbModelParam._m0[1u].z;
        _1653 = _1635.y * cbModelParam._m0[1u].z;
        _1655 = _1635.z * cbModelParam._m0[1u].z;
    }
    float _1668 = (((_679 * _629) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1651 - _1551)) + _1551);
    float _1670 = (((_679 * _631) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1653 - _1553)) + _1553);
    float _1672 = (((_679 * _632) + _680) * _644) * ((cbModelParam._m0[1u].w * (_1655 - _1555)) + _1555);
    float _1675 = fma(_1672, cbSceneParam._m0[89u].z, fma(_1670, cbSceneParam._m0[89u].y, _1668 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1672, cbSceneParam._m0[90u].z, fma(_1670, cbSceneParam._m0[90u].y, _1668 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1672, cbSceneParam._m0[91u].z, fma(_1670, cbSceneParam._m0[91u].y, _1668 * cbSceneParam._m0[91u].x));
    uvec4 _1691 = floatBitsToUint(cbInstanceData._m0[_604 + 5u]);
    uint _1693 = _1691.x * 14u;
    uint _1694 = _1693 + 13u;
    float _1699 = _644 + (-1.0);
    float _1702 = (cbLight._m0[_1694].x * _1699) + 1.0;
    float _1703 = (cbLight._m0[_1694].y * _1699) + 1.0;
    uint _1704 = _1693 + 5u;
    float _1710 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1714 = _1693 + 4u;
    float _1721 = isnan(1.0) ? _1702 : (isnan(_1702) ? 1.0 : min(_1702, 1.0));
    uint _1725 = _1693 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_527, _528, _529));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_527, _528, _529));
    float _3592 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3603 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1704].x * _1710) * _1746) + ((cbLight._m0[_1714].x * _1721) * _1744);
    float _1754 = ((_1710 * cbLight._m0[_1704].y) * _1746) + ((_1721 * cbLight._m0[_1714].y) * _1744);
    float _1755 = ((_1710 * cbLight._m0[_1704].z) * _1746) + ((_1721 * cbLight._m0[_1714].z) * _1744);
    uint _1757 = _1693 + 8u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1693].w)) * _530) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1693].x + _555;
    float _1773 = cbLight._m0[_1693].y + _556;
    float _1774 = cbLight._m0[_1693].z + _557;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1693].xyz));
    float _3614 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _3625 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _1786 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _1787 = dot(vec3(_527, _528, _529), vec3(_1779, _1780, _1781));
    float _3636 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1693].xyz), vec3(_1779, _1780, _1781));
    float _3647 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1771 * _1771;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1807 = exp2(log2(1.0 - (isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0)))) * 5.0);
    float _1808 = 0.959999978542327880859375 - _626;
    float _1810 = 0.959999978542327880859375 - _627;
    float _1811 = 0.959999978542327880859375 - _628;
    float _1818 = 1.0 - _1771;
    float _1829 = (0.5 / (((_1786 * ((_1785 * _1818) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1818) + _1771) * _1785))) * _1785;
    float _3658 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    uint _1842 = _1693 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _530) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1725].x + _555;
    float _1856 = cbLight._m0[_1725].y + _556;
    float _1857 = cbLight._m0[_1725].z + _557;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_527, _528, _529), vec3(cbLight._m0[_1725].xyz));
    float _3669 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
    float _1869 = dot(vec3(_527, _528, _529), vec3(_1862, _1863, _1864));
    float _3680 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1862, _1863, _1864));
    float _3691 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * 5.0);
    float _1895 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1786 * ((_1868 * _1895) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1895) + _1854) * _1868))) * _1868;
    float _3702 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1917 = (((((_1888 * _1808) + _629) * cbLight._m0[_1842].x) * _1907) * _1710) + (((((_1807 * _1808) + _629) * cbLight._m0[_1757].x) * _1831) * _1721);
    float _1918 = (((((_1888 * _1810) + _631) * cbLight._m0[_1842].y) * _1907) * _1710) + (((((_1807 * _1810) + _631) * cbLight._m0[_1757].y) * _1831) * _1721);
    float _1919 = (((((_1888 * _1811) + _632) * cbLight._m0[_1842].z) * _1907) * _1710) + (((((_1807 * _1811) + _632) * cbLight._m0[_1757].z) * _1831) * _1721);
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    float _2042;
    float _2044;
    if (_1691.y == 0u)
    {
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1974;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1974;
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1974;
        uvec4 _1989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1990 = _1989.x;
        uint _2001 = uint((float(_1989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _1990))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _1990)));
        float _2011 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2012 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        uint _2015 = uint(isnan(14.0) ? _2012 : (isnan(_2012) ? 14.0 : min(_2012, 14.0)));
        uvec4 _2020 = texelFetch(g_lightClusterGridBuffer, int(((_2015 << 2u) + (_2001 << 6u)) >> 2u));
        uint _2021 = _2020.x;
        uint _2022 = _1989.z;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        if (((((1u << ((_2022 >> 4u) & 15u)) + 4294967295u) & _2021) == 0u) || ((_2022 & 240u) == 0u))
        {
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
            _2122 = 0.0;
        }
        else
        {
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2123;
            float _2288 = 0.0;
            float _2289 = 0.0;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            uint _2294 = 0u;
            uint _2303;
            bool _2304;
            for (;;)
            {
                _2303 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2294 << 2u)) >> 2u)).x;
                _2304 = _2303 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2304)
                {
                    frontier_phi_62_pred = _2289;
                    frontier_phi_62_pred_1 = _2288;
                    frontier_phi_62_pred_2 = _2290;
                    frontier_phi_62_pred_3 = _2293;
                    frontier_phi_62_pred_4 = _2292;
                    frontier_phi_62_pred_5 = _2291;
                }
                else
                {
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    uint _2469;
                    _2463 = _2288;
                    _2464 = _2289;
                    _2465 = _2290;
                    _2466 = _2291;
                    _2467 = _2292;
                    _2468 = _2293;
                    _2469 = _2303;
                    float _2369;
                    float _2370;
                    float _2371;
                    float _2372;
                    float _2373;
                    float _2374;
                    for (;;)
                    {
                        uint _2473 = uint(findLSB(_2469)) + (_2294 << 5u);
                        uint _2470 = (_2469 + 4294967295u) & _2469;
                        uint _2475 = _2473 * 48u;
                        vec4 _2489 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2475)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2475 + 3u)).x));
                        uint _2495 = (_2473 * 48u) + 4u;
                        vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2495)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2495 + 3u)).x));
                        uint _2514 = (_2473 * 48u) + 8u;
                        vec3 _2525 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2514)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2514 + 2u)).x));
                        float _2529 = _2489.x - _1975;
                        float _2530 = _2489.y - _1976;
                        float _2531 = _2489.z - _1977;
                        float _2532 = dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531));
                        float _2535 = inversesqrt(_2532);
                        float _2536 = _2535 * _2529;
                        float _2537 = _2535 * _2530;
                        float _2538 = _2535 * _2531;
                        float _2539 = dot(vec3(_585, _588, _591), vec3(_2536, _2537, _2538));
                        float _2544 = 1.0 - (_2532 * _2489.w);
                        float _3723 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
                        float _2545 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2546 = sqrt(_2532) * _2508.w;
                        float _2549 = 1.39999997615814208984375 / (_2546 + 1.39999997615814208984375);
                        float _2550 = _2549 * _2549;
                        float _2553 = ((1.0 - _2550) * _2539) + _2550;
                        float _2556 = _2546 * _2546;
                        float _2560 = ((isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))) * _2545) / ((_2556 * 0.699999988079071044921875) + 1.0);
                        float _2564 = (-0.0) - _1975;
                        float _2565 = (-0.0) - _1976;
                        float _2566 = (-0.0) - _1977;
                        float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
                        float _2571 = _2570 * _2564;
                        float _2572 = _2570 * _2565;
                        float _2573 = _2570 * _2566;
                        float _2581 = exp2(log2(1.0 / ((_2556 * 3.5) + 5.0)) * 0.25);
                        float _2582 = 1.0 - _660;
                        float _2589 = sqrt(1.0 - ((1.0 - (_2582 * _2582)) * (1.0 - (_2581 * _2581))));
                        float _2590 = _2589 * _2589;
                        float _2591 = _2590 * _2590;
                        float _2592 = _2571 + _2536;
                        float _2593 = _2572 + _2537;
                        float _2594 = _2573 + _2538;
                        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
                        float _2602 = dot(vec3(_585, _588, _591), vec3(_2571, _2572, _2573));
                        float _3739 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
                        float _2605 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
                        float _2606 = dot(vec3(_585, _588, _591), vec3(_2598 * _2592, _2598 * _2593, _2598 * _2594));
                        float _3750 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2609 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
                        float _2613 = ((_2609 * _2609) * (_2591 + (-1.0))) + 1.0;
                        float _2614 = _2549 * _2590;
                        float _2615 = _2614 * _2614;
                        float _2618 = ((1.0 - _2615) * _2539) + _2615;
                        float _3761 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2619 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
                        float _2620 = 1.0 - _2590;
                        float _2630 = (0.5 / (((_2619 * ((_2605 * _2620) + _2590)) + 9.9999999392252902907785028219223e-09) + (((_2619 * _2620) + _2590) * _2605))) * _2619;
                        float _3772 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
                        float _2641 = (((_2591 * 3.1415927410125732421875) * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) / ((_2613 * _2613) * ((_2556 * 2.1991131305694580078125) + 3.141590118408203125))) * _2545;
                        _2372 = (_2560 * _2508.x) + _2466;
                        _2373 = (_2560 * _2508.y) + _2467;
                        _2374 = (_2560 * _2508.z) + _2468;
                        _2369 = (_2641 * _2525.x) + _2463;
                        _2370 = (_2641 * _2525.y) + _2464;
                        _2371 = (_2641 * _2525.z) + _2465;
                        if (_2470 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2463 = _2369;
                            _2464 = _2370;
                            _2465 = _2371;
                            _2466 = _2372;
                            _2467 = _2373;
                            _2468 = _2374;
                            _2469 = _2470;
                        }
                    }
                    frontier_phi_62_pred = _2370;
                    frontier_phi_62_pred_1 = _2369;
                    frontier_phi_62_pred_2 = _2371;
                    frontier_phi_62_pred_3 = _2374;
                    frontier_phi_62_pred_4 = _2373;
                    frontier_phi_62_pred_5 = _2372;
                }
                _2115 = frontier_phi_62_pred;
                _2113 = frontier_phi_62_pred_1;
                _2117 = frontier_phi_62_pred_2;
                _2123 = frontier_phi_62_pred_3;
                _2121 = frontier_phi_62_pred_4;
                _2119 = frontier_phi_62_pred_5;
                uint _2295 = _2294 + 1u;
                if (_2295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2288 = _2113;
                    _2289 = _2115;
                    _2290 = _2117;
                    _2291 = _2119;
                    _2292 = _2121;
                    _2293 = _2123;
                    _2294 = _2295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
            _2122 = _2123;
        }
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.z;
        uint _2129 = (_2127 >> 8u) & 15u;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        if (((4294967295u << _2129) & _2021) == 0u)
        {
            _2256 = _2112;
            _2258 = _2114;
            _2260 = _2116;
            _2262 = _2118;
            _2264 = _2120;
            _2266 = _2122;
        }
        else
        {
            float _2281 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _2282 = _2281 * _1975;
            float _2283 = _2281 * _1976;
            float _2284 = _2281 * _1977;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2129 < ((_2127 >> 12u) & 15u))
            {
                float _2257;
                float _2259;
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2446 = _2112;
                float _2447 = _2114;
                float _2448 = _2116;
                float _2449 = _2118;
                float _2450 = _2120;
                float _2451 = _2122;
                uint _2452 = _2129;
                uint _2461;
                bool _2462;
                for (;;)
                {
                    _2461 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                    _2462 = _2461 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2462)
                    {
                        frontier_phi_71_pred = _2447;
                        frontier_phi_71_pred_1 = _2446;
                        frontier_phi_71_pred_2 = _2451;
                        frontier_phi_71_pred_3 = _2450;
                        frontier_phi_71_pred_4 = _2449;
                        frontier_phi_71_pred_5 = _2448;
                    }
                    else
                    {
                        float _2667;
                        float _2668;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2960;
                        float _2961;
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2680 = _2446;
                        float _2681 = _2447;
                        float _2682 = _2448;
                        float _2683 = _2449;
                        float _2684 = _2450;
                        float _2685 = _2451;
                        uint _2686 = _2461;
                        uint _2687;
                        vec4 _2712;
                        float _2713;
                        vec4 _2728;
                        vec3 _2740;
                        vec4 _2755;
                        vec4 _2770;
                        float _2816;
                        bool _2817;
                        for (;;)
                        {
                            uint _2697 = ((_2452 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2686));
                            _2687 = (_2686 + 4294967295u) & _2686;
                            uint _2699 = _2697 * 40u;
                            _2712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2699 + 3u)).x));
                            _2713 = _2712.w;
                            uint _2715 = (_2697 * 40u) + 4u;
                            _2728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 3u)).x));
                            uint _2730 = (_2697 * 40u) + 8u;
                            _2740 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2730 + 2u)).x));
                            uint _2742 = (_2697 * 40u) + 16u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            uint _2757 = (_2697 * 40u) + 20u;
                            _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2772 = (_2697 * 40u) + 24u;
                            vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            uint _2791 = (_2697 * 40u) + 28u;
                            vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            _2816 = fma(_1977, _2804.z, fma(_1976, _2804.y, _2804.x * _1975)) + _2804.w;
                            _2817 = !((fma(_1977, _2785.z, fma(_1976, _2785.y, _2785.x * _1975)) + _2785.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2817)
                            {
                                float _2844 = _2712.x - _1975;
                                float _2845 = _2712.y - _1976;
                                float _2846 = _2712.z - _1977;
                                float _2847 = dot(vec3(_2844, _2845, _2846), vec3(_2844, _2845, _2846));
                                float _2850 = inversesqrt(_2847);
                                float _2851 = _2850 * _2844;
                                float _2852 = _2850 * _2845;
                                float _2853 = _2850 * _2846;
                                float _2857 = 1.0 - (_2847 / (_2713 * _2713));
                                float _3783 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                                float _2858 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2862 = sqrt(_2847) * _2728.w;
                                float _2864 = 1.39999997615814208984375 / (_2862 + 1.39999997615814208984375);
                                float _2865 = _2864 * _2864;
                                float _2868 = ((1.0 - _2865) * dot(vec3(_2851, _2852, _2853), vec3(_585, _588, _591))) + _2865;
                                float _2871 = _2862 * _2862;
                                float _2875 = (fma(_1977, _2755.z, fma(_1976, _2755.y, _2755.x * _1975)) + _2755.w) / _2816;
                                float _2876 = (fma(_1977, _2770.z, fma(_1976, _2770.y, _2770.x * _1975)) + _2770.w) / _2816;
                                float _2880 = 1.0 - dot(vec2(_2875, _2876), vec2(_2875, _2876));
                                float _3799 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                                float _2881 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
                                float _2882 = _2881 * (((isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0))) * _2858) / ((_2871 * 0.699999988079071044921875) + 1.0));
                                float _2894 = exp2(log2(1.0 / ((_2871 * 3.5) + 5.0)) * 0.25);
                                float _2895 = 1.0 - _660;
                                float _2902 = sqrt(1.0 - ((1.0 - (_2895 * _2895)) * (1.0 - (_2894 * _2894))));
                                float _2903 = _2902 * _2902;
                                float _2904 = _2903 * _2903;
                                float _2905 = _2851 - _2282;
                                float _2906 = _2852 - _2283;
                                float _2907 = _2853 - _2284;
                                float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                                float _2915 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2282, (-0.0) - _2283, (-0.0) - _2284));
                                float _3810 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                                float _2918 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                                float _2919 = dot(vec3(_585, _588, _591), vec3(_2911 * _2905, _2911 * _2906, _2911 * _2907));
                                float _3821 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2922 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                                float _2926 = ((_2922 * _2922) * (_2904 + (-1.0))) + 1.0;
                                float _2927 = _2864 * _2903;
                                float _2928 = _2927 * _2927;
                                float _2934 = ((1.0 - _2928) * dot(vec3(_585, _588, _591), vec3(_2851, _2852, _2853))) + _2928;
                                float _3832 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
                                float _2936 = 1.0 - _2903;
                                float _2946 = (0.5 / (((_2935 * ((_2918 * _2936) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2935 * _2936) + _2903) * _2918))) * _2935;
                                float _3843 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                                float _2956 = (_2881 * _2858) * (((_2904 * 3.1415927410125732421875) * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) / ((_2926 * _2926) * ((_2871 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _2956 * _2740.y;
                                frontier_phi_77_pred_1 = _2956 * _2740.x;
                                frontier_phi_77_pred_2 = _2882 * _2728.z;
                                frontier_phi_77_pred_3 = _2882 * _2728.y;
                                frontier_phi_77_pred_4 = _2882 * _2728.x;
                                frontier_phi_77_pred_5 = _2956 * _2740.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2961 = frontier_phi_77_pred;
                            _2960 = frontier_phi_77_pred_1;
                            _2965 = frontier_phi_77_pred_2;
                            _2964 = frontier_phi_77_pred_3;
                            _2963 = frontier_phi_77_pred_4;
                            _2962 = frontier_phi_77_pred_5;
                            _2670 = _2963 + _2683;
                            _2671 = _2964 + _2684;
                            _2672 = _2965 + _2685;
                            _2667 = _2960 + _2680;
                            _2668 = _2961 + _2681;
                            _2669 = _2962 + _2682;
                            if (_2687 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2680 = _2667;
                                _2681 = _2668;
                                _2682 = _2669;
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2687;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2668;
                        frontier_phi_71_pred_1 = _2667;
                        frontier_phi_71_pred_2 = _2672;
                        frontier_phi_71_pred_3 = _2671;
                        frontier_phi_71_pred_4 = _2670;
                        frontier_phi_71_pred_5 = _2669;
                    }
                    _2259 = frontier_phi_71_pred;
                    _2257 = frontier_phi_71_pred_1;
                    _2267 = frontier_phi_71_pred_2;
                    _2265 = frontier_phi_71_pred_3;
                    _2263 = frontier_phi_71_pred_4;
                    _2261 = frontier_phi_71_pred_5;
                    uint _2453 = _2452 + 1u;
                    if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2446 = _2257;
                        _2447 = _2259;
                        _2448 = _2261;
                        _2449 = _2263;
                        _2450 = _2265;
                        _2451 = _2267;
                        _2452 = _2453;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2267;
                frontier_phi_53_54_ladder_1 = _2263;
                frontier_phi_53_54_ladder_2 = _2261;
                frontier_phi_53_54_ladder_3 = _2259;
                frontier_phi_53_54_ladder_4 = _2257;
                frontier_phi_53_54_ladder_5 = _2265;
            }
            else
            {
                frontier_phi_53_54_ladder = _2122;
                frontier_phi_53_54_ladder_1 = _2118;
                frontier_phi_53_54_ladder_2 = _2116;
                frontier_phi_53_54_ladder_3 = _2114;
                frontier_phi_53_54_ladder_4 = _2112;
                frontier_phi_53_54_ladder_5 = _2120;
            }
            _2256 = frontier_phi_53_54_ladder_4;
            _2258 = frontier_phi_53_54_ladder_3;
            _2260 = frontier_phi_53_54_ladder_2;
            _2262 = frontier_phi_53_54_ladder_1;
            _2264 = frontier_phi_53_54_ladder_5;
            _2266 = frontier_phi_53_54_ladder;
        }
        float _2271 = isnan(1.0) ? _644 : (isnan(_644) ? 1.0 : min(_644, 1.0));
        _2034 = (_2271 * _2262) + _1753;
        _2036 = (_2271 * _2264) + _1754;
        _2038 = (_2271 * _2266) + _1755;
        _2040 = ((_2256 * _629) * _2271) + _1917;
        _2042 = ((_2258 * _631) * _2271) + _1918;
        _2044 = ((_2260 * _632) * _2271) + _1919;
    }
    else
    {
        _2034 = _1753;
        _2036 = _1754;
        _2038 = _1755;
        _2040 = _1917;
        _2042 = _1918;
        _2044 = _1919;
    }
    float _3859 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3870 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3881 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _2061 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_2034 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _644))) + ((_2040 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2062 = ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_2036 + ((isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0))) * _644))) + ((_2042 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    float _2063 = ((isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_2038 + ((isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))) * _644))) + ((_2044 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _1458)) * cbPerFrame._m0[3u].x);
    uint _2067 = _604 + 6u;
    float _2075 = _563 / cbSceneParam._m0[86u].x;
    float _2076 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2090 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2075, _2076, (log2((isnan(cbSceneParam._m0[77u].w) ? _550 : (isnan(_550) ? cbSceneParam._m0[77u].w : min(_550, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2092 = _2090.x;
    float _2093 = _2090.y;
    float _2094 = _2090.z;
    float _2095 = _2090.w;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    if (_550 > cbSceneParam._m0[78u].w)
    {
        float _2137 = isnan(_550) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _550 : min(cbSceneParam._m0[80u].w, _550));
        float _2138 = _2137 / _550;
        float _2149 = _2138 * _257;
        float _2150 = _258 * _2138;
        float _2151 = (-0.0) - _2150;
        float _2152 = _2138 * _259;
        float _2154 = (cbSceneParam._m0[77u].w * _2151) / _2137;
        float _2155 = _2154 + cbSceneParam._m0[79u].w;
        float _2156 = cbSceneParam._m0[79u].w - _2150;
        float _2162 = sqrt(((_2149 * _2149) + (_2150 * _2150)) + (_2152 * _2152));
        float _2165 = (1.0 - (cbSceneParam._m0[77u].w / _2137)) * _2162;
        float _2171 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2173 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2382;
        if (abs((_2151 - _2154) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2382 = ((((_2155 > 0.0) ? exp2(_2171 * _2155) : (2.0 - exp2(_2173 * _2155))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2165;
        }
        else
        {
            float _2317 = 1.0 / cbSceneParam._m0[80u].x;
            float _2318 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : max(_2155, _2156));
            float _2319 = isnan(_2156) ? _2155 : (isnan(_2155) ? _2156 : min(_2155, _2156));
            float _2328 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : min(_2318, 0.0));
            float _2329 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : min(_2319, 0.0));
            _2382 = ((abs(_2162 / _2151) * cbSceneParam._m0[80u].y) * ((((_2328 - _2329) * 2.0) - ((exp2(_2171 * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)))) - exp2(_2171 * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0))))) * _2317)) - ((exp2(_2173 * _2328) - exp2(_2173 * _2329)) * _2317))) + (_2165 * cbSceneParam._m0[80u].z);
        }
        vec4 _2384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2075, _2076, 1.0), 0.0);
        float _2393 = exp2((_2382 * (-1.44269502162933349609375)) * (1.0 - _2384.w));
        float _2394 = log2(_2393);
        float _2410 = log2(_2095);
        _2175 = (exp2(_2410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].x)) * _2384.x) / cbSceneParam._m0[78u].x)) + _2092;
        _2177 = (exp2(_2410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].y)) * _2384.y) / cbSceneParam._m0[78u].y)) + _2093;
        _2179 = (exp2(_2410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2394 * cbSceneParam._m0[78u].z)) * _2384.z) / cbSceneParam._m0[78u].z)) + _2094;
        _2181 = _2393 * _2095;
    }
    else
    {
        _2175 = _2092;
        _2177 = _2093;
        _2179 = _2094;
        _2181 = _2095;
    }
    float _2193 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2194 = _2193 == 3.0;
    float _2195 = log2(_2181);
    float _2202 = exp2(_2195 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)));
    float _2203 = exp2(_2195 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0)));
    float _2204 = exp2(_2195 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0)));
    float _2213 = (_2193 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2213 * (_2194 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2175)));
    SV_Target.y = _2213 * (_2194 ? _2203 : (_2203 + (cbSceneParam._m0[72u].w * _2177)));
    SV_Target.z = _2213 * (_2194 ? _2204 : (_2204 + (cbSceneParam._m0[72u].w * _2179)));
    SV_Target.w = cbInstanceData._m0[_2067].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2067].w;
}


