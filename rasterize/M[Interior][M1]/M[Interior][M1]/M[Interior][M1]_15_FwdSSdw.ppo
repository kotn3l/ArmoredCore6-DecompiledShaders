#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1128;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    bool _376 = _354 > 0.0;
    float _378 = _376 ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _385 = _359 + (-0.5);
    float _388 = _360 + (-0.5);
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_385 + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_388 + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    float _432 = (_418 - (_418 * _288)) * cbMtdParam._m0[9u].x;
    float _433 = (_419 - (_419 * _288)) * cbMtdParam._m0[9u].y;
    float _434 = cbMtdParam._m0[9u].z * (_420 - (_420 * _288));
    float _456 = (cbMtdParam._m0[21u].x * _347) * _353;
    float _458 = (cbMtdParam._m0[20u].w * _348) * _353;
    bool _459 = _456 > 0.0;
    float _464;
    if (_459)
    {
        _464 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _464 = frontier_phi_11_10_ladder;
    }
    bool _466 = _458 > 0.0;
    float _471;
    if (_466)
    {
        _471 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _471 = frontier_phi_15_14_ladder;
    }
    float _474 = _376 ? (cbMtdParam._m0[16u].z / _354) : 5000.0;
    float _475 = isnan(_471) ? _464 : (isnan(_464) ? _471 : min(_464, _471));
    float _476 = isnan(_474) ? _475 : (isnan(_475) ? _474 : min(_475, _474));
    float _480 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _484 = ((_476 * _354) + _480) / _480;
    float _489 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _491 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _507 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_476 * _456)) / _484) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_476 * _458)) / _484) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _512 = _507.x * cbMtdParam._m0[10u].x;
    float _513 = _507.y * cbMtdParam._m0[10u].y;
    float _514 = _507.z * cbMtdParam._m0[10u].z;
    float _522;
    if (_459)
    {
        _522 = (1.0 - _359) / _456;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_456 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _359) / _456;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _522 = frontier_phi_19_18_ladder;
    }
    float _528;
    if (_466)
    {
        _528 = (1.0 - _360) / _458;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _360) / _458;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _528 = frontier_phi_23_22_ladder;
    }
    float _530 = isnan(_528) ? _522 : (isnan(_522) ? _528 : min(_522, _528));
    float _531 = isnan(_474) ? _530 : (isnan(_530) ? _474 : min(_530, _474));
    float _538 = ((_531 * _354) + _480) / _480;
    vec4 _552 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_385 + (_531 * _456)) / _538) + 0.5) + _489) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_388 + (_531 * _458)) / _538) + 0.5) + _491) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _554 = _552.w;
    float _556 = _554 - (_554 * _288);
    float _567 = 0.5 - (_288 * 0.5);
    float _577 = (((_432 - _301) + (_556 * ((_512 - _432) - (_512 * _288)))) * _567) + _301;
    float _578 = (((_433 - _303) + (_556 * ((_513 - _433) - (_513 * _288)))) * _567) + _303;
    float _579 = (((_434 - _305) + (_556 * ((_514 - _434) - (_514 * _288)))) * _567) + _305;
    vec4 _591 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _593 = _591.x;
    vec4 _605 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _613 = (_605.x * 2.0) + (-1.0);
    float _615 = (_605.y * 2.0) + (-1.0);
    float _616 = dot(vec2(_613, _615), vec2(_613, _615));
    float _3276 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _621 = sqrt(1.0 - (isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0))));
    float _622 = _605.z * _288;
    float _625 = fma(_621, _197, fma(_615, _204, _613 * _190));
    float _628 = fma(_621, _198, fma(_615, _205, _613 * _191));
    float _631 = fma(_621, _199, fma(_615, _206, _613 * _192));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3287 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _639 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3309 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _3320 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _3331 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _643 = isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0));
    float _659 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _663 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _664 = _261 * _663;
    float _665 = _262 * _663;
    float _666 = _263 * _663;
    float _672 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _673 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _697 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _700 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _716 = (_713 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _722 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0)))) * cbInstanceData._m0[_716].x;
    float _723 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * cbInstanceData._m0[_716].y;
    float _724 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0)))) * cbInstanceData._m0[_716].z;
    float _3342 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0));
    float _3364 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0));
    float _728 = 1.0 - _643;
    float _729 = _725 * _728;
    float _730 = _726 * _728;
    float _731 = _727 * _728;
    float _736 = (_725 + (-0.039999999105930328369140625)) * _643;
    float _737 = (_726 + (-0.039999999105930328369140625)) * _643;
    float _738 = (_727 + (-0.039999999105930328369140625)) * _643;
    float _739 = _736 + 0.039999999105930328369140625;
    float _741 = _737 + 0.039999999105930328369140625;
    float _742 = _738 + 0.039999999105930328369140625;
    vec4 _751 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _672, cbSceneParam._m0[86u].y * _673));
    float _754 = _751.x * TEXCOORD.z;
    float _755 = dot(vec3(_636, _637, _638), vec3(_664, _665, _666));
    float _758 = _755 * 2.0;
    float _762 = (_758 * _636) - _664;
    float _763 = (_758 * _637) - _665;
    float _764 = (_758 * _638) - _666;
    float _768 = abs(dot(vec3(_664, _665, _666), vec3(_636, _637, _638)));
    float _3375 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = sqrt(_639);
    float _783 = exp2((_770 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_770 * 3.0));
    float _789 = (1.0 - _783) * ((_770 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _790 = _783 * _770;
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1127;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _854 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _858 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _862 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _885 = _818 + _636;
        float _886 = _822 + _637;
        float _887 = _826 + _638;
        float _897 = fma(_887, cbModelParam._m0[26u].z, fma(_886, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _885)) - _854;
        float _898 = fma(_887, cbModelParam._m0[27u].z, fma(_886, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _885)) - _858;
        float _899 = fma(_887, cbModelParam._m0[28u].z, fma(_886, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _885)) - _862;
        float _903 = inversesqrt(dot(vec3(_897, _898, _899), vec3(_897, _898, _899)));
        float _916 = ((_903 * _897) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_854 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_903 * _898) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_858 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_903 * _899) / cbModelParam._m0[34u].z) + ((((((_862 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_916, _917, _918), 0.0);
        float _955 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_921.x + (-0.5));
        float _957 = _955 * (_921.y + (-0.5));
        float _958 = _955 * (_921.z + (-0.5));
        float _965 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_928.x + (-0.5));
        float _967 = _965 * (_928.y + (-0.5));
        float _968 = _965 * (_928.z + (-0.5));
        float _975 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _976 = _975 * (_935.x + (-0.5));
        float _977 = _975 * (_935.y + (-0.5));
        float _978 = _975 * (_935.z + (-0.5));
        float _985 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_942.x + (-0.5));
        float _987 = _985 * (_942.y + (-0.5));
        float _988 = _985 * (_942.z + (-0.5));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = _956 * 0.5;
        float _993 = _966 * 0.5;
        float _994 = _976 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1009 = (dot(vec3(_636, _637, _638), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1019 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3423 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1021 + 1.0))) + _1026) * _989;
        float _1036 = _957 * 0.5;
        float _1037 = _967 * 0.5;
        float _1038 = _977 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_636, _637, _638), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3434 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3445 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3456 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * (_1063 + 1.0))) + _1068) * _990;
        float _1078 = _958 * 0.5;
        float _1079 = _968 * 0.5;
        float _1080 = _978 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_636, _637, _638), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3489 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1105 + 1.0))) + _1110) * _991;
        _1127 = _958;
        _1129 = _957;
        _1130 = _956;
        _1131 = _968;
        _1132 = _967;
        _1133 = _966;
        _1134 = _978;
        _1135 = _977;
        _1136 = _976;
        _1137 = _991;
        _1138 = _990;
        _1139 = _989;
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _1128;
        _1129 = _1128;
        _1130 = _1128;
        _1131 = _1128;
        _1132 = _1128;
        _1133 = _1128;
        _1134 = _1128;
        _1135 = _1128;
        _1136 = _1128;
        _1137 = _1128;
        _1138 = _1128;
        _1139 = _1128;
        _1140 = 0.0;
        _1141 = 0.0;
        _1142 = 0.0;
    }
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1168 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1172 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1176 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1199 = _818 + _636;
        float _1200 = _822 + _637;
        float _1201 = _826 + _638;
        float _1211 = fma(_1201, cbModelParam._m0[30u].z, fma(_1200, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1199)) - _1168;
        float _1212 = fma(_1201, cbModelParam._m0[31u].z, fma(_1200, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1199)) - _1172;
        float _1213 = fma(_1201, cbModelParam._m0[32u].z, fma(_1200, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1199)) - _1176;
        float _1217 = inversesqrt(dot(vec3(_1211, _1212, _1213), vec3(_1211, _1212, _1213)));
        float _1230 = ((_1217 * _1211) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1168 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1217 * _1212) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1172 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1217 * _1213) / cbModelParam._m0[35u].z) + ((((((_1176 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1230, _1231, _1232), 0.0);
        float _1267 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1234.x + (-0.5));
        float _1269 = _1267 * (_1234.y + (-0.5));
        float _1270 = _1267 * (_1234.z + (-0.5));
        float _1277 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1241.x + (-0.5));
        float _1279 = _1277 * (_1241.y + (-0.5));
        float _1280 = _1277 * (_1241.z + (-0.5));
        float _1287 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1248.x + (-0.5));
        float _1289 = _1287 * (_1248.y + (-0.5));
        float _1290 = _1287 * (_1248.z + (-0.5));
        float _1297 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1255.x + (-0.5));
        float _1299 = _1297 * (_1255.y + (-0.5));
        float _1300 = _1297 * (_1255.z + (-0.5));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = _1268 * 0.5;
        float _1305 = _1278 * 0.5;
        float _1306 = _1288 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_636, _637, _638), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _3552 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1331 + 1.0))) + _1336) * _1301;
        float _1346 = _1269 * 0.5;
        float _1347 = _1279 * 0.5;
        float _1348 = _1289 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_636, _637, _638), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _3563 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3574 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _3585 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) * (_1373 + 1.0))) + _1378) * _1302;
        float _1388 = _1270 * 0.5;
        float _1389 = _1280 * 0.5;
        float _1390 = _1290 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1404 = (dot(vec3(_636, _637, _638), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1413 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _3618 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1415 + 1.0))) + _1420) * _1303;
        _1437 = _1270;
        _1438 = _1269;
        _1439 = _1268;
        _1440 = _1280;
        _1441 = _1279;
        _1442 = _1278;
        _1443 = _1290;
        _1444 = _1289;
        _1445 = _1288;
        _1446 = _1303;
        _1447 = _1302;
        _1448 = _1301;
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
    }
    else
    {
        _1437 = _1128;
        _1438 = _1128;
        _1439 = _1128;
        _1440 = _1128;
        _1441 = _1128;
        _1442 = _1128;
        _1443 = _1128;
        _1444 = _1128;
        _1445 = _1128;
        _1446 = _1128;
        _1447 = _1128;
        _1448 = _1128;
        _1449 = 0.0;
        _1450 = 0.0;
        _1451 = 0.0;
    }
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1484 = fma(_1463, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1461 * cbSceneParam._m0[89u].x));
    float _1487 = fma(_1463, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1461 * cbSceneParam._m0[90u].x));
    float _1490 = fma(_1463, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1461));
    float _1505 = _762 * 0.5;
    float _1506 = _763 * 0.5;
    float _1507 = _764 * 0.5;
    float _1508 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1511 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1514 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1548;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1521 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1127, _1131, _1134, _1137));
        float _1525 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1529 = dot(vec4(_1505, _1506, _1507, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1536 = dot(vec4(cbModelParam._m0[39u]), vec4(_1505, _1506, _1507, 1.0));
        _1548 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1536) ? 0.0 : (isnan(0.0) ? _1536 : max(0.0, _1536))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1548 = 1.0;
    }
    float _1559;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1550 = dot(vec4(cbModelParam._m0[40u]), vec4(_1505, _1506, _1507, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)), isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1563 = (_1559 * cbModelParam._m0[1u].x) + (_1548 * (1.0 - cbModelParam._m0[1u].x));
    float _1573 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1574 = isnan(_1573) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1573 : min(cbModelParam._m0[25u].z, _1573));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_764, cbModelParam._m0[13u].z, fma(_763, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _762));
        float _1636 = fma(_764, cbModelParam._m0[14u].z, fma(_763, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _762));
        float _1639 = fma(_764, cbModelParam._m0[15u].z, fma(_763, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _762));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1667 = frontier_phi_38_36_ladder;
        }
        float _2049;
        if (_1636 > 0.0)
        {
            _2049 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2049 = frontier_phi_47_43_ladder;
        }
        float _2349;
        if (_1639 > 0.0)
        {
            _2349 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2349 = frontier_phi_61_54_ladder;
        }
        float _2351 = isnan(_2049) ? _1667 : (isnan(_1667) ? _2049 : min(_1667, _2049));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1633) + _1622;
        float _2357 = (_2352 * _1636) + _1626;
        float _2358 = (_2352 * _1639) + _1630;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2360 = (-1.0) - _2359;
        float _2362 = _2359 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2358 > _2362) || ((_2358 < _2360) || ((_2357 > _2362) || ((_2357 < _2360) || ((_2356 < _2360) || (_2356 > _2362))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1574);
            frontier_phi_37_61_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_37_61_ladder_2;
        _1657 = frontier_phi_37_61_ladder_1;
        _1659 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_762, _763, _764), _1574);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1752;
    float _1754;
    float _1756;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1716 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1720 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1724 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1727 = fma(_764, cbModelParam._m0[21u].z, fma(_763, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _762));
        float _1730 = fma(_764, cbModelParam._m0[22u].z, fma(_763, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _762));
        float _1733 = fma(_764, cbModelParam._m0[23u].z, fma(_763, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _762));
        float _2054;
        if (_1727 > 0.0)
        {
            _2054 = abs((1.0 - _1716) / _1727);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1716 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2054 = frontier_phi_49_45_ladder;
        }
        float _2375;
        if (_1730 > 0.0)
        {
            _2375 = abs((1.0 - _1720) / _1730);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1720 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2375 = frontier_phi_63_56_ladder;
        }
        float _2544;
        if (_1733 > 0.0)
        {
            _2544 = abs((1.0 - _1724) / _1733);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1724 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2544 = frontier_phi_77_72_ladder;
        }
        float _2546 = isnan(_2375) ? _2054 : (isnan(_2054) ? _2375 : min(_2054, _2375));
        float _2547 = isnan(_2544) ? _2546 : (isnan(_2546) ? _2544 : min(_2546, _2544));
        float _2551 = (_2547 * _1727) + _1716;
        float _2552 = (_2547 * _1730) + _1720;
        float _2553 = (_2547 * _1733) + _1724;
        float _2554 = _2547 * 9.9999997473787516355514526367188e-05;
        float _2555 = (-1.0) - _2554;
        float _2557 = _2554 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2553 > _2557) || ((_2553 < _2555) || ((_2552 > _2557) || ((_2552 < _2555) || ((_2551 < _2555) || (_2551 > _2557))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2553, cbModelParam._m0[17u].z, fma(_2552, cbModelParam._m0[17u].y, _2551 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2553, cbModelParam._m0[18u].z, fma(_2552, cbModelParam._m0[18u].y, _2551 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2553, cbModelParam._m0[19u].z, fma(_2552, cbModelParam._m0[19u].y, _2551 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_46_77_ladder = _2786.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2786.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2786.x * cbModelParam._m0[1u].z;
        }
        _1752 = frontier_phi_46_77_ladder_2;
        _1754 = frontier_phi_46_77_ladder_1;
        _1756 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_762, _763, _764), _1664);
        _1752 = _1736.x * cbModelParam._m0[1u].z;
        _1754 = _1736.y * cbModelParam._m0[1u].z;
        _1756 = _1736.z * cbModelParam._m0[1u].z;
    }
    float _1769 = (((_789 * _739) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1752 - _1655)) + _1655);
    float _1771 = (((_789 * _741) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1754 - _1657)) + _1657);
    float _1773 = (((_789 * _742) + _790) * _754) * ((cbModelParam._m0[1u].w * (_1756 - _1659)) + _1659);
    float _1776 = fma(_1773, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1769 * cbSceneParam._m0[89u].x));
    float _1779 = fma(_1773, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1769 * cbSceneParam._m0[90u].x));
    float _1782 = fma(_1773, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1769 * cbSceneParam._m0[91u].x));
    vec4 _1790 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_672, _673));
    float _1792 = _1790.w;
    float _1804 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1792);
    float _1805 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1792);
    float _1806 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1792);
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1818 = _754 + (-1.0);
    float _1821 = (cbLight._m0[_1813].x * _1818) + 1.0;
    float _1822 = (cbLight._m0[_1813].y * _1818) + 1.0;
    uint _1823 = _1812 + 5u;
    float _1829 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1833 = _1812 + 4u;
    float _1842 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1846 = _1812 | 1u;
    float _1857 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_636, _637, _638));
    float _1860 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_636, _637, _638));
    float _3754 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _3765 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1865 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * 0.3183098733425140380859375;
    float _1867 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * 0.3183098733425140380859375;
    float _1874 = ((cbLight._m0[_1823].x * _1829) * _1867) + (((cbLight._m0[_1833].x * _1804) * _1842) * _1865);
    float _1875 = ((_1829 * cbLight._m0[_1823].y) * _1867) + (((cbLight._m0[_1833].y * _1805) * _1842) * _1865);
    float _1876 = ((_1829 * cbLight._m0[_1823].z) * _1867) + (((cbLight._m0[_1833].z * _1806) * _1842) * _1865);
    uint _1878 = _1812 + 8u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1812].w)) * _639) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1812].x + _664;
    float _1894 = cbLight._m0[_1812].y + _665;
    float _1895 = cbLight._m0[_1812].z + _666;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1812].xyz));
    float _3776 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _1907 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _1908 = dot(vec3(_636, _637, _638), vec3(_1900, _1901, _1902));
    float _3798 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1900, _1901, _1902));
    float _3809 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1892 * _1892;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1928 = exp2(log2(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * 5.0);
    float _1929 = 0.959999978542327880859375 - _736;
    float _1931 = 0.959999978542327880859375 - _737;
    float _1932 = 0.959999978542327880859375 - _738;
    float _1939 = 1.0 - _1892;
    float _1950 = (0.5 / (((_1907 * ((_1906 * _1939) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _1939) + _1892) * _1906))) * _1906;
    float _3820 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _1952 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    uint _1966 = _1812 + 9u;
    float _1977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _639) * 0.949999988079071044921875);
    float _1978 = _1977 * _1977;
    float _1979 = cbLight._m0[_1846].x + _664;
    float _1980 = cbLight._m0[_1846].y + _665;
    float _1981 = cbLight._m0[_1846].z + _666;
    float _1985 = inversesqrt(dot(vec3(_1979, _1980, _1981), vec3(_1979, _1980, _1981)));
    float _1986 = _1985 * _1979;
    float _1987 = _1985 * _1980;
    float _1988 = _1985 * _1981;
    float _1989 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1846].xyz));
    float _3831 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1992 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _1993 = dot(vec3(_636, _637, _638), vec3(_1986, _1987, _1988));
    float _3842 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1996 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _1997 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_1986, _1987, _1988));
    float _3853 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2001 = _1978 * _1978;
    float _2005 = ((_1996 * _1996) * (_2001 + (-1.0))) + 1.0;
    float _2012 = exp2(log2(1.0 - (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) * 5.0);
    float _2019 = 1.0 - _1978;
    float _2029 = (0.5 / (((_1907 * ((_1992 * _2019) + _1978)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2019) + _1978) * _1992))) * _1992;
    float _3864 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2031 = (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_2001 / ((_2005 * _2005) * 3.141590118408203125));
    float _2041 = (((((_2012 * _1929) + _739) * cbLight._m0[_1966].x) * _2031) * _1829) + ((((cbLight._m0[_1878].x * _1804) * ((_1928 * _1929) + _739)) * _1952) * _1842);
    float _2042 = (((((_2012 * _1931) + _741) * cbLight._m0[_1966].y) * _2031) * _1829) + ((((cbLight._m0[_1878].y * _1805) * ((_1928 * _1931) + _741)) * _1952) * _1842);
    float _2043 = (((((_2012 * _1932) + _742) * cbLight._m0[_1966].z) * _2031) * _1829) + ((((cbLight._m0[_1878].z * _1806) * ((_1928 * _1932) + _742)) * _1952) * _1842);
    float _2158;
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    if (_1810.y == 0u)
    {
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2099 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2098;
        float _2100 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2098;
        float _2101 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2098;
        uvec4 _2113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2114 = _2113.x;
        uint _2125 = uint((float(_2113.y) * floor(float(uint(cbSceneParam._m0[85u].y * _673) / _2114))) + floor(float(uint(cbSceneParam._m0[85u].x * _672) / _2114)));
        float _2135 = (log2(_2101 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2136 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        uint _2139 = uint(isnan(14.0) ? _2136 : (isnan(_2136) ? 14.0 : min(_2136, 14.0)));
        uvec4 _2144 = texelFetch(g_lightClusterGridBuffer, int(((_2139 << 2u) + (_2125 << 6u)) >> 2u));
        uint _2145 = _2144.x;
        uint _2146 = _2113.z;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        if (((((1u << ((_2146 >> 4u) & 15u)) + 4294967295u) & _2145) == 0u) || ((_2146 & 240u) == 0u))
        {
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
        }
        else
        {
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            uint _2418 = 0u;
            uint _2427;
            bool _2428;
            for (;;)
            {
                _2427 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2418 << 2u)) >> 2u)).x;
                _2428 = _2427 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2428)
                {
                    frontier_phi_74_pred = _2415;
                    frontier_phi_74_pred_1 = _2414;
                    frontier_phi_74_pred_2 = _2413;
                    frontier_phi_74_pred_3 = _2412;
                    frontier_phi_74_pred_4 = _2416;
                    frontier_phi_74_pred_5 = _2417;
                }
                else
                {
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    uint _2593;
                    _2587 = _2412;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2417;
                    _2593 = _2427;
                    float _2493;
                    float _2494;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    for (;;)
                    {
                        uint _2597 = uint(findLSB(_2593)) + (_2418 << 5u);
                        uint _2594 = (_2593 + 4294967295u) & _2593;
                        uint _2599 = _2597 * 48u;
                        vec4 _2613 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2599)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 3u)).x));
                        uint _2619 = (_2597 * 48u) + 4u;
                        vec4 _2632 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2619)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2619 + 3u)).x));
                        uint _2638 = (_2597 * 48u) + 8u;
                        vec3 _2649 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x));
                        float _2653 = _2613.x - _2099;
                        float _2654 = _2613.y - _2100;
                        float _2655 = _2613.z - _2101;
                        float _2656 = dot(vec3(_2653, _2654, _2655), vec3(_2653, _2654, _2655));
                        float _2659 = inversesqrt(_2656);
                        float _2660 = _2659 * _2653;
                        float _2661 = _2659 * _2654;
                        float _2662 = _2659 * _2655;
                        float _2663 = dot(vec3(_694, _697, _700), vec3(_2660, _2661, _2662));
                        float _2668 = 1.0 - (_2656 * _2613.w);
                        float _3885 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2669 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2670 = sqrt(_2656) * _2632.w;
                        float _2673 = 1.39999997615814208984375 / (_2670 + 1.39999997615814208984375);
                        float _2674 = _2673 * _2673;
                        float _2677 = ((1.0 - _2674) * _2663) + _2674;
                        float _2680 = _2670 * _2670;
                        float _2684 = ((isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))) * _2669) / ((_2680 * 0.699999988079071044921875) + 1.0);
                        float _2688 = (-0.0) - _2099;
                        float _2689 = (-0.0) - _2100;
                        float _2690 = (-0.0) - _2101;
                        float _2694 = inversesqrt(dot(vec3(_2688, _2689, _2690), vec3(_2688, _2689, _2690)));
                        float _2695 = _2694 * _2688;
                        float _2696 = _2694 * _2689;
                        float _2697 = _2694 * _2690;
                        float _2705 = exp2(log2(1.0 / ((_2680 * 3.5) + 5.0)) * 0.25);
                        float _2706 = 1.0 - _770;
                        float _2713 = sqrt(1.0 - ((1.0 - (_2706 * _2706)) * (1.0 - (_2705 * _2705))));
                        float _2714 = _2713 * _2713;
                        float _2715 = _2714 * _2714;
                        float _2716 = _2695 + _2660;
                        float _2717 = _2696 + _2661;
                        float _2718 = _2697 + _2662;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2726 = dot(vec3(_694, _697, _700), vec3(_2695, _2696, _2697));
                        float _3901 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2729 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2730 = dot(vec3(_694, _697, _700), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718));
                        float _3912 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2733 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2737 = ((_2733 * _2733) * (_2715 + (-1.0))) + 1.0;
                        float _2738 = _2673 * _2714;
                        float _2739 = _2738 * _2738;
                        float _2742 = ((1.0 - _2739) * _2663) + _2739;
                        float _3923 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2744 = 1.0 - _2714;
                        float _2754 = (0.5 / (((_2743 * ((_2729 * _2744) + _2714)) + 9.9999999392252902907785028219223e-09) + (((_2743 * _2744) + _2714) * _2729))) * _2743;
                        float _3934 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2765 = (((_2715 * 3.1415927410125732421875) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) / ((_2737 * _2737) * ((_2680 * 2.1991131305694580078125) + 3.141590118408203125))) * _2669;
                        _2496 = (_2684 * _2632.x) + _2590;
                        _2497 = (_2684 * _2632.y) + _2591;
                        _2498 = (_2684 * _2632.z) + _2592;
                        _2493 = (_2765 * _2649.x) + _2587;
                        _2494 = (_2765 * _2649.y) + _2588;
                        _2495 = (_2765 * _2649.z) + _2589;
                        if (_2594 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2587 = _2493;
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2498;
                            _2593 = _2594;
                        }
                    }
                    frontier_phi_74_pred = _2496;
                    frontier_phi_74_pred_1 = _2495;
                    frontier_phi_74_pred_2 = _2494;
                    frontier_phi_74_pred_3 = _2493;
                    frontier_phi_74_pred_4 = _2497;
                    frontier_phi_74_pred_5 = _2498;
                }
                _2243 = frontier_phi_74_pred;
                _2241 = frontier_phi_74_pred_1;
                _2239 = frontier_phi_74_pred_2;
                _2237 = frontier_phi_74_pred_3;
                _2245 = frontier_phi_74_pred_4;
                _2247 = frontier_phi_74_pred_5;
                uint _2419 = _2418 + 1u;
                if (_2419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2412 = _2237;
                    _2413 = _2239;
                    _2414 = _2241;
                    _2415 = _2243;
                    _2416 = _2245;
                    _2417 = _2247;
                    _2418 = _2419;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
        }
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.z;
        uint _2253 = (_2251 >> 8u) & 15u;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        if (((4294967295u << _2253) & _2145) == 0u)
        {
            _2380 = _2236;
            _2382 = _2238;
            _2384 = _2240;
            _2386 = _2242;
            _2388 = _2244;
            _2390 = _2246;
        }
        else
        {
            float _2405 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
            float _2406 = _2405 * _2099;
            float _2407 = _2405 * _2100;
            float _2408 = _2405 * _2101;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2253 < ((_2251 >> 12u) & 15u))
            {
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2570 = _2236;
                float _2571 = _2238;
                float _2572 = _2240;
                float _2573 = _2242;
                float _2574 = _2244;
                float _2575 = _2246;
                uint _2576 = _2253;
                uint _2585;
                bool _2586;
                for (;;)
                {
                    _2585 = texelFetch(g_lightClassification, int((((_2139 << 5u) + (_2125 << 9u)) + (_2576 << 2u)) >> 2u)).x;
                    _2586 = _2585 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2586)
                    {
                        frontier_phi_83_pred = _2573;
                        frontier_phi_83_pred_1 = _2572;
                        frontier_phi_83_pred_2 = _2571;
                        frontier_phi_83_pred_3 = _2570;
                        frontier_phi_83_pred_4 = _2575;
                        frontier_phi_83_pred_5 = _2574;
                    }
                    else
                    {
                        float _2791;
                        float _2792;
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _2804 = _2570;
                        float _2805 = _2571;
                        float _2806 = _2572;
                        float _2807 = _2573;
                        float _2808 = _2574;
                        float _2809 = _2575;
                        uint _2810 = _2585;
                        uint _2811;
                        vec4 _2836;
                        float _2837;
                        vec4 _2852;
                        vec3 _2864;
                        vec4 _2879;
                        vec4 _2894;
                        float _2940;
                        bool _2941;
                        for (;;)
                        {
                            uint _2821 = ((_2576 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2810));
                            _2811 = (_2810 + 4294967295u) & _2810;
                            uint _2823 = _2821 * 40u;
                            _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            _2837 = _2836.w;
                            uint _2839 = (_2821 * 40u) + 4u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            uint _2854 = (_2821 * 40u) + 8u;
                            _2864 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2854)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2854 + 2u)).x));
                            uint _2866 = (_2821 * 40u) + 16u;
                            _2879 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2866)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2866 + 3u)).x));
                            uint _2881 = (_2821 * 40u) + 20u;
                            _2894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2881 + 3u)).x));
                            uint _2896 = (_2821 * 40u) + 24u;
                            vec4 _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2915 = (_2821 * 40u) + 28u;
                            vec4 _2928 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2915)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2915 + 3u)).x));
                            _2940 = fma(_2101, _2928.z, fma(_2100, _2928.y, _2928.x * _2099)) + _2928.w;
                            _2941 = !((fma(_2101, _2909.z, fma(_2100, _2909.y, _2909.x * _2099)) + _2909.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2941)
                            {
                                float _2968 = _2836.x - _2099;
                                float _2969 = _2836.y - _2100;
                                float _2970 = _2836.z - _2101;
                                float _2971 = dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970));
                                float _2974 = inversesqrt(_2971);
                                float _2975 = _2974 * _2968;
                                float _2976 = _2974 * _2969;
                                float _2977 = _2974 * _2970;
                                float _2981 = 1.0 - (_2971 / (_2837 * _2837));
                                float _3945 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2982 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2986 = sqrt(_2971) * _2852.w;
                                float _2988 = 1.39999997615814208984375 / (_2986 + 1.39999997615814208984375);
                                float _2989 = _2988 * _2988;
                                float _2992 = ((1.0 - _2989) * dot(vec3(_2975, _2976, _2977), vec3(_694, _697, _700))) + _2989;
                                float _2995 = _2986 * _2986;
                                float _2999 = (fma(_2101, _2879.z, fma(_2100, _2879.y, _2879.x * _2099)) + _2879.w) / _2940;
                                float _3000 = (fma(_2101, _2894.z, fma(_2100, _2894.y, _2894.x * _2099)) + _2894.w) / _2940;
                                float _3004 = 1.0 - dot(vec2(_2999, _3000), vec2(_2999, _3000));
                                float _3961 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _3006 = _3005 * (((isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0))) * _2982) / ((_2995 * 0.699999988079071044921875) + 1.0));
                                float _3018 = exp2(log2(1.0 / ((_2995 * 3.5) + 5.0)) * 0.25);
                                float _3019 = 1.0 - _770;
                                float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                                float _3027 = _3026 * _3026;
                                float _3028 = _3027 * _3027;
                                float _3029 = _2975 - _2406;
                                float _3030 = _2976 - _2407;
                                float _3031 = _2977 - _2408;
                                float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                                float _3039 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2406, (-0.0) - _2407, (-0.0) - _2408));
                                float _3972 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3042 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _3043 = dot(vec3(_694, _697, _700), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                                float _3983 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3046 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                                float _3051 = _2988 * _3027;
                                float _3052 = _3051 * _3051;
                                float _3058 = ((1.0 - _3052) * dot(vec3(_694, _697, _700), vec3(_2975, _2976, _2977))) + _3052;
                                float _3994 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3059 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _3060 = 1.0 - _3027;
                                float _3070 = (0.5 / (((_3059 * ((_3042 * _3060) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3059 * _3060) + _3027) * _3042))) * _3059;
                                float _4005 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3080 = (_3005 * _2982) * (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_3050 * _3050) * ((_2995 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3006 * _2852.x;
                                frontier_phi_89_pred_1 = _3080 * _2864.z;
                                frontier_phi_89_pred_2 = _3080 * _2864.y;
                                frontier_phi_89_pred_3 = _3080 * _2864.x;
                                frontier_phi_89_pred_4 = _3006 * _2852.z;
                                frontier_phi_89_pred_5 = _3006 * _2852.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3087 = frontier_phi_89_pred;
                            _3086 = frontier_phi_89_pred_1;
                            _3085 = frontier_phi_89_pred_2;
                            _3084 = frontier_phi_89_pred_3;
                            _3089 = frontier_phi_89_pred_4;
                            _3088 = frontier_phi_89_pred_5;
                            _2794 = _3087 + _2807;
                            _2795 = _3088 + _2808;
                            _2796 = _3089 + _2809;
                            _2791 = _3084 + _2804;
                            _2792 = _3085 + _2805;
                            _2793 = _3086 + _2806;
                            if (_2811 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2811;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2794;
                        frontier_phi_83_pred_1 = _2793;
                        frontier_phi_83_pred_2 = _2792;
                        frontier_phi_83_pred_3 = _2791;
                        frontier_phi_83_pred_4 = _2796;
                        frontier_phi_83_pred_5 = _2795;
                    }
                    _2387 = frontier_phi_83_pred;
                    _2385 = frontier_phi_83_pred_1;
                    _2383 = frontier_phi_83_pred_2;
                    _2381 = frontier_phi_83_pred_3;
                    _2391 = frontier_phi_83_pred_4;
                    _2389 = frontier_phi_83_pred_5;
                    uint _2577 = _2576 + 1u;
                    if (_2577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2570 = _2381;
                        _2571 = _2383;
                        _2572 = _2385;
                        _2573 = _2387;
                        _2574 = _2389;
                        _2575 = _2391;
                        _2576 = _2577;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2391;
                frontier_phi_65_66_ladder_1 = _2389;
                frontier_phi_65_66_ladder_2 = _2385;
                frontier_phi_65_66_ladder_3 = _2383;
                frontier_phi_65_66_ladder_4 = _2387;
                frontier_phi_65_66_ladder_5 = _2381;
            }
            else
            {
                frontier_phi_65_66_ladder = _2246;
                frontier_phi_65_66_ladder_1 = _2244;
                frontier_phi_65_66_ladder_2 = _2240;
                frontier_phi_65_66_ladder_3 = _2238;
                frontier_phi_65_66_ladder_4 = _2242;
                frontier_phi_65_66_ladder_5 = _2236;
            }
            _2380 = frontier_phi_65_66_ladder_5;
            _2382 = frontier_phi_65_66_ladder_3;
            _2384 = frontier_phi_65_66_ladder_2;
            _2386 = frontier_phi_65_66_ladder_4;
            _2388 = frontier_phi_65_66_ladder_1;
            _2390 = frontier_phi_65_66_ladder;
        }
        float _2395 = isnan(1.0) ? _754 : (isnan(_754) ? 1.0 : min(_754, 1.0));
        _2158 = (_2395 * _2386) + _1874;
        _2160 = (_2395 * _2388) + _1875;
        _2162 = (_2395 * _2390) + _1876;
        _2164 = ((_2380 * _739) * _2395) + _2041;
        _2166 = ((_2382 * _741) * _2395) + _2042;
        _2168 = ((_2384 * _742) * _2395) + _2043;
    }
    else
    {
        _2158 = _1874;
        _2160 = _1875;
        _2162 = _1876;
        _2164 = _2041;
        _2166 = _2042;
        _2168 = _2043;
    }
    float _4021 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4032 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4043 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2185 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2158 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _754))) + ((_2164 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2186 = ((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2160 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _754))) + ((_2166 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    float _2187 = ((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2162 + ((isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))) * _754))) + ((_2168 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1563)) * cbPerFrame._m0[3u].x);
    uint _2191 = _713 + 6u;
    float _2199 = _672 / cbSceneParam._m0[86u].x;
    float _2200 = _673 / cbSceneParam._m0[86u].y;
    vec4 _2214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, (log2((isnan(cbSceneParam._m0[77u].w) ? _659 : (isnan(_659) ? cbSceneParam._m0[77u].w : min(_659, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2216 = _2214.x;
    float _2217 = _2214.y;
    float _2218 = _2214.z;
    float _2219 = _2214.w;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_659 > cbSceneParam._m0[78u].w)
    {
        float _2261 = isnan(_659) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _659 : min(cbSceneParam._m0[80u].w, _659));
        float _2262 = _2261 / _659;
        float _2273 = _2262 * _261;
        float _2274 = _262 * _2262;
        float _2275 = (-0.0) - _2274;
        float _2276 = _2262 * _263;
        float _2278 = (cbSceneParam._m0[77u].w * _2275) / _2261;
        float _2279 = _2278 + cbSceneParam._m0[79u].w;
        float _2280 = cbSceneParam._m0[79u].w - _2274;
        float _2286 = sqrt(((_2273 * _2273) + (_2274 * _2274)) + (_2276 * _2276));
        float _2289 = (1.0 - (cbSceneParam._m0[77u].w / _2261)) * _2286;
        float _2295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2506;
        if (abs((_2275 - _2278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2506 = ((((_2279 > 0.0) ? exp2(_2295 * _2279) : (2.0 - exp2(_2297 * _2279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2289;
        }
        else
        {
            float _2441 = 1.0 / cbSceneParam._m0[80u].x;
            float _2442 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : max(_2279, _2280));
            float _2443 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : min(_2279, _2280));
            float _2452 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : min(_2442, 0.0));
            float _2453 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : min(_2443, 0.0));
            _2506 = ((abs(_2286 / _2275) * cbSceneParam._m0[80u].y) * ((((_2452 - _2453) * 2.0) - ((exp2(_2295 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0)))) - exp2(_2295 * (isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0))))) * _2441)) - ((exp2(_2297 * _2452) - exp2(_2297 * _2453)) * _2441))) + (_2289 * cbSceneParam._m0[80u].z);
        }
        vec4 _2508 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, 1.0), 0.0);
        float _2517 = exp2((_2506 * (-1.44269502162933349609375)) * (1.0 - _2508.w));
        float _2518 = log2(_2517);
        float _2534 = log2(_2219);
        _2299 = (exp2(_2534 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].x)) * _2508.x) / cbSceneParam._m0[78u].x)) + _2216;
        _2301 = (exp2(_2534 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].y)) * _2508.y) / cbSceneParam._m0[78u].y)) + _2217;
        _2303 = (exp2(_2534 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2518 * cbSceneParam._m0[78u].z)) * _2508.z) / cbSceneParam._m0[78u].z)) + _2218;
        _2305 = _2517 * _2219;
    }
    else
    {
        _2299 = _2216;
        _2301 = _2217;
        _2303 = _2218;
        _2305 = _2219;
    }
    float _2317 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2318 = _2317 == 3.0;
    float _2319 = log2(_2305);
    float _2326 = exp2(_2319 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0)));
    float _2327 = exp2(_2319 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0)));
    float _2328 = exp2(_2319 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0)));
    float _2337 = (_2317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2337 * (_2318 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2299)));
    SV_Target.y = _2337 * (_2318 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.z = _2337 * (_2318 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.w = cbInstanceData._m0[_2191].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2191].w;
}


