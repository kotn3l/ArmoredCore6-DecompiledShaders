#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1168;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    vec4 _323 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _327 = _323.z;
    float _350 = (_323.x * 2.0) + (-1.0);
    float _352 = (_323.y * 2.0) + (-1.0);
    float _355 = _350 - (_350 * _288);
    float _356 = _352 - (_352 * _288);
    float _365 = cbMtdParam._m0[22u].y + _261;
    float _366 = cbMtdParam._m0[22u].z + _262;
    float _367 = cbMtdParam._m0[22u].w + _263;
    float _381 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_190, _191, _192));
    float _382 = (-0.0) - dot(vec3(_365, _366, _367), vec3(_204, _205, _206));
    float _383 = (-0.0) - dot(vec3(_365, _366, _367), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _390 = _387 * _383;
    float _391 = (_387 * _381) + (_355 * cbMtdParam._m0[20u].y);
    float _392 = (_387 * _382) + (_356 * cbMtdParam._m0[20u].z);
    float _393 = _391 * cbMtdParam._m0[19u].x;
    float _394 = _392 * cbMtdParam._m0[18u].w;
    float _395 = fract(TEXCOORD.x);
    float _396 = fract(TEXCOORD.y);
    float _402;
    if (_393 > 0.0)
    {
        _402 = (1.0 - _395) / _393;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_393 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _395) / _393;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _402 = frontier_phi_3_2_ladder;
    }
    float _410;
    if (_394 > 0.0)
    {
        _410 = (1.0 - _396) / _394;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_394 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _396) / _394;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _410 = frontier_phi_7_6_ladder;
    }
    bool _412 = _390 > 0.0;
    float _414 = _412 ? (cbMtdParam._m0[15u].x / _390) : 5000.0;
    float _415 = isnan(_410) ? _402 : (isnan(_402) ? _410 : min(_402, _410));
    float _416 = isnan(_414) ? _415 : (isnan(_415) ? _414 : min(_415, _414));
    float _420 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _421 = _395 + (-0.5);
    float _424 = _396 + (-0.5);
    float _427 = ((_416 * _390) + _420) / _420;
    vec4 _452 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_421 + (_416 * _393)) / _427) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_424 + (_416 * _394)) / _427) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _454 = _452.x;
    float _455 = _452.y;
    float _456 = _452.z;
    float _468 = (_454 - (_454 * _288)) * cbMtdParam._m0[9u].x;
    float _469 = (_455 - (_455 * _288)) * cbMtdParam._m0[9u].y;
    float _470 = cbMtdParam._m0[9u].z * (_456 - (_456 * _288));
    float _488 = _391 * cbMtdParam._m0[21u].x;
    float _489 = _392 * cbMtdParam._m0[20u].w;
    bool _490 = _488 > 0.0;
    float _495;
    if (_490)
    {
        _495 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _495 = frontier_phi_11_10_ladder;
    }
    bool _497 = _489 > 0.0;
    float _502;
    if (_497)
    {
        _502 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _502 = frontier_phi_15_14_ladder;
    }
    float _505 = _412 ? (cbMtdParam._m0[16u].z / _390) : 5000.0;
    float _506 = isnan(_502) ? _495 : (isnan(_495) ? _502 : min(_495, _502));
    float _507 = isnan(_505) ? _506 : (isnan(_506) ? _505 : min(_506, _505));
    float _511 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _515 = ((_507 * _390) + _511) / _511;
    float _520 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _522 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _538 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_507 * _488)) / _515) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_507 * _489)) / _515) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _543 = _538.x * cbMtdParam._m0[10u].x;
    float _544 = _538.y * cbMtdParam._m0[10u].y;
    float _545 = _538.z * cbMtdParam._m0[10u].z;
    float _553;
    if (_490)
    {
        _553 = (1.0 - _395) / _488;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_488 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _395) / _488;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _553 = frontier_phi_19_18_ladder;
    }
    float _559;
    if (_497)
    {
        _559 = (1.0 - _396) / _489;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_489 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _396) / _489;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _559 = frontier_phi_23_22_ladder;
    }
    float _561 = isnan(_559) ? _553 : (isnan(_553) ? _559 : min(_553, _559));
    float _562 = isnan(_505) ? _561 : (isnan(_561) ? _505 : min(_561, _505));
    float _569 = ((_562 * _390) + _511) / _511;
    vec4 _583 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_421 + (_562 * _488)) / _569) + 0.5) + _520) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_424 + (_562 * _489)) / _569) + 0.5) + _522) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _585 = _583.w;
    float _587 = _585 - (_585 * _288);
    float _598 = 0.5 - (_288 * 0.5);
    float _608 = (((_468 - _301) + (_587 * ((_543 - _468) - (_543 * _288)))) * _598) + _301;
    float _609 = (((_469 - _303) + (_587 * ((_544 - _469) - (_544 * _288)))) * _598) + _303;
    float _610 = (((_470 - _305) + (_587 * ((_545 - _470) - (_545 * _288)))) * _598) + _305;
    vec4 _622 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _624 = _622.x;
    vec4 _636 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _640 = _636.z;
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3292 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))));
    float _651 = _640 * _288;
    float _658 = (cbMtdParam._m0[15u].w * ((_327 - _651) + ((_640 - _327) * _288))) + _651;
    float _662 = (cbMtdParam._m0[16u].x * _355) + _643;
    float _663 = (cbMtdParam._m0[16u].x * _356) + _644;
    float _666 = fma(_650, _197, fma(_663, _204, _662 * _190));
    float _669 = fma(_650, _198, fma(_663, _205, _662 * _191));
    float _672 = fma(_650, _199, fma(_663, _206, _662 * _192));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3303 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _680 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _3325 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _3336 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _3347 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _684 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _700 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _704 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _705 = _261 * _704;
    float _706 = _262 * _704;
    float _707 = _263 * _704;
    float _713 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _714 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _734 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _737 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _740 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _753 = uint(roundEven(NORMAL.w)) * 13u;
    uint _756 = (_753 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _762 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * cbInstanceData._m0[_756].x;
    float _763 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * cbInstanceData._m0[_756].y;
    float _764 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0)))) * cbInstanceData._m0[_756].z;
    float _3358 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _765 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _766 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
    float _768 = 1.0 - _684;
    float _769 = _765 * _768;
    float _770 = _766 * _768;
    float _771 = _767 * _768;
    float _776 = (_765 + (-0.039999999105930328369140625)) * _684;
    float _777 = (_766 + (-0.039999999105930328369140625)) * _684;
    float _778 = (_767 + (-0.039999999105930328369140625)) * _684;
    float _779 = _776 + 0.039999999105930328369140625;
    float _781 = _777 + 0.039999999105930328369140625;
    float _782 = _778 + 0.039999999105930328369140625;
    vec4 _791 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _713, cbSceneParam._m0[86u].y * _714));
    float _794 = _791.x * TEXCOORD.z;
    float _795 = dot(vec3(_677, _678, _679), vec3(_705, _706, _707));
    float _798 = _795 * 2.0;
    float _802 = (_798 * _677) - _705;
    float _803 = (_798 * _678) - _706;
    float _804 = (_798 * _679) - _707;
    float _808 = abs(dot(vec3(_705, _706, _707), vec3(_677, _678, _679)));
    float _3391 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _810 = sqrt(_680);
    float _823 = exp2((_810 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_810 * 3.0));
    float _829 = (1.0 - _823) * ((_810 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _830 = _823 * _810;
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _866 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1167;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_866, cbModelParam._m0[26u].z, fma(_862, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _858));
        float _898 = fma(_866, cbModelParam._m0[27u].z, fma(_862, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _858));
        float _902 = fma(_866, cbModelParam._m0[28u].z, fma(_862, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _858));
        float _925 = _858 + _677;
        float _926 = _862 + _678;
        float _927 = _866 + _679;
        float _937 = fma(_927, cbModelParam._m0[26u].z, fma(_926, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _925)) - _894;
        float _938 = fma(_927, cbModelParam._m0[27u].z, fma(_926, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _925)) - _898;
        float _939 = fma(_927, cbModelParam._m0[28u].z, fma(_926, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _925)) - _902;
        float _943 = inversesqrt(dot(vec3(_937, _938, _939), vec3(_937, _938, _939)));
        float _956 = ((_943 * _937) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_943 * _938) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_943 * _939) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_956, _957, _958), 0.0);
        float _995 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_961.x + (-0.5));
        float _997 = _995 * (_961.y + (-0.5));
        float _998 = _995 * (_961.z + (-0.5));
        float _1005 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_968.x + (-0.5));
        float _1007 = _1005 * (_968.y + (-0.5));
        float _1008 = _1005 * (_968.z + (-0.5));
        float _1015 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_975.x + (-0.5));
        float _1017 = _1015 * (_975.y + (-0.5));
        float _1018 = _1015 * (_975.z + (-0.5));
        float _1025 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_982.x + (-0.5));
        float _1027 = _1025 * (_982.y + (-0.5));
        float _1028 = _1025 * (_982.z + (-0.5));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = _996 * 0.5;
        float _1033 = _1006 * 0.5;
        float _1034 = _1016 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1049 = (dot(vec3(_677, _678, _679), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3417 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1059 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3428 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3439 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0))) * (_1061 + 1.0))) + _1066) * _1029;
        float _1076 = _997 * 0.5;
        float _1077 = _1007 * 0.5;
        float _1078 = _1017 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_677, _678, _679), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3450 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3461 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3472 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) * (_1103 + 1.0))) + _1108) * _1030;
        float _1118 = _998 * 0.5;
        float _1119 = _1008 * 0.5;
        float _1120 = _1018 * 0.5;
        float _1121 = dot(vec3(_1118, _1119, _1120), vec3(_1118, _1119, _1120));
        float _1126 = (_1121 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1121);
        float _1134 = (dot(vec3(_677, _678, _679), vec3(_1126 * _1118, _1126 * _1119, _1126 * _1120)) + 1.0) * 0.5;
        float _3483 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1143 = sqrt(((_1119 * _1119) + (_1118 * _1118)) + (_1120 * _1120)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3494 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3505 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0))) * (_1145 + 1.0))) + _1150) * _1031;
        _1167 = _998;
        _1169 = _997;
        _1170 = _996;
        _1171 = _1008;
        _1172 = _1007;
        _1173 = _1006;
        _1174 = _1018;
        _1175 = _1017;
        _1176 = _1016;
        _1177 = _1031;
        _1178 = _1030;
        _1179 = _1029;
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
    }
    else
    {
        _1167 = _1168;
        _1169 = _1168;
        _1170 = _1168;
        _1171 = _1168;
        _1172 = _1168;
        _1173 = _1168;
        _1174 = _1168;
        _1175 = _1168;
        _1176 = _1168;
        _1177 = _1168;
        _1178 = _1168;
        _1179 = _1168;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1208 = fma(_866, cbModelParam._m0[30u].z, fma(_862, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _858));
        float _1212 = fma(_866, cbModelParam._m0[31u].z, fma(_862, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _858));
        float _1216 = fma(_866, cbModelParam._m0[32u].z, fma(_862, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _858));
        float _1239 = _858 + _677;
        float _1240 = _862 + _678;
        float _1241 = _866 + _679;
        float _1251 = fma(_1241, cbModelParam._m0[30u].z, fma(_1240, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1239)) - _1208;
        float _1252 = fma(_1241, cbModelParam._m0[31u].z, fma(_1240, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1239)) - _1212;
        float _1253 = fma(_1241, cbModelParam._m0[32u].z, fma(_1240, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1239)) - _1216;
        float _1257 = inversesqrt(dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253)));
        float _1270 = ((_1257 * _1251) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1208 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1271 = ((_1257 * _1252) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1212 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1272 = ((_1257 * _1253) / cbModelParam._m0[35u].z) + ((((((_1216 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1270, _1271, _1272), 0.0);
        float _1307 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1274.x + (-0.5));
        float _1309 = _1307 * (_1274.y + (-0.5));
        float _1310 = _1307 * (_1274.z + (-0.5));
        float _1317 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1281.x + (-0.5));
        float _1319 = _1317 * (_1281.y + (-0.5));
        float _1320 = _1317 * (_1281.z + (-0.5));
        float _1327 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1288.x + (-0.5));
        float _1329 = _1327 * (_1288.y + (-0.5));
        float _1330 = _1327 * (_1288.z + (-0.5));
        float _1337 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1295.x + (-0.5));
        float _1339 = _1337 * (_1295.y + (-0.5));
        float _1340 = _1337 * (_1295.z + (-0.5));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1343 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1344 = _1308 * 0.5;
        float _1345 = _1318 * 0.5;
        float _1346 = _1328 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_677, _678, _679), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3568 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_1371 + 1.0))) + _1376) * _1341;
        float _1386 = _1309 * 0.5;
        float _1387 = _1319 * 0.5;
        float _1388 = _1329 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_677, _678, _679), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1342 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3601 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_1413 + 1.0))) + _1418) * _1342;
        float _1428 = _1310 * 0.5;
        float _1429 = _1320 * 0.5;
        float _1430 = _1330 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_677, _678, _679), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1343 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3634 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_1455 + 1.0))) + _1460) * _1343;
        _1477 = _1310;
        _1478 = _1309;
        _1479 = _1308;
        _1480 = _1320;
        _1481 = _1319;
        _1482 = _1318;
        _1483 = _1330;
        _1484 = _1329;
        _1485 = _1328;
        _1486 = _1343;
        _1487 = _1342;
        _1488 = _1341;
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1490 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1491 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1168;
        _1478 = _1168;
        _1479 = _1168;
        _1480 = _1168;
        _1481 = _1168;
        _1482 = _1168;
        _1483 = _1168;
        _1484 = _1168;
        _1485 = _1168;
        _1486 = _1168;
        _1487 = _1168;
        _1488 = _1168;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1502 = (cbModelParam._m0[1u].x * (_1490 - _1181)) + _1181;
    float _1503 = (cbModelParam._m0[1u].x * (_1491 - _1182)) + _1182;
    float _1524 = fma(_1503, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1501 * cbSceneParam._m0[89u].x));
    float _1527 = fma(_1503, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1501 * cbSceneParam._m0[90u].x));
    float _1530 = fma(_1503, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1501));
    float _1545 = _802 * 0.5;
    float _1546 = _803 * 0.5;
    float _1547 = _804 * 0.5;
    float _1548 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1479, _1482, _1485, _1488));
    float _1551 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1478, _1481, _1484, _1487));
    float _1554 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1588;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1561 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1167, _1171, _1174, _1177));
        float _1565 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1169, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1545, _1546, _1547, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1576 = dot(vec4(cbModelParam._m0[39u]), vec4(_1545, _1546, _1547, 1.0));
        _1588 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1576) ? 0.0 : (isnan(0.0) ? _1576 : max(0.0, _1576))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1588 = 1.0;
    }
    float _1599;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1590 = dot(vec4(cbModelParam._m0[40u]), vec4(_1545, _1546, _1547, 1.0));
        _1599 = dot(vec3(isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)), isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1590) ? 0.0 : (isnan(0.0) ? _1590 : max(0.0, _1590))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1599 = 1.0;
    }
    float _1603 = (_1599 * cbModelParam._m0[1u].x) + (_1588 * (1.0 - cbModelParam._m0[1u].x));
    float _1613 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1614 = isnan(_1613) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1613 : min(cbModelParam._m0[25u].z, _1613));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1662 = fma(_866, cbModelParam._m0[13u].z, fma(_862, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _858)) + cbModelParam._m0[13u].w;
        float _1666 = fma(_866, cbModelParam._m0[14u].z, fma(_862, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _858)) + cbModelParam._m0[14u].w;
        float _1670 = fma(_866, cbModelParam._m0[15u].z, fma(_862, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _858)) + cbModelParam._m0[15u].w;
        float _1673 = fma(_804, cbModelParam._m0[13u].z, fma(_803, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _802));
        float _1676 = fma(_804, cbModelParam._m0[14u].z, fma(_803, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _802));
        float _1679 = fma(_804, cbModelParam._m0[15u].z, fma(_803, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _802));
        float _1707;
        if (_1673 > 0.0)
        {
            _1707 = abs((1.0 - _1662) / _1673);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1662 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1707 = frontier_phi_38_36_ladder;
        }
        float _2065;
        if (_1676 > 0.0)
        {
            _2065 = abs((1.0 - _1666) / _1676);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1666 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2065 = frontier_phi_47_43_ladder;
        }
        float _2365;
        if (_1679 > 0.0)
        {
            _2365 = abs((1.0 - _1670) / _1679);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1670 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2365 = frontier_phi_61_54_ladder;
        }
        float _2367 = isnan(_2065) ? _1707 : (isnan(_1707) ? _2065 : min(_1707, _2065));
        float _2368 = isnan(_2365) ? _2367 : (isnan(_2367) ? _2365 : min(_2367, _2365));
        float _2372 = (_2368 * _1673) + _1662;
        float _2373 = (_2368 * _1676) + _1666;
        float _2374 = (_2368 * _1679) + _1670;
        float _2375 = _2368 * 9.9999997473787516355514526367188e-05;
        float _2376 = (-1.0) - _2375;
        float _2378 = _2375 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2374 > _2378) || ((_2374 < _2376) || ((_2373 > _2378) || ((_2373 < _2376) || ((_2372 < _2376) || (_2372 > _2378))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2374, cbModelParam._m0[9u].z, fma(_2373, cbModelParam._m0[9u].y, _2372 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2374, cbModelParam._m0[10u].z, fma(_2373, cbModelParam._m0[10u].y, _2372 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2374, cbModelParam._m0[11u].z, fma(_2373, cbModelParam._m0[11u].y, _2372 * cbModelParam._m0[11u].x))), _1614);
            frontier_phi_37_61_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1695 = frontier_phi_37_61_ladder_2;
        _1697 = frontier_phi_37_61_ladder_1;
        _1699 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_802, _803, _804), _1614);
        _1695 = _1683.x * cbModelParam._m0[1u].y;
        _1697 = _1683.y * cbModelParam._m0[1u].y;
        _1699 = _1683.z * cbModelParam._m0[1u].y;
    }
    float _1703 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1704 = isnan(_1703) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1703 : min(cbModelParam._m0[25u].w, _1703));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1756 = fma(_866, cbModelParam._m0[21u].z, fma(_862, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _858)) + cbModelParam._m0[21u].w;
        float _1760 = fma(_866, cbModelParam._m0[22u].z, fma(_862, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _858)) + cbModelParam._m0[22u].w;
        float _1764 = fma(_866, cbModelParam._m0[23u].z, fma(_862, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _858)) + cbModelParam._m0[23u].w;
        float _1767 = fma(_804, cbModelParam._m0[21u].z, fma(_803, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _802));
        float _1770 = fma(_804, cbModelParam._m0[22u].z, fma(_803, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _802));
        float _1773 = fma(_804, cbModelParam._m0[23u].z, fma(_803, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _802));
        float _2070;
        if (_1767 > 0.0)
        {
            _2070 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2070 = frontier_phi_49_45_ladder;
        }
        float _2391;
        if (_1770 > 0.0)
        {
            _2391 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2391 = frontier_phi_63_56_ladder;
        }
        float _2560;
        if (_1773 > 0.0)
        {
            _2560 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2560 = frontier_phi_77_72_ladder;
        }
        float _2562 = isnan(_2391) ? _2070 : (isnan(_2070) ? _2391 : min(_2070, _2391));
        float _2563 = isnan(_2560) ? _2562 : (isnan(_2562) ? _2560 : min(_2562, _2560));
        float _2567 = (_2563 * _1767) + _1756;
        float _2568 = (_2563 * _1770) + _1760;
        float _2569 = (_2563 * _1773) + _1764;
        float _2570 = _2563 * 9.9999997473787516355514526367188e-05;
        float _2571 = (-1.0) - _2570;
        float _2573 = _2570 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2569 > _2573) || ((_2569 < _2571) || ((_2568 > _2573) || ((_2568 < _2571) || ((_2567 < _2571) || (_2567 > _2573))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2802 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2569, cbModelParam._m0[17u].z, fma(_2568, cbModelParam._m0[17u].y, _2567 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2569, cbModelParam._m0[18u].z, fma(_2568, cbModelParam._m0[18u].y, _2567 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2569, cbModelParam._m0[19u].z, fma(_2568, cbModelParam._m0[19u].y, _2567 * cbModelParam._m0[19u].x))), _1704);
            frontier_phi_46_77_ladder = _2802.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2802.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2802.x * cbModelParam._m0[1u].z;
        }
        _1792 = frontier_phi_46_77_ladder_2;
        _1794 = frontier_phi_46_77_ladder_1;
        _1796 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_802, _803, _804), _1704);
        _1792 = _1776.x * cbModelParam._m0[1u].z;
        _1794 = _1776.y * cbModelParam._m0[1u].z;
        _1796 = _1776.z * cbModelParam._m0[1u].z;
    }
    float _1809 = (((_829 * _779) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1792 - _1695)) + _1695);
    float _1811 = (((_829 * _781) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1794 - _1697)) + _1697);
    float _1813 = (((_829 * _782) + _830) * _794) * ((cbModelParam._m0[1u].w * (_1796 - _1699)) + _1699);
    float _1816 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1809 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1809 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, _1809 * cbSceneParam._m0[91u].x));
    uvec4 _1832 = floatBitsToUint(cbInstanceData._m0[_753 + 5u]);
    uint _1834 = _1832.x * 14u;
    uint _1835 = _1834 + 13u;
    float _1840 = _794 + (-1.0);
    float _1843 = (cbLight._m0[_1835].x * _1840) + 1.0;
    float _1844 = (cbLight._m0[_1835].y * _1840) + 1.0;
    uint _1845 = _1834 + 5u;
    float _1851 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
    uint _1855 = _1834 + 4u;
    float _1861 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1865 = _1834 | 1u;
    float _1876 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_677, _678, _679));
    float _1879 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_677, _678, _679));
    float _3770 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _3781 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1884 = (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * 0.3183098733425140380859375;
    float _1886 = (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))) * 0.3183098733425140380859375;
    float _1893 = ((cbLight._m0[_1845].x * _1851) * _1886) + ((cbLight._m0[_1855].x * _1861) * _1884);
    float _1894 = ((_1851 * cbLight._m0[_1845].y) * _1886) + ((_1861 * cbLight._m0[_1855].y) * _1884);
    float _1895 = ((_1851 * cbLight._m0[_1845].z) * _1886) + ((_1861 * cbLight._m0[_1855].z) * _1884);
    uint _1897 = _1834 + 8u;
    float _1910 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1834].w)) * _680) * 0.949999988079071044921875);
    float _1911 = _1910 * _1910;
    float _1912 = cbLight._m0[_1834].x + _705;
    float _1913 = cbLight._m0[_1834].y + _706;
    float _1914 = cbLight._m0[_1834].z + _707;
    float _1918 = inversesqrt(dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914)));
    float _1919 = _1918 * _1912;
    float _1920 = _1918 * _1913;
    float _1921 = _1918 * _1914;
    float _1922 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1834].xyz));
    float _3792 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
    float _1925 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _1926 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _1927 = dot(vec3(_677, _678, _679), vec3(_1919, _1920, _1921));
    float _3814 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1834].xyz), vec3(_1919, _1920, _1921));
    float _3825 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1911 * _1911;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1947 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
    float _1948 = 0.959999978542327880859375 - _776;
    float _1950 = 0.959999978542327880859375 - _777;
    float _1951 = 0.959999978542327880859375 - _778;
    float _1958 = 1.0 - _1911;
    float _1969 = (0.5 / (((_1926 * ((_1925 * _1958) + _1911)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _1958) + _1911) * _1925))) * _1925;
    float _3836 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
    float _1971 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    uint _1982 = _1834 + 9u;
    float _1993 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1865].w)) * _680) * 0.949999988079071044921875);
    float _1994 = _1993 * _1993;
    float _1995 = cbLight._m0[_1865].x + _705;
    float _1996 = cbLight._m0[_1865].y + _706;
    float _1997 = cbLight._m0[_1865].z + _707;
    float _2001 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
    float _2002 = _2001 * _1995;
    float _2003 = _2001 * _1996;
    float _2004 = _2001 * _1997;
    float _2005 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1865].xyz));
    float _3847 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _2009 = dot(vec3(_677, _678, _679), vec3(_2002, _2003, _2004));
    float _3858 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _2013 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_2002, _2003, _2004));
    float _3869 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
    float _2017 = _1994 * _1994;
    float _2021 = ((_2012 * _2012) * (_2017 + (-1.0))) + 1.0;
    float _2028 = exp2(log2(1.0 - (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * 5.0);
    float _2035 = 1.0 - _1994;
    float _2045 = (0.5 / (((_1926 * ((_2008 * _2035) + _1994)) + 9.9999999392252902907785028219223e-09) + (((_1926 * _2035) + _1994) * _2008))) * _2008;
    float _3880 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2047 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * (_2017 / ((_2021 * _2021) * 3.141590118408203125));
    float _2057 = (((((_2028 * _1948) + _779) * cbLight._m0[_1982].x) * _2047) * _1851) + (((((_1947 * _1948) + _779) * cbLight._m0[_1897].x) * _1971) * _1861);
    float _2058 = (((((_2028 * _1950) + _781) * cbLight._m0[_1982].y) * _2047) * _1851) + (((((_1947 * _1950) + _781) * cbLight._m0[_1897].y) * _1971) * _1861);
    float _2059 = (((((_2028 * _1951) + _782) * cbLight._m0[_1982].z) * _2047) * _1851) + (((((_1947 * _1951) + _782) * cbLight._m0[_1897].z) * _1971) * _1861);
    float _2174;
    float _2176;
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    if (_1832.y == 0u)
    {
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2115 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2114;
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2114;
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2114;
        uvec4 _2129 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2130 = _2129.x;
        uint _2141 = uint((float(_2129.y) * floor(float(uint(cbSceneParam._m0[85u].y * _714) / _2130))) + floor(float(uint(cbSceneParam._m0[85u].x * _713) / _2130)));
        float _2151 = (log2(_2117 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2152 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        uint _2155 = uint(isnan(14.0) ? _2152 : (isnan(_2152) ? 14.0 : min(_2152, 14.0)));
        uvec4 _2160 = texelFetch(g_lightClusterGridBuffer, int(((_2155 << 2u) + (_2141 << 6u)) >> 2u));
        uint _2161 = _2160.x;
        uint _2162 = _2129.z;
        float _2252;
        float _2254;
        float _2256;
        float _2258;
        float _2260;
        float _2262;
        if (((((1u << ((_2162 >> 4u) & 15u)) + 4294967295u) & _2161) == 0u) || ((_2162 & 240u) == 0u))
        {
            _2252 = 0.0;
            _2254 = 0.0;
            _2256 = 0.0;
            _2258 = 0.0;
            _2260 = 0.0;
            _2262 = 0.0;
        }
        else
        {
            float _2253;
            float _2255;
            float _2257;
            float _2259;
            float _2261;
            float _2263;
            float _2428 = 0.0;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            float _2432 = 0.0;
            float _2433 = 0.0;
            uint _2434 = 0u;
            uint _2443;
            bool _2444;
            for (;;)
            {
                _2443 = texelFetch(g_lightClassification, int((((_2155 << 5u) + (_2141 << 9u)) + (_2434 << 2u)) >> 2u)).x;
                _2444 = _2443 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2444)
                {
                    frontier_phi_74_pred = _2431;
                    frontier_phi_74_pred_1 = _2430;
                    frontier_phi_74_pred_2 = _2429;
                    frontier_phi_74_pred_3 = _2428;
                    frontier_phi_74_pred_4 = _2432;
                    frontier_phi_74_pred_5 = _2433;
                }
                else
                {
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    uint _2609;
                    _2603 = _2428;
                    _2604 = _2429;
                    _2605 = _2430;
                    _2606 = _2431;
                    _2607 = _2432;
                    _2608 = _2433;
                    _2609 = _2443;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    for (;;)
                    {
                        uint _2613 = uint(findLSB(_2609)) + (_2434 << 5u);
                        uint _2610 = (_2609 + 4294967295u) & _2609;
                        uint _2615 = _2613 * 48u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2615)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2615 + 3u)).x));
                        uint _2635 = (_2613 * 48u) + 4u;
                        vec4 _2648 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 3u)).x));
                        uint _2654 = (_2613 * 48u) + 8u;
                        vec3 _2665 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x));
                        float _2669 = _2629.x - _2115;
                        float _2670 = _2629.y - _2116;
                        float _2671 = _2629.z - _2117;
                        float _2672 = dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671));
                        float _2675 = inversesqrt(_2672);
                        float _2676 = _2675 * _2669;
                        float _2677 = _2675 * _2670;
                        float _2678 = _2675 * _2671;
                        float _2679 = dot(vec3(_734, _737, _740), vec3(_2676, _2677, _2678));
                        float _2684 = 1.0 - (_2672 * _2629.w);
                        float _3901 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
                        float _2685 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2686 = sqrt(_2672) * _2648.w;
                        float _2689 = 1.39999997615814208984375 / (_2686 + 1.39999997615814208984375);
                        float _2690 = _2689 * _2689;
                        float _2693 = ((1.0 - _2690) * _2679) + _2690;
                        float _2696 = _2686 * _2686;
                        float _2700 = ((isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0))) * _2685) / ((_2696 * 0.699999988079071044921875) + 1.0);
                        float _2704 = (-0.0) - _2115;
                        float _2705 = (-0.0) - _2116;
                        float _2706 = (-0.0) - _2117;
                        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
                        float _2711 = _2710 * _2704;
                        float _2712 = _2710 * _2705;
                        float _2713 = _2710 * _2706;
                        float _2721 = exp2(log2(1.0 / ((_2696 * 3.5) + 5.0)) * 0.25);
                        float _2722 = 1.0 - _810;
                        float _2729 = sqrt(1.0 - ((1.0 - (_2722 * _2722)) * (1.0 - (_2721 * _2721))));
                        float _2730 = _2729 * _2729;
                        float _2731 = _2730 * _2730;
                        float _2732 = _2711 + _2676;
                        float _2733 = _2712 + _2677;
                        float _2734 = _2713 + _2678;
                        float _2738 = inversesqrt(dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734)));
                        float _2742 = dot(vec3(_734, _737, _740), vec3(_2711, _2712, _2713));
                        float _3917 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2745 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                        float _2746 = dot(vec3(_734, _737, _740), vec3(_2738 * _2732, _2738 * _2733, _2738 * _2734));
                        float _3928 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2749 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                        float _2753 = ((_2749 * _2749) * (_2731 + (-1.0))) + 1.0;
                        float _2754 = _2689 * _2730;
                        float _2755 = _2754 * _2754;
                        float _2758 = ((1.0 - _2755) * _2679) + _2755;
                        float _3939 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                        float _2759 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                        float _2760 = 1.0 - _2730;
                        float _2770 = (0.5 / (((_2759 * ((_2745 * _2760) + _2730)) + 9.9999999392252902907785028219223e-09) + (((_2759 * _2760) + _2730) * _2745))) * _2759;
                        float _3950 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2781 = (((_2731 * 3.1415927410125732421875) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) / ((_2753 * _2753) * ((_2696 * 2.1991131305694580078125) + 3.141590118408203125))) * _2685;
                        _2512 = (_2700 * _2648.x) + _2606;
                        _2513 = (_2700 * _2648.y) + _2607;
                        _2514 = (_2700 * _2648.z) + _2608;
                        _2509 = (_2781 * _2665.x) + _2603;
                        _2510 = (_2781 * _2665.y) + _2604;
                        _2511 = (_2781 * _2665.z) + _2605;
                        if (_2610 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2603 = _2509;
                            _2604 = _2510;
                            _2605 = _2511;
                            _2606 = _2512;
                            _2607 = _2513;
                            _2608 = _2514;
                            _2609 = _2610;
                        }
                    }
                    frontier_phi_74_pred = _2512;
                    frontier_phi_74_pred_1 = _2511;
                    frontier_phi_74_pred_2 = _2510;
                    frontier_phi_74_pred_3 = _2509;
                    frontier_phi_74_pred_4 = _2513;
                    frontier_phi_74_pred_5 = _2514;
                }
                _2259 = frontier_phi_74_pred;
                _2257 = frontier_phi_74_pred_1;
                _2255 = frontier_phi_74_pred_2;
                _2253 = frontier_phi_74_pred_3;
                _2261 = frontier_phi_74_pred_4;
                _2263 = frontier_phi_74_pred_5;
                uint _2435 = _2434 + 1u;
                if (_2435 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2428 = _2253;
                    _2429 = _2255;
                    _2430 = _2257;
                    _2431 = _2259;
                    _2432 = _2261;
                    _2433 = _2263;
                    _2434 = _2435;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2252 = _2253;
            _2254 = _2255;
            _2256 = _2257;
            _2258 = _2259;
            _2260 = _2261;
            _2262 = _2263;
        }
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.z;
        uint _2269 = (_2267 >> 8u) & 15u;
        float _2396;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        if (((4294967295u << _2269) & _2161) == 0u)
        {
            _2396 = _2252;
            _2398 = _2254;
            _2400 = _2256;
            _2402 = _2258;
            _2404 = _2260;
            _2406 = _2262;
        }
        else
        {
            float _2421 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
            float _2422 = _2421 * _2115;
            float _2423 = _2421 * _2116;
            float _2424 = _2421 * _2117;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2269 < ((_2267 >> 12u) & 15u))
            {
                float _2397;
                float _2399;
                float _2401;
                float _2403;
                float _2405;
                float _2407;
                float _2586 = _2252;
                float _2587 = _2254;
                float _2588 = _2256;
                float _2589 = _2258;
                float _2590 = _2260;
                float _2591 = _2262;
                uint _2592 = _2269;
                uint _2601;
                bool _2602;
                for (;;)
                {
                    _2601 = texelFetch(g_lightClassification, int((((_2155 << 5u) + (_2141 << 9u)) + (_2592 << 2u)) >> 2u)).x;
                    _2602 = _2601 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2602)
                    {
                        frontier_phi_83_pred = _2589;
                        frontier_phi_83_pred_1 = _2588;
                        frontier_phi_83_pred_2 = _2587;
                        frontier_phi_83_pred_3 = _2586;
                        frontier_phi_83_pred_4 = _2591;
                        frontier_phi_83_pred_5 = _2590;
                    }
                    else
                    {
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _3100;
                        float _3101;
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _2820 = _2586;
                        float _2821 = _2587;
                        float _2822 = _2588;
                        float _2823 = _2589;
                        float _2824 = _2590;
                        float _2825 = _2591;
                        uint _2826 = _2601;
                        uint _2827;
                        vec4 _2852;
                        float _2853;
                        vec4 _2868;
                        vec3 _2880;
                        vec4 _2895;
                        vec4 _2910;
                        float _2956;
                        bool _2957;
                        for (;;)
                        {
                            uint _2837 = ((_2592 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2826));
                            _2827 = (_2826 + 4294967295u) & _2826;
                            uint _2839 = _2837 * 40u;
                            _2852 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 3u)).x));
                            _2853 = _2852.w;
                            uint _2855 = (_2837 * 40u) + 4u;
                            _2868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2855 + 3u)).x));
                            uint _2870 = (_2837 * 40u) + 8u;
                            _2880 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x));
                            uint _2882 = (_2837 * 40u) + 16u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            uint _2897 = (_2837 * 40u) + 20u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2912 = (_2837 * 40u) + 24u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2931 = (_2837 * 40u) + 28u;
                            vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            _2956 = fma(_2117, _2944.z, fma(_2116, _2944.y, _2944.x * _2115)) + _2944.w;
                            _2957 = !((fma(_2117, _2925.z, fma(_2116, _2925.y, _2925.x * _2115)) + _2925.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2957)
                            {
                                float _2984 = _2852.x - _2115;
                                float _2985 = _2852.y - _2116;
                                float _2986 = _2852.z - _2117;
                                float _2987 = dot(vec3(_2984, _2985, _2986), vec3(_2984, _2985, _2986));
                                float _2990 = inversesqrt(_2987);
                                float _2991 = _2990 * _2984;
                                float _2992 = _2990 * _2985;
                                float _2993 = _2990 * _2986;
                                float _2997 = 1.0 - (_2987 / (_2853 * _2853));
                                float _3961 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _2998 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _3002 = sqrt(_2987) * _2868.w;
                                float _3004 = 1.39999997615814208984375 / (_3002 + 1.39999997615814208984375);
                                float _3005 = _3004 * _3004;
                                float _3008 = ((1.0 - _3005) * dot(vec3(_2991, _2992, _2993), vec3(_734, _737, _740))) + _3005;
                                float _3011 = _3002 * _3002;
                                float _3015 = (fma(_2117, _2895.z, fma(_2116, _2895.y, _2895.x * _2115)) + _2895.w) / _2956;
                                float _3016 = (fma(_2117, _2910.z, fma(_2116, _2910.y, _2910.x * _2115)) + _2910.w) / _2956;
                                float _3020 = 1.0 - dot(vec2(_3015, _3016), vec2(_3015, _3016));
                                float _3977 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                                float _3022 = _3021 * (((isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))) * _2998) / ((_3011 * 0.699999988079071044921875) + 1.0));
                                float _3034 = exp2(log2(1.0 / ((_3011 * 3.5) + 5.0)) * 0.25);
                                float _3035 = 1.0 - _810;
                                float _3042 = sqrt(1.0 - ((1.0 - (_3035 * _3035)) * (1.0 - (_3034 * _3034))));
                                float _3043 = _3042 * _3042;
                                float _3044 = _3043 * _3043;
                                float _3045 = _2991 - _2422;
                                float _3046 = _2992 - _2423;
                                float _3047 = _2993 - _2424;
                                float _3051 = inversesqrt(dot(vec3(_3045, _3046, _3047), vec3(_3045, _3046, _3047)));
                                float _3055 = dot(vec3(_734, _737, _740), vec3((-0.0) - _2422, (-0.0) - _2423, (-0.0) - _2424));
                                float _3988 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
                                float _3059 = dot(vec3(_734, _737, _740), vec3(_3051 * _3045, _3051 * _3046, _3051 * _3047));
                                float _3999 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                                float _3062 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                                float _3066 = ((_3062 * _3062) * (_3044 + (-1.0))) + 1.0;
                                float _3067 = _3004 * _3043;
                                float _3068 = _3067 * _3067;
                                float _3074 = ((1.0 - _3068) * dot(vec3(_734, _737, _740), vec3(_2991, _2992, _2993))) + _3068;
                                float _4010 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                                float _3076 = 1.0 - _3043;
                                float _3086 = (0.5 / (((_3075 * ((_3058 * _3076) + _3043)) + 9.9999999392252902907785028219223e-09) + (((_3075 * _3076) + _3043) * _3058))) * _3075;
                                float _4021 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3096 = (_3021 * _2998) * (((_3044 * 3.1415927410125732421875) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) / ((_3066 * _3066) * ((_3011 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3022 * _2868.x;
                                frontier_phi_89_pred_1 = _3096 * _2880.z;
                                frontier_phi_89_pred_2 = _3096 * _2880.y;
                                frontier_phi_89_pred_3 = _3096 * _2880.x;
                                frontier_phi_89_pred_4 = _3022 * _2868.z;
                                frontier_phi_89_pred_5 = _3022 * _2868.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3103 = frontier_phi_89_pred;
                            _3102 = frontier_phi_89_pred_1;
                            _3101 = frontier_phi_89_pred_2;
                            _3100 = frontier_phi_89_pred_3;
                            _3105 = frontier_phi_89_pred_4;
                            _3104 = frontier_phi_89_pred_5;
                            _2810 = _3103 + _2823;
                            _2811 = _3104 + _2824;
                            _2812 = _3105 + _2825;
                            _2807 = _3100 + _2820;
                            _2808 = _3101 + _2821;
                            _2809 = _3102 + _2822;
                            if (_2827 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2820 = _2807;
                                _2821 = _2808;
                                _2822 = _2809;
                                _2823 = _2810;
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2827;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2810;
                        frontier_phi_83_pred_1 = _2809;
                        frontier_phi_83_pred_2 = _2808;
                        frontier_phi_83_pred_3 = _2807;
                        frontier_phi_83_pred_4 = _2812;
                        frontier_phi_83_pred_5 = _2811;
                    }
                    _2403 = frontier_phi_83_pred;
                    _2401 = frontier_phi_83_pred_1;
                    _2399 = frontier_phi_83_pred_2;
                    _2397 = frontier_phi_83_pred_3;
                    _2407 = frontier_phi_83_pred_4;
                    _2405 = frontier_phi_83_pred_5;
                    uint _2593 = _2592 + 1u;
                    if (_2593 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2586 = _2397;
                        _2587 = _2399;
                        _2588 = _2401;
                        _2589 = _2403;
                        _2590 = _2405;
                        _2591 = _2407;
                        _2592 = _2593;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2407;
                frontier_phi_65_66_ladder_1 = _2405;
                frontier_phi_65_66_ladder_2 = _2401;
                frontier_phi_65_66_ladder_3 = _2399;
                frontier_phi_65_66_ladder_4 = _2403;
                frontier_phi_65_66_ladder_5 = _2397;
            }
            else
            {
                frontier_phi_65_66_ladder = _2262;
                frontier_phi_65_66_ladder_1 = _2260;
                frontier_phi_65_66_ladder_2 = _2256;
                frontier_phi_65_66_ladder_3 = _2254;
                frontier_phi_65_66_ladder_4 = _2258;
                frontier_phi_65_66_ladder_5 = _2252;
            }
            _2396 = frontier_phi_65_66_ladder_5;
            _2398 = frontier_phi_65_66_ladder_3;
            _2400 = frontier_phi_65_66_ladder_2;
            _2402 = frontier_phi_65_66_ladder_4;
            _2404 = frontier_phi_65_66_ladder_1;
            _2406 = frontier_phi_65_66_ladder;
        }
        float _2411 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
        _2174 = (_2411 * _2402) + _1893;
        _2176 = (_2411 * _2404) + _1894;
        _2178 = (_2411 * _2406) + _1895;
        _2180 = ((_2396 * _779) * _2411) + _2057;
        _2182 = ((_2398 * _781) * _2411) + _2058;
        _2184 = ((_2400 * _782) * _2411) + _2059;
    }
    else
    {
        _2174 = _1893;
        _2176 = _1894;
        _2178 = _1895;
        _2180 = _2057;
        _2182 = _2058;
        _2184 = _2059;
    }
    float _4037 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4048 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4059 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2201 = ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_2174 + ((isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0))) * _794))) + ((_2180 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    float _2202 = ((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_2176 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _794))) + ((_2182 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    float _2203 = ((isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_2178 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _794))) + ((_2184 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1603)) * cbPerFrame._m0[3u].x);
    uint _2207 = _753 + 6u;
    float _2215 = _713 / cbSceneParam._m0[86u].x;
    float _2216 = _714 / cbSceneParam._m0[86u].y;
    vec4 _2230 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2215, _2216, (log2((isnan(cbSceneParam._m0[77u].w) ? _700 : (isnan(_700) ? cbSceneParam._m0[77u].w : min(_700, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2232 = _2230.x;
    float _2233 = _2230.y;
    float _2234 = _2230.z;
    float _2235 = _2230.w;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_700 > cbSceneParam._m0[78u].w)
    {
        float _2277 = isnan(_700) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _700 : min(cbSceneParam._m0[80u].w, _700));
        float _2278 = _2277 / _700;
        float _2289 = _2278 * _261;
        float _2290 = _262 * _2278;
        float _2291 = (-0.0) - _2290;
        float _2292 = _2278 * _263;
        float _2294 = (cbSceneParam._m0[77u].w * _2291) / _2277;
        float _2295 = _2294 + cbSceneParam._m0[79u].w;
        float _2296 = cbSceneParam._m0[79u].w - _2290;
        float _2302 = sqrt(((_2289 * _2289) + (_2290 * _2290)) + (_2292 * _2292));
        float _2305 = (1.0 - (cbSceneParam._m0[77u].w / _2277)) * _2302;
        float _2311 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2313 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2522;
        if (abs((_2291 - _2294) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2522 = ((((_2295 > 0.0) ? exp2(_2311 * _2295) : (2.0 - exp2(_2313 * _2295))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2305;
        }
        else
        {
            float _2457 = 1.0 / cbSceneParam._m0[80u].x;
            float _2458 = isnan(_2296) ? _2295 : (isnan(_2295) ? _2296 : max(_2295, _2296));
            float _2459 = isnan(_2296) ? _2295 : (isnan(_2295) ? _2296 : min(_2295, _2296));
            float _2468 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : min(_2458, 0.0));
            float _2469 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : min(_2459, 0.0));
            _2522 = ((abs(_2302 / _2291) * cbSceneParam._m0[80u].y) * ((((_2468 - _2469) * 2.0) - ((exp2(_2311 * (isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0)))) - exp2(_2311 * (isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0))))) * _2457)) - ((exp2(_2313 * _2468) - exp2(_2313 * _2469)) * _2457))) + (_2305 * cbSceneParam._m0[80u].z);
        }
        vec4 _2524 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2215, _2216, 1.0), 0.0);
        float _2533 = exp2((_2522 * (-1.44269502162933349609375)) * (1.0 - _2524.w));
        float _2534 = log2(_2533);
        float _2550 = log2(_2235);
        _2315 = (exp2(_2550 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2534 * cbSceneParam._m0[78u].x)) * _2524.x) / cbSceneParam._m0[78u].x)) + _2232;
        _2317 = (exp2(_2550 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2534 * cbSceneParam._m0[78u].y)) * _2524.y) / cbSceneParam._m0[78u].y)) + _2233;
        _2319 = (exp2(_2550 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2534 * cbSceneParam._m0[78u].z)) * _2524.z) / cbSceneParam._m0[78u].z)) + _2234;
        _2321 = _2533 * _2235;
    }
    else
    {
        _2315 = _2232;
        _2317 = _2233;
        _2319 = _2234;
        _2321 = _2235;
    }
    float _2333 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2334 = _2333 == 3.0;
    float _2335 = log2(_2321);
    float _2342 = exp2(_2335 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0)));
    float _2343 = exp2(_2335 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0)));
    float _2344 = exp2(_2335 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0)));
    float _2353 = (_2333 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2353 * (_2334 ? _2342 : (_2342 + (cbSceneParam._m0[72u].w * _2315)));
    SV_Target.y = _2353 * (_2334 ? _2343 : (_2343 + (cbSceneParam._m0[72u].w * _2317)));
    SV_Target.z = _2353 * (_2334 ? _2344 : (_2344 + (cbSceneParam._m0[72u].w * _2319)));
    SV_Target.w = cbInstanceData._m0[_2207].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2207].w;
}


