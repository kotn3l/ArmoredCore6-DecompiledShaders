#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1071;
float _3212;
float _3213;
float _3214;
float _3215;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _395 = ((_389 * _383) + (_357 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _396 = ((_389 * _384) + (_358 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    float _416 = (_392 > 0.0) ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_397 + (-0.5)) + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_398 + (-0.5)) + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    vec4 _484 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _486 = _484.x;
    vec4 _498 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _502 = _498.z;
    float _505 = (_498.x * 2.0) + (-1.0);
    float _506 = (_498.y * 2.0) + (-1.0);
    float _507 = dot(vec2(_505, _506), vec2(_505, _506));
    float _3234 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))));
    float _513 = _502 * _290;
    float _520 = (cbMtdParam._m0[15u].w * ((_329 - _513) + ((_502 - _329) * _290))) + _513;
    float _524 = (cbMtdParam._m0[16u].x * _357) + _505;
    float _525 = (cbMtdParam._m0[16u].x * _358) + _506;
    float _528 = fma(_512, _199, fma(_525, _206, _524 * _192));
    float _531 = fma(_512, _200, fma(_525, _207, _524 * _193));
    float _534 = fma(_512, _201, fma(_525, _208, _524 * _194));
    float _538 = inversesqrt(dot(vec3(_528, _531, _534), vec3(_528, _531, _534)));
    float _539 = _538 * _528;
    float _540 = _538 * _531;
    float _541 = _538 * _534;
    float _3245 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _542 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
    float _3256 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3267 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3278 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3289 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _546 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _567 = _263 * _566;
    float _568 = _264 * _566;
    float _569 = _265 * _566;
    vec4 _574 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _576 = _574.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _752 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _758 = (cbMatDynParam._m0[5u].x * _752) + cbMatDynParam._m0[5u].y;
        float _3300 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _763 = (cbMatDynParam._m0[5u].z * _752) + cbMatDynParam._m0[5u].w;
        float _3311 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0))) - _759)) + _759) < ((_576 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _589 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _590 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _609 = fma(_541, cbSceneParam._m0[5u].z, fma(_540, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _539));
    float _612 = fma(_541, cbSceneParam._m0[6u].z, fma(_540, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _539));
    float _615 = fma(_541, cbSceneParam._m0[7u].z, fma(_540, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _539));
    uint _628 = uint(roundEven(NORMAL.w)) * 13u;
    uint _630 = _628 + 9u;
    uint _631 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _637 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0)))) * cbInstanceData._m0[_631].x;
    float _638 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0)))) * cbInstanceData._m0[_631].y;
    float _639 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) * cbInstanceData._m0[_631].z;
    float _3322 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _640 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _3333 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _641 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _642 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _643 = 1.0 - _546;
    float _644 = _640 * _643;
    float _645 = _641 * _643;
    float _646 = _642 * _643;
    float _651 = (_640 + (-0.039999999105930328369140625)) * _546;
    float _652 = (_641 + (-0.039999999105930328369140625)) * _546;
    float _653 = (_642 + (-0.039999999105930328369140625)) * _546;
    float _654 = _651 + 0.039999999105930328369140625;
    float _656 = _652 + 0.039999999105930328369140625;
    float _657 = _653 + 0.039999999105930328369140625;
    vec4 _666 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _589, cbSceneParam._m0[86u].y * _590));
    float _669 = _666.x * TEXCOORD.z;
    float _670 = dot(vec3(_539, _540, _541), vec3(_567, _568, _569));
    float _673 = _670 * 2.0;
    float _677 = (_673 * _539) - _567;
    float _678 = (_673 * _540) - _568;
    float _679 = (_673 * _541) - _569;
    float _683 = abs(dot(vec3(_567, _568, _569), vec3(_539, _540, _541)));
    float _3355 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _685 = sqrt(_542);
    float _698 = exp2((_685 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_685 * 3.0));
    float _704 = (1.0 - _698) * ((_685 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _705 = _698 * _685;
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _737 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1070;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    float _1084;
    float _1085;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _797 = fma(_741, cbModelParam._m0[26u].z, fma(_737, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _733));
        float _801 = fma(_741, cbModelParam._m0[27u].z, fma(_737, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _733));
        float _805 = fma(_741, cbModelParam._m0[28u].z, fma(_737, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _733));
        float _828 = _733 + _539;
        float _829 = _737 + _540;
        float _830 = _741 + _541;
        float _840 = fma(_830, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _828)) - _797;
        float _841 = fma(_830, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _828)) - _801;
        float _842 = fma(_830, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _828)) - _805;
        float _846 = inversesqrt(dot(vec3(_840, _841, _842), vec3(_840, _841, _842)));
        float _859 = ((_846 * _840) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_797 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _860 = ((_846 * _841) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_801 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _861 = ((_846 * _842) / cbModelParam._m0[34u].z) + ((((((_805 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_859, _860, _861), 0.0);
        float _898 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_864.x + (-0.5));
        float _900 = _898 * (_864.y + (-0.5));
        float _901 = _898 * (_864.z + (-0.5));
        float _908 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_871.x + (-0.5));
        float _910 = _908 * (_871.y + (-0.5));
        float _911 = _908 * (_871.z + (-0.5));
        float _918 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_878.x + (-0.5));
        float _920 = _918 * (_878.y + (-0.5));
        float _921 = _918 * (_878.z + (-0.5));
        float _928 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _929 = _928 * (_885.x + (-0.5));
        float _930 = _928 * (_885.y + (-0.5));
        float _931 = _928 * (_885.z + (-0.5));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _934 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _935 = _899 * 0.5;
        float _936 = _909 * 0.5;
        float _937 = _919 * 0.5;
        float _938 = dot(vec3(_935, _936, _937), vec3(_935, _936, _937));
        float _943 = (_938 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_938);
        float _952 = (dot(vec3(_539, _540, _541), vec3(_943 * _935, _943 * _936, _943 * _937)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _962 = sqrt(((_936 * _936) + (_935 * _935)) + (_937 * _937)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _964 = _963 * 2.0;
        float _968 = (1.0 - _963) / (_963 + 1.0);
        float _3403 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _978 = ((((1.0 - _969) * (_964 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_964 + 1.0))) + _969) * _932;
        float _979 = _900 * 0.5;
        float _980 = _910 * 0.5;
        float _981 = _920 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_539, _540, _541), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3414 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_933 + 9.9999997473787516355514526367188e-06);
        float _3425 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3436 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) * (_1006 + 1.0))) + _1011) * _933;
        float _1021 = _901 * 0.5;
        float _1022 = _911 * 0.5;
        float _1023 = _921 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_539, _540, _541), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_934 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3469 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1048 + 1.0))) + _1053) * _934;
        _1070 = _901;
        _1072 = _900;
        _1073 = _899;
        _1074 = _911;
        _1075 = _910;
        _1076 = _909;
        _1077 = _921;
        _1078 = _920;
        _1079 = _919;
        _1080 = _934;
        _1081 = _933;
        _1082 = _932;
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)));
        _1084 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1085 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
    }
    else
    {
        _1070 = _1071;
        _1072 = _1071;
        _1073 = _1071;
        _1074 = _1071;
        _1075 = _1071;
        _1076 = _1071;
        _1077 = _1071;
        _1078 = _1071;
        _1079 = _1071;
        _1080 = _1071;
        _1081 = _1071;
        _1082 = _1071;
        _1083 = 0.0;
        _1084 = 0.0;
        _1085 = 0.0;
    }
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1114 = fma(_741, cbModelParam._m0[30u].z, fma(_737, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _733));
        float _1118 = fma(_741, cbModelParam._m0[31u].z, fma(_737, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _733));
        float _1122 = fma(_741, cbModelParam._m0[32u].z, fma(_737, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _733));
        float _1145 = _733 + _539;
        float _1146 = _737 + _540;
        float _1147 = _741 + _541;
        float _1157 = fma(_1147, cbModelParam._m0[30u].z, fma(_1146, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1145)) - _1114;
        float _1158 = fma(_1147, cbModelParam._m0[31u].z, fma(_1146, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1145)) - _1118;
        float _1159 = fma(_1147, cbModelParam._m0[32u].z, fma(_1146, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1145)) - _1122;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1114 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1118 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[35u].z) + ((((((_1122 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1213 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1180.x + (-0.5));
        float _1215 = _1213 * (_1180.y + (-0.5));
        float _1216 = _1213 * (_1180.z + (-0.5));
        float _1223 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1187.x + (-0.5));
        float _1225 = _1223 * (_1187.y + (-0.5));
        float _1226 = _1223 * (_1187.z + (-0.5));
        float _1233 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1194.x + (-0.5));
        float _1235 = _1233 * (_1194.y + (-0.5));
        float _1236 = _1233 * (_1194.z + (-0.5));
        float _1243 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1201.x + (-0.5));
        float _1245 = _1243 * (_1201.y + (-0.5));
        float _1246 = _1243 * (_1201.z + (-0.5));
        float _1247 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = _1214 * 0.5;
        float _1251 = _1224 * 0.5;
        float _1252 = _1234 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_539, _540, _541), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1247 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3532 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1277 + 1.0))) + _1282) * _1247;
        float _1292 = _1215 * 0.5;
        float _1293 = _1225 * 0.5;
        float _1294 = _1235 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_539, _540, _541), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _3565 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1319 + 1.0))) + _1324) * _1248;
        float _1334 = _1216 * 0.5;
        float _1335 = _1226 * 0.5;
        float _1336 = _1236 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_539, _540, _541), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _3576 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3587 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _3598 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (_1361 + 1.0))) + _1366) * _1249;
        _1383 = _1216;
        _1384 = _1215;
        _1385 = _1214;
        _1386 = _1226;
        _1387 = _1225;
        _1388 = _1224;
        _1389 = _1236;
        _1390 = _1235;
        _1391 = _1234;
        _1392 = _1249;
        _1393 = _1248;
        _1394 = _1247;
        _1395 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
        _1396 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1397 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
    }
    else
    {
        _1383 = _1071;
        _1384 = _1071;
        _1385 = _1071;
        _1386 = _1071;
        _1387 = _1071;
        _1388 = _1071;
        _1389 = _1071;
        _1390 = _1071;
        _1391 = _1071;
        _1392 = _1071;
        _1393 = _1071;
        _1394 = _1071;
        _1395 = 0.0;
        _1396 = 0.0;
        _1397 = 0.0;
    }
    float _1407 = (cbModelParam._m0[1u].x * (_1395 - _1083)) + _1083;
    float _1408 = (cbModelParam._m0[1u].x * (_1396 - _1084)) + _1084;
    float _1409 = (cbModelParam._m0[1u].x * (_1397 - _1085)) + _1085;
    float _1430 = fma(_1409, cbSceneParam._m0[89u].z, fma(_1408, cbSceneParam._m0[89u].y, _1407 * cbSceneParam._m0[89u].x));
    float _1433 = fma(_1409, cbSceneParam._m0[90u].z, fma(_1408, cbSceneParam._m0[90u].y, _1407 * cbSceneParam._m0[90u].x));
    float _1436 = fma(_1409, cbSceneParam._m0[91u].z, fma(_1408, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1407));
    float _1451 = _677 * 0.5;
    float _1452 = _678 * 0.5;
    float _1453 = _679 * 0.5;
    float _1454 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1385, _1388, _1391, _1394));
    float _1457 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1384, _1387, _1390, _1393));
    float _1460 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1383, _1386, _1389, _1392));
    float _1494;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1467 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1070, _1074, _1077, _1080));
        float _1471 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1072, _1075, _1078, _1081));
        float _1475 = dot(vec4(_1451, _1452, _1453, 1.0), vec4(_1073, _1076, _1079, _1082));
        float _1482 = dot(vec4(cbModelParam._m0[39u]), vec4(_1451, _1452, _1453, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1482) ? 0.0 : (isnan(0.0) ? _1482 : max(0.0, _1482))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1505;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1496 = dot(vec4(cbModelParam._m0[40u]), vec4(_1451, _1452, _1453, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)), isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1509 = (_1505 * cbModelParam._m0[1u].x) + (_1494 * (1.0 - cbModelParam._m0[1u].x));
    float _1519 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _542);
    float _1520 = isnan(_1519) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1519 : min(cbModelParam._m0[25u].z, _1519));
    float _1601;
    float _1603;
    float _1605;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1568 = fma(_741, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _733)) + cbModelParam._m0[13u].w;
        float _1572 = fma(_741, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _733)) + cbModelParam._m0[14u].w;
        float _1576 = fma(_741, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _733)) + cbModelParam._m0[15u].w;
        float _1579 = fma(_679, cbModelParam._m0[13u].z, fma(_678, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _677));
        float _1582 = fma(_679, cbModelParam._m0[14u].z, fma(_678, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _677));
        float _1585 = fma(_679, cbModelParam._m0[15u].z, fma(_678, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _677));
        float _1613;
        if (_1579 > 0.0)
        {
            _1613 = abs((1.0 - _1568) / _1579);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1568 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_23_ladder;
        }
        float _1972;
        if (_1582 > 0.0)
        {
            _1972 = abs((1.0 - _1572) / _1582);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1582 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1572 + 1.0) / _1582);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1972 = frontier_phi_34_30_ladder;
        }
        float _2296;
        if (_1585 > 0.0)
        {
            _2296 = abs((1.0 - _1576) / _1585);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1576 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2296 = frontier_phi_48_41_ladder;
        }
        float _2298 = isnan(_1972) ? _1613 : (isnan(_1613) ? _1972 : min(_1613, _1972));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1579) + _1568;
        float _2304 = (_2299 * _1582) + _1572;
        float _2305 = (_2299 * _1585) + _1576;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1520);
            frontier_phi_24_48_ladder = _2447.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2447.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2447.x * cbModelParam._m0[1u].y;
        }
        _1601 = frontier_phi_24_48_ladder_2;
        _1603 = frontier_phi_24_48_ladder_1;
        _1605 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_677, _678, _679), _1520);
        _1601 = _1589.x * cbModelParam._m0[1u].y;
        _1603 = _1589.y * cbModelParam._m0[1u].y;
        _1605 = _1589.z * cbModelParam._m0[1u].y;
    }
    float _1609 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _542);
    float _1610 = isnan(_1609) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1609 : min(cbModelParam._m0[25u].w, _1609));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1663 = fma(_741, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _733)) + cbModelParam._m0[21u].w;
        float _1667 = fma(_741, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _733)) + cbModelParam._m0[22u].w;
        float _1671 = fma(_741, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _733)) + cbModelParam._m0[23u].w;
        float _1674 = fma(_679, cbModelParam._m0[21u].z, fma(_678, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _677));
        float _1677 = fma(_679, cbModelParam._m0[22u].z, fma(_678, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _677));
        float _1680 = fma(_679, cbModelParam._m0[23u].z, fma(_678, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _677));
        float _1977;
        if (_1674 > 0.0)
        {
            _1977 = abs((1.0 - _1663) / _1674);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1663 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1977 = frontier_phi_36_32_ladder;
        }
        float _2322;
        if (_1677 > 0.0)
        {
            _2322 = abs((1.0 - _1667) / _1677);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1667 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2322 = frontier_phi_50_43_ladder;
        }
        float _2512;
        if (_1680 > 0.0)
        {
            _2512 = abs((1.0 - _1671) / _1680);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1671 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2512 = frontier_phi_68_61_ladder;
        }
        float _2514 = isnan(_2322) ? _1977 : (isnan(_1977) ? _2322 : min(_1977, _2322));
        float _2515 = isnan(_2512) ? _2514 : (isnan(_2514) ? _2512 : min(_2514, _2512));
        float _2519 = (_2515 * _1674) + _1663;
        float _2520 = (_2515 * _1677) + _1667;
        float _2521 = (_2515 * _1680) + _1671;
        float _2522 = _2515 * 9.9999997473787516355514526367188e-05;
        float _2523 = (-1.0) - _2522;
        float _2525 = _2522 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2521 > _2525) || ((_2521 < _2523) || ((_2520 > _2525) || ((_2520 < _2523) || ((_2519 < _2523) || (_2519 > _2525))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2521, cbModelParam._m0[17u].z, fma(_2520, cbModelParam._m0[17u].y, _2519 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2521, cbModelParam._m0[18u].z, fma(_2520, cbModelParam._m0[18u].y, _2519 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2521, cbModelParam._m0[19u].z, fma(_2520, cbModelParam._m0[19u].y, _2519 * cbModelParam._m0[19u].x))), _1610);
            frontier_phi_33_68_ladder = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1699 = frontier_phi_33_68_ladder_2;
        _1701 = frontier_phi_33_68_ladder;
        _1703 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_677, _678, _679), _1610);
        _1699 = _1683.x * cbModelParam._m0[1u].z;
        _1701 = _1683.y * cbModelParam._m0[1u].z;
        _1703 = _1683.z * cbModelParam._m0[1u].z;
    }
    float _1716 = (((_704 * _654) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1699 - _1601)) + _1601);
    float _1718 = (((_704 * _656) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1701 - _1603)) + _1603);
    float _1720 = (((_704 * _657) + _705) * _669) * ((cbModelParam._m0[1u].w * (_1703 - _1605)) + _1605);
    float _1723 = fma(_1720, cbSceneParam._m0[89u].z, fma(_1718, cbSceneParam._m0[89u].y, _1716 * cbSceneParam._m0[89u].x));
    float _1726 = fma(_1720, cbSceneParam._m0[90u].z, fma(_1718, cbSceneParam._m0[90u].y, _1716 * cbSceneParam._m0[90u].x));
    float _1729 = fma(_1720, cbSceneParam._m0[91u].z, fma(_1718, cbSceneParam._m0[91u].y, _1716 * cbSceneParam._m0[91u].x));
    uvec4 _1739 = floatBitsToUint(cbInstanceData._m0[_628 + 5u]);
    uint _1741 = _1739.x * 14u;
    uint _1742 = _1741 + 13u;
    float _1747 = _669 + (-1.0);
    float _1750 = (cbLight._m0[_1742].x * _1747) + 1.0;
    float _1751 = (cbLight._m0[_1742].y * _1747) + 1.0;
    uint _1752 = _1741 + 5u;
    float _1758 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1762 = _1741 + 4u;
    float _1768 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1772 = _1741 | 1u;
    float _1783 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_539, _540, _541));
    float _1786 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_539, _540, _541));
    float _3734 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _3745 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1791 = (isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 0.3183098733425140380859375;
    float _1793 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1800 = ((cbLight._m0[_1752].x * _1758) * _1793) + ((cbLight._m0[_1762].x * _1768) * _1791);
    float _1801 = ((_1758 * cbLight._m0[_1752].y) * _1793) + ((_1768 * cbLight._m0[_1762].y) * _1791);
    float _1802 = ((_1758 * cbLight._m0[_1752].z) * _1793) + ((_1768 * cbLight._m0[_1762].z) * _1791);
    uint _1804 = _1741 + 8u;
    float _1817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1741].w)) * _542) * 0.949999988079071044921875);
    float _1818 = _1817 * _1817;
    float _1819 = cbLight._m0[_1741].x + _567;
    float _1820 = cbLight._m0[_1741].y + _568;
    float _1821 = cbLight._m0[_1741].z + _569;
    float _1825 = inversesqrt(dot(vec3(_1819, _1820, _1821), vec3(_1819, _1820, _1821)));
    float _1826 = _1825 * _1819;
    float _1827 = _1825 * _1820;
    float _1828 = _1825 * _1821;
    float _1829 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1741].xyz));
    float _3756 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1832 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _1833 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1834 = dot(vec3(_539, _540, _541), vec3(_1826, _1827, _1828));
    float _3778 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1837 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1838 = dot(vec3(cbLight._m0[_1741].xyz), vec3(_1826, _1827, _1828));
    float _3789 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = _1818 * _1818;
    float _1846 = ((_1837 * _1837) * (_1842 + (-1.0))) + 1.0;
    float _1854 = exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0);
    float _1855 = 0.959999978542327880859375 - _651;
    float _1857 = 0.959999978542327880859375 - _652;
    float _1858 = 0.959999978542327880859375 - _653;
    float _1865 = 1.0 - _1818;
    float _1876 = (0.5 / (((_1833 * ((_1832 * _1865) + _1818)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1865) + _1818) * _1832))) * _1832;
    float _3800 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1878 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1842 / ((_1846 * _1846) * 3.141590118408203125));
    uint _1889 = _1741 + 9u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _542) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1772].x + _567;
    float _1903 = cbLight._m0[_1772].y + _568;
    float _1904 = cbLight._m0[_1772].z + _569;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_539, _540, _541), vec3(cbLight._m0[_1772].xyz));
    float _3811 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1916 = dot(vec3(_539, _540, _541), vec3(_1909, _1910, _1911));
    float _3822 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_1909, _1910, _1911));
    float _3833 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1901 * _1901;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1935 = exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0);
    float _1942 = 1.0 - _1901;
    float _1952 = (0.5 / (((_1833 * ((_1915 * _1942) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1833 * _1942) + _1901) * _1915))) * _1915;
    float _3844 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    float _1964 = (((((_1935 * _1855) + _654) * cbLight._m0[_1889].x) * _1954) * _1758) + (((((_1854 * _1855) + _654) * cbLight._m0[_1804].x) * _1878) * _1768);
    float _1965 = (((((_1935 * _1857) + _656) * cbLight._m0[_1889].y) * _1954) * _1758) + (((((_1854 * _1857) + _656) * cbLight._m0[_1804].y) * _1878) * _1768);
    float _1966 = (((((_1935 * _1858) + _657) * cbLight._m0[_1889].z) * _1954) * _1758) + (((((_1854 * _1858) + _657) * cbLight._m0[_1804].z) * _1878) * _1768);
    float _2081;
    float _2083;
    float _2085;
    float _2087;
    float _2089;
    float _2091;
    if (_1739.y == 0u)
    {
        float _2021 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2022 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2021;
        float _2023 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2021;
        float _2024 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2021;
        uvec4 _2036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2037 = _2036.x;
        uint _2048 = uint((float(_2036.y) * floor(float(uint(cbSceneParam._m0[85u].y * _590) / _2037))) + floor(float(uint(cbSceneParam._m0[85u].x * _589) / _2037)));
        float _2058 = (log2(_2024 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2059 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        uint _2062 = uint(isnan(14.0) ? _2059 : (isnan(_2059) ? 14.0 : min(_2059, 14.0)));
        uvec4 _2067 = texelFetch(g_lightClusterGridBuffer, int(((_2062 << 2u) + (_2048 << 6u)) >> 2u));
        uint _2068 = _2067.x;
        uint _2069 = _2036.z;
        float _2175;
        float _2177;
        float _2179;
        float _2181;
        float _2183;
        float _2185;
        if (((((1u << ((_2069 >> 4u) & 15u)) + 4294967295u) & _2068) == 0u) || ((_2069 & 240u) == 0u))
        {
            _2175 = 0.0;
            _2177 = 0.0;
            _2179 = 0.0;
            _2181 = 0.0;
            _2183 = 0.0;
            _2185 = 0.0;
        }
        else
        {
            float _2176;
            float _2178;
            float _2180;
            float _2182;
            float _2184;
            float _2186;
            float _2359 = 0.0;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            uint _2365 = 0u;
            uint _2374;
            bool _2375;
            for (;;)
            {
                _2374 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2365 << 2u)) >> 2u)).x;
                _2375 = _2374 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2375)
                {
                    frontier_phi_63_pred = _2361;
                    frontier_phi_63_pred_1 = _2364;
                    frontier_phi_63_pred_2 = _2363;
                    frontier_phi_63_pred_3 = _2362;
                    frontier_phi_63_pred_4 = _2360;
                    frontier_phi_63_pred_5 = _2359;
                }
                else
                {
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    uint _2561;
                    _2555 = _2359;
                    _2556 = _2360;
                    _2557 = _2361;
                    _2558 = _2362;
                    _2559 = _2363;
                    _2560 = _2364;
                    _2561 = _2374;
                    float _2456;
                    float _2457;
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    for (;;)
                    {
                        uint _2565 = uint(findLSB(_2561)) + (_2365 << 5u);
                        uint _2562 = (_2561 + 4294967295u) & _2561;
                        uint _2567 = _2565 * 48u;
                        vec4 _2581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2587 = (_2565 * 48u) + 4u;
                        vec4 _2600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2587)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2587 + 3u)).x));
                        uint _2606 = (_2565 * 48u) + 8u;
                        vec3 _2617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2606)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2606 + 2u)).x));
                        float _2621 = _2581.x - _2022;
                        float _2622 = _2581.y - _2023;
                        float _2623 = _2581.z - _2024;
                        float _2624 = dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623));
                        float _2627 = inversesqrt(_2624);
                        float _2628 = _2627 * _2621;
                        float _2629 = _2627 * _2622;
                        float _2630 = _2627 * _2623;
                        float _2631 = dot(vec3(_609, _612, _615), vec3(_2628, _2629, _2630));
                        float _2636 = 1.0 - (_2624 * _2581.w);
                        float _3865 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
                        float _2637 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2638 = sqrt(_2624) * _2600.w;
                        float _2641 = 1.39999997615814208984375 / (_2638 + 1.39999997615814208984375);
                        float _2642 = _2641 * _2641;
                        float _2645 = ((1.0 - _2642) * _2631) + _2642;
                        float _2648 = _2638 * _2638;
                        float _2652 = ((isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0))) * _2637) / ((_2648 * 0.699999988079071044921875) + 1.0);
                        float _2656 = (-0.0) - _2022;
                        float _2657 = (-0.0) - _2023;
                        float _2658 = (-0.0) - _2024;
                        float _2662 = inversesqrt(dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658)));
                        float _2663 = _2662 * _2656;
                        float _2664 = _2662 * _2657;
                        float _2665 = _2662 * _2658;
                        float _2673 = exp2(log2(1.0 / ((_2648 * 3.5) + 5.0)) * 0.25);
                        float _2674 = 1.0 - _685;
                        float _2681 = sqrt(1.0 - ((1.0 - (_2674 * _2674)) * (1.0 - (_2673 * _2673))));
                        float _2682 = _2681 * _2681;
                        float _2683 = _2682 * _2682;
                        float _2684 = _2663 + _2628;
                        float _2685 = _2664 + _2629;
                        float _2686 = _2665 + _2630;
                        float _2690 = inversesqrt(dot(vec3(_2684, _2685, _2686), vec3(_2684, _2685, _2686)));
                        float _2694 = dot(vec3(_609, _612, _615), vec3(_2663, _2664, _2665));
                        float _3881 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2697 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
                        float _2698 = dot(vec3(_609, _612, _615), vec3(_2690 * _2684, _2690 * _2685, _2690 * _2686));
                        float _3892 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2701 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2705 = ((_2701 * _2701) * (_2683 + (-1.0))) + 1.0;
                        float _2706 = _2641 * _2682;
                        float _2707 = _2706 * _2706;
                        float _2710 = ((1.0 - _2707) * _2631) + _2707;
                        float _3903 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                        float _2712 = 1.0 - _2682;
                        float _2722 = (0.5 / (((_2711 * ((_2697 * _2712) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2711 * _2712) + _2682) * _2697))) * _2711;
                        float _3914 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2733 = (((_2683 * 3.1415927410125732421875) * (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) / ((_2705 * _2705) * ((_2648 * 2.1991131305694580078125) + 3.141590118408203125))) * _2637;
                        _2459 = (_2652 * _2600.x) + _2558;
                        _2460 = (_2652 * _2600.y) + _2559;
                        _2461 = (_2652 * _2600.z) + _2560;
                        _2456 = (_2733 * _2617.x) + _2555;
                        _2457 = (_2733 * _2617.y) + _2556;
                        _2458 = (_2733 * _2617.z) + _2557;
                        if (_2562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2555 = _2456;
                            _2556 = _2457;
                            _2557 = _2458;
                            _2558 = _2459;
                            _2559 = _2460;
                            _2560 = _2461;
                            _2561 = _2562;
                        }
                    }
                    frontier_phi_63_pred = _2458;
                    frontier_phi_63_pred_1 = _2461;
                    frontier_phi_63_pred_2 = _2460;
                    frontier_phi_63_pred_3 = _2459;
                    frontier_phi_63_pred_4 = _2457;
                    frontier_phi_63_pred_5 = _2456;
                }
                _2180 = frontier_phi_63_pred;
                _2186 = frontier_phi_63_pred_1;
                _2184 = frontier_phi_63_pred_2;
                _2182 = frontier_phi_63_pred_3;
                _2178 = frontier_phi_63_pred_4;
                _2176 = frontier_phi_63_pred_5;
                uint _2366 = _2365 + 1u;
                if (_2366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2359 = _2176;
                    _2360 = _2178;
                    _2361 = _2180;
                    _2362 = _2182;
                    _2363 = _2184;
                    _2364 = _2186;
                    _2365 = _2366;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2175 = _2176;
            _2177 = _2178;
            _2179 = _2180;
            _2181 = _2182;
            _2183 = _2184;
            _2185 = _2186;
        }
        uvec4 _2189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2190 = _2189.z;
        uint _2192 = (_2190 >> 8u) & 15u;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((4294967295u << _2192) & _2068) == 0u)
        {
            _2327 = _2175;
            _2329 = _2177;
            _2331 = _2179;
            _2333 = _2181;
            _2335 = _2183;
            _2337 = _2185;
        }
        else
        {
            float _2352 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
            float _2353 = _2352 * _2022;
            float _2354 = _2352 * _2023;
            float _2355 = _2352 * _2024;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2192 < ((_2190 >> 12u) & 15u))
            {
                float _2328;
                float _2330;
                float _2332;
                float _2334;
                float _2336;
                float _2338;
                float _2538 = _2175;
                float _2539 = _2177;
                float _2540 = _2179;
                float _2541 = _2181;
                float _2542 = _2183;
                float _2543 = _2185;
                uint _2544 = _2192;
                uint _2553;
                bool _2554;
                for (;;)
                {
                    _2553 = texelFetch(g_lightClassification, int((((_2062 << 5u) + (_2048 << 9u)) + (_2544 << 2u)) >> 2u)).x;
                    _2554 = _2553 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2554)
                    {
                        frontier_phi_77_pred = _2543;
                        frontier_phi_77_pred_1 = _2542;
                        frontier_phi_77_pred_2 = _2541;
                        frontier_phi_77_pred_3 = _2540;
                        frontier_phi_77_pred_4 = _2539;
                        frontier_phi_77_pred_5 = _2538;
                    }
                    else
                    {
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _2781 = _2538;
                        float _2782 = _2539;
                        float _2783 = _2540;
                        float _2784 = _2541;
                        float _2785 = _2542;
                        float _2786 = _2543;
                        uint _2787 = _2553;
                        uint _2788;
                        vec4 _2813;
                        float _2814;
                        vec4 _2829;
                        vec3 _2841;
                        vec4 _2856;
                        vec4 _2871;
                        float _2917;
                        bool _2918;
                        for (;;)
                        {
                            uint _2798 = ((_2544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2787));
                            _2788 = (_2787 + 4294967295u) & _2787;
                            uint _2800 = _2798 * 40u;
                            _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            _2814 = _2813.w;
                            uint _2816 = (_2798 * 40u) + 4u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2831 = (_2798 * 40u) + 8u;
                            _2841 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2831)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2831 + 2u)).x));
                            uint _2843 = (_2798 * 40u) + 16u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2858 = (_2798 * 40u) + 20u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2873 = (_2798 * 40u) + 24u;
                            vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2873 + 3u)).x));
                            uint _2892 = (_2798 * 40u) + 28u;
                            vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            _2917 = fma(_2024, _2905.z, fma(_2023, _2905.y, _2905.x * _2022)) + _2905.w;
                            _2918 = !((fma(_2024, _2886.z, fma(_2023, _2886.y, _2886.x * _2022)) + _2886.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2918)
                            {
                                float _2945 = _2813.x - _2022;
                                float _2946 = _2813.y - _2023;
                                float _2947 = _2813.z - _2024;
                                float _2948 = dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947));
                                float _2951 = inversesqrt(_2948);
                                float _2952 = _2951 * _2945;
                                float _2953 = _2951 * _2946;
                                float _2954 = _2951 * _2947;
                                float _2958 = 1.0 - (_2948 / (_2814 * _2814));
                                float _3925 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2959 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2963 = sqrt(_2948) * _2829.w;
                                float _2965 = 1.39999997615814208984375 / (_2963 + 1.39999997615814208984375);
                                float _2966 = _2965 * _2965;
                                float _2969 = ((1.0 - _2966) * dot(vec3(_2952, _2953, _2954), vec3(_609, _612, _615))) + _2966;
                                float _2972 = _2963 * _2963;
                                float _2976 = (fma(_2024, _2856.z, fma(_2023, _2856.y, _2856.x * _2022)) + _2856.w) / _2917;
                                float _2977 = (fma(_2024, _2871.z, fma(_2023, _2871.y, _2871.x * _2022)) + _2871.w) / _2917;
                                float _2981 = 1.0 - dot(vec2(_2976, _2977), vec2(_2976, _2977));
                                float _3941 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                                float _2982 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
                                float _2983 = _2982 * (((isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0))) * _2959) / ((_2972 * 0.699999988079071044921875) + 1.0));
                                float _2995 = exp2(log2(1.0 / ((_2972 * 3.5) + 5.0)) * 0.25);
                                float _2996 = 1.0 - _685;
                                float _3003 = sqrt(1.0 - ((1.0 - (_2996 * _2996)) * (1.0 - (_2995 * _2995))));
                                float _3004 = _3003 * _3003;
                                float _3005 = _3004 * _3004;
                                float _3006 = _2952 - _2353;
                                float _3007 = _2953 - _2354;
                                float _3008 = _2954 - _2355;
                                float _3012 = inversesqrt(dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008)));
                                float _3016 = dot(vec3(_609, _612, _615), vec3((-0.0) - _2353, (-0.0) - _2354, (-0.0) - _2355));
                                float _3952 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3019 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3020 = dot(vec3(_609, _612, _615), vec3(_3012 * _3006, _3012 * _3007, _3012 * _3008));
                                float _3963 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3023 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _3027 = ((_3023 * _3023) * (_3005 + (-1.0))) + 1.0;
                                float _3028 = _2965 * _3004;
                                float _3029 = _3028 * _3028;
                                float _3035 = ((1.0 - _3029) * dot(vec3(_609, _612, _615), vec3(_2952, _2953, _2954))) + _3029;
                                float _3974 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                                float _3037 = 1.0 - _3004;
                                float _3047 = (0.5 / (((_3036 * ((_3019 * _3037) + _3004)) + 9.9999999392252902907785028219223e-09) + (((_3036 * _3037) + _3004) * _3019))) * _3036;
                                float _3985 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3057 = (_2982 * _2959) * (((_3005 * 3.1415927410125732421875) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) / ((_3027 * _3027) * ((_2972 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2983 * _2829.x;
                                frontier_phi_83_pred_1 = _2983 * _2829.z;
                                frontier_phi_83_pred_2 = _2983 * _2829.y;
                                frontier_phi_83_pred_3 = _3057 * _2841.z;
                                frontier_phi_83_pred_4 = _3057 * _2841.y;
                                frontier_phi_83_pred_5 = _3057 * _2841.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3064 = frontier_phi_83_pred;
                            _3066 = frontier_phi_83_pred_1;
                            _3065 = frontier_phi_83_pred_2;
                            _3063 = frontier_phi_83_pred_3;
                            _3062 = frontier_phi_83_pred_4;
                            _3061 = frontier_phi_83_pred_5;
                            _2771 = _3064 + _2784;
                            _2772 = _3065 + _2785;
                            _2773 = _3066 + _2786;
                            _2768 = _3061 + _2781;
                            _2769 = _3062 + _2782;
                            _2770 = _3063 + _2783;
                            if (_2788 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2773;
                                _2787 = _2788;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2773;
                        frontier_phi_77_pred_1 = _2772;
                        frontier_phi_77_pred_2 = _2771;
                        frontier_phi_77_pred_3 = _2770;
                        frontier_phi_77_pred_4 = _2769;
                        frontier_phi_77_pred_5 = _2768;
                    }
                    _2338 = frontier_phi_77_pred;
                    _2336 = frontier_phi_77_pred_1;
                    _2334 = frontier_phi_77_pred_2;
                    _2332 = frontier_phi_77_pred_3;
                    _2330 = frontier_phi_77_pred_4;
                    _2328 = frontier_phi_77_pred_5;
                    uint _2545 = _2544 + 1u;
                    if (_2545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2538 = _2328;
                        _2539 = _2330;
                        _2540 = _2332;
                        _2541 = _2334;
                        _2542 = _2336;
                        _2543 = _2338;
                        _2544 = _2545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2330;
                frontier_phi_52_53_ladder_1 = _2338;
                frontier_phi_52_53_ladder_2 = _2336;
                frontier_phi_52_53_ladder_3 = _2334;
                frontier_phi_52_53_ladder_4 = _2332;
                frontier_phi_52_53_ladder_5 = _2328;
            }
            else
            {
                frontier_phi_52_53_ladder = _2177;
                frontier_phi_52_53_ladder_1 = _2185;
                frontier_phi_52_53_ladder_2 = _2183;
                frontier_phi_52_53_ladder_3 = _2181;
                frontier_phi_52_53_ladder_4 = _2179;
                frontier_phi_52_53_ladder_5 = _2175;
            }
            _2327 = frontier_phi_52_53_ladder_5;
            _2329 = frontier_phi_52_53_ladder;
            _2331 = frontier_phi_52_53_ladder_4;
            _2333 = frontier_phi_52_53_ladder_3;
            _2335 = frontier_phi_52_53_ladder_2;
            _2337 = frontier_phi_52_53_ladder_1;
        }
        float _2342 = isnan(1.0) ? _669 : (isnan(_669) ? 1.0 : min(_669, 1.0));
        _2081 = (_2342 * _2333) + _1800;
        _2083 = (_2342 * _2335) + _1801;
        _2085 = (_2342 * _2337) + _1802;
        _2087 = ((_2327 * _654) * _2342) + _1964;
        _2089 = ((_2329 * _656) * _2342) + _1965;
        _2091 = ((_2331 * _657) * _2342) + _1966;
    }
    else
    {
        _2081 = _1800;
        _2083 = _1801;
        _2085 = _1802;
        _2087 = _1964;
        _2089 = _1965;
        _2091 = _1966;
    }
    uint _2097 = _630 + uint(cbMatDynParam._m0[0u].w);
    float _4001 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4012 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4023 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _2122 = (((isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_2081 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _669))) + ((_2087 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + (((_456 - (_456 * _290)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2097].x);
    float _2124 = ((((_457 - (_457 * _290)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2097].y) + ((_2089 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2083 + ((isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))) * _669)));
    float _2126 = (((cbMtdParam._m0[9u].z * (_458 - (_458 * _290))) * cbInstanceData._m0[_2097].z) + ((_2091 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _1509)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2085 + ((isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))) * _669)));
    float _2127 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2128 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2129 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
    uint _2130 = _628 + 6u;
    float _2138 = _589 / cbSceneParam._m0[86u].x;
    float _2139 = _590 / cbSceneParam._m0[86u].y;
    vec4 _2153 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2138, _2139, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2155 = _2153.x;
    float _2156 = _2153.y;
    float _2157 = _2153.z;
    float _2158 = _2153.w;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2200 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2201 = _2200 / _562;
        float _2212 = _2201 * _263;
        float _2213 = _264 * _2201;
        float _2214 = (-0.0) - _2213;
        float _2215 = _2201 * _265;
        float _2217 = (cbSceneParam._m0[77u].w * _2214) / _2200;
        float _2218 = _2217 + cbSceneParam._m0[79u].w;
        float _2219 = cbSceneParam._m0[79u].w - _2213;
        float _2225 = sqrt(((_2212 * _2212) + (_2213 * _2213)) + (_2215 * _2215));
        float _2228 = (1.0 - (cbSceneParam._m0[77u].w / _2200)) * _2225;
        float _2234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2469;
        if (abs((_2214 - _2217) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2469 = ((((_2218 > 0.0) ? exp2(_2234 * _2218) : (2.0 - exp2(_2236 * _2218))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2228;
        }
        else
        {
            float _2388 = 1.0 / cbSceneParam._m0[80u].x;
            float _2389 = isnan(_2219) ? _2218 : (isnan(_2218) ? _2219 : max(_2218, _2219));
            float _2390 = isnan(_2219) ? _2218 : (isnan(_2218) ? _2219 : min(_2218, _2219));
            float _2399 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : min(_2389, 0.0));
            float _2400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : min(_2390, 0.0));
            _2469 = ((abs(_2225 / _2214) * cbSceneParam._m0[80u].y) * ((((_2399 - _2400) * 2.0) - ((exp2(_2234 * (isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0)))) - exp2(_2234 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0))))) * _2388)) - ((exp2(_2236 * _2399) - exp2(_2236 * _2400)) * _2388))) + (_2228 * cbSceneParam._m0[80u].z);
        }
        vec4 _2471 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2138, _2139, 1.0), 0.0);
        float _2480 = exp2((_2469 * (-1.44269502162933349609375)) * (1.0 - _2471.w));
        float _2481 = log2(_2480);
        float _2497 = log2(_2158);
        _2238 = (exp2(_2497 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2481 * cbSceneParam._m0[78u].x)) * _2471.x) / cbSceneParam._m0[78u].x)) + _2155;
        _2240 = (exp2(_2497 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2481 * cbSceneParam._m0[78u].y)) * _2471.y) / cbSceneParam._m0[78u].y)) + _2156;
        _2242 = (exp2(_2497 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2481 * cbSceneParam._m0[78u].z)) * _2471.z) / cbSceneParam._m0[78u].z)) + _2157;
        _2244 = _2480 * _2158;
    }
    else
    {
        _2238 = _2155;
        _2240 = _2156;
        _2242 = _2157;
        _2244 = _2158;
    }
    bool _2507;
    vec4 _2254;
    vec4 _2276;
    float _2278;
    float _2282;
    float _2283;
    float _2284;
    float _2285;
    bool _2295;
    for (;;)
    {
        _2254 = cbMatDynParam._m0[0u];
        float _2256 = roundEven(_2254.y);
        bool _2257 = _2256 == 3.0;
        float _2258 = log2(_2244);
        float _2265 = exp2(_2258 * cbSceneParam._m0[78u].x) * _2127;
        float _2266 = exp2(_2258 * cbSceneParam._m0[78u].y) * _2128;
        float _2267 = exp2(_2258 * cbSceneParam._m0[78u].z) * _2129;
        float _2274 = _576 + (-0.5);
        _2276 = cbMtdParam._m0[1u];
        _2278 = _2276.y * _2274;
        float _2281 = (_2256 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2282 = _2281 * (_2257 ? _2265 : (_2265 + (cbSceneParam._m0[72u].w * _2238)));
        _2283 = _2281 * (_2257 ? _2266 : (_2266 + (cbSceneParam._m0[72u].w * _2240)));
        _2284 = _2281 * (_2257 ? _2267 : (_2267 + (cbSceneParam._m0[72u].w * _2242)));
        _2285 = _2274 * 0.999000012874603271484375;
        _2295 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2295)
        {
            if ((cbInstanceData._m0[_628 + 7u].x + _2285) < 0.5)
            {
                _2507 = true;
                break;
            }
        }
        uint _2423 = _630 + uint(_2254.w);
        if ((cbInstanceData._m0[_2423].w < 1.0) && ((cbInstanceData._m0[_2423].w + _2285) < 0.5))
        {
            _2507 = true;
            break;
        }
        if ((_2278 + 1.0) < _2276.x)
        {
            _2507 = true;
            break;
        }
        _2507 = false;
        break;
    }
    float _2738;
    if (_2507)
    {
        discard_state = true;
        _2738 = 0.0;
    }
    else
    {
        _2738 = cbInstanceData._m0[_2130].w;
    }
    SV_Target.x = _2282;
    SV_Target.y = _2283;
    SV_Target.z = _2284;
    SV_Target.w = _2738;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2130].w;
    discard_exit();
}


