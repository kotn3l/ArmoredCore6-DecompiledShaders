#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Interior_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _885;
uint _2080;
uint _2081;
uint _2082;
uint _2325;
uint _2326;
uint _2327;
float _2598;
float _2599;
float _2600;
float _2601;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    float _287 = cbMtdParam._m0[22u].y + _259;
    float _288 = cbMtdParam._m0[22u].z + _260;
    float _289 = cbMtdParam._m0[22u].w + _261;
    float _303 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _304 = (-0.0) - dot(vec3(_287, _288, _289), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _305 = (-0.0) - dot(vec3(_287, _288, _289), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _309 = inversesqrt(dot(vec3(_303, _304, _305), vec3(_303, _304, _305)));
    float _310 = _309 * _305;
    float _312 = (cbMtdParam._m0[19u].x * _303) * _309;
    float _314 = (cbMtdParam._m0[18u].w * _304) * _309;
    float _315 = fract(TEXCOORD.x);
    float _316 = fract(TEXCOORD.y);
    float _322;
    if (_312 > 0.0)
    {
        _322 = (1.0 - _315) / _312;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_312 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _315) / _312;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _322 = frontier_phi_3_2_ladder;
    }
    float _330;
    if (_314 > 0.0)
    {
        _330 = (1.0 - _316) / _314;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_314 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _316) / _314;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _330 = frontier_phi_7_6_ladder;
    }
    bool _332 = _310 > 0.0;
    float _334 = _332 ? (cbMtdParam._m0[15u].x / _310) : 5000.0;
    float _335 = isnan(_330) ? _322 : (isnan(_322) ? _330 : min(_322, _330));
    float _336 = isnan(_334) ? _335 : (isnan(_335) ? _334 : min(_335, _334));
    float _340 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _341 = _315 + (-0.5);
    float _344 = _316 + (-0.5);
    float _347 = ((_336 * _310) + _340) / _340;
    vec4 _373 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_341 + (_336 * _312)) / _347) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_344 + (_336 * _314)) / _347) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _384 = cbMtdParam._m0[9u].x * _373.x;
    float _385 = cbMtdParam._m0[9u].y * _373.y;
    float _386 = cbMtdParam._m0[9u].z * _373.z;
    float _408 = (cbMtdParam._m0[21u].x * _303) * _309;
    float _410 = (cbMtdParam._m0[20u].w * _304) * _309;
    bool _411 = _408 > 0.0;
    float _416;
    if (_411)
    {
        _416 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _416 = frontier_phi_11_10_ladder;
    }
    bool _418 = _410 > 0.0;
    float _423;
    if (_418)
    {
        _423 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _423 = frontier_phi_15_14_ladder;
    }
    float _426 = _332 ? (cbMtdParam._m0[16u].z / _310) : 5000.0;
    float _427 = isnan(_423) ? _416 : (isnan(_416) ? _423 : min(_416, _423));
    float _428 = isnan(_426) ? _427 : (isnan(_427) ? _426 : min(_427, _426));
    float _432 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _436 = ((_428 * _310) + _432) / _432;
    float _441 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _443 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _459 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_428 * _408)) / _436) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_428 * _410)) / _436) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _471;
    if (_411)
    {
        _471 = (1.0 - _315) / _408;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _315) / _408;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _471 = frontier_phi_19_18_ladder;
    }
    float _477;
    if (_418)
    {
        _477 = (1.0 - _316) / _410;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _316) / _410;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _477 = frontier_phi_23_22_ladder;
    }
    float _479 = isnan(_477) ? _471 : (isnan(_471) ? _477 : min(_471, _477));
    float _480 = isnan(_426) ? _479 : (isnan(_479) ? _426 : min(_479, _426));
    float _487 = ((_480 * _310) + _432) / _432;
    vec4 _501 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_341 + (_480 * _408)) / _487) + 0.5) + _441) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_344 + (_480 * _410)) / _487) + 0.5) + _443) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _503 = _501.w;
    float _510 = (_503 * ((_459.x * cbMtdParam._m0[10u].x) - _384)) + _384;
    float _511 = (_503 * ((_459.y * cbMtdParam._m0[10u].y) - _385)) + _385;
    float _512 = (_503 * ((_459.z * cbMtdParam._m0[10u].z) - _386)) + _386;
    float _527 = (cbMtdParam._m0[21u].z * _303) * _309;
    float _529 = (cbMtdParam._m0[21u].y * _304) * _309;
    bool _530 = _527 > 0.0;
    float _535;
    if (_530)
    {
        _535 = (1.0 - _315) / _527;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _315) / _527;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _535 = frontier_phi_27_26_ladder;
    }
    bool _537 = _529 > 0.0;
    float _542;
    if (_537)
    {
        _542 = (1.0 - _316) / _529;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _316) / _529;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _542 = frontier_phi_31_30_ladder;
    }
    float _545 = _332 ? (cbMtdParam._m0[18u].x / _310) : 5000.0;
    float _546 = isnan(_542) ? _535 : (isnan(_535) ? _542 : min(_535, _542));
    float _547 = isnan(_545) ? _546 : (isnan(_546) ? _545 : min(_546, _545));
    float _551 = cbMtdParam._m0[18u].x * cbMtdParam._m0[15u].z;
    float _555 = ((_547 * _310) + _551) / _551;
    float _560 = cbMtdParam._m0[17u].w - cbMtdParam._m0[21u].w * trunc(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    float _562 = floor(cbMtdParam._m0[17u].w / cbMtdParam._m0[21u].w);
    vec4 _579 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_341 + (_547 * _527)) / _555) + 0.5) + _560) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_344 + (_547 * _529)) / _555) + 0.5) + _562) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _591;
    if (_530)
    {
        _591 = (1.0 - _315) / _527;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_527 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _315) / _527;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _591 = frontier_phi_35_34_ladder;
    }
    float _597;
    if (_537)
    {
        _597 = (1.0 - _316) / _529;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_529 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _316) / _529;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _597 = frontier_phi_39_38_ladder;
    }
    float _599 = isnan(_597) ? _591 : (isnan(_591) ? _597 : min(_591, _597));
    float _600 = isnan(_545) ? _599 : (isnan(_599) ? _545 : min(_599, _545));
    float _607 = ((_600 * _310) + _551) / _551;
    vec4 _621 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * (((((_341 + (_600 * _527)) / _607) + 0.5) + _560) / cbMtdParam._m0[21u].w)) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * (((((_344 + (_600 * _529)) / _607) + 0.5) + _562) / cbMtdParam._m0[22u].x)) + cbTextureTilingScale._m0[7u].w));
    float _623 = _621.w;
    float _648 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _652 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _653 = _259 * _652;
    float _654 = _260 * _652;
    float _655 = _261 * _652;
    vec4 _660 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _662 = _660.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _732 = sqrt(((_259 * _259) + (_260 * _260)) + (_261 * _261));
        float _739 = (cbMatDynParam._m0[5u].x * _732) + cbMatDynParam._m0[5u].y;
        float _2660 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0));
        float _744 = (cbMatDynParam._m0[5u].z * _732) + cbMatDynParam._m0[5u].w;
        float _2671 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0))) - _740)) + _740) < ((_662 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _685 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_675 * cbSceneParam._m0[86u].x, _676 * cbSceneParam._m0[86u].y));
    float _688 = _685.x * TEXCOORD.z;
    float _689 = (-0.0) - _653;
    float _690 = (-0.0) - _654;
    float _691 = (-0.0) - _655;
    float _713 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _717 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _721 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _884;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = (cbModelParam._m0[37u].x * ((((fma(_721, cbModelParam._m0[26u].z, fma(_717, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _713)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _808 = (cbModelParam._m0[37u].y * ((((fma(_721, cbModelParam._m0[27u].z, fma(_717, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _713)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _809 = (((((fma(_721, cbModelParam._m0[28u].z, fma(_717, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _713)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _857 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _867 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _877 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _878 = _877 * (_833.x + (-0.5));
        float _879 = _877 * (_833.y + (-0.5));
        float _880 = _877 * (_833.z + (-0.5));
        _884 = _846 * (_812.z + (-0.5));
        _886 = _846 * (_812.y + (-0.5));
        _887 = _846 * (_812.x + (-0.5));
        _888 = _857 * (_819.z + (-0.5));
        _889 = _857 * (_819.y + (-0.5));
        _890 = _857 * (_819.x + (-0.5));
        _891 = _867 * (_826.z + (-0.5));
        _892 = _867 * (_826.y + (-0.5));
        _893 = _867 * (_826.x + (-0.5));
        _894 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        _895 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        _896 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    }
    else
    {
        _884 = _885;
        _886 = _885;
        _887 = _885;
        _888 = _885;
        _889 = _885;
        _890 = _885;
        _891 = _885;
        _892 = _885;
        _893 = _885;
        _894 = _885;
        _895 = _885;
        _896 = _885;
    }
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = (cbModelParam._m0[38u].x * ((((fma(_721, cbModelParam._m0[30u].z, fma(_717, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _713)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _954 = (cbModelParam._m0[38u].y * ((((fma(_721, cbModelParam._m0[31u].z, fma(_717, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _713)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _955 = (((((fma(_721, cbModelParam._m0[32u].z, fma(_717, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _713)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        _1027 = _990 * (_957.z + (-0.5));
        _1028 = _990 * (_957.y + (-0.5));
        _1029 = _990 * (_957.x + (-0.5));
        _1030 = _1000 * (_964.z + (-0.5));
        _1031 = _1000 * (_964.y + (-0.5));
        _1032 = _1000 * (_964.x + (-0.5));
        _1033 = _1010 * (_971.z + (-0.5));
        _1034 = _1010 * (_971.y + (-0.5));
        _1035 = _1010 * (_971.x + (-0.5));
        _1036 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        _1037 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        _1038 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    }
    else
    {
        _1027 = _885;
        _1028 = _885;
        _1029 = _885;
        _1030 = _885;
        _1031 = _885;
        _1032 = _885;
        _1033 = _885;
        _1034 = _885;
        _1035 = _885;
        _1036 = _885;
        _1037 = _885;
        _1038 = _885;
    }
    float _1053 = _653 * (-0.5);
    float _1054 = _654 * (-0.5);
    float _1055 = _655 * (-0.5);
    float _1056 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_1029, _1032, _1035, _1038));
    float _1059 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_1028, _1031, _1034, _1037));
    float _1062 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_1027, _1030, _1033, _1036));
    float _1097;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1069 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_884, _888, _891, _894));
        float _1073 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_886, _889, _892, _895));
        float _1077 = dot(vec4(_1053, _1054, _1055, 1.0), vec4(_887, _890, _893, _896));
        float _1084 = dot(vec4(cbModelParam._m0[39u]), vec4(_1053, _1054, _1055, 1.0));
        _1097 = dot(vec3(isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)), isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)), isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1084) ? 0.0 : (isnan(0.0) ? _1084 : max(0.0, _1084))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1097 = 1.0;
    }
    float _1108;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1099 = dot(vec4(cbModelParam._m0[40u]), vec4(_1053, _1054, _1055, 1.0));
        _1108 = dot(vec3(isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)), isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)), isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1099) ? 0.0 : (isnan(0.0) ? _1099 : max(0.0, _1099))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1108 = 1.0;
    }
    float _1112 = (_1108 * cbModelParam._m0[1u].x) + (_1097 * (1.0 - cbModelParam._m0[1u].x));
    float _1118 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1199;
    float _1201;
    float _1203;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1166 = fma(_721, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713)) + cbModelParam._m0[13u].w;
        float _1170 = fma(_721, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713)) + cbModelParam._m0[14u].w;
        float _1174 = fma(_721, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713)) + cbModelParam._m0[15u].w;
        float _1177 = fma(_691, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689));
        float _1180 = fma(_691, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689));
        float _1183 = fma(_691, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689));
        float _1209;
        if (_1177 > 0.0)
        {
            _1209 = abs((1.0 - _1166) / _1177);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1177 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1166 + 1.0) / _1177);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1209 = frontier_phi_57_55_ladder;
        }
        float _1508;
        if (_1180 > 0.0)
        {
            _1508 = abs((1.0 - _1170) / _1180);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1180 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1170 + 1.0) / _1180);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1508 = frontier_phi_66_62_ladder;
        }
        float _1812;
        if (_1183 > 0.0)
        {
            _1812 = abs((1.0 - _1174) / _1183);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1183 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1174 + 1.0) / _1183);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _1812 = frontier_phi_80_73_ladder;
        }
        float _1814 = isnan(_1508) ? _1209 : (isnan(_1209) ? _1508 : min(_1209, _1508));
        float _1815 = isnan(_1812) ? _1814 : (isnan(_1814) ? _1812 : min(_1814, _1812));
        float _1819 = (_1815 * _1177) + _1166;
        float _1820 = (_1815 * _1180) + _1170;
        float _1821 = (_1815 * _1183) + _1174;
        float _1822 = _1815 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1822;
        float _1825 = _1822 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_1821 > _1825) || ((_1821 < _1823) || ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 < _1823) || (_1819 > _1825))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1821, cbModelParam._m0[9u].z, fma(_1820, cbModelParam._m0[9u].y, _1819 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1821, cbModelParam._m0[10u].z, fma(_1820, cbModelParam._m0[10u].y, _1819 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1821, cbModelParam._m0[11u].z, fma(_1820, cbModelParam._m0[11u].y, _1819 * cbModelParam._m0[11u].x))), _1118);
            frontier_phi_56_80_ladder = _1948.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _1948.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _1948.x * cbModelParam._m0[1u].y;
        }
        _1199 = frontier_phi_56_80_ladder_2;
        _1201 = frontier_phi_56_80_ladder_1;
        _1203 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1187 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_689, _690, _691), _1118);
        _1199 = _1187.x * cbModelParam._m0[1u].y;
        _1201 = _1187.y * cbModelParam._m0[1u].y;
        _1203 = _1187.z * cbModelParam._m0[1u].y;
    }
    float _1206 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1294;
    float _1296;
    float _1298;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1258 = fma(_721, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713)) + cbModelParam._m0[21u].w;
        float _1262 = fma(_721, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713)) + cbModelParam._m0[22u].w;
        float _1266 = fma(_721, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713)) + cbModelParam._m0[23u].w;
        float _1269 = fma(_691, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689));
        float _1272 = fma(_691, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689));
        float _1275 = fma(_691, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689));
        float _1513;
        if (_1269 > 0.0)
        {
            _1513 = abs((1.0 - _1258) / _1269);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1258 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1513 = frontier_phi_68_64_ladder;
        }
        float _1838;
        if (_1272 > 0.0)
        {
            _1838 = abs((1.0 - _1262) / _1272);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1272 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1262 + 1.0) / _1272);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _1838 = frontier_phi_82_75_ladder;
        }
        float _2010;
        if (_1275 > 0.0)
        {
            _2010 = abs((1.0 - _1266) / _1275);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1275 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1266 + 1.0) / _1275);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2010 = frontier_phi_100_93_ladder;
        }
        float _2012 = isnan(_1838) ? _1513 : (isnan(_1513) ? _1838 : min(_1513, _1838));
        float _2013 = isnan(_2010) ? _2012 : (isnan(_2012) ? _2010 : min(_2012, _2010));
        float _2017 = (_2013 * _1269) + _1258;
        float _2018 = (_2013 * _1272) + _1262;
        float _2019 = (_2013 * _1275) + _1266;
        float _2020 = _2013 * 9.9999997473787516355514526367188e-05;
        float _2021 = (-1.0) - _2020;
        float _2023 = _2020 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2019 > _2023) || ((_2019 < _2021) || ((_2018 > _2023) || ((_2018 < _2021) || ((_2017 < _2021) || (_2017 > _2023))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2188 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2019, cbModelParam._m0[17u].z, fma(_2018, cbModelParam._m0[17u].y, _2017 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2019, cbModelParam._m0[18u].z, fma(_2018, cbModelParam._m0[18u].y, _2017 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2019, cbModelParam._m0[19u].z, fma(_2018, cbModelParam._m0[19u].y, _2017 * cbModelParam._m0[19u].x))), _1206);
            frontier_phi_65_100_ladder = _2188.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2188.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2188.x * cbModelParam._m0[1u].z;
        }
        _1294 = frontier_phi_65_100_ladder_2;
        _1296 = frontier_phi_65_100_ladder_1;
        _1298 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1278 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_689, _690, _691), _1206);
        _1294 = _1278.x * cbModelParam._m0[1u].z;
        _1296 = _1278.y * cbModelParam._m0[1u].z;
        _1298 = _1278.z * cbModelParam._m0[1u].z;
    }
    float _1310 = _688 * 0.01200000010430812835693359375;
    float _1312 = _1310 * ((cbModelParam._m0[1u].w * (_1294 - _1199)) + _1199);
    float _1313 = _1310 * ((cbModelParam._m0[1u].w * (_1296 - _1201)) + _1201);
    float _1314 = _1310 * ((cbModelParam._m0[1u].w * (_1298 - _1203)) + _1203);
    float _1335 = fma(_1314, cbSceneParam._m0[89u].z, fma(_1313, cbSceneParam._m0[89u].y, _1312 * cbSceneParam._m0[89u].x));
    float _1338 = fma(_1314, cbSceneParam._m0[90u].z, fma(_1313, cbSceneParam._m0[90u].y, _1312 * cbSceneParam._m0[90u].x));
    float _1341 = fma(_1314, cbSceneParam._m0[91u].z, fma(_1313, cbSceneParam._m0[91u].y, _1312 * cbSceneParam._m0[91u].x));
    vec4 _1349 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_675, _676));
    float _1351 = _1349.w;
    uint _1367 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1371 = floatBitsToUint(cbInstanceData._m0[_1367 + 5u]);
    uint _1373 = _1371.x * 14u;
    uint _1374 = _1373 + 13u;
    float _1379 = _688 + (-1.0);
    float _1383 = (cbLight._m0[_1374].x * _1379) + 1.0;
    float _1384 = (cbLight._m0[_1374].y * _1379) + 1.0;
    uint _1385 = _1373 + 8u;
    float _1396 = cbLight._m0[_1373].x + _653;
    float _1397 = cbLight._m0[_1373].y + _654;
    float _1398 = cbLight._m0[_1373].z + _655;
    float _1402 = inversesqrt(dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398)));
    float _1406 = dot(vec3(0.0), vec3(cbLight._m0[_1373].xyz));
    float _2797 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1409 = isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0));
    float _1410 = dot(vec3(0.0), vec3(_653, _654, _655));
    float _2808 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
    float _1413 = isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0));
    float _1414 = dot(vec3(cbLight._m0[_1373].xyz), vec3(_1396 * _1402, _1397 * _1402, _1398 * _1402));
    float _2819 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1425 = (exp2(log2(1.0 - (isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1431 = (0.5 / ((_1409 + 9.9999999392252902907785028219223e-09) + _1413)) * _1409;
    float _2830 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1433 = (isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0))) * 0.31831014156341552734375;
    float _1435 = isnan(1.0) ? _1383 : (isnan(_1383) ? 1.0 : min(_1383, 1.0));
    uint _1448 = _1373 + 9u;
    uint _1454 = _1373 | 1u;
    float _1460 = cbLight._m0[_1454].x + _653;
    float _1461 = cbLight._m0[_1454].y + _654;
    float _1462 = cbLight._m0[_1454].z + _655;
    float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
    float _1470 = dot(vec3(0.0), vec3(cbLight._m0[_1454].xyz));
    float _2846 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1473 = isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0));
    float _1474 = dot(vec3(cbLight._m0[_1454].xyz), vec3(_1460 * _1466, _1461 * _1466, _1462 * _1466));
    float _2857 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
    float _1483 = (exp2(log2(1.0 - (isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1487 = (0.5 / ((_1473 + 9.9999999392252902907785028219223e-09) + _1413)) * _1473;
    float _2868 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
    float _1489 = (isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0))) * 0.31831014156341552734375;
    float _1490 = isnan(1.0) ? _1384 : (isnan(_1384) ? 1.0 : min(_1384, 1.0));
    float _1500 = (((_1483 * cbLight._m0[_1448].x) * _1489) * _1490) + ((((cbLight._m0[_1385].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1351))) * _1425) * _1433) * _1435);
    float _1501 = (((_1483 * cbLight._m0[_1448].y) * _1489) * _1490) + ((((cbLight._m0[_1385].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1351))) * _1425) * _1433) * _1435);
    float _1502 = (((_1483 * cbLight._m0[_1448].z) * _1489) * _1490) + ((((cbLight._m0[_1385].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1351))) * _1425) * _1433) * _1435);
    float _1618;
    float _1620;
    float _1622;
    if (_1371.y == 0u)
    {
        float _1558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1559 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1558;
        float _1560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1558;
        float _1561 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1558;
        uvec4 _1573 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1574 = _1573.x;
        uint _1585 = uint((float(_1573.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _1574))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _1574)));
        float _1595 = (log2(_1561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1596 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        uint _1599 = uint(isnan(14.0) ? _1596 : (isnan(_1596) ? 14.0 : min(_1596, 14.0)));
        uvec4 _1604 = texelFetch(g_lightClusterGridBuffer, int(((_1599 << 2u) + (_1585 << 6u)) >> 2u));
        uint _1605 = _1604.x;
        uint _1606 = _1573.z;
        float _1695;
        float _1697;
        float _1699;
        if (((((1u << ((_1606 >> 4u) & 15u)) + 4294967295u) & _1605) == 0u) || ((_1606 & 240u) == 0u))
        {
            _1695 = 0.0;
            _1697 = 0.0;
            _1699 = 0.0;
        }
        else
        {
            float _1696;
            float _1698;
            float _1700;
            float _1863 = 0.0;
            float _1864 = 0.0;
            float _1865 = 0.0;
            uint _1866 = 0u;
            uint _1875;
            bool _1876;
            for (;;)
            {
                _1875 = texelFetch(g_lightClassification, int((((_1599 << 5u) + (_1585 << 9u)) + (_1866 << 2u)) >> 2u)).x;
                _1876 = _1875 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_1876)
                {
                    frontier_phi_95_pred = _1865;
                    frontier_phi_95_pred_1 = _1864;
                    frontier_phi_95_pred_2 = _1863;
                }
                else
                {
                    float _2050;
                    float _2051;
                    float _2052;
                    uint _2053;
                    _2050 = _1863;
                    _2051 = _1864;
                    _2052 = _1865;
                    _2053 = _1875;
                    float _1957;
                    float _1958;
                    float _1959;
                    for (;;)
                    {
                        uint _2057 = uint(findLSB(_2053)) + (_1866 << 5u);
                        uint _2054 = (_2053 + 4294967295u) & _2053;
                        uint _2059 = _2057 * 48u;
                        vec4 _2073 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2059)).x, texelFetch(g_PointLightRenderingBuffer, int(_2059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2059 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2059 + 3u)).x));
                        uint _2090 = (_2057 * 48u) + 8u;
                        vec3 _2101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2090)).x, texelFetch(g_PointLightRenderingBuffer, int(_2090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2090 + 2u)).x));
                        float _2105 = _2073.x - _1559;
                        float _2106 = _2073.y - _1560;
                        float _2107 = _2073.z - _1561;
                        float _2108 = dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107));
                        float _2111 = inversesqrt(_2108);
                        float _2120 = 1.0 - (_2108 * _2073.w);
                        float _2894 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
                        float _2122 = sqrt(_2108) * uintBitsToFloat(uvec4(_2080, _2081, _2082, texelFetch(g_PointLightRenderingBuffer, int(((_2057 * 48u) + 4u) + 3u)).x)).w;
                        float _2125 = 1.39999997615814208984375 / (_2122 + 1.39999997615814208984375);
                        float _2126 = _2125 * _2125;
                        float _2129 = ((1.0 - _2126) * dot(vec3(0.0), vec3(_2111 * _2105, _2111 * _2106, _2111 * _2107))) + _2126;
                        float _2131 = (-0.0) - _1559;
                        float _2132 = (-0.0) - _1560;
                        float _2133 = (-0.0) - _1561;
                        float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
                        float _2141 = dot(vec3(0.0), vec3(_2137 * _2131, _2137 * _2132, _2137 * _2133));
                        float _2905 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
                        float _2916 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
                        float _2145 = isnan(1.0) ? _2916 : (isnan(_2916) ? 1.0 : min(_2916, 1.0));
                        float _2149 = (0.5 / (((isnan(1.0) ? _2905 : (isnan(_2905) ? 1.0 : min(_2905, 1.0))) + 9.9999999392252902907785028219223e-09) + _2145)) * _2145;
                        float _2927 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
                        float _2158 = (((isnan(1.0) ? _2927 : (isnan(_2927) ? 1.0 : min(_2927, 1.0))) * 3.1415927410125732421875) / (((_2122 * _2122) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2894 : (isnan(_2894) ? 1.0 : min(_2894, 1.0)));
                        _1957 = (_2158 * _2101.x) + _2050;
                        _1958 = (_2158 * _2101.y) + _2051;
                        _1959 = (_2158 * _2101.z) + _2052;
                        if (_2054 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2050 = _1957;
                            _2051 = _1958;
                            _2052 = _1959;
                            _2053 = _2054;
                        }
                    }
                    frontier_phi_95_pred = _1959;
                    frontier_phi_95_pred_1 = _1958;
                    frontier_phi_95_pred_2 = _1957;
                }
                _1700 = frontier_phi_95_pred;
                _1698 = frontier_phi_95_pred_1;
                _1696 = frontier_phi_95_pred_2;
                uint _1867 = _1866 + 1u;
                if (_1867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1863 = _1696;
                    _1864 = _1698;
                    _1865 = _1700;
                    _1866 = _1867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1695 = _1696;
            _1697 = _1698;
            _1699 = _1700;
        }
        uvec4 _1703 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1704 = _1703.z;
        uint _1706 = (_1704 >> 8u) & 15u;
        float _1843;
        float _1845;
        float _1847;
        if (((4294967295u << _1706) & _1605) == 0u)
        {
            _1843 = _1695;
            _1845 = _1697;
            _1847 = _1699;
        }
        else
        {
            float _1859 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1706 < ((_1704 >> 12u) & 15u))
            {
                float _1844;
                float _1846;
                float _1848;
                float _2036 = _1695;
                float _2037 = _1697;
                float _2038 = _1699;
                uint _2039 = _1706;
                uint _2048;
                bool _2049;
                for (;;)
                {
                    _2048 = texelFetch(g_lightClassification, int((((_1599 << 5u) + (_1585 << 9u)) + (_2039 << 2u)) >> 2u)).x;
                    _2049 = _2048 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2049)
                    {
                        frontier_phi_109_pred = _2038;
                        frontier_phi_109_pred_1 = _2037;
                        frontier_phi_109_pred_2 = _2036;
                    }
                    else
                    {
                        float _2193;
                        float _2194;
                        float _2195;
                        float _2414;
                        float _2415;
                        float _2416;
                        float _2203 = _2036;
                        float _2204 = _2037;
                        float _2205 = _2038;
                        uint _2206 = _2048;
                        uint _2207;
                        uint _2217;
                        vec4 _2232;
                        float _2233;
                        vec3 _2245;
                        vec4 _2260;
                        vec4 _2275;
                        float _2321;
                        bool _2322;
                        for (;;)
                        {
                            _2217 = ((_2039 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2206));
                            _2207 = (_2206 + 4294967295u) & _2206;
                            uint _2219 = _2217 * 40u;
                            _2232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 3u)).x));
                            _2233 = _2232.w;
                            uint _2235 = (_2217 * 40u) + 8u;
                            _2245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2235 + 2u)).x));
                            uint _2247 = (_2217 * 40u) + 16u;
                            _2260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2247 + 3u)).x));
                            uint _2262 = (_2217 * 40u) + 20u;
                            _2275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2262 + 3u)).x));
                            uint _2277 = (_2217 * 40u) + 24u;
                            vec4 _2290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2277 + 3u)).x));
                            uint _2296 = (_2217 * 40u) + 28u;
                            vec4 _2309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2296 + 3u)).x));
                            _2321 = fma(_1561, _2309.z, fma(_1560, _2309.y, _2309.x * _1559)) + _2309.w;
                            _2322 = !((fma(_1561, _2290.z, fma(_1560, _2290.y, _2290.x * _1559)) + _2290.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2322)
                            {
                                float _2356 = _2232.x - _1559;
                                float _2357 = _2232.y - _1560;
                                float _2358 = _2232.z - _1561;
                                float _2359 = dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358));
                                float _2362 = inversesqrt(_2359);
                                float _2369 = 1.0 - (_2359 / (_2233 * _2233));
                                float _2938 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
                                float _2371 = sqrt(_2359) * uintBitsToFloat(uvec4(_2325, _2326, _2327, texelFetch(g_SpotLightRenderingBuffer, int(((_2217 * 40u) + 4u) + 3u)).x)).w;
                                float _2373 = 1.39999997615814208984375 / (_2371 + 1.39999997615814208984375);
                                float _2374 = _2373 * _2373;
                                float _2377 = (fma(_1561, _2260.z, fma(_1560, _2260.y, _2260.x * _1559)) + _2260.w) / _2321;
                                float _2378 = (fma(_1561, _2275.z, fma(_1560, _2275.y, _2275.x * _1559)) + _2275.w) / _2321;
                                float _2382 = 1.0 - dot(vec2(_2377, _2378), vec2(_2377, _2378));
                                float _2949 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
                                float _2390 = dot(vec3(0.0), vec3((-0.0) - (_1559 * _1859), (-0.0) - (_1560 * _1859), (-0.0) - (_1561 * _1859)));
                                float _2960 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
                                float _2398 = ((1.0 - _2374) * dot(vec3(0.0), vec3(_2362 * _2356, _2362 * _2357, _2362 * _2358))) + _2374;
                                float _2971 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
                                float _2399 = isnan(1.0) ? _2971 : (isnan(_2971) ? 1.0 : min(_2971, 1.0));
                                float _2403 = (0.5 / (((isnan(1.0) ? _2960 : (isnan(_2960) ? 1.0 : min(_2960, 1.0))) + 9.9999999392252902907785028219223e-09) + _2399)) * _2399;
                                float _2982 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
                                float _2410 = ((isnan(1.0) ? _2949 : (isnan(_2949) ? 1.0 : min(_2949, 1.0))) * (isnan(1.0) ? _2938 : (isnan(_2938) ? 1.0 : min(_2938, 1.0)))) * (((isnan(1.0) ? _2982 : (isnan(_2982) ? 1.0 : min(_2982, 1.0))) * 3.1415927410125732421875) / (((_2371 * _2371) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2410 * _2245.y;
                                frontier_phi_115_pred_1 = _2410 * _2245.x;
                                frontier_phi_115_pred_2 = _2410 * _2245.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2415 = frontier_phi_115_pred;
                            _2414 = frontier_phi_115_pred_1;
                            _2416 = frontier_phi_115_pred_2;
                            _2193 = _2414 + _2203;
                            _2194 = _2415 + _2204;
                            _2195 = _2416 + _2205;
                            if (_2207 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2203 = _2193;
                                _2204 = _2194;
                                _2205 = _2195;
                                _2206 = _2207;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2195;
                        frontier_phi_109_pred_1 = _2194;
                        frontier_phi_109_pred_2 = _2193;
                    }
                    _1848 = frontier_phi_109_pred;
                    _1846 = frontier_phi_109_pred_1;
                    _1844 = frontier_phi_109_pred_2;
                    uint _2040 = _2039 + 1u;
                    if (_2040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2036 = _1844;
                        _2037 = _1846;
                        _2038 = _1848;
                        _2039 = _2040;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _1848;
                frontier_phi_84_85_ladder_1 = _1846;
                frontier_phi_84_85_ladder_2 = _1844;
            }
            else
            {
                frontier_phi_84_85_ladder = _1699;
                frontier_phi_84_85_ladder_1 = _1697;
                frontier_phi_84_85_ladder_2 = _1695;
            }
            _1843 = frontier_phi_84_85_ladder_2;
            _1845 = frontier_phi_84_85_ladder_1;
            _1847 = frontier_phi_84_85_ladder;
        }
        float _1852 = isnan(1.0) ? _688 : (isnan(_688) ? 1.0 : min(_688, 1.0));
        _1618 = ((_1843 * 0.039999999105930328369140625) * _1852) + _1500;
        _1620 = ((_1845 * 0.039999999105930328369140625) * _1852) + _1501;
        _1622 = ((_1847 * 0.039999999105930328369140625) * _1852) + _1502;
    }
    else
    {
        _1618 = _1500;
        _1620 = _1501;
        _1622 = _1502;
    }
    uint _1628 = _1367 + 9u;
    uint _1629 = _1628 + uint(cbMatDynParam._m0[0u].w);
    float _1644 = (cbInstanceData._m0[_1629].x * ((_623 * ((_579.x * cbMtdParam._m0[14u].x) - _510)) + _510)) + ((_1618 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _1112)) * cbPerFrame._m0[3u].x);
    float _1645 = (cbInstanceData._m0[_1629].y * ((_623 * ((_579.y * cbMtdParam._m0[14u].y) - _511)) + _511)) + ((_1620 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _1112)) * cbPerFrame._m0[3u].x);
    float _1646 = (cbInstanceData._m0[_1629].z * ((_623 * ((_579.z * cbMtdParam._m0[14u].z) - _512)) + _512)) + ((_1622 + ((isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))) * _1112)) * cbPerFrame._m0[3u].x);
    float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _1649 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    uint _1650 = _1367 + 6u;
    float _1658 = _675 / cbSceneParam._m0[86u].x;
    float _1659 = _676 / cbSceneParam._m0[86u].y;
    vec4 _1673 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1658, _1659, (log2((isnan(cbSceneParam._m0[77u].w) ? _648 : (isnan(_648) ? cbSceneParam._m0[77u].w : min(_648, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1675 = _1673.x;
    float _1676 = _1673.y;
    float _1677 = _1673.z;
    float _1678 = _1673.w;
    float _1752;
    float _1754;
    float _1756;
    float _1758;
    if (_648 > cbSceneParam._m0[78u].w)
    {
        float _1714 = isnan(_648) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _648 : min(cbSceneParam._m0[80u].w, _648));
        float _1715 = _1714 / _648;
        float _1726 = _1715 * _259;
        float _1727 = _260 * _1715;
        float _1728 = (-0.0) - _1727;
        float _1729 = _1715 * _261;
        float _1731 = (cbSceneParam._m0[77u].w * _1728) / _1714;
        float _1732 = _1731 + cbSceneParam._m0[79u].w;
        float _1733 = cbSceneParam._m0[79u].w - _1727;
        float _1739 = sqrt(((_1726 * _1726) + (_1727 * _1727)) + (_1729 * _1729));
        float _1742 = (1.0 - (cbSceneParam._m0[77u].w / _1714)) * _1739;
        float _1748 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1750 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1967;
        if (abs((_1728 - _1731) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1967 = ((((_1732 > 0.0) ? exp2(_1748 * _1732) : (2.0 - exp2(_1750 * _1732))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1742;
        }
        else
        {
            float _1889 = 1.0 / cbSceneParam._m0[80u].x;
            float _1890 = isnan(_1733) ? _1732 : (isnan(_1732) ? _1733 : max(_1732, _1733));
            float _1891 = isnan(_1733) ? _1732 : (isnan(_1732) ? _1733 : min(_1732, _1733));
            float _1900 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : min(_1890, 0.0));
            float _1901 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : min(_1891, 0.0));
            _1967 = ((abs(_1739 / _1728) * cbSceneParam._m0[80u].y) * ((((_1900 - _1901) * 2.0) - ((exp2(_1748 * (isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0)))) - exp2(_1748 * (isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))))) * _1889)) - ((exp2(_1750 * _1900) - exp2(_1750 * _1901)) * _1889))) + (_1742 * cbSceneParam._m0[80u].z);
        }
        vec4 _1969 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1658, _1659, 1.0), 0.0);
        float _1978 = exp2((_1967 * (-1.44269502162933349609375)) * (1.0 - _1969.w));
        float _1979 = log2(_1978);
        float _1995 = log2(_1678);
        _1752 = (exp2(_1995 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1979 * cbSceneParam._m0[78u].x)) * _1969.x) / cbSceneParam._m0[78u].x)) + _1675;
        _1754 = (exp2(_1995 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1979 * cbSceneParam._m0[78u].y)) * _1969.y) / cbSceneParam._m0[78u].y)) + _1676;
        _1756 = (exp2(_1995 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1979 * cbSceneParam._m0[78u].z)) * _1969.z) / cbSceneParam._m0[78u].z)) + _1677;
        _1758 = _1978 * _1678;
    }
    else
    {
        _1752 = _1675;
        _1754 = _1676;
        _1756 = _1677;
        _1758 = _1678;
    }
    bool _2005;
    vec4 _1768;
    vec4 _1791;
    float _1793;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    bool _1811;
    for (;;)
    {
        _1768 = cbMatDynParam._m0[0u];
        float _1770 = roundEven(_1768.y);
        bool _1771 = _1770 == 3.0;
        float _1773 = log2(_1758);
        float _1780 = exp2(_1773 * cbSceneParam._m0[78u].x) * _1647;
        float _1781 = exp2(_1773 * cbSceneParam._m0[78u].y) * _1648;
        float _1782 = exp2(_1773 * cbSceneParam._m0[78u].z) * _1649;
        float _1789 = _662 + (-0.5);
        _1791 = cbMtdParam._m0[1u];
        _1793 = _1791.y * _1789;
        float _1796 = (_1770 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1797 = _1796 * (_1771 ? _1780 : (_1780 + (cbSceneParam._m0[72u].w * _1752)));
        _1798 = _1796 * (_1771 ? _1781 : (_1781 + (cbSceneParam._m0[72u].w * _1754)));
        _1799 = _1796 * (_1771 ? _1782 : (_1782 + (cbSceneParam._m0[72u].w * _1756)));
        _1800 = _1789 * 0.999000012874603271484375;
        _1811 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1811)
        {
            if ((cbInstanceData._m0[_1367 + 7u].x + _1800) < 0.5)
            {
                _2005 = true;
                break;
            }
        }
        uint _1924 = _1628 + uint(_1768.w);
        if ((cbInstanceData._m0[_1924].w < 1.0) && ((cbInstanceData._m0[_1924].w + _1800) < 0.5))
        {
            _2005 = true;
            break;
        }
        if ((_1793 + 1.0) < _1791.x)
        {
            _2005 = true;
            break;
        }
        _2005 = false;
        break;
    }
    float _2163;
    if (_2005)
    {
        discard_state = true;
        _2163 = 0.0;
    }
    else
    {
        _2163 = cbInstanceData._m0[_1650].w;
    }
    SV_Target.x = _1797;
    SV_Target.y = _1798;
    SV_Target.z = _1799;
    SV_Target.w = _2163;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1650].w;
    discard_exit();
}


