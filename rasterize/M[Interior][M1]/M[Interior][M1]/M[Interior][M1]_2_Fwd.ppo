#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _714;
uint _1858;
uint _1859;
uint _1860;
uint _2094;
uint _2095;
uint _2096;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _172 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _173 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _174 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _179 = inversesqrt(dot(vec3(_172, _173, _174), vec3(_172, _173, _174)));
    float _186 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _251 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _241);
    float _252 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _241);
    float _253 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _241);
    float _279 = cbMtdParam._m0[22u].y + _251;
    float _280 = cbMtdParam._m0[22u].z + _252;
    float _281 = cbMtdParam._m0[22u].w + _253;
    float _295 = (-0.0) - dot(vec3(_279, _280, _281), vec3(_179 * _172, _179 * _173, _179 * _174));
    float _296 = (-0.0) - dot(vec3(_279, _280, _281), vec3(_193 * TANGENT.x, _193 * TANGENT.y, _193 * TANGENT.z));
    float _297 = (-0.0) - dot(vec3(_279, _280, _281), vec3((-0.0) - (_186 * NORMAL.x), (-0.0) - (_186 * NORMAL.y), (-0.0) - (_186 * NORMAL.z)));
    float _301 = inversesqrt(dot(vec3(_295, _296, _297), vec3(_295, _296, _297)));
    float _302 = _301 * _297;
    float _304 = (cbMtdParam._m0[19u].x * _295) * _301;
    float _306 = (cbMtdParam._m0[18u].w * _296) * _301;
    float _307 = fract(TEXCOORD.x);
    float _308 = fract(TEXCOORD.y);
    float _314;
    if (_304 > 0.0)
    {
        _314 = (1.0 - _307) / _304;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_304 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _307) / _304;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _314 = frontier_phi_3_2_ladder;
    }
    float _322;
    if (_306 > 0.0)
    {
        _322 = (1.0 - _308) / _306;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_306 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _308) / _306;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _322 = frontier_phi_7_6_ladder;
    }
    bool _324 = _302 > 0.0;
    float _326 = _324 ? (cbMtdParam._m0[15u].x / _302) : 5000.0;
    float _327 = isnan(_322) ? _314 : (isnan(_314) ? _322 : min(_314, _322));
    float _328 = isnan(_326) ? _327 : (isnan(_327) ? _326 : min(_327, _326));
    float _332 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _333 = _307 + (-0.5);
    float _336 = _308 + (-0.5);
    float _339 = ((_328 * _302) + _332) / _332;
    vec4 _365 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_333 + (_328 * _304)) / _339) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_336 + (_328 * _306)) / _339) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _376 = cbMtdParam._m0[9u].x * _365.x;
    float _377 = cbMtdParam._m0[9u].y * _365.y;
    float _378 = cbMtdParam._m0[9u].z * _365.z;
    float _400 = (cbMtdParam._m0[21u].x * _295) * _301;
    float _402 = (cbMtdParam._m0[20u].w * _296) * _301;
    bool _403 = _400 > 0.0;
    float _408;
    if (_403)
    {
        _408 = (1.0 - _307) / _400;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _307) / _400;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _408 = frontier_phi_11_10_ladder;
    }
    bool _410 = _402 > 0.0;
    float _415;
    if (_410)
    {
        _415 = (1.0 - _308) / _402;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _308) / _402;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _415 = frontier_phi_15_14_ladder;
    }
    float _418 = _324 ? (cbMtdParam._m0[16u].z / _302) : 5000.0;
    float _419 = isnan(_415) ? _408 : (isnan(_408) ? _415 : min(_408, _415));
    float _420 = isnan(_418) ? _419 : (isnan(_419) ? _418 : min(_419, _418));
    float _424 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _428 = ((_420 * _302) + _424) / _424;
    float _433 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _435 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _451 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_333 + (_420 * _400)) / _428) + 0.5) + _433) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_336 + (_420 * _402)) / _428) + 0.5) + _435) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _463;
    if (_403)
    {
        _463 = (1.0 - _307) / _400;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _307) / _400;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _463 = frontier_phi_19_18_ladder;
    }
    float _469;
    if (_410)
    {
        _469 = (1.0 - _308) / _402;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _308) / _402;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _469 = frontier_phi_23_22_ladder;
    }
    float _471 = isnan(_469) ? _463 : (isnan(_463) ? _469 : min(_463, _469));
    float _472 = isnan(_418) ? _471 : (isnan(_471) ? _418 : min(_471, _418));
    float _479 = ((_472 * _302) + _424) / _424;
    vec4 _493 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_333 + (_472 * _400)) / _479) + 0.5) + _433) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_336 + (_472 * _402)) / _479) + 0.5) + _435) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _495 = _493.w;
    float _520 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _524 = inversesqrt(dot(vec3(_251, _252, _253), vec3(_251, _252, _253)));
    float _525 = _251 * _524;
    float _526 = _252 * _524;
    float _527 = _253 * _524;
    float _533 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _534 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _543 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_533 * cbSceneParam._m0[86u].x, _534 * cbSceneParam._m0[86u].y));
    float _546 = _543.x * TEXCOORD.z;
    float _547 = (-0.0) - _525;
    float _548 = (-0.0) - _526;
    float _549 = (-0.0) - _527;
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _575 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _579 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _713;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _635 = (cbModelParam._m0[37u].x * ((((fma(_579, cbModelParam._m0[26u].z, fma(_575, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _571)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _637 = (cbModelParam._m0[37u].y * ((((fma(_579, cbModelParam._m0[27u].z, fma(_575, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _571)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _638 = (((((fma(_579, cbModelParam._m0[28u].z, fma(_575, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _571)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _686 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _696 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _706 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _707 = _706 * (_662.x + (-0.5));
        float _708 = _706 * (_662.y + (-0.5));
        float _709 = _706 * (_662.z + (-0.5));
        _713 = _675 * (_641.z + (-0.5));
        _715 = _675 * (_641.y + (-0.5));
        _716 = _675 * (_641.x + (-0.5));
        _717 = _686 * (_648.z + (-0.5));
        _718 = _686 * (_648.y + (-0.5));
        _719 = _686 * (_648.x + (-0.5));
        _720 = _696 * (_655.z + (-0.5));
        _721 = _696 * (_655.y + (-0.5));
        _722 = _696 * (_655.x + (-0.5));
        _723 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        _724 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        _725 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    }
    else
    {
        _713 = _714;
        _715 = _714;
        _716 = _714;
        _717 = _714;
        _718 = _714;
        _719 = _714;
        _720 = _714;
        _721 = _714;
        _722 = _714;
        _723 = _714;
        _724 = _714;
        _725 = _714;
    }
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _779 = (cbModelParam._m0[38u].x * ((((fma(_579, cbModelParam._m0[30u].z, fma(_575, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _571)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _780 = (cbModelParam._m0[38u].y * ((((fma(_579, cbModelParam._m0[31u].z, fma(_575, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _571)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _781 = (((((fma(_579, cbModelParam._m0[32u].z, fma(_575, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _571)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_779, _780, _781), 0.0);
        float _816 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _826 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _836 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _846 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_804.x + (-0.5));
        float _848 = _846 * (_804.y + (-0.5));
        float _849 = _846 * (_804.z + (-0.5));
        _853 = _816 * (_783.z + (-0.5));
        _854 = _816 * (_783.y + (-0.5));
        _855 = _816 * (_783.x + (-0.5));
        _856 = _826 * (_790.z + (-0.5));
        _857 = _826 * (_790.y + (-0.5));
        _858 = _826 * (_790.x + (-0.5));
        _859 = _836 * (_797.z + (-0.5));
        _860 = _836 * (_797.y + (-0.5));
        _861 = _836 * (_797.x + (-0.5));
        _862 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        _863 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        _864 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    }
    else
    {
        _853 = _714;
        _854 = _714;
        _855 = _714;
        _856 = _714;
        _857 = _714;
        _858 = _714;
        _859 = _714;
        _860 = _714;
        _861 = _714;
        _862 = _714;
        _863 = _714;
        _864 = _714;
    }
    float _879 = _525 * (-0.5);
    float _880 = _526 * (-0.5);
    float _881 = _527 * (-0.5);
    float _882 = dot(vec4(_879, _880, _881, 1.0), vec4(_855, _858, _861, _864));
    float _885 = dot(vec4(_879, _880, _881, 1.0), vec4(_854, _857, _860, _863));
    float _888 = dot(vec4(_879, _880, _881, 1.0), vec4(_853, _856, _859, _862));
    float _923;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _895 = dot(vec4(_879, _880, _881, 1.0), vec4(_713, _717, _720, _723));
        float _899 = dot(vec4(_879, _880, _881, 1.0), vec4(_715, _718, _721, _724));
        float _903 = dot(vec4(_879, _880, _881, 1.0), vec4(_716, _719, _722, _725));
        float _910 = dot(vec4(cbModelParam._m0[39u]), vec4(_879, _880, _881, 1.0));
        _923 = dot(vec3(isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0)), isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)), isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_910) ? 0.0 : (isnan(0.0) ? _910 : max(0.0, _910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _923 = 1.0;
    }
    float _934;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _925 = dot(vec4(cbModelParam._m0[40u]), vec4(_879, _880, _881, 1.0));
        _934 = dot(vec3(isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)), isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0)), isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_925) ? 0.0 : (isnan(0.0) ? _925 : max(0.0, _925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _934 = 1.0;
    }
    float _938 = (_934 * cbModelParam._m0[1u].x) + (_923 * (1.0 - cbModelParam._m0[1u].x));
    float _944 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1027;
    float _1029;
    float _1031;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _994 = fma(_579, cbModelParam._m0[13u].z, fma(_575, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _571)) + cbModelParam._m0[13u].w;
        float _998 = fma(_579, cbModelParam._m0[14u].z, fma(_575, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _571)) + cbModelParam._m0[14u].w;
        float _1002 = fma(_579, cbModelParam._m0[15u].z, fma(_575, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _571)) + cbModelParam._m0[15u].w;
        float _1005 = fma(_549, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _547));
        float _1008 = fma(_549, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _547));
        float _1011 = fma(_549, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _547));
        float _1037;
        if (_1005 > 0.0)
        {
            _1037 = abs((1.0 - _994) / _1005);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1005 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_994 + 1.0) / _1005);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1037 = frontier_phi_38_36_ladder;
        }
        float _1315;
        if (_1008 > 0.0)
        {
            _1315 = abs((1.0 - _998) / _1008);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1008 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_998 + 1.0) / _1008);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1315 = frontier_phi_47_43_ladder;
        }
        float _1611;
        if (_1011 > 0.0)
        {
            _1611 = abs((1.0 - _1002) / _1011);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1011 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1002 + 1.0) / _1011);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1611 = frontier_phi_61_54_ladder;
        }
        float _1613 = isnan(_1315) ? _1037 : (isnan(_1037) ? _1315 : min(_1037, _1315));
        float _1614 = isnan(_1611) ? _1613 : (isnan(_1613) ? _1611 : min(_1613, _1611));
        float _1618 = (_1614 * _1005) + _994;
        float _1619 = (_1614 * _1008) + _998;
        float _1620 = (_1614 * _1011) + _1002;
        float _1621 = _1614 * 9.9999997473787516355514526367188e-05;
        float _1622 = (-1.0) - _1621;
        float _1624 = _1621 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1620 > _1624) || ((_1620 < _1622) || ((_1619 > _1624) || ((_1619 < _1622) || ((_1618 < _1622) || (_1618 > _1624))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1731 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1620, cbModelParam._m0[9u].z, fma(_1619, cbModelParam._m0[9u].y, _1618 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1620, cbModelParam._m0[10u].z, fma(_1619, cbModelParam._m0[10u].y, _1618 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1620, cbModelParam._m0[11u].z, fma(_1619, cbModelParam._m0[11u].y, _1618 * cbModelParam._m0[11u].x))), _944);
            frontier_phi_37_61_ladder = _1731.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _1731.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _1731.x * cbModelParam._m0[1u].y;
        }
        _1027 = frontier_phi_37_61_ladder_2;
        _1029 = frontier_phi_37_61_ladder_1;
        _1031 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1015 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_547, _548, _549), _944);
        _1027 = _1015.x * cbModelParam._m0[1u].y;
        _1029 = _1015.y * cbModelParam._m0[1u].y;
        _1031 = _1015.z * cbModelParam._m0[1u].y;
    }
    float _1034 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1122;
    float _1124;
    float _1126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1086 = fma(_579, cbModelParam._m0[21u].z, fma(_575, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _571)) + cbModelParam._m0[21u].w;
        float _1090 = fma(_579, cbModelParam._m0[22u].z, fma(_575, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _571)) + cbModelParam._m0[22u].w;
        float _1094 = fma(_579, cbModelParam._m0[23u].z, fma(_575, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _571)) + cbModelParam._m0[23u].w;
        float _1097 = fma(_549, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _547));
        float _1100 = fma(_549, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _547));
        float _1103 = fma(_549, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _547));
        float _1320;
        if (_1097 > 0.0)
        {
            _1320 = abs((1.0 - _1086) / _1097);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1097 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1086 + 1.0) / _1097);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1320 = frontier_phi_49_45_ladder;
        }
        float _1637;
        if (_1100 > 0.0)
        {
            _1637 = abs((1.0 - _1090) / _1100);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1100 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1090 + 1.0) / _1100);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1637 = frontier_phi_63_56_ladder;
        }
        float _1788;
        if (_1103 > 0.0)
        {
            _1788 = abs((1.0 - _1094) / _1103);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1103 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1094 + 1.0) / _1103);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1788 = frontier_phi_77_72_ladder;
        }
        float _1790 = isnan(_1637) ? _1320 : (isnan(_1320) ? _1637 : min(_1320, _1637));
        float _1791 = isnan(_1788) ? _1790 : (isnan(_1790) ? _1788 : min(_1790, _1788));
        float _1795 = (_1791 * _1097) + _1086;
        float _1796 = (_1791 * _1100) + _1090;
        float _1797 = (_1791 * _1103) + _1094;
        float _1798 = _1791 * 9.9999997473787516355514526367188e-05;
        float _1799 = (-1.0) - _1798;
        float _1801 = _1798 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_1797 > _1801) || ((_1797 < _1799) || ((_1796 > _1801) || ((_1796 < _1799) || ((_1795 < _1799) || (_1795 > _1801))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1957 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1797, cbModelParam._m0[17u].z, fma(_1796, cbModelParam._m0[17u].y, _1795 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1797, cbModelParam._m0[18u].z, fma(_1796, cbModelParam._m0[18u].y, _1795 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1797, cbModelParam._m0[19u].z, fma(_1796, cbModelParam._m0[19u].y, _1795 * cbModelParam._m0[19u].x))), _1034);
            frontier_phi_46_77_ladder = _1957.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _1957.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _1957.y * cbModelParam._m0[1u].z;
        }
        _1122 = frontier_phi_46_77_ladder_1;
        _1124 = frontier_phi_46_77_ladder_2;
        _1126 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_547, _548, _549), _1034);
        _1122 = _1106.x * cbModelParam._m0[1u].z;
        _1124 = _1106.y * cbModelParam._m0[1u].z;
        _1126 = _1106.z * cbModelParam._m0[1u].z;
    }
    float _1138 = _546 * 0.01200000010430812835693359375;
    float _1140 = _1138 * ((cbModelParam._m0[1u].w * (_1122 - _1027)) + _1027);
    float _1141 = _1138 * ((cbModelParam._m0[1u].w * (_1124 - _1029)) + _1029);
    float _1142 = _1138 * ((cbModelParam._m0[1u].w * (_1126 - _1031)) + _1031);
    float _1163 = fma(_1142, cbSceneParam._m0[89u].z, fma(_1141, cbSceneParam._m0[89u].y, _1140 * cbSceneParam._m0[89u].x));
    float _1166 = fma(_1142, cbSceneParam._m0[90u].z, fma(_1141, cbSceneParam._m0[90u].y, _1140 * cbSceneParam._m0[90u].x));
    float _1169 = fma(_1142, cbSceneParam._m0[91u].z, fma(_1141, cbSceneParam._m0[91u].y, _1140 * cbSceneParam._m0[91u].x));
    uint _1176 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1181 = floatBitsToUint(cbInstanceData._m0[_1176 + 5u]);
    uint _1183 = _1181.x * 14u;
    uint _1184 = _1183 + 13u;
    float _1189 = _546 + (-1.0);
    float _1193 = (cbLight._m0[_1184].x * _1189) + 1.0;
    float _1194 = (cbLight._m0[_1184].y * _1189) + 1.0;
    uint _1195 = _1183 + 8u;
    float _1206 = cbLight._m0[_1183].x + _525;
    float _1207 = cbLight._m0[_1183].y + _526;
    float _1208 = cbLight._m0[_1183].z + _527;
    float _1212 = inversesqrt(dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208)));
    float _1216 = dot(vec3(0.0), vec3(cbLight._m0[_1183].xyz));
    float _2475 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    float _1220 = dot(vec3(0.0), vec3(_525, _526, _527));
    float _2486 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1223 = isnan(1.0) ? _2486 : (isnan(_2486) ? 1.0 : min(_2486, 1.0));
    float _1224 = dot(vec3(cbLight._m0[_1183].xyz), vec3(_1206 * _1212, _1207 * _1212, _1208 * _1212));
    float _2497 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1235 = (exp2(log2(1.0 - (isnan(1.0) ? _2497 : (isnan(_2497) ? 1.0 : min(_2497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1241 = (0.5 / ((_1219 + 9.9999999392252902907785028219223e-09) + _1223)) * _1219;
    float _2508 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1243 = (isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0))) * 0.31831014156341552734375;
    float _1245 = isnan(1.0) ? _1193 : (isnan(_1193) ? 1.0 : min(_1193, 1.0));
    uint _1255 = _1183 + 9u;
    uint _1261 = _1183 | 1u;
    float _1267 = cbLight._m0[_1261].x + _525;
    float _1268 = cbLight._m0[_1261].y + _526;
    float _1269 = cbLight._m0[_1261].z + _527;
    float _1273 = inversesqrt(dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269)));
    float _1277 = dot(vec3(0.0), vec3(cbLight._m0[_1261].xyz));
    float _2524 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1280 = isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0));
    float _1281 = dot(vec3(cbLight._m0[_1261].xyz), vec3(_1267 * _1273, _1268 * _1273, _1269 * _1273));
    float _2535 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1290 = (exp2(log2(1.0 - (isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1294 = (0.5 / ((_1280 + 9.9999999392252902907785028219223e-09) + _1223)) * _1280;
    float _2546 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _1296 = (isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0))) * 0.31831014156341552734375;
    float _1297 = isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0));
    float _1307 = (((_1290 * cbLight._m0[_1255].x) * _1296) * _1297) + (((_1235 * cbLight._m0[_1195].x) * _1243) * _1245);
    float _1308 = (((_1290 * cbLight._m0[_1255].y) * _1296) * _1297) + (((_1235 * cbLight._m0[_1195].y) * _1243) * _1245);
    float _1309 = (((_1290 * cbLight._m0[_1255].z) * _1296) * _1297) + (((_1235 * cbLight._m0[_1195].z) * _1243) * _1245);
    float _1426;
    float _1428;
    float _1430;
    if (_1181.y == 0u)
    {
        float _1365 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1366 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1365;
        float _1367 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1365;
        float _1368 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1365;
        uvec4 _1380 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1381 = _1380.x;
        uint _1392 = uint((float(_1380.y) * floor(float(uint(cbSceneParam._m0[85u].y * _534) / _1381))) + floor(float(uint(cbSceneParam._m0[85u].x * _533) / _1381)));
        float _1402 = (log2(_1368 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1403 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        uint _1406 = uint(isnan(14.0) ? _1403 : (isnan(_1403) ? 14.0 : min(_1403, 14.0)));
        uvec4 _1412 = texelFetch(g_lightClusterGridBuffer, int(((_1406 << 2u) + (_1392 << 6u)) >> 2u));
        uint _1413 = _1412.x;
        uint _1414 = _1380.z;
        float _1503;
        float _1505;
        float _1507;
        if (((((1u << ((_1414 >> 4u) & 15u)) + 4294967295u) & _1413) == 0u) || ((_1414 & 240u) == 0u))
        {
            _1503 = 0.0;
            _1505 = 0.0;
            _1507 = 0.0;
        }
        else
        {
            float _1504;
            float _1506;
            float _1508;
            float _1662 = 0.0;
            float _1663 = 0.0;
            float _1664 = 0.0;
            uint _1665 = 0u;
            uint _1674;
            bool _1675;
            for (;;)
            {
                _1674 = texelFetch(g_lightClassification, int((((_1406 << 5u) + (_1392 << 9u)) + (_1665 << 2u)) >> 2u)).x;
                _1675 = _1674 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1675)
                {
                    frontier_phi_74_pred = _1664;
                    frontier_phi_74_pred_1 = _1663;
                    frontier_phi_74_pred_2 = _1662;
                }
                else
                {
                    float _1828;
                    float _1829;
                    float _1830;
                    uint _1831;
                    _1828 = _1662;
                    _1829 = _1663;
                    _1830 = _1664;
                    _1831 = _1674;
                    float _1740;
                    float _1741;
                    float _1742;
                    for (;;)
                    {
                        uint _1835 = uint(findLSB(_1831)) + (_1665 << 5u);
                        uint _1832 = (_1831 + 4294967295u) & _1831;
                        uint _1837 = _1835 * 48u;
                        vec4 _1851 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1837)).x, texelFetch(g_PointLightRenderingBuffer, int(_1837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1837 + 3u)).x));
                        uint _1868 = (_1835 * 48u) + 8u;
                        vec3 _1879 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1868)).x, texelFetch(g_PointLightRenderingBuffer, int(_1868 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1868 + 2u)).x));
                        float _1883 = _1851.x - _1366;
                        float _1884 = _1851.y - _1367;
                        float _1885 = _1851.z - _1368;
                        float _1886 = dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885));
                        float _1889 = inversesqrt(_1886);
                        float _1898 = 1.0 - (_1886 * _1851.w);
                        float _2572 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
                        float _1900 = sqrt(_1886) * uintBitsToFloat(uvec4(_1858, _1859, _1860, texelFetch(g_PointLightRenderingBuffer, int(((_1835 * 48u) + 4u) + 3u)).x)).w;
                        float _1903 = 1.39999997615814208984375 / (_1900 + 1.39999997615814208984375);
                        float _1904 = _1903 * _1903;
                        float _1907 = ((1.0 - _1904) * dot(vec3(0.0), vec3(_1889 * _1883, _1889 * _1884, _1889 * _1885))) + _1904;
                        float _1909 = (-0.0) - _1366;
                        float _1910 = (-0.0) - _1367;
                        float _1911 = (-0.0) - _1368;
                        float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
                        float _1919 = dot(vec3(0.0), vec3(_1915 * _1909, _1915 * _1910, _1915 * _1911));
                        float _2583 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
                        float _2594 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
                        float _1923 = isnan(1.0) ? _2594 : (isnan(_2594) ? 1.0 : min(_2594, 1.0));
                        float _1927 = (0.5 / (((isnan(1.0) ? _2583 : (isnan(_2583) ? 1.0 : min(_2583, 1.0))) + 9.9999999392252902907785028219223e-09) + _1923)) * _1923;
                        float _2605 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
                        float _1936 = (((isnan(1.0) ? _2605 : (isnan(_2605) ? 1.0 : min(_2605, 1.0))) * 3.1415927410125732421875) / (((_1900 * _1900) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0)));
                        _1740 = (_1936 * _1879.x) + _1828;
                        _1741 = (_1936 * _1879.y) + _1829;
                        _1742 = (_1936 * _1879.z) + _1830;
                        if (_1832 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1828 = _1740;
                            _1829 = _1741;
                            _1830 = _1742;
                            _1831 = _1832;
                        }
                    }
                    frontier_phi_74_pred = _1742;
                    frontier_phi_74_pred_1 = _1741;
                    frontier_phi_74_pred_2 = _1740;
                }
                _1508 = frontier_phi_74_pred;
                _1506 = frontier_phi_74_pred_1;
                _1504 = frontier_phi_74_pred_2;
                uint _1666 = _1665 + 1u;
                if (_1666 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1662 = _1504;
                    _1663 = _1506;
                    _1664 = _1508;
                    _1665 = _1666;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1503 = _1504;
            _1505 = _1506;
            _1507 = _1508;
        }
        uvec4 _1511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1512 = _1511.z;
        uint _1514 = (_1512 >> 8u) & 15u;
        float _1642;
        float _1644;
        float _1646;
        if (((4294967295u << _1514) & _1413) == 0u)
        {
            _1642 = _1503;
            _1644 = _1505;
            _1646 = _1507;
        }
        else
        {
            float _1658 = inversesqrt(dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1514 < ((_1512 >> 12u) & 15u))
            {
                float _1643;
                float _1645;
                float _1647;
                float _1814 = _1503;
                float _1815 = _1505;
                float _1816 = _1507;
                uint _1817 = _1514;
                uint _1826;
                bool _1827;
                for (;;)
                {
                    _1826 = texelFetch(g_lightClassification, int((((_1406 << 5u) + (_1392 << 9u)) + (_1817 << 2u)) >> 2u)).x;
                    _1827 = _1826 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_1827)
                    {
                        frontier_phi_83_pred = _1816;
                        frontier_phi_83_pred_1 = _1815;
                        frontier_phi_83_pred_2 = _1814;
                    }
                    else
                    {
                        float _1962;
                        float _1963;
                        float _1964;
                        float _2183;
                        float _2184;
                        float _2185;
                        float _1972 = _1814;
                        float _1973 = _1815;
                        float _1974 = _1816;
                        uint _1975 = _1826;
                        uint _1976;
                        uint _1986;
                        vec4 _2001;
                        float _2002;
                        vec3 _2014;
                        vec4 _2029;
                        vec4 _2044;
                        float _2090;
                        bool _2091;
                        for (;;)
                        {
                            _1986 = ((_1817 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1975));
                            _1976 = (_1975 + 4294967295u) & _1975;
                            uint _1988 = _1986 * 40u;
                            _2001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1988 + 3u)).x));
                            _2002 = _2001.w;
                            uint _2004 = (_1986 * 40u) + 8u;
                            _2014 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2004 + 2u)).x));
                            uint _2016 = (_1986 * 40u) + 16u;
                            _2029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2016 + 3u)).x));
                            uint _2031 = (_1986 * 40u) + 20u;
                            _2044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2031 + 3u)).x));
                            uint _2046 = (_1986 * 40u) + 24u;
                            vec4 _2059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2046 + 3u)).x));
                            uint _2065 = (_1986 * 40u) + 28u;
                            vec4 _2078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2065 + 3u)).x));
                            _2090 = fma(_1368, _2078.z, fma(_1367, _2078.y, _2078.x * _1366)) + _2078.w;
                            _2091 = !((fma(_1368, _2059.z, fma(_1367, _2059.y, _2059.x * _1366)) + _2059.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2091)
                            {
                                float _2125 = _2001.x - _1366;
                                float _2126 = _2001.y - _1367;
                                float _2127 = _2001.z - _1368;
                                float _2128 = dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127));
                                float _2131 = inversesqrt(_2128);
                                float _2138 = 1.0 - (_2128 / (_2002 * _2002));
                                float _2616 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
                                float _2140 = sqrt(_2128) * uintBitsToFloat(uvec4(_2094, _2095, _2096, texelFetch(g_SpotLightRenderingBuffer, int(((_1986 * 40u) + 4u) + 3u)).x)).w;
                                float _2142 = 1.39999997615814208984375 / (_2140 + 1.39999997615814208984375);
                                float _2143 = _2142 * _2142;
                                float _2146 = (fma(_1368, _2029.z, fma(_1367, _2029.y, _2029.x * _1366)) + _2029.w) / _2090;
                                float _2147 = (fma(_1368, _2044.z, fma(_1367, _2044.y, _2044.x * _1366)) + _2044.w) / _2090;
                                float _2151 = 1.0 - dot(vec2(_2146, _2147), vec2(_2146, _2147));
                                float _2627 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
                                float _2159 = dot(vec3(0.0), vec3((-0.0) - (_1366 * _1658), (-0.0) - (_1367 * _1658), (-0.0) - (_1368 * _1658)));
                                float _2638 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
                                float _2167 = ((1.0 - _2143) * dot(vec3(0.0), vec3(_2131 * _2125, _2131 * _2126, _2131 * _2127))) + _2143;
                                float _2649 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
                                float _2168 = isnan(1.0) ? _2649 : (isnan(_2649) ? 1.0 : min(_2649, 1.0));
                                float _2172 = (0.5 / (((isnan(1.0) ? _2638 : (isnan(_2638) ? 1.0 : min(_2638, 1.0))) + 9.9999999392252902907785028219223e-09) + _2168)) * _2168;
                                float _2660 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
                                float _2179 = ((isnan(1.0) ? _2627 : (isnan(_2627) ? 1.0 : min(_2627, 1.0))) * (isnan(1.0) ? _2616 : (isnan(_2616) ? 1.0 : min(_2616, 1.0)))) * (((isnan(1.0) ? _2660 : (isnan(_2660) ? 1.0 : min(_2660, 1.0))) * 3.1415927410125732421875) / (((_2140 * _2140) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2179 * _2014.x;
                                frontier_phi_89_pred_1 = _2179 * _2014.z;
                                frontier_phi_89_pred_2 = _2179 * _2014.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2183 = frontier_phi_89_pred;
                            _2185 = frontier_phi_89_pred_1;
                            _2184 = frontier_phi_89_pred_2;
                            _1962 = _2183 + _1972;
                            _1963 = _2184 + _1973;
                            _1964 = _2185 + _1974;
                            if (_1976 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1972 = _1962;
                                _1973 = _1963;
                                _1974 = _1964;
                                _1975 = _1976;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _1964;
                        frontier_phi_83_pred_1 = _1963;
                        frontier_phi_83_pred_2 = _1962;
                    }
                    _1647 = frontier_phi_83_pred;
                    _1645 = frontier_phi_83_pred_1;
                    _1643 = frontier_phi_83_pred_2;
                    uint _1818 = _1817 + 1u;
                    if (_1818 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1814 = _1643;
                        _1815 = _1645;
                        _1816 = _1647;
                        _1817 = _1818;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1645;
                frontier_phi_65_66_ladder_1 = _1643;
                frontier_phi_65_66_ladder_2 = _1647;
            }
            else
            {
                frontier_phi_65_66_ladder = _1505;
                frontier_phi_65_66_ladder_1 = _1503;
                frontier_phi_65_66_ladder_2 = _1507;
            }
            _1642 = frontier_phi_65_66_ladder_1;
            _1644 = frontier_phi_65_66_ladder;
            _1646 = frontier_phi_65_66_ladder_2;
        }
        float _1651 = isnan(1.0) ? _546 : (isnan(_546) ? 1.0 : min(_546, 1.0));
        _1426 = ((_1642 * 0.039999999105930328369140625) * _1651) + _1307;
        _1428 = ((_1644 * 0.039999999105930328369140625) * _1651) + _1308;
        _1430 = ((_1646 * 0.039999999105930328369140625) * _1651) + _1309;
    }
    else
    {
        _1426 = _1307;
        _1428 = _1308;
        _1430 = _1309;
    }
    uint _1437 = (_1176 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1452 = (cbInstanceData._m0[_1437].x * ((_495 * ((_451.x * cbMtdParam._m0[10u].x) - _376)) + _376)) + ((_1426 + ((isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0))) * _938)) * cbPerFrame._m0[3u].x);
    float _1453 = (cbInstanceData._m0[_1437].y * ((_495 * ((_451.y * cbMtdParam._m0[10u].y) - _377)) + _377)) + ((_1428 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _938)) * cbPerFrame._m0[3u].x);
    float _1454 = (cbInstanceData._m0[_1437].z * ((_495 * ((_451.z * cbMtdParam._m0[10u].z) - _378)) + _378)) + ((_1430 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _938)) * cbPerFrame._m0[3u].x);
    uint _1458 = _1176 + 6u;
    float _1466 = _533 / cbSceneParam._m0[86u].x;
    float _1467 = _534 / cbSceneParam._m0[86u].y;
    vec4 _1481 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1466, _1467, (log2((isnan(cbSceneParam._m0[77u].w) ? _520 : (isnan(_520) ? cbSceneParam._m0[77u].w : min(_520, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1483 = _1481.x;
    float _1484 = _1481.y;
    float _1485 = _1481.z;
    float _1486 = _1481.w;
    float _1560;
    float _1562;
    float _1564;
    float _1566;
    if (_520 > cbSceneParam._m0[78u].w)
    {
        float _1522 = isnan(_520) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _520 : min(cbSceneParam._m0[80u].w, _520));
        float _1523 = _1522 / _520;
        float _1534 = _1523 * _251;
        float _1535 = _252 * _1523;
        float _1536 = (-0.0) - _1535;
        float _1537 = _1523 * _253;
        float _1539 = (cbSceneParam._m0[77u].w * _1536) / _1522;
        float _1540 = _1539 + cbSceneParam._m0[79u].w;
        float _1541 = cbSceneParam._m0[79u].w - _1535;
        float _1547 = sqrt(((_1534 * _1534) + (_1535 * _1535)) + (_1537 * _1537));
        float _1550 = (1.0 - (cbSceneParam._m0[77u].w / _1522)) * _1547;
        float _1556 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1558 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1750;
        if (abs((_1536 - _1539) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1750 = ((((_1540 > 0.0) ? exp2(_1556 * _1540) : (2.0 - exp2(_1558 * _1540))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1550;
        }
        else
        {
            float _1688 = 1.0 / cbSceneParam._m0[80u].x;
            float _1689 = isnan(_1541) ? _1540 : (isnan(_1540) ? _1541 : max(_1540, _1541));
            float _1690 = isnan(_1541) ? _1540 : (isnan(_1540) ? _1541 : min(_1540, _1541));
            float _1699 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : min(_1689, 0.0));
            float _1700 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : min(_1690, 0.0));
            _1750 = ((abs(_1547 / _1536) * cbSceneParam._m0[80u].y) * ((((_1699 - _1700) * 2.0) - ((exp2(_1556 * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)))) - exp2(_1556 * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))))) * _1688)) - ((exp2(_1558 * _1699) - exp2(_1558 * _1700)) * _1688))) + (_1550 * cbSceneParam._m0[80u].z);
        }
        vec4 _1752 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1466, _1467, 1.0), 0.0);
        float _1761 = exp2((_1750 * (-1.44269502162933349609375)) * (1.0 - _1752.w));
        float _1762 = log2(_1761);
        float _1778 = log2(_1486);
        _1560 = (exp2(_1778 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1762 * cbSceneParam._m0[78u].x)) * _1752.x) / cbSceneParam._m0[78u].x)) + _1483;
        _1562 = (exp2(_1778 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1762 * cbSceneParam._m0[78u].y)) * _1752.y) / cbSceneParam._m0[78u].y)) + _1484;
        _1564 = (exp2(_1778 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1762 * cbSceneParam._m0[78u].z)) * _1752.z) / cbSceneParam._m0[78u].z)) + _1485;
        _1566 = _1761 * _1486;
    }
    else
    {
        _1560 = _1483;
        _1562 = _1484;
        _1564 = _1485;
        _1566 = _1486;
    }
    float _1578 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1579 = _1578 == 3.0;
    float _1581 = log2(_1566);
    float _1588 = exp2(_1581 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    float _1589 = exp2(_1581 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0)));
    float _1590 = exp2(_1581 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    float _1599 = (_1578 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1599 * (_1579 ? _1588 : (_1588 + (cbSceneParam._m0[72u].w * _1560)));
    SV_Target.y = _1599 * (_1579 ? _1589 : (_1589 + (cbSceneParam._m0[72u].w * _1562)));
    SV_Target.z = _1599 * (_1579 ? _1590 : (_1590 + (cbSceneParam._m0[72u].w * _1564)));
    SV_Target.w = cbInstanceData._m0[_1458].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1458].w;
}


