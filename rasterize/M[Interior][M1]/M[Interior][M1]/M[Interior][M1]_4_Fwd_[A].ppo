#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1024;
float _3166;
float _3167;
float _3168;
float _3169;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    vec4 _446 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = _446.x;
    vec4 _460 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _468 = (_460.x * 2.0) + (-1.0);
    float _470 = (_460.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_468, _470), vec2(_468, _470));
    float _3188 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0))));
    float _477 = _460.z * _288;
    float _480 = fma(_476, _197, fma(_470, _204, _468 * _190));
    float _483 = fma(_476, _198, fma(_470, _205, _468 * _191));
    float _486 = fma(_476, _199, fma(_470, _206, _468 * _192));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _493 = _490 * _486;
    float _3199 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _494 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
    float _3210 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3221 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3232 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3243 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _498 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
    float _514 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _519 = _261 * _518;
    float _520 = _262 * _518;
    float _521 = _263 * _518;
    vec4 _526 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _528 = _526.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _705 = sqrt(((_261 * _261) + (_262 * _262)) + (_263 * _263));
        float _711 = (cbMatDynParam._m0[5u].x * _705) + cbMatDynParam._m0[5u].y;
        float _3254 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _716 = (cbMatDynParam._m0[5u].z * _705) + cbMatDynParam._m0[5u].w;
        float _3265 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) - _712)) + _712) < ((_528 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _541 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _542 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _562 = fma(_493, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _565 = fma(_493, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _568 = fma(_493, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _581 = uint(roundEven(NORMAL.w)) * 13u;
    uint _583 = _581 + 9u;
    uint _584 = _583 + uint(cbMatDynParam._m0[0u].w);
    float _590 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_584].x;
    float _591 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_584].y;
    float _592 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0)))) * cbInstanceData._m0[_584].z;
    float _3276 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _593 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    float _3287 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _594 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _3298 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _595 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _596 = 1.0 - _498;
    float _597 = _593 * _596;
    float _598 = _594 * _596;
    float _599 = _595 * _596;
    float _604 = (_593 + (-0.039999999105930328369140625)) * _498;
    float _605 = (_594 + (-0.039999999105930328369140625)) * _498;
    float _606 = (_595 + (-0.039999999105930328369140625)) * _498;
    float _607 = _604 + 0.039999999105930328369140625;
    float _609 = _605 + 0.039999999105930328369140625;
    float _610 = _606 + 0.039999999105930328369140625;
    vec4 _619 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _541, cbSceneParam._m0[86u].y * _542));
    float _622 = _619.x * TEXCOORD.z;
    float _623 = dot(vec3(_491, _492, _493), vec3(_519, _520, _521));
    float _626 = _623 * 2.0;
    float _630 = (_626 * _491) - _519;
    float _631 = (_626 * _492) - _520;
    float _632 = (_626 * _493) - _521;
    float _636 = abs(dot(vec3(_519, _520, _521), vec3(_491, _492, _493)));
    float _3309 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _638 = sqrt(_494);
    float _651 = exp2((_638 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_638 * 3.0));
    float _657 = (1.0 - _651) * ((_638 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _658 = _651 * _638;
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _690 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1023;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = fma(_694, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _686));
        float _754 = fma(_694, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _686));
        float _758 = fma(_694, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _686));
        float _781 = _686 + _491;
        float _782 = _690 + _492;
        float _783 = _694 + _493;
        float _793 = fma(_783, cbModelParam._m0[26u].z, fma(_782, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _781)) - _750;
        float _794 = fma(_783, cbModelParam._m0[27u].z, fma(_782, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _781)) - _754;
        float _795 = fma(_783, cbModelParam._m0[28u].z, fma(_782, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _781)) - _758;
        float _799 = inversesqrt(dot(vec3(_793, _794, _795), vec3(_793, _794, _795)));
        float _812 = ((_799 * _793) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_750 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _813 = ((_799 * _794) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_754 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _814 = ((_799 * _795) / cbModelParam._m0[34u].z) + ((((((_758 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_812, _813, _814), 0.0);
        float _851 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_817.x + (-0.5));
        float _853 = _851 * (_817.y + (-0.5));
        float _854 = _851 * (_817.z + (-0.5));
        float _861 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_824.x + (-0.5));
        float _863 = _861 * (_824.y + (-0.5));
        float _864 = _861 * (_824.z + (-0.5));
        float _871 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_831.x + (-0.5));
        float _873 = _871 * (_831.y + (-0.5));
        float _874 = _871 * (_831.z + (-0.5));
        float _881 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_838.x + (-0.5));
        float _883 = _881 * (_838.y + (-0.5));
        float _884 = _881 * (_838.z + (-0.5));
        float _885 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _886 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _887 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _888 = _852 * 0.5;
        float _889 = _862 * 0.5;
        float _890 = _872 * 0.5;
        float _891 = dot(vec3(_888, _889, _890), vec3(_888, _889, _890));
        float _896 = (_891 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_891);
        float _905 = (dot(vec3(_491, _492, _493), vec3(_896 * _888, _896 * _889, _896 * _890)) + 1.0) * 0.5;
        float _3335 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _915 = sqrt(((_889 * _889) + (_888 * _888)) + (_890 * _890)) / (_885 + 9.9999997473787516355514526367188e-06);
        float _3346 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
        float _917 = _916 * 2.0;
        float _921 = (1.0 - _916) / (_916 + 1.0);
        float _3357 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _931 = ((((1.0 - _922) * (_917 + 2.0)) * exp2(log2(isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * (_917 + 1.0))) + _922) * _885;
        float _932 = _853 * 0.5;
        float _933 = _863 * 0.5;
        float _934 = _873 * 0.5;
        float _935 = dot(vec3(_932, _933, _934), vec3(_932, _933, _934));
        float _940 = (_935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_935);
        float _948 = (dot(vec3(_491, _492, _493), vec3(_940 * _932, _940 * _933, _940 * _934)) + 1.0) * 0.5;
        float _3368 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _957 = sqrt(((_933 * _933) + (_932 * _932)) + (_934 * _934)) / (_886 + 9.9999997473787516355514526367188e-06);
        float _3379 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _958 = isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0));
        float _959 = _958 * 2.0;
        float _963 = (1.0 - _958) / (_958 + 1.0);
        float _3390 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _973 = ((((1.0 - _964) * (_959 + 2.0)) * exp2(log2(isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0))) * (_959 + 1.0))) + _964) * _886;
        float _974 = _854 * 0.5;
        float _975 = _864 * 0.5;
        float _976 = _874 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(_491, _492, _493), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3401 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_887 + 9.9999997473787516355514526367188e-06);
        float _3412 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3423 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))) * (_1001 + 1.0))) + _1006) * _887;
        _1023 = _854;
        _1025 = _853;
        _1026 = _852;
        _1027 = _864;
        _1028 = _863;
        _1029 = _862;
        _1030 = _874;
        _1031 = _873;
        _1032 = _872;
        _1033 = _887;
        _1034 = _886;
        _1035 = _885;
        _1036 = cbModelParam._m0[36u].z * (isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0)));
        _1037 = cbModelParam._m0[36u].z * (isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0)));
        _1038 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
    }
    else
    {
        _1023 = _1024;
        _1025 = _1024;
        _1026 = _1024;
        _1027 = _1024;
        _1028 = _1024;
        _1029 = _1024;
        _1030 = _1024;
        _1031 = _1024;
        _1032 = _1024;
        _1033 = _1024;
        _1034 = _1024;
        _1035 = _1024;
        _1036 = 0.0;
        _1037 = 0.0;
        _1038 = 0.0;
    }
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1067 = fma(_694, cbModelParam._m0[30u].z, fma(_690, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _686));
        float _1071 = fma(_694, cbModelParam._m0[31u].z, fma(_690, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _686));
        float _1075 = fma(_694, cbModelParam._m0[32u].z, fma(_690, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _686));
        float _1098 = _686 + _491;
        float _1099 = _690 + _492;
        float _1100 = _694 + _493;
        float _1110 = fma(_1100, cbModelParam._m0[30u].z, fma(_1099, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1098)) - _1067;
        float _1111 = fma(_1100, cbModelParam._m0[31u].z, fma(_1099, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1098)) - _1071;
        float _1112 = fma(_1100, cbModelParam._m0[32u].z, fma(_1099, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1098)) - _1075;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1067 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1071 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[35u].z) + ((((((_1075 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1166 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1133.x + (-0.5));
        float _1168 = _1166 * (_1133.y + (-0.5));
        float _1169 = _1166 * (_1133.z + (-0.5));
        float _1176 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1140.x + (-0.5));
        float _1178 = _1176 * (_1140.y + (-0.5));
        float _1179 = _1176 * (_1140.z + (-0.5));
        float _1186 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1147.x + (-0.5));
        float _1188 = _1186 * (_1147.y + (-0.5));
        float _1189 = _1186 * (_1147.z + (-0.5));
        float _1196 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1154.x + (-0.5));
        float _1198 = _1196 * (_1154.y + (-0.5));
        float _1199 = _1196 * (_1154.z + (-0.5));
        float _1200 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1201 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = _1167 * 0.5;
        float _1204 = _1177 * 0.5;
        float _1205 = _1187 * 0.5;
        float _1206 = dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205));
        float _1211 = (_1206 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1206);
        float _1219 = (dot(vec3(_491, _492, _493), vec3(_1211 * _1203, _1211 * _1204, _1211 * _1205)) + 1.0) * 0.5;
        float _3464 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1228 = sqrt(((_1204 * _1204) + (_1203 * _1203)) + (_1205 * _1205)) / (_1200 + 9.9999997473787516355514526367188e-06);
        float _3475 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1230 = _1229 * 2.0;
        float _1234 = (1.0 - _1229) / (_1229 + 1.0);
        float _3486 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1244 = ((((1.0 - _1235) * (_1230 + 2.0)) * exp2(log2(isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1230 + 1.0))) + _1235) * _1200;
        float _1245 = _1168 * 0.5;
        float _1246 = _1178 * 0.5;
        float _1247 = _1188 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_491, _492, _493), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _3497 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1201 + 9.9999997473787516355514526367188e-06);
        float _3508 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _3519 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * (_1272 + 1.0))) + _1277) * _1201;
        float _1287 = _1169 * 0.5;
        float _1288 = _1179 * 0.5;
        float _1289 = _1189 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_491, _492, _493), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3530 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _3541 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3552 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * (_1314 + 1.0))) + _1319) * _1202;
        _1336 = _1169;
        _1337 = _1168;
        _1338 = _1167;
        _1339 = _1179;
        _1340 = _1178;
        _1341 = _1177;
        _1342 = _1189;
        _1343 = _1188;
        _1344 = _1187;
        _1345 = _1202;
        _1346 = _1201;
        _1347 = _1200;
        _1348 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)));
        _1349 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1350 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
    }
    else
    {
        _1336 = _1024;
        _1337 = _1024;
        _1338 = _1024;
        _1339 = _1024;
        _1340 = _1024;
        _1341 = _1024;
        _1342 = _1024;
        _1343 = _1024;
        _1344 = _1024;
        _1345 = _1024;
        _1346 = _1024;
        _1347 = _1024;
        _1348 = 0.0;
        _1349 = 0.0;
        _1350 = 0.0;
    }
    float _1360 = (cbModelParam._m0[1u].x * (_1348 - _1036)) + _1036;
    float _1361 = (cbModelParam._m0[1u].x * (_1349 - _1037)) + _1037;
    float _1362 = (cbModelParam._m0[1u].x * (_1350 - _1038)) + _1038;
    float _1383 = fma(_1362, cbSceneParam._m0[89u].z, fma(_1361, cbSceneParam._m0[89u].y, _1360 * cbSceneParam._m0[89u].x));
    float _1386 = fma(_1362, cbSceneParam._m0[90u].z, fma(_1361, cbSceneParam._m0[90u].y, _1360 * cbSceneParam._m0[90u].x));
    float _1389 = fma(_1362, cbSceneParam._m0[91u].z, fma(_1361, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1360));
    float _1404 = _630 * 0.5;
    float _1405 = _631 * 0.5;
    float _1406 = _632 * 0.5;
    float _1407 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1338, _1341, _1344, _1347));
    float _1410 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1337, _1340, _1343, _1346));
    float _1413 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1336, _1339, _1342, _1345));
    float _1447;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1420 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1023, _1027, _1030, _1033));
        float _1424 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1025, _1028, _1031, _1034));
        float _1428 = dot(vec4(_1404, _1405, _1406, 1.0), vec4(_1026, _1029, _1032, _1035));
        float _1435 = dot(vec4(cbModelParam._m0[39u]), vec4(_1404, _1405, _1406, 1.0));
        _1447 = dot(vec3(isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1447 = 1.0;
    }
    float _1458;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1449 = dot(vec4(cbModelParam._m0[40u]), vec4(_1404, _1405, _1406, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1449) ? 0.0 : (isnan(0.0) ? _1449 : max(0.0, _1449))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1462 = (_1458 * cbModelParam._m0[1u].x) + (_1447 * (1.0 - cbModelParam._m0[1u].x));
    float _1472 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _494);
    float _1473 = isnan(_1472) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1472 : min(cbModelParam._m0[25u].z, _1472));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1521 = fma(_694, cbModelParam._m0[13u].z, fma(_690, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _686)) + cbModelParam._m0[13u].w;
        float _1525 = fma(_694, cbModelParam._m0[14u].z, fma(_690, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _686)) + cbModelParam._m0[14u].w;
        float _1529 = fma(_694, cbModelParam._m0[15u].z, fma(_690, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _686)) + cbModelParam._m0[15u].w;
        float _1532 = fma(_632, cbModelParam._m0[13u].z, fma(_631, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _630));
        float _1535 = fma(_632, cbModelParam._m0[14u].z, fma(_631, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _630));
        float _1538 = fma(_632, cbModelParam._m0[15u].z, fma(_631, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _630));
        float _1566;
        if (_1532 > 0.0)
        {
            _1566 = abs((1.0 - _1521) / _1532);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1521 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1566 = frontier_phi_25_23_ladder;
        }
        float _1925;
        if (_1535 > 0.0)
        {
            _1925 = abs((1.0 - _1525) / _1535);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1525 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1925 = frontier_phi_34_30_ladder;
        }
        float _2249;
        if (_1538 > 0.0)
        {
            _2249 = abs((1.0 - _1529) / _1538);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1529 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2249 = frontier_phi_48_41_ladder;
        }
        float _2251 = isnan(_1925) ? _1566 : (isnan(_1566) ? _1925 : min(_1566, _1925));
        float _2252 = isnan(_2249) ? _2251 : (isnan(_2251) ? _2249 : min(_2251, _2249));
        float _2256 = (_2252 * _1532) + _1521;
        float _2257 = (_2252 * _1535) + _1525;
        float _2258 = (_2252 * _1538) + _1529;
        float _2259 = _2252 * 9.9999997473787516355514526367188e-05;
        float _2260 = (-1.0) - _2259;
        float _2262 = _2259 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2258 > _2262) || ((_2258 < _2260) || ((_2257 > _2262) || ((_2257 < _2260) || ((_2256 < _2260) || (_2256 > _2262))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2400 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2258, cbModelParam._m0[9u].z, fma(_2257, cbModelParam._m0[9u].y, _2256 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2258, cbModelParam._m0[10u].z, fma(_2257, cbModelParam._m0[10u].y, _2256 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2258, cbModelParam._m0[11u].z, fma(_2257, cbModelParam._m0[11u].y, _2256 * cbModelParam._m0[11u].x))), _1473);
            frontier_phi_24_48_ladder = _2400.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2400.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2400.x * cbModelParam._m0[1u].y;
        }
        _1554 = frontier_phi_24_48_ladder_2;
        _1556 = frontier_phi_24_48_ladder_1;
        _1558 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_630, _631, _632), _1473);
        _1554 = _1542.x * cbModelParam._m0[1u].y;
        _1556 = _1542.y * cbModelParam._m0[1u].y;
        _1558 = _1542.z * cbModelParam._m0[1u].y;
    }
    float _1562 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _494);
    float _1563 = isnan(_1562) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1562 : min(cbModelParam._m0[25u].w, _1562));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1616 = fma(_694, cbModelParam._m0[21u].z, fma(_690, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _686)) + cbModelParam._m0[21u].w;
        float _1620 = fma(_694, cbModelParam._m0[22u].z, fma(_690, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _686)) + cbModelParam._m0[22u].w;
        float _1624 = fma(_694, cbModelParam._m0[23u].z, fma(_690, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _686)) + cbModelParam._m0[23u].w;
        float _1627 = fma(_632, cbModelParam._m0[21u].z, fma(_631, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _630));
        float _1630 = fma(_632, cbModelParam._m0[22u].z, fma(_631, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _630));
        float _1633 = fma(_632, cbModelParam._m0[23u].z, fma(_631, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _630));
        float _1930;
        if (_1627 > 0.0)
        {
            _1930 = abs((1.0 - _1616) / _1627);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1616 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1930 = frontier_phi_36_32_ladder;
        }
        float _2275;
        if (_1630 > 0.0)
        {
            _2275 = abs((1.0 - _1620) / _1630);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1620 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2275 = frontier_phi_50_43_ladder;
        }
        float _2465;
        if (_1633 > 0.0)
        {
            _2465 = abs((1.0 - _1624) / _1633);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1624 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2465 = frontier_phi_68_61_ladder;
        }
        float _2467 = isnan(_2275) ? _1930 : (isnan(_1930) ? _2275 : min(_1930, _2275));
        float _2468 = isnan(_2465) ? _2467 : (isnan(_2467) ? _2465 : min(_2467, _2465));
        float _2472 = (_2468 * _1627) + _1616;
        float _2473 = (_2468 * _1630) + _1620;
        float _2474 = (_2468 * _1633) + _1624;
        float _2475 = _2468 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2475;
        float _2478 = _2475 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2474 > _2478) || ((_2474 < _2476) || ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 < _2476) || (_2472 > _2478))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2474, cbModelParam._m0[17u].z, fma(_2473, cbModelParam._m0[17u].y, _2472 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2474, cbModelParam._m0[18u].z, fma(_2473, cbModelParam._m0[18u].y, _2472 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2474, cbModelParam._m0[19u].z, fma(_2473, cbModelParam._m0[19u].y, _2472 * cbModelParam._m0[19u].x))), _1563);
            frontier_phi_33_68_ladder = _2716.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2716.x * cbModelParam._m0[1u].z;
        }
        _1652 = frontier_phi_33_68_ladder_2;
        _1654 = frontier_phi_33_68_ladder;
        _1656 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1636 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_630, _631, _632), _1563);
        _1652 = _1636.x * cbModelParam._m0[1u].z;
        _1654 = _1636.y * cbModelParam._m0[1u].z;
        _1656 = _1636.z * cbModelParam._m0[1u].z;
    }
    float _1669 = (((_657 * _607) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1652 - _1554)) + _1554);
    float _1671 = (((_657 * _609) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1654 - _1556)) + _1556);
    float _1673 = (((_657 * _610) + _658) * _622) * ((cbModelParam._m0[1u].w * (_1656 - _1558)) + _1558);
    float _1676 = fma(_1673, cbSceneParam._m0[89u].z, fma(_1671, cbSceneParam._m0[89u].y, _1669 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1673, cbSceneParam._m0[90u].z, fma(_1671, cbSceneParam._m0[90u].y, _1669 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1673, cbSceneParam._m0[91u].z, fma(_1671, cbSceneParam._m0[91u].y, _1669 * cbSceneParam._m0[91u].x));
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_581 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1700 = _622 + (-1.0);
    float _1703 = (cbLight._m0[_1695].x * _1700) + 1.0;
    float _1704 = (cbLight._m0[_1695].y * _1700) + 1.0;
    uint _1705 = _1694 + 5u;
    float _1711 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1715 = _1694 + 4u;
    float _1721 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1725 = _1694 | 1u;
    float _1736 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_491, _492, _493));
    float _1739 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_491, _492, _493));
    float _3688 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _3699 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1744 = (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * 0.3183098733425140380859375;
    float _1746 = (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * 0.3183098733425140380859375;
    float _1753 = ((cbLight._m0[_1705].x * _1711) * _1746) + ((cbLight._m0[_1715].x * _1721) * _1744);
    float _1754 = ((_1711 * cbLight._m0[_1705].y) * _1746) + ((_1721 * cbLight._m0[_1715].y) * _1744);
    float _1755 = ((_1711 * cbLight._m0[_1705].z) * _1746) + ((_1721 * cbLight._m0[_1715].z) * _1744);
    uint _1757 = _1694 + 8u;
    float _1770 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1694].w)) * _494) * 0.949999988079071044921875);
    float _1771 = _1770 * _1770;
    float _1772 = cbLight._m0[_1694].x + _519;
    float _1773 = cbLight._m0[_1694].y + _520;
    float _1774 = cbLight._m0[_1694].z + _521;
    float _1778 = inversesqrt(dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774)));
    float _1779 = _1778 * _1772;
    float _1780 = _1778 * _1773;
    float _1781 = _1778 * _1774;
    float _1782 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1694].xyz));
    float _3710 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _1786 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _1787 = dot(vec3(_491, _492, _493), vec3(_1779, _1780, _1781));
    float _3732 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1791 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1779, _1780, _1781));
    float _3743 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1795 = _1771 * _1771;
    float _1799 = ((_1790 * _1790) * (_1795 + (-1.0))) + 1.0;
    float _1807 = exp2(log2(1.0 - (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * 5.0);
    float _1808 = 0.959999978542327880859375 - _604;
    float _1810 = 0.959999978542327880859375 - _605;
    float _1811 = 0.959999978542327880859375 - _606;
    float _1818 = 1.0 - _1771;
    float _1829 = (0.5 / (((_1786 * ((_1785 * _1818) + _1771)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1818) + _1771) * _1785))) * _1785;
    float _3754 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1795 / ((_1799 * _1799) * 3.141590118408203125));
    uint _1842 = _1694 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1725].w)) * _494) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1725].x + _519;
    float _1856 = cbLight._m0[_1725].y + _520;
    float _1857 = cbLight._m0[_1725].z + _521;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1725].xyz));
    float _3765 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _1869 = dot(vec3(_491, _492, _493), vec3(_1862, _1863, _1864));
    float _3776 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1725].xyz), vec3(_1862, _1863, _1864));
    float _3787 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1888 = exp2(log2(1.0 - (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) * 5.0);
    float _1895 = 1.0 - _1854;
    float _1905 = (0.5 / (((_1786 * ((_1868 * _1895) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1786 * _1895) + _1854) * _1868))) * _1868;
    float _3798 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1907 = (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1917 = (((((_1888 * _1808) + _607) * cbLight._m0[_1842].x) * _1907) * _1711) + (((((_1807 * _1808) + _607) * cbLight._m0[_1757].x) * _1831) * _1721);
    float _1918 = (((((_1888 * _1810) + _609) * cbLight._m0[_1842].y) * _1907) * _1711) + (((((_1807 * _1810) + _609) * cbLight._m0[_1757].y) * _1831) * _1721);
    float _1919 = (((((_1888 * _1811) + _610) * cbLight._m0[_1842].z) * _1907) * _1711) + (((((_1807 * _1811) + _610) * cbLight._m0[_1757].z) * _1831) * _1721);
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    float _2042;
    float _2044;
    if (_1692.y == 0u)
    {
        float _1974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1974;
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1974;
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1974;
        uvec4 _1989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1990 = _1989.x;
        uint _2001 = uint((float(_1989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _542) / _1990))) + floor(float(uint(cbSceneParam._m0[85u].x * _541) / _1990)));
        float _2011 = (log2(_1977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2012 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        uint _2015 = uint(isnan(14.0) ? _2012 : (isnan(_2012) ? 14.0 : min(_2012, 14.0)));
        uvec4 _2020 = texelFetch(g_lightClusterGridBuffer, int(((_2015 << 2u) + (_2001 << 6u)) >> 2u));
        uint _2021 = _2020.x;
        uint _2022 = _1989.z;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        float _2136;
        float _2138;
        if (((((1u << ((_2022 >> 4u) & 15u)) + 4294967295u) & _2021) == 0u) || ((_2022 & 240u) == 0u))
        {
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
            _2136 = 0.0;
            _2138 = 0.0;
        }
        else
        {
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2137;
            float _2139;
            float _2312 = 0.0;
            float _2313 = 0.0;
            float _2314 = 0.0;
            float _2315 = 0.0;
            float _2316 = 0.0;
            float _2317 = 0.0;
            uint _2318 = 0u;
            uint _2327;
            bool _2328;
            for (;;)
            {
                _2327 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2318 << 2u)) >> 2u)).x;
                _2328 = _2327 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2328)
                {
                    frontier_phi_63_pred = _2314;
                    frontier_phi_63_pred_1 = _2317;
                    frontier_phi_63_pred_2 = _2316;
                    frontier_phi_63_pred_3 = _2315;
                    frontier_phi_63_pred_4 = _2313;
                    frontier_phi_63_pred_5 = _2312;
                }
                else
                {
                    float _2508;
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    uint _2514;
                    _2508 = _2312;
                    _2509 = _2313;
                    _2510 = _2314;
                    _2511 = _2315;
                    _2512 = _2316;
                    _2513 = _2317;
                    _2514 = _2327;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    float _2413;
                    float _2414;
                    for (;;)
                    {
                        uint _2518 = uint(findLSB(_2514)) + (_2318 << 5u);
                        uint _2515 = (_2514 + 4294967295u) & _2514;
                        uint _2520 = _2518 * 48u;
                        vec4 _2534 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2520)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2520 + 3u)).x));
                        uint _2540 = (_2518 * 48u) + 4u;
                        vec4 _2553 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2540)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2540 + 3u)).x));
                        uint _2559 = (_2518 * 48u) + 8u;
                        vec3 _2570 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2559)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2559 + 2u)).x));
                        float _2574 = _2534.x - _1975;
                        float _2575 = _2534.y - _1976;
                        float _2576 = _2534.z - _1977;
                        float _2577 = dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576));
                        float _2580 = inversesqrt(_2577);
                        float _2581 = _2580 * _2574;
                        float _2582 = _2580 * _2575;
                        float _2583 = _2580 * _2576;
                        float _2584 = dot(vec3(_562, _565, _568), vec3(_2581, _2582, _2583));
                        float _2589 = 1.0 - (_2577 * _2534.w);
                        float _3819 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2590 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2591 = sqrt(_2577) * _2553.w;
                        float _2594 = 1.39999997615814208984375 / (_2591 + 1.39999997615814208984375);
                        float _2595 = _2594 * _2594;
                        float _2598 = ((1.0 - _2595) * _2584) + _2595;
                        float _2601 = _2591 * _2591;
                        float _2605 = ((isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0))) * _2590) / ((_2601 * 0.699999988079071044921875) + 1.0);
                        float _2609 = (-0.0) - _1975;
                        float _2610 = (-0.0) - _1976;
                        float _2611 = (-0.0) - _1977;
                        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
                        float _2616 = _2615 * _2609;
                        float _2617 = _2615 * _2610;
                        float _2618 = _2615 * _2611;
                        float _2626 = exp2(log2(1.0 / ((_2601 * 3.5) + 5.0)) * 0.25);
                        float _2627 = 1.0 - _638;
                        float _2634 = sqrt(1.0 - ((1.0 - (_2627 * _2627)) * (1.0 - (_2626 * _2626))));
                        float _2635 = _2634 * _2634;
                        float _2636 = _2635 * _2635;
                        float _2637 = _2616 + _2581;
                        float _2638 = _2617 + _2582;
                        float _2639 = _2618 + _2583;
                        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
                        float _2647 = dot(vec3(_562, _565, _568), vec3(_2616, _2617, _2618));
                        float _3835 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2650 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
                        float _2651 = dot(vec3(_562, _565, _568), vec3(_2643 * _2637, _2643 * _2638, _2643 * _2639));
                        float _3846 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
                        float _2654 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
                        float _2658 = ((_2654 * _2654) * (_2636 + (-1.0))) + 1.0;
                        float _2659 = _2594 * _2635;
                        float _2660 = _2659 * _2659;
                        float _2663 = ((1.0 - _2660) * _2584) + _2660;
                        float _3857 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
                        float _2664 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
                        float _2665 = 1.0 - _2635;
                        float _2675 = (0.5 / (((_2664 * ((_2650 * _2665) + _2635)) + 9.9999999392252902907785028219223e-09) + (((_2664 * _2665) + _2635) * _2650))) * _2664;
                        float _3868 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                        float _2686 = (((_2636 * 3.1415927410125732421875) * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) / ((_2658 * _2658) * ((_2601 * 2.1991131305694580078125) + 3.141590118408203125))) * _2590;
                        _2412 = (_2605 * _2553.x) + _2511;
                        _2413 = (_2605 * _2553.y) + _2512;
                        _2414 = (_2605 * _2553.z) + _2513;
                        _2409 = (_2686 * _2570.x) + _2508;
                        _2410 = (_2686 * _2570.y) + _2509;
                        _2411 = (_2686 * _2570.z) + _2510;
                        if (_2515 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2508 = _2409;
                            _2509 = _2410;
                            _2510 = _2411;
                            _2511 = _2412;
                            _2512 = _2413;
                            _2513 = _2414;
                            _2514 = _2515;
                        }
                    }
                    frontier_phi_63_pred = _2411;
                    frontier_phi_63_pred_1 = _2414;
                    frontier_phi_63_pred_2 = _2413;
                    frontier_phi_63_pred_3 = _2412;
                    frontier_phi_63_pred_4 = _2410;
                    frontier_phi_63_pred_5 = _2409;
                }
                _2133 = frontier_phi_63_pred;
                _2139 = frontier_phi_63_pred_1;
                _2137 = frontier_phi_63_pred_2;
                _2135 = frontier_phi_63_pred_3;
                _2131 = frontier_phi_63_pred_4;
                _2129 = frontier_phi_63_pred_5;
                uint _2319 = _2318 + 1u;
                if (_2319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2312 = _2129;
                    _2313 = _2131;
                    _2314 = _2133;
                    _2315 = _2135;
                    _2316 = _2137;
                    _2317 = _2139;
                    _2318 = _2319;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
            _2136 = _2137;
            _2138 = _2139;
        }
        uvec4 _2142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2143 = _2142.z;
        uint _2145 = (_2143 >> 8u) & 15u;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        float _2288;
        float _2290;
        if (((4294967295u << _2145) & _2021) == 0u)
        {
            _2280 = _2128;
            _2282 = _2130;
            _2284 = _2132;
            _2286 = _2134;
            _2288 = _2136;
            _2290 = _2138;
        }
        else
        {
            float _2305 = inversesqrt(dot(vec3(_1975, _1976, _1977), vec3(_1975, _1976, _1977)));
            float _2306 = _2305 * _1975;
            float _2307 = _2305 * _1976;
            float _2308 = _2305 * _1977;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2145 < ((_2143 >> 12u) & 15u))
            {
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2289;
                float _2291;
                float _2491 = _2128;
                float _2492 = _2130;
                float _2493 = _2132;
                float _2494 = _2134;
                float _2495 = _2136;
                float _2496 = _2138;
                uint _2497 = _2145;
                uint _2506;
                bool _2507;
                for (;;)
                {
                    _2506 = texelFetch(g_lightClassification, int((((_2015 << 5u) + (_2001 << 9u)) + (_2497 << 2u)) >> 2u)).x;
                    _2507 = _2506 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2507)
                    {
                        frontier_phi_77_pred = _2496;
                        frontier_phi_77_pred_1 = _2495;
                        frontier_phi_77_pred_2 = _2494;
                        frontier_phi_77_pred_3 = _2493;
                        frontier_phi_77_pred_4 = _2492;
                        frontier_phi_77_pred_5 = _2491;
                    }
                    else
                    {
                        float _2721;
                        float _2722;
                        float _2723;
                        float _2724;
                        float _2725;
                        float _2726;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _2734 = _2491;
                        float _2735 = _2492;
                        float _2736 = _2493;
                        float _2737 = _2494;
                        float _2738 = _2495;
                        float _2739 = _2496;
                        uint _2740 = _2506;
                        uint _2741;
                        vec4 _2766;
                        float _2767;
                        vec4 _2782;
                        vec3 _2794;
                        vec4 _2809;
                        vec4 _2825;
                        float _2871;
                        bool _2872;
                        for (;;)
                        {
                            uint _2751 = ((_2497 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2740));
                            _2741 = (_2740 + 4294967295u) & _2740;
                            uint _2753 = _2751 * 40u;
                            _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            _2767 = _2766.w;
                            uint _2769 = (_2751 * 40u) + 4u;
                            _2782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2769 + 3u)).x));
                            uint _2784 = (_2751 * 40u) + 8u;
                            _2794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x));
                            uint _2796 = (_2751 * 40u) + 16u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            uint _2812 = (_2751 * 40u) + 20u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2751 * 40u) + 24u;
                            vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 3u)).x));
                            uint _2846 = (_2751 * 40u) + 28u;
                            vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2871 = fma(_1977, _2859.z, fma(_1976, _2859.y, _2859.x * _1975)) + _2859.w;
                            _2872 = !((fma(_1977, _2840.z, fma(_1976, _2840.y, _2840.x * _1975)) + _2840.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2872)
                            {
                                float _2899 = _2766.x - _1975;
                                float _2900 = _2766.y - _1976;
                                float _2901 = _2766.z - _1977;
                                float _2902 = dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901));
                                float _2905 = inversesqrt(_2902);
                                float _2906 = _2905 * _2899;
                                float _2907 = _2905 * _2900;
                                float _2908 = _2905 * _2901;
                                float _2912 = 1.0 - (_2902 / (_2767 * _2767));
                                float _3879 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                                float _2913 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                                float _2917 = sqrt(_2902) * _2782.w;
                                float _2919 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                                float _2920 = _2919 * _2919;
                                float _2923 = ((1.0 - _2920) * dot(vec3(_2906, _2907, _2908), vec3(_562, _565, _568))) + _2920;
                                float _2926 = _2917 * _2917;
                                float _2930 = (fma(_1977, _2809.z, fma(_1976, _2809.y, _2809.x * _1975)) + _2809.w) / _2871;
                                float _2931 = (fma(_1977, _2825.z, fma(_1976, _2825.y, _2825.x * _1975)) + _2825.w) / _2871;
                                float _2935 = 1.0 - dot(vec2(_2930, _2931), vec2(_2930, _2931));
                                float _3895 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
                                float _2937 = _2936 * (((isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0))) * _2913) / ((_2926 * 0.699999988079071044921875) + 1.0));
                                float _2949 = exp2(log2(1.0 / ((_2926 * 3.5) + 5.0)) * 0.25);
                                float _2950 = 1.0 - _638;
                                float _2957 = sqrt(1.0 - ((1.0 - (_2950 * _2950)) * (1.0 - (_2949 * _2949))));
                                float _2958 = _2957 * _2957;
                                float _2959 = _2958 * _2958;
                                float _2960 = _2906 - _2306;
                                float _2961 = _2907 - _2307;
                                float _2962 = _2908 - _2308;
                                float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                                float _2970 = dot(vec3(_562, _565, _568), vec3((-0.0) - _2306, (-0.0) - _2307, (-0.0) - _2308));
                                float _3906 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2973 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
                                float _2974 = dot(vec3(_562, _565, _568), vec3(_2966 * _2960, _2966 * _2961, _2966 * _2962));
                                float _3917 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2977 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
                                float _2981 = ((_2977 * _2977) * (_2959 + (-1.0))) + 1.0;
                                float _2982 = _2919 * _2958;
                                float _2983 = _2982 * _2982;
                                float _2989 = ((1.0 - _2983) * dot(vec3(_562, _565, _568), vec3(_2906, _2907, _2908))) + _2983;
                                float _3928 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                                float _2990 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _2991 = 1.0 - _2958;
                                float _3001 = (0.5 / (((_2990 * ((_2973 * _2991) + _2958)) + 9.9999999392252902907785028219223e-09) + (((_2990 * _2991) + _2958) * _2973))) * _2990;
                                float _3939 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3011 = (_2936 * _2913) * (((_2959 * 3.1415927410125732421875) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) / ((_2981 * _2981) * ((_2926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2937 * _2782.x;
                                frontier_phi_83_pred_1 = _2937 * _2782.z;
                                frontier_phi_83_pred_2 = _2937 * _2782.y;
                                frontier_phi_83_pred_3 = _3011 * _2794.z;
                                frontier_phi_83_pred_4 = _3011 * _2794.y;
                                frontier_phi_83_pred_5 = _3011 * _2794.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3018 = frontier_phi_83_pred;
                            _3020 = frontier_phi_83_pred_1;
                            _3019 = frontier_phi_83_pred_2;
                            _3017 = frontier_phi_83_pred_3;
                            _3016 = frontier_phi_83_pred_4;
                            _3015 = frontier_phi_83_pred_5;
                            _2724 = _3018 + _2737;
                            _2725 = _3019 + _2738;
                            _2726 = _3020 + _2739;
                            _2721 = _3015 + _2734;
                            _2722 = _3016 + _2735;
                            _2723 = _3017 + _2736;
                            if (_2741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2724;
                                _2738 = _2725;
                                _2739 = _2726;
                                _2740 = _2741;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2726;
                        frontier_phi_77_pred_1 = _2725;
                        frontier_phi_77_pred_2 = _2724;
                        frontier_phi_77_pred_3 = _2723;
                        frontier_phi_77_pred_4 = _2722;
                        frontier_phi_77_pred_5 = _2721;
                    }
                    _2291 = frontier_phi_77_pred;
                    _2289 = frontier_phi_77_pred_1;
                    _2287 = frontier_phi_77_pred_2;
                    _2285 = frontier_phi_77_pred_3;
                    _2283 = frontier_phi_77_pred_4;
                    _2281 = frontier_phi_77_pred_5;
                    uint _2498 = _2497 + 1u;
                    if (_2498 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2491 = _2281;
                        _2492 = _2283;
                        _2493 = _2285;
                        _2494 = _2287;
                        _2495 = _2289;
                        _2496 = _2291;
                        _2497 = _2498;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2283;
                frontier_phi_52_53_ladder_1 = _2291;
                frontier_phi_52_53_ladder_2 = _2289;
                frontier_phi_52_53_ladder_3 = _2287;
                frontier_phi_52_53_ladder_4 = _2285;
                frontier_phi_52_53_ladder_5 = _2281;
            }
            else
            {
                frontier_phi_52_53_ladder = _2130;
                frontier_phi_52_53_ladder_1 = _2138;
                frontier_phi_52_53_ladder_2 = _2136;
                frontier_phi_52_53_ladder_3 = _2134;
                frontier_phi_52_53_ladder_4 = _2132;
                frontier_phi_52_53_ladder_5 = _2128;
            }
            _2280 = frontier_phi_52_53_ladder_5;
            _2282 = frontier_phi_52_53_ladder;
            _2284 = frontier_phi_52_53_ladder_4;
            _2286 = frontier_phi_52_53_ladder_3;
            _2288 = frontier_phi_52_53_ladder_2;
            _2290 = frontier_phi_52_53_ladder_1;
        }
        float _2295 = isnan(1.0) ? _622 : (isnan(_622) ? 1.0 : min(_622, 1.0));
        _2034 = (_2295 * _2286) + _1753;
        _2036 = (_2295 * _2288) + _1754;
        _2038 = (_2295 * _2290) + _1755;
        _2040 = ((_2280 * _607) * _2295) + _1917;
        _2042 = ((_2282 * _609) * _2295) + _1918;
        _2044 = ((_2284 * _610) * _2295) + _1919;
    }
    else
    {
        _2034 = _1753;
        _2036 = _1754;
        _2038 = _1755;
        _2040 = _1917;
        _2042 = _1918;
        _2044 = _1919;
    }
    uint _2050 = _583 + uint(cbMatDynParam._m0[0u].w);
    float _3955 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3966 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3977 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _2075 = (((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (_2034 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _622))) + ((_2040 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + (((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2050].x);
    float _2077 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2050].y) + ((_2042 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * (_2036 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _622)));
    float _2079 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) * cbInstanceData._m0[_2050].z) + ((_2044 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _1462)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_2038 + ((isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0))) * _622)));
    float _2080 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2081 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2082 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    uint _2083 = _581 + 6u;
    float _2091 = _541 / cbSceneParam._m0[86u].x;
    float _2092 = _542 / cbSceneParam._m0[86u].y;
    vec4 _2106 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2091, _2092, (log2((isnan(cbSceneParam._m0[77u].w) ? _514 : (isnan(_514) ? cbSceneParam._m0[77u].w : min(_514, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2108 = _2106.x;
    float _2109 = _2106.y;
    float _2110 = _2106.z;
    float _2111 = _2106.w;
    float _2191;
    float _2193;
    float _2195;
    float _2197;
    if (_514 > cbSceneParam._m0[78u].w)
    {
        float _2153 = isnan(_514) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _514 : min(cbSceneParam._m0[80u].w, _514));
        float _2154 = _2153 / _514;
        float _2165 = _2154 * _261;
        float _2166 = _262 * _2154;
        float _2167 = (-0.0) - _2166;
        float _2168 = _2154 * _263;
        float _2170 = (cbSceneParam._m0[77u].w * _2167) / _2153;
        float _2171 = _2170 + cbSceneParam._m0[79u].w;
        float _2172 = cbSceneParam._m0[79u].w - _2166;
        float _2178 = sqrt(((_2165 * _2165) + (_2166 * _2166)) + (_2168 * _2168));
        float _2181 = (1.0 - (cbSceneParam._m0[77u].w / _2153)) * _2178;
        float _2187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2422;
        if (abs((_2167 - _2170) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2422 = ((((_2171 > 0.0) ? exp2(_2187 * _2171) : (2.0 - exp2(_2189 * _2171))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2181;
        }
        else
        {
            float _2341 = 1.0 / cbSceneParam._m0[80u].x;
            float _2342 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : max(_2171, _2172));
            float _2343 = isnan(_2172) ? _2171 : (isnan(_2171) ? _2172 : min(_2171, _2172));
            float _2352 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : min(_2342, 0.0));
            float _2353 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : min(_2343, 0.0));
            _2422 = ((abs(_2178 / _2167) * cbSceneParam._m0[80u].y) * ((((_2352 - _2353) * 2.0) - ((exp2(_2187 * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)))) - exp2(_2187 * (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))))) * _2341)) - ((exp2(_2189 * _2352) - exp2(_2189 * _2353)) * _2341))) + (_2181 * cbSceneParam._m0[80u].z);
        }
        vec4 _2424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2091, _2092, 1.0), 0.0);
        float _2433 = exp2((_2422 * (-1.44269502162933349609375)) * (1.0 - _2424.w));
        float _2434 = log2(_2433);
        float _2450 = log2(_2111);
        _2191 = (exp2(_2450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].x)) * _2424.x) / cbSceneParam._m0[78u].x)) + _2108;
        _2193 = (exp2(_2450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].y)) * _2424.y) / cbSceneParam._m0[78u].y)) + _2109;
        _2195 = (exp2(_2450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2434 * cbSceneParam._m0[78u].z)) * _2424.z) / cbSceneParam._m0[78u].z)) + _2110;
        _2197 = _2433 * _2111;
    }
    else
    {
        _2191 = _2108;
        _2193 = _2109;
        _2195 = _2110;
        _2197 = _2111;
    }
    bool _2460;
    vec4 _2207;
    vec4 _2229;
    float _2231;
    float _2235;
    float _2236;
    float _2237;
    float _2238;
    bool _2248;
    for (;;)
    {
        _2207 = cbMatDynParam._m0[0u];
        float _2209 = roundEven(_2207.y);
        bool _2210 = _2209 == 3.0;
        float _2211 = log2(_2197);
        float _2218 = exp2(_2211 * cbSceneParam._m0[78u].x) * _2080;
        float _2219 = exp2(_2211 * cbSceneParam._m0[78u].y) * _2081;
        float _2220 = exp2(_2211 * cbSceneParam._m0[78u].z) * _2082;
        float _2227 = _528 + (-0.5);
        _2229 = cbMtdParam._m0[1u];
        _2231 = _2229.y * _2227;
        float _2234 = (_2209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2235 = _2234 * (_2210 ? _2218 : (_2218 + (cbSceneParam._m0[72u].w * _2191)));
        _2236 = _2234 * (_2210 ? _2219 : (_2219 + (cbSceneParam._m0[72u].w * _2193)));
        _2237 = _2234 * (_2210 ? _2220 : (_2220 + (cbSceneParam._m0[72u].w * _2195)));
        _2238 = _2227 * 0.999000012874603271484375;
        _2248 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2248)
        {
            if ((cbInstanceData._m0[_581 + 7u].x + _2238) < 0.5)
            {
                _2460 = true;
                break;
            }
        }
        uint _2376 = _583 + uint(_2207.w);
        if ((cbInstanceData._m0[_2376].w < 1.0) && ((cbInstanceData._m0[_2376].w + _2238) < 0.5))
        {
            _2460 = true;
            break;
        }
        if ((_2231 + 1.0) < _2229.x)
        {
            _2460 = true;
            break;
        }
        _2460 = false;
        break;
    }
    float _2691;
    if (_2460)
    {
        discard_state = true;
        _2691 = 0.0;
    }
    else
    {
        _2691 = cbInstanceData._m0[_2083].w;
    }
    SV_Target.x = _2235;
    SV_Target.y = _2236;
    SV_Target.z = _2237;
    SV_Target.w = _2691;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2083].w;
    discard_exit();
}


