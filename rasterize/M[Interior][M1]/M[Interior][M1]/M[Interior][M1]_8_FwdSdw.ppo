#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _342;
uint _2062;
uint _2063;
uint _2064;
uint _2277;
uint _2278;
uint _2279;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _169 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _170 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _171 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _176 = inversesqrt(dot(vec3(_169, _170, _171), vec3(_169, _170, _171)));
    float _177 = _176 * _169;
    float _178 = _176 * _170;
    float _179 = _176 * _171;
    float _183 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _187 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _188 = _187 * TANGENT.x;
    float _189 = _187 * TANGENT.y;
    float _190 = _187 * TANGENT.z;
    float _235 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _245 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _235);
    float _246 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _235);
    float _247 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _235);
    float _272 = inversesqrt(dot(vec3(_177, _178, _179), vec3(_177, _178, _179)));
    float _279 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _288 = cbMtdParam._m0[23u].x + _245;
    float _289 = cbMtdParam._m0[23u].y + _246;
    float _290 = cbMtdParam._m0[23u].z + _247;
    float _307 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_272 * _177, _272 * _178, _272 * _179));
    float _308 = (-0.0) - dot(vec3(_288, _289, _290), vec3(_279 * _188, _279 * _189, _279 * _190));
    float _309 = (-0.0) - dot(vec3(_288, _289, _290), vec3((-0.0) - (NORMAL.x * _183), (-0.0) - (NORMAL.y * _183), (-0.0) - (NORMAL.z * _183)));
    float _313 = inversesqrt(dot(vec3(_307, _308, _309), vec3(_307, _308, _309)));
    float _314 = _313 * _309;
    float _316 = (cbMtdParam._m0[19u].w * _307) * _313;
    float _318 = (cbMtdParam._m0[20u].x * _308) * _313;
    float _321 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _322 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _340;
    float _343;
    float _345;
    if (_316 > 0.0)
    {
        float _326 = (1.0 - _321) / _316;
        _340 = _326;
        _343 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_326 * _314)) * 0.16666667163372039794921875;
        _345 = (fract((_326 * _318) + _322) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_316 < 0.0)
        {
            float _341 = ((-0.0) - _321) / _316;
            frontier_phi_3_2_ladder = (fract(_341 * _314) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _341;
            frontier_phi_3_2_ladder_2 = (fract((_341 * _318) + _322) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _342;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _340 = frontier_phi_3_2_ladder_1;
        _343 = frontier_phi_3_2_ladder;
        _345 = frontier_phi_3_2_ladder_2;
    }
    float _371;
    float _373;
    float _375;
    if (_318 > 0.0)
    {
        float _358 = (1.0 - _322) / _318;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_358 < _340)
        {
            frontier_phi_8_5_ladder = (fract(_358 * _314) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_358 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _358;
        }
        else
        {
            frontier_phi_8_5_ladder = _345;
            frontier_phi_8_5_ladder_1 = _343;
            frontier_phi_8_5_ladder_2 = _340;
        }
        _371 = frontier_phi_8_5_ladder_2;
        _373 = frontier_phi_8_5_ladder_1;
        _375 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_318 < 0.0)
        {
            float _372 = ((-0.0) - _322) / _318;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_372 < _340)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_372 * _314) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_372 * _316) + _321) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _372;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _345;
                frontier_phi_8_6_ladder_9_ladder_1 = _343;
                frontier_phi_8_6_ladder_9_ladder_2 = _340;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _345;
            frontier_phi_8_6_ladder_1 = _343;
            frontier_phi_8_6_ladder_2 = _340;
        }
        _371 = frontier_phi_8_6_ladder_2;
        _373 = frontier_phi_8_6_ladder_1;
        _375 = frontier_phi_8_6_ladder;
    }
    float _379 = (_314 > 0.0) ? (cbMtdParam._m0[16u].w / _314) : 5000.0;
    float _392;
    float _393;
    if (_379 < _371)
    {
        _392 = ((_321 + cbMtdParam._m0[17u].x) + (_379 * _316)) * 0.16666667163372039794921875;
        _393 = (((_379 * _318) + _322) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _392 = _373;
        _393 = _375;
    }
    vec4 _396 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_392, _393));
    float _420 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _424 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _425 = _245 * _424;
    float _426 = _246 * _424;
    float _427 = _247 * _424;
    float _433 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _434 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_433 * cbSceneParam._m0[86u].x, _434 * cbSceneParam._m0[86u].y));
    float _446 = _443.x * TEXCOORD.z;
    float _447 = (-0.0) - _425;
    float _448 = (-0.0) - _426;
    float _449 = (-0.0) - _427;
    float _471 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _475 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _619;
    float _620;
    float _621;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = (cbModelParam._m0[37u].x * ((((fma(_479, cbModelParam._m0[26u].z, fma(_475, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _471)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _543 = (cbModelParam._m0[37u].y * ((((fma(_479, cbModelParam._m0[27u].z, fma(_475, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _471)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _544 = (((((fma(_479, cbModelParam._m0[28u].z, fma(_475, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _471)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _592 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _602 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _612 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_568.x + (-0.5));
        float _614 = _612 * (_568.y + (-0.5));
        float _615 = _612 * (_568.z + (-0.5));
        _619 = _581 * (_547.z + (-0.5));
        _620 = _581 * (_547.y + (-0.5));
        _621 = _581 * (_547.x + (-0.5));
        _622 = _592 * (_554.z + (-0.5));
        _623 = _592 * (_554.y + (-0.5));
        _624 = _592 * (_554.x + (-0.5));
        _625 = _602 * (_561.z + (-0.5));
        _626 = _602 * (_561.y + (-0.5));
        _627 = _602 * (_561.x + (-0.5));
        _628 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        _629 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        _630 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    }
    else
    {
        _619 = _342;
        _620 = _342;
        _621 = _342;
        _622 = _342;
        _623 = _342;
        _624 = _342;
        _625 = _342;
        _626 = _342;
        _627 = _342;
        _628 = _342;
        _629 = _342;
        _630 = _342;
    }
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _684 = (cbModelParam._m0[38u].x * ((((fma(_479, cbModelParam._m0[30u].z, fma(_475, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _471)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _685 = (cbModelParam._m0[38u].y * ((((fma(_479, cbModelParam._m0[31u].z, fma(_475, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _471)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _686 = (((((fma(_479, cbModelParam._m0[32u].z, fma(_475, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _471)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _721 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _731 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _741 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _751 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_709.x + (-0.5));
        float _753 = _751 * (_709.y + (-0.5));
        float _754 = _751 * (_709.z + (-0.5));
        _758 = _721 * (_688.z + (-0.5));
        _759 = _721 * (_688.y + (-0.5));
        _760 = _721 * (_688.x + (-0.5));
        _761 = _731 * (_695.z + (-0.5));
        _762 = _731 * (_695.y + (-0.5));
        _763 = _731 * (_695.x + (-0.5));
        _764 = _741 * (_702.z + (-0.5));
        _765 = _741 * (_702.y + (-0.5));
        _766 = _741 * (_702.x + (-0.5));
        _767 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        _768 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        _769 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    }
    else
    {
        _758 = _342;
        _759 = _342;
        _760 = _342;
        _761 = _342;
        _762 = _342;
        _763 = _342;
        _764 = _342;
        _765 = _342;
        _766 = _342;
        _767 = _342;
        _768 = _342;
        _769 = _342;
    }
    float _784 = _425 * (-0.5);
    float _785 = _426 * (-0.5);
    float _786 = _427 * (-0.5);
    float _787 = dot(vec4(_784, _785, _786, 1.0), vec4(_760, _763, _766, _769));
    float _790 = dot(vec4(_784, _785, _786, 1.0), vec4(_759, _762, _765, _768));
    float _793 = dot(vec4(_784, _785, _786, 1.0), vec4(_758, _761, _764, _767));
    float _828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _800 = dot(vec4(_784, _785, _786, 1.0), vec4(_619, _622, _625, _628));
        float _804 = dot(vec4(_784, _785, _786, 1.0), vec4(_620, _623, _626, _629));
        float _808 = dot(vec4(_784, _785, _786, 1.0), vec4(_621, _624, _627, _630));
        float _815 = dot(vec4(cbModelParam._m0[39u]), vec4(_784, _785, _786, 1.0));
        _828 = dot(vec3(isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)), isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_815) ? 0.0 : (isnan(0.0) ? _815 : max(0.0, _815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _828 = 1.0;
    }
    float _839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _830 = dot(vec4(cbModelParam._m0[40u]), vec4(_784, _785, _786, 1.0));
        _839 = dot(vec3(isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)), isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)), isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_830) ? 0.0 : (isnan(0.0) ? _830 : max(0.0, _830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _839 = 1.0;
    }
    float _843 = (_839 * cbModelParam._m0[1u].x) + (_828 * (1.0 - cbModelParam._m0[1u].x));
    float _850 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _933;
    float _935;
    float _937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _900 = fma(_479, cbModelParam._m0[13u].z, fma(_475, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471)) + cbModelParam._m0[13u].w;
        float _904 = fma(_479, cbModelParam._m0[14u].z, fma(_475, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471)) + cbModelParam._m0[14u].w;
        float _908 = fma(_479, cbModelParam._m0[15u].z, fma(_475, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471)) + cbModelParam._m0[15u].w;
        float _911 = fma(_449, cbModelParam._m0[13u].z, fma(_448, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _447));
        float _914 = fma(_449, cbModelParam._m0[14u].z, fma(_448, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _447));
        float _917 = fma(_449, cbModelParam._m0[15u].z, fma(_448, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _447));
        float _943;
        if (_911 > 0.0)
        {
            _943 = abs((1.0 - _900) / _911);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_911 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_900 + 1.0) / _911);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _943 = frontier_phi_26_24_ladder;
        }
        float _1134;
        if (_914 > 0.0)
        {
            _1134 = abs((1.0 - _904) / _914);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_914 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_904 + 1.0) / _914);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1134 = frontier_phi_35_31_ladder;
        }
        float _1490;
        if (_917 > 0.0)
        {
            _1490 = abs((1.0 - _908) / _917);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_917 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_908 + 1.0) / _917);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1490 = frontier_phi_47_42_ladder;
        }
        float _1492 = isnan(_1134) ? _943 : (isnan(_943) ? _1134 : min(_943, _1134));
        float _1493 = isnan(_1490) ? _1492 : (isnan(_1492) ? _1490 : min(_1492, _1490));
        float _1497 = (_1493 * _911) + _900;
        float _1498 = (_1493 * _914) + _904;
        float _1499 = (_1493 * _917) + _908;
        float _1500 = _1493 * 9.9999997473787516355514526367188e-05;
        float _1502 = (-1.0) - _1500;
        float _1504 = _1500 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1499 > _1504) || ((_1499 < _1502) || ((_1498 > _1504) || ((_1498 < _1502) || ((_1497 < _1502) || (_1497 > _1504))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1499, cbModelParam._m0[9u].z, fma(_1498, cbModelParam._m0[9u].y, _1497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1499, cbModelParam._m0[10u].z, fma(_1498, cbModelParam._m0[10u].y, _1497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1499, cbModelParam._m0[11u].z, fma(_1498, cbModelParam._m0[11u].y, _1497 * cbModelParam._m0[11u].x))), _850);
            frontier_phi_25_47_ladder = _1734.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _1734.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _1734.x * cbModelParam._m0[1u].y;
        }
        _933 = frontier_phi_25_47_ladder_2;
        _935 = frontier_phi_25_47_ladder_1;
        _937 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_447, _448, _449), _850);
        _933 = _921.x * cbModelParam._m0[1u].y;
        _935 = _921.y * cbModelParam._m0[1u].y;
        _937 = _921.z * cbModelParam._m0[1u].y;
    }
    float _940 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1031;
    float _1033;
    float _1035;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _995 = fma(_479, cbModelParam._m0[21u].z, fma(_475, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471)) + cbModelParam._m0[21u].w;
        float _999 = fma(_479, cbModelParam._m0[22u].z, fma(_475, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471)) + cbModelParam._m0[22u].w;
        float _1003 = fma(_479, cbModelParam._m0[23u].z, fma(_475, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471)) + cbModelParam._m0[23u].w;
        float _1006 = fma(_449, cbModelParam._m0[21u].z, fma(_448, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _447));
        float _1009 = fma(_449, cbModelParam._m0[22u].z, fma(_448, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _447));
        float _1012 = fma(_449, cbModelParam._m0[23u].z, fma(_448, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _447));
        float _1139;
        if (_1006 > 0.0)
        {
            _1139 = abs((1.0 - _995) / _1006);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1006 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_995 + 1.0) / _1006);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1139 = frontier_phi_37_33_ladder;
        }
        float _1517;
        if (_1009 > 0.0)
        {
            _1517 = abs((1.0 - _999) / _1009);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1009 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_999 + 1.0) / _1009);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _1517 = frontier_phi_49_44_ladder;
        }
        float _1850;
        if (_1012 > 0.0)
        {
            _1850 = abs((1.0 - _1003) / _1012);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1012 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1003 + 1.0) / _1012);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1850 = frontier_phi_61_56_ladder;
        }
        float _1852 = isnan(_1517) ? _1139 : (isnan(_1139) ? _1517 : min(_1139, _1517));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1006) + _995;
        float _1858 = (_1853 * _1009) + _999;
        float _1859 = (_1853 * _1012) + _1003;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1860;
        float _1863 = _1860 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_1859 > _1863) || ((_1859 < _1861) || ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 < _1861) || (_1857 > _1863))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1859, cbModelParam._m0[17u].z, fma(_1858, cbModelParam._m0[17u].y, _1857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1859, cbModelParam._m0[18u].z, fma(_1858, cbModelParam._m0[18u].y, _1857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1859, cbModelParam._m0[19u].z, fma(_1858, cbModelParam._m0[19u].y, _1857 * cbModelParam._m0[19u].x))), _940);
            frontier_phi_34_61_ladder = _1965.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _1965.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _1965.x * cbModelParam._m0[1u].z;
        }
        _1031 = frontier_phi_34_61_ladder_2;
        _1033 = frontier_phi_34_61_ladder;
        _1035 = frontier_phi_34_61_ladder_1;
    }
    else
    {
        vec4 _1015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_447, _448, _449), _940);
        _1031 = _1015.x * cbModelParam._m0[1u].z;
        _1033 = _1015.y * cbModelParam._m0[1u].z;
        _1035 = _1015.z * cbModelParam._m0[1u].z;
    }
    float _1047 = _446 * 0.01200000010430812835693359375;
    float _1049 = _1047 * ((cbModelParam._m0[1u].w * (_1031 - _933)) + _933);
    float _1050 = _1047 * ((cbModelParam._m0[1u].w * (_1033 - _935)) + _935);
    float _1051 = _1047 * ((cbModelParam._m0[1u].w * (_1035 - _937)) + _937);
    float _1072 = fma(_1051, cbSceneParam._m0[89u].z, fma(_1050, cbSceneParam._m0[89u].y, _1049 * cbSceneParam._m0[89u].x));
    float _1075 = fma(_1051, cbSceneParam._m0[90u].z, fma(_1050, cbSceneParam._m0[90u].y, _1049 * cbSceneParam._m0[90u].x));
    float _1078 = fma(_1051, cbSceneParam._m0[91u].z, fma(_1050, cbSceneParam._m0[91u].y, _1049 * cbSceneParam._m0[91u].x));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1126 = _1113 / _1125;
    float _1127 = _1117 / _1125;
    float _1128 = _1121 / _1125;
    float _1276;
    float _1277;
    float _1278;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1155 = ((uint(_1128 > cbSceneParam._m0[59u].y) + uint(_1128 > cbSceneParam._m0[59u].x)) + uint(_1128 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1156 = _1155 + 43u;
        uint _1164 = _1155 + 44u;
        uint _1172 = _1155 + 45u;
        uint _1180 = _1155 + 46u;
        float _1191 = fma(_1125, cbSceneParam._m0[_1156].w, fma(_1121, cbSceneParam._m0[_1156].z, fma(_1117, cbSceneParam._m0[_1156].y, _1113 * cbSceneParam._m0[_1156].x)));
        float _1195 = fma(_1125, cbSceneParam._m0[_1164].w, fma(_1121, cbSceneParam._m0[_1164].z, fma(_1117, cbSceneParam._m0[_1164].y, _1113 * cbSceneParam._m0[_1164].x)));
        float _1203 = fma(_1125, cbSceneParam._m0[_1180].w, fma(_1121, cbSceneParam._m0[_1180].z, fma(_1117, cbSceneParam._m0[_1180].y, _1113 * cbSceneParam._m0[_1180].x)));
        float _1208 = cbSceneParam._m0[33u].z * _1203;
        float _1210 = cbSceneParam._m0[33u].w * _1203;
        float _1213 = fma(_1125, cbSceneParam._m0[_1172].w, fma(_1121, cbSceneParam._m0[_1172].z, fma(_1117, cbSceneParam._m0[_1172].y, _1113 * cbSceneParam._m0[_1172].x))) / _1203;
        float _1261 = (cbSceneParam._m0[33u].x - sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128))) * cbSceneParam._m0[33u].y;
        float _2629 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1269 = (isnan(1.0) ? _2629 : (isnan(_2629) ? 1.0 : min(_2629, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1208 + _1191) / _1203, (_1210 + _1195) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1210 + _1191) / _1203, (_1195 - _1208) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1191 - _1208) / _1203, (_1195 - _1210) / _1203), _1213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1191 - _1210) / _1203, (_1208 + _1195) / _1203), _1213), 0.0)).x), vec4(0.25)));
        _1276 = 1.0 - (_1269 * cbSceneParam._m0[34u].x);
        _1277 = 1.0 - (_1269 * cbSceneParam._m0[34u].y);
        _1278 = 1.0 - (_1269 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1276 = 1.0;
        _1277 = 1.0;
        _1278 = 1.0;
    }
    float _1342;
    float _1344;
    float _1346;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1330 = fma(_1125, cbSceneParam._m0[63u].w, fma(_1121, cbSceneParam._m0[63u].z, fma(_1117, cbSceneParam._m0[63u].y, _1113 * cbSceneParam._m0[63u].x)));
        float _1331 = fma(_1125, cbSceneParam._m0[60u].w, fma(_1121, cbSceneParam._m0[60u].z, fma(_1117, cbSceneParam._m0[60u].y, _1113 * cbSceneParam._m0[60u].x))) / _1330;
        float _1332 = fma(_1125, cbSceneParam._m0[61u].w, fma(_1121, cbSceneParam._m0[61u].z, fma(_1117, cbSceneParam._m0[61u].y, _1113 * cbSceneParam._m0[61u].x))) / _1330;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1331 >= cbSceneParam._m0[64u].x) && (_1332 >= cbSceneParam._m0[64u].y)) && (_1331 <= cbSceneParam._m0[64u].z)) && (_1332 <= cbSceneParam._m0[64u].w))
        {
            float _1530 = fma(_1125, cbSceneParam._m0[62u].w, fma(_1121, cbSceneParam._m0[62u].z, fma(_1117, cbSceneParam._m0[62u].y, _1113 * cbSceneParam._m0[62u].x))) / _1330;
            float _1534 = isnan(cbSceneParam._m0[41u].w) ? _1530 : (isnan(_1530) ? cbSceneParam._m0[41u].w : max(_1530, cbSceneParam._m0[41u].w));
            float _1577 = (cbSceneParam._m0[33u].x - sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128))) * cbSceneParam._m0[33u].y;
            float _2645 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
            float _1584 = (isnan(1.0) ? _2645 : (isnan(_2645) ? 1.0 : min(_2645, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1331, cbSceneParam._m0[33u].w + _1332), _1534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1331, _1332 - cbSceneParam._m0[33u].z), _1534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1331 - cbSceneParam._m0[33u].z, _1332 - cbSceneParam._m0[33u].w), _1534), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1331 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1332), _1534), 0.0)).x), vec4(0.25)));
            float _1588 = 1.0 - (_1584 * cbSceneParam._m0[34u].x);
            float _1589 = 1.0 - (_1584 * cbSceneParam._m0[34u].y);
            float _1590 = 1.0 - (_1584 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_1590) ? _1278 : (isnan(_1278) ? _1590 : min(_1278, _1590));
            frontier_phi_46_45_ladder_1 = isnan(_1589) ? _1277 : (isnan(_1277) ? _1589 : min(_1277, _1589));
            frontier_phi_46_45_ladder_2 = isnan(_1588) ? _1276 : (isnan(_1276) ? _1588 : min(_1276, _1588));
        }
        else
        {
            frontier_phi_46_45_ladder = _1278;
            frontier_phi_46_45_ladder_1 = _1277;
            frontier_phi_46_45_ladder_2 = _1276;
        }
        _1342 = frontier_phi_46_45_ladder_2;
        _1344 = frontier_phi_46_45_ladder_1;
        _1346 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1342 = _1276;
        _1344 = _1277;
        _1346 = _1278;
    }
    uint _1348 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1353 = floatBitsToUint(cbInstanceData._m0[_1348 + 5u]);
    uint _1355 = _1353.x * 14u;
    uint _1356 = _1355 + 13u;
    float _1361 = _446 + (-1.0);
    float _1365 = (cbLight._m0[_1356].x * _1361) + 1.0;
    float _1366 = (cbLight._m0[_1356].y * _1361) + 1.0;
    uint _1367 = _1355 + 8u;
    float _1378 = cbLight._m0[_1355].x + _425;
    float _1379 = cbLight._m0[_1355].y + _426;
    float _1380 = cbLight._m0[_1355].z + _427;
    float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
    float _1388 = dot(vec3(0.0), vec3(cbLight._m0[_1355].xyz));
    float _2671 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
    float _1391 = isnan(1.0) ? _2671 : (isnan(_2671) ? 1.0 : min(_2671, 1.0));
    float _1392 = dot(vec3(0.0), vec3(_425, _426, _427));
    float _2682 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
    float _1395 = isnan(1.0) ? _2682 : (isnan(_2682) ? 1.0 : min(_2682, 1.0));
    float _1396 = dot(vec3(cbLight._m0[_1355].xyz), vec3(_1378 * _1384, _1379 * _1384, _1380 * _1384));
    float _2693 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
    float _1407 = (exp2(log2(1.0 - (isnan(1.0) ? _2693 : (isnan(_2693) ? 1.0 : min(_2693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1413 = (0.5 / ((_1391 + 9.9999999392252902907785028219223e-09) + _1395)) * _1391;
    float _2704 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
    float _1415 = (isnan(1.0) ? _2704 : (isnan(_2704) ? 1.0 : min(_2704, 1.0))) * 0.31831014156341552734375;
    float _1417 = isnan(1.0) ? _1365 : (isnan(_1365) ? 1.0 : min(_1365, 1.0));
    uint _1430 = _1355 + 9u;
    uint _1436 = _1355 | 1u;
    float _1442 = cbLight._m0[_1436].x + _425;
    float _1443 = cbLight._m0[_1436].y + _426;
    float _1444 = cbLight._m0[_1436].z + _427;
    float _1448 = inversesqrt(dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444)));
    float _1452 = dot(vec3(0.0), vec3(cbLight._m0[_1436].xyz));
    float _2720 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
    float _1455 = isnan(1.0) ? _2720 : (isnan(_2720) ? 1.0 : min(_2720, 1.0));
    float _1456 = dot(vec3(cbLight._m0[_1436].xyz), vec3(_1442 * _1448, _1443 * _1448, _1444 * _1448));
    float _2731 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
    float _1465 = (exp2(log2(1.0 - (isnan(1.0) ? _2731 : (isnan(_2731) ? 1.0 : min(_2731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1469 = (0.5 / ((_1455 + 9.9999999392252902907785028219223e-09) + _1395)) * _1455;
    float _2742 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1471 = (isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0))) * 0.31831014156341552734375;
    float _1472 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
    float _1482 = (((_1465 * cbLight._m0[_1430].x) * _1471) * _1472) + ((((cbLight._m0[_1367].x * _1342) * _1407) * _1415) * _1417);
    float _1483 = (((_1465 * cbLight._m0[_1430].y) * _1471) * _1472) + ((((cbLight._m0[_1367].y * _1344) * _1407) * _1415) * _1417);
    float _1484 = (((_1465 * cbLight._m0[_1430].z) * _1471) * _1472) + ((((cbLight._m0[_1367].z * _1346) * _1407) * _1415) * _1417);
    float _1649;
    float _1651;
    float _1653;
    if (_1353.y == 0u)
    {
        uvec4 _1602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1603 = _1602.x;
        uint _1614 = uint((float(_1602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _434) / _1603))) + floor(float(uint(cbSceneParam._m0[85u].x * _433) / _1603)));
        float _1624 = (log2(_1128 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1625 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        uint _1628 = uint(isnan(14.0) ? _1625 : (isnan(_1625) ? 14.0 : min(_1625, 14.0)));
        uvec4 _1634 = texelFetch(g_lightClusterGridBuffer, int(((_1628 << 2u) + (_1614 << 6u)) >> 2u));
        uint _1635 = _1634.x;
        uint _1636 = _1602.z;
        float _1743;
        float _1745;
        float _1747;
        if (((((1u << ((_1636 >> 4u) & 15u)) + 4294967295u) & _1635) == 0u) || ((_1636 & 240u) == 0u))
        {
            _1743 = 0.0;
            _1745 = 0.0;
            _1747 = 0.0;
        }
        else
        {
            float _1744;
            float _1746;
            float _1748;
            float _1896 = 0.0;
            float _1897 = 0.0;
            float _1898 = 0.0;
            uint _1899 = 0u;
            uint _1908;
            bool _1909;
            for (;;)
            {
                _1908 = texelFetch(g_lightClassification, int((((_1628 << 5u) + (_1614 << 9u)) + (_1899 << 2u)) >> 2u)).x;
                _1909 = _1908 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                if (_1909)
                {
                    frontier_phi_70_pred = _1898;
                    frontier_phi_70_pred_1 = _1897;
                    frontier_phi_70_pred_2 = _1896;
                }
                else
                {
                    float _2032;
                    float _2033;
                    float _2034;
                    uint _2035;
                    _2032 = _1896;
                    _2033 = _1897;
                    _2034 = _1898;
                    _2035 = _1908;
                    float _1970;
                    float _1971;
                    float _1972;
                    for (;;)
                    {
                        uint _2039 = uint(findLSB(_2035)) + (_1899 << 5u);
                        uint _2036 = (_2035 + 4294967295u) & _2035;
                        uint _2041 = _2039 * 48u;
                        vec4 _2055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2041)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 3u)).x));
                        uint _2072 = (_2039 * 48u) + 8u;
                        vec3 _2083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2072)).x, texelFetch(g_PointLightRenderingBuffer, int(_2072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2072 + 2u)).x));
                        float _2087 = _2055.x - _1126;
                        float _2088 = _2055.y - _1127;
                        float _2089 = _2055.z - _1128;
                        float _2090 = dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089));
                        float _2093 = inversesqrt(_2090);
                        float _2102 = 1.0 - (_2090 * _2055.w);
                        float _2768 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
                        float _2104 = sqrt(_2090) * uintBitsToFloat(uvec4(_2062, _2063, _2064, texelFetch(g_PointLightRenderingBuffer, int(((_2039 * 48u) + 4u) + 3u)).x)).w;
                        float _2107 = 1.39999997615814208984375 / (_2104 + 1.39999997615814208984375);
                        float _2108 = _2107 * _2107;
                        float _2111 = ((1.0 - _2108) * dot(vec3(0.0), vec3(_2093 * _2087, _2093 * _2088, _2093 * _2089))) + _2108;
                        float _2113 = (-0.0) - _1126;
                        float _2114 = (-0.0) - _1127;
                        float _2115 = (-0.0) - _1128;
                        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
                        float _2123 = dot(vec3(0.0), vec3(_2119 * _2113, _2119 * _2114, _2119 * _2115));
                        float _2779 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
                        float _2790 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
                        float _2127 = isnan(1.0) ? _2790 : (isnan(_2790) ? 1.0 : min(_2790, 1.0));
                        float _2131 = (0.5 / (((isnan(1.0) ? _2779 : (isnan(_2779) ? 1.0 : min(_2779, 1.0))) + 9.9999999392252902907785028219223e-09) + _2127)) * _2127;
                        float _2801 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
                        float _2140 = (((isnan(1.0) ? _2801 : (isnan(_2801) ? 1.0 : min(_2801, 1.0))) * 3.1415927410125732421875) / (((_2104 * _2104) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2768 : (isnan(_2768) ? 1.0 : min(_2768, 1.0)));
                        _1970 = (_2140 * _2083.x) + _2032;
                        _1971 = (_2140 * _2083.y) + _2033;
                        _1972 = (_2140 * _2083.z) + _2034;
                        if (_2036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2032 = _1970;
                            _2033 = _1971;
                            _2034 = _1972;
                            _2035 = _2036;
                        }
                    }
                    frontier_phi_70_pred = _1972;
                    frontier_phi_70_pred_1 = _1971;
                    frontier_phi_70_pred_2 = _1970;
                }
                _1748 = frontier_phi_70_pred;
                _1746 = frontier_phi_70_pred_1;
                _1744 = frontier_phi_70_pred_2;
                uint _1900 = _1899 + 1u;
                if (_1900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1896 = _1744;
                    _1897 = _1746;
                    _1898 = _1748;
                    _1899 = _1900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1743 = _1744;
            _1745 = _1746;
            _1747 = _1748;
        }
        uvec4 _1751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1752 = _1751.z;
        uint _1754 = (_1752 >> 8u) & 15u;
        float _1876;
        float _1878;
        float _1880;
        if (((4294967295u << _1754) & _1635) == 0u)
        {
            _1876 = _1743;
            _1878 = _1745;
            _1880 = _1747;
        }
        else
        {
            float _1892 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            if (_1754 < ((_1752 >> 12u) & 15u))
            {
                float _1877;
                float _1879;
                float _1881;
                float _2018 = _1743;
                float _2019 = _1745;
                float _2020 = _1747;
                uint _2021 = _1754;
                uint _2030;
                bool _2031;
                for (;;)
                {
                    _2030 = texelFetch(g_lightClassification, int((((_1628 << 5u) + (_1614 << 9u)) + (_2021 << 2u)) >> 2u)).x;
                    _2031 = _2030 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    if (_2031)
                    {
                        frontier_phi_76_pred = _2018;
                        frontier_phi_76_pred_1 = _2020;
                        frontier_phi_76_pred_2 = _2019;
                    }
                    else
                    {
                        float _2145;
                        float _2146;
                        float _2147;
                        float _2366;
                        float _2367;
                        float _2368;
                        float _2155 = _2018;
                        float _2156 = _2019;
                        float _2157 = _2020;
                        uint _2158 = _2030;
                        uint _2159;
                        uint _2169;
                        vec4 _2184;
                        float _2185;
                        vec3 _2197;
                        vec4 _2212;
                        vec4 _2227;
                        float _2273;
                        bool _2274;
                        for (;;)
                        {
                            _2169 = ((_2021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2158));
                            _2159 = (_2158 + 4294967295u) & _2158;
                            uint _2171 = _2169 * 40u;
                            _2184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 3u)).x));
                            _2185 = _2184.w;
                            uint _2187 = (_2169 * 40u) + 8u;
                            _2197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 2u)).x));
                            uint _2199 = (_2169 * 40u) + 16u;
                            _2212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 3u)).x));
                            uint _2214 = (_2169 * 40u) + 20u;
                            _2227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 3u)).x));
                            uint _2229 = (_2169 * 40u) + 24u;
                            vec4 _2242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 3u)).x));
                            uint _2248 = (_2169 * 40u) + 28u;
                            vec4 _2261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 3u)).x));
                            _2273 = fma(_1128, _2261.z, fma(_1127, _2261.y, _2261.x * _1126)) + _2261.w;
                            _2274 = !((fma(_1128, _2242.z, fma(_1127, _2242.y, _2242.x * _1126)) + _2242.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            if (_2274)
                            {
                                float _2308 = _2184.x - _1126;
                                float _2309 = _2184.y - _1127;
                                float _2310 = _2184.z - _1128;
                                float _2311 = dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310));
                                float _2314 = inversesqrt(_2311);
                                float _2321 = 1.0 - (_2311 / (_2185 * _2185));
                                float _2812 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
                                float _2323 = sqrt(_2311) * uintBitsToFloat(uvec4(_2277, _2278, _2279, texelFetch(g_SpotLightRenderingBuffer, int(((_2169 * 40u) + 4u) + 3u)).x)).w;
                                float _2325 = 1.39999997615814208984375 / (_2323 + 1.39999997615814208984375);
                                float _2326 = _2325 * _2325;
                                float _2329 = (fma(_1128, _2212.z, fma(_1127, _2212.y, _2212.x * _1126)) + _2212.w) / _2273;
                                float _2330 = (fma(_1128, _2227.z, fma(_1127, _2227.y, _2227.x * _1126)) + _2227.w) / _2273;
                                float _2334 = 1.0 - dot(vec2(_2329, _2330), vec2(_2329, _2330));
                                float _2823 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
                                float _2342 = dot(vec3(0.0), vec3((-0.0) - (_1126 * _1892), (-0.0) - (_1127 * _1892), (-0.0) - (_1128 * _1892)));
                                float _2834 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
                                float _2350 = ((1.0 - _2326) * dot(vec3(0.0), vec3(_2314 * _2308, _2314 * _2309, _2314 * _2310))) + _2326;
                                float _2845 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                                float _2351 = isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0));
                                float _2355 = (0.5 / (((isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0))) + 9.9999999392252902907785028219223e-09) + _2351)) * _2351;
                                float _2856 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                                float _2362 = ((isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0))) * (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0)))) * (((isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0))) * 3.1415927410125732421875) / (((_2323 * _2323) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2362 * _2197.z;
                                frontier_phi_82_pred_1 = _2362 * _2197.y;
                                frontier_phi_82_pred_2 = _2362 * _2197.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                            }
                            _2368 = frontier_phi_82_pred;
                            _2367 = frontier_phi_82_pred_1;
                            _2366 = frontier_phi_82_pred_2;
                            _2145 = _2366 + _2155;
                            _2146 = _2367 + _2156;
                            _2147 = _2368 + _2157;
                            if (_2159 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2155 = _2145;
                                _2156 = _2146;
                                _2157 = _2147;
                                _2158 = _2159;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2145;
                        frontier_phi_76_pred_1 = _2147;
                        frontier_phi_76_pred_2 = _2146;
                    }
                    _1877 = frontier_phi_76_pred;
                    _1881 = frontier_phi_76_pred_1;
                    _1879 = frontier_phi_76_pred_2;
                    uint _2022 = _2021 + 1u;
                    if (_2022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2018 = _1877;
                        _2019 = _1879;
                        _2020 = _1881;
                        _2021 = _2022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _1881;
                frontier_phi_63_64_ladder_1 = _1879;
                frontier_phi_63_64_ladder_2 = _1877;
            }
            else
            {
                frontier_phi_63_64_ladder = _1747;
                frontier_phi_63_64_ladder_1 = _1745;
                frontier_phi_63_64_ladder_2 = _1743;
            }
            _1876 = frontier_phi_63_64_ladder_2;
            _1878 = frontier_phi_63_64_ladder_1;
            _1880 = frontier_phi_63_64_ladder;
        }
        float _1885 = isnan(1.0) ? _446 : (isnan(_446) ? 1.0 : min(_446, 1.0));
        _1649 = ((_1876 * 0.039999999105930328369140625) * _1885) + _1482;
        _1651 = ((_1878 * 0.039999999105930328369140625) * _1885) + _1483;
        _1653 = ((_1880 * 0.039999999105930328369140625) * _1885) + _1484;
    }
    else
    {
        _1649 = _1482;
        _1651 = _1483;
        _1653 = _1484;
    }
    uint _1660 = (_1348 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1675 = ((_396.x * cbMtdParam._m0[13u].x) * cbInstanceData._m0[_1660].x) + ((_1649 + ((isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1676 = ((_396.y * cbMtdParam._m0[13u].y) * cbInstanceData._m0[_1660].y) + ((_1651 + ((isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1677 = ((_396.z * cbMtdParam._m0[13u].z) * cbInstanceData._m0[_1660].z) + ((_1653 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    uint _1681 = _1348 + 6u;
    float _1689 = _433 / cbSceneParam._m0[86u].x;
    float _1690 = _434 / cbSceneParam._m0[86u].y;
    vec4 _1704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1689, _1690, (log2((isnan(cbSceneParam._m0[77u].w) ? _420 : (isnan(_420) ? cbSceneParam._m0[77u].w : min(_420, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1706 = _1704.x;
    float _1707 = _1704.y;
    float _1708 = _1704.z;
    float _1709 = _1704.w;
    float _1799;
    float _1801;
    float _1803;
    float _1805;
    if (_420 > cbSceneParam._m0[78u].w)
    {
        float _1762 = isnan(_420) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _420 : min(cbSceneParam._m0[80u].w, _420));
        float _1763 = _1762 / _420;
        float _1774 = _1763 * _245;
        float _1775 = _246 * _1763;
        float _1776 = (-0.0) - _1775;
        float _1777 = _1763 * _247;
        float _1779 = (cbSceneParam._m0[77u].w * _1776) / _1762;
        float _1780 = _1779 + cbSceneParam._m0[79u].w;
        float _1781 = cbSceneParam._m0[79u].w - _1775;
        float _1787 = sqrt(((_1774 * _1774) + (_1775 * _1775)) + (_1777 * _1777));
        float _1790 = (1.0 - (cbSceneParam._m0[77u].w / _1762)) * _1787;
        float _1795 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1797 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1980;
        if (abs((_1776 - _1779) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1980 = ((((_1780 > 0.0) ? exp2(_1795 * _1780) : (2.0 - exp2(_1797 * _1780))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1790;
        }
        else
        {
            float _1922 = 1.0 / cbSceneParam._m0[80u].x;
            float _1923 = isnan(_1781) ? _1780 : (isnan(_1780) ? _1781 : max(_1780, _1781));
            float _1924 = isnan(_1781) ? _1780 : (isnan(_1780) ? _1781 : min(_1780, _1781));
            float _1933 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : min(_1923, 0.0));
            float _1934 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : min(_1924, 0.0));
            _1980 = ((abs(_1787 / _1776) * cbSceneParam._m0[80u].y) * ((((_1933 - _1934) * 2.0) - ((exp2(_1795 * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)))) - exp2(_1795 * (isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))))) * _1922)) - ((exp2(_1797 * _1933) - exp2(_1797 * _1934)) * _1922))) + (_1790 * cbSceneParam._m0[80u].z);
        }
        vec4 _1982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1689, _1690, 1.0), 0.0);
        float _1991 = exp2((_1980 * (-1.44269502162933349609375)) * (1.0 - _1982.w));
        float _1992 = log2(_1991);
        float _2008 = log2(_1709);
        _1799 = (exp2(_2008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].x)) * _1982.x) / cbSceneParam._m0[78u].x)) + _1706;
        _1801 = (exp2(_2008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].y)) * _1982.y) / cbSceneParam._m0[78u].y)) + _1707;
        _1803 = (exp2(_2008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].z)) * _1982.z) / cbSceneParam._m0[78u].z)) + _1708;
        _1805 = _1991 * _1709;
    }
    else
    {
        _1799 = _1706;
        _1801 = _1707;
        _1803 = _1708;
        _1805 = _1709;
    }
    float _1817 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1818 = _1817 == 3.0;
    float _1820 = log2(_1805);
    float _1827 = exp2(_1820 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    float _1828 = exp2(_1820 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    float _1829 = exp2(_1820 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    float _1838 = (_1817 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1838 * (_1818 ? _1827 : (_1827 + (cbSceneParam._m0[72u].w * _1799)));
    SV_Target.y = _1838 * (_1818 ? _1828 : (_1828 + (cbSceneParam._m0[72u].w * _1801)));
    SV_Target.z = _1838 * (_1818 ? _1829 : (_1829 + (cbSceneParam._m0[72u].w * _1803)));
    SV_Target.w = cbInstanceData._m0[_1681].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1681].w;
}


