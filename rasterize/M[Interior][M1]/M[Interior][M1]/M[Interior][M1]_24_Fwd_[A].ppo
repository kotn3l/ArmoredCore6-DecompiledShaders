#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1082;
float _3207;
float _3208;
float _3209;
float _3210;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _325 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _329 = _325.z;
    float _352 = (_325.x * 2.0) + (-1.0);
    float _354 = (_325.y * 2.0) + (-1.0);
    float _357 = _352 - (_352 * _290);
    float _358 = _354 - (_354 * _290);
    float _367 = cbMtdParam._m0[22u].y + _263;
    float _368 = cbMtdParam._m0[22u].z + _264;
    float _369 = cbMtdParam._m0[22u].w + _265;
    float _383 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_192, _193, _194));
    float _384 = (-0.0) - dot(vec3(_367, _368, _369), vec3(_206, _207, _208));
    float _385 = (-0.0) - dot(vec3(_367, _368, _369), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _392 = _389 * _385;
    float _395 = ((_389 * _383) + (_357 * cbMtdParam._m0[20u].y)) * cbMtdParam._m0[19u].x;
    float _396 = ((_389 * _384) + (_358 * cbMtdParam._m0[20u].z)) * cbMtdParam._m0[18u].w;
    float _397 = fract(TEXCOORD.x);
    float _398 = fract(TEXCOORD.y);
    float _404;
    if (_395 > 0.0)
    {
        _404 = (1.0 - _397) / _395;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_395 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _397) / _395;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _404 = frontier_phi_3_2_ladder;
    }
    float _412;
    if (_396 > 0.0)
    {
        _412 = (1.0 - _398) / _396;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_396 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _398) / _396;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _412 = frontier_phi_7_6_ladder;
    }
    float _416 = (_392 > 0.0) ? (cbMtdParam._m0[15u].x / _392) : 5000.0;
    float _417 = isnan(_412) ? _404 : (isnan(_404) ? _412 : min(_404, _412));
    float _418 = isnan(_416) ? _417 : (isnan(_417) ? _416 : min(_417, _416));
    float _422 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _429 = ((_418 * _392) + _422) / _422;
    vec4 _454 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_397 + (-0.5)) + (_418 * _395)) / _429) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_398 + (-0.5)) + (_418 * _396)) / _429) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _456 = _454.x;
    float _457 = _454.y;
    float _458 = _454.z;
    float _474 = 0.5 - (_290 * 0.5);
    float _481 = ((((_456 - (_456 * _290)) * cbMtdParam._m0[9u].x) - _303) * _474) + _303;
    float _482 = ((((_457 - (_457 * _290)) * cbMtdParam._m0[9u].y) - _305) * _474) + _305;
    float _483 = (((cbMtdParam._m0[9u].z * (_458 - (_458 * _290))) - _307) * _474) + _307;
    vec4 _495 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _497 = _495.x;
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _513 = _509.z;
    float _516 = (_509.x * 2.0) + (-1.0);
    float _517 = (_509.y * 2.0) + (-1.0);
    float _518 = dot(vec2(_516, _517), vec2(_516, _517));
    float _3229 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _523 = sqrt(1.0 - (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))));
    float _524 = _513 * _290;
    float _531 = (cbMtdParam._m0[15u].w * ((_329 - _524) + ((_513 - _329) * _290))) + _524;
    float _535 = (cbMtdParam._m0[16u].x * _357) + _516;
    float _536 = (cbMtdParam._m0[16u].x * _358) + _517;
    float _539 = fma(_523, _199, fma(_536, _206, _535 * _192));
    float _542 = fma(_523, _200, fma(_536, _207, _535 * _193));
    float _545 = fma(_523, _201, fma(_536, _208, _535 * _194));
    float _549 = inversesqrt(dot(vec3(_539, _542, _545), vec3(_539, _542, _545)));
    float _550 = _549 * _539;
    float _551 = _549 * _542;
    float _552 = _549 * _545;
    float _3240 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _553 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
    float _3251 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3262 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3273 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3284 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _557 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _573 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _577 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _578 = _263 * _577;
    float _579 = _264 * _577;
    float _580 = _265 * _577;
    vec4 _585 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _587 = _585.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _763 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _769 = (cbMatDynParam._m0[5u].x * _763) + cbMatDynParam._m0[5u].y;
        float _3295 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _774 = (cbMatDynParam._m0[5u].z * _763) + cbMatDynParam._m0[5u].w;
        float _3306 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) - _770)) + _770) < ((_587 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _600 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _601 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _620 = fma(_552, cbSceneParam._m0[5u].z, fma(_551, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _550));
    float _623 = fma(_552, cbSceneParam._m0[6u].z, fma(_551, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _550));
    float _626 = fma(_552, cbSceneParam._m0[7u].z, fma(_551, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _550));
    uint _639 = uint(roundEven(NORMAL.w)) * 13u;
    uint _641 = _639 + 9u;
    uint _642 = _641 + uint(cbMatDynParam._m0[0u].w);
    float _648 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_642].x;
    float _649 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0)))) * cbInstanceData._m0[_642].y;
    float _650 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0)))) * cbInstanceData._m0[_642].z;
    float _3317 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _651 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
    float _3328 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _652 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _653 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _654 = 1.0 - _557;
    float _655 = _651 * _654;
    float _656 = _652 * _654;
    float _657 = _653 * _654;
    float _662 = (_651 + (-0.039999999105930328369140625)) * _557;
    float _663 = (_652 + (-0.039999999105930328369140625)) * _557;
    float _664 = (_653 + (-0.039999999105930328369140625)) * _557;
    float _665 = _662 + 0.039999999105930328369140625;
    float _667 = _663 + 0.039999999105930328369140625;
    float _668 = _664 + 0.039999999105930328369140625;
    vec4 _677 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _600, cbSceneParam._m0[86u].y * _601));
    float _680 = _677.x * TEXCOORD.z;
    float _681 = dot(vec3(_550, _551, _552), vec3(_578, _579, _580));
    float _684 = _681 * 2.0;
    float _688 = (_684 * _550) - _578;
    float _689 = (_684 * _551) - _579;
    float _690 = (_684 * _552) - _580;
    float _694 = abs(dot(vec3(_578, _579, _580), vec3(_550, _551, _552)));
    float _3350 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _696 = sqrt(_553);
    float _709 = exp2((_696 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_696 * 3.0));
    float _715 = (1.0 - _709) * ((_696 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _716 = _709 * _696;
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1081;
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _808 = fma(_752, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _744));
        float _812 = fma(_752, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _744));
        float _816 = fma(_752, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _744));
        float _839 = _744 + _550;
        float _840 = _748 + _551;
        float _841 = _752 + _552;
        float _851 = fma(_841, cbModelParam._m0[26u].z, fma(_840, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _839)) - _808;
        float _852 = fma(_841, cbModelParam._m0[27u].z, fma(_840, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _839)) - _812;
        float _853 = fma(_841, cbModelParam._m0[28u].z, fma(_840, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _839)) - _816;
        float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
        float _870 = ((_857 * _851) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_808 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _871 = ((_857 * _852) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_812 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _872 = ((_857 * _853) / cbModelParam._m0[34u].z) + ((((((_816 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_870, _871, _872), 0.0);
        float _909 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _910 = _909 * (_875.x + (-0.5));
        float _911 = _909 * (_875.y + (-0.5));
        float _912 = _909 * (_875.z + (-0.5));
        float _919 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_882.x + (-0.5));
        float _921 = _919 * (_882.y + (-0.5));
        float _922 = _919 * (_882.z + (-0.5));
        float _929 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_889.x + (-0.5));
        float _931 = _929 * (_889.y + (-0.5));
        float _932 = _929 * (_889.z + (-0.5));
        float _939 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_896.x + (-0.5));
        float _941 = _939 * (_896.y + (-0.5));
        float _942 = _939 * (_896.z + (-0.5));
        float _943 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _944 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _945 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _946 = _910 * 0.5;
        float _947 = _920 * 0.5;
        float _948 = _930 * 0.5;
        float _949 = dot(vec3(_946, _947, _948), vec3(_946, _947, _948));
        float _954 = (_949 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_949);
        float _963 = (dot(vec3(_550, _551, _552), vec3(_954 * _946, _954 * _947, _954 * _948)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _973 = sqrt(((_947 * _947) + (_946 * _946)) + (_948 * _948)) / (_943 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3398 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_975 + 1.0))) + _980) * _943;
        float _990 = _911 * 0.5;
        float _991 = _921 * 0.5;
        float _992 = _931 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_550, _551, _552), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3409 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_944 + 9.9999997473787516355514526367188e-06);
        float _3420 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3431 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0))) * (_1017 + 1.0))) + _1022) * _944;
        float _1032 = _912 * 0.5;
        float _1033 = _922 * 0.5;
        float _1034 = _932 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_550, _551, _552), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_945 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3464 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1059 + 1.0))) + _1064) * _945;
        _1081 = _912;
        _1083 = _911;
        _1084 = _910;
        _1085 = _922;
        _1086 = _921;
        _1087 = _920;
        _1088 = _932;
        _1089 = _931;
        _1090 = _930;
        _1091 = _945;
        _1092 = _944;
        _1093 = _943;
        _1094 = cbModelParam._m0[36u].z * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1095 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1096 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
    }
    else
    {
        _1081 = _1082;
        _1083 = _1082;
        _1084 = _1082;
        _1085 = _1082;
        _1086 = _1082;
        _1087 = _1082;
        _1088 = _1082;
        _1089 = _1082;
        _1090 = _1082;
        _1091 = _1082;
        _1092 = _1082;
        _1093 = _1082;
        _1094 = 0.0;
        _1095 = 0.0;
        _1096 = 0.0;
    }
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1125 = fma(_752, cbModelParam._m0[30u].z, fma(_748, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _744));
        float _1129 = fma(_752, cbModelParam._m0[31u].z, fma(_748, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _744));
        float _1133 = fma(_752, cbModelParam._m0[32u].z, fma(_748, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _744));
        float _1156 = _744 + _550;
        float _1157 = _748 + _551;
        float _1158 = _752 + _552;
        float _1168 = fma(_1158, cbModelParam._m0[30u].z, fma(_1157, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156)) - _1125;
        float _1169 = fma(_1158, cbModelParam._m0[31u].z, fma(_1157, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156)) - _1129;
        float _1170 = fma(_1158, cbModelParam._m0[32u].z, fma(_1157, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156)) - _1133;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1125 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1129 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[35u].z) + ((((((_1133 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1198 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1205 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1224 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1191.x + (-0.5));
        float _1226 = _1224 * (_1191.y + (-0.5));
        float _1227 = _1224 * (_1191.z + (-0.5));
        float _1234 = exp2((_1198.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1198.x + (-0.5));
        float _1236 = _1234 * (_1198.y + (-0.5));
        float _1237 = _1234 * (_1198.z + (-0.5));
        float _1244 = exp2((_1205.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1205.x + (-0.5));
        float _1246 = _1244 * (_1205.y + (-0.5));
        float _1247 = _1244 * (_1205.z + (-0.5));
        float _1254 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1212.x + (-0.5));
        float _1256 = _1254 * (_1212.y + (-0.5));
        float _1257 = _1254 * (_1212.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_550, _551, _552), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3527 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1288 + 1.0))) + _1293) * _1258;
        float _1303 = _1226 * 0.5;
        float _1304 = _1236 * 0.5;
        float _1305 = _1246 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_550, _551, _552), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3560 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1330 + 1.0))) + _1335) * _1259;
        float _1345 = _1227 * 0.5;
        float _1346 = _1237 * 0.5;
        float _1347 = _1247 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_550, _551, _552), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3593 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1372 + 1.0))) + _1377) * _1260;
        _1394 = _1227;
        _1395 = _1226;
        _1396 = _1225;
        _1397 = _1237;
        _1398 = _1236;
        _1399 = _1235;
        _1400 = _1247;
        _1401 = _1246;
        _1402 = _1245;
        _1403 = _1260;
        _1404 = _1259;
        _1405 = _1258;
        _1406 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1407 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1408 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
    }
    else
    {
        _1394 = _1082;
        _1395 = _1082;
        _1396 = _1082;
        _1397 = _1082;
        _1398 = _1082;
        _1399 = _1082;
        _1400 = _1082;
        _1401 = _1082;
        _1402 = _1082;
        _1403 = _1082;
        _1404 = _1082;
        _1405 = _1082;
        _1406 = 0.0;
        _1407 = 0.0;
        _1408 = 0.0;
    }
    float _1418 = (cbModelParam._m0[1u].x * (_1406 - _1094)) + _1094;
    float _1419 = (cbModelParam._m0[1u].x * (_1407 - _1095)) + _1095;
    float _1420 = (cbModelParam._m0[1u].x * (_1408 - _1096)) + _1096;
    float _1441 = fma(_1420, cbSceneParam._m0[89u].z, fma(_1419, cbSceneParam._m0[89u].y, _1418 * cbSceneParam._m0[89u].x));
    float _1444 = fma(_1420, cbSceneParam._m0[90u].z, fma(_1419, cbSceneParam._m0[90u].y, _1418 * cbSceneParam._m0[90u].x));
    float _1447 = fma(_1420, cbSceneParam._m0[91u].z, fma(_1419, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1418));
    float _1462 = _688 * 0.5;
    float _1463 = _689 * 0.5;
    float _1464 = _690 * 0.5;
    float _1465 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1396, _1399, _1402, _1405));
    float _1468 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1395, _1398, _1401, _1404));
    float _1471 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1394, _1397, _1400, _1403));
    float _1505;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1478 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1081, _1085, _1088, _1091));
        float _1482 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1083, _1086, _1089, _1092));
        float _1486 = dot(vec4(_1462, _1463, _1464, 1.0), vec4(_1084, _1087, _1090, _1093));
        float _1493 = dot(vec4(cbModelParam._m0[39u]), vec4(_1462, _1463, _1464, 1.0));
        _1505 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1493) ? 0.0 : (isnan(0.0) ? _1493 : max(0.0, _1493))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1505 = 1.0;
    }
    float _1516;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1507 = dot(vec4(cbModelParam._m0[40u]), vec4(_1462, _1463, _1464, 1.0));
        _1516 = dot(vec3(isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0)), isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1507) ? 0.0 : (isnan(0.0) ? _1507 : max(0.0, _1507))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1516 = 1.0;
    }
    float _1520 = (_1516 * cbModelParam._m0[1u].x) + (_1505 * (1.0 - cbModelParam._m0[1u].x));
    float _1530 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _553);
    float _1531 = isnan(_1530) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1530 : min(cbModelParam._m0[25u].z, _1530));
    float _1612;
    float _1614;
    float _1616;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1579 = fma(_752, cbModelParam._m0[13u].z, fma(_748, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744)) + cbModelParam._m0[13u].w;
        float _1583 = fma(_752, cbModelParam._m0[14u].z, fma(_748, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744)) + cbModelParam._m0[14u].w;
        float _1587 = fma(_752, cbModelParam._m0[15u].z, fma(_748, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744)) + cbModelParam._m0[15u].w;
        float _1590 = fma(_690, cbModelParam._m0[13u].z, fma(_689, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _688));
        float _1593 = fma(_690, cbModelParam._m0[14u].z, fma(_689, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _688));
        float _1596 = fma(_690, cbModelParam._m0[15u].z, fma(_689, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _688));
        float _1624;
        if (_1590 > 0.0)
        {
            _1624 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1624 = frontier_phi_25_23_ladder;
        }
        float _1983;
        if (_1593 > 0.0)
        {
            _1983 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1983 = frontier_phi_34_30_ladder;
        }
        float _2291;
        if (_1596 > 0.0)
        {
            _2291 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2291 = frontier_phi_48_41_ladder;
        }
        float _2293 = isnan(_1983) ? _1624 : (isnan(_1624) ? _1983 : min(_1624, _1983));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1590) + _1579;
        float _2299 = (_2294 * _1593) + _1583;
        float _2300 = (_2294 * _1596) + _1587;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2302 = (-1.0) - _2301;
        float _2304 = _2301 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2300 > _2304) || ((_2300 < _2302) || ((_2299 > _2304) || ((_2299 < _2302) || ((_2298 < _2302) || (_2298 > _2304))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2442 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1531);
            frontier_phi_24_48_ladder = _2442.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2442.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2442.x * cbModelParam._m0[1u].y;
        }
        _1612 = frontier_phi_24_48_ladder_2;
        _1614 = frontier_phi_24_48_ladder_1;
        _1616 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1600 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_688, _689, _690), _1531);
        _1612 = _1600.x * cbModelParam._m0[1u].y;
        _1614 = _1600.y * cbModelParam._m0[1u].y;
        _1616 = _1600.z * cbModelParam._m0[1u].y;
    }
    float _1620 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _553);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1620 : min(cbModelParam._m0[25u].w, _1620));
    float _1710;
    float _1712;
    float _1714;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1674 = fma(_752, cbModelParam._m0[21u].z, fma(_748, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744)) + cbModelParam._m0[21u].w;
        float _1678 = fma(_752, cbModelParam._m0[22u].z, fma(_748, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744)) + cbModelParam._m0[22u].w;
        float _1682 = fma(_752, cbModelParam._m0[23u].z, fma(_748, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744)) + cbModelParam._m0[23u].w;
        float _1685 = fma(_690, cbModelParam._m0[21u].z, fma(_689, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _688));
        float _1688 = fma(_690, cbModelParam._m0[22u].z, fma(_689, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _688));
        float _1691 = fma(_690, cbModelParam._m0[23u].z, fma(_689, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _688));
        float _1988;
        if (_1685 > 0.0)
        {
            _1988 = abs((1.0 - _1674) / _1685);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1674 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1988 = frontier_phi_36_32_ladder;
        }
        float _2317;
        if (_1688 > 0.0)
        {
            _2317 = abs((1.0 - _1678) / _1688);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1688 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1678 + 1.0) / _1688);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2317 = frontier_phi_50_43_ladder;
        }
        float _2507;
        if (_1691 > 0.0)
        {
            _2507 = abs((1.0 - _1682) / _1691);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1682 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2507 = frontier_phi_68_61_ladder;
        }
        float _2509 = isnan(_2317) ? _1988 : (isnan(_1988) ? _2317 : min(_1988, _2317));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1685) + _1674;
        float _2515 = (_2510 * _1688) + _1678;
        float _2516 = (_2510 * _1691) + _1682;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2758 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1621);
            frontier_phi_33_68_ladder = _2758.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2758.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2758.x * cbModelParam._m0[1u].z;
        }
        _1710 = frontier_phi_33_68_ladder_2;
        _1712 = frontier_phi_33_68_ladder;
        _1714 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1694 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_688, _689, _690), _1621);
        _1710 = _1694.x * cbModelParam._m0[1u].z;
        _1712 = _1694.y * cbModelParam._m0[1u].z;
        _1714 = _1694.z * cbModelParam._m0[1u].z;
    }
    float _1727 = (((_715 * _665) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1710 - _1612)) + _1612);
    float _1729 = (((_715 * _667) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1712 - _1614)) + _1614);
    float _1731 = (((_715 * _668) + _716) * _680) * ((cbModelParam._m0[1u].w * (_1714 - _1616)) + _1616);
    float _1734 = fma(_1731, cbSceneParam._m0[89u].z, fma(_1729, cbSceneParam._m0[89u].y, _1727 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1731, cbSceneParam._m0[90u].z, fma(_1729, cbSceneParam._m0[90u].y, _1727 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1731, cbSceneParam._m0[91u].z, fma(_1729, cbSceneParam._m0[91u].y, _1727 * cbSceneParam._m0[91u].x));
    uvec4 _1750 = floatBitsToUint(cbInstanceData._m0[_639 + 5u]);
    uint _1752 = _1750.x * 14u;
    uint _1753 = _1752 + 13u;
    float _1758 = _680 + (-1.0);
    float _1761 = (cbLight._m0[_1753].x * _1758) + 1.0;
    float _1762 = (cbLight._m0[_1753].y * _1758) + 1.0;
    uint _1763 = _1752 + 5u;
    float _1769 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
    uint _1773 = _1752 + 4u;
    float _1779 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1783 = _1752 | 1u;
    float _1794 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_550, _551, _552));
    float _1797 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_550, _551, _552));
    float _3729 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _3740 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1802 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.3183098733425140380859375;
    float _1804 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1811 = ((cbLight._m0[_1763].x * _1769) * _1804) + ((cbLight._m0[_1773].x * _1779) * _1802);
    float _1812 = ((_1769 * cbLight._m0[_1763].y) * _1804) + ((_1779 * cbLight._m0[_1773].y) * _1802);
    float _1813 = ((_1769 * cbLight._m0[_1763].z) * _1804) + ((_1779 * cbLight._m0[_1773].z) * _1802);
    uint _1815 = _1752 + 8u;
    float _1828 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1752].w)) * _553) * 0.949999988079071044921875);
    float _1829 = _1828 * _1828;
    float _1830 = cbLight._m0[_1752].x + _578;
    float _1831 = cbLight._m0[_1752].y + _579;
    float _1832 = cbLight._m0[_1752].z + _580;
    float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
    float _1837 = _1836 * _1830;
    float _1838 = _1836 * _1831;
    float _1839 = _1836 * _1832;
    float _1840 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1752].xyz));
    float _3751 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1843 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _1844 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1845 = dot(vec3(_550, _551, _552), vec3(_1837, _1838, _1839));
    float _3773 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1849 = dot(vec3(cbLight._m0[_1752].xyz), vec3(_1837, _1838, _1839));
    float _3784 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1853 = _1829 * _1829;
    float _1857 = ((_1848 * _1848) * (_1853 + (-1.0))) + 1.0;
    float _1865 = exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0);
    float _1866 = 0.959999978542327880859375 - _662;
    float _1868 = 0.959999978542327880859375 - _663;
    float _1869 = 0.959999978542327880859375 - _664;
    float _1876 = 1.0 - _1829;
    float _1887 = (0.5 / (((_1844 * ((_1843 * _1876) + _1829)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1876) + _1829) * _1843))) * _1843;
    float _3795 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1853 / ((_1857 * _1857) * 3.141590118408203125));
    uint _1900 = _1752 + 9u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1783].w)) * _553) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1783].x + _578;
    float _1914 = cbLight._m0[_1783].y + _579;
    float _1915 = cbLight._m0[_1783].z + _580;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_550, _551, _552), vec3(cbLight._m0[_1783].xyz));
    float _3806 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1927 = dot(vec3(_550, _551, _552), vec3(_1920, _1921, _1922));
    float _3817 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1783].xyz), vec3(_1920, _1921, _1922));
    float _3828 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1912 * _1912;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1946 = exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0);
    float _1953 = 1.0 - _1912;
    float _1963 = (0.5 / (((_1844 * ((_1926 * _1953) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1844 * _1953) + _1912) * _1926))) * _1926;
    float _3839 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1965 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    float _1975 = (((((_1946 * _1866) + _665) * cbLight._m0[_1900].x) * _1965) * _1769) + (((((_1865 * _1866) + _665) * cbLight._m0[_1815].x) * _1889) * _1779);
    float _1976 = (((((_1946 * _1868) + _667) * cbLight._m0[_1900].y) * _1965) * _1769) + (((((_1865 * _1868) + _667) * cbLight._m0[_1815].y) * _1889) * _1779);
    float _1977 = (((((_1946 * _1869) + _668) * cbLight._m0[_1900].z) * _1965) * _1769) + (((((_1865 * _1869) + _668) * cbLight._m0[_1815].z) * _1889) * _1779);
    float _2092;
    float _2094;
    float _2096;
    float _2098;
    float _2100;
    float _2102;
    if (_1750.y == 0u)
    {
        float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2033 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2032;
        float _2034 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2032;
        float _2035 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2032;
        uvec4 _2047 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2048 = _2047.x;
        uint _2059 = uint((float(_2047.y) * floor(float(uint(cbSceneParam._m0[85u].y * _601) / _2048))) + floor(float(uint(cbSceneParam._m0[85u].x * _600) / _2048)));
        float _2069 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2070 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        uint _2073 = uint(isnan(14.0) ? _2070 : (isnan(_2070) ? 14.0 : min(_2070, 14.0)));
        uvec4 _2078 = texelFetch(g_lightClusterGridBuffer, int(((_2073 << 2u) + (_2059 << 6u)) >> 2u));
        uint _2079 = _2078.x;
        uint _2080 = _2047.z;
        float _2170;
        float _2172;
        float _2174;
        float _2176;
        float _2178;
        float _2180;
        if (((((1u << ((_2080 >> 4u) & 15u)) + 4294967295u) & _2079) == 0u) || ((_2080 & 240u) == 0u))
        {
            _2170 = 0.0;
            _2172 = 0.0;
            _2174 = 0.0;
            _2176 = 0.0;
            _2178 = 0.0;
            _2180 = 0.0;
        }
        else
        {
            float _2171;
            float _2173;
            float _2175;
            float _2177;
            float _2179;
            float _2181;
            float _2354 = 0.0;
            float _2355 = 0.0;
            float _2356 = 0.0;
            float _2357 = 0.0;
            float _2358 = 0.0;
            float _2359 = 0.0;
            uint _2360 = 0u;
            uint _2369;
            bool _2370;
            for (;;)
            {
                _2369 = texelFetch(g_lightClassification, int((((_2073 << 5u) + (_2059 << 9u)) + (_2360 << 2u)) >> 2u)).x;
                _2370 = _2369 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2370)
                {
                    frontier_phi_63_pred = _2356;
                    frontier_phi_63_pred_1 = _2359;
                    frontier_phi_63_pred_2 = _2358;
                    frontier_phi_63_pred_3 = _2357;
                    frontier_phi_63_pred_4 = _2355;
                    frontier_phi_63_pred_5 = _2354;
                }
                else
                {
                    float _2550;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    uint _2556;
                    _2550 = _2354;
                    _2551 = _2355;
                    _2552 = _2356;
                    _2553 = _2357;
                    _2554 = _2358;
                    _2555 = _2359;
                    _2556 = _2369;
                    float _2451;
                    float _2452;
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    for (;;)
                    {
                        uint _2560 = uint(findLSB(_2556)) + (_2360 << 5u);
                        uint _2557 = (_2556 + 4294967295u) & _2556;
                        uint _2562 = _2560 * 48u;
                        vec4 _2576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2562)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 3u)).x));
                        uint _2582 = (_2560 * 48u) + 4u;
                        vec4 _2595 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 3u)).x));
                        uint _2601 = (_2560 * 48u) + 8u;
                        vec3 _2612 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x));
                        float _2616 = _2576.x - _2033;
                        float _2617 = _2576.y - _2034;
                        float _2618 = _2576.z - _2035;
                        float _2619 = dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618));
                        float _2622 = inversesqrt(_2619);
                        float _2623 = _2622 * _2616;
                        float _2624 = _2622 * _2617;
                        float _2625 = _2622 * _2618;
                        float _2626 = dot(vec3(_620, _623, _626), vec3(_2623, _2624, _2625));
                        float _2631 = 1.0 - (_2619 * _2576.w);
                        float _3860 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                        float _2632 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                        float _2633 = sqrt(_2619) * _2595.w;
                        float _2636 = 1.39999997615814208984375 / (_2633 + 1.39999997615814208984375);
                        float _2637 = _2636 * _2636;
                        float _2640 = ((1.0 - _2637) * _2626) + _2637;
                        float _2643 = _2633 * _2633;
                        float _2647 = ((isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))) * _2632) / ((_2643 * 0.699999988079071044921875) + 1.0);
                        float _2651 = (-0.0) - _2033;
                        float _2652 = (-0.0) - _2034;
                        float _2653 = (-0.0) - _2035;
                        float _2657 = inversesqrt(dot(vec3(_2651, _2652, _2653), vec3(_2651, _2652, _2653)));
                        float _2658 = _2657 * _2651;
                        float _2659 = _2657 * _2652;
                        float _2660 = _2657 * _2653;
                        float _2668 = exp2(log2(1.0 / ((_2643 * 3.5) + 5.0)) * 0.25);
                        float _2669 = 1.0 - _696;
                        float _2676 = sqrt(1.0 - ((1.0 - (_2669 * _2669)) * (1.0 - (_2668 * _2668))));
                        float _2677 = _2676 * _2676;
                        float _2678 = _2677 * _2677;
                        float _2679 = _2658 + _2623;
                        float _2680 = _2659 + _2624;
                        float _2681 = _2660 + _2625;
                        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
                        float _2689 = dot(vec3(_620, _623, _626), vec3(_2658, _2659, _2660));
                        float _3876 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2692 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                        float _2693 = dot(vec3(_620, _623, _626), vec3(_2685 * _2679, _2685 * _2680, _2685 * _2681));
                        float _3887 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
                        float _2696 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2700 = ((_2696 * _2696) * (_2678 + (-1.0))) + 1.0;
                        float _2701 = _2636 * _2677;
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * _2626) + _2702;
                        float _3898 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2706 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2707 = 1.0 - _2677;
                        float _2717 = (0.5 / (((_2706 * ((_2692 * _2707) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2706 * _2707) + _2677) * _2692))) * _2706;
                        float _3909 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                        float _2728 = (((_2678 * 3.1415927410125732421875) * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) / ((_2700 * _2700) * ((_2643 * 2.1991131305694580078125) + 3.141590118408203125))) * _2632;
                        _2454 = (_2647 * _2595.x) + _2553;
                        _2455 = (_2647 * _2595.y) + _2554;
                        _2456 = (_2647 * _2595.z) + _2555;
                        _2451 = (_2728 * _2612.x) + _2550;
                        _2452 = (_2728 * _2612.y) + _2551;
                        _2453 = (_2728 * _2612.z) + _2552;
                        if (_2557 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2550 = _2451;
                            _2551 = _2452;
                            _2552 = _2453;
                            _2553 = _2454;
                            _2554 = _2455;
                            _2555 = _2456;
                            _2556 = _2557;
                        }
                    }
                    frontier_phi_63_pred = _2453;
                    frontier_phi_63_pred_1 = _2456;
                    frontier_phi_63_pred_2 = _2455;
                    frontier_phi_63_pred_3 = _2454;
                    frontier_phi_63_pred_4 = _2452;
                    frontier_phi_63_pred_5 = _2451;
                }
                _2175 = frontier_phi_63_pred;
                _2181 = frontier_phi_63_pred_1;
                _2179 = frontier_phi_63_pred_2;
                _2177 = frontier_phi_63_pred_3;
                _2173 = frontier_phi_63_pred_4;
                _2171 = frontier_phi_63_pred_5;
                uint _2361 = _2360 + 1u;
                if (_2361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2354 = _2171;
                    _2355 = _2173;
                    _2356 = _2175;
                    _2357 = _2177;
                    _2358 = _2179;
                    _2359 = _2181;
                    _2360 = _2361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2170 = _2171;
            _2172 = _2173;
            _2174 = _2175;
            _2176 = _2177;
            _2178 = _2179;
            _2180 = _2181;
        }
        uvec4 _2184 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2185 = _2184.z;
        uint _2187 = (_2185 >> 8u) & 15u;
        float _2322;
        float _2324;
        float _2326;
        float _2328;
        float _2330;
        float _2332;
        if (((4294967295u << _2187) & _2079) == 0u)
        {
            _2322 = _2170;
            _2324 = _2172;
            _2326 = _2174;
            _2328 = _2176;
            _2330 = _2178;
            _2332 = _2180;
        }
        else
        {
            float _2347 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _2348 = _2347 * _2033;
            float _2349 = _2347 * _2034;
            float _2350 = _2347 * _2035;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2187 < ((_2185 >> 12u) & 15u))
            {
                float _2323;
                float _2325;
                float _2327;
                float _2329;
                float _2331;
                float _2333;
                float _2533 = _2170;
                float _2534 = _2172;
                float _2535 = _2174;
                float _2536 = _2176;
                float _2537 = _2178;
                float _2538 = _2180;
                uint _2539 = _2187;
                uint _2548;
                bool _2549;
                for (;;)
                {
                    _2548 = texelFetch(g_lightClassification, int((((_2073 << 5u) + (_2059 << 9u)) + (_2539 << 2u)) >> 2u)).x;
                    _2549 = _2548 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2549)
                    {
                        frontier_phi_77_pred = _2538;
                        frontier_phi_77_pred_1 = _2537;
                        frontier_phi_77_pred_2 = _2536;
                        frontier_phi_77_pred_3 = _2535;
                        frontier_phi_77_pred_4 = _2534;
                        frontier_phi_77_pred_5 = _2533;
                    }
                    else
                    {
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _2776 = _2533;
                        float _2777 = _2534;
                        float _2778 = _2535;
                        float _2779 = _2536;
                        float _2780 = _2537;
                        float _2781 = _2538;
                        uint _2782 = _2548;
                        uint _2783;
                        vec4 _2808;
                        float _2809;
                        vec4 _2824;
                        vec3 _2836;
                        vec4 _2851;
                        vec4 _2866;
                        float _2912;
                        bool _2913;
                        for (;;)
                        {
                            uint _2793 = ((_2539 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2782));
                            _2783 = (_2782 + 4294967295u) & _2782;
                            uint _2795 = _2793 * 40u;
                            _2808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2795 + 3u)).x));
                            _2809 = _2808.w;
                            uint _2811 = (_2793 * 40u) + 4u;
                            _2824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2811 + 3u)).x));
                            uint _2826 = (_2793 * 40u) + 8u;
                            _2836 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x));
                            uint _2838 = (_2793 * 40u) + 16u;
                            _2851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2838 + 3u)).x));
                            uint _2853 = (_2793 * 40u) + 20u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            uint _2868 = (_2793 * 40u) + 24u;
                            vec4 _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2887 = (_2793 * 40u) + 28u;
                            vec4 _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2912 = fma(_2035, _2900.z, fma(_2034, _2900.y, _2900.x * _2033)) + _2900.w;
                            _2913 = !((fma(_2035, _2881.z, fma(_2034, _2881.y, _2881.x * _2033)) + _2881.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2913)
                            {
                                float _2940 = _2808.x - _2033;
                                float _2941 = _2808.y - _2034;
                                float _2942 = _2808.z - _2035;
                                float _2943 = dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942));
                                float _2946 = inversesqrt(_2943);
                                float _2947 = _2946 * _2940;
                                float _2948 = _2946 * _2941;
                                float _2949 = _2946 * _2942;
                                float _2953 = 1.0 - (_2943 / (_2809 * _2809));
                                float _3920 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2954 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                                float _2958 = sqrt(_2943) * _2824.w;
                                float _2960 = 1.39999997615814208984375 / (_2958 + 1.39999997615814208984375);
                                float _2961 = _2960 * _2960;
                                float _2964 = ((1.0 - _2961) * dot(vec3(_2947, _2948, _2949), vec3(_620, _623, _626))) + _2961;
                                float _2967 = _2958 * _2958;
                                float _2971 = (fma(_2035, _2851.z, fma(_2034, _2851.y, _2851.x * _2033)) + _2851.w) / _2912;
                                float _2972 = (fma(_2035, _2866.z, fma(_2034, _2866.y, _2866.x * _2033)) + _2866.w) / _2912;
                                float _2976 = 1.0 - dot(vec2(_2971, _2972), vec2(_2971, _2972));
                                float _3936 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                                float _2977 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _2978 = _2977 * (((isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0))) * _2954) / ((_2967 * 0.699999988079071044921875) + 1.0));
                                float _2990 = exp2(log2(1.0 / ((_2967 * 3.5) + 5.0)) * 0.25);
                                float _2991 = 1.0 - _696;
                                float _2998 = sqrt(1.0 - ((1.0 - (_2991 * _2991)) * (1.0 - (_2990 * _2990))));
                                float _2999 = _2998 * _2998;
                                float _3000 = _2999 * _2999;
                                float _3001 = _2947 - _2348;
                                float _3002 = _2948 - _2349;
                                float _3003 = _2949 - _2350;
                                float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                                float _3011 = dot(vec3(_620, _623, _626), vec3((-0.0) - _2348, (-0.0) - _2349, (-0.0) - _2350));
                                float _3947 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                                float _3014 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _3015 = dot(vec3(_620, _623, _626), vec3(_3007 * _3001, _3007 * _3002, _3007 * _3003));
                                float _3958 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3018 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _3022 = ((_3018 * _3018) * (_3000 + (-1.0))) + 1.0;
                                float _3023 = _2960 * _2999;
                                float _3024 = _3023 * _3023;
                                float _3030 = ((1.0 - _3024) * dot(vec3(_620, _623, _626), vec3(_2947, _2948, _2949))) + _3024;
                                float _3969 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _3032 = 1.0 - _2999;
                                float _3042 = (0.5 / (((_3031 * ((_3014 * _3032) + _2999)) + 9.9999999392252902907785028219223e-09) + (((_3031 * _3032) + _2999) * _3014))) * _3031;
                                float _3980 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3052 = (_2977 * _2954) * (((_3000 * 3.1415927410125732421875) * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) / ((_3022 * _3022) * ((_2967 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2978 * _2824.x;
                                frontier_phi_83_pred_1 = _2978 * _2824.z;
                                frontier_phi_83_pred_2 = _2978 * _2824.y;
                                frontier_phi_83_pred_3 = _3052 * _2836.z;
                                frontier_phi_83_pred_4 = _3052 * _2836.y;
                                frontier_phi_83_pred_5 = _3052 * _2836.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3059 = frontier_phi_83_pred;
                            _3061 = frontier_phi_83_pred_1;
                            _3060 = frontier_phi_83_pred_2;
                            _3058 = frontier_phi_83_pred_3;
                            _3057 = frontier_phi_83_pred_4;
                            _3056 = frontier_phi_83_pred_5;
                            _2766 = _3059 + _2779;
                            _2767 = _3060 + _2780;
                            _2768 = _3061 + _2781;
                            _2763 = _3056 + _2776;
                            _2764 = _3057 + _2777;
                            _2765 = _3058 + _2778;
                            if (_2783 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2783;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2768;
                        frontier_phi_77_pred_1 = _2767;
                        frontier_phi_77_pred_2 = _2766;
                        frontier_phi_77_pred_3 = _2765;
                        frontier_phi_77_pred_4 = _2764;
                        frontier_phi_77_pred_5 = _2763;
                    }
                    _2333 = frontier_phi_77_pred;
                    _2331 = frontier_phi_77_pred_1;
                    _2329 = frontier_phi_77_pred_2;
                    _2327 = frontier_phi_77_pred_3;
                    _2325 = frontier_phi_77_pred_4;
                    _2323 = frontier_phi_77_pred_5;
                    uint _2540 = _2539 + 1u;
                    if (_2540 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2533 = _2323;
                        _2534 = _2325;
                        _2535 = _2327;
                        _2536 = _2329;
                        _2537 = _2331;
                        _2538 = _2333;
                        _2539 = _2540;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2325;
                frontier_phi_52_53_ladder_1 = _2333;
                frontier_phi_52_53_ladder_2 = _2331;
                frontier_phi_52_53_ladder_3 = _2329;
                frontier_phi_52_53_ladder_4 = _2327;
                frontier_phi_52_53_ladder_5 = _2323;
            }
            else
            {
                frontier_phi_52_53_ladder = _2172;
                frontier_phi_52_53_ladder_1 = _2180;
                frontier_phi_52_53_ladder_2 = _2178;
                frontier_phi_52_53_ladder_3 = _2176;
                frontier_phi_52_53_ladder_4 = _2174;
                frontier_phi_52_53_ladder_5 = _2170;
            }
            _2322 = frontier_phi_52_53_ladder_5;
            _2324 = frontier_phi_52_53_ladder;
            _2326 = frontier_phi_52_53_ladder_4;
            _2328 = frontier_phi_52_53_ladder_3;
            _2330 = frontier_phi_52_53_ladder_2;
            _2332 = frontier_phi_52_53_ladder_1;
        }
        float _2337 = isnan(1.0) ? _680 : (isnan(_680) ? 1.0 : min(_680, 1.0));
        _2092 = (_2337 * _2328) + _1811;
        _2094 = (_2337 * _2330) + _1812;
        _2096 = (_2337 * _2332) + _1813;
        _2098 = ((_2322 * _665) * _2337) + _1975;
        _2100 = ((_2324 * _667) * _2337) + _1976;
        _2102 = ((_2326 * _668) * _2337) + _1977;
    }
    else
    {
        _2092 = _1811;
        _2094 = _1812;
        _2096 = _1813;
        _2098 = _1975;
        _2100 = _1976;
        _2102 = _1977;
    }
    float _3996 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4007 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4018 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _2119 = ((isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2092 + ((isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0))) * _680))) + ((_2098 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2120 = ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2094 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _680))) + ((_2100 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2121 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2096 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _680))) + ((_2102 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1520)) * cbPerFrame._m0[3u].x);
    float _2122 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2123 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2124 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    uint _2125 = _639 + 6u;
    float _2133 = _600 / cbSceneParam._m0[86u].x;
    float _2134 = _601 / cbSceneParam._m0[86u].y;
    vec4 _2148 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2133, _2134, (log2((isnan(cbSceneParam._m0[77u].w) ? _573 : (isnan(_573) ? cbSceneParam._m0[77u].w : min(_573, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2150 = _2148.x;
    float _2151 = _2148.y;
    float _2152 = _2148.z;
    float _2153 = _2148.w;
    float _2233;
    float _2235;
    float _2237;
    float _2239;
    if (_573 > cbSceneParam._m0[78u].w)
    {
        float _2195 = isnan(_573) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _573 : min(cbSceneParam._m0[80u].w, _573));
        float _2196 = _2195 / _573;
        float _2207 = _2196 * _263;
        float _2208 = _264 * _2196;
        float _2209 = (-0.0) - _2208;
        float _2210 = _2196 * _265;
        float _2212 = (cbSceneParam._m0[77u].w * _2209) / _2195;
        float _2213 = _2212 + cbSceneParam._m0[79u].w;
        float _2214 = cbSceneParam._m0[79u].w - _2208;
        float _2220 = sqrt(((_2207 * _2207) + (_2208 * _2208)) + (_2210 * _2210));
        float _2223 = (1.0 - (cbSceneParam._m0[77u].w / _2195)) * _2220;
        float _2229 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2231 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2464;
        if (abs((_2209 - _2212) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2464 = ((((_2213 > 0.0) ? exp2(_2229 * _2213) : (2.0 - exp2(_2231 * _2213))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2223;
        }
        else
        {
            float _2383 = 1.0 / cbSceneParam._m0[80u].x;
            float _2384 = isnan(_2214) ? _2213 : (isnan(_2213) ? _2214 : max(_2213, _2214));
            float _2385 = isnan(_2214) ? _2213 : (isnan(_2213) ? _2214 : min(_2213, _2214));
            float _2394 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : min(_2384, 0.0));
            float _2395 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : min(_2385, 0.0));
            _2464 = ((abs(_2220 / _2209) * cbSceneParam._m0[80u].y) * ((((_2394 - _2395) * 2.0) - ((exp2(_2229 * (isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0)))) - exp2(_2229 * (isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0))))) * _2383)) - ((exp2(_2231 * _2394) - exp2(_2231 * _2395)) * _2383))) + (_2223 * cbSceneParam._m0[80u].z);
        }
        vec4 _2466 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2133, _2134, 1.0), 0.0);
        float _2475 = exp2((_2464 * (-1.44269502162933349609375)) * (1.0 - _2466.w));
        float _2476 = log2(_2475);
        float _2492 = log2(_2153);
        _2233 = (exp2(_2492 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].x)) * _2466.x) / cbSceneParam._m0[78u].x)) + _2150;
        _2235 = (exp2(_2492 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].y)) * _2466.y) / cbSceneParam._m0[78u].y)) + _2151;
        _2237 = (exp2(_2492 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2476 * cbSceneParam._m0[78u].z)) * _2466.z) / cbSceneParam._m0[78u].z)) + _2152;
        _2239 = _2475 * _2153;
    }
    else
    {
        _2233 = _2150;
        _2235 = _2151;
        _2237 = _2152;
        _2239 = _2153;
    }
    bool _2502;
    vec4 _2249;
    vec4 _2271;
    float _2273;
    float _2277;
    float _2278;
    float _2279;
    float _2280;
    bool _2290;
    for (;;)
    {
        _2249 = cbMatDynParam._m0[0u];
        float _2251 = roundEven(_2249.y);
        bool _2252 = _2251 == 3.0;
        float _2253 = log2(_2239);
        float _2260 = exp2(_2253 * cbSceneParam._m0[78u].x) * _2122;
        float _2261 = exp2(_2253 * cbSceneParam._m0[78u].y) * _2123;
        float _2262 = exp2(_2253 * cbSceneParam._m0[78u].z) * _2124;
        float _2269 = _587 + (-0.5);
        _2271 = cbMtdParam._m0[1u];
        _2273 = _2271.y * _2269;
        float _2276 = (_2251 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2277 = _2276 * (_2252 ? _2260 : (_2260 + (cbSceneParam._m0[72u].w * _2233)));
        _2278 = _2276 * (_2252 ? _2261 : (_2261 + (cbSceneParam._m0[72u].w * _2235)));
        _2279 = _2276 * (_2252 ? _2262 : (_2262 + (cbSceneParam._m0[72u].w * _2237)));
        _2280 = _2269 * 0.999000012874603271484375;
        _2290 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2290)
        {
            if ((cbInstanceData._m0[_639 + 7u].x + _2280) < 0.5)
            {
                _2502 = true;
                break;
            }
        }
        uint _2418 = _641 + uint(_2249.w);
        if ((cbInstanceData._m0[_2418].w < 1.0) && ((cbInstanceData._m0[_2418].w + _2280) < 0.5))
        {
            _2502 = true;
            break;
        }
        if ((_2273 + 1.0) < _2271.x)
        {
            _2502 = true;
            break;
        }
        _2502 = false;
        break;
    }
    float _2733;
    if (_2502)
    {
        discard_state = true;
        _2733 = 0.0;
    }
    else
    {
        _2733 = cbInstanceData._m0[_2125].w;
    }
    SV_Target.x = _2277;
    SV_Target.y = _2278;
    SV_Target.z = _2279;
    SV_Target.w = _2733;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2125].w;
    discard_exit();
}


