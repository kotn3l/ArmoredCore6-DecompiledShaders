#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1175;
float _3606;
float _3607;
float _3608;
float _3609;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _294 = _288.w;
    float _307 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _294) + cbMtdParam._m0[11u].x) * _288.x;
    float _309 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _294) + cbMtdParam._m0[11u].y) * _288.y;
    float _311 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _294) + cbMtdParam._m0[11u].z) * _288.z;
    float _337 = cbMtdParam._m0[22u].y + _267;
    float _338 = cbMtdParam._m0[22u].z + _268;
    float _339 = cbMtdParam._m0[22u].w + _269;
    float _353 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_196, _197, _198));
    float _354 = (-0.0) - dot(vec3(_337, _338, _339), vec3(_210, _211, _212));
    float _355 = (-0.0) - dot(vec3(_337, _338, _339), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _359 = inversesqrt(dot(vec3(_353, _354, _355), vec3(_353, _354, _355)));
    float _360 = _359 * _355;
    float _362 = (cbMtdParam._m0[19u].x * _353) * _359;
    float _364 = (cbMtdParam._m0[18u].w * _354) * _359;
    float _365 = fract(TEXCOORD.x);
    float _366 = fract(TEXCOORD.y);
    float _372;
    if (_362 > 0.0)
    {
        _372 = (1.0 - _365) / _362;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_362 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _365) / _362;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _372 = frontier_phi_3_2_ladder;
    }
    float _380;
    if (_364 > 0.0)
    {
        _380 = (1.0 - _366) / _364;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_364 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _366) / _364;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _380 = frontier_phi_7_6_ladder;
    }
    bool _382 = _360 > 0.0;
    float _384 = _382 ? (cbMtdParam._m0[15u].x / _360) : 5000.0;
    float _385 = isnan(_380) ? _372 : (isnan(_372) ? _380 : min(_372, _380));
    float _386 = isnan(_384) ? _385 : (isnan(_385) ? _384 : min(_385, _384));
    float _390 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = _365 + (-0.5);
    float _394 = _366 + (-0.5);
    float _397 = ((_386 * _360) + _390) / _390;
    vec4 _422 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_391 + (_386 * _362)) / _397) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_394 + (_386 * _364)) / _397) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _424 = _422.x;
    float _425 = _422.y;
    float _426 = _422.z;
    float _438 = (_424 - (_424 * _294)) * cbMtdParam._m0[9u].x;
    float _439 = (_425 - (_425 * _294)) * cbMtdParam._m0[9u].y;
    float _440 = cbMtdParam._m0[9u].z * (_426 - (_426 * _294));
    float _462 = (cbMtdParam._m0[21u].x * _353) * _359;
    float _464 = (cbMtdParam._m0[20u].w * _354) * _359;
    bool _465 = _462 > 0.0;
    float _470;
    if (_465)
    {
        _470 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _470 = frontier_phi_11_10_ladder;
    }
    bool _472 = _464 > 0.0;
    float _477;
    if (_472)
    {
        _477 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _477 = frontier_phi_15_14_ladder;
    }
    float _480 = _382 ? (cbMtdParam._m0[16u].z / _360) : 5000.0;
    float _481 = isnan(_477) ? _470 : (isnan(_470) ? _477 : min(_470, _477));
    float _482 = isnan(_480) ? _481 : (isnan(_481) ? _480 : min(_481, _480));
    float _486 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _490 = ((_482 * _360) + _486) / _486;
    float _495 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _497 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _513 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_482 * _462)) / _490) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_482 * _464)) / _490) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _518 = _513.x * cbMtdParam._m0[10u].x;
    float _519 = _513.y * cbMtdParam._m0[10u].y;
    float _520 = _513.z * cbMtdParam._m0[10u].z;
    float _528;
    if (_465)
    {
        _528 = (1.0 - _365) / _462;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_462 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _365) / _462;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _528 = frontier_phi_19_18_ladder;
    }
    float _534;
    if (_472)
    {
        _534 = (1.0 - _366) / _464;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_464 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _366) / _464;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _534 = frontier_phi_23_22_ladder;
    }
    float _536 = isnan(_534) ? _528 : (isnan(_528) ? _534 : min(_528, _534));
    float _537 = isnan(_480) ? _536 : (isnan(_536) ? _480 : min(_536, _480));
    float _544 = ((_537 * _360) + _486) / _486;
    vec4 _558 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_391 + (_537 * _462)) / _544) + 0.5) + _495) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_394 + (_537 * _464)) / _544) + 0.5) + _497) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _560 = _558.w;
    float _562 = _560 - (_560 * _294);
    float _573 = 0.5 - (_294 * 0.5);
    float _583 = (((_438 - _307) + (_562 * ((_518 - _438) - (_518 * _294)))) * _573) + _307;
    float _584 = (((_439 - _309) + (_562 * ((_519 - _439) - (_519 * _294)))) * _573) + _309;
    float _585 = (((_440 - _311) + (_562 * ((_520 - _440) - (_520 * _294)))) * _573) + _311;
    vec4 _597 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _599 = _597.x;
    vec4 _611 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _619 = (_611.x * 2.0) + (-1.0);
    float _621 = (_611.y * 2.0) + (-1.0);
    float _622 = dot(vec2(_619, _621), vec2(_619, _621));
    float _3648 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _627 = sqrt(1.0 - (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))));
    float _628 = _611.z * _294;
    float _631 = fma(_627, _203, fma(_621, _210, _619 * _196));
    float _634 = fma(_627, _204, fma(_621, _211, _619 * _197));
    float _637 = fma(_627, _205, fma(_621, _212, _619 * _198));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3659 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _645 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _3670 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3681 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3692 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _3703 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _649 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _665 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _670 = _267 * _669;
    float _671 = _268 * _669;
    float _672 = _269 * _669;
    vec4 _677 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _679 = _677.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _856 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _862 = (cbMatDynParam._m0[5u].x * _856) + cbMatDynParam._m0[5u].y;
        float _3714 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        float _863 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _867 = (cbMatDynParam._m0[5u].z * _856) + cbMatDynParam._m0[5u].w;
        float _3725 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) - _863)) + _863) < ((_679 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _716 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _719 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _732 = uint(roundEven(NORMAL.w)) * 13u;
    uint _734 = _732 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3736 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _747 = 1.0 - _649;
    float _748 = _744 * _747;
    float _749 = _745 * _747;
    float _750 = _746 * _747;
    float _755 = (_744 + (-0.039999999105930328369140625)) * _649;
    float _756 = (_745 + (-0.039999999105930328369140625)) * _649;
    float _757 = (_746 + (-0.039999999105930328369140625)) * _649;
    float _758 = _755 + 0.039999999105930328369140625;
    float _760 = _756 + 0.039999999105930328369140625;
    float _761 = _757 + 0.039999999105930328369140625;
    vec4 _770 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _773 = _770.x * TEXCOORD.z;
    float _774 = dot(vec3(_642, _643, _644), vec3(_670, _671, _672));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _642) - _670;
    float _782 = (_777 * _643) - _671;
    float _783 = (_777 * _644) - _672;
    float _787 = abs(dot(vec3(_670, _671, _672), vec3(_642, _643, _644)));
    float _3769 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_645);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _808 = (1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _809 = _802 * _789;
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1174;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _901 = fma(_845, cbModelParam._m0[26u].z, fma(_841, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _837));
        float _905 = fma(_845, cbModelParam._m0[27u].z, fma(_841, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _837));
        float _909 = fma(_845, cbModelParam._m0[28u].z, fma(_841, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _837));
        float _932 = _837 + _642;
        float _933 = _841 + _643;
        float _934 = _845 + _644;
        float _944 = fma(_934, cbModelParam._m0[26u].z, fma(_933, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[27u].z, fma(_933, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[28u].z, fma(_933, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_901 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_905 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[34u].z) + ((((((_909 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1002 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_968.x + (-0.5));
        float _1004 = _1002 * (_968.y + (-0.5));
        float _1005 = _1002 * (_968.z + (-0.5));
        float _1012 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_975.x + (-0.5));
        float _1014 = _1012 * (_975.y + (-0.5));
        float _1015 = _1012 * (_975.z + (-0.5));
        float _1022 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_982.x + (-0.5));
        float _1024 = _1022 * (_982.y + (-0.5));
        float _1025 = _1022 * (_982.z + (-0.5));
        float _1032 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_989.x + (-0.5));
        float _1034 = _1032 * (_989.y + (-0.5));
        float _1035 = _1032 * (_989.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1056 = (dot(vec3(_642, _643, _644), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3795 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1066 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3806 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
        float _1068 = _1067 * 2.0;
        float _1072 = (1.0 - _1067) / (_1067 + 1.0);
        float _3817 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1082 = ((((1.0 - _1073) * (_1068 + 2.0)) * exp2(log2(isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1068 + 1.0))) + _1073) * _1036;
        float _1083 = _1004 * 0.5;
        float _1084 = _1014 * 0.5;
        float _1085 = _1024 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1099 = (dot(vec3(_642, _643, _644), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1108 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1110 = _1109 * 2.0;
        float _1114 = (1.0 - _1109) / (_1109 + 1.0);
        float _3850 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1124 = ((((1.0 - _1115) * (_1110 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1110 + 1.0))) + _1115) * _1037;
        float _1125 = _1005 * 0.5;
        float _1126 = _1015 * 0.5;
        float _1127 = _1025 * 0.5;
        float _1128 = dot(vec3(_1125, _1126, _1127), vec3(_1125, _1126, _1127));
        float _1133 = (_1128 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1128);
        float _1141 = (dot(vec3(_642, _643, _644), vec3(_1133 * _1125, _1133 * _1126, _1133 * _1127)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1150 = sqrt(((_1126 * _1126) + (_1125 * _1125)) + (_1127 * _1127)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3883 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1152 + 1.0))) + _1157) * _1038;
        _1174 = _1005;
        _1176 = _1004;
        _1177 = _1003;
        _1178 = _1015;
        _1179 = _1014;
        _1180 = _1013;
        _1181 = _1025;
        _1182 = _1024;
        _1183 = _1023;
        _1184 = _1038;
        _1185 = _1037;
        _1186 = _1036;
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0)));
        _1189 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
    }
    else
    {
        _1174 = _1175;
        _1176 = _1175;
        _1177 = _1175;
        _1178 = _1175;
        _1179 = _1175;
        _1180 = _1175;
        _1181 = _1175;
        _1182 = _1175;
        _1183 = _1175;
        _1184 = _1175;
        _1185 = _1175;
        _1186 = _1175;
        _1187 = 0.0;
        _1188 = 0.0;
        _1189 = 0.0;
    }
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1218 = fma(_845, cbModelParam._m0[30u].z, fma(_841, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _837));
        float _1222 = fma(_845, cbModelParam._m0[31u].z, fma(_841, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _837));
        float _1226 = fma(_845, cbModelParam._m0[32u].z, fma(_841, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _837));
        float _1249 = _837 + _642;
        float _1250 = _841 + _643;
        float _1251 = _845 + _644;
        float _1261 = fma(_1251, cbModelParam._m0[30u].z, fma(_1250, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1249)) - _1218;
        float _1262 = fma(_1251, cbModelParam._m0[31u].z, fma(_1250, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1249)) - _1222;
        float _1263 = fma(_1251, cbModelParam._m0[32u].z, fma(_1250, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1249)) - _1226;
        float _1267 = inversesqrt(dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263)));
        float _1280 = ((_1267 * _1261) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1218 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1267 * _1262) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1222 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1282 = ((_1267 * _1263) / cbModelParam._m0[35u].z) + ((((((_1226 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1280, _1281, _1282), 0.0);
        float _1317 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1284.x + (-0.5));
        float _1319 = _1317 * (_1284.y + (-0.5));
        float _1320 = _1317 * (_1284.z + (-0.5));
        float _1327 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1291.x + (-0.5));
        float _1329 = _1327 * (_1291.y + (-0.5));
        float _1330 = _1327 * (_1291.z + (-0.5));
        float _1337 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1298.x + (-0.5));
        float _1339 = _1337 * (_1298.y + (-0.5));
        float _1340 = _1337 * (_1298.z + (-0.5));
        float _1347 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1305.x + (-0.5));
        float _1349 = _1347 * (_1305.y + (-0.5));
        float _1350 = _1347 * (_1305.z + (-0.5));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = _1318 * 0.5;
        float _1355 = _1328 * 0.5;
        float _1356 = _1338 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_642, _643, _644), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3946 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1381 + 1.0))) + _1386) * _1351;
        float _1396 = _1319 * 0.5;
        float _1397 = _1329 * 0.5;
        float _1398 = _1339 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_642, _643, _644), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _3979 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1423 + 1.0))) + _1428) * _1352;
        float _1438 = _1320 * 0.5;
        float _1439 = _1330 * 0.5;
        float _1440 = _1340 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_642, _643, _644), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4012 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1465 + 1.0))) + _1470) * _1353;
        _1487 = _1320;
        _1488 = _1319;
        _1489 = _1318;
        _1490 = _1330;
        _1491 = _1329;
        _1492 = _1328;
        _1493 = _1340;
        _1494 = _1339;
        _1495 = _1338;
        _1496 = _1353;
        _1497 = _1352;
        _1498 = _1351;
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1175;
        _1488 = _1175;
        _1489 = _1175;
        _1490 = _1175;
        _1491 = _1175;
        _1492 = _1175;
        _1493 = _1175;
        _1494 = _1175;
        _1495 = _1175;
        _1496 = _1175;
        _1497 = _1175;
        _1498 = _1175;
        _1499 = 0.0;
        _1500 = 0.0;
        _1501 = 0.0;
    }
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1187)) + _1187;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1188)) + _1188;
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1189)) + _1189;
    float _1534 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1511 * cbSceneParam._m0[89u].x));
    float _1537 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1511 * cbSceneParam._m0[90u].x));
    float _1540 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1511));
    float _1555 = _781 * 0.5;
    float _1556 = _782 * 0.5;
    float _1557 = _783 * 0.5;
    float _1558 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1561 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1564 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1598;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1571 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1174, _1178, _1181, _1184));
        float _1575 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1579 = dot(vec4(_1555, _1556, _1557, 1.0), vec4(_1177, _1180, _1183, _1186));
        float _1586 = dot(vec4(cbModelParam._m0[39u]), vec4(_1555, _1556, _1557, 1.0));
        _1598 = dot(vec3(isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1586) ? 0.0 : (isnan(0.0) ? _1586 : max(0.0, _1586))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1598 = 1.0;
    }
    float _1609;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1600 = dot(vec4(cbModelParam._m0[40u]), vec4(_1555, _1556, _1557, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)), isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1600) ? 0.0 : (isnan(0.0) ? _1600 : max(0.0, _1600))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1613 = (_1609 * cbModelParam._m0[1u].x) + (_1598 * (1.0 - cbModelParam._m0[1u].x));
    float _1623 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1624 = isnan(_1623) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1623 : min(cbModelParam._m0[25u].z, _1623));
    float _1705;
    float _1707;
    float _1709;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1672 = fma(_845, cbModelParam._m0[13u].z, fma(_841, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _837)) + cbModelParam._m0[13u].w;
        float _1676 = fma(_845, cbModelParam._m0[14u].z, fma(_841, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _837)) + cbModelParam._m0[14u].w;
        float _1680 = fma(_845, cbModelParam._m0[15u].z, fma(_841, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _837)) + cbModelParam._m0[15u].w;
        float _1683 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1686 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1689 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1717;
        if (_1683 > 0.0)
        {
            _1717 = abs((1.0 - _1672) / _1683);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1672 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1717 = frontier_phi_41_39_ladder;
        }
        float _1887;
        if (_1686 > 0.0)
        {
            _1887 = abs((1.0 - _1676) / _1686);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1676 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1887 = frontier_phi_50_46_ladder;
        }
        float _2342;
        if (_1689 > 0.0)
        {
            _2342 = abs((1.0 - _1680) / _1689);
        }
        else
        {
            float frontier_phi_62_57_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_62_57_ladder = abs((_1680 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_62_57_ladder = 5000.0;
            }
            _2342 = frontier_phi_62_57_ladder;
        }
        float _2344 = isnan(_1887) ? _1717 : (isnan(_1717) ? _1887 : min(_1717, _1887));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1683) + _1672;
        float _2350 = (_2345 * _1686) + _1676;
        float _2351 = (_2345 * _1689) + _1680;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_40_62_ladder;
        float frontier_phi_40_62_ladder_1;
        float frontier_phi_40_62_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_40_62_ladder = 0.0;
            frontier_phi_40_62_ladder_1 = 0.0;
            frontier_phi_40_62_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1624);
            frontier_phi_40_62_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_40_62_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1705 = frontier_phi_40_62_ladder_2;
        _1707 = frontier_phi_40_62_ladder_1;
        _1709 = frontier_phi_40_62_ladder;
    }
    else
    {
        vec4 _1693 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1624);
        _1705 = _1693.x * cbModelParam._m0[1u].y;
        _1707 = _1693.y * cbModelParam._m0[1u].y;
        _1709 = _1693.z * cbModelParam._m0[1u].y;
    }
    float _1713 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1713 : min(cbModelParam._m0[25u].w, _1713));
    float _1802;
    float _1804;
    float _1806;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1766 = fma(_845, cbModelParam._m0[21u].z, fma(_841, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _837)) + cbModelParam._m0[21u].w;
        float _1770 = fma(_845, cbModelParam._m0[22u].z, fma(_841, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _837)) + cbModelParam._m0[22u].w;
        float _1774 = fma(_845, cbModelParam._m0[23u].z, fma(_841, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _837)) + cbModelParam._m0[23u].w;
        float _1777 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1780 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1783 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1892;
        if (_1777 > 0.0)
        {
            _1892 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1892 = frontier_phi_52_48_ladder;
        }
        float _2369;
        if (_1780 > 0.0)
        {
            _2369 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2369 = frontier_phi_64_59_ladder;
        }
        float _2714;
        if (_1783 > 0.0)
        {
            _2714 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_76_71_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_76_71_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_76_71_ladder = 5000.0;
            }
            _2714 = frontier_phi_76_71_ladder;
        }
        float _2716 = isnan(_2369) ? _1892 : (isnan(_1892) ? _2369 : min(_1892, _2369));
        float _2717 = isnan(_2714) ? _2716 : (isnan(_2716) ? _2714 : min(_2716, _2714));
        float _2721 = (_2717 * _1777) + _1766;
        float _2722 = (_2717 * _1780) + _1770;
        float _2723 = (_2717 * _1783) + _1774;
        float _2724 = _2717 * 9.9999997473787516355514526367188e-05;
        float _2725 = (-1.0) - _2724;
        float _2727 = _2724 + 1.0;
        float frontier_phi_49_76_ladder;
        float frontier_phi_49_76_ladder_1;
        float frontier_phi_49_76_ladder_2;
        if ((_2723 > _2727) || ((_2723 < _2725) || ((_2722 > _2727) || ((_2722 < _2725) || ((_2721 < _2725) || (_2721 > _2727))))))
        {
            frontier_phi_49_76_ladder = 0.0;
            frontier_phi_49_76_ladder_1 = 0.0;
            frontier_phi_49_76_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2723, cbModelParam._m0[17u].z, fma(_2722, cbModelParam._m0[17u].y, _2721 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2723, cbModelParam._m0[18u].z, fma(_2722, cbModelParam._m0[18u].y, _2721 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2723, cbModelParam._m0[19u].z, fma(_2722, cbModelParam._m0[19u].y, _2721 * cbModelParam._m0[19u].x))), _1714);
            frontier_phi_49_76_ladder = _2860.z * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_1 = _2860.x * cbModelParam._m0[1u].z;
            frontier_phi_49_76_ladder_2 = _2860.y * cbModelParam._m0[1u].z;
        }
        _1802 = frontier_phi_49_76_ladder_1;
        _1804 = frontier_phi_49_76_ladder_2;
        _1806 = frontier_phi_49_76_ladder;
    }
    else
    {
        vec4 _1786 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1714);
        _1802 = _1786.x * cbModelParam._m0[1u].z;
        _1804 = _1786.y * cbModelParam._m0[1u].z;
        _1806 = _1786.z * cbModelParam._m0[1u].z;
    }
    float _1819 = (((_808 * _758) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1802 - _1705)) + _1705);
    float _1821 = (((_808 * _760) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1804 - _1707)) + _1707);
    float _1823 = (((_808 * _761) + _809) * _773) * ((cbModelParam._m0[1u].w * (_1806 - _1709)) + _1709);
    float _1826 = fma(_1823, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1823, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1823, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1819 * cbSceneParam._m0[91u].x));
    float _1866 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1870 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1874 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1878 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1879 = _1866 / _1878;
    float _1880 = _1870 / _1878;
    float _1881 = _1874 / _1878;
    float _2028;
    float _2029;
    float _2030;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1908 = ((uint(_1881 > cbSceneParam._m0[59u].y) + uint(_1881 > cbSceneParam._m0[59u].x)) + uint(_1881 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1909 = _1908 + 43u;
        uint _1917 = _1908 + 44u;
        uint _1925 = _1908 + 45u;
        uint _1933 = _1908 + 46u;
        float _1944 = fma(_1878, cbSceneParam._m0[_1909].w, fma(_1874, cbSceneParam._m0[_1909].z, fma(_1870, cbSceneParam._m0[_1909].y, _1866 * cbSceneParam._m0[_1909].x)));
        float _1948 = fma(_1878, cbSceneParam._m0[_1917].w, fma(_1874, cbSceneParam._m0[_1917].z, fma(_1870, cbSceneParam._m0[_1917].y, _1866 * cbSceneParam._m0[_1917].x)));
        float _1956 = fma(_1878, cbSceneParam._m0[_1933].w, fma(_1874, cbSceneParam._m0[_1933].z, fma(_1870, cbSceneParam._m0[_1933].y, _1866 * cbSceneParam._m0[_1933].x)));
        float _1961 = cbSceneParam._m0[33u].z * _1956;
        float _1963 = cbSceneParam._m0[33u].w * _1956;
        float _1966 = fma(_1878, cbSceneParam._m0[_1925].w, fma(_1874, cbSceneParam._m0[_1925].z, fma(_1870, cbSceneParam._m0[_1925].y, _1866 * cbSceneParam._m0[_1925].x))) / _1956;
        float _2014 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
        float _4138 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2021 = (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1961 + _1944) / _1956, (_1963 + _1948) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1963 + _1944) / _1956, (_1948 - _1961) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1961) / _1956, (_1948 - _1963) / _1956), _1966), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1944 - _1963) / _1956, (_1961 + _1948) / _1956), _1966), 0.0)).x), vec4(0.25)));
        _2028 = 1.0 - (_2021 * cbSceneParam._m0[34u].x);
        _2029 = 1.0 - (_2021 * cbSceneParam._m0[34u].y);
        _2030 = 1.0 - (_2021 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2028 = 1.0;
        _2029 = 1.0;
        _2030 = 1.0;
    }
    float _2094;
    float _2096;
    float _2098;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2082 = fma(_1878, cbSceneParam._m0[63u].w, fma(_1874, cbSceneParam._m0[63u].z, fma(_1870, cbSceneParam._m0[63u].y, _1866 * cbSceneParam._m0[63u].x)));
        float _2083 = fma(_1878, cbSceneParam._m0[60u].w, fma(_1874, cbSceneParam._m0[60u].z, fma(_1870, cbSceneParam._m0[60u].y, _1866 * cbSceneParam._m0[60u].x))) / _2082;
        float _2084 = fma(_1878, cbSceneParam._m0[61u].w, fma(_1874, cbSceneParam._m0[61u].z, fma(_1870, cbSceneParam._m0[61u].y, _1866 * cbSceneParam._m0[61u].x))) / _2082;
        float frontier_phi_61_60_ladder;
        float frontier_phi_61_60_ladder_1;
        float frontier_phi_61_60_ladder_2;
        if ((((_2083 >= cbSceneParam._m0[64u].x) && (_2084 >= cbSceneParam._m0[64u].y)) && (_2083 <= cbSceneParam._m0[64u].z)) && (_2084 <= cbSceneParam._m0[64u].w))
        {
            float _2382 = fma(_1878, cbSceneParam._m0[62u].w, fma(_1874, cbSceneParam._m0[62u].z, fma(_1870, cbSceneParam._m0[62u].y, _1866 * cbSceneParam._m0[62u].x))) / _2082;
            float _2386 = isnan(cbSceneParam._m0[41u].w) ? _2382 : (isnan(_2382) ? cbSceneParam._m0[41u].w : max(_2382, cbSceneParam._m0[41u].w));
            float _2429 = (cbSceneParam._m0[33u].x - sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881))) * cbSceneParam._m0[33u].y;
            float _4154 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
            float _2436 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2083, cbSceneParam._m0[33u].w + _2084), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2083, _2084 - cbSceneParam._m0[33u].z), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].z, _2084 - cbSceneParam._m0[33u].w), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2083 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2084), _2386), 0.0)).x), vec4(0.25)));
            float _2440 = 1.0 - (_2436 * cbSceneParam._m0[34u].x);
            float _2441 = 1.0 - (_2436 * cbSceneParam._m0[34u].y);
            float _2442 = 1.0 - (_2436 * cbSceneParam._m0[34u].z);
            frontier_phi_61_60_ladder = isnan(_2442) ? _2030 : (isnan(_2030) ? _2442 : min(_2030, _2442));
            frontier_phi_61_60_ladder_1 = isnan(_2441) ? _2029 : (isnan(_2029) ? _2441 : min(_2029, _2441));
            frontier_phi_61_60_ladder_2 = isnan(_2440) ? _2028 : (isnan(_2028) ? _2440 : min(_2028, _2440));
        }
        else
        {
            frontier_phi_61_60_ladder = _2030;
            frontier_phi_61_60_ladder_1 = _2029;
            frontier_phi_61_60_ladder_2 = _2028;
        }
        _2094 = frontier_phi_61_60_ladder_2;
        _2096 = frontier_phi_61_60_ladder_1;
        _2098 = frontier_phi_61_60_ladder;
    }
    else
    {
        _2094 = _2028;
        _2096 = _2029;
        _2098 = _2030;
    }
    uvec4 _2103 = floatBitsToUint(cbInstanceData._m0[_732 + 5u]);
    uint _2105 = _2103.x * 14u;
    uint _2106 = _2105 + 13u;
    float _2111 = _773 + (-1.0);
    float _2114 = (cbLight._m0[_2106].x * _2111) + 1.0;
    float _2115 = (cbLight._m0[_2106].y * _2111) + 1.0;
    uint _2116 = _2105 + 5u;
    float _2122 = isnan(1.0) ? _2115 : (isnan(_2115) ? 1.0 : min(_2115, 1.0));
    uint _2126 = _2105 + 4u;
    float _2135 = isnan(1.0) ? _2114 : (isnan(_2114) ? 1.0 : min(_2114, 1.0));
    uint _2139 = _2105 | 1u;
    float _2150 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_642, _643, _644));
    float _2153 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_642, _643, _644));
    float _4190 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _4201 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2158 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * 0.3183098733425140380859375;
    float _2160 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * 0.3183098733425140380859375;
    float _2167 = ((cbLight._m0[_2116].x * _2122) * _2160) + (((cbLight._m0[_2126].x * _2094) * _2135) * _2158);
    float _2168 = ((_2122 * cbLight._m0[_2116].y) * _2160) + (((cbLight._m0[_2126].y * _2096) * _2135) * _2158);
    float _2169 = ((_2122 * cbLight._m0[_2116].z) * _2160) + (((cbLight._m0[_2126].z * _2098) * _2135) * _2158);
    uint _2171 = _2105 + 8u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _645) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_2105].x + _670;
    float _2187 = cbLight._m0[_2105].y + _671;
    float _2188 = cbLight._m0[_2105].z + _672;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2105].xyz));
    float _4212 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _4223 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2200 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _2201 = dot(vec3(_642, _643, _644), vec3(_2193, _2194, _2195));
    float _4234 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2193, _2194, _2195));
    float _4245 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2185 * _2185;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) * 5.0);
    float _2222 = 0.959999978542327880859375 - _755;
    float _2224 = 0.959999978542327880859375 - _756;
    float _2225 = 0.959999978542327880859375 - _757;
    float _2232 = 1.0 - _2185;
    float _2243 = (0.5 / (((_2200 * ((_2199 * _2232) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2232) + _2185) * _2199))) * _2199;
    float _4256 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    uint _2259 = _2105 + 9u;
    float _2270 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2139].w)) * _645) * 0.949999988079071044921875);
    float _2271 = _2270 * _2270;
    float _2272 = cbLight._m0[_2139].x + _670;
    float _2273 = cbLight._m0[_2139].y + _671;
    float _2274 = cbLight._m0[_2139].z + _672;
    float _2278 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
    float _2279 = _2278 * _2272;
    float _2280 = _2278 * _2273;
    float _2281 = _2278 * _2274;
    float _2282 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_2139].xyz));
    float _4267 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2285 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
    float _2286 = dot(vec3(_642, _643, _644), vec3(_2279, _2280, _2281));
    float _4278 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
    float _2290 = dot(vec3(cbLight._m0[_2139].xyz), vec3(_2279, _2280, _2281));
    float _4289 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2294 = _2271 * _2271;
    float _2298 = ((_2289 * _2289) * (_2294 + (-1.0))) + 1.0;
    float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0)))) * 5.0);
    float _2312 = 1.0 - _2271;
    float _2322 = (0.5 / (((_2200 * ((_2285 * _2312) + _2271)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2312) + _2271) * _2285))) * _2285;
    float _4300 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_2294 / ((_2298 * _2298) * 3.141590118408203125));
    float _2334 = (((((_2305 * _2222) + _758) * cbLight._m0[_2259].x) * _2324) * _2122) + ((((cbLight._m0[_2171].x * _2094) * ((_2221 * _2222) + _758)) * _2245) * _2135);
    float _2335 = (((((_2305 * _2224) + _760) * cbLight._m0[_2259].y) * _2324) * _2122) + ((((cbLight._m0[_2171].y * _2096) * ((_2221 * _2224) + _760)) * _2245) * _2135);
    float _2336 = (((((_2305 * _2225) + _761) * cbLight._m0[_2259].z) * _2324) * _2122) + ((((cbLight._m0[_2171].z * _2098) * ((_2221 * _2225) + _761)) * _2245) * _2135);
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_2103.y == 0u)
    {
        uvec4 _2454 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2455 = _2454.x;
        uint _2466 = uint((float(_2454.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2455))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2455)));
        float _2476 = (log2(_1881 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2477 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        uint _2480 = uint(isnan(14.0) ? _2477 : (isnan(_2477) ? 14.0 : min(_2477, 14.0)));
        uvec4 _2485 = texelFetch(g_lightClusterGridBuffer, int(((_2480 << 2u) + (_2466 << 6u)) >> 2u));
        uint _2486 = _2485.x;
        uint _2487 = _2454.z;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        if (((((1u << ((_2487 >> 4u) & 15u)) + 4294967295u) & _2486) == 0u) || ((_2487 & 240u) == 0u))
        {
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
        }
        else
        {
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2772 = 0.0;
            float _2773 = 0.0;
            float _2774 = 0.0;
            float _2775 = 0.0;
            float _2776 = 0.0;
            float _2777 = 0.0;
            uint _2778 = 0u;
            uint _2787;
            bool _2788;
            for (;;)
            {
                _2787 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2778 << 2u)) >> 2u)).x;
                _2788 = _2787 == 0u;
                float frontier_phi_87_pred;
                float frontier_phi_87_pred_1;
                float frontier_phi_87_pred_2;
                float frontier_phi_87_pred_3;
                float frontier_phi_87_pred_4;
                float frontier_phi_87_pred_5;
                if (_2788)
                {
                    frontier_phi_87_pred = _2772;
                    frontier_phi_87_pred_1 = _2777;
                    frontier_phi_87_pred_2 = _2776;
                    frontier_phi_87_pred_3 = _2775;
                    frontier_phi_87_pred_4 = _2774;
                    frontier_phi_87_pred_5 = _2773;
                }
                else
                {
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    uint _2944;
                    _2938 = _2772;
                    _2939 = _2773;
                    _2940 = _2774;
                    _2941 = _2775;
                    _2942 = _2776;
                    _2943 = _2777;
                    _2944 = _2787;
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    for (;;)
                    {
                        uint _2948 = uint(findLSB(_2944)) + (_2778 << 5u);
                        uint _2945 = (_2944 + 4294967295u) & _2944;
                        uint _2950 = _2948 * 48u;
                        vec4 _2964 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 3u)).x));
                        uint _2970 = (_2948 * 48u) + 4u;
                        vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2970)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2970 + 3u)).x));
                        uint _2989 = (_2948 * 48u) + 8u;
                        vec3 _3000 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2989)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2989 + 2u)).x));
                        float _3004 = _2964.x - _1879;
                        float _3005 = _2964.y - _1880;
                        float _3006 = _2964.z - _1881;
                        float _3007 = dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006));
                        float _3010 = inversesqrt(_3007);
                        float _3011 = _3010 * _3004;
                        float _3012 = _3010 * _3005;
                        float _3013 = _3010 * _3006;
                        float _3014 = dot(vec3(_713, _716, _719), vec3(_3011, _3012, _3013));
                        float _3019 = 1.0 - (_3007 * _2964.w);
                        float _4321 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3020 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3021 = sqrt(_3007) * _2983.w;
                        float _3024 = 1.39999997615814208984375 / (_3021 + 1.39999997615814208984375);
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _3014) + _3025;
                        float _3031 = _3021 * _3021;
                        float _3035 = ((isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0))) * _3020) / ((_3031 * 0.699999988079071044921875) + 1.0);
                        float _3039 = (-0.0) - _1879;
                        float _3040 = (-0.0) - _1880;
                        float _3041 = (-0.0) - _1881;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3046 = _3045 * _3039;
                        float _3047 = _3045 * _3040;
                        float _3048 = _3045 * _3041;
                        float _3055 = exp2(log2(1.0 / ((_3031 * 3.5) + 5.0)) * 0.25);
                        float _3056 = 1.0 - _789;
                        float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                        float _3064 = _3063 * _3063;
                        float _3065 = _3064 * _3064;
                        float _3066 = _3046 + _3011;
                        float _3067 = _3047 + _3012;
                        float _3068 = _3048 + _3013;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3076 = dot(vec3(_713, _716, _719), vec3(_3046, _3047, _3048));
                        float _4337 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                        float _3080 = dot(vec3(_713, _716, _719), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                        float _4348 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                        float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                        float _3088 = _3024 * _3064;
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3014) + _3089;
                        float _4359 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                        float _3094 = 1.0 - _3064;
                        float _3104 = (0.5 / (((_3093 * ((_3079 * _3094) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3064) * _3079))) * _3093;
                        float _4370 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3115 = (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) / ((_3087 * _3087) * ((_3031 * 2.1991131305694580078125) + 3.141590118408203125))) * _3020;
                        _2868 = (_3035 * _2983.x) + _2941;
                        _2869 = (_3035 * _2983.y) + _2942;
                        _2870 = (_3035 * _2983.z) + _2943;
                        _2865 = (_3115 * _3000.x) + _2938;
                        _2866 = (_3115 * _3000.y) + _2939;
                        _2867 = (_3115 * _3000.z) + _2940;
                        if (_2945 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2938 = _2865;
                            _2939 = _2866;
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2870;
                            _2944 = _2945;
                        }
                    }
                    frontier_phi_87_pred = _2865;
                    frontier_phi_87_pred_1 = _2870;
                    frontier_phi_87_pred_2 = _2869;
                    frontier_phi_87_pred_3 = _2868;
                    frontier_phi_87_pred_4 = _2867;
                    frontier_phi_87_pred_5 = _2866;
                }
                _2595 = frontier_phi_87_pred;
                _2605 = frontier_phi_87_pred_1;
                _2603 = frontier_phi_87_pred_2;
                _2601 = frontier_phi_87_pred_3;
                _2599 = frontier_phi_87_pred_4;
                _2597 = frontier_phi_87_pred_5;
                uint _2779 = _2778 + 1u;
                if (_2779 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2772 = _2595;
                    _2773 = _2597;
                    _2774 = _2599;
                    _2775 = _2601;
                    _2776 = _2603;
                    _2777 = _2605;
                    _2778 = _2779;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
        }
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.z;
        uint _2611 = (_2609 >> 8u) & 15u;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        if (((4294967295u << _2611) & _2486) == 0u)
        {
            _2740 = _2594;
            _2742 = _2596;
            _2744 = _2598;
            _2746 = _2600;
            _2748 = _2602;
            _2750 = _2604;
        }
        else
        {
            float _2765 = inversesqrt(dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881)));
            float _2766 = _2765 * _1879;
            float _2767 = _2765 * _1880;
            float _2768 = _2765 * _1881;
            float frontier_phi_78_79_ladder;
            float frontier_phi_78_79_ladder_1;
            float frontier_phi_78_79_ladder_2;
            float frontier_phi_78_79_ladder_3;
            float frontier_phi_78_79_ladder_4;
            float frontier_phi_78_79_ladder_5;
            if (_2611 < ((_2609 >> 12u) & 15u))
            {
                float _2741;
                float _2743;
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2921 = _2594;
                float _2922 = _2596;
                float _2923 = _2598;
                float _2924 = _2600;
                float _2925 = _2602;
                float _2926 = _2604;
                uint _2927 = _2611;
                uint _2936;
                bool _2937;
                for (;;)
                {
                    _2936 = texelFetch(g_lightClassification, int((((_2480 << 5u) + (_2466 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                    _2937 = _2936 == 0u;
                    float frontier_phi_98_pred;
                    float frontier_phi_98_pred_1;
                    float frontier_phi_98_pred_2;
                    float frontier_phi_98_pred_3;
                    float frontier_phi_98_pred_4;
                    float frontier_phi_98_pred_5;
                    if (_2937)
                    {
                        frontier_phi_98_pred = _2926;
                        frontier_phi_98_pred_1 = _2925;
                        frontier_phi_98_pred_2 = _2924;
                        frontier_phi_98_pred_3 = _2923;
                        frontier_phi_98_pred_4 = _2922;
                        frontier_phi_98_pred_5 = _2921;
                    }
                    else
                    {
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3142 = _2921;
                        float _3143 = _2922;
                        float _3144 = _2923;
                        float _3145 = _2924;
                        float _3146 = _2925;
                        float _3147 = _2926;
                        uint _3148 = _2936;
                        uint _3149;
                        vec4 _3174;
                        float _3175;
                        vec4 _3190;
                        vec3 _3202;
                        vec4 _3217;
                        vec4 _3232;
                        float _3278;
                        bool _3279;
                        for (;;)
                        {
                            uint _3159 = ((_2927 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3148));
                            _3149 = (_3148 + 4294967295u) & _3148;
                            uint _3161 = _3159 * 40u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            _3175 = _3174.w;
                            uint _3177 = (_3159 * 40u) + 4u;
                            _3190 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3177)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3177 + 3u)).x));
                            uint _3192 = (_3159 * 40u) + 8u;
                            _3202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x));
                            uint _3204 = (_3159 * 40u) + 16u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            uint _3219 = (_3159 * 40u) + 20u;
                            _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3234 = (_3159 * 40u) + 24u;
                            vec4 _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3253 = (_3159 * 40u) + 28u;
                            vec4 _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3278 = fma(_1881, _3266.z, fma(_1880, _3266.y, _3266.x * _1879)) + _3266.w;
                            _3279 = !((fma(_1881, _3247.z, fma(_1880, _3247.y, _3247.x * _1879)) + _3247.w) <= 0.0);
                            float frontier_phi_104_pred;
                            float frontier_phi_104_pred_1;
                            float frontier_phi_104_pred_2;
                            float frontier_phi_104_pred_3;
                            float frontier_phi_104_pred_4;
                            float frontier_phi_104_pred_5;
                            if (_3279)
                            {
                                float _3306 = _3174.x - _1879;
                                float _3307 = _3174.y - _1880;
                                float _3308 = _3174.z - _1881;
                                float _3309 = dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308));
                                float _3312 = inversesqrt(_3309);
                                float _3313 = _3312 * _3306;
                                float _3314 = _3312 * _3307;
                                float _3315 = _3312 * _3308;
                                float _3319 = 1.0 - (_3309 / (_3175 * _3175));
                                float _4381 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3320 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3324 = sqrt(_3309) * _3190.w;
                                float _3326 = 1.39999997615814208984375 / (_3324 + 1.39999997615814208984375);
                                float _3327 = _3326 * _3326;
                                float _3330 = ((1.0 - _3327) * dot(vec3(_3313, _3314, _3315), vec3(_713, _716, _719))) + _3327;
                                float _3333 = _3324 * _3324;
                                float _3337 = (fma(_1881, _3217.z, fma(_1880, _3217.y, _3217.x * _1879)) + _3217.w) / _3278;
                                float _3338 = (fma(_1881, _3232.z, fma(_1880, _3232.y, _3232.x * _1879)) + _3232.w) / _3278;
                                float _3342 = 1.0 - dot(vec2(_3337, _3338), vec2(_3337, _3338));
                                float _4397 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                                float _3344 = _3343 * (((isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0))) * _3320) / ((_3333 * 0.699999988079071044921875) + 1.0));
                                float _3356 = exp2(log2(1.0 / ((_3333 * 3.5) + 5.0)) * 0.25);
                                float _3357 = 1.0 - _789;
                                float _3364 = sqrt(1.0 - ((1.0 - (_3357 * _3357)) * (1.0 - (_3356 * _3356))));
                                float _3365 = _3364 * _3364;
                                float _3366 = _3365 * _3365;
                                float _3367 = _3313 - _2766;
                                float _3368 = _3314 - _2767;
                                float _3369 = _3315 - _2768;
                                float _3373 = inversesqrt(dot(vec3(_3367, _3368, _3369), vec3(_3367, _3368, _3369)));
                                float _3377 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2766, (-0.0) - _2767, (-0.0) - _2768));
                                float _4408 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
                                float _3380 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
                                float _3381 = dot(vec3(_713, _716, _719), vec3(_3373 * _3367, _3373 * _3368, _3373 * _3369));
                                float _4419 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3384 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3388 = ((_3384 * _3384) * (_3366 + (-1.0))) + 1.0;
                                float _3389 = _3326 * _3365;
                                float _3390 = _3389 * _3389;
                                float _3396 = ((1.0 - _3390) * dot(vec3(_713, _716, _719), vec3(_3313, _3314, _3315))) + _3390;
                                float _4430 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                                float _3397 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3398 = 1.0 - _3365;
                                float _3408 = (0.5 / (((_3397 * ((_3380 * _3398) + _3365)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3365) * _3380))) * _3397;
                                float _4441 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                                float _3418 = (_3343 * _3320) * (((_3366 * 3.1415927410125732421875) * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) / ((_3388 * _3388) * ((_3333 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_104_pred = _3344 * _3190.y;
                                frontier_phi_104_pred_1 = _3344 * _3190.x;
                                frontier_phi_104_pred_2 = _3418 * _3202.z;
                                frontier_phi_104_pred_3 = _3418 * _3202.y;
                                frontier_phi_104_pred_4 = _3418 * _3202.x;
                                frontier_phi_104_pred_5 = _3344 * _3190.z;
                            }
                            else
                            {
                                frontier_phi_104_pred = 0.0;
                                frontier_phi_104_pred_1 = 0.0;
                                frontier_phi_104_pred_2 = 0.0;
                                frontier_phi_104_pred_3 = 0.0;
                                frontier_phi_104_pred_4 = 0.0;
                                frontier_phi_104_pred_5 = 0.0;
                            }
                            _3426 = frontier_phi_104_pred;
                            _3425 = frontier_phi_104_pred_1;
                            _3424 = frontier_phi_104_pred_2;
                            _3423 = frontier_phi_104_pred_3;
                            _3422 = frontier_phi_104_pred_4;
                            _3427 = frontier_phi_104_pred_5;
                            _3132 = _3425 + _3145;
                            _3133 = _3426 + _3146;
                            _3134 = _3427 + _3147;
                            _3129 = _3422 + _3142;
                            _3130 = _3423 + _3143;
                            _3131 = _3424 + _3144;
                            if (_3149 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3142 = _3129;
                                _3143 = _3130;
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3149;
                                continue;
                            }
                        }
                        frontier_phi_98_pred = _3134;
                        frontier_phi_98_pred_1 = _3133;
                        frontier_phi_98_pred_2 = _3132;
                        frontier_phi_98_pred_3 = _3131;
                        frontier_phi_98_pred_4 = _3130;
                        frontier_phi_98_pred_5 = _3129;
                    }
                    _2751 = frontier_phi_98_pred;
                    _2749 = frontier_phi_98_pred_1;
                    _2747 = frontier_phi_98_pred_2;
                    _2745 = frontier_phi_98_pred_3;
                    _2743 = frontier_phi_98_pred_4;
                    _2741 = frontier_phi_98_pred_5;
                    uint _2928 = _2927 + 1u;
                    if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2921 = _2741;
                        _2922 = _2743;
                        _2923 = _2745;
                        _2924 = _2747;
                        _2925 = _2749;
                        _2926 = _2751;
                        _2927 = _2928;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_78_79_ladder = _2745;
                frontier_phi_78_79_ladder_1 = _2751;
                frontier_phi_78_79_ladder_2 = _2749;
                frontier_phi_78_79_ladder_3 = _2747;
                frontier_phi_78_79_ladder_4 = _2743;
                frontier_phi_78_79_ladder_5 = _2741;
            }
            else
            {
                frontier_phi_78_79_ladder = _2598;
                frontier_phi_78_79_ladder_1 = _2604;
                frontier_phi_78_79_ladder_2 = _2602;
                frontier_phi_78_79_ladder_3 = _2600;
                frontier_phi_78_79_ladder_4 = _2596;
                frontier_phi_78_79_ladder_5 = _2594;
            }
            _2740 = frontier_phi_78_79_ladder_5;
            _2742 = frontier_phi_78_79_ladder_4;
            _2744 = frontier_phi_78_79_ladder;
            _2746 = frontier_phi_78_79_ladder_3;
            _2748 = frontier_phi_78_79_ladder_2;
            _2750 = frontier_phi_78_79_ladder_1;
        }
        float _2755 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2499 = (_2755 * _2746) + _2167;
        _2501 = (_2755 * _2748) + _2168;
        _2503 = (_2755 * _2750) + _2169;
        _2505 = ((_2740 * _758) * _2755) + _2334;
        _2507 = ((_2742 * _760) * _2755) + _2335;
        _2509 = ((_2744 * _761) * _2755) + _2336;
    }
    else
    {
        _2499 = _2167;
        _2501 = _2168;
        _2503 = _2169;
        _2505 = _2334;
        _2507 = _2335;
        _2509 = _2336;
    }
    float _4457 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4468 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4479 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2526 = ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_2499 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _773))) + ((_2505 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2527 = ((isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_2501 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _773))) + ((_2507 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2528 = ((isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2503 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _773))) + ((_2509 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1613)) * cbPerFrame._m0[3u].x);
    float _2529 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2530 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
    uint _2532 = _732 + 6u;
    float _2540 = _692 / cbSceneParam._m0[86u].x;
    float _2541 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _665 : (isnan(_665) ? cbSceneParam._m0[77u].w : min(_665, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    if (_665 > cbSceneParam._m0[78u].w)
    {
        float _2619 = isnan(_665) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _665 : min(cbSceneParam._m0[80u].w, _665));
        float _2620 = _2619 / _665;
        float _2631 = _2620 * _267;
        float _2632 = _268 * _2620;
        float _2633 = (-0.0) - _2632;
        float _2634 = _2620 * _269;
        float _2636 = (cbSceneParam._m0[77u].w * _2633) / _2619;
        float _2637 = _2636 + cbSceneParam._m0[79u].w;
        float _2638 = cbSceneParam._m0[79u].w - _2632;
        float _2644 = sqrt(((_2631 * _2631) + (_2632 * _2632)) + (_2634 * _2634));
        float _2647 = (1.0 - (cbSceneParam._m0[77u].w / _2619)) * _2644;
        float _2652 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2654 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2878;
        if (abs((_2633 - _2636) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2878 = ((((_2637 > 0.0) ? exp2(_2652 * _2637) : (2.0 - exp2(_2654 * _2637))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2647;
        }
        else
        {
            float _2801 = 1.0 / cbSceneParam._m0[80u].x;
            float _2802 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : max(_2637, _2638));
            float _2803 = isnan(_2638) ? _2637 : (isnan(_2637) ? _2638 : min(_2637, _2638));
            float _2812 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : min(_2802, 0.0));
            float _2813 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : min(_2803, 0.0));
            _2878 = ((abs(_2644 / _2633) * cbSceneParam._m0[80u].y) * ((((_2812 - _2813) * 2.0) - ((exp2(_2652 * (isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0)))) - exp2(_2652 * (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))))) * _2801)) - ((exp2(_2654 * _2812) - exp2(_2654 * _2813)) * _2801))) + (_2647 * cbSceneParam._m0[80u].z);
        }
        vec4 _2880 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2889 = exp2((_2878 * (-1.44269502162933349609375)) * (1.0 - _2880.w));
        float _2890 = log2(_2889);
        float _2906 = log2(_2560);
        _2656 = (exp2(_2906 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].x)) * _2880.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2658 = (exp2(_2906 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].y)) * _2880.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2660 = (exp2(_2906 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2890 * cbSceneParam._m0[78u].z)) * _2880.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2662 = _2889 * _2560;
    }
    else
    {
        _2656 = _2557;
        _2658 = _2558;
        _2660 = _2559;
        _2662 = _2560;
    }
    bool _2916;
    vec4 _2672;
    vec4 _2694;
    float _2696;
    float _2700;
    float _2701;
    float _2702;
    float _2703;
    bool _2713;
    for (;;)
    {
        _2672 = cbMatDynParam._m0[0u];
        float _2674 = roundEven(_2672.y);
        bool _2675 = _2674 == 3.0;
        float _2676 = log2(_2662);
        float _2683 = exp2(_2676 * cbSceneParam._m0[78u].x) * _2529;
        float _2684 = exp2(_2676 * cbSceneParam._m0[78u].y) * _2530;
        float _2685 = exp2(_2676 * cbSceneParam._m0[78u].z) * _2531;
        float _2692 = _679 + (-0.5);
        _2694 = cbMtdParam._m0[1u];
        _2696 = _2694.y * _2692;
        float _2699 = (_2674 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2700 = _2699 * (_2675 ? _2683 : (_2683 + (cbSceneParam._m0[72u].w * _2656)));
        _2701 = _2699 * (_2675 ? _2684 : (_2684 + (cbSceneParam._m0[72u].w * _2658)));
        _2702 = _2699 * (_2675 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2660)));
        _2703 = _2692 * 0.999000012874603271484375;
        _2713 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2713)
        {
            if ((cbInstanceData._m0[_732 + 7u].x + _2703) < 0.5)
            {
                _2916 = true;
                break;
            }
        }
        uint _2836 = _734 + uint(_2672.w);
        if ((cbInstanceData._m0[_2836].w < 1.0) && ((cbInstanceData._m0[_2836].w + _2703) < 0.5))
        {
            _2916 = true;
            break;
        }
        if ((_2696 + 1.0) < _2694.x)
        {
            _2916 = true;
            break;
        }
        _2916 = false;
        break;
    }
    float _3120;
    if (_2916)
    {
        discard_state = true;
        _3120 = 0.0;
    }
    else
    {
        _3120 = cbInstanceData._m0[_2532].w;
    }
    SV_Target.x = _2700;
    SV_Target.y = _2701;
    SV_Target.z = _2702;
    SV_Target.w = _3120;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2532].w;
    discard_exit();
}


