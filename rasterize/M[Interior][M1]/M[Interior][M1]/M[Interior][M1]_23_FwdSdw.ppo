#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _428;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    vec4 _343 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _347 = _343.z;
    float _351 = (_343.x * 2.0) + (-1.0);
    float _353 = (_343.y * 2.0) + (-1.0);
    float _359 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _366 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _375 = cbMtdParam._m0[23u].x + _263;
    float _376 = cbMtdParam._m0[23u].y + _264;
    float _377 = cbMtdParam._m0[23u].z + _265;
    float _391 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_359 * _192, _359 * _193, _359 * _194));
    float _392 = (-0.0) - dot(vec3(_375, _376, _377), vec3(_366 * _206, _366 * _207, _366 * _208));
    float _393 = (-0.0) - dot(vec3(_375, _376, _377), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _397 * _393;
    float _403 = ((cbMtdParam._m0[19u].w * _391) * _397) + (_351 * cbMtdParam._m0[20u].y);
    float _404 = ((cbMtdParam._m0[20u].x * _392) * _397) + (_353 * cbMtdParam._m0[20u].z);
    float _407 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _408 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _426;
    float _429;
    float _431;
    if (_403 > 0.0)
    {
        float _412 = (1.0 - _407) / _403;
        _426 = _412;
        _429 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_412 * _398)) * 0.16666667163372039794921875;
        _431 = (fract((_412 * _404) + _408) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_403 < 0.0)
        {
            float _427 = ((-0.0) - _407) / _403;
            frontier_phi_3_2_ladder = (fract(_427 * _398) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _427;
            frontier_phi_3_2_ladder_2 = (fract((_427 * _404) + _408) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _428;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _426 = frontier_phi_3_2_ladder_1;
        _429 = frontier_phi_3_2_ladder;
        _431 = frontier_phi_3_2_ladder_2;
    }
    float _457;
    float _459;
    float _461;
    if (_404 > 0.0)
    {
        float _444 = (1.0 - _408) / _404;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_444 < _426)
        {
            frontier_phi_8_5_ladder = (fract(_444 * _398) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_444 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _444;
        }
        else
        {
            frontier_phi_8_5_ladder = _431;
            frontier_phi_8_5_ladder_1 = _429;
            frontier_phi_8_5_ladder_2 = _426;
        }
        _457 = frontier_phi_8_5_ladder_2;
        _459 = frontier_phi_8_5_ladder_1;
        _461 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_404 < 0.0)
        {
            float _458 = ((-0.0) - _408) / _404;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_458 < _426)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_458 * _398) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_458 * _403) + _407) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _458;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _431;
                frontier_phi_8_6_ladder_9_ladder_1 = _429;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _431;
            frontier_phi_8_6_ladder_1 = _429;
            frontier_phi_8_6_ladder_2 = _426;
        }
        _457 = frontier_phi_8_6_ladder_2;
        _459 = frontier_phi_8_6_ladder_1;
        _461 = frontier_phi_8_6_ladder;
    }
    float _465 = (_398 > 0.0) ? (cbMtdParam._m0[16u].w / _398) : 5000.0;
    float _478;
    float _479;
    if (_465 < _457)
    {
        _478 = ((_407 + cbMtdParam._m0[17u].x) + (_465 * _403)) * 0.16666667163372039794921875;
        _479 = (((_465 * _404) + _408) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _478 = _459;
        _479 = _461;
    }
    vec4 _481 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_478, _479));
    float _486 = _481.x * cbMtdParam._m0[13u].x;
    float _487 = _481.y * cbMtdParam._m0[13u].y;
    float _488 = _481.z * cbMtdParam._m0[13u].z;
    vec4 _506 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _508 = _506.x;
    vec4 _520 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _524 = _520.z;
    float _527 = (_520.x * 2.0) + (-1.0);
    float _528 = (_520.y * 2.0) + (-1.0);
    float _529 = dot(vec2(_527, _528), vec2(_527, _528));
    float _3452 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _534 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    float _535 = _524 * _290;
    float _545 = (cbMtdParam._m0[15u].w * ((_347 - _535) + ((_524 - _347) * _290))) + _535;
    float _553 = (cbMtdParam._m0[16u].x * (_351 - (_351 * _290))) + _527;
    float _554 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _290))) + _528;
    float _557 = fma(_534, _199, fma(_554, _206, _553 * _192));
    float _560 = fma(_534, _200, fma(_554, _207, _553 * _193));
    float _563 = fma(_534, _201, fma(_554, _208, _553 * _194));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    float _568 = _567 * _557;
    float _569 = _567 * _560;
    float _570 = _567 * _563;
    float _3463 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _571 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    float _3474 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3485 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3496 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3507 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _575 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _591 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _595 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _596 = _263 * _595;
    float _597 = _264 * _595;
    float _598 = _265 * _595;
    float _604 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _605 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _625 = fma(_570, cbSceneParam._m0[5u].z, fma(_569, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _568));
    float _628 = fma(_570, cbSceneParam._m0[6u].z, fma(_569, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _568));
    float _631 = fma(_570, cbSceneParam._m0[7u].z, fma(_569, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _568));
    uint _644 = uint(roundEven(NORMAL.w)) * 13u;
    uint _645 = _644 + 9u;
    uint _646 = _645 + uint(cbMatDynParam._m0[0u].w);
    float _652 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_646].x;
    float _653 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_646].y;
    float _654 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_646].z;
    float _3518 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _655 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _656 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _657 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _658 = 1.0 - _575;
    float _659 = _655 * _658;
    float _660 = _656 * _658;
    float _661 = _657 * _658;
    float _666 = (_655 + (-0.039999999105930328369140625)) * _575;
    float _667 = (_656 + (-0.039999999105930328369140625)) * _575;
    float _668 = (_657 + (-0.039999999105930328369140625)) * _575;
    float _669 = _666 + 0.039999999105930328369140625;
    float _671 = _667 + 0.039999999105930328369140625;
    float _672 = _668 + 0.039999999105930328369140625;
    vec4 _681 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _604, cbSceneParam._m0[86u].y * _605));
    float _684 = _681.x * TEXCOORD.z;
    float _685 = dot(vec3(_568, _569, _570), vec3(_596, _597, _598));
    float _688 = _685 * 2.0;
    float _692 = (_688 * _568) - _596;
    float _693 = (_688 * _569) - _597;
    float _694 = (_688 * _570) - _598;
    float _698 = abs(dot(vec3(_596, _597, _598), vec3(_568, _569, _570)));
    float _3551 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _700 = sqrt(_571);
    float _713 = exp2((_700 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_700 * 3.0));
    float _719 = (1.0 - _713) * ((_700 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _720 = _713 * _700;
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_756, cbModelParam._m0[26u].z, fma(_752, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _748));
        float _793 = fma(_756, cbModelParam._m0[27u].z, fma(_752, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _748));
        float _797 = fma(_756, cbModelParam._m0[28u].z, fma(_752, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _748));
        float _821 = _748 + _568;
        float _822 = _752 + _569;
        float _823 = _756 + _570;
        float _833 = fma(_823, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _821)) - _789;
        float _834 = fma(_823, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _821)) - _793;
        float _835 = fma(_823, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _821)) - _797;
        float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
        float _852 = ((_839 * _833) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_839 * _834) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_839 * _835) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _864 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _871 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        vec4 _878 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_852, _853, _854), 0.0);
        float _891 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_857.x + (-0.5));
        float _893 = _891 * (_857.y + (-0.5));
        float _894 = _891 * (_857.z + (-0.5));
        float _901 = exp2((_864.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_864.x + (-0.5));
        float _903 = _901 * (_864.y + (-0.5));
        float _904 = _901 * (_864.z + (-0.5));
        float _911 = exp2((_871.w + (-0.5)) * 20.0) * 2.0;
        float _912 = _911 * (_871.x + (-0.5));
        float _913 = _911 * (_871.y + (-0.5));
        float _914 = _911 * (_871.z + (-0.5));
        float _921 = exp2((_878.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_878.x + (-0.5));
        float _923 = _921 * (_878.y + (-0.5));
        float _924 = _921 * (_878.z + (-0.5));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = _892 * 0.5;
        float _929 = _902 * 0.5;
        float _930 = _912 * 0.5;
        float _931 = dot(vec3(_928, _929, _930), vec3(_928, _929, _930));
        float _936 = (_931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_931);
        float _945 = (dot(vec3(_568, _569, _570), vec3(_936 * _928, _936 * _929, _936 * _930)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _955 = sqrt(((_929 * _929) + (_928 * _928)) + (_930 * _930)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3599 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_957 + 1.0))) + _962) * _925;
        float _972 = _893 * 0.5;
        float _973 = _903 * 0.5;
        float _974 = _913 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(_568, _569, _570), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3632 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_999 + 1.0))) + _1004) * _926;
        float _1014 = _894 * 0.5;
        float _1015 = _904 * 0.5;
        float _1016 = _914 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_568, _569, _570), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3665 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1041 + 1.0))) + _1046) * _927;
        _1063 = _894;
        _1064 = _893;
        _1065 = _892;
        _1066 = _904;
        _1067 = _903;
        _1068 = _902;
        _1069 = _914;
        _1070 = _913;
        _1071 = _912;
        _1072 = _927;
        _1073 = _926;
        _1074 = _925;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _428;
        _1064 = _428;
        _1065 = _428;
        _1066 = _428;
        _1067 = _428;
        _1068 = _428;
        _1069 = _428;
        _1070 = _428;
        _1071 = _428;
        _1072 = _428;
        _1073 = _428;
        _1074 = _428;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_756, cbModelParam._m0[30u].z, fma(_752, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _748));
        float _1107 = fma(_756, cbModelParam._m0[31u].z, fma(_752, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _748));
        float _1111 = fma(_756, cbModelParam._m0[32u].z, fma(_752, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _748));
        float _1134 = _748 + _568;
        float _1135 = _752 + _569;
        float _1136 = _756 + _570;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_568, _569, _570), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3728 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_568, _569, _570), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3761 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_568, _569, _570), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3794 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _428;
        _1373 = _428;
        _1374 = _428;
        _1375 = _428;
        _1376 = _428;
        _1377 = _428;
        _1378 = _428;
        _1379 = _428;
        _1380 = _428;
        _1381 = _428;
        _1382 = _428;
        _1383 = _428;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _692 * 0.5;
    float _1441 = _693 * 0.5;
    float _1442 = _694 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _571);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1590;
    float _1592;
    float _1594;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1557 = fma(_756, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748)) + cbModelParam._m0[13u].w;
        float _1561 = fma(_756, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748)) + cbModelParam._m0[14u].w;
        float _1565 = fma(_756, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748)) + cbModelParam._m0[15u].w;
        float _1568 = fma(_694, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _692));
        float _1571 = fma(_694, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _692));
        float _1574 = fma(_694, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _692));
        float _1602;
        if (_1568 > 0.0)
        {
            _1602 = abs((1.0 - _1557) / _1568);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1557 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1602 = frontier_phi_26_24_ladder;
        }
        float _1775;
        if (_1571 > 0.0)
        {
            _1775 = abs((1.0 - _1561) / _1571);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1561 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1775 = frontier_phi_35_31_ladder;
        }
        float _2231;
        if (_1574 > 0.0)
        {
            _2231 = abs((1.0 - _1565) / _1574);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1565 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2231 = frontier_phi_47_42_ladder;
        }
        float _2233 = isnan(_1775) ? _1602 : (isnan(_1602) ? _1775 : min(_1602, _1775));
        float _2234 = isnan(_2231) ? _2233 : (isnan(_2233) ? _2231 : min(_2233, _2231));
        float _2238 = (_2234 * _1568) + _1557;
        float _2239 = (_2234 * _1571) + _1561;
        float _2240 = (_2234 * _1574) + _1565;
        float _2241 = _2234 * 9.9999997473787516355514526367188e-05;
        float _2243 = (-1.0) - _2241;
        float _2245 = _2241 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2240 > _2245) || ((_2240 < _2243) || ((_2239 > _2245) || ((_2239 < _2243) || ((_2238 < _2243) || (_2238 > _2245))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2240, cbModelParam._m0[9u].z, fma(_2239, cbModelParam._m0[9u].y, _2238 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2240, cbModelParam._m0[10u].z, fma(_2239, cbModelParam._m0[10u].y, _2238 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2240, cbModelParam._m0[11u].z, fma(_2239, cbModelParam._m0[11u].y, _2238 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_25_47_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1590 = frontier_phi_25_47_ladder_2;
        _1592 = frontier_phi_25_47_ladder_1;
        _1594 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1578 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_692, _693, _694), _1509);
        _1590 = _1578.x * cbModelParam._m0[1u].y;
        _1592 = _1578.y * cbModelParam._m0[1u].y;
        _1594 = _1578.z * cbModelParam._m0[1u].y;
    }
    float _1598 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _571);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1598 : min(cbModelParam._m0[25u].w, _1598));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1654 = fma(_756, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748)) + cbModelParam._m0[21u].w;
        float _1658 = fma(_756, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748)) + cbModelParam._m0[22u].w;
        float _1662 = fma(_756, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748)) + cbModelParam._m0[23u].w;
        float _1665 = fma(_694, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _692));
        float _1668 = fma(_694, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _692));
        float _1671 = fma(_694, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _692));
        float _1780;
        if (_1665 > 0.0)
        {
            _1780 = abs((1.0 - _1654) / _1665);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1654 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1780 = frontier_phi_37_33_ladder;
        }
        float _2258;
        if (_1668 > 0.0)
        {
            _2258 = abs((1.0 - _1658) / _1668);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1658 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2258 = frontier_phi_49_44_ladder;
        }
        float _2611;
        if (_1671 > 0.0)
        {
            _2611 = abs((1.0 - _1662) / _1671);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1662 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2611 = frontier_phi_61_56_ladder;
        }
        float _2613 = isnan(_2258) ? _1780 : (isnan(_1780) ? _2258 : min(_1780, _2258));
        float _2614 = isnan(_2611) ? _2613 : (isnan(_2613) ? _2611 : min(_2613, _2611));
        float _2618 = (_2614 * _1665) + _1654;
        float _2619 = (_2614 * _1668) + _1658;
        float _2620 = (_2614 * _1671) + _1662;
        float _2621 = _2614 * 9.9999997473787516355514526367188e-05;
        float _2622 = (-1.0) - _2621;
        float _2624 = _2621 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2620 > _2624) || ((_2620 < _2622) || ((_2619 > _2624) || ((_2619 < _2622) || ((_2618 < _2622) || (_2618 > _2624))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2620, cbModelParam._m0[17u].z, fma(_2619, cbModelParam._m0[17u].y, _2618 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2620, cbModelParam._m0[18u].z, fma(_2619, cbModelParam._m0[18u].y, _2618 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2620, cbModelParam._m0[19u].z, fma(_2619, cbModelParam._m0[19u].y, _2618 * cbModelParam._m0[19u].x))), _1599);
            frontier_phi_34_61_ladder = _2741.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2741.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2741.x * cbModelParam._m0[1u].z;
        }
        _1690 = frontier_phi_34_61_ladder_2;
        _1692 = frontier_phi_34_61_ladder_1;
        _1694 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_692, _693, _694), _1599);
        _1690 = _1674.x * cbModelParam._m0[1u].z;
        _1692 = _1674.y * cbModelParam._m0[1u].z;
        _1694 = _1674.z * cbModelParam._m0[1u].z;
    }
    float _1707 = (((_719 * _669) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1690 - _1590)) + _1590);
    float _1709 = (((_719 * _671) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1692 - _1592)) + _1592);
    float _1711 = (((_719 * _672) + _720) * _684) * ((cbModelParam._m0[1u].w * (_1694 - _1594)) + _1594);
    float _1714 = fma(_1711, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1717 = fma(_1711, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1720 = fma(_1711, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1707 * cbSceneParam._m0[91u].x));
    float _1754 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1758 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1762 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1766 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1767 = _1754 / _1766;
    float _1768 = _1758 / _1766;
    float _1769 = _1762 / _1766;
    float _1916;
    float _1917;
    float _1918;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1796 = ((uint(_1769 > cbSceneParam._m0[59u].y) + uint(_1769 > cbSceneParam._m0[59u].x)) + uint(_1769 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1797 = _1796 + 43u;
        uint _1805 = _1796 + 44u;
        uint _1813 = _1796 + 45u;
        uint _1821 = _1796 + 46u;
        float _1832 = fma(_1766, cbSceneParam._m0[_1797].w, fma(_1762, cbSceneParam._m0[_1797].z, fma(_1758, cbSceneParam._m0[_1797].y, _1754 * cbSceneParam._m0[_1797].x)));
        float _1836 = fma(_1766, cbSceneParam._m0[_1805].w, fma(_1762, cbSceneParam._m0[_1805].z, fma(_1758, cbSceneParam._m0[_1805].y, _1754 * cbSceneParam._m0[_1805].x)));
        float _1844 = fma(_1766, cbSceneParam._m0[_1821].w, fma(_1762, cbSceneParam._m0[_1821].z, fma(_1758, cbSceneParam._m0[_1821].y, _1754 * cbSceneParam._m0[_1821].x)));
        float _1849 = cbSceneParam._m0[33u].z * _1844;
        float _1851 = cbSceneParam._m0[33u].w * _1844;
        float _1854 = fma(_1766, cbSceneParam._m0[_1813].w, fma(_1762, cbSceneParam._m0[_1813].z, fma(_1758, cbSceneParam._m0[_1813].y, _1754 * cbSceneParam._m0[_1813].x))) / _1844;
        float _1902 = (cbSceneParam._m0[33u].x - sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769))) * cbSceneParam._m0[33u].y;
        float _3920 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1909 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1849 + _1832) / _1844, (_1851 + _1836) / _1844), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1851 + _1832) / _1844, (_1836 - _1849) / _1844), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 - _1849) / _1844, (_1836 - _1851) / _1844), _1854), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1832 - _1851) / _1844, (_1849 + _1836) / _1844), _1854), 0.0)).x), vec4(0.25)));
        _1916 = 1.0 - (_1909 * cbSceneParam._m0[34u].x);
        _1917 = 1.0 - (_1909 * cbSceneParam._m0[34u].y);
        _1918 = 1.0 - (_1909 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1916 = 1.0;
        _1917 = 1.0;
        _1918 = 1.0;
    }
    float _1982;
    float _1984;
    float _1986;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1970 = fma(_1766, cbSceneParam._m0[63u].w, fma(_1762, cbSceneParam._m0[63u].z, fma(_1758, cbSceneParam._m0[63u].y, _1754 * cbSceneParam._m0[63u].x)));
        float _1971 = fma(_1766, cbSceneParam._m0[60u].w, fma(_1762, cbSceneParam._m0[60u].z, fma(_1758, cbSceneParam._m0[60u].y, _1754 * cbSceneParam._m0[60u].x))) / _1970;
        float _1972 = fma(_1766, cbSceneParam._m0[61u].w, fma(_1762, cbSceneParam._m0[61u].z, fma(_1758, cbSceneParam._m0[61u].y, _1754 * cbSceneParam._m0[61u].x))) / _1970;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1971 >= cbSceneParam._m0[64u].x) && (_1972 >= cbSceneParam._m0[64u].y)) && (_1971 <= cbSceneParam._m0[64u].z)) && (_1972 <= cbSceneParam._m0[64u].w))
        {
            float _2271 = fma(_1766, cbSceneParam._m0[62u].w, fma(_1762, cbSceneParam._m0[62u].z, fma(_1758, cbSceneParam._m0[62u].y, _1754 * cbSceneParam._m0[62u].x))) / _1970;
            float _2275 = isnan(cbSceneParam._m0[41u].w) ? _2271 : (isnan(_2271) ? cbSceneParam._m0[41u].w : max(_2271, cbSceneParam._m0[41u].w));
            float _2318 = (cbSceneParam._m0[33u].x - sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769))) * cbSceneParam._m0[33u].y;
            float _3936 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
            float _2325 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1971, cbSceneParam._m0[33u].w + _1972), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1971, _1972 - cbSceneParam._m0[33u].z), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1971 - cbSceneParam._m0[33u].z, _1972 - cbSceneParam._m0[33u].w), _2275), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1971 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1972), _2275), 0.0)).x), vec4(0.25)));
            float _2329 = 1.0 - (_2325 * cbSceneParam._m0[34u].x);
            float _2330 = 1.0 - (_2325 * cbSceneParam._m0[34u].y);
            float _2331 = 1.0 - (_2325 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2331) ? _1918 : (isnan(_1918) ? _2331 : min(_1918, _2331));
            frontier_phi_46_45_ladder_1 = isnan(_2330) ? _1917 : (isnan(_1917) ? _2330 : min(_1917, _2330));
            frontier_phi_46_45_ladder_2 = isnan(_2329) ? _1916 : (isnan(_1916) ? _2329 : min(_1916, _2329));
        }
        else
        {
            frontier_phi_46_45_ladder = _1918;
            frontier_phi_46_45_ladder_1 = _1917;
            frontier_phi_46_45_ladder_2 = _1916;
        }
        _1982 = frontier_phi_46_45_ladder_2;
        _1984 = frontier_phi_46_45_ladder_1;
        _1986 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1982 = _1916;
        _1984 = _1917;
        _1986 = _1918;
    }
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_644 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _1999 = _684 + (-1.0);
    float _2002 = (cbLight._m0[_1994].x * _1999) + 1.0;
    float _2003 = (cbLight._m0[_1994].y * _1999) + 1.0;
    uint _2004 = _1993 + 5u;
    float _2010 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
    uint _2014 = _1993 + 4u;
    float _2024 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
    uint _2028 = _1993 | 1u;
    float _2039 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_568, _569, _570));
    float _2042 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_568, _569, _570));
    float _3972 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _3983 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2047 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * 0.3183098733425140380859375;
    float _2049 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.3183098733425140380859375;
    float _2056 = ((cbLight._m0[_2004].x * _2010) * _2049) + (((cbLight._m0[_2014].x * _1982) * _2024) * _2047);
    float _2057 = ((_2010 * cbLight._m0[_2004].y) * _2049) + (((cbLight._m0[_2014].y * _1984) * _2024) * _2047);
    float _2058 = ((_2010 * cbLight._m0[_2004].z) * _2049) + (((cbLight._m0[_2014].z * _1986) * _2024) * _2047);
    uint _2060 = _1993 + 8u;
    float _2073 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _571) * 0.949999988079071044921875);
    float _2074 = _2073 * _2073;
    float _2075 = cbLight._m0[_1993].x + _596;
    float _2076 = cbLight._m0[_1993].y + _597;
    float _2077 = cbLight._m0[_1993].z + _598;
    float _2081 = inversesqrt(dot(vec3(_2075, _2076, _2077), vec3(_2075, _2076, _2077)));
    float _2082 = _2081 * _2075;
    float _2083 = _2081 * _2076;
    float _2084 = _2081 * _2077;
    float _2085 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_1993].xyz));
    float _3994 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2088 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _4005 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _2089 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _2090 = dot(vec3(_568, _569, _570), vec3(_2082, _2083, _2084));
    float _4016 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2093 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _2094 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2082, _2083, _2084));
    float _4027 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = _2074 * _2074;
    float _2102 = ((_2093 * _2093) * (_2098 + (-1.0))) + 1.0;
    float _2110 = exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0);
    float _2111 = 0.959999978542327880859375 - _666;
    float _2113 = 0.959999978542327880859375 - _667;
    float _2114 = 0.959999978542327880859375 - _668;
    float _2121 = 1.0 - _2074;
    float _2132 = (0.5 / (((_2089 * ((_2088 * _2121) + _2074)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2121) + _2074) * _2088))) * _2088;
    float _4038 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_2098 / ((_2102 * _2102) * 3.141590118408203125));
    uint _2148 = _1993 + 9u;
    float _2159 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _571) * 0.949999988079071044921875);
    float _2160 = _2159 * _2159;
    float _2161 = cbLight._m0[_2028].x + _596;
    float _2162 = cbLight._m0[_2028].y + _597;
    float _2163 = cbLight._m0[_2028].z + _598;
    float _2167 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
    float _2168 = _2167 * _2161;
    float _2169 = _2167 * _2162;
    float _2170 = _2167 * _2163;
    float _2171 = dot(vec3(_568, _569, _570), vec3(cbLight._m0[_2028].xyz));
    float _4049 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2174 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _2175 = dot(vec3(_568, _569, _570), vec3(_2168, _2169, _2170));
    float _4060 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0));
    float _2178 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2179 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2168, _2169, _2170));
    float _4071 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2183 = _2160 * _2160;
    float _2187 = ((_2178 * _2178) * (_2183 + (-1.0))) + 1.0;
    float _2194 = exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0);
    float _2201 = 1.0 - _2160;
    float _2211 = (0.5 / (((_2089 * ((_2174 * _2201) + _2160)) + 9.9999999392252902907785028219223e-09) + (((_2089 * _2201) + _2160) * _2174))) * _2174;
    float _4082 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2213 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2183 / ((_2187 * _2187) * 3.141590118408203125));
    float _2223 = (((((_2194 * _2111) + _669) * cbLight._m0[_2148].x) * _2213) * _2010) + ((((cbLight._m0[_2060].x * _1982) * ((_2110 * _2111) + _669)) * _2134) * _2024);
    float _2224 = (((((_2194 * _2113) + _671) * cbLight._m0[_2148].y) * _2213) * _2010) + ((((cbLight._m0[_2060].y * _1984) * ((_2110 * _2113) + _671)) * _2134) * _2024);
    float _2225 = (((((_2194 * _2114) + _672) * cbLight._m0[_2148].z) * _2213) * _2010) + ((((cbLight._m0[_2060].z * _1986) * ((_2110 * _2114) + _672)) * _2134) * _2024);
    float _2388;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    float _2398;
    if (_1991.y == 0u)
    {
        uvec4 _2343 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2344 = _2343.x;
        uint _2355 = uint((float(_2343.y) * floor(float(uint(cbSceneParam._m0[85u].y * _605) / _2344))) + floor(float(uint(cbSceneParam._m0[85u].x * _604) / _2344)));
        float _2365 = (log2(_1769 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2366 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        uint _2369 = uint(isnan(14.0) ? _2366 : (isnan(_2366) ? 14.0 : min(_2366, 14.0)));
        uvec4 _2374 = texelFetch(g_lightClusterGridBuffer, int(((_2369 << 2u) + (_2355 << 6u)) >> 2u));
        uint _2375 = _2374.x;
        uint _2376 = _2343.z;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        float _2509;
        if (((((1u << ((_2376 >> 4u) & 15u)) + 4294967295u) & _2375) == 0u) || ((_2376 & 240u) == 0u))
        {
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
            _2505 = 0.0;
            _2507 = 0.0;
            _2509 = 0.0;
        }
        else
        {
            float _2500;
            float _2502;
            float _2504;
            float _2506;
            float _2508;
            float _2510;
            float _2669 = 0.0;
            float _2670 = 0.0;
            float _2671 = 0.0;
            float _2672 = 0.0;
            float _2673 = 0.0;
            float _2674 = 0.0;
            uint _2675 = 0u;
            uint _2684;
            bool _2685;
            for (;;)
            {
                _2684 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2675 << 2u)) >> 2u)).x;
                _2685 = _2684 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2685)
                {
                    frontier_phi_70_pred = _2672;
                    frontier_phi_70_pred_1 = _2674;
                    frontier_phi_70_pred_2 = _2673;
                    frontier_phi_70_pred_3 = _2671;
                    frontier_phi_70_pred_4 = _2670;
                    frontier_phi_70_pred_5 = _2669;
                }
                else
                {
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    uint _2820;
                    _2814 = _2669;
                    _2815 = _2670;
                    _2816 = _2671;
                    _2817 = _2672;
                    _2818 = _2673;
                    _2819 = _2674;
                    _2820 = _2684;
                    float _2746;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    for (;;)
                    {
                        uint _2824 = uint(findLSB(_2820)) + (_2675 << 5u);
                        uint _2821 = (_2820 + 4294967295u) & _2820;
                        uint _2826 = _2824 * 48u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2826)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2826 + 3u)).x));
                        uint _2846 = (_2824 * 48u) + 4u;
                        vec4 _2859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2865 = (_2824 * 48u) + 8u;
                        vec3 _2876 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2865)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2865 + 2u)).x));
                        float _2880 = _2840.x - _1767;
                        float _2881 = _2840.y - _1768;
                        float _2882 = _2840.z - _1769;
                        float _2883 = dot(vec3(_2880, _2881, _2882), vec3(_2880, _2881, _2882));
                        float _2886 = inversesqrt(_2883);
                        float _2887 = _2886 * _2880;
                        float _2888 = _2886 * _2881;
                        float _2889 = _2886 * _2882;
                        float _2890 = dot(vec3(_625, _628, _631), vec3(_2887, _2888, _2889));
                        float _2895 = 1.0 - (_2883 * _2840.w);
                        float _4103 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                        float _2897 = sqrt(_2883) * _2859.w;
                        float _2900 = 1.39999997615814208984375 / (_2897 + 1.39999997615814208984375);
                        float _2901 = _2900 * _2900;
                        float _2904 = ((1.0 - _2901) * _2890) + _2901;
                        float _2907 = _2897 * _2897;
                        float _2911 = ((isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0))) * _2896) / ((_2907 * 0.699999988079071044921875) + 1.0);
                        float _2915 = (-0.0) - _1767;
                        float _2916 = (-0.0) - _1768;
                        float _2917 = (-0.0) - _1769;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2931 = exp2(log2(1.0 / ((_2907 * 3.5) + 5.0)) * 0.25);
                        float _2932 = 1.0 - _700;
                        float _2939 = sqrt(1.0 - ((1.0 - (_2932 * _2932)) * (1.0 - (_2931 * _2931))));
                        float _2940 = _2939 * _2939;
                        float _2941 = _2940 * _2940;
                        float _2942 = _2922 + _2887;
                        float _2943 = _2923 + _2888;
                        float _2944 = _2924 + _2889;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2952 = dot(vec3(_625, _628, _631), vec3(_2922, _2923, _2924));
                        float _4119 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
                        float _2956 = dot(vec3(_625, _628, _631), vec3(_2948 * _2942, _2948 * _2943, _2948 * _2944));
                        float _4130 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                        float _2959 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
                        float _2963 = ((_2959 * _2959) * (_2941 + (-1.0))) + 1.0;
                        float _2964 = _2900 * _2940;
                        float _2965 = _2964 * _2964;
                        float _2968 = ((1.0 - _2965) * _2890) + _2965;
                        float _4141 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
                        float _2970 = 1.0 - _2940;
                        float _2980 = (0.5 / (((_2969 * ((_2955 * _2970) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2969 * _2970) + _2940) * _2955))) * _2969;
                        float _4152 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2991 = (((_2941 * 3.1415927410125732421875) * (isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0)))) / ((_2963 * _2963) * ((_2907 * 2.1991131305694580078125) + 3.141590118408203125))) * _2896;
                        _2749 = (_2911 * _2859.x) + _2817;
                        _2750 = (_2911 * _2859.y) + _2818;
                        _2751 = (_2911 * _2859.z) + _2819;
                        _2746 = (_2991 * _2876.x) + _2814;
                        _2747 = (_2991 * _2876.y) + _2815;
                        _2748 = (_2991 * _2876.z) + _2816;
                        if (_2821 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2821;
                        }
                    }
                    frontier_phi_70_pred = _2749;
                    frontier_phi_70_pred_1 = _2751;
                    frontier_phi_70_pred_2 = _2750;
                    frontier_phi_70_pred_3 = _2748;
                    frontier_phi_70_pred_4 = _2747;
                    frontier_phi_70_pred_5 = _2746;
                }
                _2506 = frontier_phi_70_pred;
                _2510 = frontier_phi_70_pred_1;
                _2508 = frontier_phi_70_pred_2;
                _2504 = frontier_phi_70_pred_3;
                _2502 = frontier_phi_70_pred_4;
                _2500 = frontier_phi_70_pred_5;
                uint _2676 = _2675 + 1u;
                if (_2676 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2669 = _2500;
                    _2670 = _2502;
                    _2671 = _2504;
                    _2672 = _2506;
                    _2673 = _2508;
                    _2674 = _2510;
                    _2675 = _2676;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
            _2505 = _2506;
            _2507 = _2508;
            _2509 = _2510;
        }
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.z;
        uint _2516 = (_2514 >> 8u) & 15u;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        float _2647;
        if (((4294967295u << _2516) & _2375) == 0u)
        {
            _2637 = _2499;
            _2639 = _2501;
            _2641 = _2503;
            _2643 = _2505;
            _2645 = _2507;
            _2647 = _2509;
        }
        else
        {
            float _2662 = inversesqrt(dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769)));
            float _2663 = _2662 * _1767;
            float _2664 = _2662 * _1768;
            float _2665 = _2662 * _1769;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2516 < ((_2514 >> 12u) & 15u))
            {
                float _2638;
                float _2640;
                float _2642;
                float _2644;
                float _2646;
                float _2648;
                float _2797 = _2499;
                float _2798 = _2501;
                float _2799 = _2503;
                float _2800 = _2505;
                float _2801 = _2507;
                float _2802 = _2509;
                uint _2803 = _2516;
                uint _2812;
                bool _2813;
                for (;;)
                {
                    _2812 = texelFetch(g_lightClassification, int((((_2369 << 5u) + (_2355 << 9u)) + (_2803 << 2u)) >> 2u)).x;
                    _2813 = _2812 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2813)
                    {
                        frontier_phi_76_pred = _2802;
                        frontier_phi_76_pred_1 = _2801;
                        frontier_phi_76_pred_2 = _2800;
                        frontier_phi_76_pred_3 = _2799;
                        frontier_phi_76_pred_4 = _2798;
                        frontier_phi_76_pred_5 = _2797;
                    }
                    else
                    {
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3009 = _2797;
                        float _3010 = _2798;
                        float _3011 = _2799;
                        float _3012 = _2800;
                        float _3013 = _2801;
                        float _3014 = _2802;
                        uint _3015 = _2812;
                        uint _3016;
                        vec4 _3041;
                        float _3042;
                        vec4 _3057;
                        vec3 _3069;
                        vec4 _3084;
                        vec4 _3099;
                        float _3145;
                        bool _3146;
                        for (;;)
                        {
                            uint _3026 = ((_2803 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3015));
                            _3016 = (_3015 + 4294967295u) & _3015;
                            uint _3028 = _3026 * 40u;
                            _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3042 = _3041.w;
                            uint _3044 = (_3026 * 40u) + 4u;
                            _3057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3044 + 3u)).x));
                            uint _3059 = (_3026 * 40u) + 8u;
                            _3069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3059 + 2u)).x));
                            uint _3071 = (_3026 * 40u) + 16u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3026 * 40u) + 20u;
                            _3099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 3u)).x));
                            uint _3101 = (_3026 * 40u) + 24u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3120 = (_3026 * 40u) + 28u;
                            vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            _3145 = fma(_1769, _3133.z, fma(_1768, _3133.y, _3133.x * _1767)) + _3133.w;
                            _3146 = !((fma(_1769, _3114.z, fma(_1768, _3114.y, _3114.x * _1767)) + _3114.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3146)
                            {
                                float _3173 = _3041.x - _1767;
                                float _3174 = _3041.y - _1768;
                                float _3175 = _3041.z - _1769;
                                float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                                float _3179 = inversesqrt(_3176);
                                float _3180 = _3179 * _3173;
                                float _3181 = _3179 * _3174;
                                float _3182 = _3179 * _3175;
                                float _3186 = 1.0 - (_3176 / (_3042 * _3042));
                                float _4163 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0));
                                float _3187 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                                float _3191 = sqrt(_3176) * _3057.w;
                                float _3193 = 1.39999997615814208984375 / (_3191 + 1.39999997615814208984375);
                                float _3194 = _3193 * _3193;
                                float _3197 = ((1.0 - _3194) * dot(vec3(_3180, _3181, _3182), vec3(_625, _628, _631))) + _3194;
                                float _3200 = _3191 * _3191;
                                float _3204 = (fma(_1769, _3084.z, fma(_1768, _3084.y, _3084.x * _1767)) + _3084.w) / _3145;
                                float _3205 = (fma(_1769, _3099.z, fma(_1768, _3099.y, _3099.x * _1767)) + _3099.w) / _3145;
                                float _3209 = 1.0 - dot(vec2(_3204, _3205), vec2(_3204, _3205));
                                float _4179 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3210 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                                float _3211 = _3210 * (((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3187) / ((_3200 * 0.699999988079071044921875) + 1.0));
                                float _3223 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                                float _3224 = 1.0 - _700;
                                float _3231 = sqrt(1.0 - ((1.0 - (_3224 * _3224)) * (1.0 - (_3223 * _3223))));
                                float _3232 = _3231 * _3231;
                                float _3233 = _3232 * _3232;
                                float _3234 = _3180 - _2663;
                                float _3235 = _3181 - _2664;
                                float _3236 = _3182 - _2665;
                                float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                                float _3244 = dot(vec3(_625, _628, _631), vec3((-0.0) - _2663, (-0.0) - _2664, (-0.0) - _2665));
                                float _4190 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3247 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                                float _3248 = dot(vec3(_625, _628, _631), vec3(_3240 * _3234, _3240 * _3235, _3240 * _3236));
                                float _4201 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                                float _3255 = ((_3251 * _3251) * (_3233 + (-1.0))) + 1.0;
                                float _3256 = _3193 * _3232;
                                float _3257 = _3256 * _3256;
                                float _3263 = ((1.0 - _3257) * dot(vec3(_625, _628, _631), vec3(_3180, _3181, _3182))) + _3257;
                                float _4212 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3264 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3265 = 1.0 - _3232;
                                float _3275 = (0.5 / (((_3264 * ((_3247 * _3265) + _3232)) + 9.9999999392252902907785028219223e-09) + (((_3264 * _3265) + _3232) * _3247))) * _3264;
                                float _4223 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3285 = (_3210 * _3187) * (((_3233 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_3255 * _3255) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3211 * _3057.z;
                                frontier_phi_82_pred_1 = _3211 * _3057.y;
                                frontier_phi_82_pred_2 = _3211 * _3057.x;
                                frontier_phi_82_pred_3 = _3285 * _3069.z;
                                frontier_phi_82_pred_4 = _3285 * _3069.y;
                                frontier_phi_82_pred_5 = _3285 * _3069.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3294 = frontier_phi_82_pred;
                            _3293 = frontier_phi_82_pred_1;
                            _3292 = frontier_phi_82_pred_2;
                            _3291 = frontier_phi_82_pred_3;
                            _3290 = frontier_phi_82_pred_4;
                            _3289 = frontier_phi_82_pred_5;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _3001 = _3294 + _3014;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            _2998 = _3291 + _3011;
                            if (_3016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3016;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3001;
                        frontier_phi_76_pred_1 = _3000;
                        frontier_phi_76_pred_2 = _2999;
                        frontier_phi_76_pred_3 = _2998;
                        frontier_phi_76_pred_4 = _2997;
                        frontier_phi_76_pred_5 = _2996;
                    }
                    _2648 = frontier_phi_76_pred;
                    _2646 = frontier_phi_76_pred_1;
                    _2644 = frontier_phi_76_pred_2;
                    _2642 = frontier_phi_76_pred_3;
                    _2640 = frontier_phi_76_pred_4;
                    _2638 = frontier_phi_76_pred_5;
                    uint _2804 = _2803 + 1u;
                    if (_2804 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2797 = _2638;
                        _2798 = _2640;
                        _2799 = _2642;
                        _2800 = _2644;
                        _2801 = _2646;
                        _2802 = _2648;
                        _2803 = _2804;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2646;
                frontier_phi_63_64_ladder_1 = _2648;
                frontier_phi_63_64_ladder_2 = _2644;
                frontier_phi_63_64_ladder_3 = _2642;
                frontier_phi_63_64_ladder_4 = _2640;
                frontier_phi_63_64_ladder_5 = _2638;
            }
            else
            {
                frontier_phi_63_64_ladder = _2507;
                frontier_phi_63_64_ladder_1 = _2509;
                frontier_phi_63_64_ladder_2 = _2505;
                frontier_phi_63_64_ladder_3 = _2503;
                frontier_phi_63_64_ladder_4 = _2501;
                frontier_phi_63_64_ladder_5 = _2499;
            }
            _2637 = frontier_phi_63_64_ladder_5;
            _2639 = frontier_phi_63_64_ladder_4;
            _2641 = frontier_phi_63_64_ladder_3;
            _2643 = frontier_phi_63_64_ladder_2;
            _2645 = frontier_phi_63_64_ladder;
            _2647 = frontier_phi_63_64_ladder_1;
        }
        float _2652 = isnan(1.0) ? _684 : (isnan(_684) ? 1.0 : min(_684, 1.0));
        _2388 = (_2652 * _2643) + _2056;
        _2390 = (_2652 * _2645) + _2057;
        _2392 = (_2652 * _2647) + _2058;
        _2394 = ((_2637 * _669) * _2652) + _2223;
        _2396 = ((_2639 * _671) * _2652) + _2224;
        _2398 = ((_2641 * _672) * _2652) + _2225;
    }
    else
    {
        _2388 = _2056;
        _2390 = _2057;
        _2392 = _2058;
        _2394 = _2223;
        _2396 = _2224;
        _2398 = _2225;
    }
    uint _2404 = _645 + uint(cbMatDynParam._m0[0u].w);
    float _4239 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4250 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _4261 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _2429 = (((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_2388 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _684))) + ((_2394 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2404].x * (_486 - (_486 * _290)));
    float _2431 = ((cbInstanceData._m0[_2404].y * (_487 - (_487 * _290))) + ((_2396 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_2390 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _684)));
    float _2433 = ((cbInstanceData._m0[_2404].z * (_488 - (_488 * _290))) + ((_2398 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1498)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * (_2392 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _684)));
    uint _2437 = _644 + 6u;
    float _2445 = _604 / cbSceneParam._m0[86u].x;
    float _2446 = _605 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _591 : (isnan(_591) ? cbSceneParam._m0[77u].w : min(_591, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2561;
    float _2563;
    float _2565;
    float _2567;
    if (_591 > cbSceneParam._m0[78u].w)
    {
        float _2524 = isnan(_591) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _591 : min(cbSceneParam._m0[80u].w, _591));
        float _2525 = _2524 / _591;
        float _2536 = _2525 * _263;
        float _2537 = _264 * _2525;
        float _2538 = (-0.0) - _2537;
        float _2539 = _2525 * _265;
        float _2541 = (cbSceneParam._m0[77u].w * _2538) / _2524;
        float _2542 = _2541 + cbSceneParam._m0[79u].w;
        float _2543 = cbSceneParam._m0[79u].w - _2537;
        float _2549 = sqrt(((_2536 * _2536) + (_2537 * _2537)) + (_2539 * _2539));
        float _2552 = (1.0 - (cbSceneParam._m0[77u].w / _2524)) * _2549;
        float _2557 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2559 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2759;
        if (abs((_2538 - _2541) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2759 = ((((_2542 > 0.0) ? exp2(_2557 * _2542) : (2.0 - exp2(_2559 * _2542))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2552;
        }
        else
        {
            float _2698 = 1.0 / cbSceneParam._m0[80u].x;
            float _2699 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : max(_2542, _2543));
            float _2700 = isnan(_2543) ? _2542 : (isnan(_2542) ? _2543 : min(_2542, _2543));
            float _2709 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : min(_2699, 0.0));
            float _2710 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : min(_2700, 0.0));
            _2759 = ((abs(_2549 / _2538) * cbSceneParam._m0[80u].y) * ((((_2709 - _2710) * 2.0) - ((exp2(_2557 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)))) - exp2(_2557 * (isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))))) * _2698)) - ((exp2(_2559 * _2709) - exp2(_2559 * _2710)) * _2698))) + (_2552 * cbSceneParam._m0[80u].z);
        }
        vec4 _2761 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2770 = exp2((_2759 * (-1.44269502162933349609375)) * (1.0 - _2761.w));
        float _2771 = log2(_2770);
        float _2787 = log2(_2465);
        _2561 = (exp2(_2787 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].x)) * _2761.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2563 = (exp2(_2787 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].y)) * _2761.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2565 = (exp2(_2787 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2771 * cbSceneParam._m0[78u].z)) * _2761.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2567 = _2770 * _2465;
    }
    else
    {
        _2561 = _2462;
        _2563 = _2463;
        _2565 = _2464;
        _2567 = _2465;
    }
    float _2579 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2580 = _2579 == 3.0;
    float _2581 = log2(_2567);
    float _2588 = exp2(_2581 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0)));
    float _2589 = exp2(_2581 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0)));
    float _2590 = exp2(_2581 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0)));
    float _2599 = (_2579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2599 * (_2580 ? _2588 : (_2588 + (cbSceneParam._m0[72u].w * _2561)));
    SV_Target.y = _2599 * (_2580 ? _2589 : (_2589 + (cbSceneParam._m0[72u].w * _2563)));
    SV_Target.z = _2599 * (_2580 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.w = cbInstanceData._m0[_2437].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2437].w;
}


