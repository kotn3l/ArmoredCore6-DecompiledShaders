#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Interior_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 6) uniform texture2D M_Interior_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _430;
float _3290;
float _3291;
float _3292;
float _3293;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _292 = _286.w;
    float _305 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _292) + cbMtdParam._m0[11u].x) * _286.x;
    float _307 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _292) + cbMtdParam._m0[11u].y) * _286.y;
    float _309 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _292) + cbMtdParam._m0[11u].z) * _286.z;
    vec4 _345 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _349 = _345.z;
    float _353 = (_345.x * 2.0) + (-1.0);
    float _355 = (_345.y * 2.0) + (-1.0);
    float _361 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _368 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _377 = cbMtdParam._m0[23u].x + _265;
    float _378 = cbMtdParam._m0[23u].y + _266;
    float _379 = cbMtdParam._m0[23u].z + _267;
    float _393 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_361 * _194, _361 * _195, _361 * _196));
    float _394 = (-0.0) - dot(vec3(_377, _378, _379), vec3(_368 * _208, _368 * _209, _368 * _210));
    float _395 = (-0.0) - dot(vec3(_377, _378, _379), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _399 * _395;
    float _405 = ((cbMtdParam._m0[19u].w * _393) * _399) + (_353 * cbMtdParam._m0[20u].y);
    float _406 = ((cbMtdParam._m0[20u].x * _394) * _399) + (_355 * cbMtdParam._m0[20u].z);
    float _409 = fract(cbMtdParam._m0[19u].w * TEXCOORD.x);
    float _410 = fract(cbMtdParam._m0[20u].x * TEXCOORD.y);
    float _428;
    float _431;
    float _433;
    if (_405 > 0.0)
    {
        float _414 = (1.0 - _409) / _405;
        _428 = _414;
        _431 = ((cbMtdParam._m0[17u].x + 1.0) - fract(_414 * _400)) * 0.16666667163372039794921875;
        _433 = (fract((_414 * _406) + _410) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_405 < 0.0)
        {
            float _429 = ((-0.0) - _409) / _405;
            frontier_phi_3_2_ladder = _429;
            frontier_phi_3_2_ladder_1 = (fract((_429 * _406) + _410) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_429 * _400) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _430;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _428 = frontier_phi_3_2_ladder;
        _431 = frontier_phi_3_2_ladder_2;
        _433 = frontier_phi_3_2_ladder_1;
    }
    float _459;
    float _461;
    float _463;
    if (_406 > 0.0)
    {
        float _446 = (1.0 - _410) / _406;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_446 < _428)
        {
            frontier_phi_8_5_ladder = (fract(_446 * _400) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_446 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _446;
        }
        else
        {
            frontier_phi_8_5_ladder = _433;
            frontier_phi_8_5_ladder_1 = _431;
            frontier_phi_8_5_ladder_2 = _428;
        }
        _459 = frontier_phi_8_5_ladder_2;
        _461 = frontier_phi_8_5_ladder_1;
        _463 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_406 < 0.0)
        {
            float _460 = ((-0.0) - _410) / _406;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_460 < _428)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_460 * _400) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_460 * _405) + _409) + cbMtdParam._m0[17u].x) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _460;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _433;
                frontier_phi_8_6_ladder_9_ladder_1 = _431;
                frontier_phi_8_6_ladder_9_ladder_2 = _428;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _433;
            frontier_phi_8_6_ladder_1 = _431;
            frontier_phi_8_6_ladder_2 = _428;
        }
        _459 = frontier_phi_8_6_ladder_2;
        _461 = frontier_phi_8_6_ladder_1;
        _463 = frontier_phi_8_6_ladder;
    }
    float _467 = (_400 > 0.0) ? (cbMtdParam._m0[16u].w / _400) : 5000.0;
    float _480;
    float _481;
    if (_467 < _459)
    {
        _480 = ((_409 + cbMtdParam._m0[17u].x) + (_467 * _405)) * 0.16666667163372039794921875;
        _481 = (((_467 * _406) + _410) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _480 = _461;
        _481 = _463;
    }
    vec4 _483 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_480, _481));
    float _488 = _483.x * cbMtdParam._m0[13u].x;
    float _489 = _483.y * cbMtdParam._m0[13u].y;
    float _490 = _483.z * cbMtdParam._m0[13u].z;
    vec4 _508 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _510 = _508.x;
    vec4 _522 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _526 = _522.z;
    float _529 = (_522.x * 2.0) + (-1.0);
    float _530 = (_522.y * 2.0) + (-1.0);
    float _531 = dot(vec2(_529, _530), vec2(_529, _530));
    float _3302 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _536 = sqrt(1.0 - (isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0))));
    float _537 = _526 * _292;
    float _547 = (cbMtdParam._m0[15u].w * ((_349 - _537) + ((_526 - _349) * _292))) + _537;
    float _555 = (cbMtdParam._m0[16u].x * (_353 - (_353 * _292))) + _529;
    float _556 = (cbMtdParam._m0[16u].x * (_355 - (_355 * _292))) + _530;
    float _559 = fma(_536, _201, fma(_556, _208, _555 * _194));
    float _562 = fma(_536, _202, fma(_556, _209, _555 * _195));
    float _565 = fma(_536, _203, fma(_556, _210, _555 * _196));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3313 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _573 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3335 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3346 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _3357 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _577 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _597 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _598 = _265 * _597;
    float _599 = _266 * _597;
    float _600 = _267 * _597;
    vec4 _605 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _607 = _605.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _787 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _793 = (cbMatDynParam._m0[5u].x * _787) + cbMatDynParam._m0[5u].y;
        float _3368 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _798 = (cbMatDynParam._m0[5u].z * _787) + cbMatDynParam._m0[5u].w;
        float _3379 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) - _794)) + _794) < ((_607 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _625 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _626 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _645 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _648 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _651 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _664 = uint(roundEven(NORMAL.w)) * 13u;
    uint _665 = _664 + 9u;
    uint _666 = _665 + uint(cbMatDynParam._m0[0u].w);
    float _672 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0)))) * cbInstanceData._m0[_666].x;
    float _673 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * cbInstanceData._m0[_666].y;
    float _674 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0)))) * cbInstanceData._m0[_666].z;
    float _3390 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _3401 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    float _3412 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    float _678 = 1.0 - _577;
    float _679 = _675 * _678;
    float _680 = _676 * _678;
    float _681 = _677 * _678;
    float _686 = (_675 + (-0.039999999105930328369140625)) * _577;
    float _687 = (_676 + (-0.039999999105930328369140625)) * _577;
    float _688 = (_677 + (-0.039999999105930328369140625)) * _577;
    float _689 = _686 + 0.039999999105930328369140625;
    float _691 = _687 + 0.039999999105930328369140625;
    float _692 = _688 + 0.039999999105930328369140625;
    vec4 _701 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _625, cbSceneParam._m0[86u].y * _626));
    float _704 = _701.x * TEXCOORD.z;
    float _705 = dot(vec3(_570, _571, _572), vec3(_598, _599, _600));
    float _708 = _705 * 2.0;
    float _712 = (_708 * _570) - _598;
    float _713 = (_708 * _571) - _599;
    float _714 = (_708 * _572) - _600;
    float _718 = abs(dot(vec3(_598, _599, _600), vec3(_570, _571, _572)));
    float _3423 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _720 = sqrt(_573);
    float _733 = exp2((_720 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_720 * 3.0));
    float _739 = (1.0 - _733) * ((_720 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _740 = _733 * _720;
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _832 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _836 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _840 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _864 = _768 + _570;
        float _865 = _772 + _571;
        float _866 = _776 + _572;
        float _876 = fma(_866, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _864)) - _832;
        float _877 = fma(_866, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _864)) - _836;
        float _878 = fma(_866, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _864)) - _840;
        float _882 = inversesqrt(dot(vec3(_876, _877, _878), vec3(_876, _877, _878)));
        float _895 = ((_882 * _876) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_832 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_882 * _877) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_836 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_882 * _878) / cbModelParam._m0[34u].z) + ((((((_840 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _900 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_895, _896, _897), 0.0);
        float _934 = exp2((_900.w + (-0.5)) * 20.0) * 2.0;
        float _935 = _934 * (_900.x + (-0.5));
        float _936 = _934 * (_900.y + (-0.5));
        float _937 = _934 * (_900.z + (-0.5));
        float _944 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _945 = _944 * (_907.x + (-0.5));
        float _946 = _944 * (_907.y + (-0.5));
        float _947 = _944 * (_907.z + (-0.5));
        float _954 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_914.x + (-0.5));
        float _956 = _954 * (_914.y + (-0.5));
        float _957 = _954 * (_914.z + (-0.5));
        float _964 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_921.x + (-0.5));
        float _966 = _964 * (_921.y + (-0.5));
        float _967 = _964 * (_921.z + (-0.5));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = _935 * 0.5;
        float _972 = _945 * 0.5;
        float _973 = _955 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _988 = (dot(vec3(_570, _571, _572), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3449 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _998 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3460 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3471 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * (_1000 + 1.0))) + _1005) * _968;
        float _1015 = _936 * 0.5;
        float _1016 = _946 * 0.5;
        float _1017 = _956 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_570, _571, _572), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3504 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_1042 + 1.0))) + _1047) * _969;
        float _1057 = _937 * 0.5;
        float _1058 = _947 * 0.5;
        float _1059 = _957 * 0.5;
        float _1060 = dot(vec3(_1057, _1058, _1059), vec3(_1057, _1058, _1059));
        float _1065 = (_1060 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1060);
        float _1073 = (dot(vec3(_570, _571, _572), vec3(_1065 * _1057, _1065 * _1058, _1065 * _1059)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1082 = sqrt(((_1058 * _1058) + (_1057 * _1057)) + (_1059 * _1059)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1084 = _1083 * 2.0;
        float _1088 = (1.0 - _1083) / (_1083 + 1.0);
        float _3537 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1098 = ((((1.0 - _1089) * (_1084 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1084 + 1.0))) + _1089) * _970;
        _1106 = _937;
        _1107 = _936;
        _1108 = _935;
        _1109 = _947;
        _1110 = _946;
        _1111 = _945;
        _1112 = _957;
        _1113 = _956;
        _1114 = _955;
        _1115 = _970;
        _1116 = _969;
        _1117 = _968;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0)));
    }
    else
    {
        _1106 = _430;
        _1107 = _430;
        _1108 = _430;
        _1109 = _430;
        _1110 = _430;
        _1111 = _430;
        _1112 = _430;
        _1113 = _430;
        _1114 = _430;
        _1115 = _430;
        _1116 = _430;
        _1117 = _430;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1153 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1157 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1180 = _768 + _570;
        float _1181 = _772 + _571;
        float _1182 = _776 + _572;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_570, _571, _572), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3578 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3589 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3600 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_570, _571, _572), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3633 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_570, _571, _572), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3666 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _430;
        _1419 = _430;
        _1420 = _430;
        _1421 = _430;
        _1422 = _430;
        _1423 = _430;
        _1424 = _430;
        _1425 = _430;
        _1426 = _430;
        _1427 = _430;
        _1428 = _430;
        _1429 = _430;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1119)) + _1119;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _712 * 0.5;
    float _1487 = _713 * 0.5;
    float _1488 = _714 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1106, _1109, _1112, _1115));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1603 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1607 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1611 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1614 = fma(_714, cbModelParam._m0[13u].z, fma(_713, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _712));
        float _1617 = fma(_714, cbModelParam._m0[14u].z, fma(_713, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _712));
        float _1620 = fma(_714, cbModelParam._m0[15u].z, fma(_713, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _712));
        float _1648;
        if (_1614 > 0.0)
        {
            _1648 = abs((1.0 - _1603) / _1614);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1603 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1648 = frontier_phi_29_27_ladder;
        }
        float _2034;
        if (_1617 > 0.0)
        {
            _2034 = abs((1.0 - _1607) / _1617);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1607 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2034 = frontier_phi_38_34_ladder;
        }
        float _2358;
        if (_1620 > 0.0)
        {
            _2358 = abs((1.0 - _1611) / _1620);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1611 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2358 = frontier_phi_52_45_ladder;
        }
        float _2360 = isnan(_2034) ? _1648 : (isnan(_1648) ? _2034 : min(_1648, _2034));
        float _2361 = isnan(_2358) ? _2360 : (isnan(_2360) ? _2358 : min(_2360, _2358));
        float _2365 = (_2361 * _1614) + _1603;
        float _2366 = (_2361 * _1617) + _1607;
        float _2367 = (_2361 * _1620) + _1611;
        float _2368 = _2361 * 9.9999997473787516355514526367188e-05;
        float _2369 = (-1.0) - _2368;
        float _2371 = _2368 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2367 > _2371) || ((_2367 < _2369) || ((_2366 > _2371) || ((_2366 < _2369) || ((_2365 < _2369) || (_2365 > _2371))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2367, cbModelParam._m0[9u].z, fma(_2366, cbModelParam._m0[9u].y, _2365 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2367, cbModelParam._m0[10u].z, fma(_2366, cbModelParam._m0[10u].y, _2365 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2367, cbModelParam._m0[11u].z, fma(_2366, cbModelParam._m0[11u].y, _2365 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_28_52_ladder = _2509.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2509.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2509.x * cbModelParam._m0[1u].y;
        }
        _1636 = frontier_phi_28_52_ladder_2;
        _1638 = frontier_phi_28_52_ladder_1;
        _1640 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1624 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_712, _713, _714), _1555);
        _1636 = _1624.x * cbModelParam._m0[1u].y;
        _1638 = _1624.y * cbModelParam._m0[1u].y;
        _1640 = _1624.z * cbModelParam._m0[1u].y;
    }
    float _1644 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1645 = isnan(_1644) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1644 : min(cbModelParam._m0[25u].w, _1644));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1700 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1704 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1708 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1711 = fma(_714, cbModelParam._m0[21u].z, fma(_713, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _712));
        float _1714 = fma(_714, cbModelParam._m0[22u].z, fma(_713, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _712));
        float _1717 = fma(_714, cbModelParam._m0[23u].z, fma(_713, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _712));
        float _2039;
        if (_1711 > 0.0)
        {
            _2039 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2039 = frontier_phi_40_36_ladder;
        }
        float _2384;
        if (_1714 > 0.0)
        {
            _2384 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2384 = frontier_phi_54_47_ladder;
        }
        float _2574;
        if (_1717 > 0.0)
        {
            _2574 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2574 = frontier_phi_72_65_ladder;
        }
        float _2576 = isnan(_2384) ? _2039 : (isnan(_2039) ? _2384 : min(_2039, _2384));
        float _2577 = isnan(_2574) ? _2576 : (isnan(_2576) ? _2574 : min(_2576, _2574));
        float _2581 = (_2577 * _1711) + _1700;
        float _2582 = (_2577 * _1714) + _1704;
        float _2583 = (_2577 * _1717) + _1708;
        float _2584 = _2577 * 9.9999997473787516355514526367188e-05;
        float _2585 = (-1.0) - _2584;
        float _2587 = _2584 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2583 > _2587) || ((_2583 < _2585) || ((_2582 > _2587) || ((_2582 < _2585) || ((_2581 < _2585) || (_2581 > _2587))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2825 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2583, cbModelParam._m0[17u].z, fma(_2582, cbModelParam._m0[17u].y, _2581 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2583, cbModelParam._m0[18u].z, fma(_2582, cbModelParam._m0[18u].y, _2581 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2583, cbModelParam._m0[19u].z, fma(_2582, cbModelParam._m0[19u].y, _2581 * cbModelParam._m0[19u].x))), _1645);
            frontier_phi_37_72_ladder = _2825.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2825.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2825.x * cbModelParam._m0[1u].z;
        }
        _1736 = frontier_phi_37_72_ladder_2;
        _1738 = frontier_phi_37_72_ladder_1;
        _1740 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_712, _713, _714), _1645);
        _1736 = _1720.x * cbModelParam._m0[1u].z;
        _1738 = _1720.y * cbModelParam._m0[1u].z;
        _1740 = _1720.z * cbModelParam._m0[1u].z;
    }
    float _1753 = (((_739 * _689) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1755 = (((_739 * _691) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1738 - _1638)) + _1638);
    float _1757 = (((_739 * _692) + _740) * _704) * ((cbModelParam._m0[1u].w * (_1740 - _1640)) + _1640);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, _1753 * cbSceneParam._m0[91u].x));
    vec4 _1774 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_625, _626));
    float _1776 = _1774.w;
    float _1788 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1776);
    float _1789 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1776);
    float _1790 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1776);
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_664 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1802 = _704 + (-1.0);
    float _1805 = (cbLight._m0[_1797].x * _1802) + 1.0;
    float _1806 = (cbLight._m0[_1797].y * _1802) + 1.0;
    uint _1807 = _1796 + 5u;
    float _1813 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1817 = _1796 + 4u;
    float _1827 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1831 = _1796 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_570, _571, _572));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_570, _571, _572));
    float _3802 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _3813 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1807].x * _1813) * _1852) + (((cbLight._m0[_1817].x * _1788) * _1827) * _1850);
    float _1860 = ((_1813 * cbLight._m0[_1807].y) * _1852) + (((cbLight._m0[_1817].y * _1789) * _1827) * _1850);
    float _1861 = ((_1813 * cbLight._m0[_1807].z) * _1852) + (((cbLight._m0[_1817].z * _1790) * _1827) * _1850);
    uint _1863 = _1796 + 8u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _573) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1796].x + _598;
    float _1879 = cbLight._m0[_1796].y + _599;
    float _1880 = cbLight._m0[_1796].z + _600;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1796].xyz));
    float _3824 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _1892 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _1893 = dot(vec3(_570, _571, _572), vec3(_1885, _1886, _1887));
    float _3846 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1885, _1886, _1887));
    float _3857 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1877 * _1877;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1913 = exp2(log2(1.0 - (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * 5.0);
    float _1914 = 0.959999978542327880859375 - _686;
    float _1916 = 0.959999978542327880859375 - _687;
    float _1917 = 0.959999978542327880859375 - _688;
    float _1924 = 1.0 - _1877;
    float _1935 = (0.5 / (((_1892 * ((_1891 * _1924) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1924) + _1877) * _1891))) * _1891;
    float _3868 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    uint _1951 = _1796 + 9u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _573) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1831].x + _598;
    float _1965 = cbLight._m0[_1831].y + _599;
    float _1966 = cbLight._m0[_1831].z + _600;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_1831].xyz));
    float _3879 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1978 = dot(vec3(_570, _571, _572), vec3(_1971, _1972, _1973));
    float _3890 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1982 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1971, _1972, _1973));
    float _3901 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1986 = _1963 * _1963;
    float _1990 = ((_1981 * _1981) * (_1986 + (-1.0))) + 1.0;
    float _1997 = exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0);
    float _2004 = 1.0 - _1963;
    float _2014 = (0.5 / (((_1892 * ((_1977 * _2004) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _2004) + _1963) * _1977))) * _1977;
    float _3912 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1986 / ((_1990 * _1990) * 3.141590118408203125));
    float _2026 = (((((_1997 * _1914) + _689) * cbLight._m0[_1951].x) * _2016) * _1813) + ((((cbLight._m0[_1863].x * _1788) * ((_1913 * _1914) + _689)) * _1937) * _1827);
    float _2027 = (((((_1997 * _1916) + _691) * cbLight._m0[_1951].y) * _2016) * _1813) + ((((cbLight._m0[_1863].y * _1789) * ((_1913 * _1916) + _691)) * _1937) * _1827);
    float _2028 = (((((_1997 * _1917) + _692) * cbLight._m0[_1951].z) * _2016) * _1813) + ((((cbLight._m0[_1863].z * _1790) * ((_1913 * _1917) + _692)) * _1937) * _1827);
    float _2143;
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    if (_1794.y == 0u)
    {
        float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2083;
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2083;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2083;
        uvec4 _2098 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2099 = _2098.x;
        uint _2110 = uint((float(_2098.y) * floor(float(uint(cbSceneParam._m0[85u].y * _626) / _2099))) + floor(float(uint(cbSceneParam._m0[85u].x * _625) / _2099)));
        float _2120 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2121 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        uint _2124 = uint(isnan(14.0) ? _2121 : (isnan(_2121) ? 14.0 : min(_2121, 14.0)));
        uvec4 _2129 = texelFetch(g_lightClusterGridBuffer, int(((_2124 << 2u) + (_2110 << 6u)) >> 2u));
        uint _2130 = _2129.x;
        uint _2131 = _2098.z;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        if (((((1u << ((_2131 >> 4u) & 15u)) + 4294967295u) & _2130) == 0u) || ((_2131 & 240u) == 0u))
        {
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
        }
        else
        {
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            float _2426 = 0.0;
            uint _2427 = 0u;
            uint _2436;
            bool _2437;
            for (;;)
            {
                _2436 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2427 << 2u)) >> 2u)).x;
                _2437 = _2436 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2437)
                {
                    frontier_phi_67_pred = _2424;
                    frontier_phi_67_pred_1 = _2423;
                    frontier_phi_67_pred_2 = _2422;
                    frontier_phi_67_pred_3 = _2421;
                    frontier_phi_67_pred_4 = _2425;
                    frontier_phi_67_pred_5 = _2426;
                }
                else
                {
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    uint _2623;
                    _2617 = _2421;
                    _2618 = _2422;
                    _2619 = _2423;
                    _2620 = _2424;
                    _2621 = _2425;
                    _2622 = _2426;
                    _2623 = _2436;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    float _2523;
                    for (;;)
                    {
                        uint _2627 = uint(findLSB(_2623)) + (_2427 << 5u);
                        uint _2624 = (_2623 + 4294967295u) & _2623;
                        uint _2629 = _2627 * 48u;
                        vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        uint _2649 = (_2627 * 48u) + 4u;
                        vec4 _2662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2668 = (_2627 * 48u) + 8u;
                        vec3 _2679 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2668)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2668 + 2u)).x));
                        float _2683 = _2643.x - _2084;
                        float _2684 = _2643.y - _2085;
                        float _2685 = _2643.z - _2086;
                        float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                        float _2689 = inversesqrt(_2686);
                        float _2690 = _2689 * _2683;
                        float _2691 = _2689 * _2684;
                        float _2692 = _2689 * _2685;
                        float _2693 = dot(vec3(_645, _648, _651), vec3(_2690, _2691, _2692));
                        float _2698 = 1.0 - (_2686 * _2643.w);
                        float _3933 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2699 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                        float _2700 = sqrt(_2686) * _2662.w;
                        float _2703 = 1.39999997615814208984375 / (_2700 + 1.39999997615814208984375);
                        float _2704 = _2703 * _2703;
                        float _2707 = ((1.0 - _2704) * _2693) + _2704;
                        float _2710 = _2700 * _2700;
                        float _2714 = ((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2699) / ((_2710 * 0.699999988079071044921875) + 1.0);
                        float _2718 = (-0.0) - _2084;
                        float _2719 = (-0.0) - _2085;
                        float _2720 = (-0.0) - _2086;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2725 = _2724 * _2718;
                        float _2726 = _2724 * _2719;
                        float _2727 = _2724 * _2720;
                        float _2735 = exp2(log2(1.0 / ((_2710 * 3.5) + 5.0)) * 0.25);
                        float _2736 = 1.0 - _720;
                        float _2743 = sqrt(1.0 - ((1.0 - (_2736 * _2736)) * (1.0 - (_2735 * _2735))));
                        float _2744 = _2743 * _2743;
                        float _2745 = _2744 * _2744;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2748 = _2727 + _2692;
                        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
                        float _2756 = dot(vec3(_645, _648, _651), vec3(_2725, _2726, _2727));
                        float _3949 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2759 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2760 = dot(vec3(_645, _648, _651), vec3(_2752 * _2746, _2752 * _2747, _2752 * _2748));
                        float _3960 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2763 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                        float _2767 = ((_2763 * _2763) * (_2745 + (-1.0))) + 1.0;
                        float _2768 = _2703 * _2744;
                        float _2769 = _2768 * _2768;
                        float _2772 = ((1.0 - _2769) * _2693) + _2769;
                        float _3971 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2773 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2774 = 1.0 - _2744;
                        float _2784 = (0.5 / (((_2773 * ((_2759 * _2774) + _2744)) + 9.9999999392252902907785028219223e-09) + (((_2773 * _2774) + _2744) * _2759))) * _2773;
                        float _3982 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2795 = (((_2745 * 3.1415927410125732421875) * (isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0)))) / ((_2767 * _2767) * ((_2710 * 2.1991131305694580078125) + 3.141590118408203125))) * _2699;
                        _2521 = (_2714 * _2662.x) + _2620;
                        _2522 = (_2714 * _2662.y) + _2621;
                        _2523 = (_2714 * _2662.z) + _2622;
                        _2518 = (_2795 * _2679.x) + _2617;
                        _2519 = (_2795 * _2679.y) + _2618;
                        _2520 = (_2795 * _2679.z) + _2619;
                        if (_2624 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2617 = _2518;
                            _2618 = _2519;
                            _2619 = _2520;
                            _2620 = _2521;
                            _2621 = _2522;
                            _2622 = _2523;
                            _2623 = _2624;
                        }
                    }
                    frontier_phi_67_pred = _2521;
                    frontier_phi_67_pred_1 = _2520;
                    frontier_phi_67_pred_2 = _2519;
                    frontier_phi_67_pred_3 = _2518;
                    frontier_phi_67_pred_4 = _2522;
                    frontier_phi_67_pred_5 = _2523;
                }
                _2244 = frontier_phi_67_pred;
                _2242 = frontier_phi_67_pred_1;
                _2240 = frontier_phi_67_pred_2;
                _2238 = frontier_phi_67_pred_3;
                _2246 = frontier_phi_67_pred_4;
                _2248 = frontier_phi_67_pred_5;
                uint _2428 = _2427 + 1u;
                if (_2428 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2421 = _2238;
                    _2422 = _2240;
                    _2423 = _2242;
                    _2424 = _2244;
                    _2425 = _2246;
                    _2426 = _2248;
                    _2427 = _2428;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
        }
        uvec4 _2251 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2252 = _2251.z;
        uint _2254 = (_2252 >> 8u) & 15u;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((4294967295u << _2254) & _2130) == 0u)
        {
            _2389 = _2237;
            _2391 = _2239;
            _2393 = _2241;
            _2395 = _2243;
            _2397 = _2245;
            _2399 = _2247;
        }
        else
        {
            float _2414 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _2415 = _2414 * _2084;
            float _2416 = _2414 * _2085;
            float _2417 = _2414 * _2086;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2254 < ((_2252 >> 12u) & 15u))
            {
                float _2390;
                float _2392;
                float _2394;
                float _2396;
                float _2398;
                float _2400;
                float _2600 = _2237;
                float _2601 = _2239;
                float _2602 = _2241;
                float _2603 = _2243;
                float _2604 = _2245;
                float _2605 = _2247;
                uint _2606 = _2254;
                uint _2615;
                bool _2616;
                for (;;)
                {
                    _2615 = texelFetch(g_lightClassification, int((((_2124 << 5u) + (_2110 << 9u)) + (_2606 << 2u)) >> 2u)).x;
                    _2616 = _2615 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2616)
                    {
                        frontier_phi_81_pred = _2603;
                        frontier_phi_81_pred_1 = _2602;
                        frontier_phi_81_pred_2 = _2601;
                        frontier_phi_81_pred_3 = _2600;
                        frontier_phi_81_pred_4 = _2605;
                        frontier_phi_81_pred_5 = _2604;
                    }
                    else
                    {
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _2843 = _2600;
                        float _2844 = _2601;
                        float _2845 = _2602;
                        float _2846 = _2603;
                        float _2847 = _2604;
                        float _2848 = _2605;
                        uint _2849 = _2615;
                        uint _2850;
                        vec4 _2875;
                        float _2876;
                        vec4 _2891;
                        vec3 _2903;
                        vec4 _2918;
                        vec4 _2933;
                        float _2979;
                        bool _2980;
                        for (;;)
                        {
                            uint _2860 = ((_2606 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2849));
                            _2850 = (_2849 + 4294967295u) & _2849;
                            uint _2862 = _2860 * 40u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2876 = _2875.w;
                            uint _2878 = (_2860 * 40u) + 4u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2860 * 40u) + 8u;
                            _2903 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x));
                            uint _2905 = (_2860 * 40u) + 16u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2920 = (_2860 * 40u) + 20u;
                            _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            uint _2935 = (_2860 * 40u) + 24u;
                            vec4 _2948 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2935)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2935 + 3u)).x));
                            uint _2954 = (_2860 * 40u) + 28u;
                            vec4 _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2979 = fma(_2086, _2967.z, fma(_2085, _2967.y, _2967.x * _2084)) + _2967.w;
                            _2980 = !((fma(_2086, _2948.z, fma(_2085, _2948.y, _2948.x * _2084)) + _2948.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2980)
                            {
                                float _3007 = _2875.x - _2084;
                                float _3008 = _2875.y - _2085;
                                float _3009 = _2875.z - _2086;
                                float _3010 = dot(vec3(_3007, _3008, _3009), vec3(_3007, _3008, _3009));
                                float _3013 = inversesqrt(_3010);
                                float _3014 = _3013 * _3007;
                                float _3015 = _3013 * _3008;
                                float _3016 = _3013 * _3009;
                                float _3020 = 1.0 - (_3010 / (_2876 * _2876));
                                float _3993 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _3025 = sqrt(_3010) * _2891.w;
                                float _3027 = 1.39999997615814208984375 / (_3025 + 1.39999997615814208984375);
                                float _3028 = _3027 * _3027;
                                float _3031 = ((1.0 - _3028) * dot(vec3(_3014, _3015, _3016), vec3(_645, _648, _651))) + _3028;
                                float _3034 = _3025 * _3025;
                                float _3038 = (fma(_2086, _2918.z, fma(_2085, _2918.y, _2918.x * _2084)) + _2918.w) / _2979;
                                float _3039 = (fma(_2086, _2933.z, fma(_2085, _2933.y, _2933.x * _2084)) + _2933.w) / _2979;
                                float _3043 = 1.0 - dot(vec2(_3038, _3039), vec2(_3038, _3039));
                                float _4009 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3045 = _3044 * (((isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0))) * _3021) / ((_3034 * 0.699999988079071044921875) + 1.0));
                                float _3057 = exp2(log2(1.0 / ((_3034 * 3.5) + 5.0)) * 0.25);
                                float _3058 = 1.0 - _720;
                                float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                                float _3066 = _3065 * _3065;
                                float _3067 = _3066 * _3066;
                                float _3068 = _3014 - _2415;
                                float _3069 = _3015 - _2416;
                                float _3070 = _3016 - _2417;
                                float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                                float _3078 = dot(vec3(_645, _648, _651), vec3((-0.0) - _2415, (-0.0) - _2416, (-0.0) - _2417));
                                float _4020 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3081 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3082 = dot(vec3(_645, _648, _651), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                                float _4031 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3085 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                                float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                                float _3090 = _3027 * _3066;
                                float _3091 = _3090 * _3090;
                                float _3097 = ((1.0 - _3091) * dot(vec3(_645, _648, _651), vec3(_3014, _3015, _3016))) + _3091;
                                float _4042 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                                float _3098 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3099 = 1.0 - _3066;
                                float _3109 = (0.5 / (((_3098 * ((_3081 * _3099) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3098 * _3099) + _3066) * _3081))) * _3098;
                                float _4053 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3119 = (_3044 * _3021) * (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_3089 * _3089) * ((_3034 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3045 * _2891.x;
                                frontier_phi_87_pred_1 = _3119 * _2903.z;
                                frontier_phi_87_pred_2 = _3119 * _2903.y;
                                frontier_phi_87_pred_3 = _3119 * _2903.x;
                                frontier_phi_87_pred_4 = _3045 * _2891.z;
                                frontier_phi_87_pred_5 = _3045 * _2891.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3126 = frontier_phi_87_pred;
                            _3125 = frontier_phi_87_pred_1;
                            _3124 = frontier_phi_87_pred_2;
                            _3123 = frontier_phi_87_pred_3;
                            _3128 = frontier_phi_87_pred_4;
                            _3127 = frontier_phi_87_pred_5;
                            _2833 = _3126 + _2846;
                            _2834 = _3127 + _2847;
                            _2835 = _3128 + _2848;
                            _2830 = _3123 + _2843;
                            _2831 = _3124 + _2844;
                            _2832 = _3125 + _2845;
                            if (_2850 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2850;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2833;
                        frontier_phi_81_pred_1 = _2832;
                        frontier_phi_81_pred_2 = _2831;
                        frontier_phi_81_pred_3 = _2830;
                        frontier_phi_81_pred_4 = _2835;
                        frontier_phi_81_pred_5 = _2834;
                    }
                    _2396 = frontier_phi_81_pred;
                    _2394 = frontier_phi_81_pred_1;
                    _2392 = frontier_phi_81_pred_2;
                    _2390 = frontier_phi_81_pred_3;
                    _2400 = frontier_phi_81_pred_4;
                    _2398 = frontier_phi_81_pred_5;
                    uint _2607 = _2606 + 1u;
                    if (_2607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2600 = _2390;
                        _2601 = _2392;
                        _2602 = _2394;
                        _2603 = _2396;
                        _2604 = _2398;
                        _2605 = _2400;
                        _2606 = _2607;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2400;
                frontier_phi_56_57_ladder_1 = _2398;
                frontier_phi_56_57_ladder_2 = _2396;
                frontier_phi_56_57_ladder_3 = _2392;
                frontier_phi_56_57_ladder_4 = _2390;
                frontier_phi_56_57_ladder_5 = _2394;
            }
            else
            {
                frontier_phi_56_57_ladder = _2247;
                frontier_phi_56_57_ladder_1 = _2245;
                frontier_phi_56_57_ladder_2 = _2243;
                frontier_phi_56_57_ladder_3 = _2239;
                frontier_phi_56_57_ladder_4 = _2237;
                frontier_phi_56_57_ladder_5 = _2241;
            }
            _2389 = frontier_phi_56_57_ladder_4;
            _2391 = frontier_phi_56_57_ladder_3;
            _2393 = frontier_phi_56_57_ladder_5;
            _2395 = frontier_phi_56_57_ladder_2;
            _2397 = frontier_phi_56_57_ladder_1;
            _2399 = frontier_phi_56_57_ladder;
        }
        float _2404 = isnan(1.0) ? _704 : (isnan(_704) ? 1.0 : min(_704, 1.0));
        _2143 = (_2404 * _2395) + _1859;
        _2145 = (_2404 * _2397) + _1860;
        _2147 = (_2404 * _2399) + _1861;
        _2149 = ((_2389 * _689) * _2404) + _2026;
        _2151 = ((_2391 * _691) * _2404) + _2027;
        _2153 = ((_2393 * _692) * _2404) + _2028;
    }
    else
    {
        _2143 = _1859;
        _2145 = _1860;
        _2147 = _1861;
        _2149 = _2026;
        _2151 = _2027;
        _2153 = _2028;
    }
    uint _2159 = _665 + uint(cbMatDynParam._m0[0u].w);
    float _4069 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4080 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4091 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _2184 = (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2143 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _704))) + ((_2149 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2159].x * (_488 - (_488 * _292)));
    float _2186 = ((cbInstanceData._m0[_2159].y * (_489 - (_489 * _292))) + ((_2151 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_2145 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _704)));
    float _2188 = ((cbInstanceData._m0[_2159].z * (_490 - (_490 * _292))) + ((_2153 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1544)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2147 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _704)));
    float _2189 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2190 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2191 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    uint _2192 = _664 + 6u;
    float _2200 = _625 / cbSceneParam._m0[86u].x;
    float _2201 = _626 / cbSceneParam._m0[86u].y;
    vec4 _2215 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2217 = _2215.x;
    float _2218 = _2215.y;
    float _2219 = _2215.z;
    float _2220 = _2215.w;
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2262 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2263 = _2262 / _593;
        float _2274 = _2263 * _265;
        float _2275 = _266 * _2263;
        float _2276 = (-0.0) - _2275;
        float _2277 = _2263 * _267;
        float _2279 = (cbSceneParam._m0[77u].w * _2276) / _2262;
        float _2280 = _2279 + cbSceneParam._m0[79u].w;
        float _2281 = cbSceneParam._m0[79u].w - _2275;
        float _2287 = sqrt(((_2274 * _2274) + (_2275 * _2275)) + (_2277 * _2277));
        float _2290 = (1.0 - (cbSceneParam._m0[77u].w / _2262)) * _2287;
        float _2296 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2298 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2531;
        if (abs((_2276 - _2279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2531 = ((((_2280 > 0.0) ? exp2(_2296 * _2280) : (2.0 - exp2(_2298 * _2280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2290;
        }
        else
        {
            float _2450 = 1.0 / cbSceneParam._m0[80u].x;
            float _2451 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : max(_2280, _2281));
            float _2452 = isnan(_2281) ? _2280 : (isnan(_2280) ? _2281 : min(_2280, _2281));
            float _2461 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : min(_2451, 0.0));
            float _2462 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : min(_2452, 0.0));
            _2531 = ((abs(_2287 / _2276) * cbSceneParam._m0[80u].y) * ((((_2461 - _2462) * 2.0) - ((exp2(_2296 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)))) - exp2(_2296 * (isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0))))) * _2450)) - ((exp2(_2298 * _2461) - exp2(_2298 * _2462)) * _2450))) + (_2290 * cbSceneParam._m0[80u].z);
        }
        vec4 _2533 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2200, _2201, 1.0), 0.0);
        float _2542 = exp2((_2531 * (-1.44269502162933349609375)) * (1.0 - _2533.w));
        float _2543 = log2(_2542);
        float _2559 = log2(_2220);
        _2300 = (exp2(_2559 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].x)) * _2533.x) / cbSceneParam._m0[78u].x)) + _2217;
        _2302 = (exp2(_2559 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].y)) * _2533.y) / cbSceneParam._m0[78u].y)) + _2218;
        _2304 = (exp2(_2559 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2543 * cbSceneParam._m0[78u].z)) * _2533.z) / cbSceneParam._m0[78u].z)) + _2219;
        _2306 = _2542 * _2220;
    }
    else
    {
        _2300 = _2217;
        _2302 = _2218;
        _2304 = _2219;
        _2306 = _2220;
    }
    bool _2569;
    vec4 _2316;
    vec4 _2338;
    float _2340;
    float _2344;
    float _2345;
    float _2346;
    float _2347;
    bool _2357;
    for (;;)
    {
        _2316 = cbMatDynParam._m0[0u];
        float _2318 = roundEven(_2316.y);
        bool _2319 = _2318 == 3.0;
        float _2320 = log2(_2306);
        float _2327 = exp2(_2320 * cbSceneParam._m0[78u].x) * _2189;
        float _2328 = exp2(_2320 * cbSceneParam._m0[78u].y) * _2190;
        float _2329 = exp2(_2320 * cbSceneParam._m0[78u].z) * _2191;
        float _2336 = _607 + (-0.5);
        _2338 = cbMtdParam._m0[1u];
        _2340 = _2338.y * _2336;
        float _2343 = (_2318 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2344 = _2343 * (_2319 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2300)));
        _2345 = _2343 * (_2319 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2302)));
        _2346 = _2343 * (_2319 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2304)));
        _2347 = _2336 * 0.999000012874603271484375;
        _2357 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2357)
        {
            if ((cbInstanceData._m0[_664 + 7u].x + _2347) < 0.5)
            {
                _2569 = true;
                break;
            }
        }
        uint _2485 = _665 + uint(_2316.w);
        if ((cbInstanceData._m0[_2485].w < 1.0) && ((cbInstanceData._m0[_2485].w + _2347) < 0.5))
        {
            _2569 = true;
            break;
        }
        if ((_2340 + 1.0) < _2338.x)
        {
            _2569 = true;
            break;
        }
        _2569 = false;
        break;
    }
    float _2800;
    if (_2569)
    {
        discard_state = true;
        _2800 = 0.0;
    }
    else
    {
        _2800 = cbInstanceData._m0[_2192].w;
    }
    SV_Target.x = _2344;
    SV_Target.y = _2345;
    SV_Target.z = _2346;
    SV_Target.w = _2800;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2192].w;
    discard_exit();
}


