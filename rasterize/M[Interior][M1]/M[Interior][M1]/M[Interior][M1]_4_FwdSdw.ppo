#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _983;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _288 = _282.w;
    float _301 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _288) + cbMtdParam._m0[11u].x) * _282.x;
    float _303 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _288) + cbMtdParam._m0[11u].y) * _282.y;
    float _305 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _288) + cbMtdParam._m0[11u].z) * _282.z;
    float _331 = cbMtdParam._m0[22u].y + _261;
    float _332 = cbMtdParam._m0[22u].z + _262;
    float _333 = cbMtdParam._m0[22u].w + _263;
    float _347 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_190, _191, _192));
    float _348 = (-0.0) - dot(vec3(_331, _332, _333), vec3(_204, _205, _206));
    float _349 = (-0.0) - dot(vec3(_331, _332, _333), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _353 = inversesqrt(dot(vec3(_347, _348, _349), vec3(_347, _348, _349)));
    float _354 = _353 * _349;
    float _356 = (cbMtdParam._m0[19u].x * _347) * _353;
    float _358 = (cbMtdParam._m0[18u].w * _348) * _353;
    float _359 = fract(TEXCOORD.x);
    float _360 = fract(TEXCOORD.y);
    float _366;
    if (_356 > 0.0)
    {
        _366 = (1.0 - _359) / _356;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _359) / _356;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _366 = frontier_phi_3_2_ladder;
    }
    float _374;
    if (_358 > 0.0)
    {
        _374 = (1.0 - _360) / _358;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _360) / _358;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _374 = frontier_phi_7_6_ladder;
    }
    float _378 = (_354 > 0.0) ? (cbMtdParam._m0[15u].x / _354) : 5000.0;
    float _379 = isnan(_374) ? _366 : (isnan(_366) ? _374 : min(_366, _374));
    float _380 = isnan(_378) ? _379 : (isnan(_379) ? _378 : min(_379, _378));
    float _384 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _391 = ((_380 * _354) + _384) / _384;
    vec4 _416 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * ((((((_359 + (-0.5)) + (_380 * _356)) / _391) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * ((((((_360 + (-0.5)) + (_380 * _358)) / _391) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _418 = _416.x;
    float _419 = _416.y;
    float _420 = _416.z;
    vec4 _446 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = _446.x;
    vec4 _460 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _468 = (_460.x * 2.0) + (-1.0);
    float _470 = (_460.y * 2.0) + (-1.0);
    float _471 = dot(vec2(_468, _470), vec2(_468, _470));
    float _3364 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _476 = sqrt(1.0 - (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0))));
    float _477 = _460.z * _288;
    float _480 = fma(_476, _197, fma(_470, _204, _468 * _190));
    float _483 = fma(_476, _198, fma(_470, _205, _468 * _191));
    float _486 = fma(_476, _199, fma(_470, _206, _468 * _192));
    float _490 = inversesqrt(dot(vec3(_480, _483, _486), vec3(_480, _483, _486)));
    float _491 = _490 * _480;
    float _492 = _490 * _483;
    float _493 = _490 * _486;
    float _3375 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _494 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    float _3386 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3397 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3408 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3419 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _498 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _514 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _518 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _519 = _261 * _518;
    float _520 = _262 * _518;
    float _521 = _263 * _518;
    float _527 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _528 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _549 = fma(_493, cbSceneParam._m0[5u].z, fma(_492, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _491));
    float _552 = fma(_493, cbSceneParam._m0[6u].z, fma(_492, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _491));
    float _555 = fma(_493, cbSceneParam._m0[7u].z, fma(_492, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _491));
    uint _568 = uint(roundEven(NORMAL.w)) * 13u;
    uint _570 = _568 + 9u;
    uint _571 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _577 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0)))) * cbInstanceData._m0[_571].x;
    float _578 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) * cbInstanceData._m0[_571].y;
    float _579 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0)))) * cbInstanceData._m0[_571].z;
    float _3430 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _580 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    float _3441 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _583 = 1.0 - _498;
    float _584 = _580 * _583;
    float _585 = _581 * _583;
    float _586 = _582 * _583;
    float _591 = (_580 + (-0.039999999105930328369140625)) * _498;
    float _592 = (_581 + (-0.039999999105930328369140625)) * _498;
    float _593 = (_582 + (-0.039999999105930328369140625)) * _498;
    float _594 = _591 + 0.039999999105930328369140625;
    float _596 = _592 + 0.039999999105930328369140625;
    float _597 = _593 + 0.039999999105930328369140625;
    vec4 _606 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _527, cbSceneParam._m0[86u].y * _528));
    float _609 = _606.x * TEXCOORD.z;
    float _610 = dot(vec3(_491, _492, _493), vec3(_519, _520, _521));
    float _613 = _610 * 2.0;
    float _617 = (_613 * _491) - _519;
    float _618 = (_613 * _492) - _520;
    float _619 = (_613 * _493) - _521;
    float _623 = abs(dot(vec3(_519, _520, _521), vec3(_491, _492, _493)));
    float _3463 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _625 = sqrt(_494);
    float _638 = exp2((_625 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_625 * 3.0));
    float _644 = (1.0 - _638) * ((_625 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _645 = _638 * _625;
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _677 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _681 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _982;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = fma(_681, cbModelParam._m0[26u].z, fma(_677, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _673));
        float _713 = fma(_681, cbModelParam._m0[27u].z, fma(_677, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _673));
        float _717 = fma(_681, cbModelParam._m0[28u].z, fma(_677, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _673));
        float _740 = _673 + _491;
        float _741 = _677 + _492;
        float _742 = _681 + _493;
        float _752 = fma(_742, cbModelParam._m0[26u].z, fma(_741, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) - _709;
        float _753 = fma(_742, cbModelParam._m0[27u].z, fma(_741, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) - _713;
        float _754 = fma(_742, cbModelParam._m0[28u].z, fma(_741, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) - _717;
        float _758 = inversesqrt(dot(vec3(_752, _753, _754), vec3(_752, _753, _754)));
        float _771 = ((_758 * _752) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_709 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _772 = ((_758 * _753) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_713 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _773 = ((_758 * _754) / cbModelParam._m0[34u].z) + ((((((_717 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _776 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_771, _772, _773), 0.0);
        float _810 = exp2((_776.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_776.x + (-0.5));
        float _812 = _810 * (_776.y + (-0.5));
        float _813 = _810 * (_776.z + (-0.5));
        float _820 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_783.x + (-0.5));
        float _822 = _820 * (_783.y + (-0.5));
        float _823 = _820 * (_783.z + (-0.5));
        float _830 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_790.x + (-0.5));
        float _832 = _830 * (_790.y + (-0.5));
        float _833 = _830 * (_790.z + (-0.5));
        float _840 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _841 = _840 * (_797.x + (-0.5));
        float _842 = _840 * (_797.y + (-0.5));
        float _843 = _840 * (_797.z + (-0.5));
        float _844 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _845 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _846 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _847 = _811 * 0.5;
        float _848 = _821 * 0.5;
        float _849 = _831 * 0.5;
        float _850 = dot(vec3(_847, _848, _849), vec3(_847, _848, _849));
        float _855 = (_850 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_850);
        float _864 = (dot(vec3(_491, _492, _493), vec3(_855 * _847, _855 * _848, _855 * _849)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _874 = sqrt(((_848 * _848) + (_847 * _847)) + (_849 * _849)) / (_844 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _876 = _875 * 2.0;
        float _880 = (1.0 - _875) / (_875 + 1.0);
        float _3511 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _890 = ((((1.0 - _881) * (_876 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_876 + 1.0))) + _881) * _844;
        float _891 = _812 * 0.5;
        float _892 = _822 * 0.5;
        float _893 = _832 * 0.5;
        float _894 = dot(vec3(_891, _892, _893), vec3(_891, _892, _893));
        float _899 = (_894 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_894);
        float _907 = (dot(vec3(_491, _492, _493), vec3(_899 * _891, _899 * _892, _899 * _893)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _916 = sqrt(((_892 * _892) + (_891 * _891)) + (_893 * _893)) / (_845 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _918 = _917 * 2.0;
        float _922 = (1.0 - _917) / (_917 + 1.0);
        float _3544 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _932 = ((((1.0 - _923) * (_918 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_918 + 1.0))) + _923) * _845;
        float _933 = _813 * 0.5;
        float _934 = _823 * 0.5;
        float _935 = _833 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _949 = (dot(vec3(_491, _492, _493), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _958 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_846 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3577 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_960 + 1.0))) + _965) * _846;
        _982 = _813;
        _984 = _812;
        _985 = _811;
        _986 = _823;
        _987 = _822;
        _988 = _821;
        _989 = _833;
        _990 = _832;
        _991 = _831;
        _992 = _846;
        _993 = _845;
        _994 = _844;
        _995 = cbModelParam._m0[36u].z * (isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0)));
        _996 = cbModelParam._m0[36u].z * (isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0)));
        _997 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
    }
    else
    {
        _982 = _983;
        _984 = _983;
        _985 = _983;
        _986 = _983;
        _987 = _983;
        _988 = _983;
        _989 = _983;
        _990 = _983;
        _991 = _983;
        _992 = _983;
        _993 = _983;
        _994 = _983;
        _995 = 0.0;
        _996 = 0.0;
        _997 = 0.0;
    }
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1023 = fma(_681, cbModelParam._m0[30u].z, fma(_677, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _673));
        float _1027 = fma(_681, cbModelParam._m0[31u].z, fma(_677, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _673));
        float _1031 = fma(_681, cbModelParam._m0[32u].z, fma(_677, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _673));
        float _1054 = _673 + _491;
        float _1055 = _677 + _492;
        float _1056 = _681 + _493;
        float _1066 = fma(_1056, cbModelParam._m0[30u].z, fma(_1055, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1054)) - _1023;
        float _1067 = fma(_1056, cbModelParam._m0[31u].z, fma(_1055, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1054)) - _1027;
        float _1068 = fma(_1056, cbModelParam._m0[32u].z, fma(_1055, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1054)) - _1031;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1023 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1027 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[35u].z) + ((((((_1031 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1122 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1089.x + (-0.5));
        float _1124 = _1122 * (_1089.y + (-0.5));
        float _1125 = _1122 * (_1089.z + (-0.5));
        float _1132 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1133 = _1132 * (_1096.x + (-0.5));
        float _1134 = _1132 * (_1096.y + (-0.5));
        float _1135 = _1132 * (_1096.z + (-0.5));
        float _1142 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1103.x + (-0.5));
        float _1144 = _1142 * (_1103.y + (-0.5));
        float _1145 = _1142 * (_1103.z + (-0.5));
        float _1152 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1110.x + (-0.5));
        float _1154 = _1152 * (_1110.y + (-0.5));
        float _1155 = _1152 * (_1110.z + (-0.5));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = _1123 * 0.5;
        float _1160 = _1133 * 0.5;
        float _1161 = _1143 * 0.5;
        float _1162 = dot(vec3(_1159, _1160, _1161), vec3(_1159, _1160, _1161));
        float _1167 = (_1162 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1162);
        float _1175 = (dot(vec3(_491, _492, _493), vec3(_1167 * _1159, _1167 * _1160, _1167 * _1161)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1184 = sqrt(((_1160 * _1160) + (_1159 * _1159)) + (_1161 * _1161)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _3640 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1186 + 1.0))) + _1191) * _1156;
        float _1201 = _1124 * 0.5;
        float _1202 = _1134 * 0.5;
        float _1203 = _1144 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_491, _492, _493), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _3673 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1228 + 1.0))) + _1233) * _1157;
        float _1243 = _1125 * 0.5;
        float _1244 = _1135 * 0.5;
        float _1245 = _1145 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_491, _492, _493), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3706 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1270 + 1.0))) + _1275) * _1158;
        _1292 = _1125;
        _1293 = _1124;
        _1294 = _1123;
        _1295 = _1135;
        _1296 = _1134;
        _1297 = _1133;
        _1298 = _1145;
        _1299 = _1144;
        _1300 = _1143;
        _1301 = _1158;
        _1302 = _1157;
        _1303 = _1156;
        _1304 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1305 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1306 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _983;
        _1293 = _983;
        _1294 = _983;
        _1295 = _983;
        _1296 = _983;
        _1297 = _983;
        _1298 = _983;
        _1299 = _983;
        _1300 = _983;
        _1301 = _983;
        _1302 = _983;
        _1303 = _983;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1316 = (cbModelParam._m0[1u].x * (_1304 - _995)) + _995;
    float _1317 = (cbModelParam._m0[1u].x * (_1305 - _996)) + _996;
    float _1318 = (cbModelParam._m0[1u].x * (_1306 - _997)) + _997;
    float _1339 = fma(_1318, cbSceneParam._m0[89u].z, fma(_1317, cbSceneParam._m0[89u].y, _1316 * cbSceneParam._m0[89u].x));
    float _1342 = fma(_1318, cbSceneParam._m0[90u].z, fma(_1317, cbSceneParam._m0[90u].y, _1316 * cbSceneParam._m0[90u].x));
    float _1345 = fma(_1318, cbSceneParam._m0[91u].z, fma(_1317, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1316));
    float _1360 = _617 * 0.5;
    float _1361 = _618 * 0.5;
    float _1362 = _619 * 0.5;
    float _1363 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1294, _1297, _1300, _1303));
    float _1366 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1293, _1296, _1299, _1302));
    float _1369 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_1292, _1295, _1298, _1301));
    float _1403;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1376 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_982, _986, _989, _992));
        float _1380 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_984, _987, _990, _993));
        float _1384 = dot(vec4(_1360, _1361, _1362, 1.0), vec4(_985, _988, _991, _994));
        float _1391 = dot(vec4(cbModelParam._m0[39u]), vec4(_1360, _1361, _1362, 1.0));
        _1403 = dot(vec3(isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1391) ? 0.0 : (isnan(0.0) ? _1391 : max(0.0, _1391))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1403 = 1.0;
    }
    float _1414;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1405 = dot(vec4(cbModelParam._m0[40u]), vec4(_1360, _1361, _1362, 1.0));
        _1414 = dot(vec3(isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1414 = 1.0;
    }
    float _1418 = (_1414 * cbModelParam._m0[1u].x) + (_1403 * (1.0 - cbModelParam._m0[1u].x));
    float _1428 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _494);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1428 : min(cbModelParam._m0[25u].z, _1428));
    float _1510;
    float _1512;
    float _1514;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1477 = fma(_681, cbModelParam._m0[13u].z, fma(_677, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _673)) + cbModelParam._m0[13u].w;
        float _1481 = fma(_681, cbModelParam._m0[14u].z, fma(_677, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _673)) + cbModelParam._m0[14u].w;
        float _1485 = fma(_681, cbModelParam._m0[15u].z, fma(_677, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _673)) + cbModelParam._m0[15u].w;
        float _1488 = fma(_619, cbModelParam._m0[13u].z, fma(_618, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _617));
        float _1491 = fma(_619, cbModelParam._m0[14u].z, fma(_618, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _617));
        float _1494 = fma(_619, cbModelParam._m0[15u].z, fma(_618, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _617));
        float _1522;
        if (_1488 > 0.0)
        {
            _1522 = abs((1.0 - _1477) / _1488);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1477 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1522 = frontier_phi_22_20_ladder;
        }
        float _1693;
        if (_1491 > 0.0)
        {
            _1693 = abs((1.0 - _1481) / _1491);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1481 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1693 = frontier_phi_31_27_ladder;
        }
        float _2148;
        if (_1494 > 0.0)
        {
            _2148 = abs((1.0 - _1485) / _1494);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1485 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2148 = frontier_phi_43_38_ladder;
        }
        float _2150 = isnan(_1693) ? _1522 : (isnan(_1522) ? _1693 : min(_1522, _1693));
        float _2151 = isnan(_2148) ? _2150 : (isnan(_2150) ? _2148 : min(_2150, _2148));
        float _2155 = (_2151 * _1488) + _1477;
        float _2156 = (_2151 * _1491) + _1481;
        float _2157 = (_2151 * _1494) + _1485;
        float _2158 = _2151 * 9.9999997473787516355514526367188e-05;
        float _2160 = (-1.0) - _2158;
        float _2162 = _2158 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2157 > _2162) || ((_2157 < _2160) || ((_2156 > _2162) || ((_2156 < _2160) || ((_2155 < _2160) || (_2155 > _2162))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2157, cbModelParam._m0[9u].z, fma(_2156, cbModelParam._m0[9u].y, _2155 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2157, cbModelParam._m0[10u].z, fma(_2156, cbModelParam._m0[10u].y, _2155 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2157, cbModelParam._m0[11u].z, fma(_2156, cbModelParam._m0[11u].y, _2155 * cbModelParam._m0[11u].x))), _1429);
            frontier_phi_21_43_ladder = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2407.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2407.z * cbModelParam._m0[1u].y;
        }
        _1510 = frontier_phi_21_43_ladder_1;
        _1512 = frontier_phi_21_43_ladder;
        _1514 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1498 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_617, _618, _619), _1429);
        _1510 = _1498.x * cbModelParam._m0[1u].y;
        _1512 = _1498.y * cbModelParam._m0[1u].y;
        _1514 = _1498.z * cbModelParam._m0[1u].y;
    }
    float _1518 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _494);
    float _1519 = isnan(_1518) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1518 : min(cbModelParam._m0[25u].w, _1518));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_681, cbModelParam._m0[21u].z, fma(_677, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _673)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_681, cbModelParam._m0[22u].z, fma(_677, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _673)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_681, cbModelParam._m0[23u].z, fma(_677, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _673)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_619, cbModelParam._m0[21u].z, fma(_618, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _617));
        float _1586 = fma(_619, cbModelParam._m0[22u].z, fma(_618, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _617));
        float _1589 = fma(_619, cbModelParam._m0[23u].z, fma(_618, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _617));
        float _1698;
        if (_1583 > 0.0)
        {
            _1698 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1698 = frontier_phi_33_29_ladder;
        }
        float _2175;
        if (_1586 > 0.0)
        {
            _2175 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2175 = frontier_phi_45_40_ladder;
        }
        float _2528;
        if (_1589 > 0.0)
        {
            _2528 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2528 = frontier_phi_57_52_ladder;
        }
        float _2530 = isnan(_2175) ? _1698 : (isnan(_1698) ? _2175 : min(_1698, _2175));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1583) + _1572;
        float _2536 = (_2531 * _1586) + _1576;
        float _2537 = (_2531 * _1589) + _1580;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1519);
            frontier_phi_30_57_ladder = _2658.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2658.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2658.x * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_30_57_ladder_2;
        _1610 = frontier_phi_30_57_ladder_1;
        _1612 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_617, _618, _619), _1519);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1625 = (((_644 * _594) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1608 - _1510)) + _1510);
    float _1627 = (((_644 * _596) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1610 - _1512)) + _1512);
    float _1629 = (((_644 * _597) + _645) * _609) * ((cbModelParam._m0[1u].w * (_1612 - _1514)) + _1514);
    float _1632 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    float _1672 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1676 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1680 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1684 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1685 = _1672 / _1684;
    float _1686 = _1676 / _1684;
    float _1687 = _1680 / _1684;
    float _1834;
    float _1835;
    float _1836;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1714 = ((uint(_1687 > cbSceneParam._m0[59u].y) + uint(_1687 > cbSceneParam._m0[59u].x)) + uint(_1687 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1715 = _1714 + 43u;
        uint _1723 = _1714 + 44u;
        uint _1731 = _1714 + 45u;
        uint _1739 = _1714 + 46u;
        float _1750 = fma(_1684, cbSceneParam._m0[_1715].w, fma(_1680, cbSceneParam._m0[_1715].z, fma(_1676, cbSceneParam._m0[_1715].y, _1672 * cbSceneParam._m0[_1715].x)));
        float _1754 = fma(_1684, cbSceneParam._m0[_1723].w, fma(_1680, cbSceneParam._m0[_1723].z, fma(_1676, cbSceneParam._m0[_1723].y, _1672 * cbSceneParam._m0[_1723].x)));
        float _1762 = fma(_1684, cbSceneParam._m0[_1739].w, fma(_1680, cbSceneParam._m0[_1739].z, fma(_1676, cbSceneParam._m0[_1739].y, _1672 * cbSceneParam._m0[_1739].x)));
        float _1767 = cbSceneParam._m0[33u].z * _1762;
        float _1769 = cbSceneParam._m0[33u].w * _1762;
        float _1772 = fma(_1684, cbSceneParam._m0[_1731].w, fma(_1680, cbSceneParam._m0[_1731].z, fma(_1676, cbSceneParam._m0[_1731].y, _1672 * cbSceneParam._m0[_1731].x))) / _1762;
        float _1820 = (cbSceneParam._m0[33u].x - sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687))) * cbSceneParam._m0[33u].y;
        float _3832 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1827 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1767 + _1750) / _1762, (_1769 + _1754) / _1762), _1772), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1769 + _1750) / _1762, (_1754 - _1767) / _1762), _1772), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1750 - _1767) / _1762, (_1754 - _1769) / _1762), _1772), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1750 - _1769) / _1762, (_1767 + _1754) / _1762), _1772), 0.0)).x), vec4(0.25)));
        _1834 = 1.0 - (_1827 * cbSceneParam._m0[34u].x);
        _1835 = 1.0 - (_1827 * cbSceneParam._m0[34u].y);
        _1836 = 1.0 - (_1827 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1834 = 1.0;
        _1835 = 1.0;
        _1836 = 1.0;
    }
    float _1900;
    float _1902;
    float _1904;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1888 = fma(_1684, cbSceneParam._m0[63u].w, fma(_1680, cbSceneParam._m0[63u].z, fma(_1676, cbSceneParam._m0[63u].y, _1672 * cbSceneParam._m0[63u].x)));
        float _1889 = fma(_1684, cbSceneParam._m0[60u].w, fma(_1680, cbSceneParam._m0[60u].z, fma(_1676, cbSceneParam._m0[60u].y, _1672 * cbSceneParam._m0[60u].x))) / _1888;
        float _1890 = fma(_1684, cbSceneParam._m0[61u].w, fma(_1680, cbSceneParam._m0[61u].z, fma(_1676, cbSceneParam._m0[61u].y, _1672 * cbSceneParam._m0[61u].x))) / _1888;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1889 >= cbSceneParam._m0[64u].x) && (_1890 >= cbSceneParam._m0[64u].y)) && (_1889 <= cbSceneParam._m0[64u].z)) && (_1890 <= cbSceneParam._m0[64u].w))
        {
            float _2188 = fma(_1684, cbSceneParam._m0[62u].w, fma(_1680, cbSceneParam._m0[62u].z, fma(_1676, cbSceneParam._m0[62u].y, _1672 * cbSceneParam._m0[62u].x))) / _1888;
            float _2192 = isnan(cbSceneParam._m0[41u].w) ? _2188 : (isnan(_2188) ? cbSceneParam._m0[41u].w : max(_2188, cbSceneParam._m0[41u].w));
            float _2235 = (cbSceneParam._m0[33u].x - sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687))) * cbSceneParam._m0[33u].y;
            float _3848 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
            float _2242 = (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1889, cbSceneParam._m0[33u].w + _1890), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1889, _1890 - cbSceneParam._m0[33u].z), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1889 - cbSceneParam._m0[33u].z, _1890 - cbSceneParam._m0[33u].w), _2192), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1889 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1890), _2192), 0.0)).x), vec4(0.25)));
            float _2246 = 1.0 - (_2242 * cbSceneParam._m0[34u].x);
            float _2247 = 1.0 - (_2242 * cbSceneParam._m0[34u].y);
            float _2248 = 1.0 - (_2242 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2247) ? _1835 : (isnan(_1835) ? _2247 : min(_1835, _2247));
            frontier_phi_42_41_ladder_1 = isnan(_2246) ? _1834 : (isnan(_1834) ? _2246 : min(_1834, _2246));
            frontier_phi_42_41_ladder_2 = isnan(_2248) ? _1836 : (isnan(_1836) ? _2248 : min(_1836, _2248));
        }
        else
        {
            frontier_phi_42_41_ladder = _1835;
            frontier_phi_42_41_ladder_1 = _1834;
            frontier_phi_42_41_ladder_2 = _1836;
        }
        _1900 = frontier_phi_42_41_ladder_1;
        _1902 = frontier_phi_42_41_ladder;
        _1904 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1900 = _1834;
        _1902 = _1835;
        _1904 = _1836;
    }
    uvec4 _1909 = floatBitsToUint(cbInstanceData._m0[_568 + 5u]);
    uint _1911 = _1909.x * 14u;
    uint _1912 = _1911 + 13u;
    float _1917 = _609 + (-1.0);
    float _1920 = (cbLight._m0[_1912].x * _1917) + 1.0;
    float _1921 = (cbLight._m0[_1912].y * _1917) + 1.0;
    uint _1922 = _1911 + 5u;
    float _1928 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
    uint _1932 = _1911 + 4u;
    float _1941 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
    uint _1945 = _1911 | 1u;
    float _1956 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_491, _492, _493));
    float _1959 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_491, _492, _493));
    float _3884 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _3895 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1964 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1966 = (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0))) * 0.3183098733425140380859375;
    float _1973 = ((cbLight._m0[_1922].x * _1928) * _1966) + (((cbLight._m0[_1932].x * _1900) * _1941) * _1964);
    float _1974 = ((_1928 * cbLight._m0[_1922].y) * _1966) + (((cbLight._m0[_1932].y * _1902) * _1941) * _1964);
    float _1975 = ((_1928 * cbLight._m0[_1922].z) * _1966) + (((cbLight._m0[_1932].z * _1904) * _1941) * _1964);
    uint _1977 = _1911 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _494) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1911].x + _519;
    float _1993 = cbLight._m0[_1911].y + _520;
    float _1994 = cbLight._m0[_1911].z + _521;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1911].xyz));
    float _3906 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _2006 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _2007 = dot(vec3(_491, _492, _493), vec3(_1999, _2000, _2001));
    float _3928 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1999, _2000, _2001));
    float _3939 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0);
    float _2028 = 0.959999978542327880859375 - _591;
    float _2030 = 0.959999978542327880859375 - _592;
    float _2031 = 0.959999978542327880859375 - _593;
    float _2038 = 1.0 - _1991;
    float _2049 = (0.5 / (((_2006 * ((_2005 * _2038) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2038) + _1991) * _2005))) * _2005;
    float _3950 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2065 = _1911 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _494) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1945].x + _519;
    float _2079 = cbLight._m0[_1945].y + _520;
    float _2080 = cbLight._m0[_1945].z + _521;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_491, _492, _493), vec3(cbLight._m0[_1945].xyz));
    float _3961 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _2092 = dot(vec3(_491, _492, _493), vec3(_2085, _2086, _2087));
    float _3972 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2085, _2086, _2087));
    float _3983 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2111 = exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0);
    float _2118 = 1.0 - _2077;
    float _2128 = (0.5 / (((_2006 * ((_2091 * _2118) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2118) + _2077) * _2091))) * _2091;
    float _3994 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2130 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2140 = (((((_2111 * _2028) + _594) * cbLight._m0[_2065].x) * _2130) * _1928) + ((((cbLight._m0[_1977].x * _1900) * ((_2027 * _2028) + _594)) * _2051) * _1941);
    float _2141 = (((((_2111 * _2030) + _596) * cbLight._m0[_2065].y) * _2130) * _1928) + ((((cbLight._m0[_1977].y * _1902) * ((_2027 * _2030) + _596)) * _2051) * _1941);
    float _2142 = (((((_2111 * _2031) + _597) * cbLight._m0[_2065].z) * _2130) * _1928) + ((((cbLight._m0[_1977].z * _1904) * ((_2027 * _2031) + _597)) * _2051) * _1941);
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    if (_1909.y == 0u)
    {
        uvec4 _2260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2261 = _2260.x;
        uint _2272 = uint((float(_2260.y) * floor(float(uint(cbSceneParam._m0[85u].y * _528) / _2261))) + floor(float(uint(cbSceneParam._m0[85u].x * _527) / _2261)));
        float _2282 = (log2(_1687 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2283 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        uint _2286 = uint(isnan(14.0) ? _2283 : (isnan(_2283) ? 14.0 : min(_2283, 14.0)));
        uvec4 _2291 = texelFetch(g_lightClusterGridBuffer, int(((_2286 << 2u) + (_2272 << 6u)) >> 2u));
        uint _2292 = _2291.x;
        uint _2293 = _2260.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2293 >> 4u) & 15u)) + 4294967295u) & _2292) == 0u) || ((_2293 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            uint _2592 = 0u;
            uint _2601;
            bool _2602;
            for (;;)
            {
                _2601 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2592 << 2u)) >> 2u)).x;
                _2602 = _2601 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2602)
                {
                    frontier_phi_66_pred = _2587;
                    frontier_phi_66_pred_1 = _2586;
                    frontier_phi_66_pred_2 = _2588;
                    frontier_phi_66_pred_3 = _2591;
                    frontier_phi_66_pred_4 = _2590;
                    frontier_phi_66_pred_5 = _2589;
                }
                else
                {
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    uint _2737;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2601;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    for (;;)
                    {
                        uint _2741 = uint(findLSB(_2737)) + (_2592 << 5u);
                        uint _2738 = (_2737 + 4294967295u) & _2737;
                        uint _2743 = _2741 * 48u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2763 = (_2741 * 48u) + 4u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2782 = (_2741 * 48u) + 8u;
                        vec3 _2793 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x));
                        float _2797 = _2757.x - _1685;
                        float _2798 = _2757.y - _1686;
                        float _2799 = _2757.z - _1687;
                        float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                        float _2803 = inversesqrt(_2800);
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2807 = dot(vec3(_549, _552, _555), vec3(_2804, _2805, _2806));
                        float _2812 = 1.0 - (_2800 * _2757.w);
                        float _4015 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2814 = sqrt(_2800) * _2776.w;
                        float _2817 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * _2807) + _2818;
                        float _2824 = _2814 * _2814;
                        float _2828 = ((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2813) / ((_2824 * 0.699999988079071044921875) + 1.0);
                        float _2832 = (-0.0) - _1685;
                        float _2833 = (-0.0) - _1686;
                        float _2834 = (-0.0) - _1687;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2848 = exp2(log2(1.0 / ((_2824 * 3.5) + 5.0)) * 0.25);
                        float _2849 = 1.0 - _625;
                        float _2856 = sqrt(1.0 - ((1.0 - (_2849 * _2849)) * (1.0 - (_2848 * _2848))));
                        float _2857 = _2856 * _2856;
                        float _2858 = _2857 * _2857;
                        float _2859 = _2839 + _2804;
                        float _2860 = _2840 + _2805;
                        float _2861 = _2841 + _2806;
                        float _2865 = inversesqrt(dot(vec3(_2859, _2860, _2861), vec3(_2859, _2860, _2861)));
                        float _2869 = dot(vec3(_549, _552, _555), vec3(_2839, _2840, _2841));
                        float _4031 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2873 = dot(vec3(_549, _552, _555), vec3(_2865 * _2859, _2865 * _2860, _2865 * _2861));
                        float _4042 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2876 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2880 = ((_2876 * _2876) * (_2858 + (-1.0))) + 1.0;
                        float _2881 = _2817 * _2857;
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2807) + _2882;
                        float _4053 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                        float _2887 = 1.0 - _2857;
                        float _2897 = (0.5 / (((_2886 * ((_2872 * _2887) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2886 * _2887) + _2857) * _2872))) * _2886;
                        float _4064 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                        float _2908 = (((_2858 * 3.1415927410125732421875) * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) / ((_2880 * _2880) * ((_2824 * 2.1991131305694580078125) + 3.141590118408203125))) * _2813;
                        _2666 = (_2828 * _2776.x) + _2734;
                        _2667 = (_2828 * _2776.y) + _2735;
                        _2668 = (_2828 * _2776.z) + _2736;
                        _2663 = (_2908 * _2793.x) + _2731;
                        _2664 = (_2908 * _2793.y) + _2732;
                        _2665 = (_2908 * _2793.z) + _2733;
                        if (_2738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2665;
                            _2734 = _2666;
                            _2735 = _2667;
                            _2736 = _2668;
                            _2737 = _2738;
                        }
                    }
                    frontier_phi_66_pred = _2664;
                    frontier_phi_66_pred_1 = _2663;
                    frontier_phi_66_pred_2 = _2665;
                    frontier_phi_66_pred_3 = _2668;
                    frontier_phi_66_pred_4 = _2667;
                    frontier_phi_66_pred_5 = _2666;
                }
                _2419 = frontier_phi_66_pred;
                _2417 = frontier_phi_66_pred_1;
                _2421 = frontier_phi_66_pred_2;
                _2427 = frontier_phi_66_pred_3;
                _2425 = frontier_phi_66_pred_4;
                _2423 = frontier_phi_66_pred_5;
                uint _2593 = _2592 + 1u;
                if (_2593 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2586 = _2417;
                    _2587 = _2419;
                    _2588 = _2421;
                    _2589 = _2423;
                    _2590 = _2425;
                    _2591 = _2427;
                    _2592 = _2593;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((4294967295u << _2433) & _2292) == 0u)
        {
            _2554 = _2416;
            _2556 = _2418;
            _2558 = _2420;
            _2560 = _2422;
            _2562 = _2424;
            _2564 = _2426;
        }
        else
        {
            float _2579 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
            float _2580 = _2579 * _1685;
            float _2581 = _2579 * _1686;
            float _2582 = _2579 * _1687;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2714 = _2416;
                float _2715 = _2418;
                float _2716 = _2420;
                float _2717 = _2422;
                float _2718 = _2424;
                float _2719 = _2426;
                uint _2720 = _2433;
                uint _2729;
                bool _2730;
                for (;;)
                {
                    _2729 = texelFetch(g_lightClassification, int((((_2286 << 5u) + (_2272 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                    _2730 = _2729 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2730)
                    {
                        frontier_phi_72_pred = _2715;
                        frontier_phi_72_pred_1 = _2714;
                        frontier_phi_72_pred_2 = _2719;
                        frontier_phi_72_pred_3 = _2718;
                        frontier_phi_72_pred_4 = _2717;
                        frontier_phi_72_pred_5 = _2716;
                    }
                    else
                    {
                        float _2913;
                        float _2914;
                        float _2915;
                        float _2916;
                        float _2917;
                        float _2918;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3212;
                        float _2926 = _2714;
                        float _2927 = _2715;
                        float _2928 = _2716;
                        float _2929 = _2717;
                        float _2930 = _2718;
                        float _2931 = _2719;
                        uint _2932 = _2729;
                        uint _2933;
                        vec4 _2958;
                        float _2959;
                        vec4 _2974;
                        vec3 _2986;
                        vec4 _3001;
                        vec4 _3017;
                        float _3063;
                        bool _3064;
                        for (;;)
                        {
                            uint _2943 = ((_2720 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2932));
                            _2933 = (_2932 + 4294967295u) & _2932;
                            uint _2945 = _2943 * 40u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            _2959 = _2958.w;
                            uint _2961 = (_2943 * 40u) + 4u;
                            _2974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2961 + 3u)).x));
                            uint _2976 = (_2943 * 40u) + 8u;
                            _2986 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x));
                            uint _2988 = (_2943 * 40u) + 16u;
                            _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3004 = (_2943 * 40u) + 20u;
                            _3017 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3004)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3004 + 3u)).x));
                            uint _3019 = (_2943 * 40u) + 24u;
                            vec4 _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3038 = (_2943 * 40u) + 28u;
                            vec4 _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            _3063 = fma(_1687, _3051.z, fma(_1686, _3051.y, _3051.x * _1685)) + _3051.w;
                            _3064 = !((fma(_1687, _3032.z, fma(_1686, _3032.y, _3032.x * _1685)) + _3032.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3064)
                            {
                                float _3091 = _2958.x - _1685;
                                float _3092 = _2958.y - _1686;
                                float _3093 = _2958.z - _1687;
                                float _3094 = dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093));
                                float _3097 = inversesqrt(_3094);
                                float _3098 = _3097 * _3091;
                                float _3099 = _3097 * _3092;
                                float _3100 = _3097 * _3093;
                                float _3104 = 1.0 - (_3094 / (_2959 * _2959));
                                float _4075 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3105 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3109 = sqrt(_3094) * _2974.w;
                                float _3111 = 1.39999997615814208984375 / (_3109 + 1.39999997615814208984375);
                                float _3112 = _3111 * _3111;
                                float _3115 = ((1.0 - _3112) * dot(vec3(_3098, _3099, _3100), vec3(_549, _552, _555))) + _3112;
                                float _3118 = _3109 * _3109;
                                float _3122 = (fma(_1687, _3001.z, fma(_1686, _3001.y, _3001.x * _1685)) + _3001.w) / _3063;
                                float _3123 = (fma(_1687, _3017.z, fma(_1686, _3017.y, _3017.x * _1685)) + _3017.w) / _3063;
                                float _3127 = 1.0 - dot(vec2(_3122, _3123), vec2(_3122, _3123));
                                float _4091 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3129 = _3128 * (((isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0))) * _3105) / ((_3118 * 0.699999988079071044921875) + 1.0));
                                float _3141 = exp2(log2(1.0 / ((_3118 * 3.5) + 5.0)) * 0.25);
                                float _3142 = 1.0 - _625;
                                float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                                float _3150 = _3149 * _3149;
                                float _3151 = _3150 * _3150;
                                float _3152 = _3098 - _2580;
                                float _3153 = _3099 - _2581;
                                float _3154 = _3100 - _2582;
                                float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                                float _3162 = dot(vec3(_549, _552, _555), vec3((-0.0) - _2580, (-0.0) - _2581, (-0.0) - _2582));
                                float _4102 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3165 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3166 = dot(vec3(_549, _552, _555), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                                float _4113 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3169 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                                float _3174 = _3111 * _3150;
                                float _3175 = _3174 * _3174;
                                float _3181 = ((1.0 - _3175) * dot(vec3(_549, _552, _555), vec3(_3098, _3099, _3100))) + _3175;
                                float _4124 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                                float _3182 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                                float _3183 = 1.0 - _3150;
                                float _3193 = (0.5 / (((_3182 * ((_3165 * _3183) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3182 * _3183) + _3150) * _3165))) * _3182;
                                float _4135 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3203 = (_3128 * _3105) * (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0)))) / ((_3173 * _3173) * ((_3118 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3203 * _2986.y;
                                frontier_phi_78_pred_1 = _3203 * _2986.x;
                                frontier_phi_78_pred_2 = _3129 * _2974.z;
                                frontier_phi_78_pred_3 = _3129 * _2974.y;
                                frontier_phi_78_pred_4 = _3129 * _2974.x;
                                frontier_phi_78_pred_5 = _3203 * _2986.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3208 = frontier_phi_78_pred;
                            _3207 = frontier_phi_78_pred_1;
                            _3212 = frontier_phi_78_pred_2;
                            _3211 = frontier_phi_78_pred_3;
                            _3210 = frontier_phi_78_pred_4;
                            _3209 = frontier_phi_78_pred_5;
                            _2916 = _3210 + _2929;
                            _2917 = _3211 + _2930;
                            _2918 = _3212 + _2931;
                            _2913 = _3207 + _2926;
                            _2914 = _3208 + _2927;
                            _2915 = _3209 + _2928;
                            if (_2933 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2915;
                                _2929 = _2916;
                                _2930 = _2917;
                                _2931 = _2918;
                                _2932 = _2933;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2914;
                        frontier_phi_72_pred_1 = _2913;
                        frontier_phi_72_pred_2 = _2918;
                        frontier_phi_72_pred_3 = _2917;
                        frontier_phi_72_pred_4 = _2916;
                        frontier_phi_72_pred_5 = _2915;
                    }
                    _2557 = frontier_phi_72_pred;
                    _2555 = frontier_phi_72_pred_1;
                    _2565 = frontier_phi_72_pred_2;
                    _2563 = frontier_phi_72_pred_3;
                    _2561 = frontier_phi_72_pred_4;
                    _2559 = frontier_phi_72_pred_5;
                    uint _2721 = _2720 + 1u;
                    if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2714 = _2555;
                        _2715 = _2557;
                        _2716 = _2559;
                        _2717 = _2561;
                        _2718 = _2563;
                        _2719 = _2565;
                        _2720 = _2721;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2565;
                frontier_phi_59_60_ladder_1 = _2561;
                frontier_phi_59_60_ladder_2 = _2559;
                frontier_phi_59_60_ladder_3 = _2557;
                frontier_phi_59_60_ladder_4 = _2555;
                frontier_phi_59_60_ladder_5 = _2563;
            }
            else
            {
                frontier_phi_59_60_ladder = _2426;
                frontier_phi_59_60_ladder_1 = _2422;
                frontier_phi_59_60_ladder_2 = _2420;
                frontier_phi_59_60_ladder_3 = _2418;
                frontier_phi_59_60_ladder_4 = _2416;
                frontier_phi_59_60_ladder_5 = _2424;
            }
            _2554 = frontier_phi_59_60_ladder_4;
            _2556 = frontier_phi_59_60_ladder_3;
            _2558 = frontier_phi_59_60_ladder_2;
            _2560 = frontier_phi_59_60_ladder_1;
            _2562 = frontier_phi_59_60_ladder_5;
            _2564 = frontier_phi_59_60_ladder;
        }
        float _2569 = isnan(1.0) ? _609 : (isnan(_609) ? 1.0 : min(_609, 1.0));
        _2305 = (_2569 * _2560) + _1973;
        _2307 = (_2569 * _2562) + _1974;
        _2309 = (_2569 * _2564) + _1975;
        _2311 = ((_2554 * _594) * _2569) + _2140;
        _2313 = ((_2556 * _596) * _2569) + _2141;
        _2315 = ((_2558 * _597) * _2569) + _2142;
    }
    else
    {
        _2305 = _1973;
        _2307 = _1974;
        _2309 = _1975;
        _2311 = _2140;
        _2313 = _2141;
        _2315 = _2142;
    }
    uint _2321 = _570 + uint(cbMatDynParam._m0[0u].w);
    float _4151 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4162 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4173 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2346 = (((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2305 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _609))) + ((_2311 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + (((_418 - (_418 * _288)) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2321].x);
    float _2348 = ((((_419 - (_419 * _288)) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2321].y) + ((_2313 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2307 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _609)));
    float _2350 = (((cbMtdParam._m0[9u].z * (_420 - (_420 * _288))) * cbInstanceData._m0[_2321].z) + ((_2315 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1418)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2309 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _609)));
    uint _2354 = _568 + 6u;
    float _2362 = _527 / cbSceneParam._m0[86u].x;
    float _2363 = _528 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _514 : (isnan(_514) ? cbSceneParam._m0[77u].w : min(_514, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_514 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_514) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _514 : min(cbSceneParam._m0[80u].w, _514));
        float _2442 = _2441 / _514;
        float _2453 = _2442 * _261;
        float _2454 = _262 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _263;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2676;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2676 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2615 = 1.0 / cbSceneParam._m0[80u].x;
            float _2616 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2617 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            float _2627 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : min(_2617, 0.0));
            _2676 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2626 - _2627) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0))))) * _2615)) - ((exp2(_2476 * _2626) - exp2(_2476 * _2627)) * _2615))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2678 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2687 = exp2((_2676 * (-1.44269502162933349609375)) * (1.0 - _2678.w));
        float _2688 = log2(_2687);
        float _2704 = log2(_2382);
        _2478 = (exp2(_2704 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].x)) * _2678.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2480 = (exp2(_2704 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].y)) * _2678.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2482 = (exp2(_2704 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2688 * cbSceneParam._m0[78u].z)) * _2678.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2484 = _2687 * _2382;
    }
    else
    {
        _2478 = _2379;
        _2480 = _2380;
        _2482 = _2381;
        _2484 = _2382;
    }
    float _2496 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2497 = _2496 == 3.0;
    float _2498 = log2(_2484);
    float _2505 = exp2(_2498 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0)));
    float _2506 = exp2(_2498 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0)));
    float _2507 = exp2(_2498 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0)));
    float _2516 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2516 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
    SV_Target.y = _2516 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
    SV_Target.z = _2516 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
    SV_Target.w = cbInstanceData._m0[_2354].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
}


