#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[24];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Interior_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Interior_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_Interior_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Interior_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 4) uniform texture2D M_Interior_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1119;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _290 = _284.w;
    float _303 = (((cbMtdParam._m0[12u].x - cbMtdParam._m0[11u].x) * _290) + cbMtdParam._m0[11u].x) * _284.x;
    float _305 = (((cbMtdParam._m0[12u].y - cbMtdParam._m0[11u].y) * _290) + cbMtdParam._m0[11u].y) * _284.y;
    float _307 = (((cbMtdParam._m0[12u].z - cbMtdParam._m0[11u].z) * _290) + cbMtdParam._m0[11u].z) * _284.z;
    float _333 = cbMtdParam._m0[22u].y + _263;
    float _334 = cbMtdParam._m0[22u].z + _264;
    float _335 = cbMtdParam._m0[22u].w + _265;
    float _349 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_192, _193, _194));
    float _350 = (-0.0) - dot(vec3(_333, _334, _335), vec3(_206, _207, _208));
    float _351 = (-0.0) - dot(vec3(_333, _334, _335), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _355 * _351;
    float _358 = (cbMtdParam._m0[19u].x * _349) * _355;
    float _360 = (cbMtdParam._m0[18u].w * _350) * _355;
    float _361 = fract(TEXCOORD.x);
    float _362 = fract(TEXCOORD.y);
    float _368;
    if (_358 > 0.0)
    {
        _368 = (1.0 - _361) / _358;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_358 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _361) / _358;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _368 = frontier_phi_3_2_ladder;
    }
    float _376;
    if (_360 > 0.0)
    {
        _376 = (1.0 - _362) / _360;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_360 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _362) / _360;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _376 = frontier_phi_7_6_ladder;
    }
    bool _378 = _356 > 0.0;
    float _380 = _378 ? (cbMtdParam._m0[15u].x / _356) : 5000.0;
    float _381 = isnan(_376) ? _368 : (isnan(_368) ? _376 : min(_368, _376));
    float _382 = isnan(_380) ? _381 : (isnan(_381) ? _380 : min(_381, _380));
    float _386 = cbMtdParam._m0[15u].y * cbMtdParam._m0[15u].x;
    float _387 = _361 + (-0.5);
    float _390 = _362 + (-0.5);
    float _393 = ((_382 * _356) + _386) / _386;
    vec4 _418 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * (((((_387 + (_382 * _358)) / _393) + 0.5) + (cbMtdParam._m0[16u].y - cbMtdParam._m0[19u].y * trunc(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y))) / cbMtdParam._m0[19u].y)) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * (((((_390 + (_382 * _360)) / _393) + 0.5) + floor(cbMtdParam._m0[16u].y / cbMtdParam._m0[19u].y)) / cbMtdParam._m0[19u].z)) + cbTextureTilingScale._m0[4u].w));
    float _420 = _418.x;
    float _421 = _418.y;
    float _422 = _418.z;
    float _434 = (_420 - (_420 * _290)) * cbMtdParam._m0[9u].x;
    float _435 = (_421 - (_421 * _290)) * cbMtdParam._m0[9u].y;
    float _436 = cbMtdParam._m0[9u].z * (_422 - (_422 * _290));
    float _458 = (cbMtdParam._m0[21u].x * _349) * _355;
    float _460 = (cbMtdParam._m0[20u].w * _350) * _355;
    bool _461 = _458 > 0.0;
    float _466;
    if (_461)
    {
        _466 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _466 = frontier_phi_11_10_ladder;
    }
    bool _468 = _460 > 0.0;
    float _473;
    if (_468)
    {
        _473 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _473 = frontier_phi_15_14_ladder;
    }
    float _476 = _378 ? (cbMtdParam._m0[16u].z / _356) : 5000.0;
    float _477 = isnan(_473) ? _466 : (isnan(_466) ? _473 : min(_466, _473));
    float _478 = isnan(_476) ? _477 : (isnan(_477) ? _476 : min(_477, _476));
    float _482 = cbMtdParam._m0[17u].z * cbMtdParam._m0[16u].z;
    float _486 = ((_478 * _356) + _482) / _482;
    float _491 = cbMtdParam._m0[17u].y - cbMtdParam._m0[18u].y * trunc(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    float _493 = floor(cbMtdParam._m0[17u].y / cbMtdParam._m0[18u].y);
    vec4 _509 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_478 * _458)) / _486) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_478 * _460)) / _486) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _514 = _509.x * cbMtdParam._m0[10u].x;
    float _515 = _509.y * cbMtdParam._m0[10u].y;
    float _516 = _509.z * cbMtdParam._m0[10u].z;
    float _524;
    if (_461)
    {
        _524 = (1.0 - _361) / _458;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_458 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _361) / _458;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _524 = frontier_phi_19_18_ladder;
    }
    float _530;
    if (_468)
    {
        _530 = (1.0 - _362) / _460;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_460 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _362) / _460;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _530 = frontier_phi_23_22_ladder;
    }
    float _532 = isnan(_530) ? _524 : (isnan(_524) ? _530 : min(_524, _530));
    float _533 = isnan(_476) ? _532 : (isnan(_532) ? _476 : min(_532, _476));
    float _540 = ((_533 * _356) + _482) / _482;
    vec4 _554 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_387 + (_533 * _458)) / _540) + 0.5) + _491) / cbMtdParam._m0[18u].y)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_390 + (_533 * _460)) / _540) + 0.5) + _493) / cbMtdParam._m0[18u].z)) + cbTextureTilingScale._m0[0u].w));
    float _556 = _554.w;
    float _558 = _556 - (_556 * _290);
    vec4 _582 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _584 = _582.x;
    vec4 _596 = texture(sampler2D(M_Interior_M1_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _604 = (_596.x * 2.0) + (-1.0);
    float _606 = (_596.y * 2.0) + (-1.0);
    float _607 = dot(vec2(_604, _606), vec2(_604, _606));
    float _3542 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _612 = sqrt(1.0 - (isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0))));
    float _613 = _596.z * _290;
    float _616 = fma(_612, _199, fma(_606, _206, _604 * _192));
    float _619 = fma(_612, _200, fma(_606, _207, _604 * _193));
    float _622 = fma(_612, _201, fma(_606, _208, _604 * _194));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    float _627 = _626 * _616;
    float _628 = _626 * _619;
    float _629 = _626 * _622;
    float _3553 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _630 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _3575 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _3586 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _3597 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _634 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
    float _650 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _654 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _655 = _263 * _654;
    float _656 = _264 * _654;
    float _657 = _265 * _654;
    float _663 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _664 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_629, cbSceneParam._m0[5u].z, fma(_628, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _627));
    float _688 = fma(_629, cbSceneParam._m0[6u].z, fma(_628, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _627));
    float _691 = fma(_629, cbSceneParam._m0[7u].z, fma(_628, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _627));
    uint _704 = uint(roundEven(NORMAL.w)) * 13u;
    uint _706 = _704 + 9u;
    uint _707 = _706 + uint(cbMatDynParam._m0[0u].w);
    float _713 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0)))) * cbInstanceData._m0[_707].x;
    float _714 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0)))) * cbInstanceData._m0[_707].y;
    float _715 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0)))) * cbInstanceData._m0[_707].z;
    float _3608 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _718 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
    float _719 = 1.0 - _634;
    float _720 = _716 * _719;
    float _721 = _717 * _719;
    float _722 = _718 * _719;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _634;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _634;
    float _729 = (_718 + (-0.039999999105930328369140625)) * _634;
    float _730 = _727 + 0.039999999105930328369140625;
    float _732 = _728 + 0.039999999105930328369140625;
    float _733 = _729 + 0.039999999105930328369140625;
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _663, cbSceneParam._m0[86u].y * _664));
    float _745 = _742.x * TEXCOORD.z;
    float _746 = dot(vec3(_627, _628, _629), vec3(_655, _656, _657));
    float _749 = _746 * 2.0;
    float _753 = (_749 * _627) - _655;
    float _754 = (_749 * _628) - _656;
    float _755 = (_749 * _629) - _657;
    float _759 = abs(dot(vec3(_655, _656, _657), vec3(_627, _628, _629)));
    float _3641 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _761 = sqrt(_630);
    float _774 = exp2((_761 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _780 = (1.0 - _774) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _781 = _774 * _761;
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _817 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1118;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _845 = fma(_817, cbModelParam._m0[26u].z, fma(_813, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _809));
        float _849 = fma(_817, cbModelParam._m0[27u].z, fma(_813, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _809));
        float _853 = fma(_817, cbModelParam._m0[28u].z, fma(_813, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _809));
        float _876 = _809 + _627;
        float _877 = _813 + _628;
        float _878 = _817 + _629;
        float _888 = fma(_878, cbModelParam._m0[26u].z, fma(_877, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876)) - _845;
        float _889 = fma(_878, cbModelParam._m0[27u].z, fma(_877, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876)) - _849;
        float _890 = fma(_878, cbModelParam._m0[28u].z, fma(_877, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876)) - _853;
        float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
        float _907 = ((_894 * _888) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_845 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _908 = ((_894 * _889) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_849 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _909 = ((_894 * _890) / cbModelParam._m0[34u].z) + ((((((_853 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_907, _908, _909), 0.0);
        float _946 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_912.x + (-0.5));
        float _948 = _946 * (_912.y + (-0.5));
        float _949 = _946 * (_912.z + (-0.5));
        float _956 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_919.x + (-0.5));
        float _958 = _956 * (_919.y + (-0.5));
        float _959 = _956 * (_919.z + (-0.5));
        float _966 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_926.x + (-0.5));
        float _968 = _966 * (_926.y + (-0.5));
        float _969 = _966 * (_926.z + (-0.5));
        float _976 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_933.x + (-0.5));
        float _978 = _976 * (_933.y + (-0.5));
        float _979 = _976 * (_933.z + (-0.5));
        float _980 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = _947 * 0.5;
        float _984 = _957 * 0.5;
        float _985 = _967 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _1000 = (dot(vec3(_627, _628, _629), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1010 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_980 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3689 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1012 + 1.0))) + _1017) * _980;
        float _1027 = _948 * 0.5;
        float _1028 = _958 * 0.5;
        float _1029 = _968 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_627, _628, _629), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3700 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3711 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3722 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * (_1054 + 1.0))) + _1059) * _981;
        float _1069 = _949 * 0.5;
        float _1070 = _959 * 0.5;
        float _1071 = _969 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_627, _628, _629), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3733 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3744 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3755 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1096 + 1.0))) + _1101) * _982;
        _1118 = _949;
        _1120 = _948;
        _1121 = _947;
        _1122 = _959;
        _1123 = _958;
        _1124 = _957;
        _1125 = _969;
        _1126 = _968;
        _1127 = _967;
        _1128 = _982;
        _1129 = _981;
        _1130 = _980;
        _1131 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1132 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1133 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _1119;
        _1120 = _1119;
        _1121 = _1119;
        _1122 = _1119;
        _1123 = _1119;
        _1124 = _1119;
        _1125 = _1119;
        _1126 = _1119;
        _1127 = _1119;
        _1128 = _1119;
        _1129 = _1119;
        _1130 = _1119;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1159 = fma(_817, cbModelParam._m0[30u].z, fma(_813, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _809));
        float _1163 = fma(_817, cbModelParam._m0[31u].z, fma(_813, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _809));
        float _1167 = fma(_817, cbModelParam._m0[32u].z, fma(_813, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _809));
        float _1190 = _809 + _627;
        float _1191 = _813 + _628;
        float _1192 = _817 + _629;
        float _1202 = fma(_1192, cbModelParam._m0[30u].z, fma(_1191, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190)) - _1159;
        float _1203 = fma(_1192, cbModelParam._m0[31u].z, fma(_1191, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190)) - _1163;
        float _1204 = fma(_1192, cbModelParam._m0[32u].z, fma(_1191, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190)) - _1167;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1159 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1163 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[35u].z) + ((((((_1167 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1258 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1225.x + (-0.5));
        float _1260 = _1258 * (_1225.y + (-0.5));
        float _1261 = _1258 * (_1225.z + (-0.5));
        float _1268 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1232.x + (-0.5));
        float _1270 = _1268 * (_1232.y + (-0.5));
        float _1271 = _1268 * (_1232.z + (-0.5));
        float _1278 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1239.x + (-0.5));
        float _1280 = _1278 * (_1239.y + (-0.5));
        float _1281 = _1278 * (_1239.z + (-0.5));
        float _1288 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1246.x + (-0.5));
        float _1290 = _1288 * (_1246.y + (-0.5));
        float _1291 = _1288 * (_1246.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_627, _628, _629), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3818 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1322 + 1.0))) + _1327) * _1292;
        float _1337 = _1260 * 0.5;
        float _1338 = _1270 * 0.5;
        float _1339 = _1280 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_627, _628, _629), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3829 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _3840 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3851 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1364 + 1.0))) + _1369) * _1293;
        float _1379 = _1261 * 0.5;
        float _1380 = _1271 * 0.5;
        float _1381 = _1281 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_627, _628, _629), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3862 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3873 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3884 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1406 + 1.0))) + _1411) * _1294;
        _1428 = _1261;
        _1429 = _1260;
        _1430 = _1259;
        _1431 = _1271;
        _1432 = _1270;
        _1433 = _1269;
        _1434 = _1281;
        _1435 = _1280;
        _1436 = _1279;
        _1437 = _1294;
        _1438 = _1293;
        _1439 = _1292;
        _1440 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1441 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1442 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
    }
    else
    {
        _1428 = _1119;
        _1429 = _1119;
        _1430 = _1119;
        _1431 = _1119;
        _1432 = _1119;
        _1433 = _1119;
        _1434 = _1119;
        _1435 = _1119;
        _1436 = _1119;
        _1437 = _1119;
        _1438 = _1119;
        _1439 = _1119;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1452 = (cbModelParam._m0[1u].x * (_1440 - _1131)) + _1131;
    float _1453 = (cbModelParam._m0[1u].x * (_1441 - _1132)) + _1132;
    float _1454 = (cbModelParam._m0[1u].x * (_1442 - _1133)) + _1133;
    float _1475 = fma(_1454, cbSceneParam._m0[89u].z, fma(_1453, cbSceneParam._m0[89u].y, _1452 * cbSceneParam._m0[89u].x));
    float _1478 = fma(_1454, cbSceneParam._m0[90u].z, fma(_1453, cbSceneParam._m0[90u].y, _1452 * cbSceneParam._m0[90u].x));
    float _1481 = fma(_1454, cbSceneParam._m0[91u].z, fma(_1453, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1452));
    float _1496 = _753 * 0.5;
    float _1497 = _754 * 0.5;
    float _1498 = _755 * 0.5;
    float _1499 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1430, _1433, _1436, _1439));
    float _1502 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1429, _1432, _1435, _1438));
    float _1505 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1428, _1431, _1434, _1437));
    float _1539;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1512 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1118, _1122, _1125, _1128));
        float _1516 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1120, _1123, _1126, _1129));
        float _1520 = dot(vec4(_1496, _1497, _1498, 1.0), vec4(_1121, _1124, _1127, _1130));
        float _1527 = dot(vec4(cbModelParam._m0[39u]), vec4(_1496, _1497, _1498, 1.0));
        _1539 = dot(vec3(isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1527) ? 0.0 : (isnan(0.0) ? _1527 : max(0.0, _1527))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1539 = 1.0;
    }
    float _1550;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1541 = dot(vec4(cbModelParam._m0[40u]), vec4(_1496, _1497, _1498, 1.0));
        _1550 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)), isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1541) ? 0.0 : (isnan(0.0) ? _1541 : max(0.0, _1541))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1550 = 1.0;
    }
    float _1554 = (_1550 * cbModelParam._m0[1u].x) + (_1539 * (1.0 - cbModelParam._m0[1u].x));
    float _1564 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _630);
    float _1565 = isnan(_1564) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1564 : min(cbModelParam._m0[25u].z, _1564));
    float _1646;
    float _1648;
    float _1650;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1613 = fma(_817, cbModelParam._m0[13u].z, fma(_813, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _809)) + cbModelParam._m0[13u].w;
        float _1617 = fma(_817, cbModelParam._m0[14u].z, fma(_813, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _809)) + cbModelParam._m0[14u].w;
        float _1621 = fma(_817, cbModelParam._m0[15u].z, fma(_813, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _809)) + cbModelParam._m0[15u].w;
        float _1624 = fma(_755, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _753));
        float _1627 = fma(_755, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _753));
        float _1630 = fma(_755, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _753));
        float _1658;
        if (_1624 > 0.0)
        {
            _1658 = abs((1.0 - _1613) / _1624);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1613 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1658 = frontier_phi_38_36_ladder;
        }
        float _1828;
        if (_1627 > 0.0)
        {
            _1828 = abs((1.0 - _1617) / _1627);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1627 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1617 + 1.0) / _1627);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1828 = frontier_phi_47_43_ladder;
        }
        float _2283;
        if (_1630 > 0.0)
        {
            _2283 = abs((1.0 - _1621) / _1630);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1621 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2283 = frontier_phi_59_54_ladder;
        }
        float _2285 = isnan(_1828) ? _1658 : (isnan(_1658) ? _1828 : min(_1658, _1828));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1624) + _1613;
        float _2291 = (_2286 * _1627) + _1617;
        float _2292 = (_2286 * _1630) + _1621;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1565);
            frontier_phi_37_59_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1646 = frontier_phi_37_59_ladder_2;
        _1648 = frontier_phi_37_59_ladder_1;
        _1650 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1634 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_753, _754, _755), _1565);
        _1646 = _1634.x * cbModelParam._m0[1u].y;
        _1648 = _1634.y * cbModelParam._m0[1u].y;
        _1650 = _1634.z * cbModelParam._m0[1u].y;
    }
    float _1654 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _630);
    float _1655 = isnan(_1654) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1654 : min(cbModelParam._m0[25u].w, _1654));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_817, cbModelParam._m0[21u].z, fma(_813, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _809)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_817, cbModelParam._m0[22u].z, fma(_813, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _809)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_817, cbModelParam._m0[23u].z, fma(_813, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _809)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_755, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _753));
        float _1721 = fma(_755, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _753));
        float _1724 = fma(_755, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _753));
        float _1833;
        if (_1718 > 0.0)
        {
            _1833 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1833 = frontier_phi_49_45_ladder;
        }
        float _2310;
        if (_1721 > 0.0)
        {
            _2310 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2310 = frontier_phi_61_56_ladder;
        }
        float _2663;
        if (_1724 > 0.0)
        {
            _2663 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2663 = frontier_phi_73_68_ladder;
        }
        float _2665 = isnan(_2310) ? _1833 : (isnan(_1833) ? _2310 : min(_1833, _2310));
        float _2666 = isnan(_2663) ? _2665 : (isnan(_2665) ? _2663 : min(_2665, _2663));
        float _2670 = (_2666 * _1718) + _1707;
        float _2671 = (_2666 * _1721) + _1711;
        float _2672 = (_2666 * _1724) + _1715;
        float _2673 = _2666 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2673;
        float _2676 = _2673 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2672 > _2676) || ((_2672 < _2674) || ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 < _2674) || (_2670 > _2676))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2793 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2672, cbModelParam._m0[17u].z, fma(_2671, cbModelParam._m0[17u].y, _2670 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2672, cbModelParam._m0[18u].z, fma(_2671, cbModelParam._m0[18u].y, _2670 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2672, cbModelParam._m0[19u].z, fma(_2671, cbModelParam._m0[19u].y, _2670 * cbModelParam._m0[19u].x))), _1655);
            frontier_phi_46_73_ladder = _2793.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2793.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2793.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_46_73_ladder_2;
        _1745 = frontier_phi_46_73_ladder_1;
        _1747 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_753, _754, _755), _1655);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1760 = (((_780 * _730) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1743 - _1646)) + _1646);
    float _1762 = (((_780 * _732) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1745 - _1648)) + _1648);
    float _1764 = (((_780 * _733) + _781) * _745) * ((cbModelParam._m0[1u].w * (_1747 - _1650)) + _1650);
    float _1767 = fma(_1764, cbSceneParam._m0[89u].z, fma(_1762, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1770 = fma(_1764, cbSceneParam._m0[90u].z, fma(_1762, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1773 = fma(_1764, cbSceneParam._m0[91u].z, fma(_1762, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    float _1807 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1811 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1815 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1820 = _1807 / _1819;
    float _1821 = _1811 / _1819;
    float _1822 = _1815 / _1819;
    float _1969;
    float _1970;
    float _1971;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1849 = ((uint(_1822 > cbSceneParam._m0[59u].y) + uint(_1822 > cbSceneParam._m0[59u].x)) + uint(_1822 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1850 = _1849 + 43u;
        uint _1858 = _1849 + 44u;
        uint _1866 = _1849 + 45u;
        uint _1874 = _1849 + 46u;
        float _1885 = fma(_1819, cbSceneParam._m0[_1850].w, fma(_1815, cbSceneParam._m0[_1850].z, fma(_1811, cbSceneParam._m0[_1850].y, _1807 * cbSceneParam._m0[_1850].x)));
        float _1889 = fma(_1819, cbSceneParam._m0[_1858].w, fma(_1815, cbSceneParam._m0[_1858].z, fma(_1811, cbSceneParam._m0[_1858].y, _1807 * cbSceneParam._m0[_1858].x)));
        float _1897 = fma(_1819, cbSceneParam._m0[_1874].w, fma(_1815, cbSceneParam._m0[_1874].z, fma(_1811, cbSceneParam._m0[_1874].y, _1807 * cbSceneParam._m0[_1874].x)));
        float _1902 = cbSceneParam._m0[33u].z * _1897;
        float _1904 = cbSceneParam._m0[33u].w * _1897;
        float _1907 = fma(_1819, cbSceneParam._m0[_1866].w, fma(_1815, cbSceneParam._m0[_1866].z, fma(_1811, cbSceneParam._m0[_1866].y, _1807 * cbSceneParam._m0[_1866].x))) / _1897;
        float _1955 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
        float _4010 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1962 = (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 + _1885) / _1897, (_1904 + _1889) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 + _1885) / _1897, (_1889 - _1902) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1902) / _1897, (_1889 - _1904) / _1897), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1885 - _1904) / _1897, (_1902 + _1889) / _1897), _1907), 0.0)).x), vec4(0.25)));
        _1969 = 1.0 - (_1962 * cbSceneParam._m0[34u].x);
        _1970 = 1.0 - (_1962 * cbSceneParam._m0[34u].y);
        _1971 = 1.0 - (_1962 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1969 = 1.0;
        _1970 = 1.0;
        _1971 = 1.0;
    }
    float _2035;
    float _2037;
    float _2039;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2023 = fma(_1819, cbSceneParam._m0[63u].w, fma(_1815, cbSceneParam._m0[63u].z, fma(_1811, cbSceneParam._m0[63u].y, _1807 * cbSceneParam._m0[63u].x)));
        float _2024 = fma(_1819, cbSceneParam._m0[60u].w, fma(_1815, cbSceneParam._m0[60u].z, fma(_1811, cbSceneParam._m0[60u].y, _1807 * cbSceneParam._m0[60u].x))) / _2023;
        float _2025 = fma(_1819, cbSceneParam._m0[61u].w, fma(_1815, cbSceneParam._m0[61u].z, fma(_1811, cbSceneParam._m0[61u].y, _1807 * cbSceneParam._m0[61u].x))) / _2023;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2024 >= cbSceneParam._m0[64u].x) && (_2025 >= cbSceneParam._m0[64u].y)) && (_2024 <= cbSceneParam._m0[64u].z)) && (_2025 <= cbSceneParam._m0[64u].w))
        {
            float _2323 = fma(_1819, cbSceneParam._m0[62u].w, fma(_1815, cbSceneParam._m0[62u].z, fma(_1811, cbSceneParam._m0[62u].y, _1807 * cbSceneParam._m0[62u].x))) / _2023;
            float _2327 = isnan(cbSceneParam._m0[41u].w) ? _2323 : (isnan(_2323) ? cbSceneParam._m0[41u].w : max(_2323, cbSceneParam._m0[41u].w));
            float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822))) * cbSceneParam._m0[33u].y;
            float _4026 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
            float _2377 = (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2024, cbSceneParam._m0[33u].w + _2025), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2024, _2025 - cbSceneParam._m0[33u].z), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].z, _2025 - cbSceneParam._m0[33u].w), _2327), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2024 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2025), _2327), 0.0)).x), vec4(0.25)));
            float _2381 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
            float _2382 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
            float _2383 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2383) ? _1971 : (isnan(_1971) ? _2383 : min(_1971, _2383));
            frontier_phi_58_57_ladder_1 = isnan(_2382) ? _1970 : (isnan(_1970) ? _2382 : min(_1970, _2382));
            frontier_phi_58_57_ladder_2 = isnan(_2381) ? _1969 : (isnan(_1969) ? _2381 : min(_1969, _2381));
        }
        else
        {
            frontier_phi_58_57_ladder = _1971;
            frontier_phi_58_57_ladder_1 = _1970;
            frontier_phi_58_57_ladder_2 = _1969;
        }
        _2035 = frontier_phi_58_57_ladder_2;
        _2037 = frontier_phi_58_57_ladder_1;
        _2039 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2035 = _1969;
        _2037 = _1970;
        _2039 = _1971;
    }
    uvec4 _2044 = floatBitsToUint(cbInstanceData._m0[_704 + 5u]);
    uint _2046 = _2044.x * 14u;
    uint _2047 = _2046 + 13u;
    float _2052 = _745 + (-1.0);
    float _2055 = (cbLight._m0[_2047].x * _2052) + 1.0;
    float _2056 = (cbLight._m0[_2047].y * _2052) + 1.0;
    uint _2057 = _2046 + 5u;
    float _2063 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2067 = _2046 + 4u;
    float _2076 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2080 = _2046 | 1u;
    float _2091 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_627, _628, _629));
    float _2094 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_627, _628, _629));
    float _4062 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _4073 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2099 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _2101 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _2108 = ((cbLight._m0[_2057].x * _2063) * _2101) + (((cbLight._m0[_2067].x * _2035) * _2076) * _2099);
    float _2109 = ((_2063 * cbLight._m0[_2057].y) * _2101) + (((cbLight._m0[_2067].y * _2037) * _2076) * _2099);
    float _2110 = ((_2063 * cbLight._m0[_2057].z) * _2101) + (((cbLight._m0[_2067].z * _2039) * _2076) * _2099);
    uint _2112 = _2046 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2046].w)) * _630) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_2046].x + _655;
    float _2128 = cbLight._m0[_2046].y + _656;
    float _2129 = cbLight._m0[_2046].z + _657;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2046].xyz));
    float _4084 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2141 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2142 = dot(vec3(_627, _628, _629), vec3(_2134, _2135, _2136));
    float _4106 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_2046].xyz), vec3(_2134, _2135, _2136));
    float _4117 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2162 = exp2(log2(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * 5.0);
    float _2163 = 0.959999978542327880859375 - _727;
    float _2165 = 0.959999978542327880859375 - _728;
    float _2166 = 0.959999978542327880859375 - _729;
    float _2173 = 1.0 - _2126;
    float _2184 = (0.5 / (((_2141 * ((_2140 * _2173) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2173) + _2126) * _2140))) * _2140;
    float _4128 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2200 = _2046 + 9u;
    float _2211 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2080].w)) * _630) * 0.949999988079071044921875);
    float _2212 = _2211 * _2211;
    float _2213 = cbLight._m0[_2080].x + _655;
    float _2214 = cbLight._m0[_2080].y + _656;
    float _2215 = cbLight._m0[_2080].z + _657;
    float _2219 = inversesqrt(dot(vec3(_2213, _2214, _2215), vec3(_2213, _2214, _2215)));
    float _2220 = _2219 * _2213;
    float _2221 = _2219 * _2214;
    float _2222 = _2219 * _2215;
    float _2223 = dot(vec3(_627, _628, _629), vec3(cbLight._m0[_2080].xyz));
    float _4139 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2227 = dot(vec3(_627, _628, _629), vec3(_2220, _2221, _2222));
    float _4150 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    float _2231 = dot(vec3(cbLight._m0[_2080].xyz), vec3(_2220, _2221, _2222));
    float _4161 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = _2212 * _2212;
    float _2239 = ((_2230 * _2230) * (_2235 + (-1.0))) + 1.0;
    float _2246 = exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0);
    float _2253 = 1.0 - _2212;
    float _2263 = (0.5 / (((_2141 * ((_2226 * _2253) + _2212)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2253) + _2212) * _2226))) * _2226;
    float _4172 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2235 / ((_2239 * _2239) * 3.141590118408203125));
    float _2275 = (((((_2246 * _2163) + _730) * cbLight._m0[_2200].x) * _2265) * _2063) + ((((cbLight._m0[_2112].x * _2035) * ((_2162 * _2163) + _730)) * _2186) * _2076);
    float _2276 = (((((_2246 * _2165) + _732) * cbLight._m0[_2200].y) * _2265) * _2063) + ((((cbLight._m0[_2112].y * _2037) * ((_2162 * _2165) + _732)) * _2186) * _2076);
    float _2277 = (((((_2246 * _2166) + _733) * cbLight._m0[_2200].z) * _2265) * _2063) + ((((cbLight._m0[_2112].z * _2039) * ((_2162 * _2166) + _733)) * _2186) * _2076);
    float _2440;
    float _2442;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_2044.y == 0u)
    {
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.x;
        uint _2407 = uint((float(_2395.y) * floor(float(uint(cbSceneParam._m0[85u].y * _664) / _2396))) + floor(float(uint(cbSceneParam._m0[85u].x * _663) / _2396)));
        float _2417 = (log2(_1822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2418 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        uint _2421 = uint(isnan(14.0) ? _2418 : (isnan(_2418) ? 14.0 : min(_2418, 14.0)));
        uvec4 _2426 = texelFetch(g_lightClusterGridBuffer, int(((_2421 << 2u) + (_2407 << 6u)) >> 2u));
        uint _2427 = _2426.x;
        uint _2428 = _2395.z;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        float _2561;
        if (((((1u << ((_2428 >> 4u) & 15u)) + 4294967295u) & _2427) == 0u) || ((_2428 & 240u) == 0u))
        {
            _2551 = 0.0;
            _2553 = 0.0;
            _2555 = 0.0;
            _2557 = 0.0;
            _2559 = 0.0;
            _2561 = 0.0;
        }
        else
        {
            float _2552;
            float _2554;
            float _2556;
            float _2558;
            float _2560;
            float _2562;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            uint _2727 = 0u;
            uint _2736;
            bool _2737;
            for (;;)
            {
                _2736 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2727 << 2u)) >> 2u)).x;
                _2737 = _2736 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2737)
                {
                    frontier_phi_82_pred = _2721;
                    frontier_phi_82_pred_1 = _2726;
                    frontier_phi_82_pred_2 = _2725;
                    frontier_phi_82_pred_3 = _2724;
                    frontier_phi_82_pred_4 = _2723;
                    frontier_phi_82_pred_5 = _2722;
                }
                else
                {
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    uint _2872;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2726;
                    _2872 = _2736;
                    float _2798;
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    for (;;)
                    {
                        uint _2876 = uint(findLSB(_2872)) + (_2727 << 5u);
                        uint _2873 = (_2872 + 4294967295u) & _2872;
                        uint _2878 = _2876 * 48u;
                        vec4 _2892 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2898 = (_2876 * 48u) + 4u;
                        vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2898)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2898 + 3u)).x));
                        uint _2917 = (_2876 * 48u) + 8u;
                        vec3 _2928 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2917)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2917 + 2u)).x));
                        float _2932 = _2892.x - _1820;
                        float _2933 = _2892.y - _1821;
                        float _2934 = _2892.z - _1822;
                        float _2935 = dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934));
                        float _2938 = inversesqrt(_2935);
                        float _2939 = _2938 * _2932;
                        float _2940 = _2938 * _2933;
                        float _2941 = _2938 * _2934;
                        float _2942 = dot(vec3(_685, _688, _691), vec3(_2939, _2940, _2941));
                        float _2947 = 1.0 - (_2935 * _2892.w);
                        float _4193 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                        float _2948 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                        float _2949 = sqrt(_2935) * _2911.w;
                        float _2952 = 1.39999997615814208984375 / (_2949 + 1.39999997615814208984375);
                        float _2953 = _2952 * _2952;
                        float _2956 = ((1.0 - _2953) * _2942) + _2953;
                        float _2959 = _2949 * _2949;
                        float _2963 = ((isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))) * _2948) / ((_2959 * 0.699999988079071044921875) + 1.0);
                        float _2967 = (-0.0) - _1820;
                        float _2968 = (-0.0) - _1821;
                        float _2969 = (-0.0) - _1822;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2974 = _2973 * _2967;
                        float _2975 = _2973 * _2968;
                        float _2976 = _2973 * _2969;
                        float _2983 = exp2(log2(1.0 / ((_2959 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _761;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2974 + _2939;
                        float _2995 = _2975 + _2940;
                        float _2996 = _2976 + _2941;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_685, _688, _691), vec3(_2974, _2975, _2976));
                        float _4209 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _3008 = dot(vec3(_685, _688, _691), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4220 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2952 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2942) + _3017;
                        float _4231 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4242 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) / ((_3015 * _3015) * ((_2959 * 2.1991131305694580078125) + 3.141590118408203125))) * _2948;
                        _2801 = (_2963 * _2911.x) + _2869;
                        _2802 = (_2963 * _2911.y) + _2870;
                        _2803 = (_2963 * _2911.z) + _2871;
                        _2798 = (_3043 * _2928.x) + _2866;
                        _2799 = (_3043 * _2928.y) + _2867;
                        _2800 = (_3043 * _2928.z) + _2868;
                        if (_2873 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2866 = _2798;
                            _2867 = _2799;
                            _2868 = _2800;
                            _2869 = _2801;
                            _2870 = _2802;
                            _2871 = _2803;
                            _2872 = _2873;
                        }
                    }
                    frontier_phi_82_pred = _2798;
                    frontier_phi_82_pred_1 = _2803;
                    frontier_phi_82_pred_2 = _2802;
                    frontier_phi_82_pred_3 = _2801;
                    frontier_phi_82_pred_4 = _2800;
                    frontier_phi_82_pred_5 = _2799;
                }
                _2552 = frontier_phi_82_pred;
                _2562 = frontier_phi_82_pred_1;
                _2560 = frontier_phi_82_pred_2;
                _2558 = frontier_phi_82_pred_3;
                _2556 = frontier_phi_82_pred_4;
                _2554 = frontier_phi_82_pred_5;
                uint _2728 = _2727 + 1u;
                if (_2728 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2721 = _2552;
                    _2722 = _2554;
                    _2723 = _2556;
                    _2724 = _2558;
                    _2725 = _2560;
                    _2726 = _2562;
                    _2727 = _2728;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2551 = _2552;
            _2553 = _2554;
            _2555 = _2556;
            _2557 = _2558;
            _2559 = _2560;
            _2561 = _2562;
        }
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.z;
        uint _2568 = (_2566 >> 8u) & 15u;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        if (((4294967295u << _2568) & _2427) == 0u)
        {
            _2689 = _2551;
            _2691 = _2553;
            _2693 = _2555;
            _2695 = _2557;
            _2697 = _2559;
            _2699 = _2561;
        }
        else
        {
            float _2714 = inversesqrt(dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822)));
            float _2715 = _2714 * _1820;
            float _2716 = _2714 * _1821;
            float _2717 = _2714 * _1822;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2568 < ((_2566 >> 12u) & 15u))
            {
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2698;
                float _2700;
                float _2849 = _2551;
                float _2850 = _2553;
                float _2851 = _2555;
                float _2852 = _2557;
                float _2853 = _2559;
                float _2854 = _2561;
                uint _2855 = _2568;
                uint _2864;
                bool _2865;
                for (;;)
                {
                    _2864 = texelFetch(g_lightClassification, int((((_2421 << 5u) + (_2407 << 9u)) + (_2855 << 2u)) >> 2u)).x;
                    _2865 = _2864 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2865)
                    {
                        frontier_phi_88_pred = _2852;
                        frontier_phi_88_pred_1 = _2853;
                        frontier_phi_88_pred_2 = _2854;
                        frontier_phi_88_pred_3 = _2851;
                        frontier_phi_88_pred_4 = _2850;
                        frontier_phi_88_pred_5 = _2849;
                    }
                    else
                    {
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _3052;
                        float _3053;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3061 = _2849;
                        float _3062 = _2850;
                        float _3063 = _2851;
                        float _3064 = _2852;
                        float _3065 = _2853;
                        float _3066 = _2854;
                        uint _3067 = _2864;
                        uint _3068;
                        vec4 _3093;
                        float _3094;
                        vec4 _3109;
                        vec3 _3121;
                        vec4 _3136;
                        vec4 _3151;
                        float _3197;
                        bool _3198;
                        for (;;)
                        {
                            uint _3078 = ((_2855 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3067));
                            _3068 = (_3067 + 4294967295u) & _3067;
                            uint _3080 = _3078 * 40u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            _3094 = _3093.w;
                            uint _3096 = (_3078 * 40u) + 4u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3111 = (_3078 * 40u) + 8u;
                            _3121 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x));
                            uint _3123 = (_3078 * 40u) + 16u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3138 = (_3078 * 40u) + 20u;
                            _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3153 = (_3078 * 40u) + 24u;
                            vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3172 = (_3078 * 40u) + 28u;
                            vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3172)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3172 + 3u)).x));
                            _3197 = fma(_1822, _3185.z, fma(_1821, _3185.y, _3185.x * _1820)) + _3185.w;
                            _3198 = !((fma(_1822, _3166.z, fma(_1821, _3166.y, _3166.x * _1820)) + _3166.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3198)
                            {
                                float _3225 = _3093.x - _1820;
                                float _3226 = _3093.y - _1821;
                                float _3227 = _3093.z - _1822;
                                float _3228 = dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227));
                                float _3231 = inversesqrt(_3228);
                                float _3232 = _3231 * _3225;
                                float _3233 = _3231 * _3226;
                                float _3234 = _3231 * _3227;
                                float _3238 = 1.0 - (_3228 / (_3094 * _3094));
                                float _4253 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3239 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
                                float _3243 = sqrt(_3228) * _3109.w;
                                float _3245 = 1.39999997615814208984375 / (_3243 + 1.39999997615814208984375);
                                float _3246 = _3245 * _3245;
                                float _3249 = ((1.0 - _3246) * dot(vec3(_3232, _3233, _3234), vec3(_685, _688, _691))) + _3246;
                                float _3252 = _3243 * _3243;
                                float _3256 = (fma(_1822, _3136.z, fma(_1821, _3136.y, _3136.x * _1820)) + _3136.w) / _3197;
                                float _3257 = (fma(_1822, _3151.z, fma(_1821, _3151.y, _3151.x * _1820)) + _3151.w) / _3197;
                                float _3261 = 1.0 - dot(vec2(_3256, _3257), vec2(_3256, _3257));
                                float _4269 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3262 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3263 = _3262 * (((isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0))) * _3239) / ((_3252 * 0.699999988079071044921875) + 1.0));
                                float _3275 = exp2(log2(1.0 / ((_3252 * 3.5) + 5.0)) * 0.25);
                                float _3276 = 1.0 - _761;
                                float _3283 = sqrt(1.0 - ((1.0 - (_3276 * _3276)) * (1.0 - (_3275 * _3275))));
                                float _3284 = _3283 * _3283;
                                float _3285 = _3284 * _3284;
                                float _3286 = _3232 - _2715;
                                float _3287 = _3233 - _2716;
                                float _3288 = _3234 - _2717;
                                float _3292 = inversesqrt(dot(vec3(_3286, _3287, _3288), vec3(_3286, _3287, _3288)));
                                float _3296 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2715, (-0.0) - _2716, (-0.0) - _2717));
                                float _4280 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                                float _3299 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3300 = dot(vec3(_685, _688, _691), vec3(_3292 * _3286, _3292 * _3287, _3292 * _3288));
                                float _4291 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3303 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3307 = ((_3303 * _3303) * (_3285 + (-1.0))) + 1.0;
                                float _3308 = _3245 * _3284;
                                float _3309 = _3308 * _3308;
                                float _3315 = ((1.0 - _3309) * dot(vec3(_685, _688, _691), vec3(_3232, _3233, _3234))) + _3309;
                                float _4302 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0));
                                float _3316 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
                                float _3317 = 1.0 - _3284;
                                float _3327 = (0.5 / (((_3316 * ((_3299 * _3317) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_3316 * _3317) + _3284) * _3299))) * _3316;
                                float _4313 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3337 = (_3262 * _3239) * (((_3285 * 3.1415927410125732421875) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) / ((_3307 * _3307) * ((_3252 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3337 * _3121.x;
                                frontier_phi_94_pred_1 = _3337 * _3121.y;
                                frontier_phi_94_pred_2 = _3263 * _3109.z;
                                frontier_phi_94_pred_3 = _3263 * _3109.y;
                                frontier_phi_94_pred_4 = _3263 * _3109.x;
                                frontier_phi_94_pred_5 = _3337 * _3121.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3341 = frontier_phi_94_pred;
                            _3342 = frontier_phi_94_pred_1;
                            _3346 = frontier_phi_94_pred_2;
                            _3345 = frontier_phi_94_pred_3;
                            _3344 = frontier_phi_94_pred_4;
                            _3343 = frontier_phi_94_pred_5;
                            _3051 = _3344 + _3064;
                            _3052 = _3345 + _3065;
                            _3053 = _3346 + _3066;
                            _3048 = _3341 + _3061;
                            _3049 = _3342 + _3062;
                            _3050 = _3343 + _3063;
                            if (_3068 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3061 = _3048;
                                _3062 = _3049;
                                _3063 = _3050;
                                _3064 = _3051;
                                _3065 = _3052;
                                _3066 = _3053;
                                _3067 = _3068;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3051;
                        frontier_phi_88_pred_1 = _3052;
                        frontier_phi_88_pred_2 = _3053;
                        frontier_phi_88_pred_3 = _3050;
                        frontier_phi_88_pred_4 = _3049;
                        frontier_phi_88_pred_5 = _3048;
                    }
                    _2696 = frontier_phi_88_pred;
                    _2698 = frontier_phi_88_pred_1;
                    _2700 = frontier_phi_88_pred_2;
                    _2694 = frontier_phi_88_pred_3;
                    _2692 = frontier_phi_88_pred_4;
                    _2690 = frontier_phi_88_pred_5;
                    uint _2856 = _2855 + 1u;
                    if (_2856 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2849 = _2690;
                        _2850 = _2692;
                        _2851 = _2694;
                        _2852 = _2696;
                        _2853 = _2698;
                        _2854 = _2700;
                        _2855 = _2856;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2698;
                frontier_phi_75_76_ladder_1 = _2700;
                frontier_phi_75_76_ladder_2 = _2696;
                frontier_phi_75_76_ladder_3 = _2694;
                frontier_phi_75_76_ladder_4 = _2692;
                frontier_phi_75_76_ladder_5 = _2690;
            }
            else
            {
                frontier_phi_75_76_ladder = _2559;
                frontier_phi_75_76_ladder_1 = _2561;
                frontier_phi_75_76_ladder_2 = _2557;
                frontier_phi_75_76_ladder_3 = _2555;
                frontier_phi_75_76_ladder_4 = _2553;
                frontier_phi_75_76_ladder_5 = _2551;
            }
            _2689 = frontier_phi_75_76_ladder_5;
            _2691 = frontier_phi_75_76_ladder_4;
            _2693 = frontier_phi_75_76_ladder_3;
            _2695 = frontier_phi_75_76_ladder_2;
            _2697 = frontier_phi_75_76_ladder;
            _2699 = frontier_phi_75_76_ladder_1;
        }
        float _2704 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
        _2440 = (_2704 * _2695) + _2108;
        _2442 = (_2704 * _2697) + _2109;
        _2444 = (_2704 * _2699) + _2110;
        _2446 = ((_2689 * _730) * _2704) + _2275;
        _2448 = ((_2691 * _732) * _2704) + _2276;
        _2450 = ((_2693 * _733) * _2704) + _2277;
    }
    else
    {
        _2440 = _2108;
        _2442 = _2109;
        _2444 = _2110;
        _2446 = _2275;
        _2448 = _2276;
        _2450 = _2277;
    }
    uint _2456 = _706 + uint(cbMatDynParam._m0[0u].w);
    float _4329 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4340 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _4351 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _2481 = (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2440 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _745))) + ((_2446 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2456].x * ((_558 * ((_514 - _434) - (_514 * _290))) + _434));
    float _2483 = ((cbInstanceData._m0[_2456].y * ((_558 * ((_515 - _435) - (_515 * _290))) + _435)) + ((_2448 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2442 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _745)));
    float _2485 = ((cbInstanceData._m0[_2456].z * ((_558 * ((_516 - _436) - (_516 * _290))) + _436)) + ((_2450 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1554)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2444 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _745)));
    uint _2489 = _704 + 6u;
    float _2497 = _663 / cbSceneParam._m0[86u].x;
    float _2498 = _664 / cbSceneParam._m0[86u].y;
    vec4 _2512 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, (log2((isnan(cbSceneParam._m0[77u].w) ? _650 : (isnan(_650) ? cbSceneParam._m0[77u].w : min(_650, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2514 = _2512.x;
    float _2515 = _2512.y;
    float _2516 = _2512.z;
    float _2517 = _2512.w;
    float _2613;
    float _2615;
    float _2617;
    float _2619;
    if (_650 > cbSceneParam._m0[78u].w)
    {
        float _2576 = isnan(_650) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _650 : min(cbSceneParam._m0[80u].w, _650));
        float _2577 = _2576 / _650;
        float _2588 = _2577 * _263;
        float _2589 = _264 * _2577;
        float _2590 = (-0.0) - _2589;
        float _2591 = _2577 * _265;
        float _2593 = (cbSceneParam._m0[77u].w * _2590) / _2576;
        float _2594 = _2593 + cbSceneParam._m0[79u].w;
        float _2595 = cbSceneParam._m0[79u].w - _2589;
        float _2601 = sqrt(((_2588 * _2588) + (_2589 * _2589)) + (_2591 * _2591));
        float _2604 = (1.0 - (cbSceneParam._m0[77u].w / _2576)) * _2601;
        float _2609 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2611 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2811;
        if (abs((_2590 - _2593) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2811 = ((((_2594 > 0.0) ? exp2(_2609 * _2594) : (2.0 - exp2(_2611 * _2594))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2604;
        }
        else
        {
            float _2750 = 1.0 / cbSceneParam._m0[80u].x;
            float _2751 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : max(_2594, _2595));
            float _2752 = isnan(_2595) ? _2594 : (isnan(_2594) ? _2595 : min(_2594, _2595));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            _2811 = ((abs(_2601 / _2590) * cbSceneParam._m0[80u].y) * ((((_2761 - _2762) * 2.0) - ((exp2(_2609 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)))) - exp2(_2609 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0))))) * _2750)) - ((exp2(_2611 * _2761) - exp2(_2611 * _2762)) * _2750))) + (_2604 * cbSceneParam._m0[80u].z);
        }
        vec4 _2813 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2497, _2498, 1.0), 0.0);
        float _2822 = exp2((_2811 * (-1.44269502162933349609375)) * (1.0 - _2813.w));
        float _2823 = log2(_2822);
        float _2839 = log2(_2517);
        _2613 = (exp2(_2839 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].x)) * _2813.x) / cbSceneParam._m0[78u].x)) + _2514;
        _2615 = (exp2(_2839 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].y)) * _2813.y) / cbSceneParam._m0[78u].y)) + _2515;
        _2617 = (exp2(_2839 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2823 * cbSceneParam._m0[78u].z)) * _2813.z) / cbSceneParam._m0[78u].z)) + _2516;
        _2619 = _2822 * _2517;
    }
    else
    {
        _2613 = _2514;
        _2615 = _2515;
        _2617 = _2516;
        _2619 = _2517;
    }
    float _2631 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2632 = _2631 == 3.0;
    float _2633 = log2(_2619);
    float _2640 = exp2(_2633 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0)));
    float _2641 = exp2(_2633 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0)));
    float _2642 = exp2(_2633 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0)));
    float _2651 = (_2631 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2651 * (_2632 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2613)));
    SV_Target.y = _2651 * (_2632 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2615)));
    SV_Target.z = _2651 * (_2632 ? _2642 : (_2642 + (cbSceneParam._m0[72u].w * _2617)));
    SV_Target.w = cbInstanceData._m0[_2489].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2489].w;
}


