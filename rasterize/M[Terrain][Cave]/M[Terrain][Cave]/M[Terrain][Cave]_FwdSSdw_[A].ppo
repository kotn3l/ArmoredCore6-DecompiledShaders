#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1108;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = _215 * NORMAL.x;
    float _217 = _215 * NORMAL.y;
    float _218 = _215 * NORMAL.z;
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _253 = _250.x;
    float _261 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _264 = (_261 * (((1.0 - TEXCOORD_3.x) * 2.0) - _253)) + 1.0;
    float _3512 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _265 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
    vec4 _278 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _295 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _297 = _295.x;
    float _298 = _295.y;
    float _299 = _295.z;
    float _306 = ((_278.x - _297) * _265) + _297;
    float _307 = ((_278.y - _298) * _265) + _298;
    float _308 = ((_278.z - _299) * _265) + _299;
    float _312 = (_261 * (((1.0 - TEXCOORD_3.y) * 2.0) - _253)) + 1.0;
    float _3523 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _313 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    vec4 _325 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _336 = ((_325.x - _306) * _313) + _306;
    float _337 = ((_325.y - _307) * _313) + _307;
    float _338 = ((_325.z - _308) * _313) + _308;
    float _344 = cbMtdParam._m0[10u].x * ((_253 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3534 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
    vec4 _374 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _394 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _410 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _412 = _410.x;
    float _413 = _410.y;
    float _414 = _410.z;
    float _421 = ((_394.x - _412) * _265) + _412;
    float _422 = ((_394.y - _413) * _265) + _413;
    float _423 = ((_394.z - _414) * _265) + _414;
    vec4 _436 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _447 = ((_436.x - _421) * _313) + _421;
    float _448 = ((_436.y - _422) * _313) + _422;
    float _449 = ((_436.z - _423) * _313) + _423;
    float _452 = ((1.0 - _449) * _344) + _449;
    float _3545 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3556 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3567 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _460 = cbMtdParam._m0[10u].z + dot(vec4(_216, _217, _218, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3578 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    vec4 _473 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = (((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) - _477) * _461) + _477;
    float _489 = (((((isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) - _475) * _461) + _475) * 2.0) + (-1.0);
    float _490 = (((((isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) - _476) * _461) + _476) * 2.0) + (-1.0);
    float _491 = dot(vec2(_489, _490), vec2(_489, _490));
    float _3589 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _496 = sqrt(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))));
    float _499 = _489 + (((_374.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _500 = _490 + (((_374.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _503 = fma(_496, _216, fma(_500, _222 * TANGENT.x, _499 * (_208 * _200)));
    float _506 = fma(_496, _217, fma(_500, _222 * TANGENT.y, _499 * (_208 * _201)));
    float _509 = fma(_496, _218, fma(_500, _222 * TANGENT.z, _499 * (_208 * _202)));
    float _513 = inversesqrt(dot(vec3(_503, _506, _509), vec3(_503, _506, _509)));
    float _514 = _513 * _503;
    float _515 = _513 * _506;
    float _516 = _513 * _509;
    float _520 = dot(vec4(_514, _515, _516, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3600 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    vec4 _533 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _535 = _533.x;
    float _536 = _533.y;
    float _537 = _533.z;
    float _544 = (((((cbMtdParam._m0[9u].x - _336) * _345) + _336) - _535) * _521) + _535;
    float _545 = (((((cbMtdParam._m0[9u].y - _337) * _345) + _337) - _536) * _521) + _536;
    float _546 = (((((cbMtdParam._m0[9u].z - _338) * _345) + _338) - _537) * _521) + _537;
    float _3611 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _547 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _3622 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3633 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3644 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _566 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _616 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _606);
    float _617 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _606);
    float _618 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _606);
    float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
    float _623 = _616 * _622;
    float _624 = _617 * _622;
    float _625 = _618 * _622;
    vec4 _630 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _632 = _630.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _787 = sqrt(((_616 * _616) + (_617 * _617)) + (_618 * _618));
        float _793 = (cbMatDynParam._m0[5u].x * _787) + cbMatDynParam._m0[5u].y;
        float _3655 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _798 = (cbMatDynParam._m0[5u].z * _787) + cbMatDynParam._m0[5u].w;
        float _3666 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) - _794)) + _794) < ((_632 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _643 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _644 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _662 = fma(_516, cbSceneParam._m0[5u].z, fma(_515, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _514));
    float _665 = fma(_516, cbSceneParam._m0[6u].z, fma(_515, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _514));
    float _668 = fma(_516, cbSceneParam._m0[7u].z, fma(_515, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _514));
    uint _681 = uint(roundEven(NORMAL.w)) * 13u;
    uint _683 = _681 + 9u;
    uint _684 = _683 + uint(cbMatDynParam._m0[0u].w);
    float _690 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0)))) * cbInstanceData._m0[_684].x;
    float _691 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * cbInstanceData._m0[_684].y;
    float _692 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_684].z;
    float _3677 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _694 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _3699 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    vec4 _704 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _643, cbSceneParam._m0[86u].y * _644));
    float _707 = _704.x * TEXCOORD_3.w;
    float _708 = dot(vec3(_514, _515, _516), vec3(_623, _624, _625));
    float _711 = _708 * 2.0;
    float _715 = (_711 * _514) - _623;
    float _716 = (_711 * _515) - _624;
    float _717 = (_711 * _516) - _625;
    float _721 = abs(dot(vec3(_623, _624, _625), vec3(_514, _515, _516)));
    float _3710 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _723 = sqrt(_547);
    float _736 = exp2((_723 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_723 * 3.0));
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1107;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _832 = fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768));
        float _836 = fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768));
        float _840 = fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768));
        float _865 = _768 + _514;
        float _866 = _772 + _515;
        float _867 = _776 + _516;
        float _877 = fma(_867, cbModelParam._m0[26u].z, fma(_866, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _865)) - _832;
        float _878 = fma(_867, cbModelParam._m0[27u].z, fma(_866, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _865)) - _836;
        float _879 = fma(_867, cbModelParam._m0[28u].z, fma(_866, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _865)) - _840;
        float _883 = inversesqrt(dot(vec3(_877, _878, _879), vec3(_877, _878, _879)));
        float _896 = ((_883 * _877) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_832 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _897 = ((_883 * _878) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_836 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _898 = ((_883 * _879) / cbModelParam._m0[34u].z) + ((((((_840 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_896, _897, _898), 0.0);
        float _935 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_901.x + (-0.5));
        float _937 = _935 * (_901.y + (-0.5));
        float _938 = _935 * (_901.z + (-0.5));
        float _945 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_908.x + (-0.5));
        float _947 = _945 * (_908.y + (-0.5));
        float _948 = _945 * (_908.z + (-0.5));
        float _955 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _956 = _955 * (_915.x + (-0.5));
        float _957 = _955 * (_915.y + (-0.5));
        float _958 = _955 * (_915.z + (-0.5));
        float _965 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _966 = _965 * (_922.x + (-0.5));
        float _967 = _965 * (_922.y + (-0.5));
        float _968 = _965 * (_922.z + (-0.5));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = _936 * 0.5;
        float _973 = _946 * 0.5;
        float _974 = _956 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _989 = (dot(vec3(_514, _515, _516), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _999 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3758 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1001 + 1.0))) + _1006) * _969;
        float _1016 = _937 * 0.5;
        float _1017 = _947 * 0.5;
        float _1018 = _957 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_514, _515, _516), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_970 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3791 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1043 + 1.0))) + _1048) * _970;
        float _1058 = _938 * 0.5;
        float _1059 = _948 * 0.5;
        float _1060 = _958 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_514, _515, _516), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3824 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1085 + 1.0))) + _1090) * _971;
        _1107 = _938;
        _1109 = _937;
        _1110 = _936;
        _1111 = _948;
        _1112 = _947;
        _1113 = _946;
        _1114 = _958;
        _1115 = _957;
        _1116 = _956;
        _1117 = _971;
        _1118 = _970;
        _1119 = _969;
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1121 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _1108;
        _1109 = _1108;
        _1110 = _1108;
        _1111 = _1108;
        _1112 = _1108;
        _1113 = _1108;
        _1114 = _1108;
        _1115 = _1108;
        _1116 = _1108;
        _1117 = _1108;
        _1118 = _1108;
        _1119 = _1108;
        _1120 = 0.0;
        _1121 = 0.0;
        _1122 = 0.0;
    }
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1151 = fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768));
        float _1155 = fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768));
        float _1159 = fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768));
        float _1182 = _768 + _514;
        float _1183 = _772 + _515;
        float _1184 = _776 + _516;
        float _1194 = fma(_1184, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182)) - _1151;
        float _1195 = fma(_1184, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182)) - _1155;
        float _1196 = fma(_1184, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182)) - _1159;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1151 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1155 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[35u].z) + ((((((_1159 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1250 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1217.x + (-0.5));
        float _1252 = _1250 * (_1217.y + (-0.5));
        float _1253 = _1250 * (_1217.z + (-0.5));
        float _1260 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1224.x + (-0.5));
        float _1262 = _1260 * (_1224.y + (-0.5));
        float _1263 = _1260 * (_1224.z + (-0.5));
        float _1270 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1231.x + (-0.5));
        float _1272 = _1270 * (_1231.y + (-0.5));
        float _1273 = _1270 * (_1231.z + (-0.5));
        float _1280 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1238.x + (-0.5));
        float _1282 = _1280 * (_1238.y + (-0.5));
        float _1283 = _1280 * (_1238.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_514, _515, _516), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3887 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1314 + 1.0))) + _1319) * _1284;
        float _1329 = _1252 * 0.5;
        float _1330 = _1262 * 0.5;
        float _1331 = _1272 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_514, _515, _516), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3920 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1356 + 1.0))) + _1361) * _1285;
        float _1371 = _1253 * 0.5;
        float _1372 = _1263 * 0.5;
        float _1373 = _1273 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_514, _515, _516), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3953 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1398 + 1.0))) + _1403) * _1286;
        _1420 = _1253;
        _1421 = _1252;
        _1422 = _1251;
        _1423 = _1263;
        _1424 = _1262;
        _1425 = _1261;
        _1426 = _1273;
        _1427 = _1272;
        _1428 = _1271;
        _1429 = _1286;
        _1430 = _1285;
        _1431 = _1284;
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _1108;
        _1421 = _1108;
        _1422 = _1108;
        _1423 = _1108;
        _1424 = _1108;
        _1425 = _1108;
        _1426 = _1108;
        _1427 = _1108;
        _1428 = _1108;
        _1429 = _1108;
        _1430 = _1108;
        _1431 = _1108;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1121)) + _1121;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1467 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1444));
    float _1488 = _715 * 0.5;
    float _1489 = _716 * 0.5;
    float _1490 = _717 * 0.5;
    float _1491 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1494 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1497 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1531;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1504 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1107, _1111, _1114, _1117));
        float _1508 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1109, _1112, _1115, _1118));
        float _1512 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1110, _1113, _1116, _1119));
        float _1519 = dot(vec4(cbModelParam._m0[39u]), vec4(_1488, _1489, _1490, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1542;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1533 = dot(vec4(cbModelParam._m0[40u]), vec4(_1488, _1489, _1490, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1546 = (_1542 * cbModelParam._m0[1u].x) + (_1531 * (1.0 - cbModelParam._m0[1u].x));
    float _1556 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _547);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1556 : min(cbModelParam._m0[25u].z, _1556));
    float _1639;
    float _1641;
    float _1643;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1606 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1610 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1614 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1617 = fma(_717, cbModelParam._m0[13u].z, fma(_716, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _715));
        float _1620 = fma(_717, cbModelParam._m0[14u].z, fma(_716, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _715));
        float _1623 = fma(_717, cbModelParam._m0[15u].z, fma(_716, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _715));
        float _1651;
        if (_1617 > 0.0)
        {
            _1651 = abs((1.0 - _1606) / _1617);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1606 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1651 = frontier_phi_17_15_ladder;
        }
        float _1876;
        if (_1620 > 0.0)
        {
            _1876 = abs((1.0 - _1610) / _1620);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1610 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1876 = frontier_phi_26_22_ladder;
        }
        float _2122;
        if (_1623 > 0.0)
        {
            _2122 = abs((1.0 - _1614) / _1623);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1614 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2122 = frontier_phi_38_33_ladder;
        }
        float _2124 = isnan(_1876) ? _1651 : (isnan(_1651) ? _1876 : min(_1651, _1876));
        float _2125 = isnan(_2122) ? _2124 : (isnan(_2124) ? _2122 : min(_2124, _2122));
        float _2129 = (_2125 * _1617) + _1606;
        float _2130 = (_2125 * _1620) + _1610;
        float _2131 = (_2125 * _1623) + _1614;
        float _2132 = _2125 * 9.9999997473787516355514526367188e-05;
        float _2134 = (-1.0) - _2132;
        float _2136 = _2132 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2131 > _2136) || ((_2131 < _2134) || ((_2130 > _2136) || ((_2130 < _2134) || ((_2129 < _2134) || (_2129 > _2136))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2255 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2131, cbModelParam._m0[9u].z, fma(_2130, cbModelParam._m0[9u].y, _2129 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2131, cbModelParam._m0[10u].z, fma(_2130, cbModelParam._m0[10u].y, _2129 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2131, cbModelParam._m0[11u].z, fma(_2130, cbModelParam._m0[11u].y, _2129 * cbModelParam._m0[11u].x))), _1557);
            frontier_phi_16_38_ladder = _2255.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2255.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2255.x * cbModelParam._m0[1u].y;
        }
        _1639 = frontier_phi_16_38_ladder_2;
        _1641 = frontier_phi_16_38_ladder_1;
        _1643 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_715, _716, _717), _1557);
        _1639 = _1627.x * cbModelParam._m0[1u].y;
        _1641 = _1627.y * cbModelParam._m0[1u].y;
        _1643 = _1627.z * cbModelParam._m0[1u].y;
    }
    float _1647 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _547);
    float _1648 = isnan(_1647) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1647 : min(cbModelParam._m0[25u].w, _1647));
    float _1741;
    float _1743;
    float _1745;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1705 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1709 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1713 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1716 = fma(_717, cbModelParam._m0[21u].z, fma(_716, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _715));
        float _1719 = fma(_717, cbModelParam._m0[22u].z, fma(_716, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _715));
        float _1722 = fma(_717, cbModelParam._m0[23u].z, fma(_716, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _715));
        float _1881;
        if (_1716 > 0.0)
        {
            _1881 = abs((1.0 - _1705) / _1716);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1705 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1881 = frontier_phi_28_24_ladder;
        }
        float _2149;
        if (_1719 > 0.0)
        {
            _2149 = abs((1.0 - _1709) / _1719);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1709 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2149 = frontier_phi_40_35_ladder;
        }
        float _2354;
        if (_1722 > 0.0)
        {
            _2354 = abs((1.0 - _1713) / _1722);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1713 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2354 = frontier_phi_49_46_ladder;
        }
        float _2356 = isnan(_2149) ? _1881 : (isnan(_1881) ? _2149 : min(_1881, _2149));
        float _2357 = isnan(_2354) ? _2356 : (isnan(_2356) ? _2354 : min(_2356, _2354));
        float _2361 = (_2357 * _1716) + _1705;
        float _2362 = (_2357 * _1719) + _1709;
        float _2363 = (_2357 * _1722) + _1713;
        float _2364 = _2357 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2364;
        float _2367 = _2364 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2363 > _2367) || ((_2363 < _2365) || ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 < _2365) || (_2361 > _2367))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2363, cbModelParam._m0[17u].z, fma(_2362, cbModelParam._m0[17u].y, _2361 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2363, cbModelParam._m0[18u].z, fma(_2362, cbModelParam._m0[18u].y, _2361 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2363, cbModelParam._m0[19u].z, fma(_2362, cbModelParam._m0[19u].y, _2361 * cbModelParam._m0[19u].x))), _1648);
            frontier_phi_25_49_ladder = _2562.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2562.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2562.x * cbModelParam._m0[1u].z;
        }
        _1741 = frontier_phi_25_49_ladder_2;
        _1743 = frontier_phi_25_49_ladder_1;
        _1745 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_715, _716, _717), _1648);
        _1741 = _1725.x * cbModelParam._m0[1u].z;
        _1743 = _1725.y * cbModelParam._m0[1u].z;
        _1745 = _1725.z * cbModelParam._m0[1u].z;
    }
    float _1757 = ((((1.0 - _736) * ((_723 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_736 * _723)) * _707;
    float _1758 = _1757 * ((cbModelParam._m0[1u].w * (_1741 - _1639)) + _1639);
    float _1759 = _1757 * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1760 = _1757 * ((cbModelParam._m0[1u].w * (_1745 - _1643)) + _1643);
    float _1763 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1766 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1769 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, _1758 * cbSceneParam._m0[91u].x));
    vec4 _1777 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_643, _644));
    float _1779 = _1777.w;
    float _1791 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1779);
    float _1792 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1779);
    float _1793 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1779);
    uvec4 _1797 = floatBitsToUint(cbInstanceData._m0[_681 + 5u]);
    uint _1799 = _1797.x * 14u;
    uint _1800 = _1799 + 13u;
    float _1807 = _707 + (-1.0);
    float _1812 = (cbLight._m0[_1800].x * _1807) + 1.0;
    float _1813 = (cbLight._m0[_1800].y * _1807) + 1.0;
    float _1814 = (cbLight._m0[_1800].z * _1807) + 1.0;
    float _1815 = (cbLight._m0[_1800].w * _1807) + 1.0;
    uint _1816 = _1799 + 5u;
    float _1822 = isnan(1.0) ? _1813 : (isnan(_1813) ? 1.0 : min(_1813, 1.0));
    uint _1826 = _1799 + 4u;
    float _1835 = isnan(1.0) ? _1812 : (isnan(_1812) ? 1.0 : min(_1812, 1.0));
    uint _1839 = _1799 | 1u;
    float _1850 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_514, _515, _516));
    float _1853 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_514, _515, _516));
    float _4089 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _4100 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1858 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.3183098733425140380859375;
    float _1860 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.3183098733425140380859375;
    float _1867 = ((cbLight._m0[_1816].x * _1822) * _1860) + (((cbLight._m0[_1826].x * _1791) * _1835) * _1858);
    float _1868 = ((_1822 * cbLight._m0[_1816].y) * _1860) + (((cbLight._m0[_1826].y * _1792) * _1835) * _1858);
    float _1869 = ((_1822 * cbLight._m0[_1816].z) * _1860) + (((cbLight._m0[_1826].z * _1793) * _1835) * _1858);
    uvec4 _1873 = floatBitsToUint(cbLight._m0[_1799 + 12u]);
    bool _1875 = _1873.x == 0u;
    float _1886;
    float _1888;
    float _1890;
    if (_1875)
    {
        _1886 = _1867;
        _1888 = _1868;
        _1890 = _1869;
    }
    else
    {
        uint _1894 = _1799 + 6u;
        float _1910 = (dot(vec3(cbLight._m0[_1799 + 2u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _1911 = _1910 * _1910;
        float _4111 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1913 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _1886 = (((cbLight._m0[_1894].x * 0.3183098733425140380859375) * _1912) * _1913) + _1867;
        _1888 = (((cbLight._m0[_1894].y * 0.3183098733425140380859375) * _1912) * _1913) + _1868;
        _1890 = (((cbLight._m0[_1894].z * 0.3183098733425140380859375) * _1912) * _1913) + _1869;
    }
    bool _1893 = _1873.y == 0u;
    float _1931;
    float _1933;
    float _1935;
    if (_1893)
    {
        _1931 = _1886;
        _1933 = _1888;
        _1935 = _1890;
    }
    else
    {
        uint _2093 = _1799 + 7u;
        float _2109 = (dot(vec3(cbLight._m0[_1799 + 3u].xyz), vec3(_514, _515, _516)) * 0.5) + 0.5;
        float _2110 = _2109 * _2109;
        float _4127 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2111 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _2112 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _1931 = (((cbLight._m0[_2093].x * 0.3183098733425140380859375) * _2111) * _2112) + _1886;
        _1933 = (((cbLight._m0[_2093].y * 0.3183098733425140380859375) * _2111) * _2112) + _1888;
        _1935 = (((cbLight._m0[_2093].z * 0.3183098733425140380859375) * _2111) * _2112) + _1890;
    }
    uint _1938 = _1799 + 8u;
    float _1951 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1799].w)) * _547) * 0.949999988079071044921875);
    float _1952 = _1951 * _1951;
    float _1953 = cbLight._m0[_1799].x + _623;
    float _1954 = cbLight._m0[_1799].y + _624;
    float _1955 = cbLight._m0[_1799].z + _625;
    float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
    float _1960 = _1959 * _1953;
    float _1961 = _1959 * _1954;
    float _1962 = _1959 * _1955;
    float _1963 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1799].xyz));
    float _4143 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1966 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _1967 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
    float _1968 = dot(vec3(_514, _515, _516), vec3(_1960, _1961, _1962));
    float _4165 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1799].xyz), vec3(_1960, _1961, _1962));
    float _4176 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1952 * _1952;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1992 = 1.0 - _1952;
    float _2003 = (0.5 / (((_1967 * ((_1966 * _1992) + _1952)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _1992) + _1952) * _1966))) * _1966;
    float _4187 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _2005 = (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    uint _2019 = _1799 + 9u;
    float _2030 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1839].w)) * _547) * 0.949999988079071044921875);
    float _2031 = _2030 * _2030;
    float _2032 = cbLight._m0[_1839].x + _623;
    float _2033 = cbLight._m0[_1839].y + _624;
    float _2034 = cbLight._m0[_1839].z + _625;
    float _2038 = inversesqrt(dot(vec3(_2032, _2033, _2034), vec3(_2032, _2033, _2034)));
    float _2039 = _2038 * _2032;
    float _2040 = _2038 * _2033;
    float _2041 = _2038 * _2034;
    float _2042 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_1839].xyz));
    float _4198 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _2046 = dot(vec3(_514, _515, _516), vec3(_2039, _2040, _2041));
    float _4209 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_2039, _2040, _2041));
    float _4220 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2031 * _2031;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2067 = (exp2(log2(1.0 - (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2068 = 1.0 - _2031;
    float _2078 = (0.5 / (((_1967 * ((_2045 * _2068) + _2031)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2068) + _2031) * _2045))) * _2045;
    float _4231 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2080 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    float _2090 = (((_2067 * cbLight._m0[_2019].x) * _2080) * _1822) + ((((cbLight._m0[_1938].x * _1791) * _1991) * _2005) * _1835);
    float _2091 = (((_2067 * cbLight._m0[_2019].y) * _2080) * _1822) + ((((cbLight._m0[_1938].y * _1792) * _1991) * _2005) * _1835);
    float _2092 = (((_2067 * cbLight._m0[_2019].z) * _2080) * _1822) + ((((cbLight._m0[_1938].z * _1793) * _1991) * _2005) * _1835);
    float _2154;
    float _2156;
    float _2158;
    if (_1875)
    {
        _2154 = _2090;
        _2156 = _2091;
        _2158 = _2092;
    }
    else
    {
        uint _2160 = _1799 + 2u;
        uint _2164 = _1799 + 10u;
        float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _547) * 0.949999988079071044921875);
        float _2179 = _2178 * _2178;
        float _2180 = cbLight._m0[_2160].x + _623;
        float _2181 = cbLight._m0[_2160].y + _624;
        float _2182 = cbLight._m0[_2160].z + _625;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2187 = _2186 * _2180;
        float _2188 = _2186 * _2181;
        float _2189 = _2186 * _2182;
        float _2190 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2160].xyz));
        float _4242 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2194 = dot(vec3(_514, _515, _516), vec3(_2187, _2188, _2189));
        float _4253 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2187, _2188, _2189));
        float _4264 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2202 = _2179 * _2179;
        float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
        float _2215 = (exp2(log2(1.0 - (isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2216 = 1.0 - _2179;
        float _2226 = (0.5 / (((_1967 * ((_2193 * _2216) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2216) + _2179) * _2193))) * _2193;
        float _4275 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2228 = (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
        float _2229 = isnan(1.0) ? _1814 : (isnan(_1814) ? 1.0 : min(_1814, 1.0));
        _2154 = (((_2215 * cbLight._m0[_2164].x) * _2228) * _2229) + _2090;
        _2156 = (((_2215 * cbLight._m0[_2164].y) * _2228) * _2229) + _2091;
        _2158 = (((_2215 * cbLight._m0[_2164].z) * _2228) * _2229) + _2092;
    }
    float _2264;
    float _2266;
    float _2268;
    if (_1893)
    {
        _2264 = _2154;
        _2266 = _2156;
        _2268 = _2158;
    }
    else
    {
        uint _2275 = _1799 + 3u;
        uint _2279 = _1799 + 11u;
        float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _547) * 0.949999988079071044921875);
        float _2294 = _2293 * _2293;
        float _2295 = cbLight._m0[_2275].x + _623;
        float _2296 = cbLight._m0[_2275].y + _624;
        float _2297 = cbLight._m0[_2275].z + _625;
        float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
        float _2302 = _2301 * _2295;
        float _2303 = _2301 * _2296;
        float _2304 = _2301 * _2297;
        float _2305 = dot(vec3(_514, _515, _516), vec3(cbLight._m0[_2275].xyz));
        float _4291 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _2309 = dot(vec3(_514, _515, _516), vec3(_2302, _2303, _2304));
        float _4302 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2312 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _2313 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2302, _2303, _2304));
        float _4313 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2317 = _2294 * _2294;
        float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
        float _2330 = (exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2331 = 1.0 - _2294;
        float _2341 = (0.5 / (((_1967 * ((_2308 * _2331) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_1967 * _2331) + _2294) * _2308))) * _2308;
        float _4324 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1815 : (isnan(_1815) ? 1.0 : min(_1815, 1.0));
        _2264 = (((_2330 * cbLight._m0[_2279].x) * _2343) * _2344) + _2154;
        _2266 = (((_2330 * cbLight._m0[_2279].y) * _2343) * _2344) + _2156;
        _2268 = (((_2330 * cbLight._m0[_2279].z) * _2343) * _2344) + _2158;
    }
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    if (_1797.y == 0u)
    {
        float _2419 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2420 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2419;
        float _2421 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2419;
        float _2422 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2419;
        uvec4 _2434 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2435 = _2434.x;
        uint _2446 = uint((float(_2434.y) * floor(float(uint(cbSceneParam._m0[85u].y * _644) / _2435))) + floor(float(uint(cbSceneParam._m0[85u].x * _643) / _2435)));
        float _2456 = (log2(_2422 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2457 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        uint _2460 = uint(isnan(14.0) ? _2457 : (isnan(_2457) ? 14.0 : min(_2457, 14.0)));
        uvec4 _2465 = texelFetch(g_lightClusterGridBuffer, int(((_2460 << 2u) + (_2446 << 6u)) >> 2u));
        uint _2466 = _2465.x;
        uint _2467 = _2434.z;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((((1u << ((_2467 >> 4u) & 15u)) + 4294967295u) & _2466) == 0u) || ((_2467 & 240u) == 0u))
        {
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
        }
        else
        {
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            uint _2726 = 0u;
            uint _2735;
            bool _2736;
            for (;;)
            {
                _2735 = texelFetch(g_lightClassification, int((((_2460 << 5u) + (_2446 << 9u)) + (_2726 << 2u)) >> 2u)).x;
                _2736 = _2735 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2736)
                {
                    frontier_phi_66_pred = _2720;
                    frontier_phi_66_pred_1 = _2725;
                    frontier_phi_66_pred_2 = _2724;
                    frontier_phi_66_pred_3 = _2723;
                    frontier_phi_66_pred_4 = _2722;
                    frontier_phi_66_pred_5 = _2721;
                }
                else
                {
                    float _2865;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    uint _2871;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2723;
                    _2869 = _2724;
                    _2870 = _2725;
                    _2871 = _2735;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    float _2796;
                    float _2797;
                    for (;;)
                    {
                        uint _2875 = uint(findLSB(_2871)) + (_2726 << 5u);
                        uint _2872 = (_2871 + 4294967295u) & _2871;
                        uint _2877 = _2875 * 48u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2877)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2877 + 3u)).x));
                        uint _2897 = (_2875 * 48u) + 4u;
                        vec4 _2910 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 3u)).x));
                        uint _2916 = (_2875 * 48u) + 8u;
                        vec3 _2927 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x));
                        float _2931 = _2891.x - _2420;
                        float _2932 = _2891.y - _2421;
                        float _2933 = _2891.z - _2422;
                        float _2934 = dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933));
                        float _2937 = inversesqrt(_2934);
                        float _2938 = _2937 * _2931;
                        float _2939 = _2937 * _2932;
                        float _2940 = _2937 * _2933;
                        float _2941 = dot(vec3(_662, _665, _668), vec3(_2938, _2939, _2940));
                        float _2946 = 1.0 - (_2934 * _2891.w);
                        float _4350 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2947 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _2948 = sqrt(_2934) * _2910.w;
                        float _2951 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2941) + _2952;
                        float _2958 = _2948 * _2948;
                        float _2962 = ((isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))) * _2947) / ((_2958 * 0.699999988079071044921875) + 1.0);
                        float _2966 = (-0.0) - _2420;
                        float _2967 = (-0.0) - _2421;
                        float _2968 = (-0.0) - _2422;
                        float _2972 = inversesqrt(dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968)));
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2983 = exp2(log2(1.0 / ((_2958 * 3.5) + 5.0)) * 0.25);
                        float _2984 = 1.0 - _723;
                        float _2991 = sqrt(1.0 - ((1.0 - (_2984 * _2984)) * (1.0 - (_2983 * _2983))));
                        float _2992 = _2991 * _2991;
                        float _2993 = _2992 * _2992;
                        float _2994 = _2973 + _2938;
                        float _2995 = _2974 + _2939;
                        float _2996 = _2975 + _2940;
                        float _3000 = inversesqrt(dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996)));
                        float _3004 = dot(vec3(_662, _665, _668), vec3(_2973, _2974, _2975));
                        float _4366 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                        float _3008 = dot(vec3(_662, _665, _668), vec3(_3000 * _2994, _3000 * _2995, _3000 * _2996));
                        float _4377 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3011 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                        float _3015 = ((_3011 * _3011) * (_2993 + (-1.0))) + 1.0;
                        float _3016 = _2951 * _2992;
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _2941) + _3017;
                        float _4388 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                        float _3021 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3022 = 1.0 - _2992;
                        float _3032 = (0.5 / (((_3021 * ((_3007 * _3022) + _2992)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2992) * _3007))) * _3021;
                        float _4399 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                        float _3043 = (((_2993 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3015 * _3015) * ((_2958 * 2.1991131305694580078125) + 3.141590118408203125))) * _2947;
                        _2795 = (_2962 * _2910.x) + _2868;
                        _2796 = (_2962 * _2910.y) + _2869;
                        _2797 = (_2962 * _2910.z) + _2870;
                        _2792 = (_3043 * _2927.x) + _2865;
                        _2793 = (_3043 * _2927.y) + _2866;
                        _2794 = (_3043 * _2927.z) + _2867;
                        if (_2872 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2795;
                            _2869 = _2796;
                            _2870 = _2797;
                            _2871 = _2872;
                        }
                    }
                    frontier_phi_66_pred = _2792;
                    frontier_phi_66_pred_1 = _2797;
                    frontier_phi_66_pred_2 = _2796;
                    frontier_phi_66_pred_3 = _2795;
                    frontier_phi_66_pred_4 = _2794;
                    frontier_phi_66_pred_5 = _2793;
                }
                _2568 = frontier_phi_66_pred;
                _2578 = frontier_phi_66_pred_1;
                _2576 = frontier_phi_66_pred_2;
                _2574 = frontier_phi_66_pred_3;
                _2572 = frontier_phi_66_pred_4;
                _2570 = frontier_phi_66_pred_5;
                uint _2727 = _2726 + 1u;
                if (_2727 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2720 = _2568;
                    _2721 = _2570;
                    _2722 = _2572;
                    _2723 = _2574;
                    _2724 = _2576;
                    _2725 = _2578;
                    _2726 = _2727;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
        }
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.z;
        uint _2584 = (_2582 >> 8u) & 15u;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        if (((4294967295u << _2584) & _2466) == 0u)
        {
            _2688 = _2567;
            _2690 = _2569;
            _2692 = _2571;
            _2694 = _2573;
            _2696 = _2575;
            _2698 = _2577;
        }
        else
        {
            float _2713 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
            float _2714 = _2713 * _2420;
            float _2715 = _2713 * _2421;
            float _2716 = _2713 * _2422;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2584 < ((_2582 >> 12u) & 15u))
            {
                float _2689;
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2848 = _2567;
                float _2849 = _2569;
                float _2850 = _2571;
                float _2851 = _2573;
                float _2852 = _2575;
                float _2853 = _2577;
                uint _2854 = _2584;
                uint _2863;
                bool _2864;
                for (;;)
                {
                    _2863 = texelFetch(g_lightClassification, int((((_2460 << 5u) + (_2446 << 9u)) + (_2854 << 2u)) >> 2u)).x;
                    _2864 = _2863 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2864)
                    {
                        frontier_phi_77_pred = _2853;
                        frontier_phi_77_pred_1 = _2852;
                        frontier_phi_77_pred_2 = _2851;
                        frontier_phi_77_pred_3 = _2850;
                        frontier_phi_77_pred_4 = _2849;
                        frontier_phi_77_pred_5 = _2848;
                    }
                    else
                    {
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3070 = _2848;
                        float _3071 = _2849;
                        float _3072 = _2850;
                        float _3073 = _2851;
                        float _3074 = _2852;
                        float _3075 = _2853;
                        uint _3076 = _2863;
                        uint _3077;
                        vec4 _3102;
                        float _3103;
                        vec4 _3118;
                        vec3 _3130;
                        vec4 _3146;
                        vec4 _3162;
                        float _3209;
                        bool _3210;
                        for (;;)
                        {
                            uint _3087 = ((_2854 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3076));
                            _3077 = (_3076 + 4294967295u) & _3076;
                            uint _3089 = _3087 * 40u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            _3103 = _3102.w;
                            uint _3105 = (_3087 * 40u) + 4u;
                            _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3120 = (_3087 * 40u) + 8u;
                            _3130 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x));
                            uint _3133 = (_3087 * 40u) + 16u;
                            _3146 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3133)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3133 + 3u)).x));
                            uint _3149 = (_3087 * 40u) + 20u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            uint _3165 = (_3087 * 40u) + 24u;
                            vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3184 = (_3087 * 40u) + 28u;
                            vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3184)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3184 + 3u)).x));
                            _3209 = fma(_2422, _3197.z, fma(_2421, _3197.y, _3197.x * _2420)) + _3197.w;
                            _3210 = !((fma(_2422, _3178.z, fma(_2421, _3178.y, _3178.x * _2420)) + _3178.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3210)
                            {
                                float _3237 = _3102.x - _2420;
                                float _3238 = _3102.y - _2421;
                                float _3239 = _3102.z - _2422;
                                float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                                float _3243 = inversesqrt(_3240);
                                float _3244 = _3243 * _3237;
                                float _3245 = _3243 * _3238;
                                float _3246 = _3243 * _3239;
                                float _3250 = 1.0 - (_3240 / (_3103 * _3103));
                                float _4410 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                                float _3251 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3255 = sqrt(_3240) * _3118.w;
                                float _3257 = 1.39999997615814208984375 / (_3255 + 1.39999997615814208984375);
                                float _3258 = _3257 * _3257;
                                float _3261 = ((1.0 - _3258) * dot(vec3(_3244, _3245, _3246), vec3(_662, _665, _668))) + _3258;
                                float _3264 = _3255 * _3255;
                                float _3268 = (fma(_2422, _3146.z, fma(_2421, _3146.y, _3146.x * _2420)) + _3146.w) / _3209;
                                float _3269 = (fma(_2422, _3162.z, fma(_2421, _3162.y, _3162.x * _2420)) + _3162.w) / _3209;
                                float _3273 = 1.0 - dot(vec2(_3268, _3269), vec2(_3268, _3269));
                                float _4426 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                                float _3274 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
                                float _3275 = _3274 * (((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3251) / ((_3264 * 0.699999988079071044921875) + 1.0));
                                float _3287 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                                float _3288 = 1.0 - _723;
                                float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                                float _3296 = _3295 * _3295;
                                float _3297 = _3296 * _3296;
                                float _3298 = _3244 - _2714;
                                float _3299 = _3245 - _2715;
                                float _3300 = _3246 - _2716;
                                float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                                float _3308 = dot(vec3(_662, _665, _668), vec3((-0.0) - _2714, (-0.0) - _2715, (-0.0) - _2716));
                                float _4437 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
                                float _3312 = dot(vec3(_662, _665, _668), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                                float _4448 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3315 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                                float _3320 = _3257 * _3296;
                                float _3321 = _3320 * _3320;
                                float _3327 = ((1.0 - _3321) * dot(vec3(_662, _665, _668), vec3(_3244, _3245, _3246))) + _3321;
                                float _4459 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3329 = 1.0 - _3296;
                                float _3339 = (0.5 / (((_3328 * ((_3311 * _3329) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3328 * _3329) + _3296) * _3311))) * _3328;
                                float _4470 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                                float _3349 = (_3274 * _3251) * (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) / ((_3319 * _3319) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3275 * _3118.y;
                                frontier_phi_83_pred_1 = _3275 * _3118.x;
                                frontier_phi_83_pred_2 = _3349 * _3130.z;
                                frontier_phi_83_pred_3 = _3349 * _3130.y;
                                frontier_phi_83_pred_4 = _3349 * _3130.x;
                                frontier_phi_83_pred_5 = _3275 * _3118.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3357 = frontier_phi_83_pred;
                            _3356 = frontier_phi_83_pred_1;
                            _3355 = frontier_phi_83_pred_2;
                            _3354 = frontier_phi_83_pred_3;
                            _3353 = frontier_phi_83_pred_4;
                            _3358 = frontier_phi_83_pred_5;
                            _3060 = _3356 + _3073;
                            _3061 = _3357 + _3074;
                            _3062 = _3358 + _3075;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3059 = _3355 + _3072;
                            if (_3077 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3062;
                                _3076 = _3077;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3062;
                        frontier_phi_77_pred_1 = _3061;
                        frontier_phi_77_pred_2 = _3060;
                        frontier_phi_77_pred_3 = _3059;
                        frontier_phi_77_pred_4 = _3058;
                        frontier_phi_77_pred_5 = _3057;
                    }
                    _2699 = frontier_phi_77_pred;
                    _2697 = frontier_phi_77_pred_1;
                    _2695 = frontier_phi_77_pred_2;
                    _2693 = frontier_phi_77_pred_3;
                    _2691 = frontier_phi_77_pred_4;
                    _2689 = frontier_phi_77_pred_5;
                    uint _2855 = _2854 + 1u;
                    if (_2855 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2848 = _2689;
                        _2849 = _2691;
                        _2850 = _2693;
                        _2851 = _2695;
                        _2852 = _2697;
                        _2853 = _2699;
                        _2854 = _2855;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2693;
                frontier_phi_58_59_ladder_1 = _2699;
                frontier_phi_58_59_ladder_2 = _2697;
                frontier_phi_58_59_ladder_3 = _2695;
                frontier_phi_58_59_ladder_4 = _2691;
                frontier_phi_58_59_ladder_5 = _2689;
            }
            else
            {
                frontier_phi_58_59_ladder = _2571;
                frontier_phi_58_59_ladder_1 = _2577;
                frontier_phi_58_59_ladder_2 = _2575;
                frontier_phi_58_59_ladder_3 = _2573;
                frontier_phi_58_59_ladder_4 = _2569;
                frontier_phi_58_59_ladder_5 = _2567;
            }
            _2688 = frontier_phi_58_59_ladder_5;
            _2690 = frontier_phi_58_59_ladder_4;
            _2692 = frontier_phi_58_59_ladder;
            _2694 = frontier_phi_58_59_ladder_3;
            _2696 = frontier_phi_58_59_ladder_2;
            _2698 = frontier_phi_58_59_ladder_1;
        }
        float _2703 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
        _2479 = (_2703 * _2694) + _1931;
        _2481 = (_2703 * _2696) + _1933;
        _2483 = (_2703 * _2698) + _1935;
        _2485 = ((_2688 * 0.039999999105930328369140625) * _2703) + _2264;
        _2487 = ((_2690 * 0.039999999105930328369140625) * _2703) + _2266;
        _2489 = ((_2692 * 0.039999999105930328369140625) * _2703) + _2268;
    }
    else
    {
        _2479 = _1931;
        _2481 = _1933;
        _2483 = _1935;
        _2485 = _2264;
        _2487 = _2266;
        _2489 = _2268;
    }
    float _4486 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _4497 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _4508 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _2506 = ((isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2479 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _707))) + ((_2485 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2507 = ((isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2481 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _707))) + ((_2487 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2508 = ((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2483 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _707))) + ((_2489 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    uint _2509 = _681 + 6u;
    float _2517 = _643 / cbSceneParam._m0[86u].x;
    float _2518 = _644 / cbSceneParam._m0[86u].y;
    vec4 _2532 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2517, _2518, (log2((isnan(cbSceneParam._m0[77u].w) ? _566 : (isnan(_566) ? cbSceneParam._m0[77u].w : min(_566, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2534 = _2532.x;
    float _2535 = _2532.y;
    float _2536 = _2532.z;
    float _2537 = _2532.w;
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    if (_566 > cbSceneParam._m0[78u].w)
    {
        float _2592 = isnan(_566) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _566 : min(cbSceneParam._m0[80u].w, _566));
        float _2593 = _2592 / _566;
        float _2604 = _2593 * _616;
        float _2605 = _617 * _2593;
        float _2606 = (-0.0) - _2605;
        float _2608 = _2593 * _618;
        float _2610 = (cbSceneParam._m0[77u].w * _2606) / _2592;
        float _2611 = _2610 + cbSceneParam._m0[79u].w;
        float _2612 = cbSceneParam._m0[79u].w - _2605;
        float _2618 = sqrt(((_2604 * _2604) + (_2605 * _2605)) + (_2608 * _2608));
        float _2621 = (1.0 - (cbSceneParam._m0[77u].w / _2592)) * _2618;
        float _2626 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2628 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2805;
        if (abs((_2606 - _2610) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2805 = ((((_2611 > 0.0) ? exp2(_2626 * _2611) : (2.0 - exp2(_2628 * _2611))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2621;
        }
        else
        {
            float _2749 = 1.0 / cbSceneParam._m0[80u].x;
            float _2750 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : max(_2611, _2612));
            float _2751 = isnan(_2612) ? _2611 : (isnan(_2611) ? _2612 : min(_2611, _2612));
            float _2760 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : min(_2750, 0.0));
            float _2761 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : min(_2751, 0.0));
            _2805 = ((abs(_2618 / _2606) * cbSceneParam._m0[80u].y) * ((((_2760 - _2761) * 2.0) - ((exp2(_2626 * (isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0)))) - exp2(_2626 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))))) * _2749)) - ((exp2(_2628 * _2760) - exp2(_2628 * _2761)) * _2749))) + (_2621 * cbSceneParam._m0[80u].z);
        }
        vec4 _2807 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2517, _2518, 1.0), 0.0);
        float _2816 = exp2((_2805 * (-1.44269502162933349609375)) * (1.0 - _2807.w));
        float _2817 = log2(_2816);
        float _2833 = log2(_2537);
        _2630 = (exp2(_2833 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].x)) * _2807.x) / cbSceneParam._m0[78u].x)) + _2534;
        _2632 = (exp2(_2833 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].y)) * _2807.y) / cbSceneParam._m0[78u].y)) + _2535;
        _2634 = (exp2(_2833 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2817 * cbSceneParam._m0[78u].z)) * _2807.z) / cbSceneParam._m0[78u].z)) + _2536;
        _2636 = _2816 * _2537;
    }
    else
    {
        _2630 = _2534;
        _2632 = _2535;
        _2634 = _2536;
        _2636 = _2537;
    }
    bool _2843;
    vec4 _2646;
    vec4 _2668;
    float _2670;
    float _2674;
    float _2675;
    float _2676;
    float _2677;
    bool _2687;
    for (;;)
    {
        _2646 = cbMatDynParam._m0[0u];
        float _2648 = roundEven(_2646.y);
        bool _2649 = _2648 == 3.0;
        float _2650 = log2(_2636);
        float _2657 = exp2(_2650 * cbSceneParam._m0[78u].x) * _2506;
        float _2658 = exp2(_2650 * cbSceneParam._m0[78u].y) * _2507;
        float _2659 = exp2(_2650 * cbSceneParam._m0[78u].z) * _2508;
        float _2666 = _632 + (-0.5);
        _2668 = cbMtdParam._m0[1u];
        _2670 = _2668.y * _2666;
        float _2673 = (_2648 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2674 = _2673 * (_2649 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2630)));
        _2675 = _2673 * (_2649 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2632)));
        _2676 = _2673 * (_2649 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2634)));
        _2677 = _2666 * 0.999000012874603271484375;
        _2687 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2687)
        {
            if ((cbInstanceData._m0[_681 + 7u].x + _2677) < 0.5)
            {
                _2843 = true;
                break;
            }
        }
        uint _2784 = _683 + uint(_2646.w);
        if ((cbInstanceData._m0[_2784].w < 1.0) && ((cbInstanceData._m0[_2784].w + _2677) < 0.5))
        {
            _2843 = true;
            break;
        }
        if ((_2670 + 1.0) < _2668.x)
        {
            _2843 = true;
            break;
        }
        _2843 = false;
        break;
    }
    float _3048;
    if (_2843)
    {
        discard_state = true;
        _3048 = 0.0;
    }
    else
    {
        _3048 = cbInstanceData._m0[_2509].w;
    }
    SV_Target.x = _2674;
    SV_Target.y = _2675;
    SV_Target.z = _2676;
    SV_Target.w = _3048;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2509].w;
    discard_exit();
}


