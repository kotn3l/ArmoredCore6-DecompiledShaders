#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1106;
float _3474;
float _3475;
float _3476;
float _3477;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _251 = _248.x;
    float _259 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _262 = (_259 * (((1.0 - TEXCOORD_3.x) * 2.0) - _251)) + 1.0;
    float _3486 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _263 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    vec4 _276 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _293 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _295 = _293.x;
    float _296 = _293.y;
    float _297 = _293.z;
    float _304 = ((_276.x - _295) * _263) + _295;
    float _305 = ((_276.y - _296) * _263) + _296;
    float _306 = ((_276.z - _297) * _263) + _297;
    float _310 = (_259 * (((1.0 - TEXCOORD_3.y) * 2.0) - _251)) + 1.0;
    float _3497 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    vec4 _323 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _334 = ((_323.x - _304) * _311) + _304;
    float _335 = ((_323.y - _305) * _311) + _305;
    float _336 = ((_323.z - _306) * _311) + _306;
    float _342 = cbMtdParam._m0[10u].x * ((_251 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3508 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    vec4 _372 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _392 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _408 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _419 = ((_392.x - _410) * _263) + _410;
    float _420 = ((_392.y - _411) * _263) + _411;
    float _421 = ((_392.z - _412) * _263) + _412;
    vec4 _434 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _445 = ((_434.x - _419) * _311) + _419;
    float _446 = ((_434.y - _420) * _311) + _420;
    float _447 = ((_434.z - _421) * _311) + _421;
    float _450 = ((1.0 - _447) * _342) + _447;
    float _3519 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3530 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3541 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _458 = cbMtdParam._m0[10u].z + dot(vec4(_214, _215, _216, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3552 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    vec4 _471 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = (((isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) - _475) * _459) + _475;
    float _487 = (((((isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0))) - _473) * _459) + _473) * 2.0) + (-1.0);
    float _488 = (((((isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) - _474) * _459) + _474) * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3563 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))));
    float _497 = _487 + (((_372.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _498 = _488 + (((_372.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _501 = fma(_494, _214, fma(_498, _220 * TANGENT.x, _497 * (_206 * _198)));
    float _504 = fma(_494, _215, fma(_498, _220 * TANGENT.y, _497 * (_206 * _199)));
    float _507 = fma(_494, _216, fma(_498, _220 * TANGENT.z, _497 * (_206 * _200)));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _518 = dot(vec4(_512, _513, _514, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3574 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    vec4 _531 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _542 = (((((cbMtdParam._m0[9u].x - _334) * _343) + _334) - _533) * _519) + _533;
    float _543 = (((((cbMtdParam._m0[9u].y - _335) * _343) + _335) - _534) * _519) + _534;
    float _544 = (((((cbMtdParam._m0[9u].z - _336) * _343) + _336) - _535) * _519) + _535;
    float _3585 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _545 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3607 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3618 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    vec4 _628 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _630 = _628.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _785 = sqrt(((_614 * _614) + (_615 * _615)) + (_616 * _616));
        float _791 = (cbMatDynParam._m0[5u].x * _785) + cbMatDynParam._m0[5u].y;
        float _3629 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _796 = (cbMatDynParam._m0[5u].z * _785) + cbMatDynParam._m0[5u].w;
        float _3640 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0))) - _792)) + _792) < ((_630 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _641 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _642 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _660 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _663 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _666 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _679 = uint(roundEven(NORMAL.w)) * 13u;
    uint _681 = _679 + 9u;
    uint _682 = _681 + uint(cbMatDynParam._m0[0u].w);
    float _688 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_682].x;
    float _689 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_682].y;
    float _690 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_682].z;
    float _3651 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _691 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _692 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _3673 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _702 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _641, cbSceneParam._m0[86u].y * _642));
    float _705 = _702.x * TEXCOORD_3.w;
    float _706 = dot(vec3(_512, _513, _514), vec3(_621, _622, _623));
    float _709 = _706 * 2.0;
    float _713 = (_709 * _512) - _621;
    float _714 = (_709 * _513) - _622;
    float _715 = (_709 * _514) - _623;
    float _719 = abs(dot(vec3(_621, _622, _623), vec3(_512, _513, _514)));
    float _3684 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _721 = sqrt(_545);
    float _734 = exp2((_721 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_721 * 3.0));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_774, cbModelParam._m0[26u].z, fma(_770, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _766));
        float _834 = fma(_774, cbModelParam._m0[27u].z, fma(_770, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _766));
        float _838 = fma(_774, cbModelParam._m0[28u].z, fma(_770, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _766));
        float _863 = _766 + _512;
        float _864 = _770 + _513;
        float _865 = _774 + _514;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _830;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _834;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _838;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_512, _513, _514), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3710 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3721 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3732 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_512, _513, _514), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3743 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3754 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3765 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_512, _513, _514), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3776 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _3787 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3798 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1149 = fma(_774, cbModelParam._m0[30u].z, fma(_770, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _766));
        float _1153 = fma(_774, cbModelParam._m0[31u].z, fma(_770, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _766));
        float _1157 = fma(_774, cbModelParam._m0[32u].z, fma(_770, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _766));
        float _1180 = _766 + _512;
        float _1181 = _770 + _513;
        float _1182 = _774 + _514;
        float _1192 = fma(_1182, cbModelParam._m0[30u].z, fma(_1181, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1180)) - _1149;
        float _1193 = fma(_1182, cbModelParam._m0[31u].z, fma(_1181, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1180)) - _1153;
        float _1194 = fma(_1182, cbModelParam._m0[32u].z, fma(_1181, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1180)) - _1157;
        float _1198 = inversesqrt(dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194)));
        float _1211 = ((_1198 * _1192) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1149 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1212 = ((_1198 * _1193) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1153 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1198 * _1194) / cbModelParam._m0[35u].z) + ((((((_1157 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1211, _1212, _1213), 0.0);
        float _1248 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1215.x + (-0.5));
        float _1250 = _1248 * (_1215.y + (-0.5));
        float _1251 = _1248 * (_1215.z + (-0.5));
        float _1258 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1222.x + (-0.5));
        float _1260 = _1258 * (_1222.y + (-0.5));
        float _1261 = _1258 * (_1222.z + (-0.5));
        float _1268 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1229.x + (-0.5));
        float _1270 = _1268 * (_1229.y + (-0.5));
        float _1271 = _1268 * (_1229.z + (-0.5));
        float _1278 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1236.x + (-0.5));
        float _1280 = _1278 * (_1236.y + (-0.5));
        float _1281 = _1278 * (_1236.z + (-0.5));
        float _1282 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1283 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = _1249 * 0.5;
        float _1286 = _1259 * 0.5;
        float _1287 = _1269 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_512, _513, _514), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1282 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3861 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1312 + 1.0))) + _1317) * _1282;
        float _1327 = _1250 * 0.5;
        float _1328 = _1260 * 0.5;
        float _1329 = _1270 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_512, _513, _514), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1283 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3894 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1354 + 1.0))) + _1359) * _1283;
        float _1369 = _1251 * 0.5;
        float _1370 = _1261 * 0.5;
        float _1371 = _1271 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_512, _513, _514), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _3927 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1396 + 1.0))) + _1401) * _1284;
        _1418 = _1251;
        _1419 = _1250;
        _1420 = _1249;
        _1421 = _1261;
        _1422 = _1260;
        _1423 = _1259;
        _1424 = _1271;
        _1425 = _1270;
        _1426 = _1269;
        _1427 = _1284;
        _1428 = _1283;
        _1429 = _1282;
        _1430 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1431 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
    }
    else
    {
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = _1106;
        _1428 = _1106;
        _1429 = _1106;
        _1430 = 0.0;
        _1431 = 0.0;
        _1432 = 0.0;
    }
    float _1442 = (cbModelParam._m0[1u].x * (_1430 - _1118)) + _1118;
    float _1443 = (cbModelParam._m0[1u].x * (_1431 - _1119)) + _1119;
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1120)) + _1120;
    float _1465 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1442));
    float _1486 = _713 * 0.5;
    float _1487 = _714 * 0.5;
    float _1488 = _715 * 0.5;
    float _1489 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1492 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1419, _1422, _1425, _1428));
    float _1495 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1418, _1421, _1424, _1427));
    float _1529;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1502 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1506 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1510 = dot(vec4(_1486, _1487, _1488, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1517 = dot(vec4(cbModelParam._m0[39u]), vec4(_1486, _1487, _1488, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1540;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1531 = dot(vec4(cbModelParam._m0[40u]), vec4(_1486, _1487, _1488, 1.0));
        _1540 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1531) ? 0.0 : (isnan(0.0) ? _1531 : max(0.0, _1531))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1540 = 1.0;
    }
    float _1544 = (_1540 * cbModelParam._m0[1u].x) + (_1529 * (1.0 - cbModelParam._m0[1u].x));
    float _1554 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _545);
    float _1555 = isnan(_1554) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1554 : min(cbModelParam._m0[25u].z, _1554));
    float _1637;
    float _1639;
    float _1641;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1604 = fma(_774, cbModelParam._m0[13u].z, fma(_770, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766)) + cbModelParam._m0[13u].w;
        float _1608 = fma(_774, cbModelParam._m0[14u].z, fma(_770, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766)) + cbModelParam._m0[14u].w;
        float _1612 = fma(_774, cbModelParam._m0[15u].z, fma(_770, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766)) + cbModelParam._m0[15u].w;
        float _1615 = fma(_715, cbModelParam._m0[13u].z, fma(_714, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _713));
        float _1618 = fma(_715, cbModelParam._m0[14u].z, fma(_714, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _713));
        float _1621 = fma(_715, cbModelParam._m0[15u].z, fma(_714, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _713));
        float _1649;
        if (_1615 > 0.0)
        {
            _1649 = abs((1.0 - _1604) / _1615);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1604 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1649 = frontier_phi_17_15_ladder;
        }
        float _1853;
        if (_1618 > 0.0)
        {
            _1853 = abs((1.0 - _1608) / _1618);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1608 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1853 = frontier_phi_26_22_ladder;
        }
        float _2096;
        if (_1621 > 0.0)
        {
            _2096 = abs((1.0 - _1612) / _1621);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1612 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2096 = frontier_phi_38_33_ladder;
        }
        float _2098 = isnan(_1853) ? _1649 : (isnan(_1649) ? _1853 : min(_1649, _1853));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1615) + _1604;
        float _2104 = (_2099 * _1618) + _1608;
        float _2105 = (_2099 * _1621) + _1612;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2106;
        float _2110 = _2106 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 > _2110) || ((_2104 < _2108) || ((_2103 < _2108) || (_2103 > _2110))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2105, cbModelParam._m0[9u].z, fma(_2104, cbModelParam._m0[9u].y, _2103 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2105, cbModelParam._m0[10u].z, fma(_2104, cbModelParam._m0[10u].y, _2103 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2105, cbModelParam._m0[11u].z, fma(_2104, cbModelParam._m0[11u].y, _2103 * cbModelParam._m0[11u].x))), _1555);
            frontier_phi_16_38_ladder = _2229.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2229.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2229.x * cbModelParam._m0[1u].y;
        }
        _1637 = frontier_phi_16_38_ladder_2;
        _1639 = frontier_phi_16_38_ladder_1;
        _1641 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1625 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_713, _714, _715), _1555);
        _1637 = _1625.x * cbModelParam._m0[1u].y;
        _1639 = _1625.y * cbModelParam._m0[1u].y;
        _1641 = _1625.z * cbModelParam._m0[1u].y;
    }
    float _1645 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _545);
    float _1646 = isnan(_1645) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1645 : min(cbModelParam._m0[25u].w, _1645));
    float _1739;
    float _1741;
    float _1743;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1703 = fma(_774, cbModelParam._m0[21u].z, fma(_770, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766)) + cbModelParam._m0[21u].w;
        float _1707 = fma(_774, cbModelParam._m0[22u].z, fma(_770, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766)) + cbModelParam._m0[22u].w;
        float _1711 = fma(_774, cbModelParam._m0[23u].z, fma(_770, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766)) + cbModelParam._m0[23u].w;
        float _1714 = fma(_715, cbModelParam._m0[21u].z, fma(_714, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _713));
        float _1717 = fma(_715, cbModelParam._m0[22u].z, fma(_714, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _713));
        float _1720 = fma(_715, cbModelParam._m0[23u].z, fma(_714, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _713));
        float _1858;
        if (_1714 > 0.0)
        {
            _1858 = abs((1.0 - _1703) / _1714);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1703 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1858 = frontier_phi_28_24_ladder;
        }
        float _2123;
        if (_1717 > 0.0)
        {
            _2123 = abs((1.0 - _1707) / _1717);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1707 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2123 = frontier_phi_40_35_ladder;
        }
        float _2328;
        if (_1720 > 0.0)
        {
            _2328 = abs((1.0 - _1711) / _1720);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1711 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2328 = frontier_phi_49_46_ladder;
        }
        float _2330 = isnan(_2123) ? _1858 : (isnan(_1858) ? _2123 : min(_1858, _2123));
        float _2331 = isnan(_2328) ? _2330 : (isnan(_2330) ? _2328 : min(_2330, _2328));
        float _2335 = (_2331 * _1714) + _1703;
        float _2336 = (_2331 * _1717) + _1707;
        float _2337 = (_2331 * _1720) + _1711;
        float _2338 = _2331 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2338;
        float _2341 = _2338 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2337 > _2341) || ((_2337 < _2339) || ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 < _2339) || (_2335 > _2341))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2337, cbModelParam._m0[17u].z, fma(_2336, cbModelParam._m0[17u].y, _2335 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2337, cbModelParam._m0[18u].z, fma(_2336, cbModelParam._m0[18u].y, _2335 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2337, cbModelParam._m0[19u].z, fma(_2336, cbModelParam._m0[19u].y, _2335 * cbModelParam._m0[19u].x))), _1646);
            frontier_phi_25_49_ladder = _2536.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2536.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2536.x * cbModelParam._m0[1u].z;
        }
        _1739 = frontier_phi_25_49_ladder_2;
        _1741 = frontier_phi_25_49_ladder_1;
        _1743 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1723 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_713, _714, _715), _1646);
        _1739 = _1723.x * cbModelParam._m0[1u].z;
        _1741 = _1723.y * cbModelParam._m0[1u].z;
        _1743 = _1723.z * cbModelParam._m0[1u].z;
    }
    float _1755 = ((((1.0 - _734) * ((_721 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_734 * _721)) * _705;
    float _1756 = _1755 * ((cbModelParam._m0[1u].w * (_1739 - _1637)) + _1637);
    float _1757 = _1755 * ((cbModelParam._m0[1u].w * (_1741 - _1639)) + _1639);
    float _1758 = _1755 * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1761 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1764 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1767 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, _1756 * cbSceneParam._m0[91u].x));
    uvec4 _1777 = floatBitsToUint(cbInstanceData._m0[_679 + 5u]);
    uint _1779 = _1777.x * 14u;
    uint _1780 = _1779 + 13u;
    float _1787 = _705 + (-1.0);
    float _1792 = (cbLight._m0[_1780].x * _1787) + 1.0;
    float _1793 = (cbLight._m0[_1780].y * _1787) + 1.0;
    float _1794 = (cbLight._m0[_1780].z * _1787) + 1.0;
    float _1795 = (cbLight._m0[_1780].w * _1787) + 1.0;
    uint _1796 = _1779 + 5u;
    float _1802 = isnan(1.0) ? _1793 : (isnan(_1793) ? 1.0 : min(_1793, 1.0));
    uint _1806 = _1779 + 4u;
    float _1812 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    uint _1816 = _1779 | 1u;
    float _1827 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_512, _513, _514));
    float _1830 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_512, _513, _514));
    float _4063 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _4074 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1835 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1837 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * 0.3183098733425140380859375;
    float _1844 = ((cbLight._m0[_1796].x * _1802) * _1837) + ((cbLight._m0[_1806].x * _1812) * _1835);
    float _1845 = ((_1802 * cbLight._m0[_1796].y) * _1837) + ((_1812 * cbLight._m0[_1806].y) * _1835);
    float _1846 = ((_1802 * cbLight._m0[_1796].z) * _1837) + ((_1812 * cbLight._m0[_1806].z) * _1835);
    uvec4 _1850 = floatBitsToUint(cbLight._m0[_1779 + 12u]);
    bool _1852 = _1850.x == 0u;
    float _1863;
    float _1865;
    float _1867;
    if (_1852)
    {
        _1863 = _1844;
        _1865 = _1845;
        _1867 = _1846;
    }
    else
    {
        uint _1871 = _1779 + 6u;
        float _1887 = (dot(vec3(cbLight._m0[_1779 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _1888 = _1887 * _1887;
        float _4085 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1890 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _1863 = (((cbLight._m0[_1871].x * 0.3183098733425140380859375) * _1889) * _1890) + _1844;
        _1865 = (((cbLight._m0[_1871].y * 0.3183098733425140380859375) * _1889) * _1890) + _1845;
        _1867 = (((cbLight._m0[_1871].z * 0.3183098733425140380859375) * _1889) * _1890) + _1846;
    }
    bool _1870 = _1850.y == 0u;
    float _1908;
    float _1910;
    float _1912;
    if (_1870)
    {
        _1908 = _1863;
        _1910 = _1865;
        _1912 = _1867;
    }
    else
    {
        uint _2067 = _1779 + 7u;
        float _2083 = (dot(vec3(cbLight._m0[_1779 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2084 = _2083 * _2083;
        float _4101 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2085 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2086 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _1908 = (((cbLight._m0[_2067].x * 0.3183098733425140380859375) * _2085) * _2086) + _1863;
        _1910 = (((cbLight._m0[_2067].y * 0.3183098733425140380859375) * _2085) * _2086) + _1865;
        _1912 = (((cbLight._m0[_2067].z * 0.3183098733425140380859375) * _2085) * _2086) + _1867;
    }
    uint _1915 = _1779 + 8u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1779].w)) * _545) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1779].x + _621;
    float _1931 = cbLight._m0[_1779].y + _622;
    float _1932 = cbLight._m0[_1779].z + _623;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1779].xyz));
    float _4117 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _1944 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _1945 = dot(vec3(_512, _513, _514), vec3(_1937, _1938, _1939));
    float _4139 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _1949 = dot(vec3(cbLight._m0[_1779].xyz), vec3(_1937, _1938, _1939));
    float _4150 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1953 = _1929 * _1929;
    float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
    float _1968 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1969 = 1.0 - _1929;
    float _1980 = (0.5 / (((_1944 * ((_1943 * _1969) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _1969) + _1929) * _1943))) * _1943;
    float _4161 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
    float _1982 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
    uint _1993 = _1779 + 9u;
    float _2004 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1816].w)) * _545) * 0.949999988079071044921875);
    float _2005 = _2004 * _2004;
    float _2006 = cbLight._m0[_1816].x + _621;
    float _2007 = cbLight._m0[_1816].y + _622;
    float _2008 = cbLight._m0[_1816].z + _623;
    float _2012 = inversesqrt(dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008)));
    float _2013 = _2012 * _2006;
    float _2014 = _2012 * _2007;
    float _2015 = _2012 * _2008;
    float _2016 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1816].xyz));
    float _4172 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2020 = dot(vec3(_512, _513, _514), vec3(_2013, _2014, _2015));
    float _4183 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1816].xyz), vec3(_2013, _2014, _2015));
    float _4194 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2005 * _2005;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = 1.0 - _2005;
    float _2052 = (0.5 / (((_1944 * ((_2019 * _2042) + _2005)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2042) + _2005) * _2019))) * _2019;
    float _4205 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2054 = (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    float _2064 = (((_2041 * cbLight._m0[_1993].x) * _2054) * _1802) + (((_1968 * cbLight._m0[_1915].x) * _1982) * _1812);
    float _2065 = (((_2041 * cbLight._m0[_1993].y) * _2054) * _1802) + (((_1968 * cbLight._m0[_1915].y) * _1982) * _1812);
    float _2066 = (((_2041 * cbLight._m0[_1993].z) * _2054) * _1802) + (((_1968 * cbLight._m0[_1915].z) * _1982) * _1812);
    float _2128;
    float _2130;
    float _2132;
    if (_1852)
    {
        _2128 = _2064;
        _2130 = _2065;
        _2132 = _2066;
    }
    else
    {
        uint _2134 = _1779 + 2u;
        uint _2138 = _1779 + 10u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _545) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _621;
        float _2155 = cbLight._m0[_2134].y + _622;
        float _2156 = cbLight._m0[_2134].z + _623;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2134].xyz));
        float _4216 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2168 = dot(vec3(_512, _513, _514), vec3(_2161, _2162, _2163));
        float _4227 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4238 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2190 = 1.0 - _2153;
        float _2200 = (0.5 / (((_1944 * ((_2167 * _2190) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2190) + _2153) * _2167))) * _2167;
        float _4249 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2202 = (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2203 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
        _2128 = (((_2189 * cbLight._m0[_2138].x) * _2202) * _2203) + _2064;
        _2130 = (((_2189 * cbLight._m0[_2138].y) * _2202) * _2203) + _2065;
        _2132 = (((_2189 * cbLight._m0[_2138].z) * _2202) * _2203) + _2066;
    }
    float _2238;
    float _2240;
    float _2242;
    if (_1870)
    {
        _2238 = _2128;
        _2240 = _2130;
        _2242 = _2132;
    }
    else
    {
        uint _2249 = _1779 + 3u;
        uint _2253 = _1779 + 11u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _545) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _621;
        float _2270 = cbLight._m0[_2249].y + _622;
        float _2271 = cbLight._m0[_2249].z + _623;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2249].xyz));
        float _4265 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2283 = dot(vec3(_512, _513, _514), vec3(_2276, _2277, _2278));
        float _4276 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4287 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2305 = 1.0 - _2268;
        float _2315 = (0.5 / (((_1944 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_1944 * _2305) + _2268) * _2282))) * _2282;
        float _4298 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
        _2238 = (((_2304 * cbLight._m0[_2253].x) * _2317) * _2318) + _2128;
        _2240 = (((_2304 * cbLight._m0[_2253].y) * _2317) * _2318) + _2130;
        _2242 = (((_2304 * cbLight._m0[_2253].z) * _2317) * _2318) + _2132;
    }
    float _2453;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    float _2463;
    if (_1777.y == 0u)
    {
        float _2393 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2394 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2393;
        float _2395 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2393;
        float _2396 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2393;
        uvec4 _2408 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2409 = _2408.x;
        uint _2420 = uint((float(_2408.y) * floor(float(uint(cbSceneParam._m0[85u].y * _642) / _2409))) + floor(float(uint(cbSceneParam._m0[85u].x * _641) / _2409)));
        float _2430 = (log2(_2396 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2431 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        uint _2434 = uint(isnan(14.0) ? _2431 : (isnan(_2431) ? 14.0 : min(_2431, 14.0)));
        uvec4 _2439 = texelFetch(g_lightClusterGridBuffer, int(((_2434 << 2u) + (_2420 << 6u)) >> 2u));
        uint _2440 = _2439.x;
        uint _2441 = _2408.z;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((((1u << ((_2441 >> 4u) & 15u)) + 4294967295u) & _2440) == 0u) || ((_2441 & 240u) == 0u))
        {
            _2541 = 0.0;
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
        }
        else
        {
            float _2542;
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            uint _2700 = 0u;
            uint _2709;
            bool _2710;
            for (;;)
            {
                _2709 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                _2710 = _2709 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2710)
                {
                    frontier_phi_66_pred = _2694;
                    frontier_phi_66_pred_1 = _2699;
                    frontier_phi_66_pred_2 = _2698;
                    frontier_phi_66_pred_3 = _2697;
                    frontier_phi_66_pred_4 = _2696;
                    frontier_phi_66_pred_5 = _2695;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2709;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2700 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _2394;
                        float _2906 = _2865.y - _2395;
                        float _2907 = _2865.z - _2396;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_660, _663, _666), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4324 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _2394;
                        float _2941 = (-0.0) - _2395;
                        float _2942 = (-0.0) - _2396;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2957 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2958 = 1.0 - _721;
                        float _2965 = sqrt(1.0 - ((1.0 - (_2958 * _2958)) * (1.0 - (_2957 * _2957))));
                        float _2966 = _2965 * _2965;
                        float _2967 = _2966 * _2966;
                        float _2968 = _2947 + _2912;
                        float _2969 = _2948 + _2913;
                        float _2970 = _2949 + _2914;
                        float _2974 = inversesqrt(dot(vec3(_2968, _2969, _2970), vec3(_2968, _2969, _2970)));
                        float _2978 = dot(vec3(_660, _663, _666), vec3(_2947, _2948, _2949));
                        float _4340 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                        float _2981 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _2982 = dot(vec3(_660, _663, _666), vec3(_2974 * _2968, _2974 * _2969, _2974 * _2970));
                        float _4351 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2985 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _2989 = ((_2985 * _2985) * (_2967 + (-1.0))) + 1.0;
                        float _2990 = _2925 * _2966;
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2915) + _2991;
                        float _4362 = isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0));
                        float _2995 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
                        float _2996 = 1.0 - _2966;
                        float _3006 = (0.5 / (((_2995 * ((_2981 * _2996) + _2966)) + 9.9999999392252902907785028219223e-09) + (((_2995 * _2996) + _2966) * _2981))) * _2995;
                        float _4373 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3017 = (((_2967 * 3.1415927410125732421875) * (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0)))) / ((_2989 * _2989) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2769 = (_2936 * _2884.x) + _2842;
                        _2770 = (_2936 * _2884.y) + _2843;
                        _2771 = (_2936 * _2884.z) + _2844;
                        _2766 = (_3017 * _2901.x) + _2839;
                        _2767 = (_3017 * _2901.y) + _2840;
                        _2768 = (_3017 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2766;
                            _2840 = _2767;
                            _2841 = _2768;
                            _2842 = _2769;
                            _2843 = _2770;
                            _2844 = _2771;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_66_pred = _2766;
                    frontier_phi_66_pred_1 = _2771;
                    frontier_phi_66_pred_2 = _2770;
                    frontier_phi_66_pred_3 = _2769;
                    frontier_phi_66_pred_4 = _2768;
                    frontier_phi_66_pred_5 = _2767;
                }
                _2542 = frontier_phi_66_pred;
                _2552 = frontier_phi_66_pred_1;
                _2550 = frontier_phi_66_pred_2;
                _2548 = frontier_phi_66_pred_3;
                _2546 = frontier_phi_66_pred_4;
                _2544 = frontier_phi_66_pred_5;
                uint _2701 = _2700 + 1u;
                if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2694 = _2542;
                    _2695 = _2544;
                    _2696 = _2546;
                    _2697 = _2548;
                    _2698 = _2550;
                    _2699 = _2552;
                    _2700 = _2701;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2541 = _2542;
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
        }
        uvec4 _2555 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2556 = _2555.z;
        uint _2558 = (_2556 >> 8u) & 15u;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((4294967295u << _2558) & _2440) == 0u)
        {
            _2662 = _2541;
            _2664 = _2543;
            _2666 = _2545;
            _2668 = _2547;
            _2670 = _2549;
            _2672 = _2551;
        }
        else
        {
            float _2687 = inversesqrt(dot(vec3(_2394, _2395, _2396), vec3(_2394, _2395, _2396)));
            float _2688 = _2687 * _2394;
            float _2689 = _2687 * _2395;
            float _2690 = _2687 * _2396;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2558 < ((_2556 >> 12u) & 15u))
            {
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2822 = _2541;
                float _2823 = _2543;
                float _2824 = _2545;
                float _2825 = _2547;
                float _2826 = _2549;
                float _2827 = _2551;
                uint _2828 = _2558;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2434 << 5u) + (_2420 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2838)
                    {
                        frontier_phi_77_pred = _2827;
                        frontier_phi_77_pred_1 = _2826;
                        frontier_phi_77_pred_2 = _2825;
                        frontier_phi_77_pred_3 = _2824;
                        frontier_phi_77_pred_4 = _2823;
                        frontier_phi_77_pred_5 = _2822;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3044 = _2822;
                        float _3045 = _2823;
                        float _3046 = _2824;
                        float _3047 = _2825;
                        float _3048 = _2826;
                        float _3049 = _2827;
                        uint _3050 = _2837;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3120;
                        vec4 _3136;
                        float _3183;
                        bool _3184;
                        for (;;)
                        {
                            uint _3061 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3107 = (_3061 * 40u) + 16u;
                            _3120 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3107)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3107 + 3u)).x));
                            uint _3123 = (_3061 * 40u) + 20u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3139 = (_3061 * 40u) + 24u;
                            vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3158 = (_3061 * 40u) + 28u;
                            vec4 _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            _3183 = fma(_2396, _3171.z, fma(_2395, _3171.y, _3171.x * _2394)) + _3171.w;
                            _3184 = !((fma(_2396, _3152.z, fma(_2395, _3152.y, _3152.x * _2394)) + _3152.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3184)
                            {
                                float _3211 = _3076.x - _2394;
                                float _3212 = _3076.y - _2395;
                                float _3213 = _3076.z - _2396;
                                float _3214 = dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213));
                                float _3217 = inversesqrt(_3214);
                                float _3218 = _3217 * _3211;
                                float _3219 = _3217 * _3212;
                                float _3220 = _3217 * _3213;
                                float _3224 = 1.0 - (_3214 / (_3077 * _3077));
                                float _4384 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3229 = sqrt(_3214) * _3092.w;
                                float _3231 = 1.39999997615814208984375 / (_3229 + 1.39999997615814208984375);
                                float _3232 = _3231 * _3231;
                                float _3235 = ((1.0 - _3232) * dot(vec3(_3218, _3219, _3220), vec3(_660, _663, _666))) + _3232;
                                float _3238 = _3229 * _3229;
                                float _3242 = (fma(_2396, _3120.z, fma(_2395, _3120.y, _3120.x * _2394)) + _3120.w) / _3183;
                                float _3243 = (fma(_2396, _3136.z, fma(_2395, _3136.y, _3136.x * _2394)) + _3136.w) / _3183;
                                float _3247 = 1.0 - dot(vec2(_3242, _3243), vec2(_3242, _3243));
                                float _4400 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3248 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3249 = _3248 * (((isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))) * _3225) / ((_3238 * 0.699999988079071044921875) + 1.0));
                                float _3261 = exp2(log2(1.0 / ((_3238 * 3.5) + 5.0)) * 0.25);
                                float _3262 = 1.0 - _721;
                                float _3269 = sqrt(1.0 - ((1.0 - (_3262 * _3262)) * (1.0 - (_3261 * _3261))));
                                float _3270 = _3269 * _3269;
                                float _3271 = _3270 * _3270;
                                float _3272 = _3218 - _2688;
                                float _3273 = _3219 - _2689;
                                float _3274 = _3220 - _2690;
                                float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                                float _3282 = dot(vec3(_660, _663, _666), vec3((-0.0) - _2688, (-0.0) - _2689, (-0.0) - _2690));
                                float _4411 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3285 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3286 = dot(vec3(_660, _663, _666), vec3(_3278 * _3272, _3278 * _3273, _3278 * _3274));
                                float _4422 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3289 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3293 = ((_3289 * _3289) * (_3271 + (-1.0))) + 1.0;
                                float _3294 = _3231 * _3270;
                                float _3295 = _3294 * _3294;
                                float _3301 = ((1.0 - _3295) * dot(vec3(_660, _663, _666), vec3(_3218, _3219, _3220))) + _3295;
                                float _4433 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3303 = 1.0 - _3270;
                                float _3313 = (0.5 / (((_3302 * ((_3285 * _3303) + _3270)) + 9.9999999392252902907785028219223e-09) + (((_3302 * _3303) + _3270) * _3285))) * _3302;
                                float _4444 = isnan(0.0) ? _3313 : (isnan(_3313) ? 0.0 : max(_3313, 0.0));
                                float _3323 = (_3248 * _3225) * (((_3271 * 3.1415927410125732421875) * (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) / ((_3293 * _3293) * ((_3238 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3249 * _3092.y;
                                frontier_phi_83_pred_1 = _3249 * _3092.x;
                                frontier_phi_83_pred_2 = _3323 * _3104.z;
                                frontier_phi_83_pred_3 = _3323 * _3104.y;
                                frontier_phi_83_pred_4 = _3323 * _3104.x;
                                frontier_phi_83_pred_5 = _3249 * _3092.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_83_pred;
                            _3330 = frontier_phi_83_pred_1;
                            _3329 = frontier_phi_83_pred_2;
                            _3328 = frontier_phi_83_pred_3;
                            _3327 = frontier_phi_83_pred_4;
                            _3332 = frontier_phi_83_pred_5;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3036 = _3332 + _3049;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3036;
                        frontier_phi_77_pred_1 = _3035;
                        frontier_phi_77_pred_2 = _3034;
                        frontier_phi_77_pred_3 = _3033;
                        frontier_phi_77_pred_4 = _3032;
                        frontier_phi_77_pred_5 = _3031;
                    }
                    _2673 = frontier_phi_77_pred;
                    _2671 = frontier_phi_77_pred_1;
                    _2669 = frontier_phi_77_pred_2;
                    _2667 = frontier_phi_77_pred_3;
                    _2665 = frontier_phi_77_pred_4;
                    _2663 = frontier_phi_77_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2663;
                        _2823 = _2665;
                        _2824 = _2667;
                        _2825 = _2669;
                        _2826 = _2671;
                        _2827 = _2673;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2667;
                frontier_phi_58_59_ladder_1 = _2673;
                frontier_phi_58_59_ladder_2 = _2671;
                frontier_phi_58_59_ladder_3 = _2669;
                frontier_phi_58_59_ladder_4 = _2665;
                frontier_phi_58_59_ladder_5 = _2663;
            }
            else
            {
                frontier_phi_58_59_ladder = _2545;
                frontier_phi_58_59_ladder_1 = _2551;
                frontier_phi_58_59_ladder_2 = _2549;
                frontier_phi_58_59_ladder_3 = _2547;
                frontier_phi_58_59_ladder_4 = _2543;
                frontier_phi_58_59_ladder_5 = _2541;
            }
            _2662 = frontier_phi_58_59_ladder_5;
            _2664 = frontier_phi_58_59_ladder_4;
            _2666 = frontier_phi_58_59_ladder;
            _2668 = frontier_phi_58_59_ladder_3;
            _2670 = frontier_phi_58_59_ladder_2;
            _2672 = frontier_phi_58_59_ladder_1;
        }
        float _2677 = isnan(1.0) ? _705 : (isnan(_705) ? 1.0 : min(_705, 1.0));
        _2453 = (_2677 * _2668) + _1908;
        _2455 = (_2677 * _2670) + _1910;
        _2457 = (_2677 * _2672) + _1912;
        _2459 = ((_2662 * 0.039999999105930328369140625) * _2677) + _2238;
        _2461 = ((_2664 * 0.039999999105930328369140625) * _2677) + _2240;
        _2463 = ((_2666 * 0.039999999105930328369140625) * _2677) + _2242;
    }
    else
    {
        _2453 = _1908;
        _2455 = _1910;
        _2457 = _1912;
        _2459 = _2238;
        _2461 = _2240;
        _2463 = _2242;
    }
    float _4460 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4471 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _4482 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _2480 = ((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2453 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _705))) + ((_2459 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2481 = ((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2455 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _705))) + ((_2461 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    float _2482 = ((isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2457 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _705))) + ((_2463 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1544)) * cbPerFrame._m0[3u].x);
    uint _2483 = _679 + 6u;
    float _2491 = _641 / cbSceneParam._m0[86u].x;
    float _2492 = _642 / cbSceneParam._m0[86u].y;
    vec4 _2506 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2508 = _2506.x;
    float _2509 = _2506.y;
    float _2510 = _2506.z;
    float _2511 = _2506.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2566 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2567 = _2566 / _564;
        float _2578 = _2567 * _614;
        float _2579 = _615 * _2567;
        float _2580 = (-0.0) - _2579;
        float _2582 = _2567 * _616;
        float _2584 = (cbSceneParam._m0[77u].w * _2580) / _2566;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2579;
        float _2592 = sqrt(((_2578 * _2578) + (_2579 * _2579)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2566)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2580 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2723 = 1.0 / cbSceneParam._m0[80u].x;
            float _2724 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2725 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            _2779 = ((abs(_2592 / _2580) * cbSceneParam._m0[80u].y) * ((((_2734 - _2735) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))))) * _2723)) - ((exp2(_2602 * _2734) - exp2(_2602 * _2735)) * _2723))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2491, _2492, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2511);
        _2604 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2508;
        _2606 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2509;
        _2608 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2510;
        _2610 = _2790 * _2511;
    }
    else
    {
        _2604 = _2508;
        _2606 = _2509;
        _2608 = _2510;
        _2610 = _2511;
    }
    bool _2817;
    vec4 _2620;
    vec4 _2642;
    float _2644;
    float _2648;
    float _2649;
    float _2650;
    float _2651;
    bool _2661;
    for (;;)
    {
        _2620 = cbMatDynParam._m0[0u];
        float _2622 = roundEven(_2620.y);
        bool _2623 = _2622 == 3.0;
        float _2624 = log2(_2610);
        float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * _2480;
        float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * _2481;
        float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * _2482;
        float _2640 = _630 + (-0.5);
        _2642 = cbMtdParam._m0[1u];
        _2644 = _2642.y * _2640;
        float _2647 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2648 = _2647 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
        _2649 = _2647 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
        _2650 = _2647 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
        _2651 = _2640 * 0.999000012874603271484375;
        _2661 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2661)
        {
            if ((cbInstanceData._m0[_679 + 7u].x + _2651) < 0.5)
            {
                _2817 = true;
                break;
            }
        }
        uint _2758 = _681 + uint(_2620.w);
        if ((cbInstanceData._m0[_2758].w < 1.0) && ((cbInstanceData._m0[_2758].w + _2651) < 0.5))
        {
            _2817 = true;
            break;
        }
        if ((_2644 + 1.0) < _2642.x)
        {
            _2817 = true;
            break;
        }
        _2817 = false;
        break;
    }
    float _3022;
    if (_2817)
    {
        discard_state = true;
        _3022 = 0.0;
    }
    else
    {
        _3022 = cbInstanceData._m0[_2483].w;
    }
    SV_Target.x = _2648;
    SV_Target.y = _2649;
    SV_Target.z = _2650;
    SV_Target.w = _3022;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2483].w;
    discard_exit();
}


