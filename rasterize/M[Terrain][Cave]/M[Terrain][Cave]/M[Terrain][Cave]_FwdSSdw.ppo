#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1063;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _249 = _246.x;
    float _257 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _260 = (_257 * (((1.0 - TEXCOORD_3.x) * 2.0) - _249)) + 1.0;
    float _3401 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _261 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
    vec4 _274 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _291 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _293 = _291.x;
    float _294 = _291.y;
    float _295 = _291.z;
    float _302 = ((_274.x - _293) * _261) + _293;
    float _303 = ((_274.y - _294) * _261) + _294;
    float _304 = ((_274.z - _295) * _261) + _295;
    float _308 = (_257 * (((1.0 - TEXCOORD_3.y) * 2.0) - _249)) + 1.0;
    float _3412 = isnan(0.0) ? _308 : (isnan(_308) ? 0.0 : max(_308, 0.0));
    float _309 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    vec4 _321 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _332 = ((_321.x - _302) * _309) + _302;
    float _333 = ((_321.y - _303) * _309) + _303;
    float _334 = ((_321.z - _304) * _309) + _304;
    float _340 = cbMtdParam._m0[10u].x * ((_249 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3423 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    vec4 _370 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _390 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _406 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _408 = _406.x;
    float _409 = _406.y;
    float _410 = _406.z;
    float _417 = ((_390.x - _408) * _261) + _408;
    float _418 = ((_390.y - _409) * _261) + _409;
    float _419 = ((_390.z - _410) * _261) + _410;
    vec4 _432 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _443 = ((_432.x - _417) * _309) + _417;
    float _444 = ((_432.y - _418) * _309) + _418;
    float _445 = ((_432.z - _419) * _309) + _419;
    float _448 = ((1.0 - _445) * _340) + _445;
    float _3434 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _3445 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _3456 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _456 = cbMtdParam._m0[10u].z + dot(vec4(_212, _213, _214, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3467 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
    vec4 _469 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = (((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) - _473) * _457) + _473;
    float _485 = (((((isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) - _471) * _457) + _471) * 2.0) + (-1.0);
    float _486 = (((((isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))) - _472) * _457) + _472) * 2.0) + (-1.0);
    float _487 = dot(vec2(_485, _486), vec2(_485, _486));
    float _3478 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _492 = sqrt(1.0 - (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))));
    float _495 = _485 + (((_370.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _496 = _486 + (((_370.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _499 = fma(_492, _212, fma(_496, _218 * TANGENT.x, _495 * (_204 * _196)));
    float _502 = fma(_492, _213, fma(_496, _218 * TANGENT.y, _495 * (_204 * _197)));
    float _505 = fma(_492, _214, fma(_496, _218 * TANGENT.z, _495 * (_204 * _198)));
    float _509 = inversesqrt(dot(vec3(_499, _502, _505), vec3(_499, _502, _505)));
    float _510 = _509 * _499;
    float _511 = _509 * _502;
    float _512 = _509 * _505;
    float _516 = dot(vec4(_510, _511, _512, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3489 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    vec4 _529 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _533 = _529.z;
    float _540 = (((((cbMtdParam._m0[9u].x - _332) * _341) + _332) - _531) * _517) + _531;
    float _541 = (((((cbMtdParam._m0[9u].y - _333) * _341) + _333) - _532) * _517) + _532;
    float _542 = (((((cbMtdParam._m0[9u].z - _334) * _341) + _334) - _533) * _517) + _533;
    float _3500 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _543 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
    float _3511 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _3522 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3533 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _602 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _612 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _602);
    float _613 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _602);
    float _614 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _602);
    float _618 = inversesqrt(dot(vec3(_612, _613, _614), vec3(_612, _613, _614)));
    float _619 = _612 * _618;
    float _620 = _613 * _618;
    float _621 = _614 * _618;
    float _627 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _628 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _646 = fma(_512, cbSceneParam._m0[5u].z, fma(_511, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _510));
    float _649 = fma(_512, cbSceneParam._m0[6u].z, fma(_511, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _510));
    float _652 = fma(_512, cbSceneParam._m0[7u].z, fma(_511, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _510));
    uint _665 = uint(roundEven(NORMAL.w)) * 13u;
    uint _668 = (_665 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _674 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) * cbInstanceData._m0[_668].x;
    float _675 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) * cbInstanceData._m0[_668].y;
    float _676 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * cbInstanceData._m0[_668].z;
    float _3544 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _3555 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    vec4 _688 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _627, cbSceneParam._m0[86u].y * _628));
    float _691 = _688.x * TEXCOORD_3.w;
    float _692 = dot(vec3(_510, _511, _512), vec3(_619, _620, _621));
    float _695 = _692 * 2.0;
    float _699 = (_695 * _510) - _619;
    float _700 = (_695 * _511) - _620;
    float _701 = (_695 * _512) - _621;
    float _705 = abs(dot(vec3(_619, _620, _621), vec3(_510, _511, _512)));
    float _3577 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _707 = sqrt(_543);
    float _720 = exp2((_707 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_707 * 3.0));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1062;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _787 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _791 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _795 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _820 = _752 + _510;
        float _821 = _756 + _511;
        float _822 = _760 + _512;
        float _832 = fma(_822, cbModelParam._m0[26u].z, fma(_821, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820)) - _787;
        float _833 = fma(_822, cbModelParam._m0[27u].z, fma(_821, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820)) - _791;
        float _834 = fma(_822, cbModelParam._m0[28u].z, fma(_821, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820)) - _795;
        float _838 = inversesqrt(dot(vec3(_832, _833, _834), vec3(_832, _833, _834)));
        float _851 = ((_838 * _832) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_787 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _852 = ((_838 * _833) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_791 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _853 = ((_838 * _834) / cbModelParam._m0[34u].z) + ((((((_795 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_851, _852, _853), 0.0);
        float _890 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_856.x + (-0.5));
        float _892 = _890 * (_856.y + (-0.5));
        float _893 = _890 * (_856.z + (-0.5));
        float _900 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _901 = _900 * (_863.x + (-0.5));
        float _902 = _900 * (_863.y + (-0.5));
        float _903 = _900 * (_863.z + (-0.5));
        float _910 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _911 = _910 * (_870.x + (-0.5));
        float _912 = _910 * (_870.y + (-0.5));
        float _913 = _910 * (_870.z + (-0.5));
        float _920 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _921 = _920 * (_877.x + (-0.5));
        float _922 = _920 * (_877.y + (-0.5));
        float _923 = _920 * (_877.z + (-0.5));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = _891 * 0.5;
        float _928 = _901 * 0.5;
        float _929 = _911 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _944 = (dot(vec3(_510, _511, _512), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _954 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _956 = _955 * 2.0;
        float _960 = (1.0 - _955) / (_955 + 1.0);
        float _3625 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _970 = ((((1.0 - _961) * (_956 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_956 + 1.0))) + _961) * _924;
        float _971 = _892 * 0.5;
        float _972 = _902 * 0.5;
        float _973 = _912 * 0.5;
        float _974 = dot(vec3(_971, _972, _973), vec3(_971, _972, _973));
        float _979 = (_974 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_974);
        float _987 = (dot(vec3(_510, _511, _512), vec3(_979 * _971, _979 * _972, _979 * _973)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _996 = sqrt(((_972 * _972) + (_971 * _971)) + (_973 * _973)) / (_925 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _998 = _997 * 2.0;
        float _1002 = (1.0 - _997) / (_997 + 1.0);
        float _3658 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1012 = ((((1.0 - _1003) * (_998 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_998 + 1.0))) + _1003) * _925;
        float _1013 = _893 * 0.5;
        float _1014 = _903 * 0.5;
        float _1015 = _913 * 0.5;
        float _1016 = dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015));
        float _1021 = (_1016 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1016);
        float _1029 = (dot(vec3(_510, _511, _512), vec3(_1021 * _1013, _1021 * _1014, _1021 * _1015)) + 1.0) * 0.5;
        float _3669 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1038 = sqrt(((_1014 * _1014) + (_1013 * _1013)) + (_1015 * _1015)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3680 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
        float _1040 = _1039 * 2.0;
        float _1044 = (1.0 - _1039) / (_1039 + 1.0);
        float _3691 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
        float _1054 = ((((1.0 - _1045) * (_1040 + 2.0)) * exp2(log2(isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * (_1040 + 1.0))) + _1045) * _926;
        _1062 = _893;
        _1064 = _892;
        _1065 = _891;
        _1066 = _903;
        _1067 = _902;
        _1068 = _901;
        _1069 = _913;
        _1070 = _912;
        _1071 = _911;
        _1072 = _926;
        _1073 = _925;
        _1074 = _924;
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)));
        _1076 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0)));
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0)));
    }
    else
    {
        _1062 = _1063;
        _1064 = _1063;
        _1065 = _1063;
        _1066 = _1063;
        _1067 = _1063;
        _1068 = _1063;
        _1069 = _1063;
        _1070 = _1063;
        _1071 = _1063;
        _1072 = _1063;
        _1073 = _1063;
        _1074 = _1063;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1103 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1107 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1111 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1134 = _752 + _510;
        float _1135 = _756 + _511;
        float _1136 = _760 + _512;
        float _1146 = fma(_1136, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1134)) - _1103;
        float _1147 = fma(_1136, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1134)) - _1107;
        float _1148 = fma(_1136, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1134)) - _1111;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1103 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1107 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[35u].z) + ((((((_1111 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_510, _511, _512), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3754 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_510, _511, _512), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3787 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(_510, _511, _512), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3798 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3809 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3820 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1063;
        _1373 = _1063;
        _1374 = _1063;
        _1375 = _1063;
        _1376 = _1063;
        _1377 = _1063;
        _1378 = _1063;
        _1379 = _1063;
        _1380 = _1063;
        _1381 = _1063;
        _1382 = _1063;
        _1383 = _1063;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1076)) + _1076;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _699 * 0.5;
    float _1441 = _700 * 0.5;
    float _1442 = _701 * 0.5;
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1062, _1066, _1069, _1072));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1064, _1067, _1070, _1073));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1065, _1068, _1071, _1074));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1508 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _543);
    float _1509 = isnan(_1508) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1508 : min(cbModelParam._m0[25u].z, _1508));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_701, cbModelParam._m0[13u].z, fma(_700, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _699));
        float _1572 = fma(_701, cbModelParam._m0[14u].z, fma(_700, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _699));
        float _1575 = fma(_701, cbModelParam._m0[15u].z, fma(_700, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _699));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1603 = frontier_phi_14_12_ladder;
        }
        float _1828;
        if (_1572 > 0.0)
        {
            _1828 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1828 = frontier_phi_23_19_ladder;
        }
        float _2074;
        if (_1575 > 0.0)
        {
            _2074 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2074 = frontier_phi_35_30_ladder;
        }
        float _2076 = isnan(_1828) ? _1603 : (isnan(_1603) ? _1828 : min(_1603, _1828));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1569) + _1558;
        float _2082 = (_2077 * _1572) + _1562;
        float _2083 = (_2077 * _1575) + _1566;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1509);
            frontier_phi_13_35_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_13_35_ladder_2;
        _1593 = frontier_phi_13_35_ladder_1;
        _1595 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_699, _700, _701), _1509);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _543);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1657 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1661 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1665 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1668 = fma(_701, cbModelParam._m0[21u].z, fma(_700, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _699));
        float _1671 = fma(_701, cbModelParam._m0[22u].z, fma(_700, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _699));
        float _1674 = fma(_701, cbModelParam._m0[23u].z, fma(_700, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _699));
        float _1833;
        if (_1668 > 0.0)
        {
            _1833 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1833 = frontier_phi_25_21_ladder;
        }
        float _2101;
        if (_1671 > 0.0)
        {
            _2101 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2101 = frontier_phi_37_32_ladder;
        }
        float _2306;
        if (_1674 > 0.0)
        {
            _2306 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2306 = frontier_phi_46_43_ladder;
        }
        float _2308 = isnan(_2101) ? _1833 : (isnan(_1833) ? _2101 : min(_1833, _2101));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1668) + _1657;
        float _2314 = (_2309 * _1671) + _1661;
        float _2315 = (_2309 * _1674) + _1665;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2514 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_22_46_ladder = _2514.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2514.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2514.x * cbModelParam._m0[1u].z;
        }
        _1693 = frontier_phi_22_46_ladder_2;
        _1695 = frontier_phi_22_46_ladder_1;
        _1697 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_699, _700, _701), _1600);
        _1693 = _1677.x * cbModelParam._m0[1u].z;
        _1695 = _1677.y * cbModelParam._m0[1u].z;
        _1697 = _1677.z * cbModelParam._m0[1u].z;
    }
    float _1709 = ((((1.0 - _720) * ((_707 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_720 * _707)) * _691;
    float _1710 = _1709 * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1711 = _1709 * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1712 = _1709 * ((cbModelParam._m0[1u].w * (_1697 - _1595)) + _1595);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1710 * cbSceneParam._m0[91u].x));
    vec4 _1729 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_627, _628));
    float _1731 = _1729.w;
    float _1743 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1731);
    float _1744 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1731);
    float _1745 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1731);
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_665 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _691 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1787 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1791 = _1751 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_510, _511, _512));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_510, _511, _512));
    float _3956 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _3967 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1768].x * _1774) * _1812) + (((cbLight._m0[_1778].x * _1743) * _1787) * _1810);
    float _1820 = ((_1774 * cbLight._m0[_1768].y) * _1812) + (((cbLight._m0[_1778].y * _1744) * _1787) * _1810);
    float _1821 = ((_1774 * cbLight._m0[_1768].z) * _1812) + (((cbLight._m0[_1778].z * _1745) * _1787) * _1810);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1819;
        _1840 = _1820;
        _1842 = _1821;
    }
    else
    {
        uint _1846 = _1751 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3978 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1865 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1821;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2045 = _1751 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_510, _511, _512)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _3994 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2064 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1883 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1838;
        _1885 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1840;
        _1887 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1842;
    }
    uint _1890 = _1751 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _543) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1751].x + _619;
    float _1906 = cbLight._m0[_1751].y + _620;
    float _1907 = cbLight._m0[_1751].z + _621;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1751].xyz));
    float _4010 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _1919 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
    float _1920 = dot(vec3(_510, _511, _512), vec3(_1912, _1913, _1914));
    float _4032 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1912, _1913, _1914));
    float _4043 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1904;
    float _1955 = (0.5 / (((_1919 * ((_1918 * _1944) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1944) + _1904) * _1918))) * _1918;
    float _4054 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1971 = _1751 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _543) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1791].x + _619;
    float _1985 = cbLight._m0[_1791].y + _620;
    float _1986 = cbLight._m0[_1791].z + _621;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_1791].xyz));
    float _4065 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _1998 = dot(vec3(_510, _511, _512), vec3(_1991, _1992, _1993));
    float _4076 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1991, _1992, _1993));
    float _4087 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1983;
    float _2030 = (0.5 / (((_1919 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2020) + _1983) * _1997))) * _1997;
    float _4098 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2042 = (((_2019 * cbLight._m0[_1971].x) * _2032) * _1774) + ((((cbLight._m0[_1890].x * _1743) * _1943) * _1957) * _1787);
    float _2043 = (((_2019 * cbLight._m0[_1971].y) * _2032) * _1774) + ((((cbLight._m0[_1890].y * _1744) * _1943) * _1957) * _1787);
    float _2044 = (((_2019 * cbLight._m0[_1971].z) * _2032) * _1774) + ((((cbLight._m0[_1890].z * _1745) * _1943) * _1957) * _1787);
    float _2106;
    float _2108;
    float _2110;
    if (_1827)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1751 + 2u;
        uint _2116 = _1751 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _543) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _619;
        float _2133 = cbLight._m0[_2112].y + _620;
        float _2134 = cbLight._m0[_2112].z + _621;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2112].xyz));
        float _4109 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _2146 = dot(vec3(_510, _511, _512), vec3(_2139, _2140, _2141));
        float _4120 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4131 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1919 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2168) + _2131) * _2145))) * _2145;
        float _4142 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2106 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _2042;
        _2108 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _2043;
        _2110 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _2044;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1845)
    {
        _2216 = _2106;
        _2218 = _2108;
        _2220 = _2110;
    }
    else
    {
        uint _2227 = _1751 + 3u;
        uint _2231 = _1751 + 11u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _543) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _619;
        float _2248 = cbLight._m0[_2227].y + _620;
        float _2249 = cbLight._m0[_2227].z + _621;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_510, _511, _512), vec3(cbLight._m0[_2227].xyz));
        float _4158 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _2261 = dot(vec3(_510, _511, _512), vec3(_2254, _2255, _2256));
        float _4169 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4180 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_1919 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2283) + _2246) * _2260))) * _2260;
        float _4191 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2216 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2106;
        _2218 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2108;
        _2220 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2110;
    }
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_1749.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _628) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _627) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
        }
        else
        {
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2664 = 0.0;
            float _2665 = 0.0;
            float _2666 = 0.0;
            float _2667 = 0.0;
            float _2668 = 0.0;
            float _2669 = 0.0;
            uint _2670 = 0u;
            uint _2679;
            bool _2680;
            for (;;)
            {
                _2679 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                _2680 = _2679 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2680)
                {
                    frontier_phi_61_pred = _2664;
                    frontier_phi_61_pred_1 = _2669;
                    frontier_phi_61_pred_2 = _2668;
                    frontier_phi_61_pred_3 = _2667;
                    frontier_phi_61_pred_4 = _2666;
                    frontier_phi_61_pred_5 = _2665;
                }
                else
                {
                    float _2788;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    uint _2794;
                    _2788 = _2664;
                    _2789 = _2665;
                    _2790 = _2666;
                    _2791 = _2667;
                    _2792 = _2668;
                    _2793 = _2669;
                    _2794 = _2679;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    for (;;)
                    {
                        uint _2798 = uint(findLSB(_2794)) + (_2670 << 5u);
                        uint _2795 = (_2794 + 4294967295u) & _2794;
                        uint _2800 = _2798 * 48u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2800)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2800 + 3u)).x));
                        uint _2820 = (_2798 * 48u) + 4u;
                        vec4 _2833 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 3u)).x));
                        uint _2839 = (_2798 * 48u) + 8u;
                        vec3 _2850 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2839)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2839 + 2u)).x));
                        float _2854 = _2814.x - _2372;
                        float _2855 = _2814.y - _2373;
                        float _2856 = _2814.z - _2374;
                        float _2857 = dot(vec3(_2854, _2855, _2856), vec3(_2854, _2855, _2856));
                        float _2860 = inversesqrt(_2857);
                        float _2861 = _2860 * _2854;
                        float _2862 = _2860 * _2855;
                        float _2863 = _2860 * _2856;
                        float _2864 = dot(vec3(_646, _649, _652), vec3(_2861, _2862, _2863));
                        float _2869 = 1.0 - (_2857 * _2814.w);
                        float _4217 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2870 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                        float _2871 = sqrt(_2857) * _2833.w;
                        float _2874 = 1.39999997615814208984375 / (_2871 + 1.39999997615814208984375);
                        float _2875 = _2874 * _2874;
                        float _2878 = ((1.0 - _2875) * _2864) + _2875;
                        float _2881 = _2871 * _2871;
                        float _2885 = ((isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0))) * _2870) / ((_2881 * 0.699999988079071044921875) + 1.0);
                        float _2889 = (-0.0) - _2372;
                        float _2890 = (-0.0) - _2373;
                        float _2891 = (-0.0) - _2374;
                        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2906 = exp2(log2(1.0 / ((_2881 * 3.5) + 5.0)) * 0.25);
                        float _2907 = 1.0 - _707;
                        float _2914 = sqrt(1.0 - ((1.0 - (_2907 * _2907)) * (1.0 - (_2906 * _2906))));
                        float _2915 = _2914 * _2914;
                        float _2916 = _2915 * _2915;
                        float _2917 = _2896 + _2861;
                        float _2918 = _2897 + _2862;
                        float _2919 = _2898 + _2863;
                        float _2923 = inversesqrt(dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919)));
                        float _2927 = dot(vec3(_646, _649, _652), vec3(_2896, _2897, _2898));
                        float _4233 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2930 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
                        float _2931 = dot(vec3(_646, _649, _652), vec3(_2923 * _2917, _2923 * _2918, _2923 * _2919));
                        float _4244 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                        float _2934 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                        float _2938 = ((_2934 * _2934) * (_2916 + (-1.0))) + 1.0;
                        float _2939 = _2874 * _2915;
                        float _2940 = _2939 * _2939;
                        float _2943 = ((1.0 - _2940) * _2864) + _2940;
                        float _4255 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
                        float _2945 = 1.0 - _2915;
                        float _2955 = (0.5 / (((_2944 * ((_2930 * _2945) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2944 * _2945) + _2915) * _2930))) * _2944;
                        float _4266 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2966 = (((_2916 * 3.1415927410125732421875) * (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0)))) / ((_2938 * _2938) * ((_2881 * 2.1991131305694580078125) + 3.141590118408203125))) * _2870;
                        _2723 = (_2885 * _2833.x) + _2791;
                        _2724 = (_2885 * _2833.y) + _2792;
                        _2725 = (_2885 * _2833.z) + _2793;
                        _2720 = (_2966 * _2850.x) + _2788;
                        _2721 = (_2966 * _2850.y) + _2789;
                        _2722 = (_2966 * _2850.z) + _2790;
                        if (_2795 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2788 = _2720;
                            _2789 = _2721;
                            _2790 = _2722;
                            _2791 = _2723;
                            _2792 = _2724;
                            _2793 = _2725;
                            _2794 = _2795;
                        }
                    }
                    frontier_phi_61_pred = _2720;
                    frontier_phi_61_pred_1 = _2725;
                    frontier_phi_61_pred_2 = _2724;
                    frontier_phi_61_pred_3 = _2723;
                    frontier_phi_61_pred_4 = _2722;
                    frontier_phi_61_pred_5 = _2721;
                }
                _2520 = frontier_phi_61_pred;
                _2530 = frontier_phi_61_pred_1;
                _2528 = frontier_phi_61_pred_2;
                _2526 = frontier_phi_61_pred_3;
                _2524 = frontier_phi_61_pred_4;
                _2522 = frontier_phi_61_pred_5;
                uint _2671 = _2670 + 1u;
                if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2664 = _2520;
                    _2665 = _2522;
                    _2666 = _2524;
                    _2667 = _2526;
                    _2668 = _2528;
                    _2669 = _2530;
                    _2670 = _2671;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
        }
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.z;
        uint _2536 = (_2534 >> 8u) & 15u;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        float _2640;
        float _2642;
        if (((4294967295u << _2536) & _2418) == 0u)
        {
            _2632 = _2519;
            _2634 = _2521;
            _2636 = _2523;
            _2638 = _2525;
            _2640 = _2527;
            _2642 = _2529;
        }
        else
        {
            float _2657 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2658 = _2657 * _2372;
            float _2659 = _2657 * _2373;
            float _2660 = _2657 * _2374;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2536 < ((_2534 >> 12u) & 15u))
            {
                float _2633;
                float _2635;
                float _2637;
                float _2639;
                float _2641;
                float _2643;
                float _2771 = _2519;
                float _2772 = _2521;
                float _2773 = _2523;
                float _2774 = _2525;
                float _2775 = _2527;
                float _2776 = _2529;
                uint _2777 = _2536;
                uint _2786;
                bool _2787;
                for (;;)
                {
                    _2786 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2777 << 2u)) >> 2u)).x;
                    _2787 = _2786 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2787)
                    {
                        frontier_phi_67_pred = _2774;
                        frontier_phi_67_pred_1 = _2775;
                        frontier_phi_67_pred_2 = _2776;
                        frontier_phi_67_pred_3 = _2773;
                        frontier_phi_67_pred_4 = _2772;
                        frontier_phi_67_pred_5 = _2771;
                    }
                    else
                    {
                        float _2971;
                        float _2972;
                        float _2973;
                        float _2974;
                        float _2975;
                        float _2976;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3271;
                        float _3272;
                        float _2984 = _2771;
                        float _2985 = _2772;
                        float _2986 = _2773;
                        float _2987 = _2774;
                        float _2988 = _2775;
                        float _2989 = _2776;
                        uint _2990 = _2786;
                        uint _2991;
                        vec4 _3016;
                        float _3017;
                        vec4 _3032;
                        vec3 _3044;
                        vec4 _3060;
                        vec4 _3076;
                        float _3123;
                        bool _3124;
                        for (;;)
                        {
                            uint _3001 = ((_2777 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2990));
                            _2991 = (_2990 + 4294967295u) & _2990;
                            uint _3003 = _3001 * 40u;
                            _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3017 = _3016.w;
                            uint _3019 = (_3001 * 40u) + 4u;
                            _3032 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3019)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3019 + 3u)).x));
                            uint _3034 = (_3001 * 40u) + 8u;
                            _3044 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3034)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3034 + 2u)).x));
                            uint _3047 = (_3001 * 40u) + 16u;
                            _3060 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3047)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3047 + 3u)).x));
                            uint _3063 = (_3001 * 40u) + 20u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            uint _3079 = (_3001 * 40u) + 24u;
                            vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3098 = (_3001 * 40u) + 28u;
                            vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            _3123 = fma(_2374, _3111.z, fma(_2373, _3111.y, _3111.x * _2372)) + _3111.w;
                            _3124 = !((fma(_2374, _3092.z, fma(_2373, _3092.y, _3092.x * _2372)) + _3092.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3124)
                            {
                                float _3151 = _3016.x - _2372;
                                float _3152 = _3016.y - _2373;
                                float _3153 = _3016.z - _2374;
                                float _3154 = dot(vec3(_3151, _3152, _3153), vec3(_3151, _3152, _3153));
                                float _3157 = inversesqrt(_3154);
                                float _3158 = _3157 * _3151;
                                float _3159 = _3157 * _3152;
                                float _3160 = _3157 * _3153;
                                float _3164 = 1.0 - (_3154 / (_3017 * _3017));
                                float _4277 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                                float _3165 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                                float _3169 = sqrt(_3154) * _3032.w;
                                float _3171 = 1.39999997615814208984375 / (_3169 + 1.39999997615814208984375);
                                float _3172 = _3171 * _3171;
                                float _3175 = ((1.0 - _3172) * dot(vec3(_3158, _3159, _3160), vec3(_646, _649, _652))) + _3172;
                                float _3178 = _3169 * _3169;
                                float _3182 = (fma(_2374, _3060.z, fma(_2373, _3060.y, _3060.x * _2372)) + _3060.w) / _3123;
                                float _3183 = (fma(_2374, _3076.z, fma(_2373, _3076.y, _3076.x * _2372)) + _3076.w) / _3123;
                                float _3187 = 1.0 - dot(vec2(_3182, _3183), vec2(_3182, _3183));
                                float _4293 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                                float _3188 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3189 = _3188 * (((isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))) * _3165) / ((_3178 * 0.699999988079071044921875) + 1.0));
                                float _3201 = exp2(log2(1.0 / ((_3178 * 3.5) + 5.0)) * 0.25);
                                float _3202 = 1.0 - _707;
                                float _3209 = sqrt(1.0 - ((1.0 - (_3202 * _3202)) * (1.0 - (_3201 * _3201))));
                                float _3210 = _3209 * _3209;
                                float _3211 = _3210 * _3210;
                                float _3212 = _3158 - _2658;
                                float _3213 = _3159 - _2659;
                                float _3214 = _3160 - _2660;
                                float _3218 = inversesqrt(dot(vec3(_3212, _3213, _3214), vec3(_3212, _3213, _3214)));
                                float _3222 = dot(vec3(_646, _649, _652), vec3((-0.0) - _2658, (-0.0) - _2659, (-0.0) - _2660));
                                float _4304 = isnan(0.0) ? _3222 : (isnan(_3222) ? 0.0 : max(_3222, 0.0));
                                float _3225 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
                                float _3226 = dot(vec3(_646, _649, _652), vec3(_3218 * _3212, _3218 * _3213, _3218 * _3214));
                                float _4315 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3229 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
                                float _3233 = ((_3229 * _3229) * (_3211 + (-1.0))) + 1.0;
                                float _3234 = _3171 * _3210;
                                float _3235 = _3234 * _3234;
                                float _3241 = ((1.0 - _3235) * dot(vec3(_646, _649, _652), vec3(_3158, _3159, _3160))) + _3235;
                                float _4326 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
                                float _3242 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
                                float _3243 = 1.0 - _3210;
                                float _3253 = (0.5 / (((_3242 * ((_3225 * _3243) + _3210)) + 9.9999999392252902907785028219223e-09) + (((_3242 * _3243) + _3210) * _3225))) * _3242;
                                float _4337 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3263 = (_3188 * _3165) * (((_3211 * 3.1415927410125732421875) * (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0)))) / ((_3233 * _3233) * ((_3178 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3263 * _3044.x;
                                frontier_phi_73_pred_1 = _3263 * _3044.y;
                                frontier_phi_73_pred_2 = _3189 * _3032.z;
                                frontier_phi_73_pred_3 = _3189 * _3032.y;
                                frontier_phi_73_pred_4 = _3189 * _3032.x;
                                frontier_phi_73_pred_5 = _3263 * _3044.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3267 = frontier_phi_73_pred;
                            _3268 = frontier_phi_73_pred_1;
                            _3272 = frontier_phi_73_pred_2;
                            _3271 = frontier_phi_73_pred_3;
                            _3270 = frontier_phi_73_pred_4;
                            _3269 = frontier_phi_73_pred_5;
                            _2974 = _3270 + _2987;
                            _2975 = _3271 + _2988;
                            _2976 = _3272 + _2989;
                            _2971 = _3267 + _2984;
                            _2972 = _3268 + _2985;
                            _2973 = _3269 + _2986;
                            if (_2991 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2984 = _2971;
                                _2985 = _2972;
                                _2986 = _2973;
                                _2987 = _2974;
                                _2988 = _2975;
                                _2989 = _2976;
                                _2990 = _2991;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2974;
                        frontier_phi_67_pred_1 = _2975;
                        frontier_phi_67_pred_2 = _2976;
                        frontier_phi_67_pred_3 = _2973;
                        frontier_phi_67_pred_4 = _2972;
                        frontier_phi_67_pred_5 = _2971;
                    }
                    _2639 = frontier_phi_67_pred;
                    _2641 = frontier_phi_67_pred_1;
                    _2643 = frontier_phi_67_pred_2;
                    _2637 = frontier_phi_67_pred_3;
                    _2635 = frontier_phi_67_pred_4;
                    _2633 = frontier_phi_67_pred_5;
                    uint _2778 = _2777 + 1u;
                    if (_2778 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2771 = _2633;
                        _2772 = _2635;
                        _2773 = _2637;
                        _2774 = _2639;
                        _2775 = _2641;
                        _2776 = _2643;
                        _2777 = _2778;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2641;
                frontier_phi_55_56_ladder_1 = _2643;
                frontier_phi_55_56_ladder_2 = _2639;
                frontier_phi_55_56_ladder_3 = _2637;
                frontier_phi_55_56_ladder_4 = _2635;
                frontier_phi_55_56_ladder_5 = _2633;
            }
            else
            {
                frontier_phi_55_56_ladder = _2527;
                frontier_phi_55_56_ladder_1 = _2529;
                frontier_phi_55_56_ladder_2 = _2525;
                frontier_phi_55_56_ladder_3 = _2523;
                frontier_phi_55_56_ladder_4 = _2521;
                frontier_phi_55_56_ladder_5 = _2519;
            }
            _2632 = frontier_phi_55_56_ladder_5;
            _2634 = frontier_phi_55_56_ladder_4;
            _2636 = frontier_phi_55_56_ladder_3;
            _2638 = frontier_phi_55_56_ladder_2;
            _2640 = frontier_phi_55_56_ladder;
            _2642 = frontier_phi_55_56_ladder_1;
        }
        float _2647 = isnan(1.0) ? _691 : (isnan(_691) ? 1.0 : min(_691, 1.0));
        _2431 = (_2647 * _2638) + _1883;
        _2433 = (_2647 * _2640) + _1885;
        _2435 = (_2647 * _2642) + _1887;
        _2437 = ((_2632 * 0.039999999105930328369140625) * _2647) + _2216;
        _2439 = ((_2634 * 0.039999999105930328369140625) * _2647) + _2218;
        _2441 = ((_2636 * 0.039999999105930328369140625) * _2647) + _2220;
    }
    else
    {
        _2431 = _1883;
        _2433 = _1885;
        _2435 = _1887;
        _2437 = _2216;
        _2439 = _2218;
        _2441 = _2220;
    }
    float _4353 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4364 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4375 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    uint _2461 = _665 + 6u;
    float _2469 = _627 / cbSceneParam._m0[86u].x;
    float _2470 = _628 / cbSceneParam._m0[86u].y;
    vec4 _2484 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2486 = _2484.x;
    float _2487 = _2484.y;
    float _2488 = _2484.z;
    float _2489 = _2484.w;
    float _2582;
    float _2584;
    float _2586;
    float _2588;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _2544 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _2545 = _2544 / _562;
        float _2556 = _2545 * _612;
        float _2557 = _613 * _2545;
        float _2558 = (-0.0) - _2557;
        float _2560 = _2545 * _614;
        float _2562 = (cbSceneParam._m0[77u].w * _2558) / _2544;
        float _2563 = _2562 + cbSceneParam._m0[79u].w;
        float _2564 = cbSceneParam._m0[79u].w - _2557;
        float _2570 = sqrt(((_2556 * _2556) + (_2557 * _2557)) + (_2560 * _2560));
        float _2573 = (1.0 - (cbSceneParam._m0[77u].w / _2544)) * _2570;
        float _2578 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2580 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2733;
        if (abs((_2558 - _2562) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2733 = ((((_2563 > 0.0) ? exp2(_2578 * _2563) : (2.0 - exp2(_2580 * _2563))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2573;
        }
        else
        {
            float _2693 = 1.0 / cbSceneParam._m0[80u].x;
            float _2694 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : max(_2563, _2564));
            float _2695 = isnan(_2564) ? _2563 : (isnan(_2563) ? _2564 : min(_2563, _2564));
            float _2704 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : min(_2694, 0.0));
            float _2705 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : min(_2695, 0.0));
            _2733 = ((abs(_2570 / _2558) * cbSceneParam._m0[80u].y) * ((((_2704 - _2705) * 2.0) - ((exp2(_2578 * (isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0)))) - exp2(_2578 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0))))) * _2693)) - ((exp2(_2580 * _2704) - exp2(_2580 * _2705)) * _2693))) + (_2573 * cbSceneParam._m0[80u].z);
        }
        vec4 _2735 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2469, _2470, 1.0), 0.0);
        float _2744 = exp2((_2733 * (-1.44269502162933349609375)) * (1.0 - _2735.w));
        float _2745 = log2(_2744);
        float _2761 = log2(_2489);
        _2582 = (exp2(_2761 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].x)) * _2735.x) / cbSceneParam._m0[78u].x)) + _2486;
        _2584 = (exp2(_2761 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].y)) * _2735.y) / cbSceneParam._m0[78u].y)) + _2487;
        _2586 = (exp2(_2761 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2745 * cbSceneParam._m0[78u].z)) * _2735.z) / cbSceneParam._m0[78u].z)) + _2488;
        _2588 = _2744 * _2489;
    }
    else
    {
        _2582 = _2486;
        _2584 = _2487;
        _2586 = _2488;
        _2588 = _2489;
    }
    float _2600 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2601 = _2600 == 3.0;
    float _2602 = log2(_2588);
    float _2609 = exp2(_2602 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2431 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _691))) + ((_2437 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2610 = exp2(_2602 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2433 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _691))) + ((_2439 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2611 = exp2(_2602 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_2435 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _691))) + ((_2441 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1498)) * cbPerFrame._m0[3u].x));
    float _2620 = (_2600 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2620 * (_2601 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2582)));
    SV_Target.y = _2620 * (_2601 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2584)));
    SV_Target.z = _2620 * (_2601 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.w = cbInstanceData._m0[_2461].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2461].w;
}


