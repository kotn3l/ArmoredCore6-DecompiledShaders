#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1065;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _251 = _248.x;
    float _259 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _262 = (_259 * (((1.0 - TEXCOORD_3.x) * 2.0) - _251)) + 1.0;
    float _3662 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _263 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    vec4 _276 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _293 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _295 = _293.x;
    float _296 = _293.y;
    float _297 = _293.z;
    float _304 = ((_276.x - _295) * _263) + _295;
    float _305 = ((_276.y - _296) * _263) + _296;
    float _306 = ((_276.z - _297) * _263) + _297;
    float _310 = (_259 * (((1.0 - TEXCOORD_3.y) * 2.0) - _251)) + 1.0;
    float _3673 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _311 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _323 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _334 = ((_323.x - _304) * _311) + _304;
    float _335 = ((_323.y - _305) * _311) + _305;
    float _336 = ((_323.z - _306) * _311) + _306;
    float _342 = cbMtdParam._m0[10u].x * ((_251 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3684 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    vec4 _372 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _392 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _408 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _410 = _408.x;
    float _411 = _408.y;
    float _412 = _408.z;
    float _419 = ((_392.x - _410) * _263) + _410;
    float _420 = ((_392.y - _411) * _263) + _411;
    float _421 = ((_392.z - _412) * _263) + _412;
    vec4 _434 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _445 = ((_434.x - _419) * _311) + _419;
    float _446 = ((_434.y - _420) * _311) + _420;
    float _447 = ((_434.z - _421) * _311) + _421;
    float _450 = ((1.0 - _447) * _342) + _447;
    float _3695 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _3706 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3717 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _458 = cbMtdParam._m0[10u].z + dot(vec4(_214, _215, _216, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3728 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    vec4 _471 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _473 = _471.x;
    float _474 = _471.y;
    float _475 = _471.z;
    float _484 = (((isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) - _475) * _459) + _475;
    float _487 = (((((isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))) - _473) * _459) + _473) * 2.0) + (-1.0);
    float _488 = (((((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) - _474) * _459) + _474) * 2.0) + (-1.0);
    float _489 = dot(vec2(_487, _488), vec2(_487, _488));
    float _3739 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _494 = sqrt(1.0 - (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))));
    float _497 = _487 + (((_372.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _498 = _488 + (((_372.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _501 = fma(_494, _214, fma(_498, _220 * TANGENT.x, _497 * (_206 * _198)));
    float _504 = fma(_494, _215, fma(_498, _220 * TANGENT.y, _497 * (_206 * _199)));
    float _507 = fma(_494, _216, fma(_498, _220 * TANGENT.z, _497 * (_206 * _200)));
    float _511 = inversesqrt(dot(vec3(_501, _504, _507), vec3(_501, _504, _507)));
    float _512 = _511 * _501;
    float _513 = _511 * _504;
    float _514 = _511 * _507;
    float _518 = dot(vec4(_512, _513, _514, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3750 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    vec4 _531 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _535 = _531.z;
    float _542 = (((((cbMtdParam._m0[9u].x - _334) * _343) + _334) - _533) * _519) + _533;
    float _543 = (((((cbMtdParam._m0[9u].y - _335) * _343) + _335) - _534) * _519) + _534;
    float _544 = (((((cbMtdParam._m0[9u].z - _336) * _343) + _336) - _535) * _519) + _535;
    float _3761 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _545 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _3783 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _3794 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _604 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _614 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _604);
    float _615 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _604);
    float _616 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _604);
    float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
    float _621 = _614 * _620;
    float _622 = _615 * _620;
    float _623 = _616 * _620;
    float _629 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _630 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _648 = fma(_514, cbSceneParam._m0[5u].z, fma(_513, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _512));
    float _651 = fma(_514, cbSceneParam._m0[6u].z, fma(_513, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _512));
    float _654 = fma(_514, cbSceneParam._m0[7u].z, fma(_513, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _512));
    uint _667 = uint(roundEven(NORMAL.w)) * 13u;
    uint _670 = (_667 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _676 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_670].x;
    float _677 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_670].y;
    float _678 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_670].z;
    float _3805 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _690 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _629, cbSceneParam._m0[86u].y * _630));
    float _693 = _690.x * TEXCOORD_3.w;
    float _694 = dot(vec3(_512, _513, _514), vec3(_621, _622, _623));
    float _697 = _694 * 2.0;
    float _701 = (_697 * _512) - _621;
    float _702 = (_697 * _513) - _622;
    float _703 = (_697 * _514) - _623;
    float _707 = abs(dot(vec3(_621, _622, _623), vec3(_512, _513, _514)));
    float _3838 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _709 = sqrt(_545);
    float _722 = exp2((_709 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_709 * 3.0));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _793 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _797 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _822 = _754 + _512;
        float _823 = _758 + _513;
        float _824 = _762 + _514;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_512, _513, _514), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3886 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_512, _513, _514), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3919 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_512, _513, _514), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3952 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1109 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1113 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1136 = _754 + _512;
        float _1137 = _758 + _513;
        float _1138 = _762 + _514;
        float _1148 = fma(_1138, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136)) - _1105;
        float _1149 = fma(_1138, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136)) - _1109;
        float _1150 = fma(_1138, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136)) - _1113;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1105 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1109 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[35u].z) + ((((((_1113 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1204 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1171.x + (-0.5));
        float _1206 = _1204 * (_1171.y + (-0.5));
        float _1207 = _1204 * (_1171.z + (-0.5));
        float _1214 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1178.x + (-0.5));
        float _1216 = _1214 * (_1178.y + (-0.5));
        float _1217 = _1214 * (_1178.z + (-0.5));
        float _1224 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1185.x + (-0.5));
        float _1226 = _1224 * (_1185.y + (-0.5));
        float _1227 = _1224 * (_1185.z + (-0.5));
        float _1234 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1192.x + (-0.5));
        float _1236 = _1234 * (_1192.y + (-0.5));
        float _1237 = _1234 * (_1192.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_512, _513, _514), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4015 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1268 + 1.0))) + _1273) * _1238;
        float _1283 = _1206 * 0.5;
        float _1284 = _1216 * 0.5;
        float _1285 = _1226 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_512, _513, _514), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4048 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1310 + 1.0))) + _1315) * _1239;
        float _1325 = _1207 * 0.5;
        float _1326 = _1217 * 0.5;
        float _1327 = _1227 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_512, _513, _514), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4081 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1352 + 1.0))) + _1357) * _1240;
        _1374 = _1207;
        _1375 = _1206;
        _1376 = _1205;
        _1377 = _1217;
        _1378 = _1216;
        _1379 = _1215;
        _1380 = _1227;
        _1381 = _1226;
        _1382 = _1225;
        _1383 = _1240;
        _1384 = _1239;
        _1385 = _1238;
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1065;
        _1375 = _1065;
        _1376 = _1065;
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1421 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1398));
    float _1442 = _701 * 0.5;
    float _1443 = _702 * 0.5;
    float _1444 = _703 * 0.5;
    float _1445 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1448 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1451 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1485;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1458 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1462 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1466 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1473 = dot(vec4(cbModelParam._m0[39u]), vec4(_1442, _1443, _1444, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1496;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1487 = dot(vec4(cbModelParam._m0[40u]), vec4(_1442, _1443, _1444, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1500 = (_1496 * cbModelParam._m0[1u].x) + (_1485 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _545);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1510 : min(cbModelParam._m0[25u].z, _1510));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_703, cbModelParam._m0[13u].z, fma(_702, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _701));
        float _1574 = fma(_703, cbModelParam._m0[14u].z, fma(_702, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _701));
        float _1577 = fma(_703, cbModelParam._m0[15u].z, fma(_702, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _701));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1605 = frontier_phi_14_12_ladder;
        }
        float _1778;
        if (_1574 > 0.0)
        {
            _1778 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1778 = frontier_phi_23_19_ladder;
        }
        float _2073;
        if (_1577 > 0.0)
        {
            _2073 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2073 = frontier_phi_35_30_ladder;
        }
        float _2075 = isnan(_1778) ? _1605 : (isnan(_1605) ? _1778 : min(_1605, _1778));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1571) + _1560;
        float _2081 = (_2076 * _1574) + _1564;
        float _2082 = (_2076 * _1577) + _1568;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1511);
            frontier_phi_13_35_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_13_35_ladder_2;
        _1595 = frontier_phi_13_35_ladder_1;
        _1597 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_701, _702, _703), _1511);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _545);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_703, cbModelParam._m0[21u].z, fma(_702, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _701));
        float _1673 = fma(_703, cbModelParam._m0[22u].z, fma(_702, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _701));
        float _1676 = fma(_703, cbModelParam._m0[23u].z, fma(_702, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _701));
        float _1783;
        if (_1670 > 0.0)
        {
            _1783 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1783 = frontier_phi_25_21_ladder;
        }
        float _2100;
        if (_1673 > 0.0)
        {
            _2100 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2100 = frontier_phi_37_32_ladder;
        }
        float _2427;
        if (_1676 > 0.0)
        {
            _2427 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2427 = frontier_phi_47_44_ladder;
        }
        float _2429 = isnan(_2100) ? _1783 : (isnan(_1783) ? _2100 : min(_1783, _2100));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1670) + _1659;
        float _2435 = (_2430 * _1673) + _1663;
        float _2436 = (_2430 * _1676) + _1667;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2437;
        float _2440 = _2437 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2436 > _2440) || ((_2436 < _2438) || ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 < _2438) || (_2434 > _2440))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2436, cbModelParam._m0[17u].z, fma(_2435, cbModelParam._m0[17u].y, _2434 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2436, cbModelParam._m0[18u].z, fma(_2435, cbModelParam._m0[18u].y, _2434 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2436, cbModelParam._m0[19u].z, fma(_2435, cbModelParam._m0[19u].y, _2434 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_22_47_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_22_47_ladder_2;
        _1697 = frontier_phi_22_47_ladder_1;
        _1699 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_701, _702, _703), _1602);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1711 = ((((1.0 - _722) * ((_709 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_722 * _709)) * _693;
    float _1712 = _1711 * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1713 = _1711 * ((cbModelParam._m0[1u].w * (_1697 - _1595)) + _1595);
    float _1714 = _1711 * ((cbModelParam._m0[1u].w * (_1699 - _1597)) + _1597);
    float _1717 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    float _1757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1770 = _1757 / _1769;
    float _1771 = _1761 / _1769;
    float _1772 = _1765 / _1769;
    float _1919;
    float _1920;
    float _1921;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1799 = ((uint(_1772 > cbSceneParam._m0[59u].y) + uint(_1772 > cbSceneParam._m0[59u].x)) + uint(_1772 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1800 = _1799 + 43u;
        uint _1808 = _1799 + 44u;
        uint _1816 = _1799 + 45u;
        uint _1824 = _1799 + 46u;
        float _1835 = fma(_1769, cbSceneParam._m0[_1800].w, fma(_1765, cbSceneParam._m0[_1800].z, fma(_1761, cbSceneParam._m0[_1800].y, _1757 * cbSceneParam._m0[_1800].x)));
        float _1839 = fma(_1769, cbSceneParam._m0[_1808].w, fma(_1765, cbSceneParam._m0[_1808].z, fma(_1761, cbSceneParam._m0[_1808].y, _1757 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1769, cbSceneParam._m0[_1824].w, fma(_1765, cbSceneParam._m0[_1824].z, fma(_1761, cbSceneParam._m0[_1824].y, _1757 * cbSceneParam._m0[_1824].x)));
        float _1852 = cbSceneParam._m0[33u].z * _1847;
        float _1854 = cbSceneParam._m0[33u].w * _1847;
        float _1857 = fma(_1769, cbSceneParam._m0[_1816].w, fma(_1765, cbSceneParam._m0[_1816].z, fma(_1761, cbSceneParam._m0[_1816].y, _1757 * cbSceneParam._m0[_1816].x))) / _1847;
        float _1905 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
        float _4207 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1912 = (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 + _1835) / _1847, (_1854 + _1839) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 + _1835) / _1847, (_1839 - _1852) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1852) / _1847, (_1839 - _1854) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1854) / _1847, (_1852 + _1839) / _1847), _1857), 0.0)).x), vec4(0.25)));
        _1919 = 1.0 - (_1912 * cbSceneParam._m0[34u].x);
        _1920 = 1.0 - (_1912 * cbSceneParam._m0[34u].y);
        _1921 = 1.0 - (_1912 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1919 = 1.0;
        _1920 = 1.0;
        _1921 = 1.0;
    }
    float _1985;
    float _1987;
    float _1989;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1973 = fma(_1769, cbSceneParam._m0[63u].w, fma(_1765, cbSceneParam._m0[63u].z, fma(_1761, cbSceneParam._m0[63u].y, _1757 * cbSceneParam._m0[63u].x)));
        float _1974 = fma(_1769, cbSceneParam._m0[60u].w, fma(_1765, cbSceneParam._m0[60u].z, fma(_1761, cbSceneParam._m0[60u].y, _1757 * cbSceneParam._m0[60u].x))) / _1973;
        float _1975 = fma(_1769, cbSceneParam._m0[61u].w, fma(_1765, cbSceneParam._m0[61u].z, fma(_1761, cbSceneParam._m0[61u].y, _1757 * cbSceneParam._m0[61u].x))) / _1973;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1974 >= cbSceneParam._m0[64u].x) && (_1975 >= cbSceneParam._m0[64u].y)) && (_1974 <= cbSceneParam._m0[64u].z)) && (_1975 <= cbSceneParam._m0[64u].w))
        {
            float _2113 = fma(_1769, cbSceneParam._m0[62u].w, fma(_1765, cbSceneParam._m0[62u].z, fma(_1761, cbSceneParam._m0[62u].y, _1757 * cbSceneParam._m0[62u].x))) / _1973;
            float _2117 = isnan(cbSceneParam._m0[41u].w) ? _2113 : (isnan(_2113) ? cbSceneParam._m0[41u].w : max(_2113, cbSceneParam._m0[41u].w));
            float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
            float _4223 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
            float _2167 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1974, cbSceneParam._m0[33u].w + _1975), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1974, _1975 - cbSceneParam._m0[33u].z), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].z, _1975 - cbSceneParam._m0[33u].w), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1975), _2117), 0.0)).x), vec4(0.25)));
            float _2171 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
            float _2172 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
            float _2173 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2173) ? _1921 : (isnan(_1921) ? _2173 : min(_1921, _2173));
            frontier_phi_34_33_ladder_1 = isnan(_2172) ? _1920 : (isnan(_1920) ? _2172 : min(_1920, _2172));
            frontier_phi_34_33_ladder_2 = isnan(_2171) ? _1919 : (isnan(_1919) ? _2171 : min(_1919, _2171));
        }
        else
        {
            frontier_phi_34_33_ladder = _1921;
            frontier_phi_34_33_ladder_1 = _1920;
            frontier_phi_34_33_ladder_2 = _1919;
        }
        _1985 = frontier_phi_34_33_ladder_2;
        _1987 = frontier_phi_34_33_ladder_1;
        _1989 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1985 = _1919;
        _1987 = _1920;
        _1989 = _1921;
    }
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_667 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _693 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2032 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2036 = _1996 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_512, _513, _514));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_512, _513, _514));
    float _4259 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4270 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1985) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1987) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1989) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2072)
    {
        _2174 = _2064;
        _2176 = _2065;
        _2178 = _2066;
    }
    else
    {
        uint _2182 = _1996 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4281 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2201 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2064;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2065;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2066;
    }
    bool _2181 = _2070.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2181)
    {
        _2236 = _2174;
        _2238 = _2176;
        _2240 = _2178;
    }
    else
    {
        uint _2398 = _1996 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_512, _513, _514)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4297 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2417 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2236 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2174;
        _2238 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2176;
        _2240 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2178;
    }
    uint _2243 = _1996 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _545) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_1996].x + _621;
    float _2259 = cbLight._m0[_1996].y + _622;
    float _2260 = cbLight._m0[_1996].z + _623;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_1996].xyz));
    float _4313 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _4324 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _2272 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2273 = dot(vec3(_512, _513, _514), vec3(_2265, _2266, _2267));
    float _4335 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2265, _2266, _2267));
    float _4346 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2297 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2272 * ((_2271 * _2297) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2297) + _2257) * _2271))) * _2271;
    float _4357 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2324 = _1996 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _545) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2036].x + _621;
    float _2338 = cbLight._m0[_2036].y + _622;
    float _2339 = cbLight._m0[_2036].z + _623;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2036].xyz));
    float _4368 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2351 = dot(vec3(_512, _513, _514), vec3(_2344, _2345, _2346));
    float _4379 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2344, _2345, _2346));
    float _4390 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2336;
    float _2383 = (0.5 / (((_2272 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2373) + _2336) * _2350))) * _2350;
    float _4401 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2395 = (((_2372 * cbLight._m0[_2324].x) * _2385) * _2019) + ((((cbLight._m0[_2243].x * _1985) * _2296) * _2310) * _2032);
    float _2396 = (((_2372 * cbLight._m0[_2324].y) * _2385) * _2019) + ((((cbLight._m0[_2243].y * _1987) * _2296) * _2310) * _2032);
    float _2397 = (((_2372 * cbLight._m0[_2324].z) * _2385) * _2019) + ((((cbLight._m0[_2243].z * _1989) * _2296) * _2310) * _2032);
    float _2453;
    float _2455;
    float _2457;
    if (_2072)
    {
        _2453 = _2395;
        _2455 = _2396;
        _2457 = _2397;
    }
    else
    {
        uint _2459 = _1996 + 2u;
        uint _2463 = _1996 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _545) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _621;
        float _2480 = cbLight._m0[_2459].y + _622;
        float _2481 = cbLight._m0[_2459].z + _623;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2459].xyz));
        float _4412 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2493 = dot(vec3(_512, _513, _514), vec3(_2486, _2487, _2488));
        float _4423 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4434 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2515 = 1.0 - _2478;
        float _2525 = (0.5 / (((_2272 * ((_2492 * _2515) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2515) + _2478) * _2492))) * _2492;
        float _4445 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2453 = (((_2514 * cbLight._m0[_2463].x) * _2527) * _2528) + _2395;
        _2455 = (((_2514 * cbLight._m0[_2463].y) * _2527) * _2528) + _2396;
        _2457 = (((_2514 * cbLight._m0[_2463].z) * _2527) * _2528) + _2397;
    }
    float _2559;
    float _2561;
    float _2563;
    if (_2181)
    {
        _2559 = _2453;
        _2561 = _2455;
        _2563 = _2457;
    }
    else
    {
        uint _2570 = _1996 + 3u;
        uint _2574 = _1996 + 11u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _545) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _621;
        float _2591 = cbLight._m0[_2570].y + _622;
        float _2592 = cbLight._m0[_2570].z + _623;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_512, _513, _514), vec3(cbLight._m0[_2570].xyz));
        float _4461 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _2604 = dot(vec3(_512, _513, _514), vec3(_2597, _2598, _2599));
        float _4472 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4483 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2625 = (exp2(log2(1.0 - (isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2626 = 1.0 - _2589;
        float _2636 = (0.5 / (((_2272 * ((_2603 * _2626) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2626) + _2589) * _2603))) * _2603;
        float _4494 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2559 = (((_2625 * cbLight._m0[_2574].x) * _2638) * _2639) + _2453;
        _2561 = (((_2625 * cbLight._m0[_2574].y) * _2638) * _2639) + _2455;
        _2563 = (((_2625 * cbLight._m0[_2574].z) * _2638) * _2639) + _2457;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_1994.y == 0u)
    {
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _630) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _629) / _2661)));
        float _2682 = (log2(_1772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
        }
        else
        {
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            float _2920 = 0.0;
            float _2921 = 0.0;
            float _2922 = 0.0;
            uint _2923 = 0u;
            uint _2932;
            bool _2933;
            for (;;)
            {
                _2932 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2923 << 2u)) >> 2u)).x;
                _2933 = _2932 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2933)
                {
                    frontier_phi_66_pred = _2922;
                    frontier_phi_66_pred_1 = _2921;
                    frontier_phi_66_pred_2 = _2920;
                    frontier_phi_66_pred_3 = _2919;
                    frontier_phi_66_pred_4 = _2918;
                    frontier_phi_66_pred_5 = _2917;
                }
                else
                {
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    uint _3047;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2920;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2932;
                    float _2973;
                    float _2974;
                    float _2975;
                    float _2976;
                    float _2977;
                    float _2978;
                    for (;;)
                    {
                        uint _3051 = uint(findLSB(_3047)) + (_2923 << 5u);
                        uint _3048 = (_3047 + 4294967295u) & _3047;
                        uint _3053 = _3051 * 48u;
                        vec4 _3067 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3053)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3053 + 3u)).x));
                        uint _3073 = (_3051 * 48u) + 4u;
                        vec4 _3086 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3073)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3073 + 3u)).x));
                        uint _3092 = (_3051 * 48u) + 8u;
                        vec3 _3103 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3092)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3092 + 2u)).x));
                        float _3107 = _3067.x - _1770;
                        float _3108 = _3067.y - _1771;
                        float _3109 = _3067.z - _1772;
                        float _3110 = dot(vec3(_3107, _3108, _3109), vec3(_3107, _3108, _3109));
                        float _3113 = inversesqrt(_3110);
                        float _3114 = _3113 * _3107;
                        float _3115 = _3113 * _3108;
                        float _3116 = _3113 * _3109;
                        float _3117 = dot(vec3(_648, _651, _654), vec3(_3114, _3115, _3116));
                        float _3122 = 1.0 - (_3110 * _3067.w);
                        float _4520 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3123 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3124 = sqrt(_3110) * _3086.w;
                        float _3127 = 1.39999997615814208984375 / (_3124 + 1.39999997615814208984375);
                        float _3128 = _3127 * _3127;
                        float _3131 = ((1.0 - _3128) * _3117) + _3128;
                        float _3134 = _3124 * _3124;
                        float _3138 = ((isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))) * _3123) / ((_3134 * 0.699999988079071044921875) + 1.0);
                        float _3142 = (-0.0) - _1770;
                        float _3143 = (-0.0) - _1771;
                        float _3144 = (-0.0) - _1772;
                        float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                        float _3149 = _3148 * _3142;
                        float _3150 = _3148 * _3143;
                        float _3151 = _3148 * _3144;
                        float _3158 = exp2(log2(1.0 / ((_3134 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _709;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3149 + _3114;
                        float _3170 = _3150 + _3115;
                        float _3171 = _3151 + _3116;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_648, _651, _654), vec3(_3149, _3150, _3151));
                        float _4536 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                        float _3183 = dot(vec3(_648, _651, _654), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4547 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3127 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3117) + _3192;
                        float _4558 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4569 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3190 * _3190) * ((_3134 * 2.1991131305694580078125) + 3.141590118408203125))) * _3123;
                        _2976 = (_3138 * _3086.x) + _3044;
                        _2977 = (_3138 * _3086.y) + _3045;
                        _2978 = (_3138 * _3086.z) + _3046;
                        _2973 = (_3218 * _3103.x) + _3041;
                        _2974 = (_3218 * _3103.y) + _3042;
                        _2975 = (_3218 * _3103.z) + _3043;
                        if (_3048 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _2976;
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _3048;
                        }
                    }
                    frontier_phi_66_pred = _2978;
                    frontier_phi_66_pred_1 = _2977;
                    frontier_phi_66_pred_2 = _2976;
                    frontier_phi_66_pred_3 = _2975;
                    frontier_phi_66_pred_4 = _2974;
                    frontier_phi_66_pred_5 = _2973;
                }
                _2783 = frontier_phi_66_pred;
                _2781 = frontier_phi_66_pred_1;
                _2779 = frontier_phi_66_pred_2;
                _2777 = frontier_phi_66_pred_3;
                _2775 = frontier_phi_66_pred_4;
                _2773 = frontier_phi_66_pred_5;
                uint _2924 = _2923 + 1u;
                if (_2924 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2917 = _2773;
                    _2918 = _2775;
                    _2919 = _2777;
                    _2920 = _2779;
                    _2921 = _2781;
                    _2922 = _2783;
                    _2923 = _2924;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
        }
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.z;
        uint _2789 = (_2787 >> 8u) & 15u;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        if (((4294967295u << _2789) & _2692) == 0u)
        {
            _2885 = _2772;
            _2887 = _2774;
            _2889 = _2776;
            _2891 = _2778;
            _2893 = _2780;
            _2895 = _2782;
        }
        else
        {
            float _2910 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
            float _2911 = _2910 * _1770;
            float _2912 = _2910 * _1771;
            float _2913 = _2910 * _1772;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2789 < ((_2787 >> 12u) & 15u))
            {
                float _2886;
                float _2888;
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _3024 = _2772;
                float _3025 = _2774;
                float _3026 = _2776;
                float _3027 = _2778;
                float _3028 = _2780;
                float _3029 = _2782;
                uint _3030 = _2789;
                uint _3039;
                bool _3040;
                for (;;)
                {
                    _3039 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3030 << 2u)) >> 2u)).x;
                    _3040 = _3039 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3040)
                    {
                        frontier_phi_72_pred = _3029;
                        frontier_phi_72_pred_1 = _3028;
                        frontier_phi_72_pred_2 = _3027;
                        frontier_phi_72_pred_3 = _3026;
                        frontier_phi_72_pred_4 = _3025;
                        frontier_phi_72_pred_5 = _3024;
                    }
                    else
                    {
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3236 = _3024;
                        float _3237 = _3025;
                        float _3238 = _3026;
                        float _3239 = _3027;
                        float _3240 = _3028;
                        float _3241 = _3029;
                        uint _3242 = _3039;
                        uint _3243;
                        vec4 _3268;
                        float _3269;
                        vec4 _3284;
                        vec3 _3296;
                        vec4 _3312;
                        vec4 _3328;
                        float _3375;
                        bool _3376;
                        for (;;)
                        {
                            uint _3253 = ((_3030 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3242));
                            _3243 = (_3242 + 4294967295u) & _3242;
                            uint _3255 = _3253 * 40u;
                            _3268 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3255 + 3u)).x));
                            _3269 = _3268.w;
                            uint _3271 = (_3253 * 40u) + 4u;
                            _3284 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3271)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3271 + 3u)).x));
                            uint _3286 = (_3253 * 40u) + 8u;
                            _3296 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x));
                            uint _3299 = (_3253 * 40u) + 16u;
                            _3312 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3299)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3299 + 3u)).x));
                            uint _3315 = (_3253 * 40u) + 20u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3331 = (_3253 * 40u) + 24u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3350 = (_3253 * 40u) + 28u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3375 = fma(_1772, _3363.z, fma(_1771, _3363.y, _3363.x * _1770)) + _3363.w;
                            _3376 = !((fma(_1772, _3344.z, fma(_1771, _3344.y, _3344.x * _1770)) + _3344.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3376)
                            {
                                float _3403 = _3268.x - _1770;
                                float _3404 = _3268.y - _1771;
                                float _3405 = _3268.z - _1772;
                                float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                                float _3409 = inversesqrt(_3406);
                                float _3410 = _3409 * _3403;
                                float _3411 = _3409 * _3404;
                                float _3412 = _3409 * _3405;
                                float _3416 = 1.0 - (_3406 / (_3269 * _3269));
                                float _4580 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3421 = sqrt(_3406) * _3284.w;
                                float _3423 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                                float _3424 = _3423 * _3423;
                                float _3427 = ((1.0 - _3424) * dot(vec3(_3410, _3411, _3412), vec3(_648, _651, _654))) + _3424;
                                float _3430 = _3421 * _3421;
                                float _3434 = (fma(_1772, _3312.z, fma(_1771, _3312.y, _3312.x * _1770)) + _3312.w) / _3375;
                                float _3435 = (fma(_1772, _3328.z, fma(_1771, _3328.y, _3328.x * _1770)) + _3328.w) / _3375;
                                float _3439 = 1.0 - dot(vec2(_3434, _3435), vec2(_3434, _3435));
                                float _4596 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3441 = _3440 * (((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3417) / ((_3430 * 0.699999988079071044921875) + 1.0));
                                float _3453 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                                float _3454 = 1.0 - _709;
                                float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                                float _3462 = _3461 * _3461;
                                float _3463 = _3462 * _3462;
                                float _3464 = _3410 - _2911;
                                float _3465 = _3411 - _2912;
                                float _3466 = _3412 - _2913;
                                float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                                float _3474 = dot(vec3(_648, _651, _654), vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913));
                                float _4607 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3478 = dot(vec3(_648, _651, _654), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                                float _4618 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                                float _3486 = _3423 * _3462;
                                float _3487 = _3486 * _3486;
                                float _3493 = ((1.0 - _3487) * dot(vec3(_648, _651, _654), vec3(_3410, _3411, _3412))) + _3487;
                                float _4629 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3495 = 1.0 - _3462;
                                float _3505 = (0.5 / (((_3494 * ((_3477 * _3495) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3462) * _3477))) * _3494;
                                float _4640 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3515 = (_3440 * _3417) * (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) / ((_3485 * _3485) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3441 * _3284.y;
                                frontier_phi_78_pred_1 = _3441 * _3284.x;
                                frontier_phi_78_pred_2 = _3515 * _3296.z;
                                frontier_phi_78_pred_3 = _3515 * _3296.y;
                                frontier_phi_78_pred_4 = _3515 * _3296.x;
                                frontier_phi_78_pred_5 = _3441 * _3284.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3523 = frontier_phi_78_pred;
                            _3522 = frontier_phi_78_pred_1;
                            _3521 = frontier_phi_78_pred_2;
                            _3520 = frontier_phi_78_pred_3;
                            _3519 = frontier_phi_78_pred_4;
                            _3524 = frontier_phi_78_pred_5;
                            _3226 = _3522 + _3239;
                            _3227 = _3523 + _3240;
                            _3228 = _3524 + _3241;
                            _3223 = _3519 + _3236;
                            _3224 = _3520 + _3237;
                            _3225 = _3521 + _3238;
                            if (_3243 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3243;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3228;
                        frontier_phi_72_pred_1 = _3227;
                        frontier_phi_72_pred_2 = _3226;
                        frontier_phi_72_pred_3 = _3225;
                        frontier_phi_72_pred_4 = _3224;
                        frontier_phi_72_pred_5 = _3223;
                    }
                    _2896 = frontier_phi_72_pred;
                    _2894 = frontier_phi_72_pred_1;
                    _2892 = frontier_phi_72_pred_2;
                    _2890 = frontier_phi_72_pred_3;
                    _2888 = frontier_phi_72_pred_4;
                    _2886 = frontier_phi_72_pred_5;
                    uint _3031 = _3030 + 1u;
                    if (_3031 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3024 = _2886;
                        _3025 = _2888;
                        _3026 = _2890;
                        _3027 = _2892;
                        _3028 = _2894;
                        _3029 = _2896;
                        _3030 = _3031;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2896;
                frontier_phi_60_61_ladder_1 = _2894;
                frontier_phi_60_61_ladder_2 = _2890;
                frontier_phi_60_61_ladder_3 = _2888;
                frontier_phi_60_61_ladder_4 = _2886;
                frontier_phi_60_61_ladder_5 = _2892;
            }
            else
            {
                frontier_phi_60_61_ladder = _2782;
                frontier_phi_60_61_ladder_1 = _2780;
                frontier_phi_60_61_ladder_2 = _2776;
                frontier_phi_60_61_ladder_3 = _2774;
                frontier_phi_60_61_ladder_4 = _2772;
                frontier_phi_60_61_ladder_5 = _2778;
            }
            _2885 = frontier_phi_60_61_ladder_4;
            _2887 = frontier_phi_60_61_ladder_3;
            _2889 = frontier_phi_60_61_ladder_2;
            _2891 = frontier_phi_60_61_ladder_5;
            _2893 = frontier_phi_60_61_ladder_1;
            _2895 = frontier_phi_60_61_ladder;
        }
        float _2900 = isnan(1.0) ? _693 : (isnan(_693) ? 1.0 : min(_693, 1.0));
        _2705 = (_2900 * _2891) + _2236;
        _2707 = (_2900 * _2893) + _2238;
        _2709 = (_2900 * _2895) + _2240;
        _2711 = ((_2885 * 0.039999999105930328369140625) * _2900) + _2559;
        _2713 = ((_2887 * 0.039999999105930328369140625) * _2900) + _2561;
        _2715 = ((_2889 * 0.039999999105930328369140625) * _2900) + _2563;
    }
    else
    {
        _2705 = _2236;
        _2707 = _2238;
        _2709 = _2240;
        _2711 = _2559;
        _2713 = _2561;
        _2715 = _2563;
    }
    float _4656 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _4667 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4678 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    uint _2735 = _667 + 6u;
    float _2743 = _629 / cbSceneParam._m0[86u].x;
    float _2744 = _630 / cbSceneParam._m0[86u].y;
    vec4 _2758 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2760 = _2758.x;
    float _2761 = _2758.y;
    float _2762 = _2758.z;
    float _2763 = _2758.w;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _2797 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _2798 = _2797 / _564;
        float _2809 = _2798 * _614;
        float _2810 = _615 * _2798;
        float _2811 = (-0.0) - _2810;
        float _2813 = _2798 * _616;
        float _2815 = (cbSceneParam._m0[77u].w * _2811) / _2797;
        float _2816 = _2815 + cbSceneParam._m0[79u].w;
        float _2817 = cbSceneParam._m0[79u].w - _2810;
        float _2823 = sqrt(((_2809 * _2809) + (_2810 * _2810)) + (_2813 * _2813));
        float _2826 = (1.0 - (cbSceneParam._m0[77u].w / _2797)) * _2823;
        float _2831 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2833 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2986;
        if (abs((_2811 - _2815) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2986 = ((((_2816 > 0.0) ? exp2(_2831 * _2816) : (2.0 - exp2(_2833 * _2816))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2826;
        }
        else
        {
            float _2946 = 1.0 / cbSceneParam._m0[80u].x;
            float _2947 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : max(_2816, _2817));
            float _2948 = isnan(_2817) ? _2816 : (isnan(_2816) ? _2817 : min(_2816, _2817));
            float _2957 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : min(_2947, 0.0));
            float _2958 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : min(_2948, 0.0));
            _2986 = ((abs(_2823 / _2811) * cbSceneParam._m0[80u].y) * ((((_2957 - _2958) * 2.0) - ((exp2(_2831 * (isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0)))) - exp2(_2831 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))))) * _2946)) - ((exp2(_2833 * _2957) - exp2(_2833 * _2958)) * _2946))) + (_2826 * cbSceneParam._m0[80u].z);
        }
        vec4 _2988 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2743, _2744, 1.0), 0.0);
        float _2997 = exp2((_2986 * (-1.44269502162933349609375)) * (1.0 - _2988.w));
        float _2998 = log2(_2997);
        float _3014 = log2(_2763);
        _2835 = (exp2(_3014 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].x)) * _2988.x) / cbSceneParam._m0[78u].x)) + _2760;
        _2837 = (exp2(_3014 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].y)) * _2988.y) / cbSceneParam._m0[78u].y)) + _2761;
        _2839 = (exp2(_3014 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2998 * cbSceneParam._m0[78u].z)) * _2988.z) / cbSceneParam._m0[78u].z)) + _2762;
        _2841 = _2997 * _2763;
    }
    else
    {
        _2835 = _2760;
        _2837 = _2761;
        _2839 = _2762;
        _2841 = _2763;
    }
    float _2853 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2854 = _2853 == 3.0;
    float _2855 = log2(_2841);
    float _2862 = exp2(_2855 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2705 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _693))) + ((_2711 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1500)) * cbPerFrame._m0[3u].x));
    float _2863 = exp2(_2855 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2707 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _693))) + ((_2713 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1500)) * cbPerFrame._m0[3u].x));
    float _2864 = exp2(_2855 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2709 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _693))) + ((_2715 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1500)) * cbPerFrame._m0[3u].x));
    float _2873 = (_2853 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2873 * (_2854 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2835)));
    SV_Target.y = _2873 * (_2854 ? _2863 : (_2863 + (cbSceneParam._m0[72u].w * _2837)));
    SV_Target.z = _2873 * (_2854 ? _2864 : (_2864 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.w = cbInstanceData._m0[_2735].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2735].w;
}


