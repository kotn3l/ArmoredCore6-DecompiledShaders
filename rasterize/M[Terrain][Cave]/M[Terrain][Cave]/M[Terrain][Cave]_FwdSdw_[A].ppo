#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1110;
float _3761;
float _3762;
float _3763;
float _3764;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _255 = _252.x;
    float _263 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _266 = (_263 * (((1.0 - TEXCOORD_3.x) * 2.0) - _255)) + 1.0;
    float _3773 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _267 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    vec4 _280 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _297 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _299 = _297.x;
    float _300 = _297.y;
    float _301 = _297.z;
    float _308 = ((_280.x - _299) * _267) + _299;
    float _309 = ((_280.y - _300) * _267) + _300;
    float _310 = ((_280.z - _301) * _267) + _301;
    float _314 = (_263 * (((1.0 - TEXCOORD_3.y) * 2.0) - _255)) + 1.0;
    float _3784 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _315 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    vec4 _327 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _338 = ((_327.x - _308) * _315) + _308;
    float _339 = ((_327.y - _309) * _315) + _309;
    float _340 = ((_327.z - _310) * _315) + _310;
    float _346 = cbMtdParam._m0[10u].x * ((_255 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3795 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    vec4 _376 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _396 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _412 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _414 = _412.x;
    float _415 = _412.y;
    float _416 = _412.z;
    float _423 = ((_396.x - _414) * _267) + _414;
    float _424 = ((_396.y - _415) * _267) + _415;
    float _425 = ((_396.z - _416) * _267) + _416;
    vec4 _438 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _449 = ((_438.x - _423) * _315) + _423;
    float _450 = ((_438.y - _424) * _315) + _424;
    float _451 = ((_438.z - _425) * _315) + _425;
    float _454 = ((1.0 - _451) * _346) + _451;
    float _3806 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3817 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3828 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _462 = cbMtdParam._m0[10u].z + dot(vec4(_218, _219, _220, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3839 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    vec4 _475 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    float _488 = (((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) - _479) * _463) + _479;
    float _491 = (((((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) - _477) * _463) + _477) * 2.0) + (-1.0);
    float _492 = (((((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) - _478) * _463) + _478) * 2.0) + (-1.0);
    float _493 = dot(vec2(_491, _492), vec2(_491, _492));
    float _3850 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _498 = sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))));
    float _501 = _491 + (((_376.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _502 = _492 + (((_376.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _505 = fma(_498, _218, fma(_502, _224 * TANGENT.x, _501 * (_210 * _202)));
    float _508 = fma(_498, _219, fma(_502, _224 * TANGENT.y, _501 * (_210 * _203)));
    float _511 = fma(_498, _220, fma(_502, _224 * TANGENT.z, _501 * (_210 * _204)));
    float _515 = inversesqrt(dot(vec3(_505, _508, _511), vec3(_505, _508, _511)));
    float _516 = _515 * _505;
    float _517 = _515 * _508;
    float _518 = _515 * _511;
    float _522 = dot(vec4(_516, _517, _518, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3861 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    vec4 _535 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _539 = _535.z;
    float _546 = (((((cbMtdParam._m0[9u].x - _338) * _347) + _338) - _537) * _523) + _537;
    float _547 = (((((cbMtdParam._m0[9u].y - _339) * _347) + _339) - _538) * _523) + _538;
    float _548 = (((((cbMtdParam._m0[9u].z - _340) * _347) + _340) - _539) * _523) + _539;
    float _3872 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _549 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _3883 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3894 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3905 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _568 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _618 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _608);
    float _619 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _608);
    float _620 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _608);
    float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
    float _625 = _618 * _624;
    float _626 = _619 * _624;
    float _627 = _620 * _624;
    vec4 _632 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _634 = _632.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _789 = sqrt(((_618 * _618) + (_619 * _619)) + (_620 * _620));
        float _795 = (cbMatDynParam._m0[5u].x * _789) + cbMatDynParam._m0[5u].y;
        float _3916 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _800 = (cbMatDynParam._m0[5u].z * _789) + cbMatDynParam._m0[5u].w;
        float _3927 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) - _796)) + _796) < ((_634 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _645 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _646 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _664 = fma(_518, cbSceneParam._m0[5u].z, fma(_517, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _516));
    float _667 = fma(_518, cbSceneParam._m0[6u].z, fma(_517, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _516));
    float _670 = fma(_518, cbSceneParam._m0[7u].z, fma(_517, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _516));
    uint _683 = uint(roundEven(NORMAL.w)) * 13u;
    uint _685 = _683 + 9u;
    uint _686 = _685 + uint(cbMatDynParam._m0[0u].w);
    float _692 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_686].x;
    float _693 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_686].y;
    float _694 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_686].z;
    float _3938 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _695 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _3960 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _697 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    vec4 _706 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _645, cbSceneParam._m0[86u].y * _646));
    float _709 = _706.x * TEXCOORD_3.w;
    float _710 = dot(vec3(_516, _517, _518), vec3(_625, _626, _627));
    float _713 = _710 * 2.0;
    float _717 = (_713 * _516) - _625;
    float _718 = (_713 * _517) - _626;
    float _719 = (_713 * _518) - _627;
    float _723 = abs(dot(vec3(_625, _626, _627), vec3(_516, _517, _518)));
    float _3971 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _725 = sqrt(_549);
    float _738 = exp2((_725 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_725 * 3.0));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1109;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770));
        float _838 = fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770));
        float _842 = fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770));
        float _867 = _770 + _516;
        float _868 = _774 + _517;
        float _869 = _778 + _518;
        float _879 = fma(_869, cbModelParam._m0[26u].z, fma(_868, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _867)) - _834;
        float _880 = fma(_869, cbModelParam._m0[27u].z, fma(_868, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _867)) - _838;
        float _881 = fma(_869, cbModelParam._m0[28u].z, fma(_868, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _867)) - _842;
        float _885 = inversesqrt(dot(vec3(_879, _880, _881), vec3(_879, _880, _881)));
        float _898 = ((_885 * _879) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_834 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _899 = ((_885 * _880) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_838 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _900 = ((_885 * _881) / cbModelParam._m0[34u].z) + ((((((_842 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _910 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_898, _899, _900), 0.0);
        float _937 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_903.x + (-0.5));
        float _939 = _937 * (_903.y + (-0.5));
        float _940 = _937 * (_903.z + (-0.5));
        float _947 = exp2((_910.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_910.x + (-0.5));
        float _949 = _947 * (_910.y + (-0.5));
        float _950 = _947 * (_910.z + (-0.5));
        float _957 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_917.x + (-0.5));
        float _959 = _957 * (_917.y + (-0.5));
        float _960 = _957 * (_917.z + (-0.5));
        float _967 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_924.x + (-0.5));
        float _969 = _967 * (_924.y + (-0.5));
        float _970 = _967 * (_924.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _991 = (dot(vec3(_516, _517, _518), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1001 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _4019 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1003 + 1.0))) + _1008) * _971;
        float _1018 = _939 * 0.5;
        float _1019 = _949 * 0.5;
        float _1020 = _959 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(_516, _517, _518), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _4052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1045 + 1.0))) + _1050) * _972;
        float _1060 = _940 * 0.5;
        float _1061 = _950 * 0.5;
        float _1062 = _960 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(_516, _517, _518), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _4063 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _4074 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _4085 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * (_1087 + 1.0))) + _1092) * _973;
        _1109 = _940;
        _1111 = _939;
        _1112 = _938;
        _1113 = _950;
        _1114 = _949;
        _1115 = _948;
        _1116 = _960;
        _1117 = _959;
        _1118 = _958;
        _1119 = _973;
        _1120 = _972;
        _1121 = _971;
        _1122 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _1110;
        _1111 = _1110;
        _1112 = _1110;
        _1113 = _1110;
        _1114 = _1110;
        _1115 = _1110;
        _1116 = _1110;
        _1117 = _1110;
        _1118 = _1110;
        _1119 = _1110;
        _1120 = _1110;
        _1121 = _1110;
        _1122 = 0.0;
        _1123 = 0.0;
        _1124 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770));
        float _1157 = fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770));
        float _1161 = fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770));
        float _1184 = _770 + _516;
        float _1185 = _774 + _517;
        float _1186 = _778 + _518;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_516, _517, _518), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _4148 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_516, _517, _518), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _4181 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_516, _517, _518), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _4214 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _1110;
        _1423 = _1110;
        _1424 = _1110;
        _1425 = _1110;
        _1426 = _1110;
        _1427 = _1110;
        _1428 = _1110;
        _1429 = _1110;
        _1430 = _1110;
        _1431 = _1110;
        _1432 = _1110;
        _1433 = _1110;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1122)) + _1122;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1123)) + _1123;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1124)) + _1124;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _717 * 0.5;
    float _1491 = _718 * 0.5;
    float _1492 = _719 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1109, _1113, _1116, _1119));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _549);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1641;
    float _1643;
    float _1645;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1608 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1612 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1616 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1619 = fma(_719, cbModelParam._m0[13u].z, fma(_718, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _717));
        float _1622 = fma(_719, cbModelParam._m0[14u].z, fma(_718, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _717));
        float _1625 = fma(_719, cbModelParam._m0[15u].z, fma(_718, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _717));
        float _1653;
        if (_1619 > 0.0)
        {
            _1653 = abs((1.0 - _1608) / _1619);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1608 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1653 = frontier_phi_17_15_ladder;
        }
        float _1826;
        if (_1622 > 0.0)
        {
            _1826 = abs((1.0 - _1612) / _1622);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1612 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1826 = frontier_phi_26_22_ladder;
        }
        float _2121;
        if (_1625 > 0.0)
        {
            _2121 = abs((1.0 - _1616) / _1625);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1625 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1616 + 1.0) / _1625);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2121 = frontier_phi_38_33_ladder;
        }
        float _2123 = isnan(_1826) ? _1653 : (isnan(_1653) ? _1826 : min(_1653, _1826));
        float _2124 = isnan(_2121) ? _2123 : (isnan(_2123) ? _2121 : min(_2123, _2121));
        float _2128 = (_2124 * _1619) + _1608;
        float _2129 = (_2124 * _1622) + _1612;
        float _2130 = (_2124 * _1625) + _1616;
        float _2131 = _2124 * 9.9999997473787516355514526367188e-05;
        float _2133 = (-1.0) - _2131;
        float _2135 = _2131 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2130 > _2135) || ((_2130 < _2133) || ((_2129 > _2135) || ((_2129 < _2133) || ((_2128 < _2133) || (_2128 > _2135))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2275 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2130, cbModelParam._m0[9u].z, fma(_2129, cbModelParam._m0[9u].y, _2128 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2130, cbModelParam._m0[10u].z, fma(_2129, cbModelParam._m0[10u].y, _2128 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2130, cbModelParam._m0[11u].z, fma(_2129, cbModelParam._m0[11u].y, _2128 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_16_38_ladder = _2275.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2275.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2275.x * cbModelParam._m0[1u].y;
        }
        _1641 = frontier_phi_16_38_ladder_2;
        _1643 = frontier_phi_16_38_ladder_1;
        _1645 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_717, _718, _719), _1559);
        _1641 = _1629.x * cbModelParam._m0[1u].y;
        _1643 = _1629.y * cbModelParam._m0[1u].y;
        _1645 = _1629.z * cbModelParam._m0[1u].y;
    }
    float _1649 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _549);
    float _1650 = isnan(_1649) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1649 : min(cbModelParam._m0[25u].w, _1649));
    float _1743;
    float _1745;
    float _1747;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1707 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1711 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1715 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1718 = fma(_719, cbModelParam._m0[21u].z, fma(_718, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _717));
        float _1721 = fma(_719, cbModelParam._m0[22u].z, fma(_718, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _717));
        float _1724 = fma(_719, cbModelParam._m0[23u].z, fma(_718, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _717));
        float _1831;
        if (_1718 > 0.0)
        {
            _1831 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1831 = frontier_phi_28_24_ladder;
        }
        float _2148;
        if (_1721 > 0.0)
        {
            _2148 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2148 = frontier_phi_40_35_ladder;
        }
        float _2475;
        if (_1724 > 0.0)
        {
            _2475 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2475 = frontier_phi_50_47_ladder;
        }
        float _2477 = isnan(_2148) ? _1831 : (isnan(_1831) ? _2148 : min(_1831, _2148));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1718) + _1707;
        float _2483 = (_2478 * _1721) + _1711;
        float _2484 = (_2478 * _1724) + _1715;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2486 = (-1.0) - _2485;
        float _2488 = _2485 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2484 > _2488) || ((_2484 < _2486) || ((_2483 > _2488) || ((_2483 < _2486) || ((_2482 < _2486) || (_2482 > _2488))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2602 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2484, cbModelParam._m0[17u].z, fma(_2483, cbModelParam._m0[17u].y, _2482 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2484, cbModelParam._m0[18u].z, fma(_2483, cbModelParam._m0[18u].y, _2482 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2484, cbModelParam._m0[19u].z, fma(_2483, cbModelParam._m0[19u].y, _2482 * cbModelParam._m0[19u].x))), _1650);
            frontier_phi_25_50_ladder = _2602.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2602.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2602.x * cbModelParam._m0[1u].z;
        }
        _1743 = frontier_phi_25_50_ladder_2;
        _1745 = frontier_phi_25_50_ladder_1;
        _1747 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_717, _718, _719), _1650);
        _1743 = _1727.x * cbModelParam._m0[1u].z;
        _1745 = _1727.y * cbModelParam._m0[1u].z;
        _1747 = _1727.z * cbModelParam._m0[1u].z;
    }
    float _1759 = ((((1.0 - _738) * ((_725 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_738 * _725)) * _709;
    float _1760 = _1759 * ((cbModelParam._m0[1u].w * (_1743 - _1641)) + _1641);
    float _1761 = _1759 * ((cbModelParam._m0[1u].w * (_1745 - _1643)) + _1643);
    float _1762 = _1759 * ((cbModelParam._m0[1u].w * (_1747 - _1645)) + _1645);
    float _1765 = fma(_1762, cbSceneParam._m0[89u].z, fma(_1761, cbSceneParam._m0[89u].y, _1760 * cbSceneParam._m0[89u].x));
    float _1768 = fma(_1762, cbSceneParam._m0[90u].z, fma(_1761, cbSceneParam._m0[90u].y, _1760 * cbSceneParam._m0[90u].x));
    float _1771 = fma(_1762, cbSceneParam._m0[91u].z, fma(_1761, cbSceneParam._m0[91u].y, _1760 * cbSceneParam._m0[91u].x));
    float _1805 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1809 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1813 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1817 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1818 = _1805 / _1817;
    float _1819 = _1809 / _1817;
    float _1820 = _1813 / _1817;
    float _1967;
    float _1968;
    float _1969;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1847 = ((uint(_1820 > cbSceneParam._m0[59u].y) + uint(_1820 > cbSceneParam._m0[59u].x)) + uint(_1820 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1848 = _1847 + 43u;
        uint _1856 = _1847 + 44u;
        uint _1864 = _1847 + 45u;
        uint _1872 = _1847 + 46u;
        float _1883 = fma(_1817, cbSceneParam._m0[_1848].w, fma(_1813, cbSceneParam._m0[_1848].z, fma(_1809, cbSceneParam._m0[_1848].y, _1805 * cbSceneParam._m0[_1848].x)));
        float _1887 = fma(_1817, cbSceneParam._m0[_1856].w, fma(_1813, cbSceneParam._m0[_1856].z, fma(_1809, cbSceneParam._m0[_1856].y, _1805 * cbSceneParam._m0[_1856].x)));
        float _1895 = fma(_1817, cbSceneParam._m0[_1872].w, fma(_1813, cbSceneParam._m0[_1872].z, fma(_1809, cbSceneParam._m0[_1872].y, _1805 * cbSceneParam._m0[_1872].x)));
        float _1900 = cbSceneParam._m0[33u].z * _1895;
        float _1902 = cbSceneParam._m0[33u].w * _1895;
        float _1905 = fma(_1817, cbSceneParam._m0[_1864].w, fma(_1813, cbSceneParam._m0[_1864].z, fma(_1809, cbSceneParam._m0[_1864].y, _1805 * cbSceneParam._m0[_1864].x))) / _1895;
        float _1953 = (cbSceneParam._m0[33u].x - sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820))) * cbSceneParam._m0[33u].y;
        float _4340 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1960 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1900 + _1883) / _1895, (_1902 + _1887) / _1895), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1902 + _1883) / _1895, (_1887 - _1900) / _1895), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 - _1900) / _1895, (_1887 - _1902) / _1895), _1905), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1883 - _1902) / _1895, (_1900 + _1887) / _1895), _1905), 0.0)).x), vec4(0.25)));
        _1967 = 1.0 - (_1960 * cbSceneParam._m0[34u].x);
        _1968 = 1.0 - (_1960 * cbSceneParam._m0[34u].y);
        _1969 = 1.0 - (_1960 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1967 = 1.0;
        _1968 = 1.0;
        _1969 = 1.0;
    }
    float _2033;
    float _2035;
    float _2037;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2021 = fma(_1817, cbSceneParam._m0[63u].w, fma(_1813, cbSceneParam._m0[63u].z, fma(_1809, cbSceneParam._m0[63u].y, _1805 * cbSceneParam._m0[63u].x)));
        float _2022 = fma(_1817, cbSceneParam._m0[60u].w, fma(_1813, cbSceneParam._m0[60u].z, fma(_1809, cbSceneParam._m0[60u].y, _1805 * cbSceneParam._m0[60u].x))) / _2021;
        float _2023 = fma(_1817, cbSceneParam._m0[61u].w, fma(_1813, cbSceneParam._m0[61u].z, fma(_1809, cbSceneParam._m0[61u].y, _1805 * cbSceneParam._m0[61u].x))) / _2021;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2022 >= cbSceneParam._m0[64u].x) && (_2023 >= cbSceneParam._m0[64u].y)) && (_2022 <= cbSceneParam._m0[64u].z)) && (_2023 <= cbSceneParam._m0[64u].w))
        {
            float _2161 = fma(_1817, cbSceneParam._m0[62u].w, fma(_1813, cbSceneParam._m0[62u].z, fma(_1809, cbSceneParam._m0[62u].y, _1805 * cbSceneParam._m0[62u].x))) / _2021;
            float _2165 = isnan(cbSceneParam._m0[41u].w) ? _2161 : (isnan(_2161) ? cbSceneParam._m0[41u].w : max(_2161, cbSceneParam._m0[41u].w));
            float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_1819 * _1819) + (_1818 * _1818)) + (_1820 * _1820))) * cbSceneParam._m0[33u].y;
            float _4356 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
            float _2215 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2022, cbSceneParam._m0[33u].w + _2023), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2022, _2023 - cbSceneParam._m0[33u].z), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2022 - cbSceneParam._m0[33u].z, _2023 - cbSceneParam._m0[33u].w), _2165), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2022 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2023), _2165), 0.0)).x), vec4(0.25)));
            float _2219 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
            float _2220 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
            float _2221 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2221) ? _1969 : (isnan(_1969) ? _2221 : min(_1969, _2221));
            frontier_phi_37_36_ladder_1 = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
            frontier_phi_37_36_ladder_2 = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
        }
        else
        {
            frontier_phi_37_36_ladder = _1969;
            frontier_phi_37_36_ladder_1 = _1968;
            frontier_phi_37_36_ladder_2 = _1967;
        }
        _2033 = frontier_phi_37_36_ladder_2;
        _2035 = frontier_phi_37_36_ladder_1;
        _2037 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2033 = _1967;
        _2035 = _1968;
        _2037 = _1969;
    }
    uvec4 _2042 = floatBitsToUint(cbInstanceData._m0[_683 + 5u]);
    uint _2044 = _2042.x * 14u;
    uint _2045 = _2044 + 13u;
    float _2052 = _709 + (-1.0);
    float _2057 = (cbLight._m0[_2045].x * _2052) + 1.0;
    float _2058 = (cbLight._m0[_2045].y * _2052) + 1.0;
    float _2059 = (cbLight._m0[_2045].z * _2052) + 1.0;
    float _2060 = (cbLight._m0[_2045].w * _2052) + 1.0;
    uint _2061 = _2044 + 5u;
    float _2067 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2071 = _2044 + 4u;
    float _2080 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2084 = _2044 | 1u;
    float _2095 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_516, _517, _518));
    float _2098 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_516, _517, _518));
    float _4392 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _4403 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2103 = (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.3183098733425140380859375;
    float _2105 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.3183098733425140380859375;
    float _2112 = ((cbLight._m0[_2061].x * _2067) * _2105) + (((cbLight._m0[_2071].x * _2033) * _2080) * _2103);
    float _2113 = ((_2067 * cbLight._m0[_2061].y) * _2105) + (((cbLight._m0[_2071].y * _2035) * _2080) * _2103);
    float _2114 = ((_2067 * cbLight._m0[_2061].z) * _2105) + (((cbLight._m0[_2071].z * _2037) * _2080) * _2103);
    uvec4 _2118 = floatBitsToUint(cbLight._m0[_2044 + 12u]);
    bool _2120 = _2118.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2120)
    {
        _2222 = _2112;
        _2224 = _2113;
        _2226 = _2114;
    }
    else
    {
        uint _2230 = _2044 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2044 + 2u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4414 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2249 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2112;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2113;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2114;
    }
    bool _2229 = _2118.y == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2229)
    {
        _2284 = _2222;
        _2286 = _2224;
        _2288 = _2226;
    }
    else
    {
        uint _2446 = _2044 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2044 + 3u].xyz), vec3(_516, _517, _518)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4430 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2465 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2284 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2222;
        _2286 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2224;
        _2288 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2226;
    }
    uint _2291 = _2044 + 8u;
    float _2304 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2044].w)) * _549) * 0.949999988079071044921875);
    float _2305 = _2304 * _2304;
    float _2306 = cbLight._m0[_2044].x + _625;
    float _2307 = cbLight._m0[_2044].y + _626;
    float _2308 = cbLight._m0[_2044].z + _627;
    float _2312 = inversesqrt(dot(vec3(_2306, _2307, _2308), vec3(_2306, _2307, _2308)));
    float _2313 = _2312 * _2306;
    float _2314 = _2312 * _2307;
    float _2315 = _2312 * _2308;
    float _2316 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2044].xyz));
    float _4446 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
    float _4457 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _2320 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _2321 = dot(vec3(_516, _517, _518), vec3(_2313, _2314, _2315));
    float _4468 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _2325 = dot(vec3(cbLight._m0[_2044].xyz), vec3(_2313, _2314, _2315));
    float _4479 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2329 = _2305 * _2305;
    float _2333 = ((_2324 * _2324) * (_2329 + (-1.0))) + 1.0;
    float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2345 = 1.0 - _2305;
    float _2356 = (0.5 / (((_2320 * ((_2319 * _2345) + _2305)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2345) + _2305) * _2319))) * _2319;
    float _4490 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2358 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2329 / ((_2333 * _2333) * 3.141590118408203125));
    uint _2372 = _2044 + 9u;
    float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2084].w)) * _549) * 0.949999988079071044921875);
    float _2384 = _2383 * _2383;
    float _2385 = cbLight._m0[_2084].x + _625;
    float _2386 = cbLight._m0[_2084].y + _626;
    float _2387 = cbLight._m0[_2084].z + _627;
    float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
    float _2392 = _2391 * _2385;
    float _2393 = _2391 * _2386;
    float _2394 = _2391 * _2387;
    float _2395 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2084].xyz));
    float _4501 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
    float _2399 = dot(vec3(_516, _517, _518), vec3(_2392, _2393, _2394));
    float _4512 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2084].xyz), vec3(_2392, _2393, _2394));
    float _4523 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2384 * _2384;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2420 = (exp2(log2(1.0 - (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2421 = 1.0 - _2384;
    float _2431 = (0.5 / (((_2320 * ((_2398 * _2421) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2421) + _2384) * _2398))) * _2398;
    float _4534 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    float _2443 = (((_2420 * cbLight._m0[_2372].x) * _2433) * _2067) + ((((cbLight._m0[_2291].x * _2033) * _2344) * _2358) * _2080);
    float _2444 = (((_2420 * cbLight._m0[_2372].y) * _2433) * _2067) + ((((cbLight._m0[_2291].y * _2035) * _2344) * _2358) * _2080);
    float _2445 = (((_2420 * cbLight._m0[_2372].z) * _2433) * _2067) + ((((cbLight._m0[_2291].z * _2037) * _2344) * _2358) * _2080);
    float _2501;
    float _2503;
    float _2505;
    if (_2120)
    {
        _2501 = _2443;
        _2503 = _2444;
        _2505 = _2445;
    }
    else
    {
        uint _2507 = _2044 + 2u;
        uint _2511 = _2044 + 10u;
        float _2525 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2507].w)) * _549) * 0.949999988079071044921875);
        float _2526 = _2525 * _2525;
        float _2527 = cbLight._m0[_2507].x + _625;
        float _2528 = cbLight._m0[_2507].y + _626;
        float _2529 = cbLight._m0[_2507].z + _627;
        float _2533 = inversesqrt(dot(vec3(_2527, _2528, _2529), vec3(_2527, _2528, _2529)));
        float _2534 = _2533 * _2527;
        float _2535 = _2533 * _2528;
        float _2536 = _2533 * _2529;
        float _2537 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2507].xyz));
        float _4545 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2541 = dot(vec3(_516, _517, _518), vec3(_2534, _2535, _2536));
        float _4556 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2544 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
        float _2545 = dot(vec3(cbLight._m0[_2507].xyz), vec3(_2534, _2535, _2536));
        float _4567 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2549 = _2526 * _2526;
        float _2553 = ((_2544 * _2544) * (_2549 + (-1.0))) + 1.0;
        float _2562 = (exp2(log2(1.0 - (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2563 = 1.0 - _2526;
        float _2573 = (0.5 / (((_2320 * ((_2540 * _2563) + _2526)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2563) + _2526) * _2540))) * _2540;
        float _4578 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2549 / ((_2553 * _2553) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2501 = (((_2562 * cbLight._m0[_2511].x) * _2575) * _2576) + _2443;
        _2503 = (((_2562 * cbLight._m0[_2511].y) * _2575) * _2576) + _2444;
        _2505 = (((_2562 * cbLight._m0[_2511].z) * _2575) * _2576) + _2445;
    }
    float _2607;
    float _2609;
    float _2611;
    if (_2229)
    {
        _2607 = _2501;
        _2609 = _2503;
        _2611 = _2505;
    }
    else
    {
        uint _2618 = _2044 + 3u;
        uint _2622 = _2044 + 11u;
        float _2636 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2618].w)) * _549) * 0.949999988079071044921875);
        float _2637 = _2636 * _2636;
        float _2638 = cbLight._m0[_2618].x + _625;
        float _2639 = cbLight._m0[_2618].y + _626;
        float _2640 = cbLight._m0[_2618].z + _627;
        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
        float _2645 = _2644 * _2638;
        float _2646 = _2644 * _2639;
        float _2647 = _2644 * _2640;
        float _2648 = dot(vec3(_516, _517, _518), vec3(cbLight._m0[_2618].xyz));
        float _4594 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2651 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2652 = dot(vec3(_516, _517, _518), vec3(_2645, _2646, _2647));
        float _4605 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2655 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _2656 = dot(vec3(cbLight._m0[_2618].xyz), vec3(_2645, _2646, _2647));
        float _4616 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _2637 * _2637;
        float _2664 = ((_2655 * _2655) * (_2660 + (-1.0))) + 1.0;
        float _2673 = (exp2(log2(1.0 - (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2674 = 1.0 - _2637;
        float _2684 = (0.5 / (((_2320 * ((_2651 * _2674) + _2637)) + 9.9999999392252902907785028219223e-09) + (((_2320 * _2674) + _2637) * _2651))) * _2651;
        float _4627 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        float _2686 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2660 / ((_2664 * _2664) * 3.141590118408203125));
        float _2687 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2607 = (((_2673 * cbLight._m0[_2622].x) * _2686) * _2687) + _2501;
        _2609 = (((_2673 * cbLight._m0[_2622].y) * _2686) * _2687) + _2503;
        _2611 = (((_2673 * cbLight._m0[_2622].z) * _2686) * _2687) + _2505;
    }
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    float _2761;
    float _2763;
    if (_2042.y == 0u)
    {
        uvec4 _2708 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2709 = _2708.x;
        uint _2720 = uint((float(_2708.y) * floor(float(uint(cbSceneParam._m0[85u].y * _646) / _2709))) + floor(float(uint(cbSceneParam._m0[85u].x * _645) / _2709)));
        float _2730 = (log2(_1820 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2731 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        uint _2734 = uint(isnan(14.0) ? _2731 : (isnan(_2731) ? 14.0 : min(_2731, 14.0)));
        uvec4 _2739 = texelFetch(g_lightClusterGridBuffer, int(((_2734 << 2u) + (_2720 << 6u)) >> 2u));
        uint _2740 = _2739.x;
        uint _2741 = _2708.z;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((((1u << ((_2741 >> 4u) & 15u)) + 4294967295u) & _2740) == 0u) || ((_2741 & 240u) == 0u))
        {
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
        }
        else
        {
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2829;
            float _2831;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2989)
                {
                    frontier_phi_71_pred = _2978;
                    frontier_phi_71_pred_1 = _2977;
                    frontier_phi_71_pred_2 = _2976;
                    frontier_phi_71_pred_3 = _2975;
                    frontier_phi_71_pred_4 = _2974;
                    frontier_phi_71_pred_5 = _2973;
                }
                else
                {
                    float _3118;
                    float _3119;
                    float _3120;
                    float _3121;
                    float _3122;
                    float _3123;
                    uint _3124;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2975;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2988;
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    for (;;)
                    {
                        uint _3128 = uint(findLSB(_3124)) + (_2979 << 5u);
                        uint _3125 = (_3124 + 4294967295u) & _3124;
                        uint _3130 = _3128 * 48u;
                        vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3130)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3130 + 3u)).x));
                        uint _3150 = (_3128 * 48u) + 4u;
                        vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3150)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3150 + 3u)).x));
                        uint _3169 = (_3128 * 48u) + 8u;
                        vec3 _3180 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3169)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3169 + 2u)).x));
                        float _3184 = _3144.x - _1818;
                        float _3185 = _3144.y - _1819;
                        float _3186 = _3144.z - _1820;
                        float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                        float _3190 = inversesqrt(_3187);
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3194 = dot(vec3(_664, _667, _670), vec3(_3191, _3192, _3193));
                        float _3199 = 1.0 - (_3187 * _3144.w);
                        float _4653 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3200 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3201 = sqrt(_3187) * _3163.w;
                        float _3204 = 1.39999997615814208984375 / (_3201 + 1.39999997615814208984375);
                        float _3205 = _3204 * _3204;
                        float _3208 = ((1.0 - _3205) * _3194) + _3205;
                        float _3211 = _3201 * _3201;
                        float _3215 = ((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3200) / ((_3211 * 0.699999988079071044921875) + 1.0);
                        float _3219 = (-0.0) - _1818;
                        float _3220 = (-0.0) - _1819;
                        float _3221 = (-0.0) - _1820;
                        float _3225 = inversesqrt(dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221)));
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3235 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                        float _3236 = 1.0 - _725;
                        float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                        float _3244 = _3243 * _3243;
                        float _3245 = _3244 * _3244;
                        float _3246 = _3226 + _3191;
                        float _3247 = _3227 + _3192;
                        float _3248 = _3228 + _3193;
                        float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                        float _3256 = dot(vec3(_664, _667, _670), vec3(_3226, _3227, _3228));
                        float _4669 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3259 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                        float _3260 = dot(vec3(_664, _667, _670), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                        float _4680 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3263 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                        float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                        float _3268 = _3204 * _3244;
                        float _3269 = _3268 * _3268;
                        float _3272 = ((1.0 - _3269) * _3194) + _3269;
                        float _4691 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3273 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3274 = 1.0 - _3244;
                        float _3284 = (0.5 / (((_3273 * ((_3259 * _3274) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3273 * _3274) + _3244) * _3259))) * _3273;
                        float _4702 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3295 = (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) / ((_3267 * _3267) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125))) * _3200;
                        _3048 = (_3215 * _3163.x) + _3121;
                        _3049 = (_3215 * _3163.y) + _3122;
                        _3050 = (_3215 * _3163.z) + _3123;
                        _3045 = (_3295 * _3180.x) + _3118;
                        _3046 = (_3295 * _3180.y) + _3119;
                        _3047 = (_3295 * _3180.z) + _3120;
                        if (_3125 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3047;
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3125;
                        }
                    }
                    frontier_phi_71_pred = _3050;
                    frontier_phi_71_pred_1 = _3049;
                    frontier_phi_71_pred_2 = _3048;
                    frontier_phi_71_pred_3 = _3047;
                    frontier_phi_71_pred_4 = _3046;
                    frontier_phi_71_pred_5 = _3045;
                }
                _2831 = frontier_phi_71_pred;
                _2829 = frontier_phi_71_pred_1;
                _2827 = frontier_phi_71_pred_2;
                _2825 = frontier_phi_71_pred_3;
                _2823 = frontier_phi_71_pred_4;
                _2821 = frontier_phi_71_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2821;
                    _2974 = _2823;
                    _2975 = _2825;
                    _2976 = _2827;
                    _2977 = _2829;
                    _2978 = _2831;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
        }
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.z;
        uint _2837 = (_2835 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2837) & _2740) == 0u)
        {
            _2941 = _2820;
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
            float _2967 = _2966 * _1818;
            float _2968 = _2966 * _1819;
            float _2969 = _2966 * _1820;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2837 < ((_2835 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3101 = _2820;
                float _3102 = _2822;
                float _3103 = _2824;
                float _3104 = _2826;
                float _3105 = _2828;
                float _3106 = _2830;
                uint _3107 = _2837;
                uint _3116;
                bool _3117;
                for (;;)
                {
                    _3116 = texelFetch(g_lightClassification, int((((_2734 << 5u) + (_2720 << 9u)) + (_3107 << 2u)) >> 2u)).x;
                    _3117 = _3116 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3117)
                    {
                        frontier_phi_82_pred = _3106;
                        frontier_phi_82_pred_1 = _3105;
                        frontier_phi_82_pred_2 = _3104;
                        frontier_phi_82_pred_3 = _3103;
                        frontier_phi_82_pred_4 = _3102;
                        frontier_phi_82_pred_5 = _3101;
                    }
                    else
                    {
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3322 = _3101;
                        float _3323 = _3102;
                        float _3324 = _3103;
                        float _3325 = _3104;
                        float _3326 = _3105;
                        float _3327 = _3106;
                        uint _3328 = _3116;
                        uint _3329;
                        vec4 _3354;
                        float _3355;
                        vec4 _3370;
                        vec3 _3382;
                        vec4 _3398;
                        vec4 _3414;
                        float _3461;
                        bool _3462;
                        for (;;)
                        {
                            uint _3339 = ((_3107 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3328));
                            _3329 = (_3328 + 4294967295u) & _3328;
                            uint _3341 = _3339 * 40u;
                            _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3355 = _3354.w;
                            uint _3357 = (_3339 * 40u) + 4u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            uint _3372 = (_3339 * 40u) + 8u;
                            _3382 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x));
                            uint _3385 = (_3339 * 40u) + 16u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3339 * 40u) + 20u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3417 = (_3339 * 40u) + 24u;
                            vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3436 = (_3339 * 40u) + 28u;
                            vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            _3461 = fma(_1820, _3449.z, fma(_1819, _3449.y, _3449.x * _1818)) + _3449.w;
                            _3462 = !((fma(_1820, _3430.z, fma(_1819, _3430.y, _3430.x * _1818)) + _3430.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3462)
                            {
                                float _3489 = _3354.x - _1818;
                                float _3490 = _3354.y - _1819;
                                float _3491 = _3354.z - _1820;
                                float _3492 = dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491));
                                float _3495 = inversesqrt(_3492);
                                float _3496 = _3495 * _3489;
                                float _3497 = _3495 * _3490;
                                float _3498 = _3495 * _3491;
                                float _3502 = 1.0 - (_3492 / (_3355 * _3355));
                                float _4713 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3507 = sqrt(_3492) * _3370.w;
                                float _3509 = 1.39999997615814208984375 / (_3507 + 1.39999997615814208984375);
                                float _3510 = _3509 * _3509;
                                float _3513 = ((1.0 - _3510) * dot(vec3(_3496, _3497, _3498), vec3(_664, _667, _670))) + _3510;
                                float _3516 = _3507 * _3507;
                                float _3520 = (fma(_1820, _3398.z, fma(_1819, _3398.y, _3398.x * _1818)) + _3398.w) / _3461;
                                float _3521 = (fma(_1820, _3414.z, fma(_1819, _3414.y, _3414.x * _1818)) + _3414.w) / _3461;
                                float _3525 = 1.0 - dot(vec2(_3520, _3521), vec2(_3520, _3521));
                                float _4729 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                                float _3527 = _3526 * (((isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0))) * _3503) / ((_3516 * 0.699999988079071044921875) + 1.0));
                                float _3539 = exp2(log2(1.0 / ((_3516 * 3.5) + 5.0)) * 0.25);
                                float _3540 = 1.0 - _725;
                                float _3547 = sqrt(1.0 - ((1.0 - (_3540 * _3540)) * (1.0 - (_3539 * _3539))));
                                float _3548 = _3547 * _3547;
                                float _3549 = _3548 * _3548;
                                float _3550 = _3496 - _2967;
                                float _3551 = _3497 - _2968;
                                float _3552 = _3498 - _2969;
                                float _3556 = inversesqrt(dot(vec3(_3550, _3551, _3552), vec3(_3550, _3551, _3552)));
                                float _3560 = dot(vec3(_664, _667, _670), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4740 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3563 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
                                float _3564 = dot(vec3(_664, _667, _670), vec3(_3556 * _3550, _3556 * _3551, _3556 * _3552));
                                float _4751 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3571 = ((_3567 * _3567) * (_3549 + (-1.0))) + 1.0;
                                float _3572 = _3509 * _3548;
                                float _3573 = _3572 * _3572;
                                float _3579 = ((1.0 - _3573) * dot(vec3(_664, _667, _670), vec3(_3496, _3497, _3498))) + _3573;
                                float _4762 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3581 = 1.0 - _3548;
                                float _3591 = (0.5 / (((_3580 * ((_3563 * _3581) + _3548)) + 9.9999999392252902907785028219223e-09) + (((_3580 * _3581) + _3548) * _3563))) * _3580;
                                float _4773 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                                float _3601 = (_3526 * _3503) * (((_3549 * 3.1415927410125732421875) * (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) / ((_3571 * _3571) * ((_3516 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3527 * _3370.z;
                                frontier_phi_88_pred_1 = _3527 * _3370.y;
                                frontier_phi_88_pred_2 = _3527 * _3370.x;
                                frontier_phi_88_pred_3 = _3601 * _3382.z;
                                frontier_phi_88_pred_4 = _3601 * _3382.y;
                                frontier_phi_88_pred_5 = _3601 * _3382.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_88_pred;
                            _3609 = frontier_phi_88_pred_1;
                            _3608 = frontier_phi_88_pred_2;
                            _3607 = frontier_phi_88_pred_3;
                            _3606 = frontier_phi_88_pred_4;
                            _3605 = frontier_phi_88_pred_5;
                            _3312 = _3608 + _3325;
                            _3313 = _3609 + _3326;
                            _3314 = _3610 + _3327;
                            _3309 = _3605 + _3322;
                            _3310 = _3606 + _3323;
                            _3311 = _3607 + _3324;
                            if (_3329 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3312;
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3329;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3314;
                        frontier_phi_82_pred_1 = _3313;
                        frontier_phi_82_pred_2 = _3312;
                        frontier_phi_82_pred_3 = _3311;
                        frontier_phi_82_pred_4 = _3310;
                        frontier_phi_82_pred_5 = _3309;
                    }
                    _2952 = frontier_phi_82_pred;
                    _2950 = frontier_phi_82_pred_1;
                    _2948 = frontier_phi_82_pred_2;
                    _2946 = frontier_phi_82_pred_3;
                    _2944 = frontier_phi_82_pred_4;
                    _2942 = frontier_phi_82_pred_5;
                    uint _3108 = _3107 + 1u;
                    if (_3108 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3101 = _2942;
                        _3102 = _2944;
                        _3103 = _2946;
                        _3104 = _2948;
                        _3105 = _2950;
                        _3106 = _2952;
                        _3107 = _3108;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2948;
                frontier_phi_63_64_ladder_1 = _2952;
                frontier_phi_63_64_ladder_2 = _2950;
                frontier_phi_63_64_ladder_3 = _2946;
                frontier_phi_63_64_ladder_4 = _2944;
                frontier_phi_63_64_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_63_64_ladder = _2826;
                frontier_phi_63_64_ladder_1 = _2830;
                frontier_phi_63_64_ladder_2 = _2828;
                frontier_phi_63_64_ladder_3 = _2824;
                frontier_phi_63_64_ladder_4 = _2822;
                frontier_phi_63_64_ladder_5 = _2820;
            }
            _2941 = frontier_phi_63_64_ladder_5;
            _2943 = frontier_phi_63_64_ladder_4;
            _2945 = frontier_phi_63_64_ladder_3;
            _2947 = frontier_phi_63_64_ladder;
            _2949 = frontier_phi_63_64_ladder_2;
            _2951 = frontier_phi_63_64_ladder_1;
        }
        float _2956 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
        _2753 = (_2956 * _2947) + _2284;
        _2755 = (_2956 * _2949) + _2286;
        _2757 = (_2956 * _2951) + _2288;
        _2759 = ((_2941 * 0.039999999105930328369140625) * _2956) + _2607;
        _2761 = ((_2943 * 0.039999999105930328369140625) * _2956) + _2609;
        _2763 = ((_2945 * 0.039999999105930328369140625) * _2956) + _2611;
    }
    else
    {
        _2753 = _2284;
        _2755 = _2286;
        _2757 = _2288;
        _2759 = _2607;
        _2761 = _2609;
        _2763 = _2611;
    }
    float _4789 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _4800 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _4811 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _2780 = ((isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2753 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _709))) + ((_2759 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2781 = ((isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2755 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _709))) + ((_2761 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2757 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _709))) + ((_2763 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    uint _2783 = _683 + 6u;
    float _2791 = _645 / cbSceneParam._m0[86u].x;
    float _2792 = _646 / cbSceneParam._m0[86u].y;
    vec4 _2806 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, (log2((isnan(cbSceneParam._m0[77u].w) ? _568 : (isnan(_568) ? cbSceneParam._m0[77u].w : min(_568, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2808 = _2806.x;
    float _2809 = _2806.y;
    float _2810 = _2806.z;
    float _2811 = _2806.w;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_568 > cbSceneParam._m0[78u].w)
    {
        float _2845 = isnan(_568) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _568 : min(cbSceneParam._m0[80u].w, _568));
        float _2846 = _2845 / _568;
        float _2857 = _2846 * _618;
        float _2858 = _619 * _2846;
        float _2859 = (-0.0) - _2858;
        float _2861 = _2846 * _620;
        float _2863 = (cbSceneParam._m0[77u].w * _2859) / _2845;
        float _2864 = _2863 + cbSceneParam._m0[79u].w;
        float _2865 = cbSceneParam._m0[79u].w - _2858;
        float _2871 = sqrt(((_2857 * _2857) + (_2858 * _2858)) + (_2861 * _2861));
        float _2874 = (1.0 - (cbSceneParam._m0[77u].w / _2845)) * _2871;
        float _2879 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2881 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3058;
        if (abs((_2859 - _2863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3058 = ((((_2864 > 0.0) ? exp2(_2879 * _2864) : (2.0 - exp2(_2881 * _2864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2874;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : max(_2864, _2865));
            float _3004 = isnan(_2865) ? _2864 : (isnan(_2864) ? _2865 : min(_2864, _2865));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3058 = ((abs(_2871 / _2859) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2879 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2879 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2881 * _3013) - exp2(_2881 * _3014)) * _3002))) + (_2874 * cbSceneParam._m0[80u].z);
        }
        vec4 _3060 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2791, _2792, 1.0), 0.0);
        float _3069 = exp2((_3058 * (-1.44269502162933349609375)) * (1.0 - _3060.w));
        float _3070 = log2(_3069);
        float _3086 = log2(_2811);
        _2883 = (exp2(_3086 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].x)) * _3060.x) / cbSceneParam._m0[78u].x)) + _2808;
        _2885 = (exp2(_3086 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].y)) * _3060.y) / cbSceneParam._m0[78u].y)) + _2809;
        _2887 = (exp2(_3086 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3070 * cbSceneParam._m0[78u].z)) * _3060.z) / cbSceneParam._m0[78u].z)) + _2810;
        _2889 = _3069 * _2811;
    }
    else
    {
        _2883 = _2808;
        _2885 = _2809;
        _2887 = _2810;
        _2889 = _2811;
    }
    bool _3096;
    vec4 _2899;
    vec4 _2921;
    float _2923;
    float _2927;
    float _2928;
    float _2929;
    float _2930;
    bool _2940;
    for (;;)
    {
        _2899 = cbMatDynParam._m0[0u];
        float _2901 = roundEven(_2899.y);
        bool _2902 = _2901 == 3.0;
        float _2903 = log2(_2889);
        float _2910 = exp2(_2903 * cbSceneParam._m0[78u].x) * _2780;
        float _2911 = exp2(_2903 * cbSceneParam._m0[78u].y) * _2781;
        float _2912 = exp2(_2903 * cbSceneParam._m0[78u].z) * _2782;
        float _2919 = _634 + (-0.5);
        _2921 = cbMtdParam._m0[1u];
        _2923 = _2921.y * _2919;
        float _2926 = (_2901 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2927 = _2926 * (_2902 ? _2910 : (_2910 + (cbSceneParam._m0[72u].w * _2883)));
        _2928 = _2926 * (_2902 ? _2911 : (_2911 + (cbSceneParam._m0[72u].w * _2885)));
        _2929 = _2926 * (_2902 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2887)));
        _2930 = _2919 * 0.999000012874603271484375;
        _2940 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2940)
        {
            if ((cbInstanceData._m0[_683 + 7u].x + _2930) < 0.5)
            {
                _3096 = true;
                break;
            }
        }
        uint _3037 = _685 + uint(_2899.w);
        if ((cbInstanceData._m0[_3037].w < 1.0) && ((cbInstanceData._m0[_3037].w + _2930) < 0.5))
        {
            _3096 = true;
            break;
        }
        if ((_2923 + 1.0) < _2921.x)
        {
            _3096 = true;
            break;
        }
        _3096 = false;
        break;
    }
    float _3300;
    if (_3096)
    {
        discard_state = true;
        _3300 = 0.0;
    }
    else
    {
        _3300 = cbInstanceData._m0[_2783].w;
    }
    SV_Target.x = _2927;
    SV_Target.y = _2928;
    SV_Target.z = _2929;
    SV_Target.w = _3300;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2783].w;
    discard_exit();
}


