#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_11;
layout(set = 0, binding = 2) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_18;
layout(set = 0, binding = 8) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Terrain_Cave_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1061;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = _209 * NORMAL.x;
    float _211 = _209 * NORMAL.y;
    float _212 = _209 * NORMAL.z;
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _247 = _244.x;
    float _255 = cbMtdParam._m0[10u].y * (-1.39999997615814208984375);
    float _258 = (_255 * (((1.0 - TEXCOORD_3.x) * 2.0) - _247)) + 1.0;
    float _3375 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _259 = isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0));
    vec4 _272 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w));
    vec4 _289 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_18, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _291 = _289.x;
    float _292 = _289.y;
    float _293 = _289.z;
    float _300 = ((_272.x - _291) * _259) + _291;
    float _301 = ((_272.y - _292) * _259) + _292;
    float _302 = ((_272.z - _293) * _259) + _293;
    float _306 = (_255 * (((1.0 - TEXCOORD_3.y) * 2.0) - _247)) + 1.0;
    float _3386 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _307 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _319 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _330 = ((_319.x - _300) * _307) + _300;
    float _331 = ((_319.y - _301) * _307) + _301;
    float _332 = ((_319.z - _302) * _307) + _302;
    float _338 = cbMtdParam._m0[10u].x * ((_247 + 1.0) + ((1.0 - TEXCOORD_3.z) * (-2.0)));
    float _3397 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
    vec4 _368 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    vec4 _388 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    vec4 _404 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_13, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _406 = _404.x;
    float _407 = _404.y;
    float _408 = _404.z;
    float _415 = ((_388.x - _406) * _259) + _406;
    float _416 = ((_388.y - _407) * _259) + _407;
    float _417 = ((_388.z - _408) * _259) + _408;
    vec4 _430 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _441 = ((_430.x - _415) * _307) + _415;
    float _442 = ((_430.y - _416) * _307) + _416;
    float _443 = ((_430.z - _417) * _307) + _417;
    float _446 = ((1.0 - _443) * _338) + _443;
    float _3408 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _3419 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _3430 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _454 = cbMtdParam._m0[10u].z + dot(vec4(_210, _211, _212, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0));
    float _3441 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    vec4 _467 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _469 = _467.x;
    float _470 = _467.y;
    float _471 = _467.z;
    float _480 = (((isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) - _471) * _455) + _471;
    float _483 = (((((isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) - _469) * _455) + _469) * 2.0) + (-1.0);
    float _484 = (((((isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0))) - _470) * _455) + _470) * 2.0) + (-1.0);
    float _485 = dot(vec2(_483, _484), vec2(_483, _484));
    float _3452 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _490 = sqrt(1.0 - (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))));
    float _493 = _483 + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _494 = _484 + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[10u].w);
    float _497 = fma(_490, _210, fma(_494, _216 * TANGENT.x, _493 * (_202 * _194)));
    float _500 = fma(_490, _211, fma(_494, _216 * TANGENT.y, _493 * (_202 * _195)));
    float _503 = fma(_490, _212, fma(_494, _216 * TANGENT.z, _493 * (_202 * _196)));
    float _507 = inversesqrt(dot(vec3(_497, _500, _503), vec3(_497, _500, _503)));
    float _508 = _507 * _497;
    float _509 = _507 * _500;
    float _510 = _507 * _503;
    float _514 = dot(vec4(_508, _509, _510, 0.0), vec4(cbMtdParam._m0[11u].xyz, 0.0)) + cbMtdParam._m0[10u].z;
    float _3463 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    float _515 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
    vec4 _527 = texture(sampler2D(M_Terrain_Cave_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _538 = (((((cbMtdParam._m0[9u].x - _330) * _339) + _330) - _529) * _515) + _529;
    float _539 = (((((cbMtdParam._m0[9u].y - _331) * _339) + _331) - _530) * _515) + _530;
    float _540 = (((((cbMtdParam._m0[9u].z - _332) * _339) + _332) - _531) * _515) + _531;
    float _3474 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _541 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _3496 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _3507 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _600 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _610 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _600);
    float _611 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _600);
    float _612 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _600);
    float _616 = inversesqrt(dot(vec3(_610, _611, _612), vec3(_610, _611, _612)));
    float _617 = _610 * _616;
    float _618 = _611 * _616;
    float _619 = _612 * _616;
    float _625 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _626 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = fma(_510, cbSceneParam._m0[5u].z, fma(_509, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _508));
    float _647 = fma(_510, cbSceneParam._m0[6u].z, fma(_509, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _508));
    float _650 = fma(_510, cbSceneParam._m0[7u].z, fma(_509, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _508));
    uint _663 = uint(roundEven(NORMAL.w)) * 13u;
    uint _666 = (_663 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _672 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * cbInstanceData._m0[_666].x;
    float _673 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0)))) * cbInstanceData._m0[_666].y;
    float _674 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0)))) * cbInstanceData._m0[_666].z;
    float _3518 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _3540 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _625, cbSceneParam._m0[86u].y * _626));
    float _689 = _686.x * TEXCOORD_3.w;
    float _690 = dot(vec3(_508, _509, _510), vec3(_617, _618, _619));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _508) - _617;
    float _698 = (_693 * _509) - _618;
    float _699 = (_693 * _510) - _619;
    float _703 = abs(dot(vec3(_617, _618, _619), vec3(_508, _509, _510)));
    float _3551 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _705 = sqrt(_541);
    float _718 = exp2((_705 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_705 * 3.0));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1060;
    float _1062;
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _785 = fma(_758, cbModelParam._m0[26u].z, fma(_754, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _750));
        float _789 = fma(_758, cbModelParam._m0[27u].z, fma(_754, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _750));
        float _793 = fma(_758, cbModelParam._m0[28u].z, fma(_754, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _750));
        float _818 = _750 + _508;
        float _819 = _754 + _509;
        float _820 = _758 + _510;
        float _830 = fma(_820, cbModelParam._m0[26u].z, fma(_819, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818)) - _785;
        float _831 = fma(_820, cbModelParam._m0[27u].z, fma(_819, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818)) - _789;
        float _832 = fma(_820, cbModelParam._m0[28u].z, fma(_819, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818)) - _793;
        float _836 = inversesqrt(dot(vec3(_830, _831, _832), vec3(_830, _831, _832)));
        float _849 = ((_836 * _830) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_785 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _850 = ((_836 * _831) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_789 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _851 = ((_836 * _832) / cbModelParam._m0[34u].z) + ((((((_793 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_849, _850, _851), 0.0);
        float _888 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_854.x + (-0.5));
        float _890 = _888 * (_854.y + (-0.5));
        float _891 = _888 * (_854.z + (-0.5));
        float _898 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _899 = _898 * (_861.x + (-0.5));
        float _900 = _898 * (_861.y + (-0.5));
        float _901 = _898 * (_861.z + (-0.5));
        float _908 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _909 = _908 * (_868.x + (-0.5));
        float _910 = _908 * (_868.y + (-0.5));
        float _911 = _908 * (_868.z + (-0.5));
        float _918 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _919 = _918 * (_875.x + (-0.5));
        float _920 = _918 * (_875.y + (-0.5));
        float _921 = _918 * (_875.z + (-0.5));
        float _922 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _923 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        float _924 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _925 = _889 * 0.5;
        float _926 = _899 * 0.5;
        float _927 = _909 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _942 = (dot(vec3(_508, _509, _510), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _952 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_922 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3599 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_954 + 1.0))) + _959) * _922;
        float _969 = _890 * 0.5;
        float _970 = _900 * 0.5;
        float _971 = _910 * 0.5;
        float _972 = dot(vec3(_969, _970, _971), vec3(_969, _970, _971));
        float _977 = (_972 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_972);
        float _985 = (dot(vec3(_508, _509, _510), vec3(_977 * _969, _977 * _970, _977 * _971)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _994 = sqrt(((_970 * _970) + (_969 * _969)) + (_971 * _971)) / (_923 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _995 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _996 = _995 * 2.0;
        float _1000 = (1.0 - _995) / (_995 + 1.0);
        float _3632 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1010 = ((((1.0 - _1001) * (_996 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_996 + 1.0))) + _1001) * _923;
        float _1011 = _891 * 0.5;
        float _1012 = _901 * 0.5;
        float _1013 = _911 * 0.5;
        float _1014 = dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013));
        float _1019 = (_1014 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1014);
        float _1027 = (dot(vec3(_508, _509, _510), vec3(_1019 * _1011, _1019 * _1012, _1019 * _1013)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1036 = sqrt(((_1012 * _1012) + (_1011 * _1011)) + (_1013 * _1013)) / (_924 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3665 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1038 + 1.0))) + _1043) * _924;
        _1060 = _891;
        _1062 = _890;
        _1063 = _889;
        _1064 = _901;
        _1065 = _900;
        _1066 = _899;
        _1067 = _911;
        _1068 = _910;
        _1069 = _909;
        _1070 = _924;
        _1071 = _923;
        _1072 = _922;
        _1073 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
        _1074 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0)));
        _1075 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
    }
    else
    {
        _1060 = _1061;
        _1062 = _1061;
        _1063 = _1061;
        _1064 = _1061;
        _1065 = _1061;
        _1066 = _1061;
        _1067 = _1061;
        _1068 = _1061;
        _1069 = _1061;
        _1070 = _1061;
        _1071 = _1061;
        _1072 = _1061;
        _1073 = 0.0;
        _1074 = 0.0;
        _1075 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1101 = fma(_758, cbModelParam._m0[30u].z, fma(_754, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _750));
        float _1105 = fma(_758, cbModelParam._m0[31u].z, fma(_754, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _750));
        float _1109 = fma(_758, cbModelParam._m0[32u].z, fma(_754, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _750));
        float _1132 = _750 + _508;
        float _1133 = _754 + _509;
        float _1134 = _758 + _510;
        float _1144 = fma(_1134, cbModelParam._m0[30u].z, fma(_1133, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1132)) - _1101;
        float _1145 = fma(_1134, cbModelParam._m0[31u].z, fma(_1133, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1132)) - _1105;
        float _1146 = fma(_1134, cbModelParam._m0[32u].z, fma(_1133, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1132)) - _1109;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1101 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1105 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[35u].z) + ((((((_1109 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_508, _509, _510), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3728 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_508, _509, _510), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3761 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_508, _509, _510), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3772 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3783 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3794 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1061;
        _1371 = _1061;
        _1372 = _1061;
        _1373 = _1061;
        _1374 = _1061;
        _1375 = _1061;
        _1376 = _1061;
        _1377 = _1061;
        _1378 = _1061;
        _1379 = _1061;
        _1380 = _1061;
        _1381 = _1061;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1073)) + _1073;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1074)) + _1074;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1075)) + _1075;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _697 * 0.5;
    float _1439 = _698 * 0.5;
    float _1440 = _699 * 0.5;
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1060, _1064, _1067, _1070));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1062, _1065, _1068, _1071));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1063, _1066, _1069, _1072));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1506 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _541);
    float _1507 = isnan(_1506) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1506 : min(cbModelParam._m0[25u].z, _1506));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_758, cbModelParam._m0[13u].z, fma(_754, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _750)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_758, cbModelParam._m0[14u].z, fma(_754, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _750)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_758, cbModelParam._m0[15u].z, fma(_754, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _750)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1570 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1573 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1601;
        if (_1567 > 0.0)
        {
            _1601 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1601 = frontier_phi_14_12_ladder;
        }
        float _1805;
        if (_1570 > 0.0)
        {
            _1805 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1805 = frontier_phi_23_19_ladder;
        }
        float _2048;
        if (_1573 > 0.0)
        {
            _2048 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_35_30_ladder;
        }
        float _2050 = isnan(_1805) ? _1601 : (isnan(_1601) ? _1805 : min(_1601, _1805));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1567) + _1556;
        float _2056 = (_2051 * _1570) + _1560;
        float _2057 = (_2051 * _1573) + _1564;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_13_35_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_13_35_ladder_2;
        _1591 = frontier_phi_13_35_ladder_1;
        _1593 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1597 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _541);
    float _1598 = isnan(_1597) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1597 : min(cbModelParam._m0[25u].w, _1597));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_758, cbModelParam._m0[21u].z, fma(_754, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _750)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_758, cbModelParam._m0[22u].z, fma(_754, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _750)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_758, cbModelParam._m0[23u].z, fma(_754, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _750)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1669 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1672 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1810;
        if (_1666 > 0.0)
        {
            _1810 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1810 = frontier_phi_25_21_ladder;
        }
        float _2075;
        if (_1669 > 0.0)
        {
            _2075 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2075 = frontier_phi_37_32_ladder;
        }
        float _2280;
        if (_1672 > 0.0)
        {
            _2280 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2280 = frontier_phi_46_43_ladder;
        }
        float _2282 = isnan(_2075) ? _1810 : (isnan(_1810) ? _2075 : min(_1810, _2075));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1666) + _1655;
        float _2288 = (_2283 * _1669) + _1659;
        float _2289 = (_2283 * _1672) + _1663;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1598);
            frontier_phi_22_46_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_22_46_ladder_2;
        _1693 = frontier_phi_22_46_ladder_1;
        _1695 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1598);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1707 = ((((1.0 - _718) * ((_705 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_718 * _705)) * _689;
    float _1708 = _1707 * ((cbModelParam._m0[1u].w * (_1691 - _1589)) + _1589);
    float _1709 = _1707 * ((cbModelParam._m0[1u].w * (_1693 - _1591)) + _1591);
    float _1710 = _1707 * ((cbModelParam._m0[1u].w * (_1695 - _1593)) + _1593);
    float _1713 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    uvec4 _1729 = floatBitsToUint(cbInstanceData._m0[_663 + 5u]);
    uint _1731 = _1729.x * 14u;
    uint _1732 = _1731 + 13u;
    float _1739 = _689 + (-1.0);
    float _1744 = (cbLight._m0[_1732].x * _1739) + 1.0;
    float _1745 = (cbLight._m0[_1732].y * _1739) + 1.0;
    float _1746 = (cbLight._m0[_1732].z * _1739) + 1.0;
    float _1747 = (cbLight._m0[_1732].w * _1739) + 1.0;
    uint _1748 = _1731 + 5u;
    float _1754 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1758 = _1731 + 4u;
    float _1764 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1768 = _1731 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_508, _509, _510));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_508, _509, _510));
    float _3930 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3941 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1748].x * _1754) * _1789) + ((cbLight._m0[_1758].x * _1764) * _1787);
    float _1797 = ((_1754 * cbLight._m0[_1748].y) * _1789) + ((_1764 * cbLight._m0[_1758].y) * _1787);
    float _1798 = ((_1754 * cbLight._m0[_1748].z) * _1789) + ((_1764 * cbLight._m0[_1758].z) * _1787);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1731 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1796;
        _1817 = _1797;
        _1819 = _1798;
    }
    else
    {
        uint _1823 = _1731 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1731 + 2u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3952 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1842 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1798;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2019 = _1731 + 7u;
        float _2035 = (dot(vec3(cbLight._m0[_1731 + 3u].xyz), vec3(_508, _509, _510)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _3968 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _2038 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1860 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1815;
        _1862 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1817;
        _1864 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1819;
    }
    uint _1867 = _1731 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1731].w)) * _541) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1731].x + _617;
    float _1883 = cbLight._m0[_1731].y + _618;
    float _1884 = cbLight._m0[_1731].z + _619;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1731].xyz));
    float _3984 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1896 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _1897 = dot(vec3(_508, _509, _510), vec3(_1889, _1890, _1891));
    float _4006 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1889, _1890, _1891));
    float _4017 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1921 = 1.0 - _1881;
    float _1932 = (0.5 / (((_1896 * ((_1895 * _1921) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1921) + _1881) * _1895))) * _1895;
    float _4028 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1934 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1945 = _1731 + 9u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _541) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1768].x + _617;
    float _1959 = cbLight._m0[_1768].y + _618;
    float _1960 = cbLight._m0[_1768].z + _619;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_1768].xyz));
    float _4039 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _1972 = dot(vec3(_508, _509, _510), vec3(_1965, _1966, _1967));
    float _4050 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1965, _1966, _1967));
    float _4061 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1957 * _1957;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1993 = (exp2(log2(1.0 - (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1994 = 1.0 - _1957;
    float _2004 = (0.5 / (((_1896 * ((_1971 * _1994) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1994) + _1957) * _1971))) * _1971;
    float _4072 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    float _2016 = (((_1993 * cbLight._m0[_1945].x) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].x) * _1934) * _1764);
    float _2017 = (((_1993 * cbLight._m0[_1945].y) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].y) * _1934) * _1764);
    float _2018 = (((_1993 * cbLight._m0[_1945].z) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].z) * _1934) * _1764);
    float _2080;
    float _2082;
    float _2084;
    if (_1804)
    {
        _2080 = _2016;
        _2082 = _2017;
        _2084 = _2018;
    }
    else
    {
        uint _2086 = _1731 + 2u;
        uint _2090 = _1731 + 10u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _541) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _617;
        float _2107 = cbLight._m0[_2086].y + _618;
        float _2108 = cbLight._m0[_2086].z + _619;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2086].xyz));
        float _4083 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2120 = dot(vec3(_508, _509, _510), vec3(_2113, _2114, _2115));
        float _4094 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _4105 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2142 = 1.0 - _2105;
        float _2152 = (0.5 / (((_1896 * ((_2119 * _2142) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2142) + _2105) * _2119))) * _2119;
        float _4116 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2080 = (((_2141 * cbLight._m0[_2090].x) * _2154) * _2155) + _2016;
        _2082 = (((_2141 * cbLight._m0[_2090].y) * _2154) * _2155) + _2017;
        _2084 = (((_2141 * cbLight._m0[_2090].z) * _2154) * _2155) + _2018;
    }
    float _2190;
    float _2192;
    float _2194;
    if (_1822)
    {
        _2190 = _2080;
        _2192 = _2082;
        _2194 = _2084;
    }
    else
    {
        uint _2201 = _1731 + 3u;
        uint _2205 = _1731 + 11u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _541) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _617;
        float _2222 = cbLight._m0[_2201].y + _618;
        float _2223 = cbLight._m0[_2201].z + _619;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_508, _509, _510), vec3(cbLight._m0[_2201].xyz));
        float _4132 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2235 = dot(vec3(_508, _509, _510), vec3(_2228, _2229, _2230));
        float _4143 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4154 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2257 = 1.0 - _2220;
        float _2267 = (0.5 / (((_1896 * ((_2234 * _2257) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2257) + _2220) * _2234))) * _2234;
        float _4165 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2190 = (((_2256 * cbLight._m0[_2205].x) * _2269) * _2270) + _2080;
        _2192 = (((_2256 * cbLight._m0[_2205].y) * _2269) * _2270) + _2082;
        _2194 = (((_2256 * cbLight._m0[_2205].z) * _2269) * _2270) + _2084;
    }
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_1729.y == 0u)
    {
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2345;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2345;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2345;
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.x;
        uint _2372 = uint((float(_2360.y) * floor(float(uint(cbSceneParam._m0[85u].y * _626) / _2361))) + floor(float(uint(cbSceneParam._m0[85u].x * _625) / _2361)));
        float _2382 = (log2(_2348 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2383 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        uint _2386 = uint(isnan(14.0) ? _2383 : (isnan(_2383) ? 14.0 : min(_2383, 14.0)));
        uvec4 _2391 = texelFetch(g_lightClusterGridBuffer, int(((_2386 << 2u) + (_2372 << 6u)) >> 2u));
        uint _2392 = _2391.x;
        uint _2393 = _2360.z;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((((1u << ((_2393 >> 4u) & 15u)) + 4294967295u) & _2392) == 0u) || ((_2393 & 240u) == 0u))
        {
            _2493 = 0.0;
            _2495 = 0.0;
            _2497 = 0.0;
            _2499 = 0.0;
            _2501 = 0.0;
            _2503 = 0.0;
        }
        else
        {
            float _2494;
            float _2496;
            float _2498;
            float _2500;
            float _2502;
            float _2504;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            uint _2644 = 0u;
            uint _2653;
            bool _2654;
            for (;;)
            {
                _2653 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                _2654 = _2653 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2654)
                {
                    frontier_phi_61_pred = _2638;
                    frontier_phi_61_pred_1 = _2643;
                    frontier_phi_61_pred_2 = _2642;
                    frontier_phi_61_pred_3 = _2641;
                    frontier_phi_61_pred_4 = _2640;
                    frontier_phi_61_pred_5 = _2639;
                }
                else
                {
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    float _2767;
                    uint _2768;
                    _2762 = _2638;
                    _2763 = _2639;
                    _2764 = _2640;
                    _2765 = _2641;
                    _2766 = _2642;
                    _2767 = _2643;
                    _2768 = _2653;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    for (;;)
                    {
                        uint _2772 = uint(findLSB(_2768)) + (_2644 << 5u);
                        uint _2769 = (_2768 + 4294967295u) & _2768;
                        uint _2774 = _2772 * 48u;
                        vec4 _2788 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2774)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2774 + 3u)).x));
                        uint _2794 = (_2772 * 48u) + 4u;
                        vec4 _2807 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2794)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2794 + 3u)).x));
                        uint _2813 = (_2772 * 48u) + 8u;
                        vec3 _2824 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2813)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2813 + 2u)).x));
                        float _2828 = _2788.x - _2346;
                        float _2829 = _2788.y - _2347;
                        float _2830 = _2788.z - _2348;
                        float _2831 = dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830));
                        float _2834 = inversesqrt(_2831);
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2838 = dot(vec3(_644, _647, _650), vec3(_2835, _2836, _2837));
                        float _2843 = 1.0 - (_2831 * _2788.w);
                        float _4191 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
                        float _2845 = sqrt(_2831) * _2807.w;
                        float _2848 = 1.39999997615814208984375 / (_2845 + 1.39999997615814208984375);
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2838) + _2849;
                        float _2855 = _2845 * _2845;
                        float _2859 = ((isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) * _2844) / ((_2855 * 0.699999988079071044921875) + 1.0);
                        float _2863 = (-0.0) - _2346;
                        float _2864 = (-0.0) - _2347;
                        float _2865 = (-0.0) - _2348;
                        float _2869 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
                        float _2870 = _2869 * _2863;
                        float _2871 = _2869 * _2864;
                        float _2872 = _2869 * _2865;
                        float _2880 = exp2(log2(1.0 / ((_2855 * 3.5) + 5.0)) * 0.25);
                        float _2881 = 1.0 - _705;
                        float _2888 = sqrt(1.0 - ((1.0 - (_2881 * _2881)) * (1.0 - (_2880 * _2880))));
                        float _2889 = _2888 * _2888;
                        float _2890 = _2889 * _2889;
                        float _2891 = _2870 + _2835;
                        float _2892 = _2871 + _2836;
                        float _2893 = _2872 + _2837;
                        float _2897 = inversesqrt(dot(vec3(_2891, _2892, _2893), vec3(_2891, _2892, _2893)));
                        float _2901 = dot(vec3(_644, _647, _650), vec3(_2870, _2871, _2872));
                        float _4207 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2904 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                        float _2905 = dot(vec3(_644, _647, _650), vec3(_2897 * _2891, _2897 * _2892, _2897 * _2893));
                        float _4218 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                        float _2908 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                        float _2912 = ((_2908 * _2908) * (_2890 + (-1.0))) + 1.0;
                        float _2913 = _2848 * _2889;
                        float _2914 = _2913 * _2913;
                        float _2917 = ((1.0 - _2914) * _2838) + _2914;
                        float _4229 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
                        float _2918 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
                        float _2919 = 1.0 - _2889;
                        float _2929 = (0.5 / (((_2918 * ((_2904 * _2919) + _2889)) + 9.9999999392252902907785028219223e-09) + (((_2918 * _2919) + _2889) * _2904))) * _2918;
                        float _4240 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2940 = (((_2890 * 3.1415927410125732421875) * (isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0)))) / ((_2912 * _2912) * ((_2855 * 2.1991131305694580078125) + 3.141590118408203125))) * _2844;
                        _2697 = (_2859 * _2807.x) + _2765;
                        _2698 = (_2859 * _2807.y) + _2766;
                        _2699 = (_2859 * _2807.z) + _2767;
                        _2694 = (_2940 * _2824.x) + _2762;
                        _2695 = (_2940 * _2824.y) + _2763;
                        _2696 = (_2940 * _2824.z) + _2764;
                        if (_2769 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2762 = _2694;
                            _2763 = _2695;
                            _2764 = _2696;
                            _2765 = _2697;
                            _2766 = _2698;
                            _2767 = _2699;
                            _2768 = _2769;
                        }
                    }
                    frontier_phi_61_pred = _2694;
                    frontier_phi_61_pred_1 = _2699;
                    frontier_phi_61_pred_2 = _2698;
                    frontier_phi_61_pred_3 = _2697;
                    frontier_phi_61_pred_4 = _2696;
                    frontier_phi_61_pred_5 = _2695;
                }
                _2494 = frontier_phi_61_pred;
                _2504 = frontier_phi_61_pred_1;
                _2502 = frontier_phi_61_pred_2;
                _2500 = frontier_phi_61_pred_3;
                _2498 = frontier_phi_61_pred_4;
                _2496 = frontier_phi_61_pred_5;
                uint _2645 = _2644 + 1u;
                if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2638 = _2494;
                    _2639 = _2496;
                    _2640 = _2498;
                    _2641 = _2500;
                    _2642 = _2502;
                    _2643 = _2504;
                    _2644 = _2645;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2493 = _2494;
            _2495 = _2496;
            _2497 = _2498;
            _2499 = _2500;
            _2501 = _2502;
            _2503 = _2504;
        }
        uvec4 _2507 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2508 = _2507.z;
        uint _2510 = (_2508 >> 8u) & 15u;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((4294967295u << _2510) & _2392) == 0u)
        {
            _2606 = _2493;
            _2608 = _2495;
            _2610 = _2497;
            _2612 = _2499;
            _2614 = _2501;
            _2616 = _2503;
        }
        else
        {
            float _2631 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
            float _2632 = _2631 * _2346;
            float _2633 = _2631 * _2347;
            float _2634 = _2631 * _2348;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2510 < ((_2508 >> 12u) & 15u))
            {
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2745 = _2493;
                float _2746 = _2495;
                float _2747 = _2497;
                float _2748 = _2499;
                float _2749 = _2501;
                float _2750 = _2503;
                uint _2751 = _2510;
                uint _2760;
                bool _2761;
                for (;;)
                {
                    _2760 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                    _2761 = _2760 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2761)
                    {
                        frontier_phi_67_pred = _2748;
                        frontier_phi_67_pred_1 = _2749;
                        frontier_phi_67_pred_2 = _2750;
                        frontier_phi_67_pred_3 = _2747;
                        frontier_phi_67_pred_4 = _2746;
                        frontier_phi_67_pred_5 = _2745;
                    }
                    else
                    {
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _2958 = _2745;
                        float _2959 = _2746;
                        float _2960 = _2747;
                        float _2961 = _2748;
                        float _2962 = _2749;
                        float _2963 = _2750;
                        uint _2964 = _2760;
                        uint _2965;
                        vec4 _2990;
                        float _2991;
                        vec4 _3006;
                        vec3 _3018;
                        vec4 _3034;
                        vec4 _3050;
                        float _3097;
                        bool _3098;
                        for (;;)
                        {
                            uint _2975 = ((_2751 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2964));
                            _2965 = (_2964 + 4294967295u) & _2964;
                            uint _2977 = _2975 * 40u;
                            _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _2991 = _2990.w;
                            uint _2993 = (_2975 * 40u) + 4u;
                            _3006 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2993)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2993 + 3u)).x));
                            uint _3008 = (_2975 * 40u) + 8u;
                            _3018 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x));
                            uint _3021 = (_2975 * 40u) + 16u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3037 = (_2975 * 40u) + 20u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2975 * 40u) + 24u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3072 = (_2975 * 40u) + 28u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3097 = fma(_2348, _3085.z, fma(_2347, _3085.y, _3085.x * _2346)) + _3085.w;
                            _3098 = !((fma(_2348, _3066.z, fma(_2347, _3066.y, _3066.x * _2346)) + _3066.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3098)
                            {
                                float _3125 = _2990.x - _2346;
                                float _3126 = _2990.y - _2347;
                                float _3127 = _2990.z - _2348;
                                float _3128 = dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127));
                                float _3131 = inversesqrt(_3128);
                                float _3132 = _3131 * _3125;
                                float _3133 = _3131 * _3126;
                                float _3134 = _3131 * _3127;
                                float _3138 = 1.0 - (_3128 / (_2991 * _2991));
                                float _4251 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0));
                                float _3139 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
                                float _3143 = sqrt(_3128) * _3006.w;
                                float _3145 = 1.39999997615814208984375 / (_3143 + 1.39999997615814208984375);
                                float _3146 = _3145 * _3145;
                                float _3149 = ((1.0 - _3146) * dot(vec3(_3132, _3133, _3134), vec3(_644, _647, _650))) + _3146;
                                float _3152 = _3143 * _3143;
                                float _3156 = (fma(_2348, _3034.z, fma(_2347, _3034.y, _3034.x * _2346)) + _3034.w) / _3097;
                                float _3157 = (fma(_2348, _3050.z, fma(_2347, _3050.y, _3050.x * _2346)) + _3050.w) / _3097;
                                float _3161 = 1.0 - dot(vec2(_3156, _3157), vec2(_3156, _3157));
                                float _4267 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3162 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3163 = _3162 * (((isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))) * _3139) / ((_3152 * 0.699999988079071044921875) + 1.0));
                                float _3175 = exp2(log2(1.0 / ((_3152 * 3.5) + 5.0)) * 0.25);
                                float _3176 = 1.0 - _705;
                                float _3183 = sqrt(1.0 - ((1.0 - (_3176 * _3176)) * (1.0 - (_3175 * _3175))));
                                float _3184 = _3183 * _3183;
                                float _3185 = _3184 * _3184;
                                float _3186 = _3132 - _2632;
                                float _3187 = _3133 - _2633;
                                float _3188 = _3134 - _2634;
                                float _3192 = inversesqrt(dot(vec3(_3186, _3187, _3188), vec3(_3186, _3187, _3188)));
                                float _3196 = dot(vec3(_644, _647, _650), vec3((-0.0) - _2632, (-0.0) - _2633, (-0.0) - _2634));
                                float _4278 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
                                float _3199 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
                                float _3200 = dot(vec3(_644, _647, _650), vec3(_3192 * _3186, _3192 * _3187, _3192 * _3188));
                                float _4289 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3203 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
                                float _3207 = ((_3203 * _3203) * (_3185 + (-1.0))) + 1.0;
                                float _3208 = _3145 * _3184;
                                float _3209 = _3208 * _3208;
                                float _3215 = ((1.0 - _3209) * dot(vec3(_644, _647, _650), vec3(_3132, _3133, _3134))) + _3209;
                                float _4300 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                                float _3216 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
                                float _3217 = 1.0 - _3184;
                                float _3227 = (0.5 / (((_3216 * ((_3199 * _3217) + _3184)) + 9.9999999392252902907785028219223e-09) + (((_3216 * _3217) + _3184) * _3199))) * _3216;
                                float _4311 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                                float _3237 = (_3162 * _3139) * (((_3185 * 3.1415927410125732421875) * (isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0)))) / ((_3207 * _3207) * ((_3152 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3237 * _3018.x;
                                frontier_phi_73_pred_1 = _3237 * _3018.y;
                                frontier_phi_73_pred_2 = _3163 * _3006.z;
                                frontier_phi_73_pred_3 = _3163 * _3006.y;
                                frontier_phi_73_pred_4 = _3163 * _3006.x;
                                frontier_phi_73_pred_5 = _3237 * _3018.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3241 = frontier_phi_73_pred;
                            _3242 = frontier_phi_73_pred_1;
                            _3246 = frontier_phi_73_pred_2;
                            _3245 = frontier_phi_73_pred_3;
                            _3244 = frontier_phi_73_pred_4;
                            _3243 = frontier_phi_73_pred_5;
                            _2948 = _3244 + _2961;
                            _2949 = _3245 + _2962;
                            _2950 = _3246 + _2963;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            _2947 = _3243 + _2960;
                            if (_2965 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2950;
                                _2964 = _2965;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2948;
                        frontier_phi_67_pred_1 = _2949;
                        frontier_phi_67_pred_2 = _2950;
                        frontier_phi_67_pred_3 = _2947;
                        frontier_phi_67_pred_4 = _2946;
                        frontier_phi_67_pred_5 = _2945;
                    }
                    _2613 = frontier_phi_67_pred;
                    _2615 = frontier_phi_67_pred_1;
                    _2617 = frontier_phi_67_pred_2;
                    _2611 = frontier_phi_67_pred_3;
                    _2609 = frontier_phi_67_pred_4;
                    _2607 = frontier_phi_67_pred_5;
                    uint _2752 = _2751 + 1u;
                    if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2745 = _2607;
                        _2746 = _2609;
                        _2747 = _2611;
                        _2748 = _2613;
                        _2749 = _2615;
                        _2750 = _2617;
                        _2751 = _2752;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2615;
                frontier_phi_55_56_ladder_1 = _2617;
                frontier_phi_55_56_ladder_2 = _2613;
                frontier_phi_55_56_ladder_3 = _2611;
                frontier_phi_55_56_ladder_4 = _2609;
                frontier_phi_55_56_ladder_5 = _2607;
            }
            else
            {
                frontier_phi_55_56_ladder = _2501;
                frontier_phi_55_56_ladder_1 = _2503;
                frontier_phi_55_56_ladder_2 = _2499;
                frontier_phi_55_56_ladder_3 = _2497;
                frontier_phi_55_56_ladder_4 = _2495;
                frontier_phi_55_56_ladder_5 = _2493;
            }
            _2606 = frontier_phi_55_56_ladder_5;
            _2608 = frontier_phi_55_56_ladder_4;
            _2610 = frontier_phi_55_56_ladder_3;
            _2612 = frontier_phi_55_56_ladder_2;
            _2614 = frontier_phi_55_56_ladder;
            _2616 = frontier_phi_55_56_ladder_1;
        }
        float _2621 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2405 = (_2621 * _2612) + _1860;
        _2407 = (_2621 * _2614) + _1862;
        _2409 = (_2621 * _2616) + _1864;
        _2411 = ((_2606 * 0.039999999105930328369140625) * _2621) + _2190;
        _2413 = ((_2608 * 0.039999999105930328369140625) * _2621) + _2192;
        _2415 = ((_2610 * 0.039999999105930328369140625) * _2621) + _2194;
    }
    else
    {
        _2405 = _1860;
        _2407 = _1862;
        _2409 = _1864;
        _2411 = _2190;
        _2413 = _2192;
        _2415 = _2194;
    }
    float _4327 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4338 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4349 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    uint _2435 = _663 + 6u;
    float _2443 = _625 / cbSceneParam._m0[86u].x;
    float _2444 = _626 / cbSceneParam._m0[86u].y;
    vec4 _2458 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2443, _2444, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2460 = _2458.x;
    float _2461 = _2458.y;
    float _2462 = _2458.z;
    float _2463 = _2458.w;
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _2518 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _2519 = _2518 / _560;
        float _2530 = _2519 * _610;
        float _2531 = _611 * _2519;
        float _2532 = (-0.0) - _2531;
        float _2534 = _2519 * _612;
        float _2536 = (cbSceneParam._m0[77u].w * _2532) / _2518;
        float _2537 = _2536 + cbSceneParam._m0[79u].w;
        float _2538 = cbSceneParam._m0[79u].w - _2531;
        float _2544 = sqrt(((_2530 * _2530) + (_2531 * _2531)) + (_2534 * _2534));
        float _2547 = (1.0 - (cbSceneParam._m0[77u].w / _2518)) * _2544;
        float _2552 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2554 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2707;
        if (abs((_2532 - _2536) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2707 = ((((_2537 > 0.0) ? exp2(_2552 * _2537) : (2.0 - exp2(_2554 * _2537))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2547;
        }
        else
        {
            float _2667 = 1.0 / cbSceneParam._m0[80u].x;
            float _2668 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : max(_2537, _2538));
            float _2669 = isnan(_2538) ? _2537 : (isnan(_2537) ? _2538 : min(_2537, _2538));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            _2707 = ((abs(_2544 / _2532) * cbSceneParam._m0[80u].y) * ((((_2678 - _2679) * 2.0) - ((exp2(_2552 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)))) - exp2(_2552 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))))) * _2667)) - ((exp2(_2554 * _2678) - exp2(_2554 * _2679)) * _2667))) + (_2547 * cbSceneParam._m0[80u].z);
        }
        vec4 _2709 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2443, _2444, 1.0), 0.0);
        float _2718 = exp2((_2707 * (-1.44269502162933349609375)) * (1.0 - _2709.w));
        float _2719 = log2(_2718);
        float _2735 = log2(_2463);
        _2556 = (exp2(_2735 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].x)) * _2709.x) / cbSceneParam._m0[78u].x)) + _2460;
        _2558 = (exp2(_2735 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].y)) * _2709.y) / cbSceneParam._m0[78u].y)) + _2461;
        _2560 = (exp2(_2735 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2719 * cbSceneParam._m0[78u].z)) * _2709.z) / cbSceneParam._m0[78u].z)) + _2462;
        _2562 = _2718 * _2463;
    }
    else
    {
        _2556 = _2460;
        _2558 = _2461;
        _2560 = _2462;
        _2562 = _2463;
    }
    float _2574 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2575 = _2574 == 3.0;
    float _2576 = log2(_2562);
    float _2583 = exp2(_2576 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_2405 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _689))) + ((_2411 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2584 = exp2(_2576 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_2407 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _689))) + ((_2413 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2585 = exp2(_2576 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_2409 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _689))) + ((_2415 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1496)) * cbPerFrame._m0[3u].x));
    float _2594 = (_2574 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2594 * (_2575 ? _2583 : (_2583 + (cbSceneParam._m0[72u].w * _2556)));
    SV_Target.y = _2594 * (_2575 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.z = _2594 * (_2575 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.w = cbInstanceData._m0[_2435].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2435].w;
}


