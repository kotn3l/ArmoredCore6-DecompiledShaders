#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1374;
float _4070;
float _4071;
float _4072;
float _4073;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _295 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _314 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _341 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _351 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _314.x) * 2.0) - _341)) + 1.0;
    float _4082 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _359 = (_352 * ((_295.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _360 = (_352 * ((_295.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _361 = (_352 * ((_295.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _380 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _393 = (((((1.0 - _314.y) * 2.0) - _341) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4093 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    float _394 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _401 = (((_380.x * cbMtdParam._m0[12u].x) - _359) * _394) + _359;
    float _402 = (_394 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _403 = (_394 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _421 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _434 = (((((1.0 - _314.z) * 2.0) - _341) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4104 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _442 = (((_421.x * cbMtdParam._m0[13u].x) - _401) * _435) + _401;
    float _443 = (_435 * ((_421.y * cbMtdParam._m0[13u].y) - _402)) + _402;
    float _444 = (_435 * ((_421.z * cbMtdParam._m0[13u].z) - _403)) + _403;
    vec4 _471 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _490 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _493 = _490.x + 0.00999999977648258209228515625;
    float _500 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _493)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4115 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _508 = (_501 * ((_471.x * cbMtdParam._m0[16u].x) - _442)) + _442;
    float _509 = (_501 * ((_471.y * cbMtdParam._m0[16u].y) - _443)) + _443;
    float _510 = (_501 * ((_471.z * cbMtdParam._m0[16u].z) - _444)) + _444;
    vec4 _523 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    vec4 _560 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _571 = ((_560.x - _546) * _352) + _546;
    float _572 = ((_560.y - _547) * _352) + _547;
    float _573 = ((_560.z - _548) * _352) + _548;
    vec4 _586 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _597 = ((_586.x - _571) * _394) + _571;
    float _598 = ((_586.y - _572) * _394) + _572;
    float _599 = ((_586.z - _573) * _394) + _573;
    vec4 _612 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _625 = ((_612.z - _599) * _435) + _599;
    float _628 = ((((_612.x - _597) * _435) + _597) * 2.0) + (-1.0);
    float _629 = ((((_612.y - _598) * _435) + _598) * 2.0) + (-1.0);
    float _630 = dot(vec2(_628, _629), vec2(_628, _629));
    float _4126 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _635 = sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))));
    float _640 = (((_523.z - _625) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _625;
    vec4 _670 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _684 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4137 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _693 = (((_685 * _685) * (3.0 - (_685 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _701 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _709 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4148 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _710 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _714 = (_710 * _710) * (3.0 - (_710 * 2.0));
    float _715 = _714 * cbMtdParam._m0[22u].x;
    float _716 = _714 * cbMtdParam._m0[22u].y;
    float _717 = sin(_701);
    float _718 = cos(_701);
    float _719 = TEXCOORD.z - _715;
    float _720 = TEXCOORD.w - _716;
    vec4 _740 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_715 + fma(_720, (-0.0) - _717, _719 * _718))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_720, _718, _719 * _717) + _716)) + cbTextureTilingScale._m0[2u].w));
    float _746 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _740.x;
    float _748 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _740.y;
    float _750 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _740.z;
    float _766 = (TEXCOORD_5.x - ((_493 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4159 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    vec4 _780 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _796 = (((((_523.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _628) + (((_780.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _798 = (((((_523.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _629) + (((_780.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _801 = fma(_635, _239 * NORMAL.x, fma(_798, _246 * TANGENT.x, (_232 * _224) * _796));
    float _804 = fma(_635, _239 * NORMAL.y, fma(_798, _246 * TANGENT.y, (_232 * _225) * _796));
    float _807 = fma(_635, _239 * NORMAL.z, fma(_798, _246 * TANGENT.z, (_232 * _226) * _796));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _4170 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _815 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _4192 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _4203 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _834 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _874 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _884 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _874);
    float _885 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _874);
    float _886 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _874);
    float _890 = inversesqrt(dot(vec3(_884, _885, _886), vec3(_884, _885, _886)));
    float _891 = _884 * _890;
    float _892 = _885 * _890;
    float _893 = _886 * _890;
    vec4 _898 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _900 = _898.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1054 = sqrt(((_884 * _884) + (_885 * _885)) + (_886 * _886));
        float _1060 = (cbMatDynParam._m0[5u].x * _1054) + cbMatDynParam._m0[5u].y;
        float _4214 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1065 = (cbMatDynParam._m0[5u].z * _1054) + cbMatDynParam._m0[5u].w;
        float _4225 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) - _1061)) + _1061) < ((_900 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _911 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _912 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _931 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _934 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _937 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _950 = uint(roundEven(NORMAL.w)) * 13u;
    uint _951 = _950 + 9u;
    uint _952 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _958 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) * cbInstanceData._m0[_952].x;
    float _959 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_952].y;
    float _960 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_952].z;
    float _4236 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _961 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _911, cbSceneParam._m0[86u].y * _912));
    float _975 = _972.x * TEXCOORD_5.w;
    float _976 = dot(vec3(_812, _813, _814), vec3(_891, _892, _893));
    float _979 = _976 * 2.0;
    float _983 = (_979 * _812) - _891;
    float _984 = (_979 * _813) - _892;
    float _985 = (_979 * _814) - _893;
    float _989 = abs(dot(vec3(_891, _892, _893), vec3(_812, _813, _814)));
    float _4269 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _991 = sqrt(_815);
    float _1003 = exp2((_991 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_991 * 3.0));
    float _1035 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1039 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1373;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1098 = fma(_1043, cbModelParam._m0[26u].z, fma(_1039, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1035));
        float _1102 = fma(_1043, cbModelParam._m0[27u].z, fma(_1039, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1035));
        float _1106 = fma(_1043, cbModelParam._m0[28u].z, fma(_1039, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1035));
        float _1131 = _1035 + _812;
        float _1132 = _1039 + _813;
        float _1133 = _1043 + _814;
        float _1143 = fma(_1133, cbModelParam._m0[26u].z, fma(_1132, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131)) - _1098;
        float _1144 = fma(_1133, cbModelParam._m0[27u].z, fma(_1132, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131)) - _1102;
        float _1145 = fma(_1133, cbModelParam._m0[28u].z, fma(_1132, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131)) - _1106;
        float _1149 = inversesqrt(dot(vec3(_1143, _1144, _1145), vec3(_1143, _1144, _1145)));
        float _1162 = ((_1149 * _1143) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1098 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1163 = ((_1149 * _1144) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1102 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1149 * _1145) / cbModelParam._m0[34u].z) + ((((((_1106 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1162, _1163, _1164), 0.0);
        float _1201 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1202 = _1201 * (_1167.x + (-0.5));
        float _1203 = _1201 * (_1167.y + (-0.5));
        float _1204 = _1201 * (_1167.z + (-0.5));
        float _1211 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1212 = _1211 * (_1174.x + (-0.5));
        float _1213 = _1211 * (_1174.y + (-0.5));
        float _1214 = _1211 * (_1174.z + (-0.5));
        float _1221 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1222 = _1221 * (_1181.x + (-0.5));
        float _1223 = _1221 * (_1181.y + (-0.5));
        float _1224 = _1221 * (_1181.z + (-0.5));
        float _1231 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1232 = _1231 * (_1188.x + (-0.5));
        float _1233 = _1231 * (_1188.y + (-0.5));
        float _1234 = _1231 * (_1188.z + (-0.5));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = _1202 * 0.5;
        float _1239 = _1212 * 0.5;
        float _1240 = _1222 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1255 = (dot(vec3(_812, _813, _814), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1265 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4317 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1267 + 1.0))) + _1272) * _1235;
        float _1282 = _1203 * 0.5;
        float _1283 = _1213 * 0.5;
        float _1284 = _1223 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_812, _813, _814), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4350 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1309 + 1.0))) + _1314) * _1236;
        float _1324 = _1204 * 0.5;
        float _1325 = _1214 * 0.5;
        float _1326 = _1224 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_812, _813, _814), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4383 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1351 + 1.0))) + _1356) * _1237;
        _1373 = _1204;
        _1375 = _1203;
        _1376 = _1202;
        _1377 = _1214;
        _1378 = _1213;
        _1379 = _1212;
        _1380 = _1224;
        _1381 = _1223;
        _1382 = _1222;
        _1383 = _1237;
        _1384 = _1236;
        _1385 = _1235;
        _1386 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
    }
    else
    {
        _1373 = _1374;
        _1375 = _1374;
        _1376 = _1374;
        _1377 = _1374;
        _1378 = _1374;
        _1379 = _1374;
        _1380 = _1374;
        _1381 = _1374;
        _1382 = _1374;
        _1383 = _1374;
        _1384 = _1374;
        _1385 = _1374;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1043, cbModelParam._m0[30u].z, fma(_1039, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1035));
        float _1421 = fma(_1043, cbModelParam._m0[31u].z, fma(_1039, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1035));
        float _1425 = fma(_1043, cbModelParam._m0[32u].z, fma(_1039, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1035));
        float _1448 = _1035 + _812;
        float _1449 = _1039 + _813;
        float _1450 = _1043 + _814;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_812, _813, _814), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4446 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_812, _813, _814), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4479 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_812, _813, _814), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4512 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1374;
        _1687 = _1374;
        _1688 = _1374;
        _1689 = _1374;
        _1690 = _1374;
        _1691 = _1374;
        _1692 = _1374;
        _1693 = _1374;
        _1694 = _1374;
        _1695 = _1374;
        _1696 = _1374;
        _1697 = _1374;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1386)) + _1386;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1388)) + _1388;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _983 * 0.5;
    float _1755 = _984 * 0.5;
    float _1756 = _985 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1373, _1377, _1380, _1383));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1375, _1378, _1381, _1384));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1903;
    float _1905;
    float _1907;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1870 = fma(_1043, cbModelParam._m0[13u].z, fma(_1039, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1035)) + cbModelParam._m0[13u].w;
        float _1874 = fma(_1043, cbModelParam._m0[14u].z, fma(_1039, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1035)) + cbModelParam._m0[14u].w;
        float _1878 = fma(_1043, cbModelParam._m0[15u].z, fma(_1039, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1035)) + cbModelParam._m0[15u].w;
        float _1881 = fma(_985, cbModelParam._m0[13u].z, fma(_984, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _983));
        float _1884 = fma(_985, cbModelParam._m0[14u].z, fma(_984, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _983));
        float _1887 = fma(_985, cbModelParam._m0[15u].z, fma(_984, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _983));
        float _1915;
        if (_1881 > 0.0)
        {
            _1915 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1915 = frontier_phi_17_15_ladder;
        }
        float _2084;
        if (_1884 > 0.0)
        {
            _2084 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2084 = frontier_phi_26_22_ladder;
        }
        float _2379;
        if (_1887 > 0.0)
        {
            _2379 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2379 = frontier_phi_38_33_ladder;
        }
        float _2381 = isnan(_2084) ? _1915 : (isnan(_1915) ? _2084 : min(_1915, _2084));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1881) + _1870;
        float _2387 = (_2382 * _1884) + _1874;
        float _2388 = (_2382 * _1887) + _1878;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2391 = (-1.0) - _2389;
        float _2393 = _2389 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2388 > _2393) || ((_2388 < _2391) || ((_2387 > _2393) || ((_2387 < _2391) || ((_2386 < _2391) || (_2386 > _2393))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2388, cbModelParam._m0[9u].z, fma(_2387, cbModelParam._m0[9u].y, _2386 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2388, cbModelParam._m0[10u].z, fma(_2387, cbModelParam._m0[10u].y, _2386 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2388, cbModelParam._m0[11u].z, fma(_2387, cbModelParam._m0[11u].y, _2386 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1903 = frontier_phi_16_38_ladder_2;
        _1905 = frontier_phi_16_38_ladder_1;
        _1907 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1891 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_983, _984, _985), _1823);
        _1903 = _1891.x * cbModelParam._m0[1u].y;
        _1905 = _1891.y * cbModelParam._m0[1u].y;
        _1907 = _1891.z * cbModelParam._m0[1u].y;
    }
    float _1911 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1912 = isnan(_1911) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1911 : min(cbModelParam._m0[25u].w, _1911));
    float _2001;
    float _2003;
    float _2005;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1965 = fma(_1043, cbModelParam._m0[21u].z, fma(_1039, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1035)) + cbModelParam._m0[21u].w;
        float _1969 = fma(_1043, cbModelParam._m0[22u].z, fma(_1039, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1035)) + cbModelParam._m0[22u].w;
        float _1973 = fma(_1043, cbModelParam._m0[23u].z, fma(_1039, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1035)) + cbModelParam._m0[23u].w;
        float _1976 = fma(_985, cbModelParam._m0[21u].z, fma(_984, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _983));
        float _1979 = fma(_985, cbModelParam._m0[22u].z, fma(_984, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _983));
        float _1982 = fma(_985, cbModelParam._m0[23u].z, fma(_984, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _983));
        float _2089;
        if (_1976 > 0.0)
        {
            _2089 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2089 = frontier_phi_28_24_ladder;
        }
        float _2406;
        if (_1979 > 0.0)
        {
            _2406 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2406 = frontier_phi_40_35_ladder;
        }
        float _2733;
        if (_1982 > 0.0)
        {
            _2733 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2733 = frontier_phi_50_47_ladder;
        }
        float _2735 = isnan(_2406) ? _2089 : (isnan(_2089) ? _2406 : min(_2089, _2406));
        float _2736 = isnan(_2733) ? _2735 : (isnan(_2735) ? _2733 : min(_2735, _2733));
        float _2740 = (_2736 * _1976) + _1965;
        float _2741 = (_2736 * _1979) + _1969;
        float _2742 = (_2736 * _1982) + _1973;
        float _2743 = _2736 * 9.9999997473787516355514526367188e-05;
        float _2744 = (-1.0) - _2743;
        float _2746 = _2743 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2742 > _2746) || ((_2742 < _2744) || ((_2741 > _2746) || ((_2741 < _2744) || ((_2740 < _2744) || (_2740 > _2746))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2742, cbModelParam._m0[17u].z, fma(_2741, cbModelParam._m0[17u].y, _2740 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2742, cbModelParam._m0[18u].z, fma(_2741, cbModelParam._m0[18u].y, _2740 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2742, cbModelParam._m0[19u].z, fma(_2741, cbModelParam._m0[19u].y, _2740 * cbModelParam._m0[19u].x))), _1912);
            frontier_phi_25_50_ladder = _2860.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2860.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2860.x * cbModelParam._m0[1u].z;
        }
        _2001 = frontier_phi_25_50_ladder_2;
        _2003 = frontier_phi_25_50_ladder_1;
        _2005 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_983, _984, _985), _1912);
        _2001 = _1985.x * cbModelParam._m0[1u].z;
        _2003 = _1985.y * cbModelParam._m0[1u].z;
        _2005 = _1985.z * cbModelParam._m0[1u].z;
    }
    float _2017 = ((((1.0 - _1003) * ((_991 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1003 * _991)) * _975;
    float _2018 = _2017 * ((cbModelParam._m0[1u].w * (_2001 - _1903)) + _1903);
    float _2019 = _2017 * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2020 = _2017 * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2023 = fma(_2020, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2018 * cbSceneParam._m0[89u].x));
    float _2026 = fma(_2020, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2018 * cbSceneParam._m0[90u].x));
    float _2029 = fma(_2020, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2018 * cbSceneParam._m0[91u].x));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2076 = _2063 / _2075;
    float _2077 = _2067 / _2075;
    float _2078 = _2071 / _2075;
    float _2225;
    float _2226;
    float _2227;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2105 = ((uint(_2078 > cbSceneParam._m0[59u].y) + uint(_2078 > cbSceneParam._m0[59u].x)) + uint(_2078 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2106 = _2105 + 43u;
        uint _2114 = _2105 + 44u;
        uint _2122 = _2105 + 45u;
        uint _2130 = _2105 + 46u;
        float _2141 = fma(_2075, cbSceneParam._m0[_2106].w, fma(_2071, cbSceneParam._m0[_2106].z, fma(_2067, cbSceneParam._m0[_2106].y, _2063 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2075, cbSceneParam._m0[_2114].w, fma(_2071, cbSceneParam._m0[_2114].z, fma(_2067, cbSceneParam._m0[_2114].y, _2063 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2075, cbSceneParam._m0[_2130].w, fma(_2071, cbSceneParam._m0[_2130].z, fma(_2067, cbSceneParam._m0[_2130].y, _2063 * cbSceneParam._m0[_2130].x)));
        float _2158 = cbSceneParam._m0[33u].z * _2153;
        float _2160 = cbSceneParam._m0[33u].w * _2153;
        float _2163 = fma(_2075, cbSceneParam._m0[_2122].w, fma(_2071, cbSceneParam._m0[_2122].z, fma(_2067, cbSceneParam._m0[_2122].y, _2063 * cbSceneParam._m0[_2122].x))) / _2153;
        float _2211 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
        float _4638 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2218 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2158 + _2141) / _2153, (_2160 + _2145) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2160 + _2141) / _2153, (_2145 - _2158) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2158) / _2153, (_2145 - _2160) / _2153), _2163), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2141 - _2160) / _2153, (_2158 + _2145) / _2153), _2163), 0.0)).x), vec4(0.25)));
        _2225 = 1.0 - (_2218 * cbSceneParam._m0[34u].x);
        _2226 = 1.0 - (_2218 * cbSceneParam._m0[34u].y);
        _2227 = 1.0 - (_2218 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2225 = 1.0;
        _2226 = 1.0;
        _2227 = 1.0;
    }
    float _2291;
    float _2293;
    float _2295;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2279 = fma(_2075, cbSceneParam._m0[63u].w, fma(_2071, cbSceneParam._m0[63u].z, fma(_2067, cbSceneParam._m0[63u].y, _2063 * cbSceneParam._m0[63u].x)));
        float _2280 = fma(_2075, cbSceneParam._m0[60u].w, fma(_2071, cbSceneParam._m0[60u].z, fma(_2067, cbSceneParam._m0[60u].y, _2063 * cbSceneParam._m0[60u].x))) / _2279;
        float _2281 = fma(_2075, cbSceneParam._m0[61u].w, fma(_2071, cbSceneParam._m0[61u].z, fma(_2067, cbSceneParam._m0[61u].y, _2063 * cbSceneParam._m0[61u].x))) / _2279;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2280 >= cbSceneParam._m0[64u].x) && (_2281 >= cbSceneParam._m0[64u].y)) && (_2280 <= cbSceneParam._m0[64u].z)) && (_2281 <= cbSceneParam._m0[64u].w))
        {
            float _2419 = fma(_2075, cbSceneParam._m0[62u].w, fma(_2071, cbSceneParam._m0[62u].z, fma(_2067, cbSceneParam._m0[62u].y, _2063 * cbSceneParam._m0[62u].x))) / _2279;
            float _2423 = isnan(cbSceneParam._m0[41u].w) ? _2419 : (isnan(_2419) ? cbSceneParam._m0[41u].w : max(_2419, cbSceneParam._m0[41u].w));
            float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2077 * _2077) + (_2076 * _2076)) + (_2078 * _2078))) * cbSceneParam._m0[33u].y;
            float _4654 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
            float _2473 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2280, cbSceneParam._m0[33u].w + _2281), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2280, _2281 - cbSceneParam._m0[33u].z), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].z, _2281 - cbSceneParam._m0[33u].w), _2423), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2280 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2281), _2423), 0.0)).x), vec4(0.25)));
            float _2477 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
            float _2478 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
            float _2479 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2479) ? _2227 : (isnan(_2227) ? _2479 : min(_2227, _2479));
            frontier_phi_37_36_ladder_1 = isnan(_2478) ? _2226 : (isnan(_2226) ? _2478 : min(_2226, _2478));
            frontier_phi_37_36_ladder_2 = isnan(_2477) ? _2225 : (isnan(_2225) ? _2477 : min(_2225, _2477));
        }
        else
        {
            frontier_phi_37_36_ladder = _2227;
            frontier_phi_37_36_ladder_1 = _2226;
            frontier_phi_37_36_ladder_2 = _2225;
        }
        _2291 = frontier_phi_37_36_ladder_2;
        _2293 = frontier_phi_37_36_ladder_1;
        _2295 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2291 = _2225;
        _2293 = _2226;
        _2295 = _2227;
    }
    uvec4 _2300 = floatBitsToUint(cbInstanceData._m0[_950 + 5u]);
    uint _2302 = _2300.x * 14u;
    uint _2303 = _2302 + 13u;
    float _2310 = _975 + (-1.0);
    float _2315 = (cbLight._m0[_2303].x * _2310) + 1.0;
    float _2316 = (cbLight._m0[_2303].y * _2310) + 1.0;
    float _2317 = (cbLight._m0[_2303].z * _2310) + 1.0;
    float _2318 = (cbLight._m0[_2303].w * _2310) + 1.0;
    uint _2319 = _2302 + 5u;
    float _2325 = isnan(1.0) ? _2316 : (isnan(_2316) ? 1.0 : min(_2316, 1.0));
    uint _2329 = _2302 + 4u;
    float _2338 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
    uint _2342 = _2302 | 1u;
    float _2353 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_812, _813, _814));
    float _2356 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_812, _813, _814));
    float _4690 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _4701 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2361 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * 0.3183098733425140380859375;
    float _2363 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2370 = ((cbLight._m0[_2319].x * _2325) * _2363) + (((cbLight._m0[_2329].x * _2291) * _2338) * _2361);
    float _2371 = ((_2325 * cbLight._m0[_2319].y) * _2363) + (((cbLight._m0[_2329].y * _2293) * _2338) * _2361);
    float _2372 = ((_2325 * cbLight._m0[_2319].z) * _2363) + (((cbLight._m0[_2329].z * _2295) * _2338) * _2361);
    uvec4 _2376 = floatBitsToUint(cbLight._m0[_2302 + 12u]);
    bool _2378 = _2376.x == 0u;
    float _2480;
    float _2482;
    float _2484;
    if (_2378)
    {
        _2480 = _2370;
        _2482 = _2371;
        _2484 = _2372;
    }
    else
    {
        uint _2488 = _2302 + 6u;
        float _2504 = (dot(vec3(cbLight._m0[_2302 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2505 = _2504 * _2504;
        float _4712 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
        float _2506 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2507 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2480 = (((cbLight._m0[_2488].x * 0.3183098733425140380859375) * _2506) * _2507) + _2370;
        _2482 = (((cbLight._m0[_2488].y * 0.3183098733425140380859375) * _2506) * _2507) + _2371;
        _2484 = (((cbLight._m0[_2488].z * 0.3183098733425140380859375) * _2506) * _2507) + _2372;
    }
    bool _2487 = _2376.y == 0u;
    float _2542;
    float _2544;
    float _2546;
    if (_2487)
    {
        _2542 = _2480;
        _2544 = _2482;
        _2546 = _2484;
    }
    else
    {
        uint _2704 = _2302 + 7u;
        float _2720 = (dot(vec3(cbLight._m0[_2302 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2721 = _2720 * _2720;
        float _4728 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2722 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2723 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2542 = (((cbLight._m0[_2704].x * 0.3183098733425140380859375) * _2722) * _2723) + _2480;
        _2544 = (((cbLight._m0[_2704].y * 0.3183098733425140380859375) * _2722) * _2723) + _2482;
        _2546 = (((cbLight._m0[_2704].z * 0.3183098733425140380859375) * _2722) * _2723) + _2484;
    }
    uint _2549 = _2302 + 8u;
    float _2562 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _815) * 0.949999988079071044921875);
    float _2563 = _2562 * _2562;
    float _2564 = cbLight._m0[_2302].x + _891;
    float _2565 = cbLight._m0[_2302].y + _892;
    float _2566 = cbLight._m0[_2302].z + _893;
    float _2570 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
    float _2571 = _2570 * _2564;
    float _2572 = _2570 * _2565;
    float _2573 = _2570 * _2566;
    float _2574 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2302].xyz));
    float _4744 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
    float _2577 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _4755 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _2578 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2579 = dot(vec3(_812, _813, _814), vec3(_2571, _2572, _2573));
    float _4766 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2571, _2572, _2573));
    float _4777 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2563 * _2563;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2602 = (exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2603 = 1.0 - _2563;
    float _2614 = (0.5 / (((_2578 * ((_2577 * _2603) + _2563)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2603) + _2563) * _2577))) * _2577;
    float _4788 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    uint _2630 = _2302 + 9u;
    float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2342].w)) * _815) * 0.949999988079071044921875);
    float _2642 = _2641 * _2641;
    float _2643 = cbLight._m0[_2342].x + _891;
    float _2644 = cbLight._m0[_2342].y + _892;
    float _2645 = cbLight._m0[_2342].z + _893;
    float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
    float _2650 = _2649 * _2643;
    float _2651 = _2649 * _2644;
    float _2652 = _2649 * _2645;
    float _2653 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2342].xyz));
    float _4799 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2657 = dot(vec3(_812, _813, _814), vec3(_2650, _2651, _2652));
    float _4810 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2342].xyz), vec3(_2650, _2651, _2652));
    float _4821 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2642 * _2642;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2678 = (exp2(log2(1.0 - (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2679 = 1.0 - _2642;
    float _2689 = (0.5 / (((_2578 * ((_2656 * _2679) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2679) + _2642) * _2656))) * _2656;
    float _4832 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2691 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    float _2701 = (((_2678 * cbLight._m0[_2630].x) * _2691) * _2325) + ((((cbLight._m0[_2549].x * _2291) * _2602) * _2616) * _2338);
    float _2702 = (((_2678 * cbLight._m0[_2630].y) * _2691) * _2325) + ((((cbLight._m0[_2549].y * _2293) * _2602) * _2616) * _2338);
    float _2703 = (((_2678 * cbLight._m0[_2630].z) * _2691) * _2325) + ((((cbLight._m0[_2549].z * _2295) * _2602) * _2616) * _2338);
    float _2759;
    float _2761;
    float _2763;
    if (_2378)
    {
        _2759 = _2701;
        _2761 = _2702;
        _2763 = _2703;
    }
    else
    {
        uint _2765 = _2302 + 2u;
        uint _2769 = _2302 + 10u;
        float _2783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2765].w)) * _815) * 0.949999988079071044921875);
        float _2784 = _2783 * _2783;
        float _2785 = cbLight._m0[_2765].x + _891;
        float _2786 = cbLight._m0[_2765].y + _892;
        float _2787 = cbLight._m0[_2765].z + _893;
        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
        float _2792 = _2791 * _2785;
        float _2793 = _2791 * _2786;
        float _2794 = _2791 * _2787;
        float _2795 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2765].xyz));
        float _4843 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2799 = dot(vec3(_812, _813, _814), vec3(_2792, _2793, _2794));
        float _4854 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2803 = dot(vec3(cbLight._m0[_2765].xyz), vec3(_2792, _2793, _2794));
        float _4865 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2807 = _2784 * _2784;
        float _2811 = ((_2802 * _2802) * (_2807 + (-1.0))) + 1.0;
        float _2820 = (exp2(log2(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2821 = 1.0 - _2784;
        float _2831 = (0.5 / (((_2578 * ((_2798 * _2821) + _2784)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2821) + _2784) * _2798))) * _2798;
        float _4876 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2807 / ((_2811 * _2811) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2317 : (isnan(_2317) ? 1.0 : min(_2317, 1.0));
        _2759 = (((_2820 * cbLight._m0[_2769].x) * _2833) * _2834) + _2701;
        _2761 = (((_2820 * cbLight._m0[_2769].y) * _2833) * _2834) + _2702;
        _2763 = (((_2820 * cbLight._m0[_2769].z) * _2833) * _2834) + _2703;
    }
    float _2865;
    float _2867;
    float _2869;
    if (_2487)
    {
        _2865 = _2759;
        _2867 = _2761;
        _2869 = _2763;
    }
    else
    {
        uint _2876 = _2302 + 3u;
        uint _2880 = _2302 + 11u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _815) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _891;
        float _2897 = cbLight._m0[_2876].y + _892;
        float _2898 = cbLight._m0[_2876].z + _893;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2876].xyz));
        float _4892 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
        float _2910 = dot(vec3(_812, _813, _814), vec3(_2903, _2904, _2905));
        float _4903 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4914 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2931 = (exp2(log2(1.0 - (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2932 = 1.0 - _2895;
        float _2942 = (0.5 / (((_2578 * ((_2909 * _2932) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2932) + _2895) * _2909))) * _2909;
        float _4925 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2944 = (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2945 = isnan(1.0) ? _2318 : (isnan(_2318) ? 1.0 : min(_2318, 1.0));
        _2865 = (((_2931 * cbLight._m0[_2880].x) * _2944) * _2945) + _2759;
        _2867 = (((_2931 * cbLight._m0[_2880].y) * _2944) * _2945) + _2761;
        _2869 = (((_2931 * cbLight._m0[_2880].z) * _2944) * _2945) + _2763;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2300.y == 0u)
    {
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _912) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _911) / _2967)));
        float _2988 = (log2(_2078 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3123 = 0.0;
            _3125 = 0.0;
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
        }
        else
        {
            float _3124;
            float _3126;
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            uint _3290 = 0u;
            uint _3299;
            bool _3300;
            for (;;)
            {
                _3299 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3290 << 2u)) >> 2u)).x;
                _3300 = _3299 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3300)
                {
                    frontier_phi_71_pred = _3289;
                    frontier_phi_71_pred_1 = _3288;
                    frontier_phi_71_pred_2 = _3287;
                    frontier_phi_71_pred_3 = _3286;
                    frontier_phi_71_pred_4 = _3285;
                    frontier_phi_71_pred_5 = _3284;
                }
                else
                {
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    uint _3435;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3299;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    for (;;)
                    {
                        uint _3439 = uint(findLSB(_3435)) + (_3290 << 5u);
                        uint _3436 = (_3435 + 4294967295u) & _3435;
                        uint _3441 = _3439 * 48u;
                        vec4 _3455 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3441)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3441 + 3u)).x));
                        uint _3461 = (_3439 * 48u) + 4u;
                        vec4 _3474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3461)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3461 + 3u)).x));
                        uint _3480 = (_3439 * 48u) + 8u;
                        vec3 _3491 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3480)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3480 + 2u)).x));
                        float _3495 = _3455.x - _2076;
                        float _3496 = _3455.y - _2077;
                        float _3497 = _3455.z - _2078;
                        float _3498 = dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497));
                        float _3501 = inversesqrt(_3498);
                        float _3502 = _3501 * _3495;
                        float _3503 = _3501 * _3496;
                        float _3504 = _3501 * _3497;
                        float _3505 = dot(vec3(_931, _934, _937), vec3(_3502, _3503, _3504));
                        float _3510 = 1.0 - (_3498 * _3455.w);
                        float _4951 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3512 = sqrt(_3498) * _3474.w;
                        float _3515 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3505) + _3516;
                        float _3522 = _3512 * _3512;
                        float _3526 = ((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3511) / ((_3522 * 0.699999988079071044921875) + 1.0);
                        float _3530 = (-0.0) - _2076;
                        float _3531 = (-0.0) - _2077;
                        float _3532 = (-0.0) - _2078;
                        float _3536 = inversesqrt(dot(vec3(_3530, _3531, _3532), vec3(_3530, _3531, _3532)));
                        float _3537 = _3536 * _3530;
                        float _3538 = _3536 * _3531;
                        float _3539 = _3536 * _3532;
                        float _3546 = exp2(log2(1.0 / ((_3522 * 3.5) + 5.0)) * 0.25);
                        float _3547 = 1.0 - _991;
                        float _3554 = sqrt(1.0 - ((1.0 - (_3547 * _3547)) * (1.0 - (_3546 * _3546))));
                        float _3555 = _3554 * _3554;
                        float _3556 = _3555 * _3555;
                        float _3557 = _3537 + _3502;
                        float _3558 = _3538 + _3503;
                        float _3559 = _3539 + _3504;
                        float _3563 = inversesqrt(dot(vec3(_3557, _3558, _3559), vec3(_3557, _3558, _3559)));
                        float _3567 = dot(vec3(_931, _934, _937), vec3(_3537, _3538, _3539));
                        float _4967 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3570 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3571 = dot(vec3(_931, _934, _937), vec3(_3563 * _3557, _3563 * _3558, _3563 * _3559));
                        float _4978 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3574 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3578 = ((_3574 * _3574) * (_3556 + (-1.0))) + 1.0;
                        float _3579 = _3515 * _3555;
                        float _3580 = _3579 * _3579;
                        float _3583 = ((1.0 - _3580) * _3505) + _3580;
                        float _4989 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                        float _3584 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3585 = 1.0 - _3555;
                        float _3595 = (0.5 / (((_3584 * ((_3570 * _3585) + _3555)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3555) * _3570))) * _3584;
                        float _5000 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3606 = (((_3556 * 3.1415927410125732421875) * (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0)))) / ((_3578 * _3578) * ((_3522 * 2.1991131305694580078125) + 3.141590118408203125))) * _3511;
                        _3359 = (_3526 * _3474.x) + _3432;
                        _3360 = (_3526 * _3474.y) + _3433;
                        _3361 = (_3526 * _3474.z) + _3434;
                        _3356 = (_3606 * _3491.x) + _3429;
                        _3357 = (_3606 * _3491.y) + _3430;
                        _3358 = (_3606 * _3491.z) + _3431;
                        if (_3436 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3436;
                        }
                    }
                    frontier_phi_71_pred = _3361;
                    frontier_phi_71_pred_1 = _3360;
                    frontier_phi_71_pred_2 = _3359;
                    frontier_phi_71_pred_3 = _3358;
                    frontier_phi_71_pred_4 = _3357;
                    frontier_phi_71_pred_5 = _3356;
                }
                _3134 = frontier_phi_71_pred;
                _3132 = frontier_phi_71_pred_1;
                _3130 = frontier_phi_71_pred_2;
                _3128 = frontier_phi_71_pred_3;
                _3126 = frontier_phi_71_pred_4;
                _3124 = frontier_phi_71_pred_5;
                uint _3291 = _3290 + 1u;
                if (_3291 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3284 = _3124;
                    _3285 = _3126;
                    _3286 = _3128;
                    _3287 = _3130;
                    _3288 = _3132;
                    _3289 = _3134;
                    _3290 = _3291;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3123 = _3124;
            _3125 = _3126;
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
        }
        uvec4 _3137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3138 = _3137.z;
        uint _3140 = (_3138 >> 8u) & 15u;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        if (((4294967295u << _3140) & _2998) == 0u)
        {
            _3252 = _3123;
            _3254 = _3125;
            _3256 = _3127;
            _3258 = _3129;
            _3260 = _3131;
            _3262 = _3133;
        }
        else
        {
            float _3277 = inversesqrt(dot(vec3(_2076, _2077, _2078), vec3(_2076, _2077, _2078)));
            float _3278 = _3277 * _2076;
            float _3279 = _3277 * _2077;
            float _3280 = _3277 * _2078;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3140 < ((_3138 >> 12u) & 15u))
            {
                float _3253;
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3412 = _3123;
                float _3413 = _3125;
                float _3414 = _3127;
                float _3415 = _3129;
                float _3416 = _3131;
                float _3417 = _3133;
                uint _3418 = _3140;
                uint _3427;
                bool _3428;
                for (;;)
                {
                    _3427 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3418 << 2u)) >> 2u)).x;
                    _3428 = _3427 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3428)
                    {
                        frontier_phi_82_pred = _3417;
                        frontier_phi_82_pred_1 = _3416;
                        frontier_phi_82_pred_2 = _3415;
                        frontier_phi_82_pred_3 = _3414;
                        frontier_phi_82_pred_4 = _3413;
                        frontier_phi_82_pred_5 = _3412;
                    }
                    else
                    {
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        float _3636 = _3415;
                        float _3637 = _3416;
                        float _3638 = _3417;
                        uint _3639 = _3427;
                        uint _3640;
                        vec4 _3665;
                        float _3666;
                        vec4 _3681;
                        vec3 _3693;
                        vec4 _3708;
                        vec4 _3723;
                        float _3770;
                        bool _3771;
                        for (;;)
                        {
                            uint _3650 = ((_3418 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3639));
                            _3640 = (_3639 + 4294967295u) & _3639;
                            uint _3652 = _3650 * 40u;
                            _3665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3652 + 3u)).x));
                            _3666 = _3665.w;
                            uint _3668 = (_3650 * 40u) + 4u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3650 * 40u) + 8u;
                            _3693 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x));
                            uint _3695 = (_3650 * 40u) + 16u;
                            _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            uint _3710 = (_3650 * 40u) + 20u;
                            _3723 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3710)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3710 + 3u)).x));
                            uint _3726 = (_3650 * 40u) + 24u;
                            vec4 _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3745 = (_3650 * 40u) + 28u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            _3770 = fma(_2078, _3758.z, fma(_2077, _3758.y, _3758.x * _2076)) + _3758.w;
                            _3771 = !((fma(_2078, _3739.z, fma(_2077, _3739.y, _3739.x * _2076)) + _3739.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3771)
                            {
                                float _3798 = _3665.x - _2076;
                                float _3799 = _3665.y - _2077;
                                float _3800 = _3665.z - _2078;
                                float _3801 = dot(vec3(_3798, _3799, _3800), vec3(_3798, _3799, _3800));
                                float _3804 = inversesqrt(_3801);
                                float _3805 = _3804 * _3798;
                                float _3806 = _3804 * _3799;
                                float _3807 = _3804 * _3800;
                                float _3811 = 1.0 - (_3801 / (_3666 * _3666));
                                float _5011 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3816 = sqrt(_3801) * _3681.w;
                                float _3818 = 1.39999997615814208984375 / (_3816 + 1.39999997615814208984375);
                                float _3819 = _3818 * _3818;
                                float _3822 = ((1.0 - _3819) * dot(vec3(_3805, _3806, _3807), vec3(_931, _934, _937))) + _3819;
                                float _3825 = _3816 * _3816;
                                float _3829 = (fma(_2078, _3708.z, fma(_2077, _3708.y, _3708.x * _2076)) + _3708.w) / _3770;
                                float _3830 = (fma(_2078, _3723.z, fma(_2077, _3723.y, _3723.x * _2076)) + _3723.w) / _3770;
                                float _3834 = 1.0 - dot(vec2(_3829, _3830), vec2(_3829, _3830));
                                float _5027 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3836 = _3835 * (((isnan(0.0) ? _3822 : (isnan(_3822) ? 0.0 : max(_3822, 0.0))) * _3812) / ((_3825 * 0.699999988079071044921875) + 1.0));
                                float _3848 = exp2(log2(1.0 / ((_3825 * 3.5) + 5.0)) * 0.25);
                                float _3849 = 1.0 - _991;
                                float _3856 = sqrt(1.0 - ((1.0 - (_3849 * _3849)) * (1.0 - (_3848 * _3848))));
                                float _3857 = _3856 * _3856;
                                float _3858 = _3857 * _3857;
                                float _3859 = _3805 - _3278;
                                float _3860 = _3806 - _3279;
                                float _3861 = _3807 - _3280;
                                float _3865 = inversesqrt(dot(vec3(_3859, _3860, _3861), vec3(_3859, _3860, _3861)));
                                float _3869 = dot(vec3(_931, _934, _937), vec3((-0.0) - _3278, (-0.0) - _3279, (-0.0) - _3280));
                                float _5038 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                                float _3872 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3873 = dot(vec3(_931, _934, _937), vec3(_3865 * _3859, _3865 * _3860, _3865 * _3861));
                                float _5049 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3880 = ((_3876 * _3876) * (_3858 + (-1.0))) + 1.0;
                                float _3881 = _3818 * _3857;
                                float _3882 = _3881 * _3881;
                                float _3888 = ((1.0 - _3882) * dot(vec3(_931, _934, _937), vec3(_3805, _3806, _3807))) + _3882;
                                float _5060 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3889 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3890 = 1.0 - _3857;
                                float _3900 = (0.5 / (((_3889 * ((_3872 * _3890) + _3857)) + 9.9999999392252902907785028219223e-09) + (((_3889 * _3890) + _3857) * _3872))) * _3889;
                                float _5071 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3910 = (_3835 * _3812) * (((_3858 * 3.1415927410125732421875) * (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0)))) / ((_3880 * _3880) * ((_3825 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3836 * _3681.z;
                                frontier_phi_88_pred_1 = _3836 * _3681.y;
                                frontier_phi_88_pred_2 = _3836 * _3681.x;
                                frontier_phi_88_pred_3 = _3910 * _3693.z;
                                frontier_phi_88_pred_4 = _3910 * _3693.y;
                                frontier_phi_88_pred_5 = _3910 * _3693.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3919 = frontier_phi_88_pred;
                            _3918 = frontier_phi_88_pred_1;
                            _3917 = frontier_phi_88_pred_2;
                            _3916 = frontier_phi_88_pred_3;
                            _3915 = frontier_phi_88_pred_4;
                            _3914 = frontier_phi_88_pred_5;
                            _3623 = _3917 + _3636;
                            _3624 = _3918 + _3637;
                            _3625 = _3919 + _3638;
                            _3620 = _3914 + _3633;
                            _3621 = _3915 + _3634;
                            _3622 = _3916 + _3635;
                            if (_3640 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3640;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3625;
                        frontier_phi_82_pred_1 = _3624;
                        frontier_phi_82_pred_2 = _3623;
                        frontier_phi_82_pred_3 = _3622;
                        frontier_phi_82_pred_4 = _3621;
                        frontier_phi_82_pred_5 = _3620;
                    }
                    _3263 = frontier_phi_82_pred;
                    _3261 = frontier_phi_82_pred_1;
                    _3259 = frontier_phi_82_pred_2;
                    _3257 = frontier_phi_82_pred_3;
                    _3255 = frontier_phi_82_pred_4;
                    _3253 = frontier_phi_82_pred_5;
                    uint _3419 = _3418 + 1u;
                    if (_3419 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3412 = _3253;
                        _3413 = _3255;
                        _3414 = _3257;
                        _3415 = _3259;
                        _3416 = _3261;
                        _3417 = _3263;
                        _3418 = _3419;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3259;
                frontier_phi_63_64_ladder_1 = _3263;
                frontier_phi_63_64_ladder_2 = _3261;
                frontier_phi_63_64_ladder_3 = _3257;
                frontier_phi_63_64_ladder_4 = _3255;
                frontier_phi_63_64_ladder_5 = _3253;
            }
            else
            {
                frontier_phi_63_64_ladder = _3129;
                frontier_phi_63_64_ladder_1 = _3133;
                frontier_phi_63_64_ladder_2 = _3131;
                frontier_phi_63_64_ladder_3 = _3127;
                frontier_phi_63_64_ladder_4 = _3125;
                frontier_phi_63_64_ladder_5 = _3123;
            }
            _3252 = frontier_phi_63_64_ladder_5;
            _3254 = frontier_phi_63_64_ladder_4;
            _3256 = frontier_phi_63_64_ladder_3;
            _3258 = frontier_phi_63_64_ladder;
            _3260 = frontier_phi_63_64_ladder_2;
            _3262 = frontier_phi_63_64_ladder_1;
        }
        float _3267 = isnan(1.0) ? _975 : (isnan(_975) ? 1.0 : min(_975, 1.0));
        _3011 = (_3267 * _3258) + _2542;
        _3013 = (_3267 * _3260) + _2544;
        _3015 = (_3267 * _3262) + _2546;
        _3017 = ((_3252 * 0.039999999105930328369140625) * _3267) + _2865;
        _3019 = ((_3254 * 0.039999999105930328369140625) * _3267) + _2867;
        _3021 = ((_3256 * 0.039999999105930328369140625) * _3267) + _2869;
    }
    else
    {
        _3011 = _2542;
        _3013 = _2544;
        _3015 = _2546;
        _3017 = _2865;
        _3019 = _2867;
        _3021 = _2869;
    }
    uint _3027 = _951 + uint(cbMatDynParam._m0[0u].w);
    float _3033 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3039 = (((((_3033 * cbMtdParam._m0[14u].x) * _670.x) * _693) * _767) * (((1.0 - _746) * cbMtdParam._m0[20u].w) + _746)) * cbInstanceData._m0[_3027].x;
    float _3045 = (((((_3033 * cbMtdParam._m0[14u].y) * _670.y) * _693) * _767) * (((1.0 - _748) * cbMtdParam._m0[20u].w) + _748)) * cbInstanceData._m0[_3027].y;
    float _3051 = (((((_3033 * cbMtdParam._m0[14u].z) * _670.z) * _693) * _767) * (((1.0 - _750) * cbMtdParam._m0[20u].w) + _750)) * cbInstanceData._m0[_3027].z;
    float _5087 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _5098 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _5109 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _3068 = (((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3011 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _975))) + ((_3017 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + _3039;
    float _3070 = (_3045 + ((_3019 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3013 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _975)));
    float _3072 = (_3051 + ((_3021 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1812)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3015 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _975)));
    float _3073 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
    float _3074 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
    float _3075 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
    float _3081 = cbMtdParam._m0[2u].x * _3039;
    float _3082 = cbMtdParam._m0[2u].y * _3045;
    float _3083 = cbMtdParam._m0[2u].z * _3051;
    float _5135 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3085 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
    uint _3086 = _950 + 6u;
    float _3094 = _911 / cbSceneParam._m0[86u].x;
    float _3095 = _912 / cbSceneParam._m0[86u].y;
    vec4 _3109 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3094, _3095, (log2((isnan(cbSceneParam._m0[77u].w) ? _834 : (isnan(_834) ? cbSceneParam._m0[77u].w : min(_834, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3111 = _3109.x;
    float _3112 = _3109.y;
    float _3113 = _3109.z;
    float _3114 = _3109.w;
    float _3185;
    float _3187;
    float _3189;
    float _3191;
    if (_834 > cbSceneParam._m0[78u].w)
    {
        float _3148 = isnan(_834) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _834 : min(cbSceneParam._m0[80u].w, _834));
        float _3149 = _3148 / _834;
        float _3160 = _3149 * _884;
        float _3161 = _885 * _3149;
        float _3162 = (-0.0) - _3161;
        float _3163 = _3149 * _886;
        float _3165 = (cbSceneParam._m0[77u].w * _3162) / _3148;
        float _3166 = _3165 + cbSceneParam._m0[79u].w;
        float _3167 = cbSceneParam._m0[79u].w - _3161;
        float _3173 = sqrt(((_3160 * _3160) + (_3161 * _3161)) + (_3163 * _3163));
        float _3176 = (1.0 - (cbSceneParam._m0[77u].w / _3148)) * _3173;
        float _3181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3369;
        if (abs((_3162 - _3165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3369 = ((((_3166 > 0.0) ? exp2(_3181 * _3166) : (2.0 - exp2(_3183 * _3166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3176;
        }
        else
        {
            float _3313 = 1.0 / cbSceneParam._m0[80u].x;
            float _3314 = isnan(_3167) ? _3166 : (isnan(_3166) ? _3167 : max(_3166, _3167));
            float _3315 = isnan(_3167) ? _3166 : (isnan(_3166) ? _3167 : min(_3166, _3167));
            float _3324 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : min(_3314, 0.0));
            float _3325 = isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : min(_3315, 0.0));
            _3369 = ((abs(_3173 / _3162) * cbSceneParam._m0[80u].y) * ((((_3324 - _3325) * 2.0) - ((exp2(_3181 * (isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0)))) - exp2(_3181 * (isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))))) * _3313)) - ((exp2(_3183 * _3324) - exp2(_3183 * _3325)) * _3313))) + (_3176 * cbSceneParam._m0[80u].z);
        }
        vec4 _3371 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3094, _3095, 1.0), 0.0);
        float _3380 = exp2((_3369 * (-1.44269502162933349609375)) * (1.0 - _3371.w));
        float _3381 = log2(_3380);
        float _3397 = log2(_3114);
        _3185 = (exp2(_3397 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].x)) * _3371.x) / cbSceneParam._m0[78u].x)) + _3111;
        _3187 = (exp2(_3397 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].y)) * _3371.y) / cbSceneParam._m0[78u].y)) + _3112;
        _3189 = (exp2(_3397 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3381 * cbSceneParam._m0[78u].z)) * _3371.z) / cbSceneParam._m0[78u].z)) + _3113;
        _3191 = _3380 * _3114;
    }
    else
    {
        _3185 = _3111;
        _3187 = _3112;
        _3189 = _3113;
        _3191 = _3114;
    }
    bool _3407;
    vec4 _3201;
    vec4 _3223;
    float _3225;
    float _3229;
    float _3230;
    float _3231;
    float _3234;
    float _3237;
    float _3240;
    float _3241;
    bool _3251;
    for (;;)
    {
        _3201 = cbMatDynParam._m0[0u];
        float _3203 = roundEven(_3201.y);
        bool _3204 = _3203 == 3.0;
        float _3205 = log2(_3191);
        float _3209 = exp2(_3205 * cbSceneParam._m0[78u].x);
        float _3210 = exp2(_3205 * cbSceneParam._m0[78u].y);
        float _3211 = exp2(_3205 * cbSceneParam._m0[78u].z);
        float _3212 = _3209 * _3073;
        float _3213 = _3210 * _3074;
        float _3214 = _3211 * _3075;
        float _3221 = _900 + (-0.5);
        _3223 = cbMtdParam._m0[1u];
        _3225 = _3223.y * _3221;
        float _3228 = (_3203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3229 = _3228 * (_3204 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3185)));
        _3230 = _3228 * (_3204 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3187)));
        _3231 = _3228 * (_3204 ? _3214 : (_3214 + (cbSceneParam._m0[72u].w * _3189)));
        _3234 = ((_3081 * _3085) * _3209) * _3228;
        _3237 = ((_3082 * _3085) * _3210) * _3228;
        _3240 = ((_3083 * _3085) * _3211) * _3228;
        _3241 = _3221 * 0.999000012874603271484375;
        _3251 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3251)
        {
            if ((cbInstanceData._m0[_950 + 7u].x + _3241) < 0.5)
            {
                _3407 = true;
                break;
            }
        }
        uint _3348 = _951 + uint(_3201.w);
        if ((cbInstanceData._m0[_3348].w < 1.0) && ((cbInstanceData._m0[_3348].w + _3241) < 0.5))
        {
            _3407 = true;
            break;
        }
        if ((_3225 + 1.0) < _3223.x)
        {
            _3407 = true;
            break;
        }
        _3407 = false;
        break;
    }
    float _3611;
    if (_3407)
    {
        discard_state = true;
        _3611 = 0.0;
    }
    else
    {
        _3611 = cbInstanceData._m0[_3086].w;
    }
    SV_Target.x = _3229;
    SV_Target.y = _3230;
    SV_Target.z = _3231;
    SV_Target.w = _3611;
    SV_Target_1.x = _3234;
    SV_Target_1.y = _3237;
    SV_Target_1.z = _3240;
    SV_Target_1.w = cbInstanceData._m0[_3086].w;
    discard_exit();
}


