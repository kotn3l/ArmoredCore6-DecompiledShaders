#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1282;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _306 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _343 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _306.x) * 2.0) - _333)) + 1.0;
    float _3925 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _351 = (_344 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _352 = (_344 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _353 = (_344 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _372 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _385 = (((((1.0 - _306.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3936 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _351) * _386) + _351;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _413 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _426 = (((((1.0 - _306.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3947 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    vec4 _455 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _463 = ((((((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _455.x;
    float _466 = ((((_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _455.y;
    float _469 = ((((_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _455.z;
    vec4 _482 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _496 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    vec4 _512 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _523 = ((_512.x - _498) * _344) + _498;
    float _524 = ((_512.y - _499) * _344) + _499;
    float _525 = ((_512.z - _500) * _344) + _500;
    vec4 _538 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = ((_538.x - _523) * _386) + _523;
    float _550 = ((_538.y - _524) * _386) + _524;
    float _551 = ((_538.z - _525) * _386) + _525;
    vec4 _564 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _577 = ((_564.z - _551) * _427) + _551;
    float _580 = ((((_564.x - _549) * _427) + _549) * 2.0) + (-1.0);
    float _582 = ((((_564.y - _550) * _427) + _550) * 2.0) + (-1.0);
    float _583 = dot(vec2(_580, _582), vec2(_580, _582));
    float _3958 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
    vec4 _621 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _635 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3969 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _644 = (((_636 * _636) * (3.0 - (_636 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _652 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _660 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3980 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _665 = (_661 * _661) * (3.0 - (_661 * 2.0));
    float _666 = _665 * cbMtdParam._m0[22u].x;
    float _667 = _665 * cbMtdParam._m0[22u].y;
    float _668 = sin(_652);
    float _669 = cos(_652);
    float _670 = TEXCOORD.z - _666;
    float _671 = TEXCOORD.w - _667;
    vec4 _691 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_666 + fma(_671, (-0.0) - _668, _670 * _669))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_671, _669, _670 * _668) + _667)) + cbTextureTilingScale._m0[2u].w));
    float _697 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _691.x;
    float _699 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _691.y;
    float _701 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _691.z;
    float _722 = (TEXCOORD_5.x - (((_482.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3991 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _723 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _736 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _746 = (((_736.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _580;
    float _747 = (((_736.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _582;
    float _750 = fma(_588, _231 * NORMAL.x, fma(_747, _238 * TANGENT.x, (_224 * _216) * _746));
    float _753 = fma(_588, _231 * NORMAL.y, fma(_747, _238 * TANGENT.y, (_224 * _217) * _746));
    float _756 = fma(_588, _231 * NORMAL.z, fma(_747, _238 * TANGENT.z, (_224 * _218) * _746));
    float _760 = inversesqrt(dot(vec3(_750, _753, _756), vec3(_750, _753, _756)));
    float _761 = _760 * _750;
    float _762 = _760 * _753;
    float _763 = _760 * _756;
    float _4002 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _764 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _4013 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4024 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _4035 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    float _848 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _849 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _867 = fma(_763, cbSceneParam._m0[5u].z, fma(_762, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _761));
    float _870 = fma(_763, cbSceneParam._m0[6u].z, fma(_762, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _761));
    float _873 = fma(_763, cbSceneParam._m0[7u].z, fma(_762, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _761));
    uint _886 = uint(roundEven(NORMAL.w)) * 13u;
    uint _887 = _886 + 9u;
    uint _888 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _894 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_888].x;
    float _895 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_888].y;
    float _896 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_888].z;
    float _4046 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _898 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _908 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _848, cbSceneParam._m0[86u].y * _849));
    float _911 = _908.x * TEXCOORD_5.w;
    float _912 = dot(vec3(_761, _762, _763), vec3(_840, _841, _842));
    float _915 = _912 * 2.0;
    float _919 = (_915 * _761) - _840;
    float _920 = (_915 * _762) - _841;
    float _921 = (_915 * _763) - _842;
    float _925 = abs(dot(vec3(_840, _841, _842), vec3(_761, _762, _763)));
    float _4079 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _927 = sqrt(_764);
    float _939 = exp2((_927 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_927 * 3.0));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _975 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1281;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1006 = fma(_979, cbModelParam._m0[26u].z, fma(_975, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971));
        float _1010 = fma(_979, cbModelParam._m0[27u].z, fma(_975, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971));
        float _1014 = fma(_979, cbModelParam._m0[28u].z, fma(_975, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971));
        float _1039 = _971 + _761;
        float _1040 = _975 + _762;
        float _1041 = _979 + _763;
        float _1051 = fma(_1041, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1039)) - _1006;
        float _1052 = fma(_1041, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1039)) - _1010;
        float _1053 = fma(_1041, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1039)) - _1014;
        float _1057 = inversesqrt(dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053)));
        float _1070 = ((_1057 * _1051) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1006 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1071 = ((_1057 * _1052) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1010 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1057 * _1053) / cbModelParam._m0[34u].z) + ((((((_1014 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1070, _1071, _1072), 0.0);
        float _1109 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1075.x + (-0.5));
        float _1111 = _1109 * (_1075.y + (-0.5));
        float _1112 = _1109 * (_1075.z + (-0.5));
        float _1119 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1082.x + (-0.5));
        float _1121 = _1119 * (_1082.y + (-0.5));
        float _1122 = _1119 * (_1082.z + (-0.5));
        float _1129 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1089.x + (-0.5));
        float _1131 = _1129 * (_1089.y + (-0.5));
        float _1132 = _1129 * (_1089.z + (-0.5));
        float _1139 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1096.x + (-0.5));
        float _1141 = _1139 * (_1096.y + (-0.5));
        float _1142 = _1139 * (_1096.z + (-0.5));
        float _1143 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = _1110 * 0.5;
        float _1147 = _1120 * 0.5;
        float _1148 = _1130 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1163 = (dot(vec3(_761, _762, _763), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1173 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1143 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _4127 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1175 + 1.0))) + _1180) * _1143;
        float _1190 = _1111 * 0.5;
        float _1191 = _1121 * 0.5;
        float _1192 = _1131 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_761, _762, _763), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _4160 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1217 + 1.0))) + _1222) * _1144;
        float _1232 = _1112 * 0.5;
        float _1233 = _1122 * 0.5;
        float _1234 = _1132 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_761, _762, _763), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4193 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1259 + 1.0))) + _1264) * _1145;
        _1281 = _1112;
        _1283 = _1111;
        _1284 = _1110;
        _1285 = _1122;
        _1286 = _1121;
        _1287 = _1120;
        _1288 = _1132;
        _1289 = _1131;
        _1290 = _1130;
        _1291 = _1145;
        _1292 = _1144;
        _1293 = _1143;
        _1294 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
    }
    else
    {
        _1281 = _1282;
        _1283 = _1282;
        _1284 = _1282;
        _1285 = _1282;
        _1286 = _1282;
        _1287 = _1282;
        _1288 = _1282;
        _1289 = _1282;
        _1290 = _1282;
        _1291 = _1282;
        _1292 = _1282;
        _1293 = _1282;
        _1294 = 0.0;
        _1295 = 0.0;
        _1296 = 0.0;
    }
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1322 = fma(_979, cbModelParam._m0[30u].z, fma(_975, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _971));
        float _1326 = fma(_979, cbModelParam._m0[31u].z, fma(_975, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _971));
        float _1330 = fma(_979, cbModelParam._m0[32u].z, fma(_975, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _971));
        float _1353 = _971 + _761;
        float _1354 = _975 + _762;
        float _1355 = _979 + _763;
        float _1365 = fma(_1355, cbModelParam._m0[30u].z, fma(_1354, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1353)) - _1322;
        float _1366 = fma(_1355, cbModelParam._m0[31u].z, fma(_1354, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1353)) - _1326;
        float _1367 = fma(_1355, cbModelParam._m0[32u].z, fma(_1354, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1353)) - _1330;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1322 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1326 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[35u].z) + ((((((_1330 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1421 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1388.x + (-0.5));
        float _1423 = _1421 * (_1388.y + (-0.5));
        float _1424 = _1421 * (_1388.z + (-0.5));
        float _1431 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1395.x + (-0.5));
        float _1433 = _1431 * (_1395.y + (-0.5));
        float _1434 = _1431 * (_1395.z + (-0.5));
        float _1441 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1402.x + (-0.5));
        float _1443 = _1441 * (_1402.y + (-0.5));
        float _1444 = _1441 * (_1402.z + (-0.5));
        float _1451 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1409.x + (-0.5));
        float _1453 = _1451 * (_1409.y + (-0.5));
        float _1454 = _1451 * (_1409.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1474 = (dot(vec3(_761, _762, _763), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1483 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1484 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1485 = _1484 * 2.0;
        float _1489 = (1.0 - _1484) / (_1484 + 1.0);
        float _4256 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1499 = ((((1.0 - _1490) * (_1485 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1485 + 1.0))) + _1490) * _1455;
        float _1500 = _1423 * 0.5;
        float _1501 = _1433 * 0.5;
        float _1502 = _1443 * 0.5;
        float _1503 = dot(vec3(_1500, _1501, _1502), vec3(_1500, _1501, _1502));
        float _1508 = (_1503 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1503);
        float _1516 = (dot(vec3(_761, _762, _763), vec3(_1508 * _1500, _1508 * _1501, _1508 * _1502)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1525 = sqrt(((_1501 * _1501) + (_1500 * _1500)) + (_1502 * _1502)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1527 = _1526 * 2.0;
        float _1531 = (1.0 - _1526) / (_1526 + 1.0);
        float _4289 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1541 = ((((1.0 - _1532) * (_1527 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1527 + 1.0))) + _1532) * _1456;
        float _1542 = _1424 * 0.5;
        float _1543 = _1434 * 0.5;
        float _1544 = _1444 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_761, _762, _763), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4322 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1569 + 1.0))) + _1574) * _1457;
        _1591 = _1424;
        _1592 = _1423;
        _1593 = _1422;
        _1594 = _1434;
        _1595 = _1433;
        _1596 = _1432;
        _1597 = _1444;
        _1598 = _1443;
        _1599 = _1442;
        _1600 = _1457;
        _1601 = _1456;
        _1602 = _1455;
        _1603 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
        _1604 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)));
        _1605 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
    }
    else
    {
        _1591 = _1282;
        _1592 = _1282;
        _1593 = _1282;
        _1594 = _1282;
        _1595 = _1282;
        _1596 = _1282;
        _1597 = _1282;
        _1598 = _1282;
        _1599 = _1282;
        _1600 = _1282;
        _1601 = _1282;
        _1602 = _1282;
        _1603 = 0.0;
        _1604 = 0.0;
        _1605 = 0.0;
    }
    float _1615 = (cbModelParam._m0[1u].x * (_1603 - _1294)) + _1294;
    float _1616 = (cbModelParam._m0[1u].x * (_1604 - _1295)) + _1295;
    float _1617 = (cbModelParam._m0[1u].x * (_1605 - _1296)) + _1296;
    float _1638 = fma(_1617, cbSceneParam._m0[89u].z, fma(_1616, cbSceneParam._m0[89u].y, _1615 * cbSceneParam._m0[89u].x));
    float _1641 = fma(_1617, cbSceneParam._m0[90u].z, fma(_1616, cbSceneParam._m0[90u].y, _1615 * cbSceneParam._m0[90u].x));
    float _1644 = fma(_1617, cbSceneParam._m0[91u].z, fma(_1616, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1615));
    float _1659 = _919 * 0.5;
    float _1660 = _920 * 0.5;
    float _1661 = _921 * 0.5;
    float _1662 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1593, _1596, _1599, _1602));
    float _1665 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1592, _1595, _1598, _1601));
    float _1668 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1591, _1594, _1597, _1600));
    float _1702;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1675 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1281, _1285, _1288, _1291));
        float _1679 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1283, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1659, _1660, _1661, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1690 = dot(vec4(cbModelParam._m0[39u]), vec4(_1659, _1660, _1661, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1713;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1704 = dot(vec4(cbModelParam._m0[40u]), vec4(_1659, _1660, _1661, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1717 = (_1713 * cbModelParam._m0[1u].x) + (_1702 * (1.0 - cbModelParam._m0[1u].x));
    float _1727 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _764);
    float _1728 = isnan(_1727) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1727 : min(cbModelParam._m0[25u].z, _1727));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1775 = fma(_979, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _971)) + cbModelParam._m0[13u].w;
        float _1779 = fma(_979, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _971)) + cbModelParam._m0[14u].w;
        float _1783 = fma(_979, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _971)) + cbModelParam._m0[15u].w;
        float _1786 = fma(_921, cbModelParam._m0[13u].z, fma(_920, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919));
        float _1789 = fma(_921, cbModelParam._m0[14u].z, fma(_920, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919));
        float _1792 = fma(_921, cbModelParam._m0[15u].z, fma(_920, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919));
        float _1820;
        if (_1786 > 0.0)
        {
            _1820 = abs((1.0 - _1775) / _1786);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1775 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1820 = frontier_phi_14_12_ladder;
        }
        float _1989;
        if (_1789 > 0.0)
        {
            _1989 = abs((1.0 - _1779) / _1789);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1779 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1989 = frontier_phi_23_19_ladder;
        }
        float _2285;
        if (_1792 > 0.0)
        {
            _2285 = abs((1.0 - _1783) / _1792);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1783 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2285 = frontier_phi_35_30_ladder;
        }
        float _2287 = isnan(_1989) ? _1820 : (isnan(_1820) ? _1989 : min(_1820, _1989));
        float _2288 = isnan(_2285) ? _2287 : (isnan(_2287) ? _2285 : min(_2287, _2285));
        float _2292 = (_2288 * _1786) + _1775;
        float _2293 = (_2288 * _1789) + _1779;
        float _2294 = (_2288 * _1792) + _1783;
        float _2295 = _2288 * 9.9999997473787516355514526367188e-05;
        float _2297 = (-1.0) - _2295;
        float _2299 = _2295 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2294 > _2299) || ((_2294 < _2297) || ((_2293 > _2299) || ((_2293 < _2297) || ((_2292 < _2297) || (_2292 > _2299))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2294, cbModelParam._m0[9u].z, fma(_2293, cbModelParam._m0[9u].y, _2292 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2294, cbModelParam._m0[10u].z, fma(_2293, cbModelParam._m0[10u].y, _2292 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2294, cbModelParam._m0[11u].z, fma(_2293, cbModelParam._m0[11u].y, _2292 * cbModelParam._m0[11u].x))), _1728);
            frontier_phi_13_35_ladder = _2439.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2439.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2439.x * cbModelParam._m0[1u].y;
        }
        _1808 = frontier_phi_13_35_ladder_2;
        _1810 = frontier_phi_13_35_ladder_1;
        _1812 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_919, _920, _921), _1728);
        _1808 = _1796.x * cbModelParam._m0[1u].y;
        _1810 = _1796.y * cbModelParam._m0[1u].y;
        _1812 = _1796.z * cbModelParam._m0[1u].y;
    }
    float _1816 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _764);
    float _1817 = isnan(_1816) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1816 : min(cbModelParam._m0[25u].w, _1816));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1870 = fma(_979, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _971)) + cbModelParam._m0[21u].w;
        float _1874 = fma(_979, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _971)) + cbModelParam._m0[22u].w;
        float _1878 = fma(_979, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _971)) + cbModelParam._m0[23u].w;
        float _1881 = fma(_921, cbModelParam._m0[21u].z, fma(_920, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919));
        float _1884 = fma(_921, cbModelParam._m0[22u].z, fma(_920, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919));
        float _1887 = fma(_921, cbModelParam._m0[23u].z, fma(_920, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919));
        float _1994;
        if (_1881 > 0.0)
        {
            _1994 = abs((1.0 - _1870) / _1881);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1870 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1994 = frontier_phi_25_21_ladder;
        }
        float _2312;
        if (_1884 > 0.0)
        {
            _2312 = abs((1.0 - _1874) / _1884);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1874 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2312 = frontier_phi_37_32_ladder;
        }
        float _2639;
        if (_1887 > 0.0)
        {
            _2639 = abs((1.0 - _1878) / _1887);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1878 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2639 = frontier_phi_47_44_ladder;
        }
        float _2641 = isnan(_2312) ? _1994 : (isnan(_1994) ? _2312 : min(_1994, _2312));
        float _2642 = isnan(_2639) ? _2641 : (isnan(_2641) ? _2639 : min(_2641, _2639));
        float _2646 = (_2642 * _1881) + _1870;
        float _2647 = (_2642 * _1884) + _1874;
        float _2648 = (_2642 * _1887) + _1878;
        float _2649 = _2642 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2649;
        float _2652 = _2649 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2648 > _2652) || ((_2648 < _2650) || ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 < _2650) || (_2646 > _2652))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2648, cbModelParam._m0[17u].z, fma(_2647, cbModelParam._m0[17u].y, _2646 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2648, cbModelParam._m0[18u].z, fma(_2647, cbModelParam._m0[18u].y, _2646 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2648, cbModelParam._m0[19u].z, fma(_2647, cbModelParam._m0[19u].y, _2646 * cbModelParam._m0[19u].x))), _1817);
            frontier_phi_22_47_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1906 = frontier_phi_22_47_ladder_2;
        _1908 = frontier_phi_22_47_ladder_1;
        _1910 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1890 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_919, _920, _921), _1817);
        _1906 = _1890.x * cbModelParam._m0[1u].z;
        _1908 = _1890.y * cbModelParam._m0[1u].z;
        _1910 = _1890.z * cbModelParam._m0[1u].z;
    }
    float _1922 = ((((1.0 - _939) * ((_927 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_939 * _927)) * _911;
    float _1923 = _1922 * ((cbModelParam._m0[1u].w * (_1906 - _1808)) + _1808);
    float _1924 = _1922 * ((cbModelParam._m0[1u].w * (_1908 - _1810)) + _1810);
    float _1925 = _1922 * ((cbModelParam._m0[1u].w * (_1910 - _1812)) + _1812);
    float _1928 = fma(_1925, cbSceneParam._m0[89u].z, fma(_1924, cbSceneParam._m0[89u].y, _1923 * cbSceneParam._m0[89u].x));
    float _1931 = fma(_1925, cbSceneParam._m0[90u].z, fma(_1924, cbSceneParam._m0[90u].y, _1923 * cbSceneParam._m0[90u].x));
    float _1934 = fma(_1925, cbSceneParam._m0[91u].z, fma(_1924, cbSceneParam._m0[91u].y, _1923 * cbSceneParam._m0[91u].x));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1981 = _1968 / _1980;
    float _1982 = _1972 / _1980;
    float _1983 = _1976 / _1980;
    float _2130;
    float _2131;
    float _2132;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2010 = ((uint(_1983 > cbSceneParam._m0[59u].y) + uint(_1983 > cbSceneParam._m0[59u].x)) + uint(_1983 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2011 = _2010 + 43u;
        uint _2019 = _2010 + 44u;
        uint _2027 = _2010 + 45u;
        uint _2035 = _2010 + 46u;
        float _2046 = fma(_1980, cbSceneParam._m0[_2011].w, fma(_1976, cbSceneParam._m0[_2011].z, fma(_1972, cbSceneParam._m0[_2011].y, _1968 * cbSceneParam._m0[_2011].x)));
        float _2050 = fma(_1980, cbSceneParam._m0[_2019].w, fma(_1976, cbSceneParam._m0[_2019].z, fma(_1972, cbSceneParam._m0[_2019].y, _1968 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1980, cbSceneParam._m0[_2035].w, fma(_1976, cbSceneParam._m0[_2035].z, fma(_1972, cbSceneParam._m0[_2035].y, _1968 * cbSceneParam._m0[_2035].x)));
        float _2063 = cbSceneParam._m0[33u].z * _2058;
        float _2065 = cbSceneParam._m0[33u].w * _2058;
        float _2068 = fma(_1980, cbSceneParam._m0[_2027].w, fma(_1976, cbSceneParam._m0[_2027].z, fma(_1972, cbSceneParam._m0[_2027].y, _1968 * cbSceneParam._m0[_2027].x))) / _2058;
        float _2116 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2123 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2063 + _2046) / _2058, (_2065 + _2050) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 + _2046) / _2058, (_2050 - _2063) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2063) / _2058, (_2050 - _2065) / _2058), _2068), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 - _2065) / _2058, (_2063 + _2050) / _2058), _2068), 0.0)).x), vec4(0.25)));
        _2130 = 1.0 - (_2123 * cbSceneParam._m0[34u].x);
        _2131 = 1.0 - (_2123 * cbSceneParam._m0[34u].y);
        _2132 = 1.0 - (_2123 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2130 = 1.0;
        _2131 = 1.0;
        _2132 = 1.0;
    }
    float _2196;
    float _2198;
    float _2200;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2184 = fma(_1980, cbSceneParam._m0[63u].w, fma(_1976, cbSceneParam._m0[63u].z, fma(_1972, cbSceneParam._m0[63u].y, _1968 * cbSceneParam._m0[63u].x)));
        float _2185 = fma(_1980, cbSceneParam._m0[60u].w, fma(_1976, cbSceneParam._m0[60u].z, fma(_1972, cbSceneParam._m0[60u].y, _1968 * cbSceneParam._m0[60u].x))) / _2184;
        float _2186 = fma(_1980, cbSceneParam._m0[61u].w, fma(_1976, cbSceneParam._m0[61u].z, fma(_1972, cbSceneParam._m0[61u].y, _1968 * cbSceneParam._m0[61u].x))) / _2184;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2185 >= cbSceneParam._m0[64u].x) && (_2186 >= cbSceneParam._m0[64u].y)) && (_2185 <= cbSceneParam._m0[64u].z)) && (_2186 <= cbSceneParam._m0[64u].w))
        {
            float _2325 = fma(_1980, cbSceneParam._m0[62u].w, fma(_1976, cbSceneParam._m0[62u].z, fma(_1972, cbSceneParam._m0[62u].y, _1968 * cbSceneParam._m0[62u].x))) / _2184;
            float _2329 = isnan(cbSceneParam._m0[41u].w) ? _2325 : (isnan(_2325) ? cbSceneParam._m0[41u].w : max(_2325, cbSceneParam._m0[41u].w));
            float _2372 = (cbSceneParam._m0[33u].x - sqrt(((_1982 * _1982) + (_1981 * _1981)) + (_1983 * _1983))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
            float _2379 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2185, cbSceneParam._m0[33u].w + _2186), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2185, _2186 - cbSceneParam._m0[33u].z), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].z, _2186 - cbSceneParam._m0[33u].w), _2329), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2185 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2186), _2329), 0.0)).x), vec4(0.25)));
            float _2383 = 1.0 - (_2379 * cbSceneParam._m0[34u].x);
            float _2384 = 1.0 - (_2379 * cbSceneParam._m0[34u].y);
            float _2385 = 1.0 - (_2379 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2385) ? _2132 : (isnan(_2132) ? _2385 : min(_2132, _2385));
            frontier_phi_34_33_ladder_1 = isnan(_2384) ? _2131 : (isnan(_2131) ? _2384 : min(_2131, _2384));
            frontier_phi_34_33_ladder_2 = isnan(_2383) ? _2130 : (isnan(_2130) ? _2383 : min(_2130, _2383));
        }
        else
        {
            frontier_phi_34_33_ladder = _2132;
            frontier_phi_34_33_ladder_1 = _2131;
            frontier_phi_34_33_ladder_2 = _2130;
        }
        _2196 = frontier_phi_34_33_ladder_2;
        _2198 = frontier_phi_34_33_ladder_1;
        _2200 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2196 = _2130;
        _2198 = _2131;
        _2200 = _2132;
    }
    uvec4 _2205 = floatBitsToUint(cbInstanceData._m0[_886 + 5u]);
    uint _2207 = _2205.x * 14u;
    uint _2208 = _2207 + 13u;
    float _2215 = _911 + (-1.0);
    float _2220 = (cbLight._m0[_2208].x * _2215) + 1.0;
    float _2221 = (cbLight._m0[_2208].y * _2215) + 1.0;
    float _2222 = (cbLight._m0[_2208].z * _2215) + 1.0;
    float _2223 = (cbLight._m0[_2208].w * _2215) + 1.0;
    uint _2224 = _2207 + 5u;
    float _2230 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
    uint _2234 = _2207 + 4u;
    float _2244 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2248 = _2207 | 1u;
    float _2259 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_761, _762, _763));
    float _2262 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_761, _762, _763));
    float _4500 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _4511 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2267 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2269 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2276 = ((cbLight._m0[_2224].x * _2230) * _2269) + (((cbLight._m0[_2234].x * _2196) * _2244) * _2267);
    float _2277 = ((_2230 * cbLight._m0[_2224].y) * _2269) + (((cbLight._m0[_2234].y * _2198) * _2244) * _2267);
    float _2278 = ((_2230 * cbLight._m0[_2224].z) * _2269) + (((cbLight._m0[_2234].z * _2200) * _2244) * _2267);
    uvec4 _2282 = floatBitsToUint(cbLight._m0[_2207 + 12u]);
    bool _2284 = _2282.x == 0u;
    float _2386;
    float _2388;
    float _2390;
    if (_2284)
    {
        _2386 = _2276;
        _2388 = _2277;
        _2390 = _2278;
    }
    else
    {
        uint _2394 = _2207 + 6u;
        float _2410 = (dot(vec3(cbLight._m0[_2207 + 2u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2411 = _2410 * _2410;
        float _4522 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2412 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2413 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2386 = (((cbLight._m0[_2394].x * 0.3183098733425140380859375) * _2412) * _2413) + _2276;
        _2388 = (((cbLight._m0[_2394].y * 0.3183098733425140380859375) * _2412) * _2413) + _2277;
        _2390 = (((cbLight._m0[_2394].z * 0.3183098733425140380859375) * _2412) * _2413) + _2278;
    }
    bool _2393 = _2282.y == 0u;
    float _2448;
    float _2450;
    float _2452;
    if (_2393)
    {
        _2448 = _2386;
        _2450 = _2388;
        _2452 = _2390;
    }
    else
    {
        uint _2610 = _2207 + 7u;
        float _2626 = (dot(vec3(cbLight._m0[_2207 + 3u].xyz), vec3(_761, _762, _763)) * 0.5) + 0.5;
        float _2627 = _2626 * _2626;
        float _4538 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2628 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2629 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2448 = (((cbLight._m0[_2610].x * 0.3183098733425140380859375) * _2628) * _2629) + _2386;
        _2450 = (((cbLight._m0[_2610].y * 0.3183098733425140380859375) * _2628) * _2629) + _2388;
        _2452 = (((cbLight._m0[_2610].z * 0.3183098733425140380859375) * _2628) * _2629) + _2390;
    }
    uint _2455 = _2207 + 8u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _764) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2207].x + _840;
    float _2471 = cbLight._m0[_2207].y + _841;
    float _2472 = cbLight._m0[_2207].z + _842;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2207].xyz));
    float _4554 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _2484 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2485 = dot(vec3(_761, _762, _763), vec3(_2477, _2478, _2479));
    float _4576 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2489 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2477, _2478, _2479));
    float _4587 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2493 = _2469 * _2469;
    float _2497 = ((_2488 * _2488) * (_2493 + (-1.0))) + 1.0;
    float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2509 = 1.0 - _2469;
    float _2520 = (0.5 / (((_2484 * ((_2483 * _2509) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2509) + _2469) * _2483))) * _2483;
    float _4598 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2493 / ((_2497 * _2497) * 3.141590118408203125));
    uint _2536 = _2207 + 9u;
    float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2248].w)) * _764) * 0.949999988079071044921875);
    float _2548 = _2547 * _2547;
    float _2549 = cbLight._m0[_2248].x + _840;
    float _2550 = cbLight._m0[_2248].y + _841;
    float _2551 = cbLight._m0[_2248].z + _842;
    float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
    float _2556 = _2555 * _2549;
    float _2557 = _2555 * _2550;
    float _2558 = _2555 * _2551;
    float _2559 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2248].xyz));
    float _4609 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2562 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2563 = dot(vec3(_761, _762, _763), vec3(_2556, _2557, _2558));
    float _4620 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2248].xyz), vec3(_2556, _2557, _2558));
    float _4631 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2548 * _2548;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2584 = (exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2585 = 1.0 - _2548;
    float _2595 = (0.5 / (((_2484 * ((_2562 * _2585) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2585) + _2548) * _2562))) * _2562;
    float _4642 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2597 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    float _2607 = (((_2584 * cbLight._m0[_2536].x) * _2597) * _2230) + ((((cbLight._m0[_2455].x * _2196) * _2508) * _2522) * _2244);
    float _2608 = (((_2584 * cbLight._m0[_2536].y) * _2597) * _2230) + ((((cbLight._m0[_2455].y * _2198) * _2508) * _2522) * _2244);
    float _2609 = (((_2584 * cbLight._m0[_2536].z) * _2597) * _2230) + ((((cbLight._m0[_2455].z * _2200) * _2508) * _2522) * _2244);
    float _2665;
    float _2667;
    float _2669;
    if (_2284)
    {
        _2665 = _2607;
        _2667 = _2608;
        _2669 = _2609;
    }
    else
    {
        uint _2671 = _2207 + 2u;
        uint _2675 = _2207 + 10u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _764) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _840;
        float _2692 = cbLight._m0[_2671].y + _841;
        float _2693 = cbLight._m0[_2671].z + _842;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2671].xyz));
        float _4653 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2705 = dot(vec3(_761, _762, _763), vec3(_2698, _2699, _2700));
        float _4664 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4675 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2726 = (exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2727 = 1.0 - _2690;
        float _2737 = (0.5 / (((_2484 * ((_2704 * _2727) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2727) + _2690) * _2704))) * _2704;
        float _4686 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2665 = (((_2726 * cbLight._m0[_2675].x) * _2739) * _2740) + _2607;
        _2667 = (((_2726 * cbLight._m0[_2675].y) * _2739) * _2740) + _2608;
        _2669 = (((_2726 * cbLight._m0[_2675].z) * _2739) * _2740) + _2609;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2393)
    {
        _2771 = _2665;
        _2773 = _2667;
        _2775 = _2669;
    }
    else
    {
        uint _2782 = _2207 + 3u;
        uint _2786 = _2207 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _764) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _840;
        float _2803 = cbLight._m0[_2782].y + _841;
        float _2804 = cbLight._m0[_2782].z + _842;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_761, _762, _763), vec3(cbLight._m0[_2782].xyz));
        float _4702 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2816 = dot(vec3(_761, _762, _763), vec3(_2809, _2810, _2811));
        float _4713 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4724 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2837 = (exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2838 = 1.0 - _2801;
        float _2848 = (0.5 / (((_2484 * ((_2815 * _2838) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2484 * _2838) + _2801) * _2815))) * _2815;
        float _4735 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
        float _2850 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2851 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
        _2771 = (((_2837 * cbLight._m0[_2786].x) * _2850) * _2851) + _2665;
        _2773 = (((_2837 * cbLight._m0[_2786].y) * _2850) * _2851) + _2667;
        _2775 = (((_2837 * cbLight._m0[_2786].z) * _2850) * _2851) + _2669;
    }
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    if (_2205.y == 0u)
    {
        uvec4 _2872 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2873 = _2872.x;
        uint _2884 = uint((float(_2872.y) * floor(float(uint(cbSceneParam._m0[85u].y * _849) / _2873))) + floor(float(uint(cbSceneParam._m0[85u].x * _848) / _2873)));
        float _2894 = (log2(_1983 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2895 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
        uint _2898 = uint(isnan(14.0) ? _2895 : (isnan(_2895) ? 14.0 : min(_2895, 14.0)));
        uvec4 _2903 = texelFetch(g_lightClusterGridBuffer, int(((_2898 << 2u) + (_2884 << 6u)) >> 2u));
        uint _2904 = _2903.x;
        uint _2905 = _2872.z;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        if (((((1u << ((_2905 >> 4u) & 15u)) + 4294967295u) & _2904) == 0u) || ((_2905 & 240u) == 0u))
        {
            _3029 = 0.0;
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
        }
        else
        {
            float _3030;
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3182 = 0.0;
            float _3183 = 0.0;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            uint _3188 = 0u;
            uint _3197;
            bool _3198;
            for (;;)
            {
                _3197 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3188 << 2u)) >> 2u)).x;
                _3198 = _3197 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3198)
                {
                    frontier_phi_66_pred = _3187;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                else
                {
                    float _3306;
                    float _3307;
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    uint _3312;
                    _3306 = _3182;
                    _3307 = _3183;
                    _3308 = _3184;
                    _3309 = _3185;
                    _3310 = _3186;
                    _3311 = _3187;
                    _3312 = _3197;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    float _3243;
                    for (;;)
                    {
                        uint _3316 = uint(findLSB(_3312)) + (_3188 << 5u);
                        uint _3313 = (_3312 + 4294967295u) & _3312;
                        uint _3318 = _3316 * 48u;
                        vec4 _3332 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3338 = (_3316 * 48u) + 4u;
                        vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3338)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3338 + 3u)).x));
                        uint _3357 = (_3316 * 48u) + 8u;
                        vec3 _3368 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3357)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3357 + 2u)).x));
                        float _3372 = _3332.x - _1981;
                        float _3373 = _3332.y - _1982;
                        float _3374 = _3332.z - _1983;
                        float _3375 = dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374));
                        float _3378 = inversesqrt(_3375);
                        float _3379 = _3378 * _3372;
                        float _3380 = _3378 * _3373;
                        float _3381 = _3378 * _3374;
                        float _3382 = dot(vec3(_867, _870, _873), vec3(_3379, _3380, _3381));
                        float _3387 = 1.0 - (_3375 * _3332.w);
                        float _4761 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                        float _3388 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3389 = sqrt(_3375) * _3351.w;
                        float _3392 = 1.39999997615814208984375 / (_3389 + 1.39999997615814208984375);
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3382) + _3393;
                        float _3399 = _3389 * _3389;
                        float _3403 = ((isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0))) * _3388) / ((_3399 * 0.699999988079071044921875) + 1.0);
                        float _3407 = (-0.0) - _1981;
                        float _3408 = (-0.0) - _1982;
                        float _3409 = (-0.0) - _1983;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3423 = exp2(log2(1.0 / ((_3399 * 3.5) + 5.0)) * 0.25);
                        float _3424 = 1.0 - _927;
                        float _3431 = sqrt(1.0 - ((1.0 - (_3424 * _3424)) * (1.0 - (_3423 * _3423))));
                        float _3432 = _3431 * _3431;
                        float _3433 = _3432 * _3432;
                        float _3434 = _3414 + _3379;
                        float _3435 = _3415 + _3380;
                        float _3436 = _3416 + _3381;
                        float _3440 = inversesqrt(dot(vec3(_3434, _3435, _3436), vec3(_3434, _3435, _3436)));
                        float _3444 = dot(vec3(_867, _870, _873), vec3(_3414, _3415, _3416));
                        float _4777 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3447 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3448 = dot(vec3(_867, _870, _873), vec3(_3440 * _3434, _3440 * _3435, _3440 * _3436));
                        float _4788 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3455 = ((_3451 * _3451) * (_3433 + (-1.0))) + 1.0;
                        float _3456 = _3392 * _3432;
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3382) + _3457;
                        float _4799 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3461 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3462 = 1.0 - _3432;
                        float _3472 = (0.5 / (((_3461 * ((_3447 * _3462) + _3432)) + 9.9999999392252902907785028219223e-09) + (((_3461 * _3462) + _3432) * _3447))) * _3461;
                        float _4810 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3483 = (((_3433 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3455 * _3455) * ((_3399 * 2.1991131305694580078125) + 3.141590118408203125))) * _3388;
                        _3241 = (_3403 * _3351.x) + _3309;
                        _3242 = (_3403 * _3351.y) + _3310;
                        _3243 = (_3403 * _3351.z) + _3311;
                        _3238 = (_3483 * _3368.x) + _3306;
                        _3239 = (_3483 * _3368.y) + _3307;
                        _3240 = (_3483 * _3368.z) + _3308;
                        if (_3313 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3306 = _3238;
                            _3307 = _3239;
                            _3308 = _3240;
                            _3309 = _3241;
                            _3310 = _3242;
                            _3311 = _3243;
                            _3312 = _3313;
                        }
                    }
                    frontier_phi_66_pred = _3243;
                    frontier_phi_66_pred_1 = _3242;
                    frontier_phi_66_pred_2 = _3241;
                    frontier_phi_66_pred_3 = _3240;
                    frontier_phi_66_pred_4 = _3239;
                    frontier_phi_66_pred_5 = _3238;
                }
                _3040 = frontier_phi_66_pred;
                _3038 = frontier_phi_66_pred_1;
                _3036 = frontier_phi_66_pred_2;
                _3034 = frontier_phi_66_pred_3;
                _3032 = frontier_phi_66_pred_4;
                _3030 = frontier_phi_66_pred_5;
                uint _3189 = _3188 + 1u;
                if (_3189 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3182 = _3030;
                    _3183 = _3032;
                    _3184 = _3034;
                    _3185 = _3036;
                    _3186 = _3038;
                    _3187 = _3040;
                    _3188 = _3189;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3029 = _3030;
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
        }
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.z;
        uint _3046 = (_3044 >> 8u) & 15u;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        if (((4294967295u << _3046) & _2904) == 0u)
        {
            _3150 = _3029;
            _3152 = _3031;
            _3154 = _3033;
            _3156 = _3035;
            _3158 = _3037;
            _3160 = _3039;
        }
        else
        {
            float _3175 = inversesqrt(dot(vec3(_1981, _1982, _1983), vec3(_1981, _1982, _1983)));
            float _3176 = _3175 * _1981;
            float _3177 = _3175 * _1982;
            float _3178 = _3175 * _1983;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3046 < ((_3044 >> 12u) & 15u))
            {
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3289 = _3029;
                float _3290 = _3031;
                float _3291 = _3033;
                float _3292 = _3035;
                float _3293 = _3037;
                float _3294 = _3039;
                uint _3295 = _3046;
                uint _3304;
                bool _3305;
                for (;;)
                {
                    _3304 = texelFetch(g_lightClassification, int((((_2898 << 5u) + (_2884 << 9u)) + (_3295 << 2u)) >> 2u)).x;
                    _3305 = _3304 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3305)
                    {
                        frontier_phi_72_pred = _3294;
                        frontier_phi_72_pred_1 = _3293;
                        frontier_phi_72_pred_2 = _3292;
                        frontier_phi_72_pred_3 = _3291;
                        frontier_phi_72_pred_4 = _3290;
                        frontier_phi_72_pred_5 = _3289;
                    }
                    else
                    {
                        float _3488;
                        float _3489;
                        float _3490;
                        float _3491;
                        float _3492;
                        float _3493;
                        float _3782;
                        float _3783;
                        float _3784;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3501 = _3289;
                        float _3502 = _3290;
                        float _3503 = _3291;
                        float _3504 = _3292;
                        float _3505 = _3293;
                        float _3506 = _3294;
                        uint _3507 = _3304;
                        uint _3508;
                        vec4 _3533;
                        float _3534;
                        vec4 _3549;
                        vec3 _3561;
                        vec4 _3576;
                        vec4 _3591;
                        float _3638;
                        bool _3639;
                        for (;;)
                        {
                            uint _3518 = ((_3295 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3507));
                            _3508 = (_3507 + 4294967295u) & _3507;
                            uint _3520 = _3518 * 40u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            _3534 = _3533.w;
                            uint _3536 = (_3518 * 40u) + 4u;
                            _3549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 3u)).x));
                            uint _3551 = (_3518 * 40u) + 8u;
                            _3561 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x));
                            uint _3563 = (_3518 * 40u) + 16u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3518 * 40u) + 20u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3594 = (_3518 * 40u) + 24u;
                            vec4 _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3613 = (_3518 * 40u) + 28u;
                            vec4 _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            _3638 = fma(_1983, _3626.z, fma(_1982, _3626.y, _3626.x * _1981)) + _3626.w;
                            _3639 = !((fma(_1983, _3607.z, fma(_1982, _3607.y, _3607.x * _1981)) + _3607.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3639)
                            {
                                float _3666 = _3533.x - _1981;
                                float _3667 = _3533.y - _1982;
                                float _3668 = _3533.z - _1983;
                                float _3669 = dot(vec3(_3666, _3667, _3668), vec3(_3666, _3667, _3668));
                                float _3672 = inversesqrt(_3669);
                                float _3673 = _3672 * _3666;
                                float _3674 = _3672 * _3667;
                                float _3675 = _3672 * _3668;
                                float _3679 = 1.0 - (_3669 / (_3534 * _3534));
                                float _4821 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3684 = sqrt(_3669) * _3549.w;
                                float _3686 = 1.39999997615814208984375 / (_3684 + 1.39999997615814208984375);
                                float _3687 = _3686 * _3686;
                                float _3690 = ((1.0 - _3687) * dot(vec3(_3673, _3674, _3675), vec3(_867, _870, _873))) + _3687;
                                float _3693 = _3684 * _3684;
                                float _3697 = (fma(_1983, _3576.z, fma(_1982, _3576.y, _3576.x * _1981)) + _3576.w) / _3638;
                                float _3698 = (fma(_1983, _3591.z, fma(_1982, _3591.y, _3591.x * _1981)) + _3591.w) / _3638;
                                float _3702 = 1.0 - dot(vec2(_3697, _3698), vec2(_3697, _3698));
                                float _4837 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3704 = _3703 * (((isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0))) * _3680) / ((_3693 * 0.699999988079071044921875) + 1.0));
                                float _3716 = exp2(log2(1.0 / ((_3693 * 3.5) + 5.0)) * 0.25);
                                float _3717 = 1.0 - _927;
                                float _3724 = sqrt(1.0 - ((1.0 - (_3717 * _3717)) * (1.0 - (_3716 * _3716))));
                                float _3725 = _3724 * _3724;
                                float _3726 = _3725 * _3725;
                                float _3727 = _3673 - _3176;
                                float _3728 = _3674 - _3177;
                                float _3729 = _3675 - _3178;
                                float _3733 = inversesqrt(dot(vec3(_3727, _3728, _3729), vec3(_3727, _3728, _3729)));
                                float _3737 = dot(vec3(_867, _870, _873), vec3((-0.0) - _3176, (-0.0) - _3177, (-0.0) - _3178));
                                float _4848 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3740 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3741 = dot(vec3(_867, _870, _873), vec3(_3733 * _3727, _3733 * _3728, _3733 * _3729));
                                float _4859 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3744 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3748 = ((_3744 * _3744) * (_3726 + (-1.0))) + 1.0;
                                float _3749 = _3686 * _3725;
                                float _3750 = _3749 * _3749;
                                float _3756 = ((1.0 - _3750) * dot(vec3(_867, _870, _873), vec3(_3673, _3674, _3675))) + _3750;
                                float _4870 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                                float _3757 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3758 = 1.0 - _3725;
                                float _3768 = (0.5 / (((_3757 * ((_3740 * _3758) + _3725)) + 9.9999999392252902907785028219223e-09) + (((_3757 * _3758) + _3725) * _3740))) * _3757;
                                float _4881 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3778 = (_3703 * _3680) * (((_3726 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3748 * _3748) * ((_3693 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3704 * _3549.y;
                                frontier_phi_78_pred_1 = _3704 * _3549.x;
                                frontier_phi_78_pred_2 = _3778 * _3561.z;
                                frontier_phi_78_pred_3 = _3778 * _3561.y;
                                frontier_phi_78_pred_4 = _3778 * _3561.x;
                                frontier_phi_78_pred_5 = _3704 * _3549.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3786 = frontier_phi_78_pred;
                            _3785 = frontier_phi_78_pred_1;
                            _3784 = frontier_phi_78_pred_2;
                            _3783 = frontier_phi_78_pred_3;
                            _3782 = frontier_phi_78_pred_4;
                            _3787 = frontier_phi_78_pred_5;
                            _3491 = _3785 + _3504;
                            _3492 = _3786 + _3505;
                            _3493 = _3787 + _3506;
                            _3488 = _3782 + _3501;
                            _3489 = _3783 + _3502;
                            _3490 = _3784 + _3503;
                            if (_3508 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3490;
                                _3504 = _3491;
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3508;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3493;
                        frontier_phi_72_pred_1 = _3492;
                        frontier_phi_72_pred_2 = _3491;
                        frontier_phi_72_pred_3 = _3490;
                        frontier_phi_72_pred_4 = _3489;
                        frontier_phi_72_pred_5 = _3488;
                    }
                    _3161 = frontier_phi_72_pred;
                    _3159 = frontier_phi_72_pred_1;
                    _3157 = frontier_phi_72_pred_2;
                    _3155 = frontier_phi_72_pred_3;
                    _3153 = frontier_phi_72_pred_4;
                    _3151 = frontier_phi_72_pred_5;
                    uint _3296 = _3295 + 1u;
                    if (_3296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3289 = _3151;
                        _3290 = _3153;
                        _3291 = _3155;
                        _3292 = _3157;
                        _3293 = _3159;
                        _3294 = _3161;
                        _3295 = _3296;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3161;
                frontier_phi_60_61_ladder_1 = _3159;
                frontier_phi_60_61_ladder_2 = _3155;
                frontier_phi_60_61_ladder_3 = _3153;
                frontier_phi_60_61_ladder_4 = _3151;
                frontier_phi_60_61_ladder_5 = _3157;
            }
            else
            {
                frontier_phi_60_61_ladder = _3039;
                frontier_phi_60_61_ladder_1 = _3037;
                frontier_phi_60_61_ladder_2 = _3033;
                frontier_phi_60_61_ladder_3 = _3031;
                frontier_phi_60_61_ladder_4 = _3029;
                frontier_phi_60_61_ladder_5 = _3035;
            }
            _3150 = frontier_phi_60_61_ladder_4;
            _3152 = frontier_phi_60_61_ladder_3;
            _3154 = frontier_phi_60_61_ladder_2;
            _3156 = frontier_phi_60_61_ladder_5;
            _3158 = frontier_phi_60_61_ladder_1;
            _3160 = frontier_phi_60_61_ladder;
        }
        float _3165 = isnan(1.0) ? _911 : (isnan(_911) ? 1.0 : min(_911, 1.0));
        _2917 = (_3165 * _3156) + _2448;
        _2919 = (_3165 * _3158) + _2450;
        _2921 = (_3165 * _3160) + _2452;
        _2923 = ((_3150 * 0.039999999105930328369140625) * _3165) + _2771;
        _2925 = ((_3152 * 0.039999999105930328369140625) * _3165) + _2773;
        _2927 = ((_3154 * 0.039999999105930328369140625) * _3165) + _2775;
    }
    else
    {
        _2917 = _2448;
        _2919 = _2450;
        _2921 = _2452;
        _2923 = _2771;
        _2925 = _2773;
        _2927 = _2775;
    }
    uint _2933 = _887 + uint(cbMatDynParam._m0[0u].w);
    float _2939 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2945 = (((((_2939 * cbMtdParam._m0[14u].x) * _621.x) * _644) * _723) * (((1.0 - _697) * cbMtdParam._m0[20u].w) + _697)) * cbInstanceData._m0[_2933].x;
    float _2951 = (((((_2939 * cbMtdParam._m0[14u].y) * _621.y) * _644) * _723) * (((1.0 - _699) * cbMtdParam._m0[20u].w) + _699)) * cbInstanceData._m0[_2933].y;
    float _2957 = (((((_2939 * cbMtdParam._m0[14u].z) * _621.z) * _644) * _723) * (((1.0 - _701) * cbMtdParam._m0[20u].w) + _701)) * cbInstanceData._m0[_2933].z;
    float _4897 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4908 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4919 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _2974 = (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2917 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _911))) + ((_2923 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + _2945;
    float _2976 = (_2951 + ((_2925 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2919 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _911)));
    float _2978 = (_2957 + ((_2927 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1717)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2921 + ((isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0))) * _911)));
    float _4945 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2991 = isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0));
    uint _2992 = _886 + 6u;
    float _3000 = _848 / cbSceneParam._m0[86u].x;
    float _3001 = _849 / cbSceneParam._m0[86u].y;
    vec4 _3015 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3017 = _3015.x;
    float _3018 = _3015.y;
    float _3019 = _3015.z;
    float _3020 = _3015.w;
    float _3091;
    float _3093;
    float _3095;
    float _3097;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3054 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3055 = _3054 / _783;
        float _3066 = _3055 * _833;
        float _3067 = _834 * _3055;
        float _3068 = (-0.0) - _3067;
        float _3069 = _3055 * _835;
        float _3071 = (cbSceneParam._m0[77u].w * _3068) / _3054;
        float _3072 = _3071 + cbSceneParam._m0[79u].w;
        float _3073 = cbSceneParam._m0[79u].w - _3067;
        float _3079 = sqrt(((_3066 * _3066) + (_3067 * _3067)) + (_3069 * _3069));
        float _3082 = (1.0 - (cbSceneParam._m0[77u].w / _3054)) * _3079;
        float _3087 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3089 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3251;
        if (abs((_3068 - _3071) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3251 = ((((_3072 > 0.0) ? exp2(_3087 * _3072) : (2.0 - exp2(_3089 * _3072))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3082;
        }
        else
        {
            float _3211 = 1.0 / cbSceneParam._m0[80u].x;
            float _3212 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : max(_3072, _3073));
            float _3213 = isnan(_3073) ? _3072 : (isnan(_3072) ? _3073 : min(_3072, _3073));
            float _3222 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : min(_3212, 0.0));
            float _3223 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : min(_3213, 0.0));
            _3251 = ((abs(_3079 / _3068) * cbSceneParam._m0[80u].y) * ((((_3222 - _3223) * 2.0) - ((exp2(_3087 * (isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0)))) - exp2(_3087 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))))) * _3211)) - ((exp2(_3089 * _3222) - exp2(_3089 * _3223)) * _3211))) + (_3082 * cbSceneParam._m0[80u].z);
        }
        vec4 _3253 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3000, _3001, 1.0), 0.0);
        float _3262 = exp2((_3251 * (-1.44269502162933349609375)) * (1.0 - _3253.w));
        float _3263 = log2(_3262);
        float _3279 = log2(_3020);
        _3091 = (exp2(_3279 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].x)) * _3253.x) / cbSceneParam._m0[78u].x)) + _3017;
        _3093 = (exp2(_3279 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].y)) * _3253.y) / cbSceneParam._m0[78u].y)) + _3018;
        _3095 = (exp2(_3279 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3263 * cbSceneParam._m0[78u].z)) * _3253.z) / cbSceneParam._m0[78u].z)) + _3019;
        _3097 = _3262 * _3020;
    }
    else
    {
        _3091 = _3017;
        _3093 = _3018;
        _3095 = _3019;
        _3097 = _3020;
    }
    float _3109 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3110 = _3109 == 3.0;
    float _3111 = log2(_3097);
    float _3115 = exp2(_3111 * cbSceneParam._m0[78u].x);
    float _3116 = exp2(_3111 * cbSceneParam._m0[78u].y);
    float _3117 = exp2(_3111 * cbSceneParam._m0[78u].z);
    float _3118 = _3115 * (isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0)));
    float _3119 = _3116 * (isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0)));
    float _3120 = _3117 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0)));
    float _3129 = (_3109 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3129 * (_3110 ? _3118 : (_3118 + (cbSceneParam._m0[72u].w * _3091)));
    SV_Target.y = _3129 * (_3110 ? _3119 : (_3119 + (cbSceneParam._m0[72u].w * _3093)));
    SV_Target.z = _3129 * (_3110 ? _3120 : (_3120 + (cbSceneParam._m0[72u].w * _3095)));
    SV_Target.w = cbInstanceData._m0[_2992].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2945) * _2991) * _3115) * _3129;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2951) * _2991) * _3116) * _3129;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2957) * _2991) * _3117) * _3129;
    SV_Target_1.w = cbInstanceData._m0[_2992].w;
}


