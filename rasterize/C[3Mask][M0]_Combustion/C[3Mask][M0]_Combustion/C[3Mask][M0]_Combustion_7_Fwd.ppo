#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1219;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _279 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _298 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _335 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _298.x) * 2.0) - _325)) + 1.0;
    float _3579 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0));
    float _343 = (_336 * ((_279.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _344 = (_336 * ((_279.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _345 = (_336 * ((_279.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _364 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _377 = (((((1.0 - _298.y) * 2.0) - _325) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3590 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
    float _385 = (((_364.x * cbMtdParam._m0[12u].x) - _343) * _378) + _343;
    float _386 = (_378 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _387 = (_378 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _405 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _418 = (((((1.0 - _298.z) * 2.0) - _325) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3601 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
    float _426 = (((_405.x * cbMtdParam._m0[13u].x) - _385) * _419) + _385;
    float _427 = (_419 * ((_405.y * cbMtdParam._m0[13u].y) - _386)) + _386;
    float _428 = (_419 * ((_405.z * cbMtdParam._m0[13u].z) - _387)) + _387;
    vec4 _441 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _455 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _457 = _455.x;
    float _458 = _455.y;
    float _459 = _455.z;
    vec4 _471 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _482 = ((_471.x - _457) * _336) + _457;
    float _483 = ((_471.y - _458) * _336) + _458;
    float _484 = ((_471.z - _459) * _336) + _459;
    vec4 _497 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _508 = ((_497.x - _482) * _378) + _482;
    float _509 = ((_497.y - _483) * _378) + _483;
    float _510 = ((_497.z - _484) * _378) + _484;
    vec4 _523 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _536 = ((_523.z - _510) * _419) + _510;
    float _539 = ((((_523.x - _508) * _419) + _508) * 2.0) + (-1.0);
    float _541 = ((((_523.y - _509) * _419) + _509) * 2.0) + (-1.0);
    float _542 = dot(vec2(_539, _541), vec2(_539, _541));
    float _3612 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _547 = sqrt(1.0 - (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))));
    vec4 _580 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _594 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3623 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _603 = (((_595 * _595) * (3.0 - (_595 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _611 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _619 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3634 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _620 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _624 = (_620 * _620) * (3.0 - (_620 * 2.0));
    float _625 = _624 * cbMtdParam._m0[22u].x;
    float _626 = _624 * cbMtdParam._m0[22u].y;
    float _627 = sin(_611);
    float _628 = cos(_611);
    float _629 = TEXCOORD.z - _625;
    float _630 = TEXCOORD.w - _626;
    vec4 _650 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_625 + fma(_630, (-0.0) - _627, _629 * _628))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_630, _628, _629 * _627) + _626)) + cbTextureTilingScale._m0[2u].w));
    float _656 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _650.x;
    float _658 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _650.y;
    float _660 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _650.z;
    float _681 = (TEXCOORD_5.x - (((_441.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3645 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _682 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _685 = fma(_547, _223 * NORMAL.x, fma(_541, _230 * TANGENT.x, (_216 * _208) * _539));
    float _688 = fma(_547, _223 * NORMAL.y, fma(_541, _230 * TANGENT.y, (_216 * _209) * _539));
    float _691 = fma(_547, _223 * NORMAL.z, fma(_541, _230 * TANGENT.z, (_216 * _210) * _539));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3656 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _699 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _3667 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _3678 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _3689 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _804 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _807 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _810 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _823 = uint(roundEven(NORMAL.w)) * 13u;
    uint _824 = _823 + 9u;
    uint _825 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3700 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    vec4 _845 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _848 = _845.x * TEXCOORD_5.w;
    float _849 = dot(vec3(_696, _697, _698), vec3(_776, _777, _778));
    float _852 = _849 * 2.0;
    float _856 = (_852 * _696) - _776;
    float _857 = (_852 * _697) - _777;
    float _858 = (_852 * _698) - _778;
    float _862 = abs(dot(vec3(_776, _777, _778), vec3(_696, _697, _698)));
    float _3733 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = sqrt(_699);
    float _876 = exp2((_864 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_864 * 3.0));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _916 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1218;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _943 = fma(_916, cbModelParam._m0[26u].z, fma(_912, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _908));
        float _947 = fma(_916, cbModelParam._m0[27u].z, fma(_912, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _908));
        float _951 = fma(_916, cbModelParam._m0[28u].z, fma(_912, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _908));
        float _976 = _908 + _696;
        float _977 = _912 + _697;
        float _978 = _916 + _698;
        float _988 = fma(_978, cbModelParam._m0[26u].z, fma(_977, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _976)) - _943;
        float _989 = fma(_978, cbModelParam._m0[27u].z, fma(_977, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _976)) - _947;
        float _990 = fma(_978, cbModelParam._m0[28u].z, fma(_977, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _976)) - _951;
        float _994 = inversesqrt(dot(vec3(_988, _989, _990), vec3(_988, _989, _990)));
        float _1007 = ((_994 * _988) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_943 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_994 * _989) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_947 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_994 * _990) / cbModelParam._m0[34u].z) + ((((((_951 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1007, _1008, _1009), 0.0);
        float _1046 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1012.x + (-0.5));
        float _1048 = _1046 * (_1012.y + (-0.5));
        float _1049 = _1046 * (_1012.z + (-0.5));
        float _1056 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1019.x + (-0.5));
        float _1058 = _1056 * (_1019.y + (-0.5));
        float _1059 = _1056 * (_1019.z + (-0.5));
        float _1066 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1026.x + (-0.5));
        float _1068 = _1066 * (_1026.y + (-0.5));
        float _1069 = _1066 * (_1026.z + (-0.5));
        float _1076 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1033.x + (-0.5));
        float _1078 = _1076 * (_1033.y + (-0.5));
        float _1079 = _1076 * (_1033.z + (-0.5));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = _1047 * 0.5;
        float _1084 = _1057 * 0.5;
        float _1085 = _1067 * 0.5;
        float _1086 = dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085));
        float _1091 = (_1086 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1086);
        float _1100 = (dot(vec3(_696, _697, _698), vec3(_1091 * _1083, _1091 * _1084, _1091 * _1085)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1110 = sqrt(((_1084 * _1084) + (_1083 * _1083)) + (_1085 * _1085)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3781 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1112 + 1.0))) + _1117) * _1080;
        float _1127 = _1048 * 0.5;
        float _1128 = _1058 * 0.5;
        float _1129 = _1068 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_696, _697, _698), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3814 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1154 + 1.0))) + _1159) * _1081;
        float _1169 = _1049 * 0.5;
        float _1170 = _1059 * 0.5;
        float _1171 = _1069 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_696, _697, _698), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3847 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1196 + 1.0))) + _1201) * _1082;
        _1218 = _1049;
        _1220 = _1048;
        _1221 = _1047;
        _1222 = _1059;
        _1223 = _1058;
        _1224 = _1057;
        _1225 = _1069;
        _1226 = _1068;
        _1227 = _1067;
        _1228 = _1082;
        _1229 = _1081;
        _1230 = _1080;
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1233 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _1219;
        _1220 = _1219;
        _1221 = _1219;
        _1222 = _1219;
        _1223 = _1219;
        _1224 = _1219;
        _1225 = _1219;
        _1226 = _1219;
        _1227 = _1219;
        _1228 = _1219;
        _1229 = _1219;
        _1230 = _1219;
        _1231 = 0.0;
        _1232 = 0.0;
        _1233 = 0.0;
    }
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1259 = fma(_916, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _908));
        float _1263 = fma(_916, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _908));
        float _1267 = fma(_916, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _908));
        float _1290 = _908 + _696;
        float _1291 = _912 + _697;
        float _1292 = _916 + _698;
        float _1302 = fma(_1292, cbModelParam._m0[30u].z, fma(_1291, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1290)) - _1259;
        float _1303 = fma(_1292, cbModelParam._m0[31u].z, fma(_1291, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1290)) - _1263;
        float _1304 = fma(_1292, cbModelParam._m0[32u].z, fma(_1291, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1290)) - _1267;
        float _1308 = inversesqrt(dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304)));
        float _1321 = ((_1308 * _1302) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1259 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1308 * _1303) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1263 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1323 = ((_1308 * _1304) / cbModelParam._m0[35u].z) + ((((((_1267 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1321, _1322, _1323), 0.0);
        float _1358 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1325.x + (-0.5));
        float _1360 = _1358 * (_1325.y + (-0.5));
        float _1361 = _1358 * (_1325.z + (-0.5));
        float _1368 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1332.x + (-0.5));
        float _1370 = _1368 * (_1332.y + (-0.5));
        float _1371 = _1368 * (_1332.z + (-0.5));
        float _1378 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1339.x + (-0.5));
        float _1380 = _1378 * (_1339.y + (-0.5));
        float _1381 = _1378 * (_1339.z + (-0.5));
        float _1388 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1346.x + (-0.5));
        float _1390 = _1388 * (_1346.y + (-0.5));
        float _1391 = _1388 * (_1346.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_696, _697, _698), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3910 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1422 + 1.0))) + _1427) * _1392;
        float _1437 = _1360 * 0.5;
        float _1438 = _1370 * 0.5;
        float _1439 = _1380 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_696, _697, _698), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3943 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1464 + 1.0))) + _1469) * _1393;
        float _1479 = _1361 * 0.5;
        float _1480 = _1371 * 0.5;
        float _1481 = _1381 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_696, _697, _698), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3976 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1506 + 1.0))) + _1511) * _1394;
        _1528 = _1361;
        _1529 = _1360;
        _1530 = _1359;
        _1531 = _1371;
        _1532 = _1370;
        _1533 = _1369;
        _1534 = _1381;
        _1535 = _1380;
        _1536 = _1379;
        _1537 = _1394;
        _1538 = _1393;
        _1539 = _1392;
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1542 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1219;
        _1529 = _1219;
        _1530 = _1219;
        _1531 = _1219;
        _1532 = _1219;
        _1533 = _1219;
        _1534 = _1219;
        _1535 = _1219;
        _1536 = _1219;
        _1537 = _1219;
        _1538 = _1219;
        _1539 = _1219;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1554 = (cbModelParam._m0[1u].x * (_1542 - _1233)) + _1233;
    float _1575 = fma(_1554, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1552 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1554, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1552 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1554, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1552));
    float _1596 = _856 * 0.5;
    float _1597 = _857 * 0.5;
    float _1598 = _858 * 0.5;
    float _1599 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1530, _1533, _1536, _1539));
    float _1602 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1605 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1639;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1612 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1218, _1222, _1225, _1228));
        float _1616 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1620 = dot(vec4(_1596, _1597, _1598, 1.0), vec4(_1221, _1224, _1227, _1230));
        float _1627 = dot(vec4(cbModelParam._m0[39u]), vec4(_1596, _1597, _1598, 1.0));
        _1639 = dot(vec3(isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1627) ? 0.0 : (isnan(0.0) ? _1627 : max(0.0, _1627))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1639 = 1.0;
    }
    float _1650;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1641 = dot(vec4(cbModelParam._m0[40u]), vec4(_1596, _1597, _1598, 1.0));
        _1650 = dot(vec3(isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)), isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1650 = 1.0;
    }
    float _1654 = (_1650 * cbModelParam._m0[1u].x) + (_1639 * (1.0 - cbModelParam._m0[1u].x));
    float _1664 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1665 = isnan(_1664) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1664 : min(cbModelParam._m0[25u].z, _1664));
    float _1745;
    float _1747;
    float _1749;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1712 = fma(_916, cbModelParam._m0[13u].z, fma(_912, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _908)) + cbModelParam._m0[13u].w;
        float _1716 = fma(_916, cbModelParam._m0[14u].z, fma(_912, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _908)) + cbModelParam._m0[14u].w;
        float _1720 = fma(_916, cbModelParam._m0[15u].z, fma(_912, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _908)) + cbModelParam._m0[15u].w;
        float _1723 = fma(_858, cbModelParam._m0[13u].z, fma(_857, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _856));
        float _1726 = fma(_858, cbModelParam._m0[14u].z, fma(_857, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _856));
        float _1729 = fma(_858, cbModelParam._m0[15u].z, fma(_857, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _856));
        float _1757;
        if (_1723 > 0.0)
        {
            _1757 = abs((1.0 - _1712) / _1723);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1712 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1757 = frontier_phi_14_12_ladder;
        }
        float _1958;
        if (_1726 > 0.0)
        {
            _1958 = abs((1.0 - _1716) / _1726);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1716 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1958 = frontier_phi_23_19_ladder;
        }
        float _2201;
        if (_1729 > 0.0)
        {
            _2201 = abs((1.0 - _1720) / _1729);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1720 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2201 = frontier_phi_35_30_ladder;
        }
        float _2203 = isnan(_1958) ? _1757 : (isnan(_1757) ? _1958 : min(_1757, _1958));
        float _2204 = isnan(_2201) ? _2203 : (isnan(_2203) ? _2201 : min(_2203, _2201));
        float _2208 = (_2204 * _1723) + _1712;
        float _2209 = (_2204 * _1726) + _1716;
        float _2210 = (_2204 * _1729) + _1720;
        float _2211 = _2204 * 9.9999997473787516355514526367188e-05;
        float _2213 = (-1.0) - _2211;
        float _2215 = _2211 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2210 > _2215) || ((_2210 < _2213) || ((_2209 > _2215) || ((_2209 < _2213) || ((_2208 < _2213) || (_2208 > _2215))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2210, cbModelParam._m0[9u].z, fma(_2209, cbModelParam._m0[9u].y, _2208 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2210, cbModelParam._m0[10u].z, fma(_2209, cbModelParam._m0[10u].y, _2208 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2210, cbModelParam._m0[11u].z, fma(_2209, cbModelParam._m0[11u].y, _2208 * cbModelParam._m0[11u].x))), _1665);
            frontier_phi_13_35_ladder = _2334.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2334.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2334.x * cbModelParam._m0[1u].y;
        }
        _1745 = frontier_phi_13_35_ladder_2;
        _1747 = frontier_phi_13_35_ladder_1;
        _1749 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_856, _857, _858), _1665);
        _1745 = _1733.x * cbModelParam._m0[1u].y;
        _1747 = _1733.y * cbModelParam._m0[1u].y;
        _1749 = _1733.z * cbModelParam._m0[1u].y;
    }
    float _1753 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1754 = isnan(_1753) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1753 : min(cbModelParam._m0[25u].w, _1753));
    float _1843;
    float _1845;
    float _1847;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1807 = fma(_916, cbModelParam._m0[21u].z, fma(_912, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _908)) + cbModelParam._m0[21u].w;
        float _1811 = fma(_916, cbModelParam._m0[22u].z, fma(_912, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _908)) + cbModelParam._m0[22u].w;
        float _1815 = fma(_916, cbModelParam._m0[23u].z, fma(_912, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _908)) + cbModelParam._m0[23u].w;
        float _1818 = fma(_858, cbModelParam._m0[21u].z, fma(_857, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _856));
        float _1821 = fma(_858, cbModelParam._m0[22u].z, fma(_857, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _856));
        float _1824 = fma(_858, cbModelParam._m0[23u].z, fma(_857, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _856));
        float _1963;
        if (_1818 > 0.0)
        {
            _1963 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1963 = frontier_phi_25_21_ladder;
        }
        float _2228;
        if (_1821 > 0.0)
        {
            _2228 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2228 = frontier_phi_37_32_ladder;
        }
        float _2433;
        if (_1824 > 0.0)
        {
            _2433 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2433 = frontier_phi_46_43_ladder;
        }
        float _2435 = isnan(_2228) ? _1963 : (isnan(_1963) ? _2228 : min(_1963, _2228));
        float _2436 = isnan(_2433) ? _2435 : (isnan(_2435) ? _2433 : min(_2435, _2433));
        float _2440 = (_2436 * _1818) + _1807;
        float _2441 = (_2436 * _1821) + _1811;
        float _2442 = (_2436 * _1824) + _1815;
        float _2443 = _2436 * 9.9999997473787516355514526367188e-05;
        float _2444 = (-1.0) - _2443;
        float _2446 = _2443 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2442 > _2446) || ((_2442 < _2444) || ((_2441 > _2446) || ((_2441 < _2444) || ((_2440 < _2444) || (_2440 > _2446))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2442, cbModelParam._m0[17u].z, fma(_2441, cbModelParam._m0[17u].y, _2440 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2442, cbModelParam._m0[18u].z, fma(_2441, cbModelParam._m0[18u].y, _2440 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2442, cbModelParam._m0[19u].z, fma(_2441, cbModelParam._m0[19u].y, _2440 * cbModelParam._m0[19u].x))), _1754);
            frontier_phi_22_46_ladder = _2686.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2686.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2686.x * cbModelParam._m0[1u].z;
        }
        _1843 = frontier_phi_22_46_ladder_2;
        _1845 = frontier_phi_22_46_ladder_1;
        _1847 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1827 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_856, _857, _858), _1754);
        _1843 = _1827.x * cbModelParam._m0[1u].z;
        _1845 = _1827.y * cbModelParam._m0[1u].z;
        _1847 = _1827.z * cbModelParam._m0[1u].z;
    }
    float _1859 = ((((1.0 - _876) * ((_864 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_876 * _864)) * _848;
    float _1860 = _1859 * ((cbModelParam._m0[1u].w * (_1843 - _1745)) + _1745);
    float _1861 = _1859 * ((cbModelParam._m0[1u].w * (_1845 - _1747)) + _1747);
    float _1862 = _1859 * ((cbModelParam._m0[1u].w * (_1847 - _1749)) + _1749);
    float _1865 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, _1860 * cbSceneParam._m0[91u].x));
    uvec4 _1881 = floatBitsToUint(cbInstanceData._m0[_823 + 5u]);
    uint _1883 = _1881.x * 14u;
    uint _1884 = _1883 + 13u;
    float _1891 = _848 + (-1.0);
    float _1896 = (cbLight._m0[_1884].x * _1891) + 1.0;
    float _1897 = (cbLight._m0[_1884].y * _1891) + 1.0;
    float _1898 = (cbLight._m0[_1884].z * _1891) + 1.0;
    float _1899 = (cbLight._m0[_1884].w * _1891) + 1.0;
    uint _1900 = _1883 + 5u;
    float _1906 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
    uint _1910 = _1883 + 4u;
    float _1917 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1921 = _1883 | 1u;
    float _1932 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_696, _697, _698));
    float _1935 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_696, _697, _698));
    float _4112 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _4123 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1940 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.3183098733425140380859375;
    float _1942 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * 0.3183098733425140380859375;
    float _1949 = ((cbLight._m0[_1900].x * _1906) * _1942) + ((cbLight._m0[_1910].x * _1917) * _1940);
    float _1950 = ((_1906 * cbLight._m0[_1900].y) * _1942) + ((_1917 * cbLight._m0[_1910].y) * _1940);
    float _1951 = ((_1906 * cbLight._m0[_1900].z) * _1942) + ((_1917 * cbLight._m0[_1910].z) * _1940);
    uvec4 _1955 = floatBitsToUint(cbLight._m0[_1883 + 12u]);
    bool _1957 = _1955.x == 0u;
    float _1968;
    float _1970;
    float _1972;
    if (_1957)
    {
        _1968 = _1949;
        _1970 = _1950;
        _1972 = _1951;
    }
    else
    {
        uint _1976 = _1883 + 6u;
        float _1992 = (dot(vec3(cbLight._m0[_1883 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _1993 = _1992 * _1992;
        float _4134 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1995 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _1968 = (((cbLight._m0[_1976].x * 0.3183098733425140380859375) * _1994) * _1995) + _1949;
        _1970 = (((cbLight._m0[_1976].y * 0.3183098733425140380859375) * _1994) * _1995) + _1950;
        _1972 = (((cbLight._m0[_1976].z * 0.3183098733425140380859375) * _1994) * _1995) + _1951;
    }
    bool _1975 = _1955.y == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1975)
    {
        _2013 = _1968;
        _2015 = _1970;
        _2017 = _1972;
    }
    else
    {
        uint _2172 = _1883 + 7u;
        float _2188 = (dot(vec3(cbLight._m0[_1883 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2189 = _2188 * _2188;
        float _4150 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        float _2190 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2191 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2013 = (((cbLight._m0[_2172].x * 0.3183098733425140380859375) * _2190) * _2191) + _1968;
        _2015 = (((cbLight._m0[_2172].y * 0.3183098733425140380859375) * _2190) * _2191) + _1970;
        _2017 = (((cbLight._m0[_2172].z * 0.3183098733425140380859375) * _2190) * _2191) + _1972;
    }
    uint _2020 = _1883 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _699) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1883].x + _776;
    float _2036 = cbLight._m0[_1883].y + _777;
    float _2037 = cbLight._m0[_1883].z + _778;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1883].xyz));
    float _4166 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _2049 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _2050 = dot(vec3(_696, _697, _698), vec3(_2042, _2043, _2044));
    float _4188 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_2042, _2043, _2044));
    float _4199 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2074 = 1.0 - _2034;
    float _2085 = (0.5 / (((_2049 * ((_2048 * _2074) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2074) + _2034) * _2048))) * _2048;
    float _4210 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2098 = _1883 + 9u;
    float _2109 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1921].w)) * _699) * 0.949999988079071044921875);
    float _2110 = _2109 * _2109;
    float _2111 = cbLight._m0[_1921].x + _776;
    float _2112 = cbLight._m0[_1921].y + _777;
    float _2113 = cbLight._m0[_1921].z + _778;
    float _2117 = inversesqrt(dot(vec3(_2111, _2112, _2113), vec3(_2111, _2112, _2113)));
    float _2118 = _2117 * _2111;
    float _2119 = _2117 * _2112;
    float _2120 = _2117 * _2113;
    float _2121 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_1921].xyz));
    float _4221 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2125 = dot(vec3(_696, _697, _698), vec3(_2118, _2119, _2120));
    float _4232 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _2129 = dot(vec3(cbLight._m0[_1921].xyz), vec3(_2118, _2119, _2120));
    float _4243 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
    float _2133 = _2110 * _2110;
    float _2137 = ((_2128 * _2128) * (_2133 + (-1.0))) + 1.0;
    float _2146 = (exp2(log2(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2147 = 1.0 - _2110;
    float _2157 = (0.5 / (((_2049 * ((_2124 * _2147) + _2110)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2147) + _2110) * _2124))) * _2124;
    float _4254 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2159 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2133 / ((_2137 * _2137) * 3.141590118408203125));
    float _2169 = (((_2146 * cbLight._m0[_2098].x) * _2159) * _1906) + (((_2073 * cbLight._m0[_2020].x) * _2087) * _1917);
    float _2170 = (((_2146 * cbLight._m0[_2098].y) * _2159) * _1906) + (((_2073 * cbLight._m0[_2020].y) * _2087) * _1917);
    float _2171 = (((_2146 * cbLight._m0[_2098].z) * _2159) * _1906) + (((_2073 * cbLight._m0[_2020].z) * _2087) * _1917);
    float _2233;
    float _2235;
    float _2237;
    if (_1957)
    {
        _2233 = _2169;
        _2235 = _2170;
        _2237 = _2171;
    }
    else
    {
        uint _2239 = _1883 + 2u;
        uint _2243 = _1883 + 10u;
        float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2239].w)) * _699) * 0.949999988079071044921875);
        float _2258 = _2257 * _2257;
        float _2259 = cbLight._m0[_2239].x + _776;
        float _2260 = cbLight._m0[_2239].y + _777;
        float _2261 = cbLight._m0[_2239].z + _778;
        float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
        float _2266 = _2265 * _2259;
        float _2267 = _2265 * _2260;
        float _2268 = _2265 * _2261;
        float _2269 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2239].xyz));
        float _4265 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2272 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2273 = dot(vec3(_696, _697, _698), vec3(_2266, _2267, _2268));
        float _4276 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2276 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _2277 = dot(vec3(cbLight._m0[_2239].xyz), vec3(_2266, _2267, _2268));
        float _4287 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2281 = _2258 * _2258;
        float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
        float _2294 = (exp2(log2(1.0 - (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2295 = 1.0 - _2258;
        float _2305 = (0.5 / (((_2049 * ((_2272 * _2295) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2295) + _2258) * _2272))) * _2272;
        float _4298 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2307 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
        float _2308 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2233 = (((_2294 * cbLight._m0[_2243].x) * _2307) * _2308) + _2169;
        _2235 = (((_2294 * cbLight._m0[_2243].y) * _2307) * _2308) + _2170;
        _2237 = (((_2294 * cbLight._m0[_2243].z) * _2307) * _2308) + _2171;
    }
    float _2343;
    float _2345;
    float _2347;
    if (_1975)
    {
        _2343 = _2233;
        _2345 = _2235;
        _2347 = _2237;
    }
    else
    {
        uint _2354 = _1883 + 3u;
        uint _2358 = _1883 + 11u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _699) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _776;
        float _2375 = cbLight._m0[_2354].y + _777;
        float _2376 = cbLight._m0[_2354].z + _778;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2354].xyz));
        float _4314 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2388 = dot(vec3(_696, _697, _698), vec3(_2381, _2382, _2383));
        float _4325 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4336 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2409 = (exp2(log2(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2410 = 1.0 - _2373;
        float _2420 = (0.5 / (((_2049 * ((_2387 * _2410) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2410) + _2373) * _2387))) * _2387;
        float _4347 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2422 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2423 = isnan(1.0) ? _1899 : (isnan(_1899) ? 1.0 : min(_1899, 1.0));
        _2343 = (((_2409 * cbLight._m0[_2358].x) * _2422) * _2423) + _2233;
        _2345 = (((_2409 * cbLight._m0[_2358].y) * _2422) * _2423) + _2235;
        _2347 = (((_2409 * cbLight._m0[_2358].z) * _2422) * _2423) + _2237;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1881.y == 0u)
    {
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2498;
        float _2500 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2498;
        float _2501 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2498;
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2514)));
        float _2535 = (log2(_2501 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2691;
        float _2693;
        float _2695;
        float _2697;
        float _2699;
        float _2701;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2691 = 0.0;
            _2693 = 0.0;
            _2695 = 0.0;
            _2697 = 0.0;
            _2699 = 0.0;
            _2701 = 0.0;
        }
        else
        {
            float _2692;
            float _2694;
            float _2696;
            float _2698;
            float _2700;
            float _2702;
            float _2844 = 0.0;
            float _2845 = 0.0;
            float _2846 = 0.0;
            float _2847 = 0.0;
            float _2848 = 0.0;
            float _2849 = 0.0;
            uint _2850 = 0u;
            uint _2859;
            bool _2860;
            for (;;)
            {
                _2859 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2850 << 2u)) >> 2u)).x;
                _2860 = _2859 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2860)
                {
                    frontier_phi_61_pred = _2844;
                    frontier_phi_61_pred_1 = _2849;
                    frontier_phi_61_pred_2 = _2848;
                    frontier_phi_61_pred_3 = _2847;
                    frontier_phi_61_pred_4 = _2846;
                    frontier_phi_61_pred_5 = _2845;
                }
                else
                {
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    uint _2974;
                    _2968 = _2844;
                    _2969 = _2845;
                    _2970 = _2846;
                    _2971 = _2847;
                    _2972 = _2848;
                    _2973 = _2849;
                    _2974 = _2859;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    for (;;)
                    {
                        uint _2978 = uint(findLSB(_2974)) + (_2850 << 5u);
                        uint _2975 = (_2974 + 4294967295u) & _2974;
                        uint _2980 = _2978 * 48u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2980)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2980 + 3u)).x));
                        uint _3000 = (_2978 * 48u) + 4u;
                        vec4 _3013 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 3u)).x));
                        uint _3019 = (_2978 * 48u) + 8u;
                        vec3 _3030 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 2u)).x));
                        float _3034 = _2994.x - _2499;
                        float _3035 = _2994.y - _2500;
                        float _3036 = _2994.z - _2501;
                        float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                        float _3040 = inversesqrt(_3037);
                        float _3041 = _3040 * _3034;
                        float _3042 = _3040 * _3035;
                        float _3043 = _3040 * _3036;
                        float _3044 = dot(vec3(_804, _807, _810), vec3(_3041, _3042, _3043));
                        float _3049 = 1.0 - (_3037 * _2994.w);
                        float _4373 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3050 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3051 = sqrt(_3037) * _3013.w;
                        float _3054 = 1.39999997615814208984375 / (_3051 + 1.39999997615814208984375);
                        float _3055 = _3054 * _3054;
                        float _3058 = ((1.0 - _3055) * _3044) + _3055;
                        float _3061 = _3051 * _3051;
                        float _3065 = ((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3050) / ((_3061 * 0.699999988079071044921875) + 1.0);
                        float _3069 = (-0.0) - _2499;
                        float _3070 = (-0.0) - _2500;
                        float _3071 = (-0.0) - _2501;
                        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                        float _3076 = _3075 * _3069;
                        float _3077 = _3075 * _3070;
                        float _3078 = _3075 * _3071;
                        float _3086 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                        float _3087 = 1.0 - _864;
                        float _3094 = sqrt(1.0 - ((1.0 - (_3087 * _3087)) * (1.0 - (_3086 * _3086))));
                        float _3095 = _3094 * _3094;
                        float _3096 = _3095 * _3095;
                        float _3097 = _3076 + _3041;
                        float _3098 = _3077 + _3042;
                        float _3099 = _3078 + _3043;
                        float _3103 = inversesqrt(dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099)));
                        float _3107 = dot(vec3(_804, _807, _810), vec3(_3076, _3077, _3078));
                        float _4389 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                        float _3110 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                        float _3111 = dot(vec3(_804, _807, _810), vec3(_3103 * _3097, _3103 * _3098, _3103 * _3099));
                        float _4400 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                        float _3114 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3118 = ((_3114 * _3114) * (_3096 + (-1.0))) + 1.0;
                        float _3119 = _3054 * _3095;
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3044) + _3120;
                        float _4411 = isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0));
                        float _3124 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3125 = 1.0 - _3095;
                        float _3135 = (0.5 / (((_3124 * ((_3110 * _3125) + _3095)) + 9.9999999392252902907785028219223e-09) + (((_3124 * _3125) + _3095) * _3110))) * _3124;
                        float _4422 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3146 = (((_3096 * 3.1415927410125732421875) * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) / ((_3118 * _3118) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125))) * _3050;
                        _2903 = (_3065 * _3013.x) + _2971;
                        _2904 = (_3065 * _3013.y) + _2972;
                        _2905 = (_3065 * _3013.z) + _2973;
                        _2900 = (_3146 * _3030.x) + _2968;
                        _2901 = (_3146 * _3030.y) + _2969;
                        _2902 = (_3146 * _3030.z) + _2970;
                        if (_2975 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2968 = _2900;
                            _2969 = _2901;
                            _2970 = _2902;
                            _2971 = _2903;
                            _2972 = _2904;
                            _2973 = _2905;
                            _2974 = _2975;
                        }
                    }
                    frontier_phi_61_pred = _2900;
                    frontier_phi_61_pred_1 = _2905;
                    frontier_phi_61_pred_2 = _2904;
                    frontier_phi_61_pred_3 = _2903;
                    frontier_phi_61_pred_4 = _2902;
                    frontier_phi_61_pred_5 = _2901;
                }
                _2692 = frontier_phi_61_pred;
                _2702 = frontier_phi_61_pred_1;
                _2700 = frontier_phi_61_pred_2;
                _2698 = frontier_phi_61_pred_3;
                _2696 = frontier_phi_61_pred_4;
                _2694 = frontier_phi_61_pred_5;
                uint _2851 = _2850 + 1u;
                if (_2851 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2844 = _2692;
                    _2845 = _2694;
                    _2846 = _2696;
                    _2847 = _2698;
                    _2848 = _2700;
                    _2849 = _2702;
                    _2850 = _2851;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2691 = _2692;
            _2693 = _2694;
            _2695 = _2696;
            _2697 = _2698;
            _2699 = _2700;
            _2701 = _2702;
        }
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.z;
        uint _2708 = (_2706 >> 8u) & 15u;
        float _2812;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        if (((4294967295u << _2708) & _2545) == 0u)
        {
            _2812 = _2691;
            _2814 = _2693;
            _2816 = _2695;
            _2818 = _2697;
            _2820 = _2699;
            _2822 = _2701;
        }
        else
        {
            float _2837 = inversesqrt(dot(vec3(_2499, _2500, _2501), vec3(_2499, _2500, _2501)));
            float _2838 = _2837 * _2499;
            float _2839 = _2837 * _2500;
            float _2840 = _2837 * _2501;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2708 < ((_2706 >> 12u) & 15u))
            {
                float _2813;
                float _2815;
                float _2817;
                float _2819;
                float _2821;
                float _2823;
                float _2951 = _2691;
                float _2952 = _2693;
                float _2953 = _2695;
                float _2954 = _2697;
                float _2955 = _2699;
                float _2956 = _2701;
                uint _2957 = _2708;
                uint _2966;
                bool _2967;
                for (;;)
                {
                    _2966 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                    _2967 = _2966 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2967)
                    {
                        frontier_phi_67_pred = _2954;
                        frontier_phi_67_pred_1 = _2955;
                        frontier_phi_67_pred_2 = _2956;
                        frontier_phi_67_pred_3 = _2953;
                        frontier_phi_67_pred_4 = _2952;
                        frontier_phi_67_pred_5 = _2951;
                    }
                    else
                    {
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3164 = _2951;
                        float _3165 = _2952;
                        float _3166 = _2953;
                        float _3167 = _2954;
                        float _3168 = _2955;
                        float _3169 = _2956;
                        uint _3170 = _2966;
                        uint _3171;
                        vec4 _3196;
                        float _3197;
                        vec4 _3212;
                        vec3 _3224;
                        vec4 _3239;
                        vec4 _3254;
                        float _3301;
                        bool _3302;
                        for (;;)
                        {
                            uint _3181 = ((_2957 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3170));
                            _3171 = (_3170 + 4294967295u) & _3170;
                            uint _3183 = _3181 * 40u;
                            _3196 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 3u)).x));
                            _3197 = _3196.w;
                            uint _3199 = (_3181 * 40u) + 4u;
                            _3212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3199 + 3u)).x));
                            uint _3214 = (_3181 * 40u) + 8u;
                            _3224 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3214 + 2u)).x));
                            uint _3226 = (_3181 * 40u) + 16u;
                            _3239 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3226)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3226 + 3u)).x));
                            uint _3241 = (_3181 * 40u) + 20u;
                            _3254 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3241)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3241 + 3u)).x));
                            uint _3257 = (_3181 * 40u) + 24u;
                            vec4 _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            uint _3276 = (_3181 * 40u) + 28u;
                            vec4 _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            _3301 = fma(_2501, _3289.z, fma(_2500, _3289.y, _3289.x * _2499)) + _3289.w;
                            _3302 = !((fma(_2501, _3270.z, fma(_2500, _3270.y, _3270.x * _2499)) + _3270.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3302)
                            {
                                float _3329 = _3196.x - _2499;
                                float _3330 = _3196.y - _2500;
                                float _3331 = _3196.z - _2501;
                                float _3332 = dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331));
                                float _3335 = inversesqrt(_3332);
                                float _3336 = _3335 * _3329;
                                float _3337 = _3335 * _3330;
                                float _3338 = _3335 * _3331;
                                float _3342 = 1.0 - (_3332 / (_3197 * _3197));
                                float _4433 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                                float _3343 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3347 = sqrt(_3332) * _3212.w;
                                float _3349 = 1.39999997615814208984375 / (_3347 + 1.39999997615814208984375);
                                float _3350 = _3349 * _3349;
                                float _3353 = ((1.0 - _3350) * dot(vec3(_3336, _3337, _3338), vec3(_804, _807, _810))) + _3350;
                                float _3356 = _3347 * _3347;
                                float _3360 = (fma(_2501, _3239.z, fma(_2500, _3239.y, _3239.x * _2499)) + _3239.w) / _3301;
                                float _3361 = (fma(_2501, _3254.z, fma(_2500, _3254.y, _3254.x * _2499)) + _3254.w) / _3301;
                                float _3365 = 1.0 - dot(vec2(_3360, _3361), vec2(_3360, _3361));
                                float _4449 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3366 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                                float _3367 = _3366 * (((isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0))) * _3343) / ((_3356 * 0.699999988079071044921875) + 1.0));
                                float _3379 = exp2(log2(1.0 / ((_3356 * 3.5) + 5.0)) * 0.25);
                                float _3380 = 1.0 - _864;
                                float _3387 = sqrt(1.0 - ((1.0 - (_3380 * _3380)) * (1.0 - (_3379 * _3379))));
                                float _3388 = _3387 * _3387;
                                float _3389 = _3388 * _3388;
                                float _3390 = _3336 - _2838;
                                float _3391 = _3337 - _2839;
                                float _3392 = _3338 - _2840;
                                float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                                float _3400 = dot(vec3(_804, _807, _810), vec3((-0.0) - _2838, (-0.0) - _2839, (-0.0) - _2840));
                                float _4460 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                                float _3403 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3404 = dot(vec3(_804, _807, _810), vec3(_3396 * _3390, _3396 * _3391, _3396 * _3392));
                                float _4471 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                                float _3407 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3411 = ((_3407 * _3407) * (_3389 + (-1.0))) + 1.0;
                                float _3412 = _3349 * _3388;
                                float _3413 = _3412 * _3412;
                                float _3419 = ((1.0 - _3413) * dot(vec3(_804, _807, _810), vec3(_3336, _3337, _3338))) + _3413;
                                float _4482 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                                float _3420 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3421 = 1.0 - _3388;
                                float _3431 = (0.5 / (((_3420 * ((_3403 * _3421) + _3388)) + 9.9999999392252902907785028219223e-09) + (((_3420 * _3421) + _3388) * _3403))) * _3420;
                                float _4493 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3441 = (_3366 * _3343) * (((_3389 * 3.1415927410125732421875) * (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) / ((_3411 * _3411) * ((_3356 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3441 * _3224.x;
                                frontier_phi_73_pred_1 = _3441 * _3224.y;
                                frontier_phi_73_pred_2 = _3367 * _3212.z;
                                frontier_phi_73_pred_3 = _3367 * _3212.y;
                                frontier_phi_73_pred_4 = _3367 * _3212.x;
                                frontier_phi_73_pred_5 = _3441 * _3224.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3445 = frontier_phi_73_pred;
                            _3446 = frontier_phi_73_pred_1;
                            _3450 = frontier_phi_73_pred_2;
                            _3449 = frontier_phi_73_pred_3;
                            _3448 = frontier_phi_73_pred_4;
                            _3447 = frontier_phi_73_pred_5;
                            _3154 = _3448 + _3167;
                            _3155 = _3449 + _3168;
                            _3156 = _3450 + _3169;
                            _3151 = _3445 + _3164;
                            _3152 = _3446 + _3165;
                            _3153 = _3447 + _3166;
                            if (_3171 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3164 = _3151;
                                _3165 = _3152;
                                _3166 = _3153;
                                _3167 = _3154;
                                _3168 = _3155;
                                _3169 = _3156;
                                _3170 = _3171;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3154;
                        frontier_phi_67_pred_1 = _3155;
                        frontier_phi_67_pred_2 = _3156;
                        frontier_phi_67_pred_3 = _3153;
                        frontier_phi_67_pred_4 = _3152;
                        frontier_phi_67_pred_5 = _3151;
                    }
                    _2819 = frontier_phi_67_pred;
                    _2821 = frontier_phi_67_pred_1;
                    _2823 = frontier_phi_67_pred_2;
                    _2817 = frontier_phi_67_pred_3;
                    _2815 = frontier_phi_67_pred_4;
                    _2813 = frontier_phi_67_pred_5;
                    uint _2958 = _2957 + 1u;
                    if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2951 = _2813;
                        _2952 = _2815;
                        _2953 = _2817;
                        _2954 = _2819;
                        _2955 = _2821;
                        _2956 = _2823;
                        _2957 = _2958;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2821;
                frontier_phi_55_56_ladder_1 = _2823;
                frontier_phi_55_56_ladder_2 = _2819;
                frontier_phi_55_56_ladder_3 = _2817;
                frontier_phi_55_56_ladder_4 = _2815;
                frontier_phi_55_56_ladder_5 = _2813;
            }
            else
            {
                frontier_phi_55_56_ladder = _2699;
                frontier_phi_55_56_ladder_1 = _2701;
                frontier_phi_55_56_ladder_2 = _2697;
                frontier_phi_55_56_ladder_3 = _2695;
                frontier_phi_55_56_ladder_4 = _2693;
                frontier_phi_55_56_ladder_5 = _2691;
            }
            _2812 = frontier_phi_55_56_ladder_5;
            _2814 = frontier_phi_55_56_ladder_4;
            _2816 = frontier_phi_55_56_ladder_3;
            _2818 = frontier_phi_55_56_ladder_2;
            _2820 = frontier_phi_55_56_ladder;
            _2822 = frontier_phi_55_56_ladder_1;
        }
        float _2827 = isnan(1.0) ? _848 : (isnan(_848) ? 1.0 : min(_848, 1.0));
        _2558 = (_2827 * _2818) + _2013;
        _2560 = (_2827 * _2820) + _2015;
        _2562 = (_2827 * _2822) + _2017;
        _2564 = ((_2812 * 0.039999999105930328369140625) * _2827) + _2343;
        _2566 = ((_2814 * 0.039999999105930328369140625) * _2827) + _2345;
        _2568 = ((_2816 * 0.039999999105930328369140625) * _2827) + _2347;
    }
    else
    {
        _2558 = _2013;
        _2560 = _2015;
        _2562 = _2017;
        _2564 = _2343;
        _2566 = _2345;
        _2568 = _2347;
    }
    uint _2574 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _2580 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2586 = (((((_2580 * cbMtdParam._m0[14u].x) * _580.x) * _603) * _682) * (((1.0 - _656) * cbMtdParam._m0[20u].w) + _656)) * cbInstanceData._m0[_2574].x;
    float _2592 = (((((_2580 * cbMtdParam._m0[14u].y) * _580.y) * _603) * _682) * (((1.0 - _658) * cbMtdParam._m0[20u].w) + _658)) * cbInstanceData._m0[_2574].y;
    float _2598 = (((((_2580 * cbMtdParam._m0[14u].z) * _580.z) * _603) * _682) * (((1.0 - _660) * cbMtdParam._m0[20u].w) + _660)) * cbInstanceData._m0[_2574].z;
    float _4509 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4520 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4531 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _2615 = (((isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2558 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _848))) + ((_2564 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + _2586;
    float _2617 = (_2592 + ((_2566 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2560 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _848)));
    float _2619 = (_2598 + ((_2568 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1654)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2562 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _848)));
    float _4557 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2632 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    uint _2633 = _823 + 6u;
    float _2641 = _784 / cbSceneParam._m0[86u].x;
    float _2642 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2656 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2658 = _2656.x;
    float _2659 = _2656.y;
    float _2660 = _2656.z;
    float _2661 = _2656.w;
    float _2753;
    float _2755;
    float _2757;
    float _2759;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2716 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2717 = _2716 / _718;
        float _2728 = _2717 * _769;
        float _2729 = _770 * _2717;
        float _2730 = (-0.0) - _2729;
        float _2731 = _2717 * _771;
        float _2733 = (cbSceneParam._m0[77u].w * _2730) / _2716;
        float _2734 = _2733 + cbSceneParam._m0[79u].w;
        float _2735 = cbSceneParam._m0[79u].w - _2729;
        float _2741 = sqrt(((_2728 * _2728) + (_2729 * _2729)) + (_2731 * _2731));
        float _2744 = (1.0 - (cbSceneParam._m0[77u].w / _2716)) * _2741;
        float _2749 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2751 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2913;
        if (abs((_2730 - _2733) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2913 = ((((_2734 > 0.0) ? exp2(_2749 * _2734) : (2.0 - exp2(_2751 * _2734))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2744;
        }
        else
        {
            float _2873 = 1.0 / cbSceneParam._m0[80u].x;
            float _2874 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : max(_2734, _2735));
            float _2875 = isnan(_2735) ? _2734 : (isnan(_2734) ? _2735 : min(_2734, _2735));
            float _2884 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : min(_2874, 0.0));
            float _2885 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : min(_2875, 0.0));
            _2913 = ((abs(_2741 / _2730) * cbSceneParam._m0[80u].y) * ((((_2884 - _2885) * 2.0) - ((exp2(_2749 * (isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0)))) - exp2(_2749 * (isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0))))) * _2873)) - ((exp2(_2751 * _2884) - exp2(_2751 * _2885)) * _2873))) + (_2744 * cbSceneParam._m0[80u].z);
        }
        vec4 _2915 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, 1.0), 0.0);
        float _2924 = exp2((_2913 * (-1.44269502162933349609375)) * (1.0 - _2915.w));
        float _2925 = log2(_2924);
        float _2941 = log2(_2661);
        _2753 = (exp2(_2941 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].x)) * _2915.x) / cbSceneParam._m0[78u].x)) + _2658;
        _2755 = (exp2(_2941 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].y)) * _2915.y) / cbSceneParam._m0[78u].y)) + _2659;
        _2757 = (exp2(_2941 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2925 * cbSceneParam._m0[78u].z)) * _2915.z) / cbSceneParam._m0[78u].z)) + _2660;
        _2759 = _2924 * _2661;
    }
    else
    {
        _2753 = _2658;
        _2755 = _2659;
        _2757 = _2660;
        _2759 = _2661;
    }
    float _2771 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2772 = _2771 == 3.0;
    float _2773 = log2(_2759);
    float _2777 = exp2(_2773 * cbSceneParam._m0[78u].x);
    float _2778 = exp2(_2773 * cbSceneParam._m0[78u].y);
    float _2779 = exp2(_2773 * cbSceneParam._m0[78u].z);
    float _2780 = _2777 * (isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0)));
    float _2781 = _2778 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0)));
    float _2782 = _2779 * (isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0)));
    float _2791 = (_2771 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2791 * (_2772 ? _2780 : (_2780 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.y = _2791 * (_2772 ? _2781 : (_2781 + (cbSceneParam._m0[72u].w * _2755)));
    SV_Target.z = _2791 * (_2772 ? _2782 : (_2782 + (cbSceneParam._m0[72u].w * _2757)));
    SV_Target.w = cbInstanceData._m0[_2633].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2586) * _2632) * _2777) * _2791;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2592) * _2632) * _2778) * _2791;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2598) * _2632) * _2779) * _2791;
    SV_Target_1.w = cbInstanceData._m0[_2633].w;
}


