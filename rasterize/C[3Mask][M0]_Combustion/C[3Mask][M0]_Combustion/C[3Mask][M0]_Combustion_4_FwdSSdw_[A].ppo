#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1324;
float _3762;
float _3763;
float _3764;
float _3765;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _289 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _308 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _345 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _308.x) * 2.0) - _335)) + 1.0;
    float _3774 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _353 = (_346 * ((_289.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _354 = (_346 * ((_289.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _355 = (_346 * ((_289.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _374 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _387 = (((((1.0 - _308.y) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3785 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _395 = (((_374.x * cbMtdParam._m0[12u].x) - _353) * _388) + _353;
    float _396 = (_388 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _397 = (_388 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _415 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _428 = (((((1.0 - _308.z) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3796 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    vec4 _457 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _465 = ((((((_415.x * cbMtdParam._m0[13u].x) - _395) * _429) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _457.x;
    float _468 = ((((_429 * ((_415.y * cbMtdParam._m0[13u].y) - _396)) + _396) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _457.y;
    float _471 = ((((_429 * ((_415.z * cbMtdParam._m0[13u].z) - _397)) + _397) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _457.z;
    vec4 _484 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _498 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    vec4 _514 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _525 = ((_514.x - _500) * _346) + _500;
    float _526 = ((_514.y - _501) * _346) + _501;
    float _527 = ((_514.z - _502) * _346) + _502;
    vec4 _540 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = ((_540.x - _525) * _388) + _525;
    float _552 = ((_540.y - _526) * _388) + _526;
    float _553 = ((_540.z - _527) * _388) + _527;
    vec4 _566 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _579 = ((_566.z - _553) * _429) + _553;
    float _582 = ((((_566.x - _551) * _429) + _551) * 2.0) + (-1.0);
    float _584 = ((((_566.y - _552) * _429) + _552) * 2.0) + (-1.0);
    float _585 = dot(vec2(_582, _584), vec2(_582, _584));
    float _3807 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _590 = sqrt(1.0 - (isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0))));
    vec4 _623 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _637 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3818 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _646 = (((_638 * _638) * (3.0 - (_638 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _654 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _662 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3829 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _667 = (_663 * _663) * (3.0 - (_663 * 2.0));
    float _668 = _667 * cbMtdParam._m0[22u].x;
    float _669 = _667 * cbMtdParam._m0[22u].y;
    float _670 = sin(_654);
    float _671 = cos(_654);
    float _672 = TEXCOORD.z - _668;
    float _673 = TEXCOORD.w - _669;
    vec4 _693 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_668 + fma(_673, (-0.0) - _670, _672 * _671))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_673, _671, _672 * _670) + _669)) + cbTextureTilingScale._m0[2u].w));
    float _699 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _693.x;
    float _701 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _693.y;
    float _703 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _693.z;
    float _724 = (TEXCOORD_5.x - (((_484.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3840 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _725 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    vec4 _738 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _748 = (((_738.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _582;
    float _749 = (((_738.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _584;
    float _752 = fma(_590, _233 * NORMAL.x, fma(_749, _240 * TANGENT.x, (_226 * _218) * _748));
    float _755 = fma(_590, _233 * NORMAL.y, fma(_749, _240 * TANGENT.y, (_226 * _219) * _748));
    float _758 = fma(_590, _233 * NORMAL.z, fma(_749, _240 * TANGENT.z, (_226 * _220) * _748));
    float _762 = inversesqrt(dot(vec3(_752, _755, _758), vec3(_752, _755, _758)));
    float _763 = _762 * _752;
    float _764 = _762 * _755;
    float _765 = _762 * _758;
    float _3851 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _766 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _3862 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3873 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3884 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _785 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _835 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _825);
    float _836 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _825);
    float _837 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _825);
    float _841 = inversesqrt(dot(vec3(_835, _836, _837), vec3(_835, _836, _837)));
    float _842 = _835 * _841;
    float _843 = _836 * _841;
    float _844 = _837 * _841;
    vec4 _849 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _851 = _849.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1004 = sqrt(((_835 * _835) + (_836 * _836)) + (_837 * _837));
        float _1010 = (cbMatDynParam._m0[5u].x * _1004) + cbMatDynParam._m0[5u].y;
        float _3895 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1015 = (cbMatDynParam._m0[5u].z * _1004) + cbMatDynParam._m0[5u].w;
        float _3906 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) - _1011)) + _1011) < ((_851 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _862 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _863 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _881 = fma(_765, cbSceneParam._m0[5u].z, fma(_764, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _763));
    float _884 = fma(_765, cbSceneParam._m0[6u].z, fma(_764, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _763));
    float _887 = fma(_765, cbSceneParam._m0[7u].z, fma(_764, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _763));
    uint _900 = uint(roundEven(NORMAL.w)) * 13u;
    uint _901 = _900 + 9u;
    uint _902 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _908 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_902].x;
    float _909 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_902].y;
    float _910 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_902].z;
    float _3917 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _912 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    vec4 _922 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _862, cbSceneParam._m0[86u].y * _863));
    float _925 = _922.x * TEXCOORD_5.w;
    float _926 = dot(vec3(_763, _764, _765), vec3(_842, _843, _844));
    float _929 = _926 * 2.0;
    float _933 = (_929 * _763) - _842;
    float _934 = (_929 * _764) - _843;
    float _935 = (_929 * _765) - _844;
    float _939 = abs(dot(vec3(_842, _843, _844), vec3(_763, _764, _765)));
    float _3950 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _941 = sqrt(_766);
    float _953 = exp2((_941 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_941 * 3.0));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1323;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1048 = fma(_993, cbModelParam._m0[26u].z, fma(_989, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _985));
        float _1052 = fma(_993, cbModelParam._m0[27u].z, fma(_989, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _985));
        float _1056 = fma(_993, cbModelParam._m0[28u].z, fma(_989, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _985));
        float _1081 = _985 + _763;
        float _1082 = _989 + _764;
        float _1083 = _993 + _765;
        float _1093 = fma(_1083, cbModelParam._m0[26u].z, fma(_1082, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1081)) - _1048;
        float _1094 = fma(_1083, cbModelParam._m0[27u].z, fma(_1082, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1081)) - _1052;
        float _1095 = fma(_1083, cbModelParam._m0[28u].z, fma(_1082, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1081)) - _1056;
        float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
        float _1112 = ((_1099 * _1093) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1048 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1099 * _1094) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1052 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1114 = ((_1099 * _1095) / cbModelParam._m0[34u].z) + ((((((_1056 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1112, _1113, _1114), 0.0);
        float _1151 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1117.x + (-0.5));
        float _1153 = _1151 * (_1117.y + (-0.5));
        float _1154 = _1151 * (_1117.z + (-0.5));
        float _1161 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1124.x + (-0.5));
        float _1163 = _1161 * (_1124.y + (-0.5));
        float _1164 = _1161 * (_1124.z + (-0.5));
        float _1171 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1131.x + (-0.5));
        float _1173 = _1171 * (_1131.y + (-0.5));
        float _1174 = _1171 * (_1131.z + (-0.5));
        float _1181 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1182 = _1181 * (_1138.x + (-0.5));
        float _1183 = _1181 * (_1138.y + (-0.5));
        float _1184 = _1181 * (_1138.z + (-0.5));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = _1152 * 0.5;
        float _1189 = _1162 * 0.5;
        float _1190 = _1172 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1205 = (dot(vec3(_763, _764, _765), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1215 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3998 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1217 + 1.0))) + _1222) * _1185;
        float _1232 = _1153 * 0.5;
        float _1233 = _1163 * 0.5;
        float _1234 = _1173 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1248 = (dot(vec3(_763, _764, _765), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1257 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4031 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1259 + 1.0))) + _1264) * _1186;
        float _1274 = _1154 * 0.5;
        float _1275 = _1164 * 0.5;
        float _1276 = _1174 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_763, _764, _765), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4064 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1301 + 1.0))) + _1306) * _1187;
        _1323 = _1154;
        _1325 = _1153;
        _1326 = _1152;
        _1327 = _1164;
        _1328 = _1163;
        _1329 = _1162;
        _1330 = _1174;
        _1331 = _1173;
        _1332 = _1172;
        _1333 = _1187;
        _1334 = _1186;
        _1335 = _1185;
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1338 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
    }
    else
    {
        _1323 = _1324;
        _1325 = _1324;
        _1326 = _1324;
        _1327 = _1324;
        _1328 = _1324;
        _1329 = _1324;
        _1330 = _1324;
        _1331 = _1324;
        _1332 = _1324;
        _1333 = _1324;
        _1334 = _1324;
        _1335 = _1324;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1367 = fma(_993, cbModelParam._m0[30u].z, fma(_989, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _985));
        float _1371 = fma(_993, cbModelParam._m0[31u].z, fma(_989, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _985));
        float _1375 = fma(_993, cbModelParam._m0[32u].z, fma(_989, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _985));
        float _1398 = _985 + _763;
        float _1399 = _989 + _764;
        float _1400 = _993 + _765;
        float _1410 = fma(_1400, cbModelParam._m0[30u].z, fma(_1399, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1398)) - _1367;
        float _1411 = fma(_1400, cbModelParam._m0[31u].z, fma(_1399, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1398)) - _1371;
        float _1412 = fma(_1400, cbModelParam._m0[32u].z, fma(_1399, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1398)) - _1375;
        float _1416 = inversesqrt(dot(vec3(_1410, _1411, _1412), vec3(_1410, _1411, _1412)));
        float _1429 = ((_1416 * _1410) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1367 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1416 * _1411) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1371 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1416 * _1412) / cbModelParam._m0[35u].z) + ((((((_1375 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1429, _1430, _1431), 0.0);
        float _1466 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1433.x + (-0.5));
        float _1468 = _1466 * (_1433.y + (-0.5));
        float _1469 = _1466 * (_1433.z + (-0.5));
        float _1476 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1440.x + (-0.5));
        float _1478 = _1476 * (_1440.y + (-0.5));
        float _1479 = _1476 * (_1440.z + (-0.5));
        float _1486 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1447.x + (-0.5));
        float _1488 = _1486 * (_1447.y + (-0.5));
        float _1489 = _1486 * (_1447.z + (-0.5));
        float _1496 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1454.x + (-0.5));
        float _1498 = _1496 * (_1454.y + (-0.5));
        float _1499 = _1496 * (_1454.z + (-0.5));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = _1467 * 0.5;
        float _1504 = _1477 * 0.5;
        float _1505 = _1487 * 0.5;
        float _1506 = dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505));
        float _1511 = (_1506 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1506);
        float _1519 = (dot(vec3(_763, _764, _765), vec3(_1511 * _1503, _1511 * _1504, _1511 * _1505)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1528 = sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4127 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1530 + 1.0))) + _1535) * _1500;
        float _1545 = _1468 * 0.5;
        float _1546 = _1478 * 0.5;
        float _1547 = _1488 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_763, _764, _765), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4160 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1572 + 1.0))) + _1577) * _1501;
        float _1587 = _1469 * 0.5;
        float _1588 = _1479 * 0.5;
        float _1589 = _1489 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_763, _764, _765), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4193 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1614 + 1.0))) + _1619) * _1502;
        _1636 = _1469;
        _1637 = _1468;
        _1638 = _1467;
        _1639 = _1479;
        _1640 = _1478;
        _1641 = _1477;
        _1642 = _1489;
        _1643 = _1488;
        _1644 = _1487;
        _1645 = _1502;
        _1646 = _1501;
        _1647 = _1500;
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1324;
        _1637 = _1324;
        _1638 = _1324;
        _1639 = _1324;
        _1640 = _1324;
        _1641 = _1324;
        _1642 = _1324;
        _1643 = _1324;
        _1644 = _1324;
        _1645 = _1324;
        _1646 = _1324;
        _1647 = _1324;
        _1648 = 0.0;
        _1649 = 0.0;
        _1650 = 0.0;
    }
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1336)) + _1336;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1337)) + _1337;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1338)) + _1338;
    float _1683 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1660));
    float _1704 = _933 * 0.5;
    float _1705 = _934 * 0.5;
    float _1706 = _935 * 0.5;
    float _1707 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1710 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1713 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1747;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1720 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1323, _1327, _1330, _1333));
        float _1724 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1728 = dot(vec4(_1704, _1705, _1706, 1.0), vec4(_1326, _1329, _1332, _1335));
        float _1735 = dot(vec4(cbModelParam._m0[39u]), vec4(_1704, _1705, _1706, 1.0));
        _1747 = dot(vec3(isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)), isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1735) ? 0.0 : (isnan(0.0) ? _1735 : max(0.0, _1735))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1747 = 1.0;
    }
    float _1758;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1749 = dot(vec4(cbModelParam._m0[40u]), vec4(_1704, _1705, _1706, 1.0));
        _1758 = dot(vec3(isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1749) ? 0.0 : (isnan(0.0) ? _1749 : max(0.0, _1749))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1758 = 1.0;
    }
    float _1762 = (_1758 * cbModelParam._m0[1u].x) + (_1747 * (1.0 - cbModelParam._m0[1u].x));
    float _1772 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _766);
    float _1773 = isnan(_1772) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1772 : min(cbModelParam._m0[25u].z, _1772));
    float _1853;
    float _1855;
    float _1857;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1820 = fma(_993, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985)) + cbModelParam._m0[13u].w;
        float _1824 = fma(_993, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985)) + cbModelParam._m0[14u].w;
        float _1828 = fma(_993, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985)) + cbModelParam._m0[15u].w;
        float _1831 = fma(_935, cbModelParam._m0[13u].z, fma(_934, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _933));
        float _1834 = fma(_935, cbModelParam._m0[14u].z, fma(_934, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _933));
        float _1837 = fma(_935, cbModelParam._m0[15u].z, fma(_934, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _933));
        float _1865;
        if (_1831 > 0.0)
        {
            _1865 = abs((1.0 - _1820) / _1831);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1820 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1865 = frontier_phi_17_15_ladder;
        }
        float _2087;
        if (_1834 > 0.0)
        {
            _2087 = abs((1.0 - _1824) / _1834);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1824 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2087 = frontier_phi_26_22_ladder;
        }
        float _2333;
        if (_1837 > 0.0)
        {
            _2333 = abs((1.0 - _1828) / _1837);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1828 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2333 = frontier_phi_38_33_ladder;
        }
        float _2335 = isnan(_2087) ? _1865 : (isnan(_1865) ? _2087 : min(_1865, _2087));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1831) + _1820;
        float _2341 = (_2336 * _1834) + _1824;
        float _2342 = (_2336 * _1837) + _1828;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1773);
            frontier_phi_16_38_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1853 = frontier_phi_16_38_ladder_2;
        _1855 = frontier_phi_16_38_ladder_1;
        _1857 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1841 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_933, _934, _935), _1773);
        _1853 = _1841.x * cbModelParam._m0[1u].y;
        _1855 = _1841.y * cbModelParam._m0[1u].y;
        _1857 = _1841.z * cbModelParam._m0[1u].y;
    }
    float _1861 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _766);
    float _1862 = isnan(_1861) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1861 : min(cbModelParam._m0[25u].w, _1861));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1915 = fma(_993, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985)) + cbModelParam._m0[21u].w;
        float _1919 = fma(_993, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985)) + cbModelParam._m0[22u].w;
        float _1923 = fma(_993, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985)) + cbModelParam._m0[23u].w;
        float _1926 = fma(_935, cbModelParam._m0[21u].z, fma(_934, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _933));
        float _1929 = fma(_935, cbModelParam._m0[22u].z, fma(_934, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _933));
        float _1932 = fma(_935, cbModelParam._m0[23u].z, fma(_934, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _933));
        float _2092;
        if (_1926 > 0.0)
        {
            _2092 = abs((1.0 - _1915) / _1926);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1915 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2092 = frontier_phi_28_24_ladder;
        }
        float _2360;
        if (_1929 > 0.0)
        {
            _2360 = abs((1.0 - _1919) / _1929);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1919 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2360 = frontier_phi_40_35_ladder;
        }
        float _2565;
        if (_1932 > 0.0)
        {
            _2565 = abs((1.0 - _1923) / _1932);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1923 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2565 = frontier_phi_49_46_ladder;
        }
        float _2567 = isnan(_2360) ? _2092 : (isnan(_2092) ? _2360 : min(_2092, _2360));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1926) + _1915;
        float _2573 = (_2568 * _1929) + _1919;
        float _2574 = (_2568 * _1932) + _1923;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1862);
            frontier_phi_25_49_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1951 = frontier_phi_25_49_ladder_2;
        _1953 = frontier_phi_25_49_ladder_1;
        _1955 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_933, _934, _935), _1862);
        _1951 = _1935.x * cbModelParam._m0[1u].z;
        _1953 = _1935.y * cbModelParam._m0[1u].z;
        _1955 = _1935.z * cbModelParam._m0[1u].z;
    }
    float _1967 = ((((1.0 - _953) * ((_941 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_953 * _941)) * _925;
    float _1968 = _1967 * ((cbModelParam._m0[1u].w * (_1951 - _1853)) + _1853);
    float _1969 = _1967 * ((cbModelParam._m0[1u].w * (_1953 - _1855)) + _1855);
    float _1970 = _1967 * ((cbModelParam._m0[1u].w * (_1955 - _1857)) + _1857);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1969, cbSceneParam._m0[89u].y, _1968 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1969, cbSceneParam._m0[90u].y, _1968 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1969, cbSceneParam._m0[91u].y, _1968 * cbSceneParam._m0[91u].x));
    vec4 _1987 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_862, _863));
    float _1989 = _1987.w;
    float _2001 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1989);
    float _2002 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1989);
    float _2003 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1989);
    uvec4 _2007 = floatBitsToUint(cbInstanceData._m0[_900 + 5u]);
    uint _2009 = _2007.x * 14u;
    uint _2010 = _2009 + 13u;
    float _2017 = _925 + (-1.0);
    float _2022 = (cbLight._m0[_2010].x * _2017) + 1.0;
    float _2023 = (cbLight._m0[_2010].y * _2017) + 1.0;
    float _2024 = (cbLight._m0[_2010].z * _2017) + 1.0;
    float _2025 = (cbLight._m0[_2010].w * _2017) + 1.0;
    uint _2026 = _2009 + 5u;
    float _2032 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2036 = _2009 + 4u;
    float _2046 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
    uint _2050 = _2009 | 1u;
    float _2061 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_763, _764, _765));
    float _2064 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_763, _764, _765));
    float _4329 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _4340 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2069 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2071 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2078 = ((cbLight._m0[_2026].x * _2032) * _2071) + (((cbLight._m0[_2036].x * _2001) * _2046) * _2069);
    float _2079 = ((_2032 * cbLight._m0[_2026].y) * _2071) + (((cbLight._m0[_2036].y * _2002) * _2046) * _2069);
    float _2080 = ((_2032 * cbLight._m0[_2026].z) * _2071) + (((cbLight._m0[_2036].z * _2003) * _2046) * _2069);
    uvec4 _2084 = floatBitsToUint(cbLight._m0[_2009 + 12u]);
    bool _2086 = _2084.x == 0u;
    float _2097;
    float _2099;
    float _2101;
    if (_2086)
    {
        _2097 = _2078;
        _2099 = _2079;
        _2101 = _2080;
    }
    else
    {
        uint _2105 = _2009 + 6u;
        float _2121 = (dot(vec3(cbLight._m0[_2009 + 2u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4351 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2124 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2097 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _2078;
        _2099 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _2079;
        _2101 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _2080;
    }
    bool _2104 = _2084.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2104)
    {
        _2142 = _2097;
        _2144 = _2099;
        _2146 = _2101;
    }
    else
    {
        uint _2304 = _2009 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_2009 + 3u].xyz), vec3(_763, _764, _765)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4367 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2323 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2142 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2097;
        _2144 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2099;
        _2146 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2101;
    }
    uint _2149 = _2009 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2009].w)) * _766) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_2009].x + _842;
    float _2165 = cbLight._m0[_2009].y + _843;
    float _2166 = cbLight._m0[_2009].z + _844;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2009].xyz));
    float _4383 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _2178 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2179 = dot(vec3(_763, _764, _765), vec3(_2171, _2172, _2173));
    float _4405 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_2009].xyz), vec3(_2171, _2172, _2173));
    float _4416 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2178 * ((_2177 * _2203) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2203) + _2163) * _2177))) * _2177;
    float _4427 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2230 = _2009 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _766) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2050].x + _842;
    float _2244 = cbLight._m0[_2050].y + _843;
    float _2245 = cbLight._m0[_2050].z + _844;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2050].xyz));
    float _4438 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2257 = dot(vec3(_763, _764, _765), vec3(_2250, _2251, _2252));
    float _4449 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2250, _2251, _2252));
    float _4460 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2242;
    float _2289 = (0.5 / (((_2178 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2279) + _2242) * _2256))) * _2256;
    float _4471 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2301 = (((_2278 * cbLight._m0[_2230].x) * _2291) * _2032) + ((((cbLight._m0[_2149].x * _2001) * _2202) * _2216) * _2046);
    float _2302 = (((_2278 * cbLight._m0[_2230].y) * _2291) * _2032) + ((((cbLight._m0[_2149].y * _2002) * _2202) * _2216) * _2046);
    float _2303 = (((_2278 * cbLight._m0[_2230].z) * _2291) * _2032) + ((((cbLight._m0[_2149].z * _2003) * _2202) * _2216) * _2046);
    float _2365;
    float _2367;
    float _2369;
    if (_2086)
    {
        _2365 = _2301;
        _2367 = _2302;
        _2369 = _2303;
    }
    else
    {
        uint _2371 = _2009 + 2u;
        uint _2375 = _2009 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _766) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _842;
        float _2392 = cbLight._m0[_2371].y + _843;
        float _2393 = cbLight._m0[_2371].z + _844;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2371].xyz));
        float _4482 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2405 = dot(vec3(_763, _764, _765), vec3(_2398, _2399, _2400));
        float _4493 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4504 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2427 = 1.0 - _2390;
        float _2437 = (0.5 / (((_2178 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2427) + _2390) * _2404))) * _2404;
        float _4515 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
        _2365 = (((_2426 * cbLight._m0[_2375].x) * _2439) * _2440) + _2301;
        _2367 = (((_2426 * cbLight._m0[_2375].y) * _2439) * _2440) + _2302;
        _2369 = (((_2426 * cbLight._m0[_2375].z) * _2439) * _2440) + _2303;
    }
    float _2475;
    float _2477;
    float _2479;
    if (_2104)
    {
        _2475 = _2365;
        _2477 = _2367;
        _2479 = _2369;
    }
    else
    {
        uint _2486 = _2009 + 3u;
        uint _2490 = _2009 + 11u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _766) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _842;
        float _2507 = cbLight._m0[_2486].y + _843;
        float _2508 = cbLight._m0[_2486].z + _844;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_763, _764, _765), vec3(cbLight._m0[_2486].xyz));
        float _4531 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2520 = dot(vec3(_763, _764, _765), vec3(_2513, _2514, _2515));
        float _4542 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4553 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2542 = 1.0 - _2505;
        float _2552 = (0.5 / (((_2178 * ((_2519 * _2542) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2542) + _2505) * _2519))) * _2519;
        float _4564 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2475 = (((_2541 * cbLight._m0[_2490].x) * _2554) * _2555) + _2365;
        _2477 = (((_2541 * cbLight._m0[_2490].y) * _2554) * _2555) + _2367;
        _2479 = (((_2541 * cbLight._m0[_2490].z) * _2554) * _2555) + _2369;
    }
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_2007.y == 0u)
    {
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2630;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2630;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2630;
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.x;
        uint _2657 = uint((float(_2645.y) * floor(float(uint(cbSceneParam._m0[85u].y * _863) / _2646))) + floor(float(uint(cbSceneParam._m0[85u].x * _862) / _2646)));
        float _2667 = (log2(_2633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        uint _2671 = uint(isnan(14.0) ? _2668 : (isnan(_2668) ? 14.0 : min(_2668, 14.0)));
        uvec4 _2676 = texelFetch(g_lightClusterGridBuffer, int(((_2671 << 2u) + (_2657 << 6u)) >> 2u));
        uint _2677 = _2676.x;
        uint _2678 = _2645.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2678 >> 4u) & 15u)) + 4294967295u) & _2677) == 0u) || ((_2678 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            float _2989 = 0.0;
            uint _2990 = 0u;
            uint _2999;
            bool _3000;
            for (;;)
            {
                _2999 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                _3000 = _2999 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3000)
                {
                    frontier_phi_66_pred = _2984;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                else
                {
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    float _3134;
                    uint _3135;
                    _3129 = _2984;
                    _3130 = _2985;
                    _3131 = _2986;
                    _3132 = _2987;
                    _3133 = _2988;
                    _3134 = _2989;
                    _3135 = _2999;
                    float _3056;
                    float _3057;
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    for (;;)
                    {
                        uint _3139 = uint(findLSB(_3135)) + (_2990 << 5u);
                        uint _3136 = (_3135 + 4294967295u) & _3135;
                        uint _3141 = _3139 * 48u;
                        vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3141)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3141 + 3u)).x));
                        uint _3161 = (_3139 * 48u) + 4u;
                        vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3161)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3161 + 3u)).x));
                        uint _3180 = (_3139 * 48u) + 8u;
                        vec3 _3191 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3180)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3180 + 2u)).x));
                        float _3195 = _3155.x - _2631;
                        float _3196 = _3155.y - _2632;
                        float _3197 = _3155.z - _2633;
                        float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                        float _3201 = inversesqrt(_3198);
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3205 = dot(vec3(_881, _884, _887), vec3(_3202, _3203, _3204));
                        float _3210 = 1.0 - (_3198 * _3155.w);
                        float _4590 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3211 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3212 = sqrt(_3198) * _3174.w;
                        float _3215 = 1.39999997615814208984375 / (_3212 + 1.39999997615814208984375);
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3205) + _3216;
                        float _3222 = _3212 * _3212;
                        float _3226 = ((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3211) / ((_3222 * 0.699999988079071044921875) + 1.0);
                        float _3230 = (-0.0) - _2631;
                        float _3231 = (-0.0) - _2632;
                        float _3232 = (-0.0) - _2633;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3237 = _3236 * _3230;
                        float _3238 = _3236 * _3231;
                        float _3239 = _3236 * _3232;
                        float _3247 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                        float _3248 = 1.0 - _941;
                        float _3255 = sqrt(1.0 - ((1.0 - (_3248 * _3248)) * (1.0 - (_3247 * _3247))));
                        float _3256 = _3255 * _3255;
                        float _3257 = _3256 * _3256;
                        float _3258 = _3237 + _3202;
                        float _3259 = _3238 + _3203;
                        float _3260 = _3239 + _3204;
                        float _3264 = inversesqrt(dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260)));
                        float _3268 = dot(vec3(_881, _884, _887), vec3(_3237, _3238, _3239));
                        float _4606 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3271 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3272 = dot(vec3(_881, _884, _887), vec3(_3264 * _3258, _3264 * _3259, _3264 * _3260));
                        float _4617 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3279 = ((_3275 * _3275) * (_3257 + (-1.0))) + 1.0;
                        float _3280 = _3215 * _3256;
                        float _3281 = _3280 * _3280;
                        float _3284 = ((1.0 - _3281) * _3205) + _3281;
                        float _4628 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3286 = 1.0 - _3256;
                        float _3296 = (0.5 / (((_3285 * ((_3271 * _3286) + _3256)) + 9.9999999392252902907785028219223e-09) + (((_3285 * _3286) + _3256) * _3271))) * _3285;
                        float _4639 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3307 = (((_3257 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3279 * _3279) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125))) * _3211;
                        _3059 = (_3226 * _3174.x) + _3132;
                        _3060 = (_3226 * _3174.y) + _3133;
                        _3061 = (_3226 * _3174.z) + _3134;
                        _3056 = (_3307 * _3191.x) + _3129;
                        _3057 = (_3307 * _3191.y) + _3130;
                        _3058 = (_3307 * _3191.z) + _3131;
                        if (_3136 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3129 = _3056;
                            _3130 = _3057;
                            _3131 = _3058;
                            _3132 = _3059;
                            _3133 = _3060;
                            _3134 = _3061;
                            _3135 = _3136;
                        }
                    }
                    frontier_phi_66_pred = _3056;
                    frontier_phi_66_pred_1 = _3061;
                    frontier_phi_66_pred_2 = _3060;
                    frontier_phi_66_pred_3 = _3059;
                    frontier_phi_66_pred_4 = _3058;
                    frontier_phi_66_pred_5 = _3057;
                }
                _2824 = frontier_phi_66_pred;
                _2834 = frontier_phi_66_pred_1;
                _2832 = frontier_phi_66_pred_2;
                _2830 = frontier_phi_66_pred_3;
                _2828 = frontier_phi_66_pred_4;
                _2826 = frontier_phi_66_pred_5;
                uint _2991 = _2990 + 1u;
                if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2984 = _2824;
                    _2985 = _2826;
                    _2986 = _2828;
                    _2987 = _2830;
                    _2988 = _2832;
                    _2989 = _2834;
                    _2990 = _2991;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        if (((4294967295u << _2840) & _2677) == 0u)
        {
            _2952 = _2823;
            _2954 = _2825;
            _2956 = _2827;
            _2958 = _2829;
            _2960 = _2831;
            _2962 = _2833;
        }
        else
        {
            float _2977 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
            float _2978 = _2977 * _2631;
            float _2979 = _2977 * _2632;
            float _2980 = _2977 * _2633;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2953;
                float _2955;
                float _2957;
                float _2959;
                float _2961;
                float _2963;
                float _3112 = _2823;
                float _3113 = _2825;
                float _3114 = _2827;
                float _3115 = _2829;
                float _3116 = _2831;
                float _3117 = _2833;
                uint _3118 = _2840;
                uint _3127;
                bool _3128;
                for (;;)
                {
                    _3127 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3118 << 2u)) >> 2u)).x;
                    _3128 = _3127 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3128)
                    {
                        frontier_phi_77_pred = _3117;
                        frontier_phi_77_pred_1 = _3116;
                        frontier_phi_77_pred_2 = _3115;
                        frontier_phi_77_pred_3 = _3114;
                        frontier_phi_77_pred_4 = _3113;
                        frontier_phi_77_pred_5 = _3112;
                    }
                    else
                    {
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3334 = _3112;
                        float _3335 = _3113;
                        float _3336 = _3114;
                        float _3337 = _3115;
                        float _3338 = _3116;
                        float _3339 = _3117;
                        uint _3340 = _3127;
                        uint _3341;
                        vec4 _3366;
                        float _3367;
                        vec4 _3382;
                        vec3 _3394;
                        vec4 _3409;
                        vec4 _3424;
                        float _3471;
                        bool _3472;
                        for (;;)
                        {
                            uint _3351 = ((_3118 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3340));
                            _3341 = (_3340 + 4294967295u) & _3340;
                            uint _3353 = _3351 * 40u;
                            _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3367 = _3366.w;
                            uint _3369 = (_3351 * 40u) + 4u;
                            _3382 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 3u)).x));
                            uint _3384 = (_3351 * 40u) + 8u;
                            _3394 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x));
                            uint _3396 = (_3351 * 40u) + 16u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3411 = (_3351 * 40u) + 20u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            uint _3427 = (_3351 * 40u) + 24u;
                            vec4 _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3446 = (_3351 * 40u) + 28u;
                            vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3446)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3446 + 3u)).x));
                            _3471 = fma(_2633, _3459.z, fma(_2632, _3459.y, _3459.x * _2631)) + _3459.w;
                            _3472 = !((fma(_2633, _3440.z, fma(_2632, _3440.y, _3440.x * _2631)) + _3440.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3472)
                            {
                                float _3499 = _3366.x - _2631;
                                float _3500 = _3366.y - _2632;
                                float _3501 = _3366.z - _2633;
                                float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                                float _3505 = inversesqrt(_3502);
                                float _3506 = _3505 * _3499;
                                float _3507 = _3505 * _3500;
                                float _3508 = _3505 * _3501;
                                float _3512 = 1.0 - (_3502 / (_3367 * _3367));
                                float _4650 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3513 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3517 = sqrt(_3502) * _3382.w;
                                float _3519 = 1.39999997615814208984375 / (_3517 + 1.39999997615814208984375);
                                float _3520 = _3519 * _3519;
                                float _3523 = ((1.0 - _3520) * dot(vec3(_3506, _3507, _3508), vec3(_881, _884, _887))) + _3520;
                                float _3526 = _3517 * _3517;
                                float _3530 = (fma(_2633, _3409.z, fma(_2632, _3409.y, _3409.x * _2631)) + _3409.w) / _3471;
                                float _3531 = (fma(_2633, _3424.z, fma(_2632, _3424.y, _3424.x * _2631)) + _3424.w) / _3471;
                                float _3535 = 1.0 - dot(vec2(_3530, _3531), vec2(_3530, _3531));
                                float _4666 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                                float _3536 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3537 = _3536 * (((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3513) / ((_3526 * 0.699999988079071044921875) + 1.0));
                                float _3549 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                                float _3550 = 1.0 - _941;
                                float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                                float _3558 = _3557 * _3557;
                                float _3559 = _3558 * _3558;
                                float _3560 = _3506 - _2978;
                                float _3561 = _3507 - _2979;
                                float _3562 = _3508 - _2980;
                                float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                                float _3570 = dot(vec3(_881, _884, _887), vec3((-0.0) - _2978, (-0.0) - _2979, (-0.0) - _2980));
                                float _4677 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                                float _3573 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3574 = dot(vec3(_881, _884, _887), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                                float _4688 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3577 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                                float _3582 = _3519 * _3558;
                                float _3583 = _3582 * _3582;
                                float _3589 = ((1.0 - _3583) * dot(vec3(_881, _884, _887), vec3(_3506, _3507, _3508))) + _3583;
                                float _4699 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                                float _3590 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3591 = 1.0 - _3558;
                                float _3601 = (0.5 / (((_3590 * ((_3573 * _3591) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3590 * _3591) + _3558) * _3573))) * _3590;
                                float _4710 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                                float _3611 = (_3536 * _3513) * (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3581 * _3581) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3537 * _3382.y;
                                frontier_phi_83_pred_1 = _3537 * _3382.x;
                                frontier_phi_83_pred_2 = _3611 * _3394.z;
                                frontier_phi_83_pred_3 = _3611 * _3394.y;
                                frontier_phi_83_pred_4 = _3611 * _3394.x;
                                frontier_phi_83_pred_5 = _3537 * _3382.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3619 = frontier_phi_83_pred;
                            _3618 = frontier_phi_83_pred_1;
                            _3617 = frontier_phi_83_pred_2;
                            _3616 = frontier_phi_83_pred_3;
                            _3615 = frontier_phi_83_pred_4;
                            _3620 = frontier_phi_83_pred_5;
                            _3324 = _3618 + _3337;
                            _3325 = _3619 + _3338;
                            _3326 = _3620 + _3339;
                            _3321 = _3615 + _3334;
                            _3322 = _3616 + _3335;
                            _3323 = _3617 + _3336;
                            if (_3341 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3334 = _3321;
                                _3335 = _3322;
                                _3336 = _3323;
                                _3337 = _3324;
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3341;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3326;
                        frontier_phi_77_pred_1 = _3325;
                        frontier_phi_77_pred_2 = _3324;
                        frontier_phi_77_pred_3 = _3323;
                        frontier_phi_77_pred_4 = _3322;
                        frontier_phi_77_pred_5 = _3321;
                    }
                    _2963 = frontier_phi_77_pred;
                    _2961 = frontier_phi_77_pred_1;
                    _2959 = frontier_phi_77_pred_2;
                    _2957 = frontier_phi_77_pred_3;
                    _2955 = frontier_phi_77_pred_4;
                    _2953 = frontier_phi_77_pred_5;
                    uint _3119 = _3118 + 1u;
                    if (_3119 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3112 = _2953;
                        _3113 = _2955;
                        _3114 = _2957;
                        _3115 = _2959;
                        _3116 = _2961;
                        _3117 = _2963;
                        _3118 = _3119;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2957;
                frontier_phi_58_59_ladder_1 = _2963;
                frontier_phi_58_59_ladder_2 = _2961;
                frontier_phi_58_59_ladder_3 = _2959;
                frontier_phi_58_59_ladder_4 = _2955;
                frontier_phi_58_59_ladder_5 = _2953;
            }
            else
            {
                frontier_phi_58_59_ladder = _2827;
                frontier_phi_58_59_ladder_1 = _2833;
                frontier_phi_58_59_ladder_2 = _2831;
                frontier_phi_58_59_ladder_3 = _2829;
                frontier_phi_58_59_ladder_4 = _2825;
                frontier_phi_58_59_ladder_5 = _2823;
            }
            _2952 = frontier_phi_58_59_ladder_5;
            _2954 = frontier_phi_58_59_ladder_4;
            _2956 = frontier_phi_58_59_ladder;
            _2958 = frontier_phi_58_59_ladder_3;
            _2960 = frontier_phi_58_59_ladder_2;
            _2962 = frontier_phi_58_59_ladder_1;
        }
        float _2967 = isnan(1.0) ? _925 : (isnan(_925) ? 1.0 : min(_925, 1.0));
        _2690 = (_2967 * _2958) + _2142;
        _2692 = (_2967 * _2960) + _2144;
        _2694 = (_2967 * _2962) + _2146;
        _2696 = ((_2952 * 0.039999999105930328369140625) * _2967) + _2475;
        _2698 = ((_2954 * 0.039999999105930328369140625) * _2967) + _2477;
        _2700 = ((_2956 * 0.039999999105930328369140625) * _2967) + _2479;
    }
    else
    {
        _2690 = _2142;
        _2692 = _2144;
        _2694 = _2146;
        _2696 = _2475;
        _2698 = _2477;
        _2700 = _2479;
    }
    uint _2706 = _901 + uint(cbMatDynParam._m0[0u].w);
    float _2712 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2718 = (((((_2712 * cbMtdParam._m0[14u].x) * _623.x) * _646) * _725) * (((1.0 - _699) * cbMtdParam._m0[20u].w) + _699)) * cbInstanceData._m0[_2706].x;
    float _2724 = (((((_2712 * cbMtdParam._m0[14u].y) * _623.y) * _646) * _725) * (((1.0 - _701) * cbMtdParam._m0[20u].w) + _701)) * cbInstanceData._m0[_2706].y;
    float _2730 = (((((_2712 * cbMtdParam._m0[14u].z) * _623.z) * _646) * _725) * (((1.0 - _703) * cbMtdParam._m0[20u].w) + _703)) * cbInstanceData._m0[_2706].z;
    float _4726 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _4737 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4748 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _2747 = (((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2690 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _925))) + ((_2696 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1762)) * cbPerFrame._m0[3u].x)) + _2718;
    float _2749 = (_2724 + ((_2698 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1762)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2692 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _925)));
    float _2751 = (_2730 + ((_2700 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1762)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2694 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _925)));
    float _2752 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
    float _2753 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2754 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
    float _2760 = cbMtdParam._m0[2u].x * _2718;
    float _2761 = cbMtdParam._m0[2u].y * _2724;
    float _2762 = cbMtdParam._m0[2u].z * _2730;
    float _4774 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2764 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    uint _2765 = _900 + 6u;
    float _2773 = _862 / cbSceneParam._m0[86u].x;
    float _2774 = _863 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _785 : (isnan(_785) ? cbSceneParam._m0[77u].w : min(_785, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_785 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_785) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _785 : min(cbSceneParam._m0[80u].w, _785));
        float _2849 = _2848 / _785;
        float _2860 = _2849 * _835;
        float _2861 = _836 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2863 = _2849 * _837;
        float _2865 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2861;
        float _2873 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3069;
        if (abs((_2862 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3069 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _3013 = 1.0 / cbSceneParam._m0[80u].x;
            float _3014 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _3015 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            float _3025 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : min(_3015, 0.0));
            _3069 = ((abs(_2873 / _2862) * cbSceneParam._m0[80u].y) * ((((_3024 - _3025) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))))) * _3013)) - ((exp2(_2883 * _3024) - exp2(_2883 * _3025)) * _3013))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3071 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3080 = exp2((_3069 * (-1.44269502162933349609375)) * (1.0 - _3071.w));
        float _3081 = log2(_3080);
        float _3097 = log2(_2793);
        _2885 = (exp2(_3097 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].x)) * _3071.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2887 = (exp2(_3097 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].y)) * _3071.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2889 = (exp2(_3097 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3081 * cbSceneParam._m0[78u].z)) * _3071.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2891 = _3080 * _2793;
    }
    else
    {
        _2885 = _2790;
        _2887 = _2791;
        _2889 = _2792;
        _2891 = _2793;
    }
    bool _3107;
    vec4 _2901;
    vec4 _2923;
    float _2925;
    float _2929;
    float _2930;
    float _2931;
    float _2934;
    float _2937;
    float _2940;
    float _2941;
    bool _2951;
    for (;;)
    {
        _2901 = cbMatDynParam._m0[0u];
        float _2903 = roundEven(_2901.y);
        bool _2904 = _2903 == 3.0;
        float _2905 = log2(_2891);
        float _2909 = exp2(_2905 * cbSceneParam._m0[78u].x);
        float _2910 = exp2(_2905 * cbSceneParam._m0[78u].y);
        float _2911 = exp2(_2905 * cbSceneParam._m0[78u].z);
        float _2912 = _2909 * _2752;
        float _2913 = _2910 * _2753;
        float _2914 = _2911 * _2754;
        float _2921 = _851 + (-0.5);
        _2923 = cbMtdParam._m0[1u];
        _2925 = _2923.y * _2921;
        float _2928 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2929 = _2928 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
        _2930 = _2928 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
        _2931 = _2928 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = ((_2760 * _2764) * _2909) * _2928;
        _2937 = ((_2761 * _2764) * _2910) * _2928;
        _2940 = ((_2762 * _2764) * _2911) * _2928;
        _2941 = _2921 * 0.999000012874603271484375;
        _2951 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2951)
        {
            if ((cbInstanceData._m0[_900 + 7u].x + _2941) < 0.5)
            {
                _3107 = true;
                break;
            }
        }
        uint _3048 = _901 + uint(_2901.w);
        if ((cbInstanceData._m0[_3048].w < 1.0) && ((cbInstanceData._m0[_3048].w + _2941) < 0.5))
        {
            _3107 = true;
            break;
        }
        if ((_2925 + 1.0) < _2923.x)
        {
            _3107 = true;
            break;
        }
        _3107 = false;
        break;
    }
    float _3312;
    if (_3107)
    {
        discard_state = true;
        _3312 = 0.0;
    }
    else
    {
        _3312 = cbInstanceData._m0[_2765].w;
    }
    SV_Target.x = _2929;
    SV_Target.y = _2930;
    SV_Target.z = _2931;
    SV_Target.w = _3312;
    SV_Target_1.x = _2934;
    SV_Target_1.y = _2937;
    SV_Target_1.z = _2940;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
    discard_exit();
}


