#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1407;
float _4103;
float _4104;
float _4105;
float _4106;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _276 = _270.x * cbMtdParam._m0[10u].x;
    float _277 = _270.y * cbMtdParam._m0[10u].y;
    float _278 = _270.z * cbMtdParam._m0[10u].z;
    vec4 _297 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _316 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _343 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _353 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _316.x) * 2.0) - _343)) + 1.0;
    float _4115 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _361 = (_354 * ((_297.x * cbMtdParam._m0[11u].x) - _276)) + _276;
    float _362 = (_354 * ((_297.y * cbMtdParam._m0[11u].y) - _277)) + _277;
    float _363 = (_354 * ((_297.z * cbMtdParam._m0[11u].z) - _278)) + _278;
    vec4 _382 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _395 = (((((1.0 - _316.y) * 2.0) - _343) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4126 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _396 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _403 = (((_382.x * cbMtdParam._m0[12u].x) - _361) * _396) + _361;
    float _404 = (_396 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _405 = (_396 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _423 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _436 = (((((1.0 - _316.z) * 2.0) - _343) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4137 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    vec4 _465 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _473 = ((((((_423.x * cbMtdParam._m0[13u].x) - _403) * _437) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _465.x;
    float _476 = ((((_437 * ((_423.y * cbMtdParam._m0[13u].y) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _465.y;
    float _479 = ((((_437 * ((_423.z * cbMtdParam._m0[13u].z) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _465.z;
    vec4 _505 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _524 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _527 = _524.x + 0.00999999977648258209228515625;
    float _534 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _527)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4148 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _542 = (_535 * ((_505.x * cbMtdParam._m0[16u].x) - _473)) + _473;
    float _543 = (_535 * ((_505.y * cbMtdParam._m0[16u].y) - _476)) + _476;
    float _544 = (_535 * ((_505.z * cbMtdParam._m0[16u].z) - _479)) + _479;
    vec4 _557 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _578 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _580 = _578.x;
    float _581 = _578.y;
    float _582 = _578.z;
    vec4 _594 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _605 = ((_594.x - _580) * _354) + _580;
    float _606 = ((_594.y - _581) * _354) + _581;
    float _607 = ((_594.z - _582) * _354) + _582;
    vec4 _620 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _631 = ((_620.x - _605) * _396) + _605;
    float _632 = ((_620.y - _606) * _396) + _606;
    float _633 = ((_620.z - _607) * _396) + _607;
    vec4 _646 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _659 = ((_646.z - _633) * _437) + _633;
    float _662 = ((((_646.x - _631) * _437) + _631) * 2.0) + (-1.0);
    float _663 = ((((_646.y - _632) * _437) + _632) * 2.0) + (-1.0);
    float _664 = dot(vec2(_662, _663), vec2(_662, _663));
    float _4159 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))));
    float _674 = (((_557.z - _659) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _659;
    vec4 _704 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _718 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4170 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _719 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _727 = (((_719 * _719) * (3.0 - (_719 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _735 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _743 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4181 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _744 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _748 = (_744 * _744) * (3.0 - (_744 * 2.0));
    float _749 = _748 * cbMtdParam._m0[22u].x;
    float _750 = _748 * cbMtdParam._m0[22u].y;
    float _751 = sin(_735);
    float _752 = cos(_735);
    float _753 = TEXCOORD.z - _749;
    float _754 = TEXCOORD.w - _750;
    vec4 _774 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_749 + fma(_754, (-0.0) - _751, _753 * _752))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_754, _752, _753 * _751) + _750)) + cbTextureTilingScale._m0[2u].w));
    float _780 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _774.x;
    float _782 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _774.y;
    float _784 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _774.z;
    float _800 = (TEXCOORD_5.x - ((_527 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4192 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    vec4 _814 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _830 = (((((_557.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _662) + (((_814.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _832 = (((((_557.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _663) + (((_814.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _835 = fma(_669, _241 * NORMAL.x, fma(_832, _248 * TANGENT.x, (_234 * _226) * _830));
    float _838 = fma(_669, _241 * NORMAL.y, fma(_832, _248 * TANGENT.y, (_234 * _227) * _830));
    float _841 = fma(_669, _241 * NORMAL.z, fma(_832, _248 * TANGENT.z, (_234 * _228) * _830));
    float _845 = inversesqrt(dot(vec3(_835, _838, _841), vec3(_835, _838, _841)));
    float _846 = _845 * _835;
    float _847 = _845 * _838;
    float _848 = _845 * _841;
    float _4203 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _849 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
    float _4214 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _4225 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _4236 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _868 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _908);
    float _919 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1087 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1093 = (cbMatDynParam._m0[5u].x * _1087) + cbMatDynParam._m0[5u].y;
        float _4247 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1098 = (cbMatDynParam._m0[5u].z * _1087) + cbMatDynParam._m0[5u].w;
        float _4258 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) - _1094)) + _1094) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _964 = fma(_848, cbSceneParam._m0[5u].z, fma(_847, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _846));
    float _967 = fma(_848, cbSceneParam._m0[6u].z, fma(_847, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _846));
    float _970 = fma(_848, cbSceneParam._m0[7u].z, fma(_847, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _846));
    uint _983 = uint(roundEven(NORMAL.w)) * 13u;
    uint _984 = _983 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) * cbInstanceData._m0[_985].z;
    float _4269 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _4280 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    vec4 _1005 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1008 = _1005.x * TEXCOORD_5.w;
    float _1009 = dot(vec3(_846, _847, _848), vec3(_925, _926, _927));
    float _1012 = _1009 * 2.0;
    float _1016 = (_1012 * _846) - _925;
    float _1017 = (_1012 * _847) - _926;
    float _1018 = (_1012 * _848) - _927;
    float _1022 = abs(dot(vec3(_925, _926, _927), vec3(_846, _847, _848)));
    float _4302 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1024 = sqrt(_849);
    float _1036 = exp2((_1024 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1024 * 3.0));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1406;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1131 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1135 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1139 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1164 = _1068 + _846;
        float _1165 = _1072 + _847;
        float _1166 = _1076 + _848;
        float _1176 = fma(_1166, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1164)) - _1131;
        float _1177 = fma(_1166, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1164)) - _1135;
        float _1178 = fma(_1166, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1164)) - _1139;
        float _1182 = inversesqrt(dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178)));
        float _1195 = ((_1182 * _1176) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1131 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1182 * _1177) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1135 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1182 * _1178) / cbModelParam._m0[34u].z) + ((((((_1139 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1195, _1196, _1197), 0.0);
        float _1234 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1200.x + (-0.5));
        float _1236 = _1234 * (_1200.y + (-0.5));
        float _1237 = _1234 * (_1200.z + (-0.5));
        float _1244 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1207.x + (-0.5));
        float _1246 = _1244 * (_1207.y + (-0.5));
        float _1247 = _1244 * (_1207.z + (-0.5));
        float _1254 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1214.x + (-0.5));
        float _1256 = _1254 * (_1214.y + (-0.5));
        float _1257 = _1254 * (_1214.z + (-0.5));
        float _1264 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1221.x + (-0.5));
        float _1266 = _1264 * (_1221.y + (-0.5));
        float _1267 = _1264 * (_1221.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1288 = (dot(vec3(_846, _847, _848), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1298 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4350 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1300 + 1.0))) + _1305) * _1268;
        float _1315 = _1236 * 0.5;
        float _1316 = _1246 * 0.5;
        float _1317 = _1256 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_846, _847, _848), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4383 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1342 + 1.0))) + _1347) * _1269;
        float _1357 = _1237 * 0.5;
        float _1358 = _1247 * 0.5;
        float _1359 = _1257 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_846, _847, _848), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _4416 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1384 + 1.0))) + _1389) * _1270;
        _1406 = _1237;
        _1408 = _1236;
        _1409 = _1235;
        _1410 = _1247;
        _1411 = _1246;
        _1412 = _1245;
        _1413 = _1257;
        _1414 = _1256;
        _1415 = _1255;
        _1416 = _1270;
        _1417 = _1269;
        _1418 = _1268;
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1421 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1407;
        _1408 = _1407;
        _1409 = _1407;
        _1410 = _1407;
        _1411 = _1407;
        _1412 = _1407;
        _1413 = _1407;
        _1414 = _1407;
        _1415 = _1407;
        _1416 = _1407;
        _1417 = _1407;
        _1418 = _1407;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1450 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1454 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1458 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1481 = _1068 + _846;
        float _1482 = _1072 + _847;
        float _1483 = _1076 + _848;
        float _1493 = fma(_1483, cbModelParam._m0[30u].z, fma(_1482, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1481)) - _1450;
        float _1494 = fma(_1483, cbModelParam._m0[31u].z, fma(_1482, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1481)) - _1454;
        float _1495 = fma(_1483, cbModelParam._m0[32u].z, fma(_1482, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1481)) - _1458;
        float _1499 = inversesqrt(dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495)));
        float _1512 = ((_1499 * _1493) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1450 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1513 = ((_1499 * _1494) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1454 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1514 = ((_1499 * _1495) / cbModelParam._m0[35u].z) + ((((((_1458 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1523 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1530 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        vec4 _1537 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1512, _1513, _1514), 0.0);
        float _1549 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1516.x + (-0.5));
        float _1551 = _1549 * (_1516.y + (-0.5));
        float _1552 = _1549 * (_1516.z + (-0.5));
        float _1559 = exp2((_1523.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1523.x + (-0.5));
        float _1561 = _1559 * (_1523.y + (-0.5));
        float _1562 = _1559 * (_1523.z + (-0.5));
        float _1569 = exp2((_1530.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1530.x + (-0.5));
        float _1571 = _1569 * (_1530.y + (-0.5));
        float _1572 = _1569 * (_1530.z + (-0.5));
        float _1579 = exp2((_1537.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1537.x + (-0.5));
        float _1581 = _1579 * (_1537.y + (-0.5));
        float _1582 = _1579 * (_1537.z + (-0.5));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1586 = _1550 * 0.5;
        float _1587 = _1560 * 0.5;
        float _1588 = _1570 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_846, _847, _848), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4479 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1613 + 1.0))) + _1618) * _1583;
        float _1628 = _1551 * 0.5;
        float _1629 = _1561 * 0.5;
        float _1630 = _1571 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_846, _847, _848), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4512 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1655 + 1.0))) + _1660) * _1584;
        float _1670 = _1552 * 0.5;
        float _1671 = _1562 * 0.5;
        float _1672 = _1572 * 0.5;
        float _1673 = dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672));
        float _1678 = (_1673 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1673);
        float _1686 = (dot(vec3(_846, _847, _848), vec3(_1678 * _1670, _1678 * _1671, _1678 * _1672)) + 1.0) * 0.5;
        float _4523 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1695 = sqrt(((_1671 * _1671) + (_1670 * _1670)) + (_1672 * _1672)) / (_1585 + 9.9999997473787516355514526367188e-06);
        float _4534 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
        float _1697 = _1696 * 2.0;
        float _1701 = (1.0 - _1696) / (_1696 + 1.0);
        float _4545 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1702 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _1711 = ((((1.0 - _1702) * (_1697 + 2.0)) * exp2(log2(isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_1697 + 1.0))) + _1702) * _1585;
        _1719 = _1552;
        _1720 = _1551;
        _1721 = _1550;
        _1722 = _1562;
        _1723 = _1561;
        _1724 = _1560;
        _1725 = _1572;
        _1726 = _1571;
        _1727 = _1570;
        _1728 = _1585;
        _1729 = _1584;
        _1730 = _1583;
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1732 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
        _1733 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)));
    }
    else
    {
        _1719 = _1407;
        _1720 = _1407;
        _1721 = _1407;
        _1722 = _1407;
        _1723 = _1407;
        _1724 = _1407;
        _1725 = _1407;
        _1726 = _1407;
        _1727 = _1407;
        _1728 = _1407;
        _1729 = _1407;
        _1730 = _1407;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1419)) + _1419;
    float _1744 = (cbModelParam._m0[1u].x * (_1732 - _1420)) + _1420;
    float _1745 = (cbModelParam._m0[1u].x * (_1733 - _1421)) + _1421;
    float _1766 = fma(_1745, cbSceneParam._m0[89u].z, fma(_1744, cbSceneParam._m0[89u].y, _1743 * cbSceneParam._m0[89u].x));
    float _1769 = fma(_1745, cbSceneParam._m0[90u].z, fma(_1744, cbSceneParam._m0[90u].y, _1743 * cbSceneParam._m0[90u].x));
    float _1772 = fma(_1745, cbSceneParam._m0[91u].z, fma(_1744, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1743));
    float _1787 = _1016 * 0.5;
    float _1788 = _1017 * 0.5;
    float _1789 = _1018 * 0.5;
    float _1790 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1721, _1724, _1727, _1730));
    float _1793 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1720, _1723, _1726, _1729));
    float _1796 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1803 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1406, _1410, _1413, _1416));
        float _1807 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1811 = dot(vec4(_1787, _1788, _1789, 1.0), vec4(_1409, _1412, _1415, _1418));
        float _1818 = dot(vec4(cbModelParam._m0[39u]), vec4(_1787, _1788, _1789, 1.0));
        _1830 = dot(vec3(isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1818) ? 0.0 : (isnan(0.0) ? _1818 : max(0.0, _1818))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1830 = 1.0;
    }
    float _1841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1832 = dot(vec4(cbModelParam._m0[40u]), vec4(_1787, _1788, _1789, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)), isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1832) ? 0.0 : (isnan(0.0) ? _1832 : max(0.0, _1832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1845 = (_1841 * cbModelParam._m0[1u].x) + (_1830 * (1.0 - cbModelParam._m0[1u].x));
    float _1855 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _849);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1855 : min(cbModelParam._m0[25u].z, _1855));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1903 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1907 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1911 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1914 = fma(_1018, cbModelParam._m0[13u].z, fma(_1017, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1016));
        float _1917 = fma(_1018, cbModelParam._m0[14u].z, fma(_1017, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1016));
        float _1920 = fma(_1018, cbModelParam._m0[15u].z, fma(_1017, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1016));
        float _1948;
        if (_1914 > 0.0)
        {
            _1948 = abs((1.0 - _1903) / _1914);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1903 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1948 = frontier_phi_17_15_ladder;
        }
        float _2117;
        if (_1917 > 0.0)
        {
            _2117 = abs((1.0 - _1907) / _1917);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1907 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2117 = frontier_phi_26_22_ladder;
        }
        float _2412;
        if (_1920 > 0.0)
        {
            _2412 = abs((1.0 - _1911) / _1920);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1911 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2412 = frontier_phi_38_33_ladder;
        }
        float _2414 = isnan(_2117) ? _1948 : (isnan(_1948) ? _2117 : min(_1948, _2117));
        float _2415 = isnan(_2412) ? _2414 : (isnan(_2414) ? _2412 : min(_2414, _2412));
        float _2419 = (_2415 * _1914) + _1903;
        float _2420 = (_2415 * _1917) + _1907;
        float _2421 = (_2415 * _1920) + _1911;
        float _2422 = _2415 * 9.9999997473787516355514526367188e-05;
        float _2424 = (-1.0) - _2422;
        float _2426 = _2422 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2421 > _2426) || ((_2421 < _2424) || ((_2420 > _2426) || ((_2420 < _2424) || ((_2419 < _2424) || (_2419 > _2426))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2566 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2421, cbModelParam._m0[9u].z, fma(_2420, cbModelParam._m0[9u].y, _2419 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2421, cbModelParam._m0[10u].z, fma(_2420, cbModelParam._m0[10u].y, _2419 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2421, cbModelParam._m0[11u].z, fma(_2420, cbModelParam._m0[11u].y, _2419 * cbModelParam._m0[11u].x))), _1856);
            frontier_phi_16_38_ladder = _2566.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2566.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2566.x * cbModelParam._m0[1u].y;
        }
        _1936 = frontier_phi_16_38_ladder_2;
        _1938 = frontier_phi_16_38_ladder_1;
        _1940 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1016, _1017, _1018), _1856);
        _1936 = _1924.x * cbModelParam._m0[1u].y;
        _1938 = _1924.y * cbModelParam._m0[1u].y;
        _1940 = _1924.z * cbModelParam._m0[1u].y;
    }
    float _1944 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _849);
    float _1945 = isnan(_1944) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1944 : min(cbModelParam._m0[25u].w, _1944));
    float _2034;
    float _2036;
    float _2038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1998 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _2002 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _2006 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _2009 = fma(_1018, cbModelParam._m0[21u].z, fma(_1017, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1016));
        float _2012 = fma(_1018, cbModelParam._m0[22u].z, fma(_1017, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1016));
        float _2015 = fma(_1018, cbModelParam._m0[23u].z, fma(_1017, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1016));
        float _2122;
        if (_2009 > 0.0)
        {
            _2122 = abs((1.0 - _1998) / _2009);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1998 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2122 = frontier_phi_28_24_ladder;
        }
        float _2439;
        if (_2012 > 0.0)
        {
            _2439 = abs((1.0 - _2002) / _2012);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2002 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2439 = frontier_phi_40_35_ladder;
        }
        float _2766;
        if (_2015 > 0.0)
        {
            _2766 = abs((1.0 - _2006) / _2015);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2015 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2006 + 1.0) / _2015);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2766 = frontier_phi_50_47_ladder;
        }
        float _2768 = isnan(_2439) ? _2122 : (isnan(_2122) ? _2439 : min(_2122, _2439));
        float _2769 = isnan(_2766) ? _2768 : (isnan(_2768) ? _2766 : min(_2768, _2766));
        float _2773 = (_2769 * _2009) + _1998;
        float _2774 = (_2769 * _2012) + _2002;
        float _2775 = (_2769 * _2015) + _2006;
        float _2776 = _2769 * 9.9999997473787516355514526367188e-05;
        float _2777 = (-1.0) - _2776;
        float _2779 = _2776 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2775 > _2779) || ((_2775 < _2777) || ((_2774 > _2779) || ((_2774 < _2777) || ((_2773 < _2777) || (_2773 > _2779))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2775, cbModelParam._m0[17u].z, fma(_2774, cbModelParam._m0[17u].y, _2773 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2775, cbModelParam._m0[18u].z, fma(_2774, cbModelParam._m0[18u].y, _2773 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2775, cbModelParam._m0[19u].z, fma(_2774, cbModelParam._m0[19u].y, _2773 * cbModelParam._m0[19u].x))), _1945);
            frontier_phi_25_50_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2034 = frontier_phi_25_50_ladder_2;
        _2036 = frontier_phi_25_50_ladder_1;
        _2038 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1016, _1017, _1018), _1945);
        _2034 = _2018.x * cbModelParam._m0[1u].z;
        _2036 = _2018.y * cbModelParam._m0[1u].z;
        _2038 = _2018.z * cbModelParam._m0[1u].z;
    }
    float _2050 = ((((1.0 - _1036) * ((_1024 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1036 * _1024)) * _1008;
    float _2051 = _2050 * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2052 = _2050 * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2053 = _2050 * ((cbModelParam._m0[1u].w * (_2038 - _1940)) + _1940);
    float _2056 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2059 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2062 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, _2051 * cbSceneParam._m0[91u].x));
    float _2096 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2100 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2104 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2108 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2109 = _2096 / _2108;
    float _2110 = _2100 / _2108;
    float _2111 = _2104 / _2108;
    float _2258;
    float _2259;
    float _2260;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2138 = ((uint(_2111 > cbSceneParam._m0[59u].y) + uint(_2111 > cbSceneParam._m0[59u].x)) + uint(_2111 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2139 = _2138 + 43u;
        uint _2147 = _2138 + 44u;
        uint _2155 = _2138 + 45u;
        uint _2163 = _2138 + 46u;
        float _2174 = fma(_2108, cbSceneParam._m0[_2139].w, fma(_2104, cbSceneParam._m0[_2139].z, fma(_2100, cbSceneParam._m0[_2139].y, _2096 * cbSceneParam._m0[_2139].x)));
        float _2178 = fma(_2108, cbSceneParam._m0[_2147].w, fma(_2104, cbSceneParam._m0[_2147].z, fma(_2100, cbSceneParam._m0[_2147].y, _2096 * cbSceneParam._m0[_2147].x)));
        float _2186 = fma(_2108, cbSceneParam._m0[_2163].w, fma(_2104, cbSceneParam._m0[_2163].z, fma(_2100, cbSceneParam._m0[_2163].y, _2096 * cbSceneParam._m0[_2163].x)));
        float _2191 = cbSceneParam._m0[33u].z * _2186;
        float _2193 = cbSceneParam._m0[33u].w * _2186;
        float _2196 = fma(_2108, cbSceneParam._m0[_2155].w, fma(_2104, cbSceneParam._m0[_2155].z, fma(_2100, cbSceneParam._m0[_2155].y, _2096 * cbSceneParam._m0[_2155].x))) / _2186;
        float _2244 = (cbSceneParam._m0[33u].x - sqrt(((_2110 * _2110) + (_2109 * _2109)) + (_2111 * _2111))) * cbSceneParam._m0[33u].y;
        float _4671 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
        float _2251 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2191 + _2174) / _2186, (_2193 + _2178) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2193 + _2174) / _2186, (_2178 - _2191) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 - _2191) / _2186, (_2178 - _2193) / _2186), _2196), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 - _2193) / _2186, (_2191 + _2178) / _2186), _2196), 0.0)).x), vec4(0.25)));
        _2258 = 1.0 - (_2251 * cbSceneParam._m0[34u].x);
        _2259 = 1.0 - (_2251 * cbSceneParam._m0[34u].y);
        _2260 = 1.0 - (_2251 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2258 = 1.0;
        _2259 = 1.0;
        _2260 = 1.0;
    }
    float _2324;
    float _2326;
    float _2328;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2312 = fma(_2108, cbSceneParam._m0[63u].w, fma(_2104, cbSceneParam._m0[63u].z, fma(_2100, cbSceneParam._m0[63u].y, _2096 * cbSceneParam._m0[63u].x)));
        float _2313 = fma(_2108, cbSceneParam._m0[60u].w, fma(_2104, cbSceneParam._m0[60u].z, fma(_2100, cbSceneParam._m0[60u].y, _2096 * cbSceneParam._m0[60u].x))) / _2312;
        float _2314 = fma(_2108, cbSceneParam._m0[61u].w, fma(_2104, cbSceneParam._m0[61u].z, fma(_2100, cbSceneParam._m0[61u].y, _2096 * cbSceneParam._m0[61u].x))) / _2312;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2313 >= cbSceneParam._m0[64u].x) && (_2314 >= cbSceneParam._m0[64u].y)) && (_2313 <= cbSceneParam._m0[64u].z)) && (_2314 <= cbSceneParam._m0[64u].w))
        {
            float _2452 = fma(_2108, cbSceneParam._m0[62u].w, fma(_2104, cbSceneParam._m0[62u].z, fma(_2100, cbSceneParam._m0[62u].y, _2096 * cbSceneParam._m0[62u].x))) / _2312;
            float _2456 = isnan(cbSceneParam._m0[41u].w) ? _2452 : (isnan(_2452) ? cbSceneParam._m0[41u].w : max(_2452, cbSceneParam._m0[41u].w));
            float _2499 = (cbSceneParam._m0[33u].x - sqrt(((_2110 * _2110) + (_2109 * _2109)) + (_2111 * _2111))) * cbSceneParam._m0[33u].y;
            float _4687 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
            float _2506 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2313, cbSceneParam._m0[33u].w + _2314), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2313, _2314 - cbSceneParam._m0[33u].z), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2313 - cbSceneParam._m0[33u].z, _2314 - cbSceneParam._m0[33u].w), _2456), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2313 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2314), _2456), 0.0)).x), vec4(0.25)));
            float _2510 = 1.0 - (_2506 * cbSceneParam._m0[34u].x);
            float _2511 = 1.0 - (_2506 * cbSceneParam._m0[34u].y);
            float _2512 = 1.0 - (_2506 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2512) ? _2260 : (isnan(_2260) ? _2512 : min(_2260, _2512));
            frontier_phi_37_36_ladder_1 = isnan(_2511) ? _2259 : (isnan(_2259) ? _2511 : min(_2259, _2511));
            frontier_phi_37_36_ladder_2 = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
        }
        else
        {
            frontier_phi_37_36_ladder = _2260;
            frontier_phi_37_36_ladder_1 = _2259;
            frontier_phi_37_36_ladder_2 = _2258;
        }
        _2324 = frontier_phi_37_36_ladder_2;
        _2326 = frontier_phi_37_36_ladder_1;
        _2328 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2324 = _2258;
        _2326 = _2259;
        _2328 = _2260;
    }
    uvec4 _2333 = floatBitsToUint(cbInstanceData._m0[_983 + 5u]);
    uint _2335 = _2333.x * 14u;
    uint _2336 = _2335 + 13u;
    float _2343 = _1008 + (-1.0);
    float _2348 = (cbLight._m0[_2336].x * _2343) + 1.0;
    float _2349 = (cbLight._m0[_2336].y * _2343) + 1.0;
    float _2350 = (cbLight._m0[_2336].z * _2343) + 1.0;
    float _2351 = (cbLight._m0[_2336].w * _2343) + 1.0;
    uint _2352 = _2335 + 5u;
    float _2358 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2362 = _2335 + 4u;
    float _2371 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2375 = _2335 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_846, _847, _848));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_846, _847, _848));
    float _4723 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4734 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2352].x * _2358) * _2396) + (((cbLight._m0[_2362].x * _2324) * _2371) * _2394);
    float _2404 = ((_2358 * cbLight._m0[_2352].y) * _2396) + (((cbLight._m0[_2362].y * _2326) * _2371) * _2394);
    float _2405 = ((_2358 * cbLight._m0[_2352].z) * _2396) + (((cbLight._m0[_2362].z * _2328) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2335 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2513;
    float _2515;
    float _2517;
    if (_2411)
    {
        _2513 = _2403;
        _2515 = _2404;
        _2517 = _2405;
    }
    else
    {
        uint _2521 = _2335 + 6u;
        float _2537 = (dot(vec3(cbLight._m0[_2335 + 2u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4745 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
        float _2540 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2513 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2403;
        _2515 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2404;
        _2517 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2405;
    }
    bool _2520 = _2409.y == 0u;
    float _2575;
    float _2577;
    float _2579;
    if (_2520)
    {
        _2575 = _2513;
        _2577 = _2515;
        _2579 = _2517;
    }
    else
    {
        uint _2737 = _2335 + 7u;
        float _2753 = (dot(vec3(cbLight._m0[_2335 + 3u].xyz), vec3(_846, _847, _848)) * 0.5) + 0.5;
        float _2754 = _2753 * _2753;
        float _4761 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2755 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _2756 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2575 = (((cbLight._m0[_2737].x * 0.3183098733425140380859375) * _2755) * _2756) + _2513;
        _2577 = (((cbLight._m0[_2737].y * 0.3183098733425140380859375) * _2755) * _2756) + _2515;
        _2579 = (((cbLight._m0[_2737].z * 0.3183098733425140380859375) * _2755) * _2756) + _2517;
    }
    uint _2582 = _2335 + 8u;
    float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _849) * 0.949999988079071044921875);
    float _2596 = _2595 * _2595;
    float _2597 = cbLight._m0[_2335].x + _925;
    float _2598 = cbLight._m0[_2335].y + _926;
    float _2599 = cbLight._m0[_2335].z + _927;
    float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
    float _2604 = _2603 * _2597;
    float _2605 = _2603 * _2598;
    float _2606 = _2603 * _2599;
    float _2607 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2335].xyz));
    float _4777 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2610 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
    float _4788 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _2611 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
    float _2612 = dot(vec3(_846, _847, _848), vec3(_2604, _2605, _2606));
    float _4799 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
    float _2615 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2616 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2604, _2605, _2606));
    float _4810 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2620 = _2596 * _2596;
    float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
    float _2635 = (exp2(log2(1.0 - (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2636 = 1.0 - _2596;
    float _2647 = (0.5 / (((_2611 * ((_2610 * _2636) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2636) + _2596) * _2610))) * _2610;
    float _4821 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2649 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
    uint _2663 = _2335 + 9u;
    float _2674 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _849) * 0.949999988079071044921875);
    float _2675 = _2674 * _2674;
    float _2676 = cbLight._m0[_2375].x + _925;
    float _2677 = cbLight._m0[_2375].y + _926;
    float _2678 = cbLight._m0[_2375].z + _927;
    float _2682 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
    float _2683 = _2682 * _2676;
    float _2684 = _2682 * _2677;
    float _2685 = _2682 * _2678;
    float _2686 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2375].xyz));
    float _4832 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2689 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
    float _2690 = dot(vec3(_846, _847, _848), vec3(_2683, _2684, _2685));
    float _4843 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2693 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
    float _2694 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2683, _2684, _2685));
    float _4854 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2698 = _2675 * _2675;
    float _2702 = ((_2693 * _2693) * (_2698 + (-1.0))) + 1.0;
    float _2711 = (exp2(log2(1.0 - (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2712 = 1.0 - _2675;
    float _2722 = (0.5 / (((_2611 * ((_2689 * _2712) + _2675)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2712) + _2675) * _2689))) * _2689;
    float _4865 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2724 = (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2698 / ((_2702 * _2702) * 3.141590118408203125));
    float _2734 = (((_2711 * cbLight._m0[_2663].x) * _2724) * _2358) + ((((cbLight._m0[_2582].x * _2324) * _2635) * _2649) * _2371);
    float _2735 = (((_2711 * cbLight._m0[_2663].y) * _2724) * _2358) + ((((cbLight._m0[_2582].y * _2326) * _2635) * _2649) * _2371);
    float _2736 = (((_2711 * cbLight._m0[_2663].z) * _2724) * _2358) + ((((cbLight._m0[_2582].z * _2328) * _2635) * _2649) * _2371);
    float _2792;
    float _2794;
    float _2796;
    if (_2411)
    {
        _2792 = _2734;
        _2794 = _2735;
        _2796 = _2736;
    }
    else
    {
        uint _2798 = _2335 + 2u;
        uint _2802 = _2335 + 10u;
        float _2816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2798].w)) * _849) * 0.949999988079071044921875);
        float _2817 = _2816 * _2816;
        float _2818 = cbLight._m0[_2798].x + _925;
        float _2819 = cbLight._m0[_2798].y + _926;
        float _2820 = cbLight._m0[_2798].z + _927;
        float _2824 = inversesqrt(dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820)));
        float _2825 = _2824 * _2818;
        float _2826 = _2824 * _2819;
        float _2827 = _2824 * _2820;
        float _2828 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2798].xyz));
        float _4876 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
        float _2831 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2832 = dot(vec3(_846, _847, _848), vec3(_2825, _2826, _2827));
        float _4887 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2836 = dot(vec3(cbLight._m0[_2798].xyz), vec3(_2825, _2826, _2827));
        float _4898 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2840 = _2817 * _2817;
        float _2844 = ((_2835 * _2835) * (_2840 + (-1.0))) + 1.0;
        float _2853 = (exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2854 = 1.0 - _2817;
        float _2864 = (0.5 / (((_2611 * ((_2831 * _2854) + _2817)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2854) + _2817) * _2831))) * _2831;
        float _4909 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2866 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2840 / ((_2844 * _2844) * 3.141590118408203125));
        float _2867 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2792 = (((_2853 * cbLight._m0[_2802].x) * _2866) * _2867) + _2734;
        _2794 = (((_2853 * cbLight._m0[_2802].y) * _2866) * _2867) + _2735;
        _2796 = (((_2853 * cbLight._m0[_2802].z) * _2866) * _2867) + _2736;
    }
    float _2898;
    float _2900;
    float _2902;
    if (_2520)
    {
        _2898 = _2792;
        _2900 = _2794;
        _2902 = _2796;
    }
    else
    {
        uint _2909 = _2335 + 3u;
        uint _2913 = _2335 + 11u;
        float _2927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2909].w)) * _849) * 0.949999988079071044921875);
        float _2928 = _2927 * _2927;
        float _2929 = cbLight._m0[_2909].x + _925;
        float _2930 = cbLight._m0[_2909].y + _926;
        float _2931 = cbLight._m0[_2909].z + _927;
        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
        float _2936 = _2935 * _2929;
        float _2937 = _2935 * _2930;
        float _2938 = _2935 * _2931;
        float _2939 = dot(vec3(_846, _847, _848), vec3(cbLight._m0[_2909].xyz));
        float _4925 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2942 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
        float _2943 = dot(vec3(_846, _847, _848), vec3(_2936, _2937, _2938));
        float _4936 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
        float _2946 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
        float _2947 = dot(vec3(cbLight._m0[_2909].xyz), vec3(_2936, _2937, _2938));
        float _4947 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        float _2951 = _2928 * _2928;
        float _2955 = ((_2946 * _2946) * (_2951 + (-1.0))) + 1.0;
        float _2964 = (exp2(log2(1.0 - (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2965 = 1.0 - _2928;
        float _2975 = (0.5 / (((_2611 * ((_2942 * _2965) + _2928)) + 9.9999999392252902907785028219223e-09) + (((_2611 * _2965) + _2928) * _2942))) * _2942;
        float _4958 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2977 = (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2951 / ((_2955 * _2955) * 3.141590118408203125));
        float _2978 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2898 = (((_2964 * cbLight._m0[_2913].x) * _2977) * _2978) + _2792;
        _2900 = (((_2964 * cbLight._m0[_2913].y) * _2977) * _2978) + _2794;
        _2902 = (((_2964 * cbLight._m0[_2913].z) * _2977) * _2978) + _2796;
    }
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    if (_2333.y == 0u)
    {
        uvec4 _2999 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3000 = _2999.x;
        uint _3011 = uint((float(_2999.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _3000))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _3000)));
        float _3021 = (log2(_2111 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3022 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        uint _3025 = uint(isnan(14.0) ? _3022 : (isnan(_3022) ? 14.0 : min(_3022, 14.0)));
        uvec4 _3030 = texelFetch(g_lightClusterGridBuffer, int(((_3025 << 2u) + (_3011 << 6u)) >> 2u));
        uint _3031 = _3030.x;
        uint _3032 = _2999.z;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        float _3164;
        float _3166;
        if (((((1u << ((_3032 >> 4u) & 15u)) + 4294967295u) & _3031) == 0u) || ((_3032 & 240u) == 0u))
        {
            _3156 = 0.0;
            _3158 = 0.0;
            _3160 = 0.0;
            _3162 = 0.0;
            _3164 = 0.0;
            _3166 = 0.0;
        }
        else
        {
            float _3157;
            float _3159;
            float _3161;
            float _3163;
            float _3165;
            float _3167;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            float _3320 = 0.0;
            float _3321 = 0.0;
            float _3322 = 0.0;
            uint _3323 = 0u;
            uint _3332;
            bool _3333;
            for (;;)
            {
                _3332 = texelFetch(g_lightClassification, int((((_3025 << 5u) + (_3011 << 9u)) + (_3323 << 2u)) >> 2u)).x;
                _3333 = _3332 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3333)
                {
                    frontier_phi_71_pred = _3322;
                    frontier_phi_71_pred_1 = _3321;
                    frontier_phi_71_pred_2 = _3320;
                    frontier_phi_71_pred_3 = _3319;
                    frontier_phi_71_pred_4 = _3318;
                    frontier_phi_71_pred_5 = _3317;
                }
                else
                {
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    float _3467;
                    uint _3468;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3320;
                    _3466 = _3321;
                    _3467 = _3322;
                    _3468 = _3332;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3472 = uint(findLSB(_3468)) + (_3323 << 5u);
                        uint _3469 = (_3468 + 4294967295u) & _3468;
                        uint _3474 = _3472 * 48u;
                        vec4 _3488 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3474)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3474 + 3u)).x));
                        uint _3494 = (_3472 * 48u) + 4u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3494)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3494 + 3u)).x));
                        uint _3513 = (_3472 * 48u) + 8u;
                        vec3 _3524 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x));
                        float _3528 = _3488.x - _2109;
                        float _3529 = _3488.y - _2110;
                        float _3530 = _3488.z - _2111;
                        float _3531 = dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530));
                        float _3534 = inversesqrt(_3531);
                        float _3535 = _3534 * _3528;
                        float _3536 = _3534 * _3529;
                        float _3537 = _3534 * _3530;
                        float _3538 = dot(vec3(_964, _967, _970), vec3(_3535, _3536, _3537));
                        float _3543 = 1.0 - (_3531 * _3488.w);
                        float _4984 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                        float _3545 = sqrt(_3531) * _3507.w;
                        float _3548 = 1.39999997615814208984375 / (_3545 + 1.39999997615814208984375);
                        float _3549 = _3548 * _3548;
                        float _3552 = ((1.0 - _3549) * _3538) + _3549;
                        float _3555 = _3545 * _3545;
                        float _3559 = ((isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0))) * _3544) / ((_3555 * 0.699999988079071044921875) + 1.0);
                        float _3563 = (-0.0) - _2109;
                        float _3564 = (-0.0) - _2110;
                        float _3565 = (-0.0) - _2111;
                        float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                        float _3570 = _3569 * _3563;
                        float _3571 = _3569 * _3564;
                        float _3572 = _3569 * _3565;
                        float _3579 = exp2(log2(1.0 / ((_3555 * 3.5) + 5.0)) * 0.25);
                        float _3580 = 1.0 - _1024;
                        float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                        float _3588 = _3587 * _3587;
                        float _3589 = _3588 * _3588;
                        float _3590 = _3570 + _3535;
                        float _3591 = _3571 + _3536;
                        float _3592 = _3572 + _3537;
                        float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                        float _3600 = dot(vec3(_964, _967, _970), vec3(_3570, _3571, _3572));
                        float _5000 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                        float _3604 = dot(vec3(_964, _967, _970), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                        float _5011 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3607 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                        float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                        float _3612 = _3548 * _3588;
                        float _3613 = _3612 * _3612;
                        float _3616 = ((1.0 - _3613) * _3538) + _3613;
                        float _5022 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3617 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                        float _3618 = 1.0 - _3588;
                        float _3628 = (0.5 / (((_3617 * ((_3603 * _3618) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3617 * _3618) + _3588) * _3603))) * _3617;
                        float _5033 = isnan(0.0) ? _3628 : (isnan(_3628) ? 0.0 : max(_3628, 0.0));
                        float _3639 = (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0)))) / ((_3611 * _3611) * ((_3555 * 2.1991131305694580078125) + 3.141590118408203125))) * _3544;
                        _3392 = (_3559 * _3507.x) + _3465;
                        _3393 = (_3559 * _3507.y) + _3466;
                        _3394 = (_3559 * _3507.z) + _3467;
                        _3389 = (_3639 * _3524.x) + _3462;
                        _3390 = (_3639 * _3524.y) + _3463;
                        _3391 = (_3639 * _3524.z) + _3464;
                        if (_3469 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3392;
                            _3466 = _3393;
                            _3467 = _3394;
                            _3468 = _3469;
                        }
                    }
                    frontier_phi_71_pred = _3394;
                    frontier_phi_71_pred_1 = _3393;
                    frontier_phi_71_pred_2 = _3392;
                    frontier_phi_71_pred_3 = _3391;
                    frontier_phi_71_pred_4 = _3390;
                    frontier_phi_71_pred_5 = _3389;
                }
                _3167 = frontier_phi_71_pred;
                _3165 = frontier_phi_71_pred_1;
                _3163 = frontier_phi_71_pred_2;
                _3161 = frontier_phi_71_pred_3;
                _3159 = frontier_phi_71_pred_4;
                _3157 = frontier_phi_71_pred_5;
                uint _3324 = _3323 + 1u;
                if (_3324 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3317 = _3157;
                    _3318 = _3159;
                    _3319 = _3161;
                    _3320 = _3163;
                    _3321 = _3165;
                    _3322 = _3167;
                    _3323 = _3324;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3156 = _3157;
            _3158 = _3159;
            _3160 = _3161;
            _3162 = _3163;
            _3164 = _3165;
            _3166 = _3167;
        }
        uvec4 _3170 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3171 = _3170.z;
        uint _3173 = (_3171 >> 8u) & 15u;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        float _3293;
        float _3295;
        if (((4294967295u << _3173) & _3031) == 0u)
        {
            _3285 = _3156;
            _3287 = _3158;
            _3289 = _3160;
            _3291 = _3162;
            _3293 = _3164;
            _3295 = _3166;
        }
        else
        {
            float _3310 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
            float _3311 = _3310 * _2109;
            float _3312 = _3310 * _2110;
            float _3313 = _3310 * _2111;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3173 < ((_3171 >> 12u) & 15u))
            {
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3294;
                float _3296;
                float _3445 = _3156;
                float _3446 = _3158;
                float _3447 = _3160;
                float _3448 = _3162;
                float _3449 = _3164;
                float _3450 = _3166;
                uint _3451 = _3173;
                uint _3460;
                bool _3461;
                for (;;)
                {
                    _3460 = texelFetch(g_lightClassification, int((((_3025 << 5u) + (_3011 << 9u)) + (_3451 << 2u)) >> 2u)).x;
                    _3461 = _3460 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3461)
                    {
                        frontier_phi_82_pred = _3450;
                        frontier_phi_82_pred_1 = _3449;
                        frontier_phi_82_pred_2 = _3448;
                        frontier_phi_82_pred_3 = _3447;
                        frontier_phi_82_pred_4 = _3446;
                        frontier_phi_82_pred_5 = _3445;
                    }
                    else
                    {
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3950;
                        float _3951;
                        float _3952;
                        float _3666 = _3445;
                        float _3667 = _3446;
                        float _3668 = _3447;
                        float _3669 = _3448;
                        float _3670 = _3449;
                        float _3671 = _3450;
                        uint _3672 = _3460;
                        uint _3673;
                        vec4 _3698;
                        float _3699;
                        vec4 _3714;
                        vec3 _3726;
                        vec4 _3741;
                        vec4 _3756;
                        float _3803;
                        bool _3804;
                        for (;;)
                        {
                            uint _3683 = ((_3451 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3672));
                            _3673 = (_3672 + 4294967295u) & _3672;
                            uint _3685 = _3683 * 40u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            _3699 = _3698.w;
                            uint _3701 = (_3683 * 40u) + 4u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3683 * 40u) + 8u;
                            _3726 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x));
                            uint _3728 = (_3683 * 40u) + 16u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3683 * 40u) + 20u;
                            _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3759 = (_3683 * 40u) + 24u;
                            vec4 _3772 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3759)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3759 + 3u)).x));
                            uint _3778 = (_3683 * 40u) + 28u;
                            vec4 _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            _3803 = fma(_2111, _3791.z, fma(_2110, _3791.y, _3791.x * _2109)) + _3791.w;
                            _3804 = !((fma(_2111, _3772.z, fma(_2110, _3772.y, _3772.x * _2109)) + _3772.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3804)
                            {
                                float _3831 = _3698.x - _2109;
                                float _3832 = _3698.y - _2110;
                                float _3833 = _3698.z - _2111;
                                float _3834 = dot(vec3(_3831, _3832, _3833), vec3(_3831, _3832, _3833));
                                float _3837 = inversesqrt(_3834);
                                float _3838 = _3837 * _3831;
                                float _3839 = _3837 * _3832;
                                float _3840 = _3837 * _3833;
                                float _3844 = 1.0 - (_3834 / (_3699 * _3699));
                                float _5044 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3845 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3849 = sqrt(_3834) * _3714.w;
                                float _3851 = 1.39999997615814208984375 / (_3849 + 1.39999997615814208984375);
                                float _3852 = _3851 * _3851;
                                float _3855 = ((1.0 - _3852) * dot(vec3(_3838, _3839, _3840), vec3(_964, _967, _970))) + _3852;
                                float _3858 = _3849 * _3849;
                                float _3862 = (fma(_2111, _3741.z, fma(_2110, _3741.y, _3741.x * _2109)) + _3741.w) / _3803;
                                float _3863 = (fma(_2111, _3756.z, fma(_2110, _3756.y, _3756.x * _2109)) + _3756.w) / _3803;
                                float _3867 = 1.0 - dot(vec2(_3862, _3863), vec2(_3862, _3863));
                                float _5060 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3868 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3869 = _3868 * (((isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0))) * _3845) / ((_3858 * 0.699999988079071044921875) + 1.0));
                                float _3881 = exp2(log2(1.0 / ((_3858 * 3.5) + 5.0)) * 0.25);
                                float _3882 = 1.0 - _1024;
                                float _3889 = sqrt(1.0 - ((1.0 - (_3882 * _3882)) * (1.0 - (_3881 * _3881))));
                                float _3890 = _3889 * _3889;
                                float _3891 = _3890 * _3890;
                                float _3892 = _3838 - _3311;
                                float _3893 = _3839 - _3312;
                                float _3894 = _3840 - _3313;
                                float _3898 = inversesqrt(dot(vec3(_3892, _3893, _3894), vec3(_3892, _3893, _3894)));
                                float _3902 = dot(vec3(_964, _967, _970), vec3((-0.0) - _3311, (-0.0) - _3312, (-0.0) - _3313));
                                float _5071 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3905 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                                float _3906 = dot(vec3(_964, _967, _970), vec3(_3898 * _3892, _3898 * _3893, _3898 * _3894));
                                float _5082 = isnan(0.0) ? _3906 : (isnan(_3906) ? 0.0 : max(_3906, 0.0));
                                float _3909 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                                float _3913 = ((_3909 * _3909) * (_3891 + (-1.0))) + 1.0;
                                float _3914 = _3851 * _3890;
                                float _3915 = _3914 * _3914;
                                float _3921 = ((1.0 - _3915) * dot(vec3(_964, _967, _970), vec3(_3838, _3839, _3840))) + _3915;
                                float _5093 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                                float _3923 = 1.0 - _3890;
                                float _3933 = (0.5 / (((_3922 * ((_3905 * _3923) + _3890)) + 9.9999999392252902907785028219223e-09) + (((_3922 * _3923) + _3890) * _3905))) * _3922;
                                float _5104 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3943 = (_3868 * _3845) * (((_3891 * 3.1415927410125732421875) * (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) / ((_3913 * _3913) * ((_3858 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3869 * _3714.z;
                                frontier_phi_88_pred_1 = _3869 * _3714.y;
                                frontier_phi_88_pred_2 = _3869 * _3714.x;
                                frontier_phi_88_pred_3 = _3943 * _3726.z;
                                frontier_phi_88_pred_4 = _3943 * _3726.y;
                                frontier_phi_88_pred_5 = _3943 * _3726.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3952 = frontier_phi_88_pred;
                            _3951 = frontier_phi_88_pred_1;
                            _3950 = frontier_phi_88_pred_2;
                            _3949 = frontier_phi_88_pred_3;
                            _3948 = frontier_phi_88_pred_4;
                            _3947 = frontier_phi_88_pred_5;
                            _3656 = _3950 + _3669;
                            _3657 = _3951 + _3670;
                            _3658 = _3952 + _3671;
                            _3653 = _3947 + _3666;
                            _3654 = _3948 + _3667;
                            _3655 = _3949 + _3668;
                            if (_3673 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3657;
                                _3671 = _3658;
                                _3672 = _3673;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3658;
                        frontier_phi_82_pred_1 = _3657;
                        frontier_phi_82_pred_2 = _3656;
                        frontier_phi_82_pred_3 = _3655;
                        frontier_phi_82_pred_4 = _3654;
                        frontier_phi_82_pred_5 = _3653;
                    }
                    _3296 = frontier_phi_82_pred;
                    _3294 = frontier_phi_82_pred_1;
                    _3292 = frontier_phi_82_pred_2;
                    _3290 = frontier_phi_82_pred_3;
                    _3288 = frontier_phi_82_pred_4;
                    _3286 = frontier_phi_82_pred_5;
                    uint _3452 = _3451 + 1u;
                    if (_3452 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3445 = _3286;
                        _3446 = _3288;
                        _3447 = _3290;
                        _3448 = _3292;
                        _3449 = _3294;
                        _3450 = _3296;
                        _3451 = _3452;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3292;
                frontier_phi_63_64_ladder_1 = _3296;
                frontier_phi_63_64_ladder_2 = _3294;
                frontier_phi_63_64_ladder_3 = _3290;
                frontier_phi_63_64_ladder_4 = _3288;
                frontier_phi_63_64_ladder_5 = _3286;
            }
            else
            {
                frontier_phi_63_64_ladder = _3162;
                frontier_phi_63_64_ladder_1 = _3166;
                frontier_phi_63_64_ladder_2 = _3164;
                frontier_phi_63_64_ladder_3 = _3160;
                frontier_phi_63_64_ladder_4 = _3158;
                frontier_phi_63_64_ladder_5 = _3156;
            }
            _3285 = frontier_phi_63_64_ladder_5;
            _3287 = frontier_phi_63_64_ladder_4;
            _3289 = frontier_phi_63_64_ladder_3;
            _3291 = frontier_phi_63_64_ladder;
            _3293 = frontier_phi_63_64_ladder_2;
            _3295 = frontier_phi_63_64_ladder_1;
        }
        float _3300 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
        _3044 = (_3300 * _3291) + _2575;
        _3046 = (_3300 * _3293) + _2577;
        _3048 = (_3300 * _3295) + _2579;
        _3050 = ((_3285 * 0.039999999105930328369140625) * _3300) + _2898;
        _3052 = ((_3287 * 0.039999999105930328369140625) * _3300) + _2900;
        _3054 = ((_3289 * 0.039999999105930328369140625) * _3300) + _2902;
    }
    else
    {
        _3044 = _2575;
        _3046 = _2577;
        _3048 = _2579;
        _3050 = _2898;
        _3052 = _2900;
        _3054 = _2902;
    }
    uint _3060 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _3066 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _3072 = (((((_3066 * cbMtdParam._m0[14u].x) * _704.x) * _727) * _801) * (((1.0 - _780) * cbMtdParam._m0[20u].w) + _780)) * cbInstanceData._m0[_3060].x;
    float _3078 = (((((_3066 * cbMtdParam._m0[14u].y) * _704.y) * _727) * _801) * (((1.0 - _782) * cbMtdParam._m0[20u].w) + _782)) * cbInstanceData._m0[_3060].y;
    float _3084 = (((((_3066 * cbMtdParam._m0[14u].z) * _704.z) * _727) * _801) * (((1.0 - _784) * cbMtdParam._m0[20u].w) + _784)) * cbInstanceData._m0[_3060].z;
    float _5120 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _5131 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _5142 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _3101 = (((isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0))) * (_3044 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1008))) + ((_3050 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1845)) * cbPerFrame._m0[3u].x)) + _3072;
    float _3103 = (_3078 + ((_3052 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1845)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0))) * (_3046 + ((isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0))) * _1008)));
    float _3105 = (_3084 + ((_3054 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1845)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0))) * (_3048 + ((isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))) * _1008)));
    float _3106 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
    float _3107 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
    float _3108 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
    float _3114 = cbMtdParam._m0[2u].x * _3072;
    float _3115 = cbMtdParam._m0[2u].y * _3078;
    float _3116 = cbMtdParam._m0[2u].z * _3084;
    float _5168 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3118 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
    uint _3119 = _983 + 6u;
    float _3127 = _945 / cbSceneParam._m0[86u].x;
    float _3128 = _946 / cbSceneParam._m0[86u].y;
    vec4 _3142 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, (log2((isnan(cbSceneParam._m0[77u].w) ? _868 : (isnan(_868) ? cbSceneParam._m0[77u].w : min(_868, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3144 = _3142.x;
    float _3145 = _3142.y;
    float _3146 = _3142.z;
    float _3147 = _3142.w;
    float _3218;
    float _3220;
    float _3222;
    float _3224;
    if (_868 > cbSceneParam._m0[78u].w)
    {
        float _3181 = isnan(_868) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _868 : min(cbSceneParam._m0[80u].w, _868));
        float _3182 = _3181 / _868;
        float _3193 = _3182 * _918;
        float _3194 = _919 * _3182;
        float _3195 = (-0.0) - _3194;
        float _3196 = _3182 * _920;
        float _3198 = (cbSceneParam._m0[77u].w * _3195) / _3181;
        float _3199 = _3198 + cbSceneParam._m0[79u].w;
        float _3200 = cbSceneParam._m0[79u].w - _3194;
        float _3206 = sqrt(((_3193 * _3193) + (_3194 * _3194)) + (_3196 * _3196));
        float _3209 = (1.0 - (cbSceneParam._m0[77u].w / _3181)) * _3206;
        float _3214 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3216 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3402;
        if (abs((_3195 - _3198) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3402 = ((((_3199 > 0.0) ? exp2(_3214 * _3199) : (2.0 - exp2(_3216 * _3199))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3209;
        }
        else
        {
            float _3346 = 1.0 / cbSceneParam._m0[80u].x;
            float _3347 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : max(_3199, _3200));
            float _3348 = isnan(_3200) ? _3199 : (isnan(_3199) ? _3200 : min(_3199, _3200));
            float _3357 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : min(_3347, 0.0));
            float _3358 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : min(_3348, 0.0));
            _3402 = ((abs(_3206 / _3195) * cbSceneParam._m0[80u].y) * ((((_3357 - _3358) * 2.0) - ((exp2(_3214 * (isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0)))) - exp2(_3214 * (isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0))))) * _3346)) - ((exp2(_3216 * _3357) - exp2(_3216 * _3358)) * _3346))) + (_3209 * cbSceneParam._m0[80u].z);
        }
        vec4 _3404 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3127, _3128, 1.0), 0.0);
        float _3413 = exp2((_3402 * (-1.44269502162933349609375)) * (1.0 - _3404.w));
        float _3414 = log2(_3413);
        float _3430 = log2(_3147);
        _3218 = (exp2(_3430 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].x)) * _3404.x) / cbSceneParam._m0[78u].x)) + _3144;
        _3220 = (exp2(_3430 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].y)) * _3404.y) / cbSceneParam._m0[78u].y)) + _3145;
        _3222 = (exp2(_3430 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].z)) * _3404.z) / cbSceneParam._m0[78u].z)) + _3146;
        _3224 = _3413 * _3147;
    }
    else
    {
        _3218 = _3144;
        _3220 = _3145;
        _3222 = _3146;
        _3224 = _3147;
    }
    bool _3440;
    vec4 _3234;
    vec4 _3256;
    float _3258;
    float _3262;
    float _3263;
    float _3264;
    float _3267;
    float _3270;
    float _3273;
    float _3274;
    bool _3284;
    for (;;)
    {
        _3234 = cbMatDynParam._m0[0u];
        float _3236 = roundEven(_3234.y);
        bool _3237 = _3236 == 3.0;
        float _3238 = log2(_3224);
        float _3242 = exp2(_3238 * cbSceneParam._m0[78u].x);
        float _3243 = exp2(_3238 * cbSceneParam._m0[78u].y);
        float _3244 = exp2(_3238 * cbSceneParam._m0[78u].z);
        float _3245 = _3242 * _3106;
        float _3246 = _3243 * _3107;
        float _3247 = _3244 * _3108;
        float _3254 = _934 + (-0.5);
        _3256 = cbMtdParam._m0[1u];
        _3258 = _3256.y * _3254;
        float _3261 = (_3236 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3262 = _3261 * (_3237 ? _3245 : (_3245 + (cbSceneParam._m0[72u].w * _3218)));
        _3263 = _3261 * (_3237 ? _3246 : (_3246 + (cbSceneParam._m0[72u].w * _3220)));
        _3264 = _3261 * (_3237 ? _3247 : (_3247 + (cbSceneParam._m0[72u].w * _3222)));
        _3267 = ((_3114 * _3118) * _3242) * _3261;
        _3270 = ((_3115 * _3118) * _3243) * _3261;
        _3273 = ((_3116 * _3118) * _3244) * _3261;
        _3274 = _3254 * 0.999000012874603271484375;
        _3284 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3284)
        {
            if ((cbInstanceData._m0[_983 + 7u].x + _3274) < 0.5)
            {
                _3440 = true;
                break;
            }
        }
        uint _3381 = _984 + uint(_3234.w);
        if ((cbInstanceData._m0[_3381].w < 1.0) && ((cbInstanceData._m0[_3381].w + _3274) < 0.5))
        {
            _3440 = true;
            break;
        }
        if ((_3258 + 1.0) < _3256.x)
        {
            _3440 = true;
            break;
        }
        _3440 = false;
        break;
    }
    float _3644;
    if (_3440)
    {
        discard_state = true;
        _3644 = 0.0;
    }
    else
    {
        _3644 = cbInstanceData._m0[_3119].w;
    }
    SV_Target.x = _3262;
    SV_Target.y = _3263;
    SV_Target.z = _3264;
    SV_Target.w = _3644;
    SV_Target_1.x = _3267;
    SV_Target_1.y = _3270;
    SV_Target_1.z = _3273;
    SV_Target_1.w = cbInstanceData._m0[_3119].w;
    discard_exit();
}


