#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1330;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _291 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _310 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _347 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _310.x) * 2.0) - _337)) + 1.0;
    float _3972 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _355 = (_348 * ((_291.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _356 = (_348 * ((_291.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _357 = (_348 * ((_291.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _376 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _389 = (((((1.0 - _310.y) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3983 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _355) * _390) + _355;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _417 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _430 = (((((1.0 - _310.z) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3994 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    float _438 = (((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397;
    float _439 = (_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398;
    float _440 = (_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399;
    vec4 _467 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _486 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _489 = _486.x + 0.00999999977648258209228515625;
    float _496 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _489)) * (cbMtdParam._m0[19u].w + 1.0);
    float _4005 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _504 = (_497 * ((_467.x * cbMtdParam._m0[16u].x) - _438)) + _438;
    float _505 = (_497 * ((_467.y * cbMtdParam._m0[16u].y) - _439)) + _439;
    float _506 = (_497 * ((_467.z * cbMtdParam._m0[16u].z) - _440)) + _440;
    vec4 _519 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _540 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _542 = _540.x;
    float _543 = _540.y;
    float _544 = _540.z;
    vec4 _556 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _567 = ((_556.x - _542) * _348) + _542;
    float _568 = ((_556.y - _543) * _348) + _543;
    float _569 = ((_556.z - _544) * _348) + _544;
    vec4 _582 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _593 = ((_582.x - _567) * _390) + _567;
    float _594 = ((_582.y - _568) * _390) + _568;
    float _595 = ((_582.z - _569) * _390) + _569;
    vec4 _608 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _621 = ((_608.z - _595) * _431) + _595;
    float _624 = ((((_608.x - _593) * _431) + _593) * 2.0) + (-1.0);
    float _625 = ((((_608.y - _594) * _431) + _594) * 2.0) + (-1.0);
    float _626 = dot(vec2(_624, _625), vec2(_624, _625));
    float _4016 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _631 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    float _636 = (((_519.z - _621) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _621;
    vec4 _666 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _680 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4027 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _689 = (((_681 * _681) * (3.0 - (_681 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _697 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _705 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4038 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _710 = (_706 * _706) * (3.0 - (_706 * 2.0));
    float _711 = _710 * cbMtdParam._m0[22u].x;
    float _712 = _710 * cbMtdParam._m0[22u].y;
    float _713 = sin(_697);
    float _714 = cos(_697);
    float _715 = TEXCOORD.z - _711;
    float _716 = TEXCOORD.w - _712;
    vec4 _736 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_711 + fma(_716, (-0.0) - _713, _715 * _714))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_716, _714, _715 * _713) + _712)) + cbTextureTilingScale._m0[2u].w));
    float _742 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _736.x;
    float _744 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _736.y;
    float _746 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _736.z;
    float _762 = (TEXCOORD_5.x - ((_489 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4049 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _763 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    vec4 _776 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _792 = (((((_519.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _624) + (((_776.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _794 = (((((_519.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _625) + (((_776.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _797 = fma(_631, _235 * NORMAL.x, fma(_794, _242 * TANGENT.x, (_228 * _220) * _792));
    float _800 = fma(_631, _235 * NORMAL.y, fma(_794, _242 * TANGENT.y, (_228 * _221) * _792));
    float _803 = fma(_631, _235 * NORMAL.z, fma(_794, _242 * TANGENT.z, (_228 * _222) * _792));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _4060 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _811 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _4082 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _4093 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _918 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _921 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _934 = uint(roundEven(NORMAL.w)) * 13u;
    uint _935 = _934 + 9u;
    uint _936 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _942 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_936].x;
    float _943 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0)))) * cbInstanceData._m0[_936].y;
    float _944 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * cbInstanceData._m0[_936].z;
    float _4104 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    vec4 _956 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _959 = _956.x * TEXCOORD_5.w;
    float _960 = dot(vec3(_808, _809, _810), vec3(_887, _888, _889));
    float _963 = _960 * 2.0;
    float _967 = (_963 * _808) - _887;
    float _968 = (_963 * _809) - _888;
    float _969 = (_963 * _810) - _889;
    float _973 = abs(dot(vec3(_887, _888, _889), vec3(_808, _809, _810)));
    float _4137 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _975 = sqrt(_811);
    float _987 = exp2((_975 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_975 * 3.0));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1329;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1054 = fma(_1027, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1019));
        float _1058 = fma(_1027, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1019));
        float _1062 = fma(_1027, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1019));
        float _1087 = _1019 + _808;
        float _1088 = _1023 + _809;
        float _1089 = _1027 + _810;
        float _1099 = fma(_1089, cbModelParam._m0[26u].z, fma(_1088, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1087)) - _1054;
        float _1100 = fma(_1089, cbModelParam._m0[27u].z, fma(_1088, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1087)) - _1058;
        float _1101 = fma(_1089, cbModelParam._m0[28u].z, fma(_1088, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1087)) - _1062;
        float _1105 = inversesqrt(dot(vec3(_1099, _1100, _1101), vec3(_1099, _1100, _1101)));
        float _1118 = ((_1105 * _1099) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1054 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1119 = ((_1105 * _1100) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1058 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1105 * _1101) / cbModelParam._m0[34u].z) + ((((((_1062 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1118, _1119, _1120), 0.0);
        float _1157 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1123.x + (-0.5));
        float _1159 = _1157 * (_1123.y + (-0.5));
        float _1160 = _1157 * (_1123.z + (-0.5));
        float _1167 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1130.x + (-0.5));
        float _1169 = _1167 * (_1130.y + (-0.5));
        float _1170 = _1167 * (_1130.z + (-0.5));
        float _1177 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1137.x + (-0.5));
        float _1179 = _1177 * (_1137.y + (-0.5));
        float _1180 = _1177 * (_1137.z + (-0.5));
        float _1187 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1144.x + (-0.5));
        float _1189 = _1187 * (_1144.y + (-0.5));
        float _1190 = _1187 * (_1144.z + (-0.5));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = _1158 * 0.5;
        float _1195 = _1168 * 0.5;
        float _1196 = _1178 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1211 = (dot(vec3(_808, _809, _810), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1221 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _4185 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1223 + 1.0))) + _1228) * _1191;
        float _1238 = _1159 * 0.5;
        float _1239 = _1169 * 0.5;
        float _1240 = _1179 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_808, _809, _810), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _4196 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4207 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _4218 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_1265 + 1.0))) + _1270) * _1192;
        float _1280 = _1160 * 0.5;
        float _1281 = _1170 * 0.5;
        float _1282 = _1180 * 0.5;
        float _1283 = dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282));
        float _1288 = (_1283 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1283);
        float _1296 = (dot(vec3(_808, _809, _810), vec3(_1288 * _1280, _1288 * _1281, _1288 * _1282)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1305 = sqrt(((_1281 * _1281) + (_1280 * _1280)) + (_1282 * _1282)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1307 = _1306 * 2.0;
        float _1311 = (1.0 - _1306) / (_1306 + 1.0);
        float _4251 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1321 = ((((1.0 - _1312) * (_1307 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1307 + 1.0))) + _1312) * _1193;
        _1329 = _1160;
        _1331 = _1159;
        _1332 = _1158;
        _1333 = _1170;
        _1334 = _1169;
        _1335 = _1168;
        _1336 = _1180;
        _1337 = _1179;
        _1338 = _1178;
        _1339 = _1193;
        _1340 = _1192;
        _1341 = _1191;
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0)));
    }
    else
    {
        _1329 = _1330;
        _1331 = _1330;
        _1332 = _1330;
        _1333 = _1330;
        _1334 = _1330;
        _1335 = _1330;
        _1336 = _1330;
        _1337 = _1330;
        _1338 = _1330;
        _1339 = _1330;
        _1340 = _1330;
        _1341 = _1330;
        _1342 = 0.0;
        _1343 = 0.0;
        _1344 = 0.0;
    }
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1370 = fma(_1027, cbModelParam._m0[30u].z, fma(_1023, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1019));
        float _1374 = fma(_1027, cbModelParam._m0[31u].z, fma(_1023, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1019));
        float _1378 = fma(_1027, cbModelParam._m0[32u].z, fma(_1023, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1019));
        float _1401 = _1019 + _808;
        float _1402 = _1023 + _809;
        float _1403 = _1027 + _810;
        float _1413 = fma(_1403, cbModelParam._m0[30u].z, fma(_1402, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401)) - _1370;
        float _1414 = fma(_1403, cbModelParam._m0[31u].z, fma(_1402, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401)) - _1374;
        float _1415 = fma(_1403, cbModelParam._m0[32u].z, fma(_1402, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401)) - _1378;
        float _1419 = inversesqrt(dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415)));
        float _1432 = ((_1419 * _1413) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1370 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1433 = ((_1419 * _1414) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1374 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1434 = ((_1419 * _1415) / cbModelParam._m0[35u].z) + ((((((_1378 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1432, _1433, _1434), 0.0);
        float _1469 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1436.x + (-0.5));
        float _1471 = _1469 * (_1436.y + (-0.5));
        float _1472 = _1469 * (_1436.z + (-0.5));
        float _1479 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1443.x + (-0.5));
        float _1481 = _1479 * (_1443.y + (-0.5));
        float _1482 = _1479 * (_1443.z + (-0.5));
        float _1489 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1450.x + (-0.5));
        float _1491 = _1489 * (_1450.y + (-0.5));
        float _1492 = _1489 * (_1450.z + (-0.5));
        float _1499 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1457.x + (-0.5));
        float _1501 = _1499 * (_1457.y + (-0.5));
        float _1502 = _1499 * (_1457.z + (-0.5));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = _1470 * 0.5;
        float _1507 = _1480 * 0.5;
        float _1508 = _1490 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_808, _809, _810), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4314 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1533 + 1.0))) + _1538) * _1503;
        float _1548 = _1471 * 0.5;
        float _1549 = _1481 * 0.5;
        float _1550 = _1491 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_808, _809, _810), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4325 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1504 + 9.9999997473787516355514526367188e-06);
        float _4336 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4347 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_1575 + 1.0))) + _1580) * _1504;
        float _1590 = _1472 * 0.5;
        float _1591 = _1482 * 0.5;
        float _1592 = _1492 * 0.5;
        float _1593 = dot(vec3(_1590, _1591, _1592), vec3(_1590, _1591, _1592));
        float _1598 = (_1593 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1593);
        float _1606 = (dot(vec3(_808, _809, _810), vec3(_1598 * _1590, _1598 * _1591, _1598 * _1592)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1615 = sqrt(((_1591 * _1591) + (_1590 * _1590)) + (_1592 * _1592)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1617 = _1616 * 2.0;
        float _1621 = (1.0 - _1616) / (_1616 + 1.0);
        float _4380 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1631 = ((((1.0 - _1622) * (_1617 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1617 + 1.0))) + _1622) * _1505;
        _1639 = _1472;
        _1640 = _1471;
        _1641 = _1470;
        _1642 = _1482;
        _1643 = _1481;
        _1644 = _1480;
        _1645 = _1492;
        _1646 = _1491;
        _1647 = _1490;
        _1648 = _1505;
        _1649 = _1504;
        _1650 = _1503;
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1652 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0)));
    }
    else
    {
        _1639 = _1330;
        _1640 = _1330;
        _1641 = _1330;
        _1642 = _1330;
        _1643 = _1330;
        _1644 = _1330;
        _1645 = _1330;
        _1646 = _1330;
        _1647 = _1330;
        _1648 = _1330;
        _1649 = _1330;
        _1650 = _1330;
        _1651 = 0.0;
        _1652 = 0.0;
        _1653 = 0.0;
    }
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1664 = (cbModelParam._m0[1u].x * (_1652 - _1343)) + _1343;
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1344)) + _1344;
    float _1686 = fma(_1665, cbSceneParam._m0[89u].z, fma(_1664, cbSceneParam._m0[89u].y, _1663 * cbSceneParam._m0[89u].x));
    float _1689 = fma(_1665, cbSceneParam._m0[90u].z, fma(_1664, cbSceneParam._m0[90u].y, _1663 * cbSceneParam._m0[90u].x));
    float _1692 = fma(_1665, cbSceneParam._m0[91u].z, fma(_1664, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1663));
    float _1707 = _967 * 0.5;
    float _1708 = _968 * 0.5;
    float _1709 = _969 * 0.5;
    float _1710 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1713 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1640, _1643, _1646, _1649));
    float _1716 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1750;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1723 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1329, _1333, _1336, _1339));
        float _1727 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1331, _1334, _1337, _1340));
        float _1731 = dot(vec4(_1707, _1708, _1709, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1738 = dot(vec4(cbModelParam._m0[39u]), vec4(_1707, _1708, _1709, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1738) ? 0.0 : (isnan(0.0) ? _1738 : max(0.0, _1738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1761;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1752 = dot(vec4(cbModelParam._m0[40u]), vec4(_1707, _1708, _1709, 1.0));
        _1761 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1761 = 1.0;
    }
    float _1765 = (_1761 * cbModelParam._m0[1u].x) + (_1750 * (1.0 - cbModelParam._m0[1u].x));
    float _1775 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1776 = isnan(_1775) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1775 : min(cbModelParam._m0[25u].z, _1775));
    float _1856;
    float _1858;
    float _1860;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1823 = fma(_1027, cbModelParam._m0[13u].z, fma(_1023, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1019)) + cbModelParam._m0[13u].w;
        float _1827 = fma(_1027, cbModelParam._m0[14u].z, fma(_1023, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1019)) + cbModelParam._m0[14u].w;
        float _1831 = fma(_1027, cbModelParam._m0[15u].z, fma(_1023, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1019)) + cbModelParam._m0[15u].w;
        float _1834 = fma(_969, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967));
        float _1837 = fma(_969, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967));
        float _1840 = fma(_969, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967));
        float _1868;
        if (_1834 > 0.0)
        {
            _1868 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1868 = frontier_phi_14_12_ladder;
        }
        float _2037;
        if (_1837 > 0.0)
        {
            _2037 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2037 = frontier_phi_23_19_ladder;
        }
        float _2332;
        if (_1840 > 0.0)
        {
            _2332 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2332 = frontier_phi_35_30_ladder;
        }
        float _2334 = isnan(_2037) ? _1868 : (isnan(_1868) ? _2037 : min(_1868, _2037));
        float _2335 = isnan(_2332) ? _2334 : (isnan(_2334) ? _2332 : min(_2334, _2332));
        float _2339 = (_2335 * _1834) + _1823;
        float _2340 = (_2335 * _1837) + _1827;
        float _2341 = (_2335 * _1840) + _1831;
        float _2342 = _2335 * 9.9999997473787516355514526367188e-05;
        float _2344 = (-1.0) - _2342;
        float _2346 = _2342 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2341 > _2346) || ((_2341 < _2344) || ((_2340 > _2346) || ((_2340 < _2344) || ((_2339 < _2344) || (_2339 > _2346))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2341, cbModelParam._m0[9u].z, fma(_2340, cbModelParam._m0[9u].y, _2339 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2341, cbModelParam._m0[10u].z, fma(_2340, cbModelParam._m0[10u].y, _2339 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2341, cbModelParam._m0[11u].z, fma(_2340, cbModelParam._m0[11u].y, _2339 * cbModelParam._m0[11u].x))), _1776);
            frontier_phi_13_35_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1856 = frontier_phi_13_35_ladder_2;
        _1858 = frontier_phi_13_35_ladder_1;
        _1860 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1844 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_967, _968, _969), _1776);
        _1856 = _1844.x * cbModelParam._m0[1u].y;
        _1858 = _1844.y * cbModelParam._m0[1u].y;
        _1860 = _1844.z * cbModelParam._m0[1u].y;
    }
    float _1864 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1864 : min(cbModelParam._m0[25u].w, _1864));
    float _1954;
    float _1956;
    float _1958;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1918 = fma(_1027, cbModelParam._m0[21u].z, fma(_1023, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1019)) + cbModelParam._m0[21u].w;
        float _1922 = fma(_1027, cbModelParam._m0[22u].z, fma(_1023, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1019)) + cbModelParam._m0[22u].w;
        float _1926 = fma(_1027, cbModelParam._m0[23u].z, fma(_1023, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1019)) + cbModelParam._m0[23u].w;
        float _1929 = fma(_969, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967));
        float _1932 = fma(_969, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967));
        float _1935 = fma(_969, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967));
        float _2042;
        if (_1929 > 0.0)
        {
            _2042 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2042 = frontier_phi_25_21_ladder;
        }
        float _2359;
        if (_1932 > 0.0)
        {
            _2359 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2359 = frontier_phi_37_32_ladder;
        }
        float _2686;
        if (_1935 > 0.0)
        {
            _2686 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2686 = frontier_phi_47_44_ladder;
        }
        float _2688 = isnan(_2359) ? _2042 : (isnan(_2042) ? _2359 : min(_2042, _2359));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _1929) + _1918;
        float _2694 = (_2689 * _1932) + _1922;
        float _2695 = (_2689 * _1935) + _1926;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2813 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1865);
            frontier_phi_22_47_ladder = _2813.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2813.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2813.x * cbModelParam._m0[1u].z;
        }
        _1954 = frontier_phi_22_47_ladder_2;
        _1956 = frontier_phi_22_47_ladder_1;
        _1958 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_967, _968, _969), _1865);
        _1954 = _1938.x * cbModelParam._m0[1u].z;
        _1956 = _1938.y * cbModelParam._m0[1u].z;
        _1958 = _1938.z * cbModelParam._m0[1u].z;
    }
    float _1970 = ((((1.0 - _987) * ((_975 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_987 * _975)) * _959;
    float _1971 = _1970 * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1972 = _1970 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1973 = _1970 * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1976 = fma(_1973, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1971 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1973, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1971 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1973, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1971 * cbSceneParam._m0[91u].x));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2029 = _2016 / _2028;
    float _2030 = _2020 / _2028;
    float _2031 = _2024 / _2028;
    float _2178;
    float _2179;
    float _2180;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2058 = ((uint(_2031 > cbSceneParam._m0[59u].y) + uint(_2031 > cbSceneParam._m0[59u].x)) + uint(_2031 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2059 = _2058 + 43u;
        uint _2067 = _2058 + 44u;
        uint _2075 = _2058 + 45u;
        uint _2083 = _2058 + 46u;
        float _2094 = fma(_2028, cbSceneParam._m0[_2059].w, fma(_2024, cbSceneParam._m0[_2059].z, fma(_2020, cbSceneParam._m0[_2059].y, _2016 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2028, cbSceneParam._m0[_2067].w, fma(_2024, cbSceneParam._m0[_2067].z, fma(_2020, cbSceneParam._m0[_2067].y, _2016 * cbSceneParam._m0[_2067].x)));
        float _2106 = fma(_2028, cbSceneParam._m0[_2083].w, fma(_2024, cbSceneParam._m0[_2083].z, fma(_2020, cbSceneParam._m0[_2083].y, _2016 * cbSceneParam._m0[_2083].x)));
        float _2111 = cbSceneParam._m0[33u].z * _2106;
        float _2113 = cbSceneParam._m0[33u].w * _2106;
        float _2116 = fma(_2028, cbSceneParam._m0[_2075].w, fma(_2024, cbSceneParam._m0[_2075].z, fma(_2020, cbSceneParam._m0[_2075].y, _2016 * cbSceneParam._m0[_2075].x))) / _2106;
        float _2164 = (cbSceneParam._m0[33u].x - sqrt(((_2030 * _2030) + (_2029 * _2029)) + (_2031 * _2031))) * cbSceneParam._m0[33u].y;
        float _4506 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2171 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2111 + _2094) / _2106, (_2113 + _2098) / _2106), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2113 + _2094) / _2106, (_2098 - _2111) / _2106), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 - _2111) / _2106, (_2098 - _2113) / _2106), _2116), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 - _2113) / _2106, (_2111 + _2098) / _2106), _2116), 0.0)).x), vec4(0.25)));
        _2178 = 1.0 - (_2171 * cbSceneParam._m0[34u].x);
        _2179 = 1.0 - (_2171 * cbSceneParam._m0[34u].y);
        _2180 = 1.0 - (_2171 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2178 = 1.0;
        _2179 = 1.0;
        _2180 = 1.0;
    }
    float _2244;
    float _2246;
    float _2248;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2232 = fma(_2028, cbSceneParam._m0[63u].w, fma(_2024, cbSceneParam._m0[63u].z, fma(_2020, cbSceneParam._m0[63u].y, _2016 * cbSceneParam._m0[63u].x)));
        float _2233 = fma(_2028, cbSceneParam._m0[60u].w, fma(_2024, cbSceneParam._m0[60u].z, fma(_2020, cbSceneParam._m0[60u].y, _2016 * cbSceneParam._m0[60u].x))) / _2232;
        float _2234 = fma(_2028, cbSceneParam._m0[61u].w, fma(_2024, cbSceneParam._m0[61u].z, fma(_2020, cbSceneParam._m0[61u].y, _2016 * cbSceneParam._m0[61u].x))) / _2232;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2233 >= cbSceneParam._m0[64u].x) && (_2234 >= cbSceneParam._m0[64u].y)) && (_2233 <= cbSceneParam._m0[64u].z)) && (_2234 <= cbSceneParam._m0[64u].w))
        {
            float _2372 = fma(_2028, cbSceneParam._m0[62u].w, fma(_2024, cbSceneParam._m0[62u].z, fma(_2020, cbSceneParam._m0[62u].y, _2016 * cbSceneParam._m0[62u].x))) / _2232;
            float _2376 = isnan(cbSceneParam._m0[41u].w) ? _2372 : (isnan(_2372) ? cbSceneParam._m0[41u].w : max(_2372, cbSceneParam._m0[41u].w));
            float _2419 = (cbSceneParam._m0[33u].x - sqrt(((_2030 * _2030) + (_2029 * _2029)) + (_2031 * _2031))) * cbSceneParam._m0[33u].y;
            float _4522 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
            float _2426 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2233, cbSceneParam._m0[33u].w + _2234), _2376), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2233, _2234 - cbSceneParam._m0[33u].z), _2376), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2233 - cbSceneParam._m0[33u].z, _2234 - cbSceneParam._m0[33u].w), _2376), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2233 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2234), _2376), 0.0)).x), vec4(0.25)));
            float _2430 = 1.0 - (_2426 * cbSceneParam._m0[34u].x);
            float _2431 = 1.0 - (_2426 * cbSceneParam._m0[34u].y);
            float _2432 = 1.0 - (_2426 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2432) ? _2180 : (isnan(_2180) ? _2432 : min(_2180, _2432));
            frontier_phi_34_33_ladder_1 = isnan(_2431) ? _2179 : (isnan(_2179) ? _2431 : min(_2179, _2431));
            frontier_phi_34_33_ladder_2 = isnan(_2430) ? _2178 : (isnan(_2178) ? _2430 : min(_2178, _2430));
        }
        else
        {
            frontier_phi_34_33_ladder = _2180;
            frontier_phi_34_33_ladder_1 = _2179;
            frontier_phi_34_33_ladder_2 = _2178;
        }
        _2244 = frontier_phi_34_33_ladder_2;
        _2246 = frontier_phi_34_33_ladder_1;
        _2248 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2244 = _2178;
        _2246 = _2179;
        _2248 = _2180;
    }
    uvec4 _2253 = floatBitsToUint(cbInstanceData._m0[_934 + 5u]);
    uint _2255 = _2253.x * 14u;
    uint _2256 = _2255 + 13u;
    float _2263 = _959 + (-1.0);
    float _2268 = (cbLight._m0[_2256].x * _2263) + 1.0;
    float _2269 = (cbLight._m0[_2256].y * _2263) + 1.0;
    float _2270 = (cbLight._m0[_2256].z * _2263) + 1.0;
    float _2271 = (cbLight._m0[_2256].w * _2263) + 1.0;
    uint _2272 = _2255 + 5u;
    float _2278 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
    uint _2282 = _2255 + 4u;
    float _2291 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
    uint _2295 = _2255 | 1u;
    float _2306 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_808, _809, _810));
    float _2309 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_808, _809, _810));
    float _4558 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _4569 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2314 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2316 = (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * 0.3183098733425140380859375;
    float _2323 = ((cbLight._m0[_2272].x * _2278) * _2316) + (((cbLight._m0[_2282].x * _2244) * _2291) * _2314);
    float _2324 = ((_2278 * cbLight._m0[_2272].y) * _2316) + (((cbLight._m0[_2282].y * _2246) * _2291) * _2314);
    float _2325 = ((_2278 * cbLight._m0[_2272].z) * _2316) + (((cbLight._m0[_2282].z * _2248) * _2291) * _2314);
    uvec4 _2329 = floatBitsToUint(cbLight._m0[_2255 + 12u]);
    bool _2331 = _2329.x == 0u;
    float _2433;
    float _2435;
    float _2437;
    if (_2331)
    {
        _2433 = _2323;
        _2435 = _2324;
        _2437 = _2325;
    }
    else
    {
        uint _2441 = _2255 + 6u;
        float _2457 = (dot(vec3(cbLight._m0[_2255 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2458 = _2457 * _2457;
        float _4580 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2459 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2460 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2433 = (((cbLight._m0[_2441].x * 0.3183098733425140380859375) * _2459) * _2460) + _2323;
        _2435 = (((cbLight._m0[_2441].y * 0.3183098733425140380859375) * _2459) * _2460) + _2324;
        _2437 = (((cbLight._m0[_2441].z * 0.3183098733425140380859375) * _2459) * _2460) + _2325;
    }
    bool _2440 = _2329.y == 0u;
    float _2495;
    float _2497;
    float _2499;
    if (_2440)
    {
        _2495 = _2433;
        _2497 = _2435;
        _2499 = _2437;
    }
    else
    {
        uint _2657 = _2255 + 7u;
        float _2673 = (dot(vec3(cbLight._m0[_2255 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2674 = _2673 * _2673;
        float _4596 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2675 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _2676 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2495 = (((cbLight._m0[_2657].x * 0.3183098733425140380859375) * _2675) * _2676) + _2433;
        _2497 = (((cbLight._m0[_2657].y * 0.3183098733425140380859375) * _2675) * _2676) + _2435;
        _2499 = (((cbLight._m0[_2657].z * 0.3183098733425140380859375) * _2675) * _2676) + _2437;
    }
    uint _2502 = _2255 + 8u;
    float _2515 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _811) * 0.949999988079071044921875);
    float _2516 = _2515 * _2515;
    float _2517 = cbLight._m0[_2255].x + _887;
    float _2518 = cbLight._m0[_2255].y + _888;
    float _2519 = cbLight._m0[_2255].z + _889;
    float _2523 = inversesqrt(dot(vec3(_2517, _2518, _2519), vec3(_2517, _2518, _2519)));
    float _2524 = _2523 * _2517;
    float _2525 = _2523 * _2518;
    float _2526 = _2523 * _2519;
    float _2527 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2255].xyz));
    float _4612 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2530 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _4623 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2531 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2532 = dot(vec3(_808, _809, _810), vec3(_2524, _2525, _2526));
    float _4634 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
    float _2535 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2536 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2524, _2525, _2526));
    float _4645 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2540 = _2516 * _2516;
    float _2544 = ((_2535 * _2535) * (_2540 + (-1.0))) + 1.0;
    float _2555 = (exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2556 = 1.0 - _2516;
    float _2567 = (0.5 / (((_2531 * ((_2530 * _2556) + _2516)) + 9.9999999392252902907785028219223e-09) + (((_2531 * _2556) + _2516) * _2530))) * _2530;
    float _4656 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2540 / ((_2544 * _2544) * 3.141590118408203125));
    uint _2583 = _2255 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _811) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2295].x + _887;
    float _2597 = cbLight._m0[_2295].y + _888;
    float _2598 = cbLight._m0[_2295].z + _889;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2295].xyz));
    float _4667 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2610 = dot(vec3(_808, _809, _810), vec3(_2603, _2604, _2605));
    float _4678 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2603, _2604, _2605));
    float _4689 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2631 = (exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2632 = 1.0 - _2595;
    float _2642 = (0.5 / (((_2531 * ((_2609 * _2632) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2531 * _2632) + _2595) * _2609))) * _2609;
    float _4700 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
    float _2644 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2654 = (((_2631 * cbLight._m0[_2583].x) * _2644) * _2278) + ((((cbLight._m0[_2502].x * _2244) * _2555) * _2569) * _2291);
    float _2655 = (((_2631 * cbLight._m0[_2583].y) * _2644) * _2278) + ((((cbLight._m0[_2502].y * _2246) * _2555) * _2569) * _2291);
    float _2656 = (((_2631 * cbLight._m0[_2583].z) * _2644) * _2278) + ((((cbLight._m0[_2502].z * _2248) * _2555) * _2569) * _2291);
    float _2712;
    float _2714;
    float _2716;
    if (_2331)
    {
        _2712 = _2654;
        _2714 = _2655;
        _2716 = _2656;
    }
    else
    {
        uint _2718 = _2255 + 2u;
        uint _2722 = _2255 + 10u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _811) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _887;
        float _2739 = cbLight._m0[_2718].y + _888;
        float _2740 = cbLight._m0[_2718].z + _889;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2718].xyz));
        float _4711 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2752 = dot(vec3(_808, _809, _810), vec3(_2745, _2746, _2747));
        float _4722 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4733 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2773 = (exp2(log2(1.0 - (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2774 = 1.0 - _2737;
        float _2784 = (0.5 / (((_2531 * ((_2751 * _2774) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2531 * _2774) + _2737) * _2751))) * _2751;
        float _4744 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2786 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2787 = isnan(1.0) ? _2270 : (isnan(_2270) ? 1.0 : min(_2270, 1.0));
        _2712 = (((_2773 * cbLight._m0[_2722].x) * _2786) * _2787) + _2654;
        _2714 = (((_2773 * cbLight._m0[_2722].y) * _2786) * _2787) + _2655;
        _2716 = (((_2773 * cbLight._m0[_2722].z) * _2786) * _2787) + _2656;
    }
    float _2818;
    float _2820;
    float _2822;
    if (_2440)
    {
        _2818 = _2712;
        _2820 = _2714;
        _2822 = _2716;
    }
    else
    {
        uint _2829 = _2255 + 3u;
        uint _2833 = _2255 + 11u;
        float _2847 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2829].w)) * _811) * 0.949999988079071044921875);
        float _2848 = _2847 * _2847;
        float _2849 = cbLight._m0[_2829].x + _887;
        float _2850 = cbLight._m0[_2829].y + _888;
        float _2851 = cbLight._m0[_2829].z + _889;
        float _2855 = inversesqrt(dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851)));
        float _2856 = _2855 * _2849;
        float _2857 = _2855 * _2850;
        float _2858 = _2855 * _2851;
        float _2859 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2829].xyz));
        float _4760 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2863 = dot(vec3(_808, _809, _810), vec3(_2856, _2857, _2858));
        float _4771 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2866 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _2867 = dot(vec3(cbLight._m0[_2829].xyz), vec3(_2856, _2857, _2858));
        float _4782 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
        float _2871 = _2848 * _2848;
        float _2875 = ((_2866 * _2866) * (_2871 + (-1.0))) + 1.0;
        float _2884 = (exp2(log2(1.0 - (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2885 = 1.0 - _2848;
        float _2895 = (0.5 / (((_2531 * ((_2862 * _2885) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2531 * _2885) + _2848) * _2862))) * _2862;
        float _4793 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2897 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2871 / ((_2875 * _2875) * 3.141590118408203125));
        float _2898 = isnan(1.0) ? _2271 : (isnan(_2271) ? 1.0 : min(_2271, 1.0));
        _2818 = (((_2884 * cbLight._m0[_2833].x) * _2897) * _2898) + _2712;
        _2820 = (((_2884 * cbLight._m0[_2833].y) * _2897) * _2898) + _2714;
        _2822 = (((_2884 * cbLight._m0[_2833].z) * _2897) * _2898) + _2716;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2253.y == 0u)
    {
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2920)));
        float _2941 = (log2(_2031 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3076;
        float _3078;
        float _3080;
        float _3082;
        float _3084;
        float _3086;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3076 = 0.0;
            _3078 = 0.0;
            _3080 = 0.0;
            _3082 = 0.0;
            _3084 = 0.0;
            _3086 = 0.0;
        }
        else
        {
            float _3077;
            float _3079;
            float _3081;
            float _3083;
            float _3085;
            float _3087;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            uint _3235 = 0u;
            uint _3244;
            bool _3245;
            for (;;)
            {
                _3244 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                _3245 = _3244 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3245)
                {
                    frontier_phi_66_pred = _3234;
                    frontier_phi_66_pred_1 = _3233;
                    frontier_phi_66_pred_2 = _3232;
                    frontier_phi_66_pred_3 = _3231;
                    frontier_phi_66_pred_4 = _3230;
                    frontier_phi_66_pred_5 = _3229;
                }
                else
                {
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    uint _3359;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3244;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    for (;;)
                    {
                        uint _3363 = uint(findLSB(_3359)) + (_3235 << 5u);
                        uint _3360 = (_3359 + 4294967295u) & _3359;
                        uint _3365 = _3363 * 48u;
                        vec4 _3379 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3365)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3365 + 3u)).x));
                        uint _3385 = (_3363 * 48u) + 4u;
                        vec4 _3398 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3385)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3385 + 3u)).x));
                        uint _3404 = (_3363 * 48u) + 8u;
                        vec3 _3415 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3404)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3404 + 2u)).x));
                        float _3419 = _3379.x - _2029;
                        float _3420 = _3379.y - _2030;
                        float _3421 = _3379.z - _2031;
                        float _3422 = dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421));
                        float _3425 = inversesqrt(_3422);
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3429 = dot(vec3(_915, _918, _921), vec3(_3426, _3427, _3428));
                        float _3434 = 1.0 - (_3422 * _3379.w);
                        float _4819 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
                        float _3436 = sqrt(_3422) * _3398.w;
                        float _3439 = 1.39999997615814208984375 / (_3436 + 1.39999997615814208984375);
                        float _3440 = _3439 * _3439;
                        float _3443 = ((1.0 - _3440) * _3429) + _3440;
                        float _3446 = _3436 * _3436;
                        float _3450 = ((isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0))) * _3435) / ((_3446 * 0.699999988079071044921875) + 1.0);
                        float _3454 = (-0.0) - _2029;
                        float _3455 = (-0.0) - _2030;
                        float _3456 = (-0.0) - _2031;
                        float _3460 = inversesqrt(dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456)));
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3470 = exp2(log2(1.0 / ((_3446 * 3.5) + 5.0)) * 0.25);
                        float _3471 = 1.0 - _975;
                        float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                        float _3479 = _3478 * _3478;
                        float _3480 = _3479 * _3479;
                        float _3481 = _3461 + _3426;
                        float _3482 = _3462 + _3427;
                        float _3483 = _3463 + _3428;
                        float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                        float _3491 = dot(vec3(_915, _918, _921), vec3(_3461, _3462, _3463));
                        float _4835 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3495 = dot(vec3(_915, _918, _921), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                        float _4846 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                        float _3503 = _3439 * _3479;
                        float _3504 = _3503 * _3503;
                        float _3507 = ((1.0 - _3504) * _3429) + _3504;
                        float _4857 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3509 = 1.0 - _3479;
                        float _3519 = (0.5 / (((_3508 * ((_3494 * _3509) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3508 * _3509) + _3479) * _3494))) * _3508;
                        float _4868 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3530 = (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0)))) / ((_3502 * _3502) * ((_3446 * 2.1991131305694580078125) + 3.141590118408203125))) * _3435;
                        _3288 = (_3450 * _3398.x) + _3356;
                        _3289 = (_3450 * _3398.y) + _3357;
                        _3290 = (_3450 * _3398.z) + _3358;
                        _3285 = (_3530 * _3415.x) + _3353;
                        _3286 = (_3530 * _3415.y) + _3354;
                        _3287 = (_3530 * _3415.z) + _3355;
                        if (_3360 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3360;
                        }
                    }
                    frontier_phi_66_pred = _3290;
                    frontier_phi_66_pred_1 = _3289;
                    frontier_phi_66_pred_2 = _3288;
                    frontier_phi_66_pred_3 = _3287;
                    frontier_phi_66_pred_4 = _3286;
                    frontier_phi_66_pred_5 = _3285;
                }
                _3087 = frontier_phi_66_pred;
                _3085 = frontier_phi_66_pred_1;
                _3083 = frontier_phi_66_pred_2;
                _3081 = frontier_phi_66_pred_3;
                _3079 = frontier_phi_66_pred_4;
                _3077 = frontier_phi_66_pred_5;
                uint _3236 = _3235 + 1u;
                if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3229 = _3077;
                    _3230 = _3079;
                    _3231 = _3081;
                    _3232 = _3083;
                    _3233 = _3085;
                    _3234 = _3087;
                    _3235 = _3236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3076 = _3077;
            _3078 = _3079;
            _3080 = _3081;
            _3082 = _3083;
            _3084 = _3085;
            _3086 = _3087;
        }
        uvec4 _3090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3091 = _3090.z;
        uint _3093 = (_3091 >> 8u) & 15u;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((4294967295u << _3093) & _2951) == 0u)
        {
            _3197 = _3076;
            _3199 = _3078;
            _3201 = _3080;
            _3203 = _3082;
            _3205 = _3084;
            _3207 = _3086;
        }
        else
        {
            float _3222 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
            float _3223 = _3222 * _2029;
            float _3224 = _3222 * _2030;
            float _3225 = _3222 * _2031;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3093 < ((_3091 >> 12u) & 15u))
            {
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3336 = _3076;
                float _3337 = _3078;
                float _3338 = _3080;
                float _3339 = _3082;
                float _3340 = _3084;
                float _3341 = _3086;
                uint _3342 = _3093;
                uint _3351;
                bool _3352;
                for (;;)
                {
                    _3351 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3342 << 2u)) >> 2u)).x;
                    _3352 = _3351 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3352)
                    {
                        frontier_phi_72_pred = _3341;
                        frontier_phi_72_pred_1 = _3340;
                        frontier_phi_72_pred_2 = _3339;
                        frontier_phi_72_pred_3 = _3338;
                        frontier_phi_72_pred_4 = _3337;
                        frontier_phi_72_pred_5 = _3336;
                    }
                    else
                    {
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3548 = _3336;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        uint _3554 = _3351;
                        uint _3555;
                        vec4 _3580;
                        float _3581;
                        vec4 _3596;
                        vec3 _3608;
                        vec4 _3623;
                        vec4 _3638;
                        float _3685;
                        bool _3686;
                        for (;;)
                        {
                            uint _3565 = ((_3342 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3554));
                            _3555 = (_3554 + 4294967295u) & _3554;
                            uint _3567 = _3565 * 40u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            _3581 = _3580.w;
                            uint _3583 = (_3565 * 40u) + 4u;
                            _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3598 = (_3565 * 40u) + 8u;
                            _3608 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x));
                            uint _3610 = (_3565 * 40u) + 16u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3565 * 40u) + 20u;
                            _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            uint _3641 = (_3565 * 40u) + 24u;
                            vec4 _3654 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 3u)).x));
                            uint _3660 = (_3565 * 40u) + 28u;
                            vec4 _3673 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 3u)).x));
                            _3685 = fma(_2031, _3673.z, fma(_2030, _3673.y, _3673.x * _2029)) + _3673.w;
                            _3686 = !((fma(_2031, _3654.z, fma(_2030, _3654.y, _3654.x * _2029)) + _3654.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3686)
                            {
                                float _3713 = _3580.x - _2029;
                                float _3714 = _3580.y - _2030;
                                float _3715 = _3580.z - _2031;
                                float _3716 = dot(vec3(_3713, _3714, _3715), vec3(_3713, _3714, _3715));
                                float _3719 = inversesqrt(_3716);
                                float _3720 = _3719 * _3713;
                                float _3721 = _3719 * _3714;
                                float _3722 = _3719 * _3715;
                                float _3726 = 1.0 - (_3716 / (_3581 * _3581));
                                float _4879 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3727 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
                                float _3731 = sqrt(_3716) * _3596.w;
                                float _3733 = 1.39999997615814208984375 / (_3731 + 1.39999997615814208984375);
                                float _3734 = _3733 * _3733;
                                float _3737 = ((1.0 - _3734) * dot(vec3(_3720, _3721, _3722), vec3(_915, _918, _921))) + _3734;
                                float _3740 = _3731 * _3731;
                                float _3744 = (fma(_2031, _3623.z, fma(_2030, _3623.y, _3623.x * _2029)) + _3623.w) / _3685;
                                float _3745 = (fma(_2031, _3638.z, fma(_2030, _3638.y, _3638.x * _2029)) + _3638.w) / _3685;
                                float _3749 = 1.0 - dot(vec2(_3744, _3745), vec2(_3744, _3745));
                                float _4895 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3751 = _3750 * (((isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0))) * _3727) / ((_3740 * 0.699999988079071044921875) + 1.0));
                                float _3763 = exp2(log2(1.0 / ((_3740 * 3.5) + 5.0)) * 0.25);
                                float _3764 = 1.0 - _975;
                                float _3771 = sqrt(1.0 - ((1.0 - (_3764 * _3764)) * (1.0 - (_3763 * _3763))));
                                float _3772 = _3771 * _3771;
                                float _3773 = _3772 * _3772;
                                float _3774 = _3720 - _3223;
                                float _3775 = _3721 - _3224;
                                float _3776 = _3722 - _3225;
                                float _3780 = inversesqrt(dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776)));
                                float _3784 = dot(vec3(_915, _918, _921), vec3((-0.0) - _3223, (-0.0) - _3224, (-0.0) - _3225));
                                float _4906 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3787 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3788 = dot(vec3(_915, _918, _921), vec3(_3780 * _3774, _3780 * _3775, _3780 * _3776));
                                float _4917 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3791 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3795 = ((_3791 * _3791) * (_3773 + (-1.0))) + 1.0;
                                float _3796 = _3733 * _3772;
                                float _3797 = _3796 * _3796;
                                float _3803 = ((1.0 - _3797) * dot(vec3(_915, _918, _921), vec3(_3720, _3721, _3722))) + _3797;
                                float _4928 = isnan(0.0) ? _3803 : (isnan(_3803) ? 0.0 : max(_3803, 0.0));
                                float _3804 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                                float _3805 = 1.0 - _3772;
                                float _3815 = (0.5 / (((_3804 * ((_3787 * _3805) + _3772)) + 9.9999999392252902907785028219223e-09) + (((_3804 * _3805) + _3772) * _3787))) * _3804;
                                float _4939 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3825 = (_3750 * _3727) * (((_3773 * 3.1415927410125732421875) * (isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0)))) / ((_3795 * _3795) * ((_3740 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3751 * _3596.y;
                                frontier_phi_78_pred_1 = _3751 * _3596.x;
                                frontier_phi_78_pred_2 = _3825 * _3608.z;
                                frontier_phi_78_pred_3 = _3825 * _3608.y;
                                frontier_phi_78_pred_4 = _3825 * _3608.x;
                                frontier_phi_78_pred_5 = _3751 * _3596.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3833 = frontier_phi_78_pred;
                            _3832 = frontier_phi_78_pred_1;
                            _3831 = frontier_phi_78_pred_2;
                            _3830 = frontier_phi_78_pred_3;
                            _3829 = frontier_phi_78_pred_4;
                            _3834 = frontier_phi_78_pred_5;
                            _3538 = _3832 + _3551;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            _3535 = _3829 + _3548;
                            _3536 = _3830 + _3549;
                            _3537 = _3831 + _3550;
                            if (_3555 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3555;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3540;
                        frontier_phi_72_pred_1 = _3539;
                        frontier_phi_72_pred_2 = _3538;
                        frontier_phi_72_pred_3 = _3537;
                        frontier_phi_72_pred_4 = _3536;
                        frontier_phi_72_pred_5 = _3535;
                    }
                    _3208 = frontier_phi_72_pred;
                    _3206 = frontier_phi_72_pred_1;
                    _3204 = frontier_phi_72_pred_2;
                    _3202 = frontier_phi_72_pred_3;
                    _3200 = frontier_phi_72_pred_4;
                    _3198 = frontier_phi_72_pred_5;
                    uint _3343 = _3342 + 1u;
                    if (_3343 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3336 = _3198;
                        _3337 = _3200;
                        _3338 = _3202;
                        _3339 = _3204;
                        _3340 = _3206;
                        _3341 = _3208;
                        _3342 = _3343;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3208;
                frontier_phi_60_61_ladder_1 = _3206;
                frontier_phi_60_61_ladder_2 = _3202;
                frontier_phi_60_61_ladder_3 = _3200;
                frontier_phi_60_61_ladder_4 = _3198;
                frontier_phi_60_61_ladder_5 = _3204;
            }
            else
            {
                frontier_phi_60_61_ladder = _3086;
                frontier_phi_60_61_ladder_1 = _3084;
                frontier_phi_60_61_ladder_2 = _3080;
                frontier_phi_60_61_ladder_3 = _3078;
                frontier_phi_60_61_ladder_4 = _3076;
                frontier_phi_60_61_ladder_5 = _3082;
            }
            _3197 = frontier_phi_60_61_ladder_4;
            _3199 = frontier_phi_60_61_ladder_3;
            _3201 = frontier_phi_60_61_ladder_2;
            _3203 = frontier_phi_60_61_ladder_5;
            _3205 = frontier_phi_60_61_ladder_1;
            _3207 = frontier_phi_60_61_ladder;
        }
        float _3212 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2964 = (_3212 * _3203) + _2495;
        _2966 = (_3212 * _3205) + _2497;
        _2968 = (_3212 * _3207) + _2499;
        _2970 = ((_3197 * 0.039999999105930328369140625) * _3212) + _2818;
        _2972 = ((_3199 * 0.039999999105930328369140625) * _3212) + _2820;
        _2974 = ((_3201 * 0.039999999105930328369140625) * _3212) + _2822;
    }
    else
    {
        _2964 = _2495;
        _2966 = _2497;
        _2968 = _2499;
        _2970 = _2818;
        _2972 = _2820;
        _2974 = _2822;
    }
    uint _2980 = _935 + uint(cbMatDynParam._m0[0u].w);
    float _2986 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2992 = (((((_2986 * cbMtdParam._m0[14u].x) * _666.x) * _689) * _763) * (((1.0 - _742) * cbMtdParam._m0[20u].w) + _742)) * cbInstanceData._m0[_2980].x;
    float _2998 = (((((_2986 * cbMtdParam._m0[14u].y) * _666.y) * _689) * _763) * (((1.0 - _744) * cbMtdParam._m0[20u].w) + _744)) * cbInstanceData._m0[_2980].y;
    float _3004 = (((((_2986 * cbMtdParam._m0[14u].z) * _666.z) * _689) * _763) * (((1.0 - _746) * cbMtdParam._m0[20u].w) + _746)) * cbInstanceData._m0[_2980].z;
    float _4955 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _4966 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _4977 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _3021 = (((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2964 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _959))) + ((_2970 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + _2992;
    float _3023 = (_2998 + ((_2972 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2966 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _959)));
    float _3025 = (_3004 + ((_2974 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1765)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0))) * (_2968 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _959)));
    float _5003 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3038 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
    uint _3039 = _934 + 6u;
    float _3047 = _895 / cbSceneParam._m0[86u].x;
    float _3048 = _896 / cbSceneParam._m0[86u].y;
    vec4 _3062 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3047, _3048, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3064 = _3062.x;
    float _3065 = _3062.y;
    float _3066 = _3062.z;
    float _3067 = _3062.w;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _3101 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _3102 = _3101 / _830;
        float _3113 = _3102 * _880;
        float _3114 = _881 * _3102;
        float _3115 = (-0.0) - _3114;
        float _3116 = _3102 * _882;
        float _3118 = (cbSceneParam._m0[77u].w * _3115) / _3101;
        float _3119 = _3118 + cbSceneParam._m0[79u].w;
        float _3120 = cbSceneParam._m0[79u].w - _3114;
        float _3126 = sqrt(((_3113 * _3113) + (_3114 * _3114)) + (_3116 * _3116));
        float _3129 = (1.0 - (cbSceneParam._m0[77u].w / _3101)) * _3126;
        float _3134 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3136 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3298;
        if (abs((_3115 - _3118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3298 = ((((_3119 > 0.0) ? exp2(_3134 * _3119) : (2.0 - exp2(_3136 * _3119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3129;
        }
        else
        {
            float _3258 = 1.0 / cbSceneParam._m0[80u].x;
            float _3259 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : max(_3119, _3120));
            float _3260 = isnan(_3120) ? _3119 : (isnan(_3119) ? _3120 : min(_3119, _3120));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            _3298 = ((abs(_3126 / _3115) * cbSceneParam._m0[80u].y) * ((((_3269 - _3270) * 2.0) - ((exp2(_3134 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0)))) - exp2(_3134 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))))) * _3258)) - ((exp2(_3136 * _3269) - exp2(_3136 * _3270)) * _3258))) + (_3129 * cbSceneParam._m0[80u].z);
        }
        vec4 _3300 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3047, _3048, 1.0), 0.0);
        float _3309 = exp2((_3298 * (-1.44269502162933349609375)) * (1.0 - _3300.w));
        float _3310 = log2(_3309);
        float _3326 = log2(_3067);
        _3138 = (exp2(_3326 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].x)) * _3300.x) / cbSceneParam._m0[78u].x)) + _3064;
        _3140 = (exp2(_3326 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].y)) * _3300.y) / cbSceneParam._m0[78u].y)) + _3065;
        _3142 = (exp2(_3326 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3310 * cbSceneParam._m0[78u].z)) * _3300.z) / cbSceneParam._m0[78u].z)) + _3066;
        _3144 = _3309 * _3067;
    }
    else
    {
        _3138 = _3064;
        _3140 = _3065;
        _3142 = _3066;
        _3144 = _3067;
    }
    float _3156 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3157 = _3156 == 3.0;
    float _3158 = log2(_3144);
    float _3162 = exp2(_3158 * cbSceneParam._m0[78u].x);
    float _3163 = exp2(_3158 * cbSceneParam._m0[78u].y);
    float _3164 = exp2(_3158 * cbSceneParam._m0[78u].z);
    float _3165 = _3162 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)));
    float _3166 = _3163 * (isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0)));
    float _3167 = _3164 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0)));
    float _3176 = (_3156 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3176 * (_3157 ? _3165 : (_3165 + (cbSceneParam._m0[72u].w * _3138)));
    SV_Target.y = _3176 * (_3157 ? _3166 : (_3166 + (cbSceneParam._m0[72u].w * _3140)));
    SV_Target.z = _3176 * (_3157 ? _3167 : (_3167 + (cbSceneParam._m0[72u].w * _3142)));
    SV_Target.w = cbInstanceData._m0[_3039].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2992) * _3038) * _3162) * _3176;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2998) * _3038) * _3163) * _3176;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3004) * _3038) * _3164) * _3176;
    SV_Target_1.w = cbInstanceData._m0[_3039].w;
}


