#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1267;
float _3964;
float _3965;
float _3966;
float _3967;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _306 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _343 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _306.x) * 2.0) - _333)) + 1.0;
    float _3976 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _351 = (_344 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _352 = (_344 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _353 = (_344 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _372 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _385 = (((((1.0 - _306.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3987 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _351) * _386) + _351;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _413 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _426 = (((((1.0 - _306.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3998 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _434 = (((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393;
    float _435 = (_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394;
    float _436 = (_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395;
    vec4 _449 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _463 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    vec4 _479 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _490 = ((_479.x - _465) * _344) + _465;
    float _491 = ((_479.y - _466) * _344) + _466;
    float _492 = ((_479.z - _467) * _344) + _467;
    vec4 _505 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = ((_505.x - _490) * _386) + _490;
    float _517 = ((_505.y - _491) * _386) + _491;
    float _518 = ((_505.z - _492) * _386) + _492;
    vec4 _531 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _544 = ((_531.z - _518) * _427) + _518;
    float _547 = ((((_531.x - _516) * _427) + _516) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _517) * _427) + _517) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _4009 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))));
    vec4 _588 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _602 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4020 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _611 = (((_603 * _603) * (3.0 - (_603 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _619 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _627 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4031 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _632 = (_628 * _628) * (3.0 - (_628 * 2.0));
    float _633 = _632 * cbMtdParam._m0[22u].x;
    float _634 = _632 * cbMtdParam._m0[22u].y;
    float _635 = sin(_619);
    float _636 = cos(_619);
    float _637 = TEXCOORD.z - _633;
    float _638 = TEXCOORD.w - _634;
    vec4 _658 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_633 + fma(_638, (-0.0) - _635, _637 * _636))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_638, _636, _637 * _635) + _634)) + cbTextureTilingScale._m0[2u].w));
    float _664 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _658.x;
    float _666 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _658.y;
    float _668 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _658.z;
    float _689 = (TEXCOORD_5.x - (((_449.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4042 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _693 = fma(_555, _231 * NORMAL.x, fma(_549, _238 * TANGENT.x, (_224 * _216) * _547));
    float _696 = fma(_555, _231 * NORMAL.y, fma(_549, _238 * TANGENT.y, (_224 * _217) * _547));
    float _699 = fma(_555, _231 * NORMAL.z, fma(_549, _238 * TANGENT.z, (_224 * _218) * _547));
    float _703 = inversesqrt(dot(vec3(_693, _696, _699), vec3(_693, _696, _699)));
    float _704 = _703 * _693;
    float _705 = _703 * _696;
    float _706 = _703 * _699;
    float _4053 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _707 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4075 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4086 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _726 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _947 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _953 = (cbMatDynParam._m0[5u].x * _947) + cbMatDynParam._m0[5u].y;
        float _4097 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _958 = (cbMatDynParam._m0[5u].z * _947) + cbMatDynParam._m0[5u].w;
        float _4108 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) - _954)) + _954) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _824 = fma(_706, cbSceneParam._m0[5u].z, fma(_705, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _704));
    float _827 = fma(_706, cbSceneParam._m0[6u].z, fma(_705, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _704));
    float _830 = fma(_706, cbSceneParam._m0[7u].z, fma(_705, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _704));
    uint _843 = uint(roundEven(NORMAL.w)) * 13u;
    uint _844 = _843 + 9u;
    uint _845 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _851 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0)))) * cbInstanceData._m0[_845].x;
    float _852 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_845].y;
    float _853 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_845].z;
    float _4119 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _4130 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
    float _4141 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    vec4 _865 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _868 = _865.x * TEXCOORD_5.w;
    float _869 = dot(vec3(_704, _705, _706), vec3(_784, _785, _786));
    float _872 = _869 * 2.0;
    float _876 = (_872 * _704) - _784;
    float _877 = (_872 * _705) - _785;
    float _878 = (_872 * _706) - _786;
    float _882 = abs(dot(vec3(_784, _785, _786), vec3(_704, _705, _706)));
    float _4152 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _884 = sqrt(_707);
    float _896 = exp2((_884 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_884 * 3.0));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1266;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _991 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _995 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _999 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _1024 = _928 + _704;
        float _1025 = _932 + _705;
        float _1026 = _936 + _706;
        float _1036 = fma(_1026, cbModelParam._m0[26u].z, fma(_1025, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024)) - _991;
        float _1037 = fma(_1026, cbModelParam._m0[27u].z, fma(_1025, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024)) - _995;
        float _1038 = fma(_1026, cbModelParam._m0[28u].z, fma(_1025, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024)) - _999;
        float _1042 = inversesqrt(dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038)));
        float _1055 = ((_1042 * _1036) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_991 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1042 * _1037) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_995 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1042 * _1038) / cbModelParam._m0[34u].z) + ((((((_999 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        vec4 _1081 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1055, _1056, _1057), 0.0);
        float _1094 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1060.x + (-0.5));
        float _1096 = _1094 * (_1060.y + (-0.5));
        float _1097 = _1094 * (_1060.z + (-0.5));
        float _1104 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1067.x + (-0.5));
        float _1106 = _1104 * (_1067.y + (-0.5));
        float _1107 = _1104 * (_1067.z + (-0.5));
        float _1114 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1074.x + (-0.5));
        float _1116 = _1114 * (_1074.y + (-0.5));
        float _1117 = _1114 * (_1074.z + (-0.5));
        float _1124 = exp2((_1081.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1081.x + (-0.5));
        float _1126 = _1124 * (_1081.y + (-0.5));
        float _1127 = _1124 * (_1081.z + (-0.5));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = _1095 * 0.5;
        float _1132 = _1105 * 0.5;
        float _1133 = _1115 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1148 = (dot(vec3(_704, _705, _706), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1158 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _4200 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1160 + 1.0))) + _1165) * _1128;
        float _1175 = _1096 * 0.5;
        float _1176 = _1106 * 0.5;
        float _1177 = _1116 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_704, _705, _706), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _4233 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1202 + 1.0))) + _1207) * _1129;
        float _1217 = _1097 * 0.5;
        float _1218 = _1107 * 0.5;
        float _1219 = _1117 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_704, _705, _706), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _4266 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1244 + 1.0))) + _1249) * _1130;
        _1266 = _1097;
        _1268 = _1096;
        _1269 = _1095;
        _1270 = _1107;
        _1271 = _1106;
        _1272 = _1105;
        _1273 = _1117;
        _1274 = _1116;
        _1275 = _1115;
        _1276 = _1130;
        _1277 = _1129;
        _1278 = _1128;
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
    }
    else
    {
        _1266 = _1267;
        _1268 = _1267;
        _1269 = _1267;
        _1270 = _1267;
        _1271 = _1267;
        _1272 = _1267;
        _1273 = _1267;
        _1274 = _1267;
        _1275 = _1267;
        _1276 = _1267;
        _1277 = _1267;
        _1278 = _1267;
        _1279 = 0.0;
        _1280 = 0.0;
        _1281 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1314 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1318 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1341 = _928 + _704;
        float _1342 = _932 + _705;
        float _1343 = _936 + _706;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_704, _705, _706), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _4329 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_704, _705, _706), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4362 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_704, _705, _706), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4395 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1267;
        _1580 = _1267;
        _1581 = _1267;
        _1582 = _1267;
        _1583 = _1267;
        _1584 = _1267;
        _1585 = _1267;
        _1586 = _1267;
        _1587 = _1267;
        _1588 = _1267;
        _1589 = _1267;
        _1590 = _1267;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1280)) + _1280;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1281)) + _1281;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _876 * 0.5;
    float _1648 = _877 * 0.5;
    float _1649 = _878 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1266, _1270, _1273, _1276));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _707);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1796;
    float _1798;
    float _1800;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1763 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1767 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1771 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1774 = fma(_878, cbModelParam._m0[13u].z, fma(_877, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876));
        float _1777 = fma(_878, cbModelParam._m0[14u].z, fma(_877, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876));
        float _1780 = fma(_878, cbModelParam._m0[15u].z, fma(_877, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876));
        float _1808;
        if (_1774 > 0.0)
        {
            _1808 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1808 = frontier_phi_17_15_ladder;
        }
        float _1977;
        if (_1777 > 0.0)
        {
            _1977 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1977 = frontier_phi_26_22_ladder;
        }
        float _2273;
        if (_1780 > 0.0)
        {
            _2273 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2273 = frontier_phi_38_33_ladder;
        }
        float _2275 = isnan(_1977) ? _1808 : (isnan(_1808) ? _1977 : min(_1808, _1977));
        float _2276 = isnan(_2273) ? _2275 : (isnan(_2275) ? _2273 : min(_2275, _2273));
        float _2280 = (_2276 * _1774) + _1763;
        float _2281 = (_2276 * _1777) + _1767;
        float _2282 = (_2276 * _1780) + _1771;
        float _2283 = _2276 * 9.9999997473787516355514526367188e-05;
        float _2285 = (-1.0) - _2283;
        float _2287 = _2283 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2282 > _2287) || ((_2282 < _2285) || ((_2281 > _2287) || ((_2281 < _2285) || ((_2280 < _2285) || (_2280 > _2287))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2282, cbModelParam._m0[9u].z, fma(_2281, cbModelParam._m0[9u].y, _2280 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2282, cbModelParam._m0[10u].z, fma(_2281, cbModelParam._m0[10u].y, _2280 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2282, cbModelParam._m0[11u].z, fma(_2281, cbModelParam._m0[11u].y, _2280 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_16_38_ladder = _2427.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2427.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2427.x * cbModelParam._m0[1u].y;
        }
        _1796 = frontier_phi_16_38_ladder_2;
        _1798 = frontier_phi_16_38_ladder_1;
        _1800 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1784 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_876, _877, _878), _1716);
        _1796 = _1784.x * cbModelParam._m0[1u].y;
        _1798 = _1784.y * cbModelParam._m0[1u].y;
        _1800 = _1784.z * cbModelParam._m0[1u].y;
    }
    float _1804 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _707);
    float _1805 = isnan(_1804) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1804 : min(cbModelParam._m0[25u].w, _1804));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_878, cbModelParam._m0[21u].z, fma(_877, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876));
        float _1872 = fma(_878, cbModelParam._m0[22u].z, fma(_877, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876));
        float _1875 = fma(_878, cbModelParam._m0[23u].z, fma(_877, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876));
        float _1982;
        if (_1869 > 0.0)
        {
            _1982 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1982 = frontier_phi_28_24_ladder;
        }
        float _2300;
        if (_1872 > 0.0)
        {
            _2300 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2300 = frontier_phi_40_35_ladder;
        }
        float _2627;
        if (_1875 > 0.0)
        {
            _2627 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2627 = frontier_phi_50_47_ladder;
        }
        float _2629 = isnan(_2300) ? _1982 : (isnan(_1982) ? _2300 : min(_1982, _2300));
        float _2630 = isnan(_2627) ? _2629 : (isnan(_2629) ? _2627 : min(_2629, _2627));
        float _2634 = (_2630 * _1869) + _1858;
        float _2635 = (_2630 * _1872) + _1862;
        float _2636 = (_2630 * _1875) + _1866;
        float _2637 = _2630 * 9.9999997473787516355514526367188e-05;
        float _2638 = (-1.0) - _2637;
        float _2640 = _2637 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2636 > _2640) || ((_2636 < _2638) || ((_2635 > _2640) || ((_2635 < _2638) || ((_2634 < _2638) || (_2634 > _2640))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2754 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2636, cbModelParam._m0[17u].z, fma(_2635, cbModelParam._m0[17u].y, _2634 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2636, cbModelParam._m0[18u].z, fma(_2635, cbModelParam._m0[18u].y, _2634 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2636, cbModelParam._m0[19u].z, fma(_2635, cbModelParam._m0[19u].y, _2634 * cbModelParam._m0[19u].x))), _1805);
            frontier_phi_25_50_ladder = _2754.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2754.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2754.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_25_50_ladder_2;
        _1896 = frontier_phi_25_50_ladder_1;
        _1898 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_876, _877, _878), _1805);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1910 = ((((1.0 - _896) * ((_884 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_896 * _884)) * _868;
    float _1911 = _1910 * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1912 = _1910 * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1913 = _1910 * ((cbModelParam._m0[1u].w * (_1898 - _1800)) + _1800);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    float _1956 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1960 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1964 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1969 = _1956 / _1968;
    float _1970 = _1960 / _1968;
    float _1971 = _1964 / _1968;
    float _2118;
    float _2119;
    float _2120;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1998 = ((uint(_1971 > cbSceneParam._m0[59u].y) + uint(_1971 > cbSceneParam._m0[59u].x)) + uint(_1971 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1999 = _1998 + 43u;
        uint _2007 = _1998 + 44u;
        uint _2015 = _1998 + 45u;
        uint _2023 = _1998 + 46u;
        float _2034 = fma(_1968, cbSceneParam._m0[_1999].w, fma(_1964, cbSceneParam._m0[_1999].z, fma(_1960, cbSceneParam._m0[_1999].y, _1956 * cbSceneParam._m0[_1999].x)));
        float _2038 = fma(_1968, cbSceneParam._m0[_2007].w, fma(_1964, cbSceneParam._m0[_2007].z, fma(_1960, cbSceneParam._m0[_2007].y, _1956 * cbSceneParam._m0[_2007].x)));
        float _2046 = fma(_1968, cbSceneParam._m0[_2023].w, fma(_1964, cbSceneParam._m0[_2023].z, fma(_1960, cbSceneParam._m0[_2023].y, _1956 * cbSceneParam._m0[_2023].x)));
        float _2051 = cbSceneParam._m0[33u].z * _2046;
        float _2053 = cbSceneParam._m0[33u].w * _2046;
        float _2056 = fma(_1968, cbSceneParam._m0[_2015].w, fma(_1964, cbSceneParam._m0[_2015].z, fma(_1960, cbSceneParam._m0[_2015].y, _1956 * cbSceneParam._m0[_2015].x))) / _2046;
        float _2104 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
        float _4521 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2111 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2051 + _2034) / _2046, (_2053 + _2038) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 + _2034) / _2046, (_2038 - _2051) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2051) / _2046, (_2038 - _2053) / _2046), _2056), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 - _2053) / _2046, (_2051 + _2038) / _2046), _2056), 0.0)).x), vec4(0.25)));
        _2118 = 1.0 - (_2111 * cbSceneParam._m0[34u].x);
        _2119 = 1.0 - (_2111 * cbSceneParam._m0[34u].y);
        _2120 = 1.0 - (_2111 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2118 = 1.0;
        _2119 = 1.0;
        _2120 = 1.0;
    }
    float _2184;
    float _2186;
    float _2188;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2172 = fma(_1968, cbSceneParam._m0[63u].w, fma(_1964, cbSceneParam._m0[63u].z, fma(_1960, cbSceneParam._m0[63u].y, _1956 * cbSceneParam._m0[63u].x)));
        float _2173 = fma(_1968, cbSceneParam._m0[60u].w, fma(_1964, cbSceneParam._m0[60u].z, fma(_1960, cbSceneParam._m0[60u].y, _1956 * cbSceneParam._m0[60u].x))) / _2172;
        float _2174 = fma(_1968, cbSceneParam._m0[61u].w, fma(_1964, cbSceneParam._m0[61u].z, fma(_1960, cbSceneParam._m0[61u].y, _1956 * cbSceneParam._m0[61u].x))) / _2172;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2173 >= cbSceneParam._m0[64u].x) && (_2174 >= cbSceneParam._m0[64u].y)) && (_2173 <= cbSceneParam._m0[64u].z)) && (_2174 <= cbSceneParam._m0[64u].w))
        {
            float _2313 = fma(_1968, cbSceneParam._m0[62u].w, fma(_1964, cbSceneParam._m0[62u].z, fma(_1960, cbSceneParam._m0[62u].y, _1956 * cbSceneParam._m0[62u].x))) / _2172;
            float _2317 = isnan(cbSceneParam._m0[41u].w) ? _2313 : (isnan(_2313) ? cbSceneParam._m0[41u].w : max(_2313, cbSceneParam._m0[41u].w));
            float _2360 = (cbSceneParam._m0[33u].x - sqrt(((_1970 * _1970) + (_1969 * _1969)) + (_1971 * _1971))) * cbSceneParam._m0[33u].y;
            float _4537 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
            float _2367 = (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2173, cbSceneParam._m0[33u].w + _2174), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2173, _2174 - cbSceneParam._m0[33u].z), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].z, _2174 - cbSceneParam._m0[33u].w), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2173 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2174), _2317), 0.0)).x), vec4(0.25)));
            float _2371 = 1.0 - (_2367 * cbSceneParam._m0[34u].x);
            float _2372 = 1.0 - (_2367 * cbSceneParam._m0[34u].y);
            float _2373 = 1.0 - (_2367 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2373) ? _2120 : (isnan(_2120) ? _2373 : min(_2120, _2373));
            frontier_phi_37_36_ladder_1 = isnan(_2372) ? _2119 : (isnan(_2119) ? _2372 : min(_2119, _2372));
            frontier_phi_37_36_ladder_2 = isnan(_2371) ? _2118 : (isnan(_2118) ? _2371 : min(_2118, _2371));
        }
        else
        {
            frontier_phi_37_36_ladder = _2120;
            frontier_phi_37_36_ladder_1 = _2119;
            frontier_phi_37_36_ladder_2 = _2118;
        }
        _2184 = frontier_phi_37_36_ladder_2;
        _2186 = frontier_phi_37_36_ladder_1;
        _2188 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2184 = _2118;
        _2186 = _2119;
        _2188 = _2120;
    }
    uvec4 _2193 = floatBitsToUint(cbInstanceData._m0[_843 + 5u]);
    uint _2195 = _2193.x * 14u;
    uint _2196 = _2195 + 13u;
    float _2203 = _868 + (-1.0);
    float _2208 = (cbLight._m0[_2196].x * _2203) + 1.0;
    float _2209 = (cbLight._m0[_2196].y * _2203) + 1.0;
    float _2210 = (cbLight._m0[_2196].z * _2203) + 1.0;
    float _2211 = (cbLight._m0[_2196].w * _2203) + 1.0;
    uint _2212 = _2195 + 5u;
    float _2218 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2222 = _2195 + 4u;
    float _2232 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2236 = _2195 | 1u;
    float _2247 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_704, _705, _706));
    float _2250 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_704, _705, _706));
    float _4573 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _4584 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2255 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * 0.3183098733425140380859375;
    float _2257 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * 0.3183098733425140380859375;
    float _2264 = ((cbLight._m0[_2212].x * _2218) * _2257) + (((cbLight._m0[_2222].x * _2184) * _2232) * _2255);
    float _2265 = ((_2218 * cbLight._m0[_2212].y) * _2257) + (((cbLight._m0[_2222].y * _2186) * _2232) * _2255);
    float _2266 = ((_2218 * cbLight._m0[_2212].z) * _2257) + (((cbLight._m0[_2222].z * _2188) * _2232) * _2255);
    uvec4 _2270 = floatBitsToUint(cbLight._m0[_2195 + 12u]);
    bool _2272 = _2270.x == 0u;
    float _2374;
    float _2376;
    float _2378;
    if (_2272)
    {
        _2374 = _2264;
        _2376 = _2265;
        _2378 = _2266;
    }
    else
    {
        uint _2382 = _2195 + 6u;
        float _2398 = (dot(vec3(cbLight._m0[_2195 + 2u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2399 = _2398 * _2398;
        float _4595 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2400 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
        float _2401 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2374 = (((cbLight._m0[_2382].x * 0.3183098733425140380859375) * _2400) * _2401) + _2264;
        _2376 = (((cbLight._m0[_2382].y * 0.3183098733425140380859375) * _2400) * _2401) + _2265;
        _2378 = (((cbLight._m0[_2382].z * 0.3183098733425140380859375) * _2400) * _2401) + _2266;
    }
    bool _2381 = _2270.y == 0u;
    float _2436;
    float _2438;
    float _2440;
    if (_2381)
    {
        _2436 = _2374;
        _2438 = _2376;
        _2440 = _2378;
    }
    else
    {
        uint _2598 = _2195 + 7u;
        float _2614 = (dot(vec3(cbLight._m0[_2195 + 3u].xyz), vec3(_704, _705, _706)) * 0.5) + 0.5;
        float _2615 = _2614 * _2614;
        float _4611 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2616 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2617 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2436 = (((cbLight._m0[_2598].x * 0.3183098733425140380859375) * _2616) * _2617) + _2374;
        _2438 = (((cbLight._m0[_2598].y * 0.3183098733425140380859375) * _2616) * _2617) + _2376;
        _2440 = (((cbLight._m0[_2598].z * 0.3183098733425140380859375) * _2616) * _2617) + _2378;
    }
    uint _2443 = _2195 + 8u;
    float _2456 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _707) * 0.949999988079071044921875);
    float _2457 = _2456 * _2456;
    float _2458 = cbLight._m0[_2195].x + _784;
    float _2459 = cbLight._m0[_2195].y + _785;
    float _2460 = cbLight._m0[_2195].z + _786;
    float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
    float _2465 = _2464 * _2458;
    float _2466 = _2464 * _2459;
    float _2467 = _2464 * _2460;
    float _2468 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2195].xyz));
    float _4627 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2471 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
    float _4638 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2472 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
    float _2473 = dot(vec3(_704, _705, _706), vec3(_2465, _2466, _2467));
    float _4649 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _2477 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2465, _2466, _2467));
    float _4660 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2481 = _2457 * _2457;
    float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
    float _2496 = (exp2(log2(1.0 - (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2497 = 1.0 - _2457;
    float _2508 = (0.5 / (((_2472 * ((_2471 * _2497) + _2457)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2497) + _2457) * _2471))) * _2471;
    float _4671 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2510 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
    uint _2524 = _2195 + 9u;
    float _2535 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _707) * 0.949999988079071044921875);
    float _2536 = _2535 * _2535;
    float _2537 = cbLight._m0[_2236].x + _784;
    float _2538 = cbLight._m0[_2236].y + _785;
    float _2539 = cbLight._m0[_2236].z + _786;
    float _2543 = inversesqrt(dot(vec3(_2537, _2538, _2539), vec3(_2537, _2538, _2539)));
    float _2544 = _2543 * _2537;
    float _2545 = _2543 * _2538;
    float _2546 = _2543 * _2539;
    float _2547 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2236].xyz));
    float _4682 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2550 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2551 = dot(vec3(_704, _705, _706), vec3(_2544, _2545, _2546));
    float _4693 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2544, _2545, _2546));
    float _4704 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2536 * _2536;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2572 = (exp2(log2(1.0 - (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2573 = 1.0 - _2536;
    float _2583 = (0.5 / (((_2472 * ((_2550 * _2573) + _2536)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2573) + _2536) * _2550))) * _2550;
    float _4715 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2585 = (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    float _2595 = (((_2572 * cbLight._m0[_2524].x) * _2585) * _2218) + ((((cbLight._m0[_2443].x * _2184) * _2496) * _2510) * _2232);
    float _2596 = (((_2572 * cbLight._m0[_2524].y) * _2585) * _2218) + ((((cbLight._m0[_2443].y * _2186) * _2496) * _2510) * _2232);
    float _2597 = (((_2572 * cbLight._m0[_2524].z) * _2585) * _2218) + ((((cbLight._m0[_2443].z * _2188) * _2496) * _2510) * _2232);
    float _2653;
    float _2655;
    float _2657;
    if (_2272)
    {
        _2653 = _2595;
        _2655 = _2596;
        _2657 = _2597;
    }
    else
    {
        uint _2659 = _2195 + 2u;
        uint _2663 = _2195 + 10u;
        float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2659].w)) * _707) * 0.949999988079071044921875);
        float _2678 = _2677 * _2677;
        float _2679 = cbLight._m0[_2659].x + _784;
        float _2680 = cbLight._m0[_2659].y + _785;
        float _2681 = cbLight._m0[_2659].z + _786;
        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
        float _2686 = _2685 * _2679;
        float _2687 = _2685 * _2680;
        float _2688 = _2685 * _2681;
        float _2689 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2659].xyz));
        float _4726 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2693 = dot(vec3(_704, _705, _706), vec3(_2686, _2687, _2688));
        float _4737 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _2697 = dot(vec3(cbLight._m0[_2659].xyz), vec3(_2686, _2687, _2688));
        float _4748 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2701 = _2678 * _2678;
        float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
        float _2714 = (exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2715 = 1.0 - _2678;
        float _2725 = (0.5 / (((_2472 * ((_2692 * _2715) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2715) + _2678) * _2692))) * _2692;
        float _4759 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2727 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
        float _2728 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2653 = (((_2714 * cbLight._m0[_2663].x) * _2727) * _2728) + _2595;
        _2655 = (((_2714 * cbLight._m0[_2663].y) * _2727) * _2728) + _2596;
        _2657 = (((_2714 * cbLight._m0[_2663].z) * _2727) * _2728) + _2597;
    }
    float _2759;
    float _2761;
    float _2763;
    if (_2381)
    {
        _2759 = _2653;
        _2761 = _2655;
        _2763 = _2657;
    }
    else
    {
        uint _2770 = _2195 + 3u;
        uint _2774 = _2195 + 11u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _707) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _784;
        float _2791 = cbLight._m0[_2770].y + _785;
        float _2792 = cbLight._m0[_2770].z + _786;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_704, _705, _706), vec3(cbLight._m0[_2770].xyz));
        float _4775 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2804 = dot(vec3(_704, _705, _706), vec3(_2797, _2798, _2799));
        float _4786 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4797 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2825 = (exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2826 = 1.0 - _2789;
        float _2836 = (0.5 / (((_2472 * ((_2803 * _2826) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2472 * _2826) + _2789) * _2803))) * _2803;
        float _4808 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2759 = (((_2825 * cbLight._m0[_2774].x) * _2838) * _2839) + _2653;
        _2761 = (((_2825 * cbLight._m0[_2774].y) * _2838) * _2839) + _2655;
        _2763 = (((_2825 * cbLight._m0[_2774].z) * _2838) * _2839) + _2657;
    }
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_2193.y == 0u)
    {
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.x;
        uint _2872 = uint((float(_2860.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2861))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2861)));
        float _2882 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2883 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        uint _2886 = uint(isnan(14.0) ? _2883 : (isnan(_2883) ? 14.0 : min(_2883, 14.0)));
        uvec4 _2891 = texelFetch(g_lightClusterGridBuffer, int(((_2886 << 2u) + (_2872 << 6u)) >> 2u));
        uint _2892 = _2891.x;
        uint _2893 = _2860.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2893 >> 4u) & 15u)) + 4294967295u) & _2892) == 0u) || ((_2893 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3178 = 0.0;
            float _3179 = 0.0;
            float _3180 = 0.0;
            float _3181 = 0.0;
            float _3182 = 0.0;
            float _3183 = 0.0;
            uint _3184 = 0u;
            uint _3193;
            bool _3194;
            for (;;)
            {
                _3193 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3184 << 2u)) >> 2u)).x;
                _3194 = _3193 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3194)
                {
                    frontier_phi_71_pred = _3183;
                    frontier_phi_71_pred_1 = _3182;
                    frontier_phi_71_pred_2 = _3181;
                    frontier_phi_71_pred_3 = _3180;
                    frontier_phi_71_pred_4 = _3179;
                    frontier_phi_71_pred_5 = _3178;
                }
                else
                {
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    uint _3329;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3180;
                    _3326 = _3181;
                    _3327 = _3182;
                    _3328 = _3183;
                    _3329 = _3193;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    for (;;)
                    {
                        uint _3333 = uint(findLSB(_3329)) + (_3184 << 5u);
                        uint _3330 = (_3329 + 4294967295u) & _3329;
                        uint _3335 = _3333 * 48u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3355 = (_3333 * 48u) + 4u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3374 = (_3333 * 48u) + 8u;
                        vec3 _3385 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x));
                        float _3389 = _3349.x - _1969;
                        float _3390 = _3349.y - _1970;
                        float _3391 = _3349.z - _1971;
                        float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                        float _3395 = inversesqrt(_3392);
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3399 = dot(vec3(_824, _827, _830), vec3(_3396, _3397, _3398));
                        float _3404 = 1.0 - (_3392 * _3349.w);
                        float _4834 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3406 = sqrt(_3392) * _3368.w;
                        float _3409 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3399) + _3410;
                        float _3416 = _3406 * _3406;
                        float _3420 = ((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3405) / ((_3416 * 0.699999988079071044921875) + 1.0);
                        float _3424 = (-0.0) - _1969;
                        float _3425 = (-0.0) - _1970;
                        float _3426 = (-0.0) - _1971;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3440 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _884;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3431 + _3396;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_824, _827, _830), vec3(_3431, _3432, _3433));
                        float _4850 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
                        float _3465 = dot(vec3(_824, _827, _830), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4861 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3409 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3399) + _3474;
                        float _4872 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4883 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0)))) / ((_3472 * _3472) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125))) * _3405;
                        _3253 = (_3420 * _3368.x) + _3326;
                        _3254 = (_3420 * _3368.y) + _3327;
                        _3255 = (_3420 * _3368.z) + _3328;
                        _3250 = (_3500 * _3385.x) + _3323;
                        _3251 = (_3500 * _3385.y) + _3324;
                        _3252 = (_3500 * _3385.z) + _3325;
                        if (_3330 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3252;
                            _3326 = _3253;
                            _3327 = _3254;
                            _3328 = _3255;
                            _3329 = _3330;
                        }
                    }
                    frontier_phi_71_pred = _3255;
                    frontier_phi_71_pred_1 = _3254;
                    frontier_phi_71_pred_2 = _3253;
                    frontier_phi_71_pred_3 = _3252;
                    frontier_phi_71_pred_4 = _3251;
                    frontier_phi_71_pred_5 = _3250;
                }
                _3028 = frontier_phi_71_pred;
                _3026 = frontier_phi_71_pred_1;
                _3024 = frontier_phi_71_pred_2;
                _3022 = frontier_phi_71_pred_3;
                _3020 = frontier_phi_71_pred_4;
                _3018 = frontier_phi_71_pred_5;
                uint _3185 = _3184 + 1u;
                if (_3185 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3178 = _3018;
                    _3179 = _3020;
                    _3180 = _3022;
                    _3181 = _3024;
                    _3182 = _3026;
                    _3183 = _3028;
                    _3184 = _3185;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        float _3154;
        float _3156;
        if (((4294967295u << _3034) & _2892) == 0u)
        {
            _3146 = _3017;
            _3148 = _3019;
            _3150 = _3021;
            _3152 = _3023;
            _3154 = _3025;
            _3156 = _3027;
        }
        else
        {
            float _3171 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float _3172 = _3171 * _1969;
            float _3173 = _3171 * _1970;
            float _3174 = _3171 * _1971;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3155;
                float _3157;
                float _3306 = _3017;
                float _3307 = _3019;
                float _3308 = _3021;
                float _3309 = _3023;
                float _3310 = _3025;
                float _3311 = _3027;
                uint _3312 = _3034;
                uint _3321;
                bool _3322;
                for (;;)
                {
                    _3321 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3312 << 2u)) >> 2u)).x;
                    _3322 = _3321 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3322)
                    {
                        frontier_phi_82_pred = _3311;
                        frontier_phi_82_pred_1 = _3310;
                        frontier_phi_82_pred_2 = _3309;
                        frontier_phi_82_pred_3 = _3308;
                        frontier_phi_82_pred_4 = _3307;
                        frontier_phi_82_pred_5 = _3306;
                    }
                    else
                    {
                        float _3514;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        float _3529 = _3308;
                        float _3530 = _3309;
                        float _3531 = _3310;
                        float _3532 = _3311;
                        uint _3533 = _3321;
                        uint _3534;
                        vec4 _3559;
                        float _3560;
                        vec4 _3575;
                        vec3 _3587;
                        vec4 _3602;
                        vec4 _3617;
                        float _3664;
                        bool _3665;
                        for (;;)
                        {
                            uint _3544 = ((_3312 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3533));
                            _3534 = (_3533 + 4294967295u) & _3533;
                            uint _3546 = _3544 * 40u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            _3560 = _3559.w;
                            uint _3562 = (_3544 * 40u) + 4u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3544 * 40u) + 8u;
                            _3587 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x));
                            uint _3589 = (_3544 * 40u) + 16u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3544 * 40u) + 20u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3620 = (_3544 * 40u) + 24u;
                            vec4 _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3639 = (_3544 * 40u) + 28u;
                            vec4 _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            _3664 = fma(_1971, _3652.z, fma(_1970, _3652.y, _3652.x * _1969)) + _3652.w;
                            _3665 = !((fma(_1971, _3633.z, fma(_1970, _3633.y, _3633.x * _1969)) + _3633.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3665)
                            {
                                float _3692 = _3559.x - _1969;
                                float _3693 = _3559.y - _1970;
                                float _3694 = _3559.z - _1971;
                                float _3695 = dot(vec3(_3692, _3693, _3694), vec3(_3692, _3693, _3694));
                                float _3698 = inversesqrt(_3695);
                                float _3699 = _3698 * _3692;
                                float _3700 = _3698 * _3693;
                                float _3701 = _3698 * _3694;
                                float _3705 = 1.0 - (_3695 / (_3560 * _3560));
                                float _4894 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3710 = sqrt(_3695) * _3575.w;
                                float _3712 = 1.39999997615814208984375 / (_3710 + 1.39999997615814208984375);
                                float _3713 = _3712 * _3712;
                                float _3716 = ((1.0 - _3713) * dot(vec3(_3699, _3700, _3701), vec3(_824, _827, _830))) + _3713;
                                float _3719 = _3710 * _3710;
                                float _3723 = (fma(_1971, _3602.z, fma(_1970, _3602.y, _3602.x * _1969)) + _3602.w) / _3664;
                                float _3724 = (fma(_1971, _3617.z, fma(_1970, _3617.y, _3617.x * _1969)) + _3617.w) / _3664;
                                float _3728 = 1.0 - dot(vec2(_3723, _3724), vec2(_3723, _3724));
                                float _4910 = isnan(0.0) ? _3728 : (isnan(_3728) ? 0.0 : max(_3728, 0.0));
                                float _3729 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                                float _3730 = _3729 * (((isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0))) * _3706) / ((_3719 * 0.699999988079071044921875) + 1.0));
                                float _3742 = exp2(log2(1.0 / ((_3719 * 3.5) + 5.0)) * 0.25);
                                float _3743 = 1.0 - _884;
                                float _3750 = sqrt(1.0 - ((1.0 - (_3743 * _3743)) * (1.0 - (_3742 * _3742))));
                                float _3751 = _3750 * _3750;
                                float _3752 = _3751 * _3751;
                                float _3753 = _3699 - _3172;
                                float _3754 = _3700 - _3173;
                                float _3755 = _3701 - _3174;
                                float _3759 = inversesqrt(dot(vec3(_3753, _3754, _3755), vec3(_3753, _3754, _3755)));
                                float _3763 = dot(vec3(_824, _827, _830), vec3((-0.0) - _3172, (-0.0) - _3173, (-0.0) - _3174));
                                float _4921 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3767 = dot(vec3(_824, _827, _830), vec3(_3759 * _3753, _3759 * _3754, _3759 * _3755));
                                float _4932 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3774 = ((_3770 * _3770) * (_3752 + (-1.0))) + 1.0;
                                float _3775 = _3712 * _3751;
                                float _3776 = _3775 * _3775;
                                float _3782 = ((1.0 - _3776) * dot(vec3(_824, _827, _830), vec3(_3699, _3700, _3701))) + _3776;
                                float _4943 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3784 = 1.0 - _3751;
                                float _3794 = (0.5 / (((_3783 * ((_3766 * _3784) + _3751)) + 9.9999999392252902907785028219223e-09) + (((_3783 * _3784) + _3751) * _3766))) * _3783;
                                float _4954 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3804 = (_3729 * _3706) * (((_3752 * 3.1415927410125732421875) * (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) / ((_3774 * _3774) * ((_3719 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3730 * _3575.z;
                                frontier_phi_88_pred_1 = _3730 * _3575.y;
                                frontier_phi_88_pred_2 = _3730 * _3575.x;
                                frontier_phi_88_pred_3 = _3804 * _3587.z;
                                frontier_phi_88_pred_4 = _3804 * _3587.y;
                                frontier_phi_88_pred_5 = _3804 * _3587.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3813 = frontier_phi_88_pred;
                            _3812 = frontier_phi_88_pred_1;
                            _3811 = frontier_phi_88_pred_2;
                            _3810 = frontier_phi_88_pred_3;
                            _3809 = frontier_phi_88_pred_4;
                            _3808 = frontier_phi_88_pred_5;
                            _3517 = _3811 + _3530;
                            _3518 = _3812 + _3531;
                            _3519 = _3813 + _3532;
                            _3514 = _3808 + _3527;
                            _3515 = _3809 + _3528;
                            _3516 = _3810 + _3529;
                            if (_3534 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3516;
                                _3530 = _3517;
                                _3531 = _3518;
                                _3532 = _3519;
                                _3533 = _3534;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3519;
                        frontier_phi_82_pred_1 = _3518;
                        frontier_phi_82_pred_2 = _3517;
                        frontier_phi_82_pred_3 = _3516;
                        frontier_phi_82_pred_4 = _3515;
                        frontier_phi_82_pred_5 = _3514;
                    }
                    _3157 = frontier_phi_82_pred;
                    _3155 = frontier_phi_82_pred_1;
                    _3153 = frontier_phi_82_pred_2;
                    _3151 = frontier_phi_82_pred_3;
                    _3149 = frontier_phi_82_pred_4;
                    _3147 = frontier_phi_82_pred_5;
                    uint _3313 = _3312 + 1u;
                    if (_3313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3306 = _3147;
                        _3307 = _3149;
                        _3308 = _3151;
                        _3309 = _3153;
                        _3310 = _3155;
                        _3311 = _3157;
                        _3312 = _3313;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3153;
                frontier_phi_63_64_ladder_1 = _3157;
                frontier_phi_63_64_ladder_2 = _3155;
                frontier_phi_63_64_ladder_3 = _3151;
                frontier_phi_63_64_ladder_4 = _3149;
                frontier_phi_63_64_ladder_5 = _3147;
            }
            else
            {
                frontier_phi_63_64_ladder = _3023;
                frontier_phi_63_64_ladder_1 = _3027;
                frontier_phi_63_64_ladder_2 = _3025;
                frontier_phi_63_64_ladder_3 = _3021;
                frontier_phi_63_64_ladder_4 = _3019;
                frontier_phi_63_64_ladder_5 = _3017;
            }
            _3146 = frontier_phi_63_64_ladder_5;
            _3148 = frontier_phi_63_64_ladder_4;
            _3150 = frontier_phi_63_64_ladder_3;
            _3152 = frontier_phi_63_64_ladder;
            _3154 = frontier_phi_63_64_ladder_2;
            _3156 = frontier_phi_63_64_ladder_1;
        }
        float _3161 = isnan(1.0) ? _868 : (isnan(_868) ? 1.0 : min(_868, 1.0));
        _2905 = (_3161 * _3152) + _2436;
        _2907 = (_3161 * _3154) + _2438;
        _2909 = (_3161 * _3156) + _2440;
        _2911 = ((_3146 * 0.039999999105930328369140625) * _3161) + _2759;
        _2913 = ((_3148 * 0.039999999105930328369140625) * _3161) + _2761;
        _2915 = ((_3150 * 0.039999999105930328369140625) * _3161) + _2763;
    }
    else
    {
        _2905 = _2436;
        _2907 = _2438;
        _2909 = _2440;
        _2911 = _2759;
        _2913 = _2761;
        _2915 = _2763;
    }
    uint _2921 = _844 + uint(cbMatDynParam._m0[0u].w);
    float _2927 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2933 = (((((_2927 * cbMtdParam._m0[14u].x) * _588.x) * _611) * _690) * (((1.0 - _664) * cbMtdParam._m0[20u].w) + _664)) * cbInstanceData._m0[_2921].x;
    float _2939 = (((((_2927 * cbMtdParam._m0[14u].y) * _588.y) * _611) * _690) * (((1.0 - _666) * cbMtdParam._m0[20u].w) + _666)) * cbInstanceData._m0[_2921].y;
    float _2945 = (((((_2927 * cbMtdParam._m0[14u].z) * _588.z) * _611) * _690) * (((1.0 - _668) * cbMtdParam._m0[20u].w) + _668)) * cbInstanceData._m0[_2921].z;
    float _4970 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _4981 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4992 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2962 = (((isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0))) * (_2905 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _868))) + ((_2911 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + _2933;
    float _2964 = (_2939 + ((_2913 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0))) * (_2907 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _868)));
    float _2966 = (_2945 + ((_2915 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1705)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2909 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _868)));
    float _2967 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
    float _2968 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
    float _2969 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
    float _2975 = cbMtdParam._m0[2u].x * _2933;
    float _2976 = cbMtdParam._m0[2u].y * _2939;
    float _2977 = cbMtdParam._m0[2u].z * _2945;
    float _5018 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2979 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
    uint _2980 = _843 + 6u;
    float _2988 = _804 / cbSceneParam._m0[86u].x;
    float _2989 = _805 / cbSceneParam._m0[86u].y;
    vec4 _3003 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, (log2((isnan(cbSceneParam._m0[77u].w) ? _726 : (isnan(_726) ? cbSceneParam._m0[77u].w : min(_726, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3005 = _3003.x;
    float _3006 = _3003.y;
    float _3007 = _3003.z;
    float _3008 = _3003.w;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_726 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_726) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _726 : min(cbSceneParam._m0[80u].w, _726));
        float _3043 = _3042 / _726;
        float _3054 = _3043 * _777;
        float _3055 = _778 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3057 = _3043 * _779;
        float _3059 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3060 = _3059 + cbSceneParam._m0[79u].w;
        float _3061 = cbSceneParam._m0[79u].w - _3055;
        float _3067 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3057 * _3057));
        float _3070 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3067;
        float _3075 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3077 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3263;
        if (abs((_3056 - _3059) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3263 = ((((_3060 > 0.0) ? exp2(_3075 * _3060) : (2.0 - exp2(_3077 * _3060))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3070;
        }
        else
        {
            float _3207 = 1.0 / cbSceneParam._m0[80u].x;
            float _3208 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : max(_3060, _3061));
            float _3209 = isnan(_3061) ? _3060 : (isnan(_3060) ? _3061 : min(_3060, _3061));
            float _3218 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : min(_3208, 0.0));
            float _3219 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : min(_3209, 0.0));
            _3263 = ((abs(_3067 / _3056) * cbSceneParam._m0[80u].y) * ((((_3218 - _3219) * 2.0) - ((exp2(_3075 * (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0)))) - exp2(_3075 * (isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))))) * _3207)) - ((exp2(_3077 * _3218) - exp2(_3077 * _3219)) * _3207))) + (_3070 * cbSceneParam._m0[80u].z);
        }
        vec4 _3265 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2988, _2989, 1.0), 0.0);
        float _3274 = exp2((_3263 * (-1.44269502162933349609375)) * (1.0 - _3265.w));
        float _3275 = log2(_3274);
        float _3291 = log2(_3008);
        _3079 = (exp2(_3291 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].x)) * _3265.x) / cbSceneParam._m0[78u].x)) + _3005;
        _3081 = (exp2(_3291 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].y)) * _3265.y) / cbSceneParam._m0[78u].y)) + _3006;
        _3083 = (exp2(_3291 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].z)) * _3265.z) / cbSceneParam._m0[78u].z)) + _3007;
        _3085 = _3274 * _3008;
    }
    else
    {
        _3079 = _3005;
        _3081 = _3006;
        _3083 = _3007;
        _3085 = _3008;
    }
    bool _3301;
    vec4 _3095;
    vec4 _3117;
    float _3119;
    float _3123;
    float _3124;
    float _3125;
    float _3128;
    float _3131;
    float _3134;
    float _3135;
    bool _3145;
    for (;;)
    {
        _3095 = cbMatDynParam._m0[0u];
        float _3097 = roundEven(_3095.y);
        bool _3098 = _3097 == 3.0;
        float _3099 = log2(_3085);
        float _3103 = exp2(_3099 * cbSceneParam._m0[78u].x);
        float _3104 = exp2(_3099 * cbSceneParam._m0[78u].y);
        float _3105 = exp2(_3099 * cbSceneParam._m0[78u].z);
        float _3106 = _3103 * _2967;
        float _3107 = _3104 * _2968;
        float _3108 = _3105 * _2969;
        float _3115 = _793 + (-0.5);
        _3117 = cbMtdParam._m0[1u];
        _3119 = _3117.y * _3115;
        float _3122 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3123 = _3122 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3079)));
        _3124 = _3122 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3081)));
        _3125 = _3122 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3083)));
        _3128 = ((_2975 * _2979) * _3103) * _3122;
        _3131 = ((_2976 * _2979) * _3104) * _3122;
        _3134 = ((_2977 * _2979) * _3105) * _3122;
        _3135 = _3115 * 0.999000012874603271484375;
        _3145 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3145)
        {
            if ((cbInstanceData._m0[_843 + 7u].x + _3135) < 0.5)
            {
                _3301 = true;
                break;
            }
        }
        uint _3242 = _844 + uint(_3095.w);
        if ((cbInstanceData._m0[_3242].w < 1.0) && ((cbInstanceData._m0[_3242].w + _3135) < 0.5))
        {
            _3301 = true;
            break;
        }
        if ((_3119 + 1.0) < _3117.x)
        {
            _3301 = true;
            break;
        }
        _3301 = false;
        break;
    }
    float _3505;
    if (_3301)
    {
        discard_state = true;
        _3505 = 0.0;
    }
    else
    {
        _3505 = cbInstanceData._m0[_2980].w;
    }
    SV_Target.x = _3123;
    SV_Target.y = _3124;
    SV_Target.z = _3125;
    SV_Target.w = _3505;
    SV_Target_1.x = _3128;
    SV_Target_1.y = _3131;
    SV_Target_1.z = _3134;
    SV_Target_1.w = cbInstanceData._m0[_2980].w;
    discard_exit();
}


