#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _289 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _308 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _345 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _308.x) * 2.0) - _335)) + 1.0;
    float _3711 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _353 = (_346 * ((_289.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _354 = (_346 * ((_289.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _355 = (_346 * ((_289.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _374 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _387 = (((((1.0 - _308.y) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3722 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _395 = (((_374.x * cbMtdParam._m0[12u].x) - _353) * _388) + _353;
    float _396 = (_388 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _397 = (_388 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _415 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _428 = (((((1.0 - _308.z) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3733 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _436 = (((_415.x * cbMtdParam._m0[13u].x) - _395) * _429) + _395;
    float _437 = (_429 * ((_415.y * cbMtdParam._m0[13u].y) - _396)) + _396;
    float _438 = (_429 * ((_415.z * cbMtdParam._m0[13u].z) - _397)) + _397;
    vec4 _465 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _484 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _487 = _484.x + 0.00999999977648258209228515625;
    float _494 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _487)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3744 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _502 = (_495 * ((_465.x * cbMtdParam._m0[16u].x) - _436)) + _436;
    float _503 = (_495 * ((_465.y * cbMtdParam._m0[16u].y) - _437)) + _437;
    float _504 = (_495 * ((_465.z * cbMtdParam._m0[16u].z) - _438)) + _438;
    vec4 _517 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    vec4 _554 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _565 = ((_554.x - _540) * _346) + _540;
    float _566 = ((_554.y - _541) * _346) + _541;
    float _567 = ((_554.z - _542) * _346) + _542;
    vec4 _580 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _591 = ((_580.x - _565) * _388) + _565;
    float _592 = ((_580.y - _566) * _388) + _566;
    float _593 = ((_580.z - _567) * _388) + _567;
    vec4 _606 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _619 = ((_606.z - _593) * _429) + _593;
    float _622 = ((((_606.x - _591) * _429) + _591) * 2.0) + (-1.0);
    float _623 = ((((_606.y - _592) * _429) + _592) * 2.0) + (-1.0);
    float _624 = dot(vec2(_622, _623), vec2(_622, _623));
    float _3755 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _629 = sqrt(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))));
    float _634 = (((_517.z - _619) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _619;
    vec4 _664 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _678 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3766 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _679 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _687 = (((_679 * _679) * (3.0 - (_679 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _695 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _703 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3777 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _708 = (_704 * _704) * (3.0 - (_704 * 2.0));
    float _709 = _708 * cbMtdParam._m0[22u].x;
    float _710 = _708 * cbMtdParam._m0[22u].y;
    float _711 = sin(_695);
    float _712 = cos(_695);
    float _713 = TEXCOORD.z - _709;
    float _714 = TEXCOORD.w - _710;
    vec4 _734 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_709 + fma(_714, (-0.0) - _711, _713 * _712))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_714, _712, _713 * _711) + _710)) + cbTextureTilingScale._m0[2u].w));
    float _740 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _734.x;
    float _742 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _734.y;
    float _744 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _734.z;
    float _760 = (TEXCOORD_5.x - ((_487 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3788 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _761 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    vec4 _774 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _790 = (((((_517.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _622) + (((_774.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _792 = (((((_517.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _623) + (((_774.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _795 = fma(_629, _233 * NORMAL.x, fma(_792, _240 * TANGENT.x, (_226 * _218) * _790));
    float _798 = fma(_629, _233 * NORMAL.y, fma(_792, _240 * TANGENT.y, (_226 * _219) * _790));
    float _801 = fma(_629, _233 * NORMAL.z, fma(_792, _240 * TANGENT.z, (_226 * _220) * _790));
    float _805 = inversesqrt(dot(vec3(_795, _798, _801), vec3(_795, _798, _801)));
    float _806 = _805 * _795;
    float _807 = _805 * _798;
    float _808 = _805 * _801;
    float _3799 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _809 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _3821 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3832 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _828 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _868 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _878 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _868);
    float _879 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _868);
    float _880 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _868);
    float _884 = inversesqrt(dot(vec3(_878, _879, _880), vec3(_878, _879, _880)));
    float _885 = _878 * _884;
    float _886 = _879 * _884;
    float _887 = _880 * _884;
    float _893 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _894 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_808, cbSceneParam._m0[5u].z, fma(_807, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _806));
    float _916 = fma(_808, cbSceneParam._m0[6u].z, fma(_807, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _806));
    float _919 = fma(_808, cbSceneParam._m0[7u].z, fma(_807, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _806));
    uint _932 = uint(roundEven(NORMAL.w)) * 13u;
    uint _933 = _932 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3843 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    vec4 _954 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _893, cbSceneParam._m0[86u].y * _894));
    float _957 = _954.x * TEXCOORD_5.w;
    float _958 = dot(vec3(_806, _807, _808), vec3(_885, _886, _887));
    float _961 = _958 * 2.0;
    float _965 = (_961 * _806) - _885;
    float _966 = (_961 * _807) - _886;
    float _967 = (_961 * _808) - _887;
    float _971 = abs(dot(vec3(_885, _886, _887), vec3(_806, _807, _808)));
    float _3876 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _973 = sqrt(_809);
    float _985 = exp2((_973 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_973 * 3.0));
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1025, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017));
        float _1056 = fma(_1025, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017));
        float _1060 = fma(_1025, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017));
        float _1085 = _1017 + _806;
        float _1086 = _1021 + _807;
        float _1087 = _1025 + _808;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1052;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1056;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1060;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_806, _807, _808), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3924 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_806, _807, _808), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3957 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_806, _807, _808), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3990 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1368 = fma(_1025, cbModelParam._m0[30u].z, fma(_1021, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1017));
        float _1372 = fma(_1025, cbModelParam._m0[31u].z, fma(_1021, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1017));
        float _1376 = fma(_1025, cbModelParam._m0[32u].z, fma(_1021, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1017));
        float _1399 = _1017 + _806;
        float _1400 = _1021 + _807;
        float _1401 = _1025 + _808;
        float _1411 = fma(_1401, cbModelParam._m0[30u].z, fma(_1400, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399)) - _1368;
        float _1412 = fma(_1401, cbModelParam._m0[31u].z, fma(_1400, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399)) - _1372;
        float _1413 = fma(_1401, cbModelParam._m0[32u].z, fma(_1400, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399)) - _1376;
        float _1417 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
        float _1430 = ((_1417 * _1411) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1368 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1431 = ((_1417 * _1412) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1372 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1432 = ((_1417 * _1413) / cbModelParam._m0[35u].z) + ((((((_1376 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1430, _1431, _1432), 0.0);
        float _1467 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1434.x + (-0.5));
        float _1469 = _1467 * (_1434.y + (-0.5));
        float _1470 = _1467 * (_1434.z + (-0.5));
        float _1477 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1441.x + (-0.5));
        float _1479 = _1477 * (_1441.y + (-0.5));
        float _1480 = _1477 * (_1441.z + (-0.5));
        float _1487 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1448.x + (-0.5));
        float _1489 = _1487 * (_1448.y + (-0.5));
        float _1490 = _1487 * (_1448.z + (-0.5));
        float _1497 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1455.x + (-0.5));
        float _1499 = _1497 * (_1455.y + (-0.5));
        float _1500 = _1497 * (_1455.z + (-0.5));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1503 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1504 = _1468 * 0.5;
        float _1505 = _1478 * 0.5;
        float _1506 = _1488 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_806, _807, _808), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4053 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1531 + 1.0))) + _1536) * _1501;
        float _1546 = _1469 * 0.5;
        float _1547 = _1479 * 0.5;
        float _1548 = _1489 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_806, _807, _808), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1502 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4086 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1573 + 1.0))) + _1578) * _1502;
        float _1588 = _1470 * 0.5;
        float _1589 = _1480 * 0.5;
        float _1590 = _1490 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_806, _807, _808), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1503 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4119 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1615 + 1.0))) + _1620) * _1503;
        _1637 = _1470;
        _1638 = _1469;
        _1639 = _1468;
        _1640 = _1480;
        _1641 = _1479;
        _1642 = _1478;
        _1643 = _1490;
        _1644 = _1489;
        _1645 = _1488;
        _1646 = _1503;
        _1647 = _1502;
        _1648 = _1501;
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1650 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1651 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
    }
    else
    {
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = _1328;
        _1648 = _1328;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1340)) + _1340;
    float _1662 = (cbModelParam._m0[1u].x * (_1650 - _1341)) + _1341;
    float _1663 = (cbModelParam._m0[1u].x * (_1651 - _1342)) + _1342;
    float _1684 = fma(_1663, cbSceneParam._m0[89u].z, fma(_1662, cbSceneParam._m0[89u].y, _1661 * cbSceneParam._m0[89u].x));
    float _1687 = fma(_1663, cbSceneParam._m0[90u].z, fma(_1662, cbSceneParam._m0[90u].y, _1661 * cbSceneParam._m0[90u].x));
    float _1690 = fma(_1663, cbSceneParam._m0[91u].z, fma(_1662, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1661));
    float _1705 = _965 * 0.5;
    float _1706 = _966 * 0.5;
    float _1707 = _967 * 0.5;
    float _1708 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1639, _1642, _1645, _1648));
    float _1711 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1638, _1641, _1644, _1647));
    float _1714 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1748;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1721 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1725 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1729 = dot(vec4(_1705, _1706, _1707, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1736 = dot(vec4(cbModelParam._m0[39u]), vec4(_1705, _1706, _1707, 1.0));
        _1748 = dot(vec3(isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)), isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1748 = 1.0;
    }
    float _1759;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1750 = dot(vec4(cbModelParam._m0[40u]), vec4(_1705, _1706, _1707, 1.0));
        _1759 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1750) ? 0.0 : (isnan(0.0) ? _1750 : max(0.0, _1750))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1759 = 1.0;
    }
    float _1763 = (_1759 * cbModelParam._m0[1u].x) + (_1748 * (1.0 - cbModelParam._m0[1u].x));
    float _1773 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _809);
    float _1774 = isnan(_1773) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1773 : min(cbModelParam._m0[25u].z, _1773));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_1025, cbModelParam._m0[13u].z, fma(_1021, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1017)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_1025, cbModelParam._m0[14u].z, fma(_1021, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1017)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_1025, cbModelParam._m0[15u].z, fma(_1021, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1017)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_967, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _965));
        float _1835 = fma(_967, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _965));
        float _1838 = fma(_967, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _965));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1866 = frontier_phi_14_12_ladder;
        }
        float _2087;
        if (_1835 > 0.0)
        {
            _2087 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2087 = frontier_phi_23_19_ladder;
        }
        float _2333;
        if (_1838 > 0.0)
        {
            _2333 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2333 = frontier_phi_35_30_ladder;
        }
        float _2335 = isnan(_2087) ? _1866 : (isnan(_1866) ? _2087 : min(_1866, _2087));
        float _2336 = isnan(_2333) ? _2335 : (isnan(_2335) ? _2333 : min(_2335, _2333));
        float _2340 = (_2336 * _1832) + _1821;
        float _2341 = (_2336 * _1835) + _1825;
        float _2342 = (_2336 * _1838) + _1829;
        float _2343 = _2336 * 9.9999997473787516355514526367188e-05;
        float _2345 = (-1.0) - _2343;
        float _2347 = _2343 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2342 > _2347) || ((_2342 < _2345) || ((_2341 > _2347) || ((_2341 < _2345) || ((_2340 < _2345) || (_2340 > _2347))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2466 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2342, cbModelParam._m0[9u].z, fma(_2341, cbModelParam._m0[9u].y, _2340 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2342, cbModelParam._m0[10u].z, fma(_2341, cbModelParam._m0[10u].y, _2340 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2342, cbModelParam._m0[11u].z, fma(_2341, cbModelParam._m0[11u].y, _2340 * cbModelParam._m0[11u].x))), _1774);
            frontier_phi_13_35_ladder = _2466.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2466.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2466.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_13_35_ladder_2;
        _1856 = frontier_phi_13_35_ladder_1;
        _1858 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_965, _966, _967), _1774);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _809);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1916 = fma(_1025, cbModelParam._m0[21u].z, fma(_1021, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1017)) + cbModelParam._m0[21u].w;
        float _1920 = fma(_1025, cbModelParam._m0[22u].z, fma(_1021, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1017)) + cbModelParam._m0[22u].w;
        float _1924 = fma(_1025, cbModelParam._m0[23u].z, fma(_1021, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1017)) + cbModelParam._m0[23u].w;
        float _1927 = fma(_967, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _965));
        float _1930 = fma(_967, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _965));
        float _1933 = fma(_967, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _965));
        float _2092;
        if (_1927 > 0.0)
        {
            _2092 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2092 = frontier_phi_25_21_ladder;
        }
        float _2360;
        if (_1930 > 0.0)
        {
            _2360 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2360 = frontier_phi_37_32_ladder;
        }
        float _2565;
        if (_1933 > 0.0)
        {
            _2565 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2565 = frontier_phi_46_43_ladder;
        }
        float _2567 = isnan(_2360) ? _2092 : (isnan(_2092) ? _2360 : min(_2092, _2360));
        float _2568 = isnan(_2565) ? _2567 : (isnan(_2567) ? _2565 : min(_2567, _2565));
        float _2572 = (_2568 * _1927) + _1916;
        float _2573 = (_2568 * _1930) + _1920;
        float _2574 = (_2568 * _1933) + _1924;
        float _2575 = _2568 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2575;
        float _2578 = _2575 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2574 > _2578) || ((_2574 < _2576) || ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 < _2576) || (_2572 > _2578))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2574, cbModelParam._m0[17u].z, fma(_2573, cbModelParam._m0[17u].y, _2572 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2574, cbModelParam._m0[18u].z, fma(_2573, cbModelParam._m0[18u].y, _2572 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2574, cbModelParam._m0[19u].z, fma(_2573, cbModelParam._m0[19u].y, _2572 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_22_46_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _1952 = frontier_phi_22_46_ladder_2;
        _1954 = frontier_phi_22_46_ladder_1;
        _1956 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1936 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_965, _966, _967), _1863);
        _1952 = _1936.x * cbModelParam._m0[1u].z;
        _1954 = _1936.y * cbModelParam._m0[1u].z;
        _1956 = _1936.z * cbModelParam._m0[1u].z;
    }
    float _1968 = ((((1.0 - _985) * ((_973 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_985 * _973)) * _957;
    float _1969 = _1968 * ((cbModelParam._m0[1u].w * (_1952 - _1854)) + _1854);
    float _1970 = _1968 * ((cbModelParam._m0[1u].w * (_1954 - _1856)) + _1856);
    float _1971 = _1968 * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1974 = fma(_1971, cbSceneParam._m0[89u].z, fma(_1970, cbSceneParam._m0[89u].y, _1969 * cbSceneParam._m0[89u].x));
    float _1977 = fma(_1971, cbSceneParam._m0[90u].z, fma(_1970, cbSceneParam._m0[90u].y, _1969 * cbSceneParam._m0[90u].x));
    float _1980 = fma(_1971, cbSceneParam._m0[91u].z, fma(_1970, cbSceneParam._m0[91u].y, _1969 * cbSceneParam._m0[91u].x));
    vec4 _1988 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_893, _894));
    float _1990 = _1988.w;
    float _2002 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1990);
    float _2003 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1990);
    float _2004 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1990);
    uvec4 _2008 = floatBitsToUint(cbInstanceData._m0[_932 + 5u]);
    uint _2010 = _2008.x * 14u;
    uint _2011 = _2010 + 13u;
    float _2018 = _957 + (-1.0);
    float _2023 = (cbLight._m0[_2011].x * _2018) + 1.0;
    float _2024 = (cbLight._m0[_2011].y * _2018) + 1.0;
    float _2025 = (cbLight._m0[_2011].z * _2018) + 1.0;
    float _2026 = (cbLight._m0[_2011].w * _2018) + 1.0;
    uint _2027 = _2010 + 5u;
    float _2033 = isnan(1.0) ? _2024 : (isnan(_2024) ? 1.0 : min(_2024, 1.0));
    uint _2037 = _2010 + 4u;
    float _2046 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
    uint _2050 = _2010 | 1u;
    float _2061 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_806, _807, _808));
    float _2064 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_806, _807, _808));
    float _4255 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _4266 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2069 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2071 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2078 = ((cbLight._m0[_2027].x * _2033) * _2071) + (((cbLight._m0[_2037].x * _2002) * _2046) * _2069);
    float _2079 = ((_2033 * cbLight._m0[_2027].y) * _2071) + (((cbLight._m0[_2037].y * _2003) * _2046) * _2069);
    float _2080 = ((_2033 * cbLight._m0[_2027].z) * _2071) + (((cbLight._m0[_2037].z * _2004) * _2046) * _2069);
    uvec4 _2084 = floatBitsToUint(cbLight._m0[_2010 + 12u]);
    bool _2086 = _2084.x == 0u;
    float _2097;
    float _2099;
    float _2101;
    if (_2086)
    {
        _2097 = _2078;
        _2099 = _2079;
        _2101 = _2080;
    }
    else
    {
        uint _2105 = _2010 + 6u;
        float _2121 = (dot(vec3(cbLight._m0[_2010 + 2u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2122 = _2121 * _2121;
        float _4277 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        float _2123 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2124 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2097 = (((cbLight._m0[_2105].x * 0.3183098733425140380859375) * _2123) * _2124) + _2078;
        _2099 = (((cbLight._m0[_2105].y * 0.3183098733425140380859375) * _2123) * _2124) + _2079;
        _2101 = (((cbLight._m0[_2105].z * 0.3183098733425140380859375) * _2123) * _2124) + _2080;
    }
    bool _2104 = _2084.y == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2104)
    {
        _2142 = _2097;
        _2144 = _2099;
        _2146 = _2101;
    }
    else
    {
        uint _2304 = _2010 + 7u;
        float _2320 = (dot(vec3(cbLight._m0[_2010 + 3u].xyz), vec3(_806, _807, _808)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4293 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _2323 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2142 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2097;
        _2144 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2099;
        _2146 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2101;
    }
    uint _2149 = _2010 + 8u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _809) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_2010].x + _885;
    float _2165 = cbLight._m0[_2010].y + _886;
    float _2166 = cbLight._m0[_2010].z + _887;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2010].xyz));
    float _4309 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _4320 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _2178 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2179 = dot(vec3(_806, _807, _808), vec3(_2171, _2172, _2173));
    float _4331 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2182 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2183 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2171, _2172, _2173));
    float _4342 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2187 = _2163 * _2163;
    float _2191 = ((_2182 * _2182) * (_2187 + (-1.0))) + 1.0;
    float _2202 = (exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2203 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2178 * ((_2177 * _2203) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2203) + _2163) * _2177))) * _2177;
    float _4353 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2187 / ((_2191 * _2191) * 3.141590118408203125));
    uint _2230 = _2010 + 9u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _809) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2050].x + _885;
    float _2244 = cbLight._m0[_2050].y + _886;
    float _2245 = cbLight._m0[_2050].z + _887;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2050].xyz));
    float _4364 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2257 = dot(vec3(_806, _807, _808), vec3(_2250, _2251, _2252));
    float _4375 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2250, _2251, _2252));
    float _4386 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2242 * _2242;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2278 = (exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2279 = 1.0 - _2242;
    float _2289 = (0.5 / (((_2178 * ((_2256 * _2279) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2279) + _2242) * _2256))) * _2256;
    float _4397 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2291 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    float _2301 = (((_2278 * cbLight._m0[_2230].x) * _2291) * _2033) + ((((cbLight._m0[_2149].x * _2002) * _2202) * _2216) * _2046);
    float _2302 = (((_2278 * cbLight._m0[_2230].y) * _2291) * _2033) + ((((cbLight._m0[_2149].y * _2003) * _2202) * _2216) * _2046);
    float _2303 = (((_2278 * cbLight._m0[_2230].z) * _2291) * _2033) + ((((cbLight._m0[_2149].z * _2004) * _2202) * _2216) * _2046);
    float _2365;
    float _2367;
    float _2369;
    if (_2086)
    {
        _2365 = _2301;
        _2367 = _2302;
        _2369 = _2303;
    }
    else
    {
        uint _2371 = _2010 + 2u;
        uint _2375 = _2010 + 10u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _809) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _885;
        float _2392 = cbLight._m0[_2371].y + _886;
        float _2393 = cbLight._m0[_2371].z + _887;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2371].xyz));
        float _4408 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2405 = dot(vec3(_806, _807, _808), vec3(_2398, _2399, _2400));
        float _4419 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4430 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2426 = (exp2(log2(1.0 - (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2427 = 1.0 - _2390;
        float _2437 = (0.5 / (((_2178 * ((_2404 * _2427) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2427) + _2390) * _2404))) * _2404;
        float _4441 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2439 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2440 = isnan(1.0) ? _2025 : (isnan(_2025) ? 1.0 : min(_2025, 1.0));
        _2365 = (((_2426 * cbLight._m0[_2375].x) * _2439) * _2440) + _2301;
        _2367 = (((_2426 * cbLight._m0[_2375].y) * _2439) * _2440) + _2302;
        _2369 = (((_2426 * cbLight._m0[_2375].z) * _2439) * _2440) + _2303;
    }
    float _2475;
    float _2477;
    float _2479;
    if (_2104)
    {
        _2475 = _2365;
        _2477 = _2367;
        _2479 = _2369;
    }
    else
    {
        uint _2486 = _2010 + 3u;
        uint _2490 = _2010 + 11u;
        float _2504 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2486].w)) * _809) * 0.949999988079071044921875);
        float _2505 = _2504 * _2504;
        float _2506 = cbLight._m0[_2486].x + _885;
        float _2507 = cbLight._m0[_2486].y + _886;
        float _2508 = cbLight._m0[_2486].z + _887;
        float _2512 = inversesqrt(dot(vec3(_2506, _2507, _2508), vec3(_2506, _2507, _2508)));
        float _2513 = _2512 * _2506;
        float _2514 = _2512 * _2507;
        float _2515 = _2512 * _2508;
        float _2516 = dot(vec3(_806, _807, _808), vec3(cbLight._m0[_2486].xyz));
        float _4457 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2520 = dot(vec3(_806, _807, _808), vec3(_2513, _2514, _2515));
        float _4468 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2523 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2524 = dot(vec3(cbLight._m0[_2486].xyz), vec3(_2513, _2514, _2515));
        float _4479 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2528 = _2505 * _2505;
        float _2532 = ((_2523 * _2523) * (_2528 + (-1.0))) + 1.0;
        float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2542 = 1.0 - _2505;
        float _2552 = (0.5 / (((_2178 * ((_2519 * _2542) + _2505)) + 9.9999999392252902907785028219223e-09) + (((_2178 * _2542) + _2505) * _2519))) * _2519;
        float _4490 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2528 / ((_2532 * _2532) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2026 : (isnan(_2026) ? 1.0 : min(_2026, 1.0));
        _2475 = (((_2541 * cbLight._m0[_2490].x) * _2554) * _2555) + _2365;
        _2477 = (((_2541 * cbLight._m0[_2490].y) * _2554) * _2555) + _2367;
        _2479 = (((_2541 * cbLight._m0[_2490].z) * _2554) * _2555) + _2369;
    }
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_2008.y == 0u)
    {
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2630;
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2630;
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2630;
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.x;
        uint _2657 = uint((float(_2645.y) * floor(float(uint(cbSceneParam._m0[85u].y * _894) / _2646))) + floor(float(uint(cbSceneParam._m0[85u].x * _893) / _2646)));
        float _2667 = (log2(_2633 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2668 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        uint _2671 = uint(isnan(14.0) ? _2668 : (isnan(_2668) ? 14.0 : min(_2668, 14.0)));
        uvec4 _2676 = texelFetch(g_lightClusterGridBuffer, int(((_2671 << 2u) + (_2657 << 6u)) >> 2u));
        uint _2677 = _2676.x;
        uint _2678 = _2645.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2678 >> 4u) & 15u)) + 4294967295u) & _2677) == 0u) || ((_2678 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            uint _2982 = 0u;
            uint _2991;
            bool _2992;
            for (;;)
            {
                _2991 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                _2992 = _2991 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2992)
                {
                    frontier_phi_61_pred = _2976;
                    frontier_phi_61_pred_1 = _2981;
                    frontier_phi_61_pred_2 = _2980;
                    frontier_phi_61_pred_3 = _2979;
                    frontier_phi_61_pred_4 = _2978;
                    frontier_phi_61_pred_5 = _2977;
                }
                else
                {
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    uint _3106;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2991;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    for (;;)
                    {
                        uint _3110 = uint(findLSB(_3106)) + (_2982 << 5u);
                        uint _3107 = (_3106 + 4294967295u) & _3106;
                        uint _3112 = _3110 * 48u;
                        vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3112)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3112 + 3u)).x));
                        uint _3132 = (_3110 * 48u) + 4u;
                        vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3132)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3132 + 3u)).x));
                        uint _3151 = (_3110 * 48u) + 8u;
                        vec3 _3162 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3151)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3151 + 2u)).x));
                        float _3166 = _3126.x - _2631;
                        float _3167 = _3126.y - _2632;
                        float _3168 = _3126.z - _2633;
                        float _3169 = dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168));
                        float _3172 = inversesqrt(_3169);
                        float _3173 = _3172 * _3166;
                        float _3174 = _3172 * _3167;
                        float _3175 = _3172 * _3168;
                        float _3176 = dot(vec3(_913, _916, _919), vec3(_3173, _3174, _3175));
                        float _3181 = 1.0 - (_3169 * _3126.w);
                        float _4516 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3182 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3183 = sqrt(_3169) * _3145.w;
                        float _3186 = 1.39999997615814208984375 / (_3183 + 1.39999997615814208984375);
                        float _3187 = _3186 * _3186;
                        float _3190 = ((1.0 - _3187) * _3176) + _3187;
                        float _3193 = _3183 * _3183;
                        float _3197 = ((isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0))) * _3182) / ((_3193 * 0.699999988079071044921875) + 1.0);
                        float _3201 = (-0.0) - _2631;
                        float _3202 = (-0.0) - _2632;
                        float _3203 = (-0.0) - _2633;
                        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                        float _3208 = _3207 * _3201;
                        float _3209 = _3207 * _3202;
                        float _3210 = _3207 * _3203;
                        float _3218 = exp2(log2(1.0 / ((_3193 * 3.5) + 5.0)) * 0.25);
                        float _3219 = 1.0 - _973;
                        float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                        float _3227 = _3226 * _3226;
                        float _3228 = _3227 * _3227;
                        float _3229 = _3208 + _3173;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3239 = dot(vec3(_913, _916, _919), vec3(_3208, _3209, _3210));
                        float _4532 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3243 = dot(vec3(_913, _916, _919), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                        float _4543 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                        float _3251 = _3186 * _3227;
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3176) + _3252;
                        float _4554 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3257 = 1.0 - _3227;
                        float _3267 = (0.5 / (((_3256 * ((_3242 * _3257) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3227) * _3242))) * _3256;
                        float _4565 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3278 = (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0)))) / ((_3250 * _3250) * ((_3193 * 2.1991131305694580078125) + 3.141590118408203125))) * _3182;
                        _3035 = (_3197 * _3145.x) + _3103;
                        _3036 = (_3197 * _3145.y) + _3104;
                        _3037 = (_3197 * _3145.z) + _3105;
                        _3032 = (_3278 * _3162.x) + _3100;
                        _3033 = (_3278 * _3162.y) + _3101;
                        _3034 = (_3278 * _3162.z) + _3102;
                        if (_3107 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3107;
                        }
                    }
                    frontier_phi_61_pred = _3032;
                    frontier_phi_61_pred_1 = _3037;
                    frontier_phi_61_pred_2 = _3036;
                    frontier_phi_61_pred_3 = _3035;
                    frontier_phi_61_pred_4 = _3034;
                    frontier_phi_61_pred_5 = _3033;
                }
                _2824 = frontier_phi_61_pred;
                _2834 = frontier_phi_61_pred_1;
                _2832 = frontier_phi_61_pred_2;
                _2830 = frontier_phi_61_pred_3;
                _2828 = frontier_phi_61_pred_4;
                _2826 = frontier_phi_61_pred_5;
                uint _2983 = _2982 + 1u;
                if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2976 = _2824;
                    _2977 = _2826;
                    _2978 = _2828;
                    _2979 = _2830;
                    _2980 = _2832;
                    _2981 = _2834;
                    _2982 = _2983;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((4294967295u << _2840) & _2677) == 0u)
        {
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
        }
        else
        {
            float _2969 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
            float _2970 = _2969 * _2631;
            float _2971 = _2969 * _2632;
            float _2972 = _2969 * _2633;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _3083 = _2823;
                float _3084 = _2825;
                float _3085 = _2827;
                float _3086 = _2829;
                float _3087 = _2831;
                float _3088 = _2833;
                uint _3089 = _2840;
                uint _3098;
                bool _3099;
                for (;;)
                {
                    _3098 = texelFetch(g_lightClassification, int((((_2671 << 5u) + (_2657 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                    _3099 = _3098 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3099)
                    {
                        frontier_phi_67_pred = _3086;
                        frontier_phi_67_pred_1 = _3087;
                        frontier_phi_67_pred_2 = _3088;
                        frontier_phi_67_pred_3 = _3085;
                        frontier_phi_67_pred_4 = _3084;
                        frontier_phi_67_pred_5 = _3083;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3296 = _3083;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        uint _3302 = _3098;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3386;
                        float _3433;
                        bool _3434;
                        for (;;)
                        {
                            uint _3313 = ((_3089 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3373 = (_3313 * 40u) + 20u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3389 = (_3313 * 40u) + 24u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3408 = (_3313 * 40u) + 28u;
                            vec4 _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            _3433 = fma(_2633, _3421.z, fma(_2632, _3421.y, _3421.x * _2631)) + _3421.w;
                            _3434 = !((fma(_2633, _3402.z, fma(_2632, _3402.y, _3402.x * _2631)) + _3402.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3434)
                            {
                                float _3461 = _3328.x - _2631;
                                float _3462 = _3328.y - _2632;
                                float _3463 = _3328.z - _2633;
                                float _3464 = dot(vec3(_3461, _3462, _3463), vec3(_3461, _3462, _3463));
                                float _3467 = inversesqrt(_3464);
                                float _3468 = _3467 * _3461;
                                float _3469 = _3467 * _3462;
                                float _3470 = _3467 * _3463;
                                float _3474 = 1.0 - (_3464 / (_3329 * _3329));
                                float _4576 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3479 = sqrt(_3464) * _3344.w;
                                float _3481 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                                float _3482 = _3481 * _3481;
                                float _3485 = ((1.0 - _3482) * dot(vec3(_3468, _3469, _3470), vec3(_913, _916, _919))) + _3482;
                                float _3488 = _3479 * _3479;
                                float _3492 = (fma(_2633, _3371.z, fma(_2632, _3371.y, _3371.x * _2631)) + _3371.w) / _3433;
                                float _3493 = (fma(_2633, _3386.z, fma(_2632, _3386.y, _3386.x * _2631)) + _3386.w) / _3433;
                                float _3497 = 1.0 - dot(vec2(_3492, _3493), vec2(_3492, _3493));
                                float _4592 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3499 = _3498 * (((isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0))) * _3475) / ((_3488 * 0.699999988079071044921875) + 1.0));
                                float _3511 = exp2(log2(1.0 / ((_3488 * 3.5) + 5.0)) * 0.25);
                                float _3512 = 1.0 - _973;
                                float _3519 = sqrt(1.0 - ((1.0 - (_3512 * _3512)) * (1.0 - (_3511 * _3511))));
                                float _3520 = _3519 * _3519;
                                float _3521 = _3520 * _3520;
                                float _3522 = _3468 - _2970;
                                float _3523 = _3469 - _2971;
                                float _3524 = _3470 - _2972;
                                float _3528 = inversesqrt(dot(vec3(_3522, _3523, _3524), vec3(_3522, _3523, _3524)));
                                float _3532 = dot(vec3(_913, _916, _919), vec3((-0.0) - _2970, (-0.0) - _2971, (-0.0) - _2972));
                                float _4603 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3535 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3536 = dot(vec3(_913, _916, _919), vec3(_3528 * _3522, _3528 * _3523, _3528 * _3524));
                                float _4614 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3539 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3543 = ((_3539 * _3539) * (_3521 + (-1.0))) + 1.0;
                                float _3544 = _3481 * _3520;
                                float _3545 = _3544 * _3544;
                                float _3551 = ((1.0 - _3545) * dot(vec3(_913, _916, _919), vec3(_3468, _3469, _3470))) + _3545;
                                float _4625 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                                float _3552 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3553 = 1.0 - _3520;
                                float _3563 = (0.5 / (((_3552 * ((_3535 * _3553) + _3520)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3520) * _3535))) * _3552;
                                float _4636 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3573 = (_3498 * _3475) * (((_3521 * 3.1415927410125732421875) * (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) / ((_3543 * _3543) * ((_3488 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3573 * _3356.x;
                                frontier_phi_73_pred_1 = _3573 * _3356.y;
                                frontier_phi_73_pred_2 = _3499 * _3344.z;
                                frontier_phi_73_pred_3 = _3499 * _3344.y;
                                frontier_phi_73_pred_4 = _3499 * _3344.x;
                                frontier_phi_73_pred_5 = _3573 * _3356.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3577 = frontier_phi_73_pred;
                            _3578 = frontier_phi_73_pred_1;
                            _3582 = frontier_phi_73_pred_2;
                            _3581 = frontier_phi_73_pred_3;
                            _3580 = frontier_phi_73_pred_4;
                            _3579 = frontier_phi_73_pred_5;
                            _3286 = _3580 + _3299;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3286;
                        frontier_phi_67_pred_1 = _3287;
                        frontier_phi_67_pred_2 = _3288;
                        frontier_phi_67_pred_3 = _3285;
                        frontier_phi_67_pred_4 = _3284;
                        frontier_phi_67_pred_5 = _3283;
                    }
                    _2951 = frontier_phi_67_pred;
                    _2953 = frontier_phi_67_pred_1;
                    _2955 = frontier_phi_67_pred_2;
                    _2949 = frontier_phi_67_pred_3;
                    _2947 = frontier_phi_67_pred_4;
                    _2945 = frontier_phi_67_pred_5;
                    uint _3090 = _3089 + 1u;
                    if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3083 = _2945;
                        _3084 = _2947;
                        _3085 = _2949;
                        _3086 = _2951;
                        _3087 = _2953;
                        _3088 = _2955;
                        _3089 = _3090;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2953;
                frontier_phi_55_56_ladder_1 = _2955;
                frontier_phi_55_56_ladder_2 = _2951;
                frontier_phi_55_56_ladder_3 = _2949;
                frontier_phi_55_56_ladder_4 = _2947;
                frontier_phi_55_56_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_55_56_ladder = _2831;
                frontier_phi_55_56_ladder_1 = _2833;
                frontier_phi_55_56_ladder_2 = _2829;
                frontier_phi_55_56_ladder_3 = _2827;
                frontier_phi_55_56_ladder_4 = _2825;
                frontier_phi_55_56_ladder_5 = _2823;
            }
            _2944 = frontier_phi_55_56_ladder_5;
            _2946 = frontier_phi_55_56_ladder_4;
            _2948 = frontier_phi_55_56_ladder_3;
            _2950 = frontier_phi_55_56_ladder_2;
            _2952 = frontier_phi_55_56_ladder;
            _2954 = frontier_phi_55_56_ladder_1;
        }
        float _2959 = isnan(1.0) ? _957 : (isnan(_957) ? 1.0 : min(_957, 1.0));
        _2690 = (_2959 * _2950) + _2142;
        _2692 = (_2959 * _2952) + _2144;
        _2694 = (_2959 * _2954) + _2146;
        _2696 = ((_2944 * 0.039999999105930328369140625) * _2959) + _2475;
        _2698 = ((_2946 * 0.039999999105930328369140625) * _2959) + _2477;
        _2700 = ((_2948 * 0.039999999105930328369140625) * _2959) + _2479;
    }
    else
    {
        _2690 = _2142;
        _2692 = _2144;
        _2694 = _2146;
        _2696 = _2475;
        _2698 = _2477;
        _2700 = _2479;
    }
    uint _2706 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _2712 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2718 = (((((_2712 * cbMtdParam._m0[14u].x) * _664.x) * _687) * _761) * (((1.0 - _740) * cbMtdParam._m0[20u].w) + _740)) * cbInstanceData._m0[_2706].x;
    float _2724 = (((((_2712 * cbMtdParam._m0[14u].y) * _664.y) * _687) * _761) * (((1.0 - _742) * cbMtdParam._m0[20u].w) + _742)) * cbInstanceData._m0[_2706].y;
    float _2730 = (((((_2712 * cbMtdParam._m0[14u].z) * _664.z) * _687) * _761) * (((1.0 - _744) * cbMtdParam._m0[20u].w) + _744)) * cbInstanceData._m0[_2706].z;
    float _4652 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4663 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4674 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2747 = (((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2690 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _957))) + ((_2696 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1763)) * cbPerFrame._m0[3u].x)) + _2718;
    float _2749 = (_2724 + ((_2698 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1763)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2692 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _957)));
    float _2751 = (_2730 + ((_2700 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1763)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2694 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _957)));
    float _4700 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2764 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
    uint _2765 = _932 + 6u;
    float _2773 = _893 / cbSceneParam._m0[86u].x;
    float _2774 = _894 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _828 : (isnan(_828) ? cbSceneParam._m0[77u].w : min(_828, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2885;
    float _2887;
    float _2889;
    float _2891;
    if (_828 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_828) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _828 : min(cbSceneParam._m0[80u].w, _828));
        float _2849 = _2848 / _828;
        float _2860 = _2849 * _878;
        float _2861 = _879 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2863 = _2849 * _880;
        float _2865 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2866 = _2865 + cbSceneParam._m0[79u].w;
        float _2867 = cbSceneParam._m0[79u].w - _2861;
        float _2873 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2863 * _2863));
        float _2876 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2873;
        float _2881 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2883 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3045;
        if (abs((_2862 - _2865) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3045 = ((((_2866 > 0.0) ? exp2(_2881 * _2866) : (2.0 - exp2(_2883 * _2866))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2876;
        }
        else
        {
            float _3005 = 1.0 / cbSceneParam._m0[80u].x;
            float _3006 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : max(_2866, _2867));
            float _3007 = isnan(_2867) ? _2866 : (isnan(_2866) ? _2867 : min(_2866, _2867));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            _3045 = ((abs(_2873 / _2862) * cbSceneParam._m0[80u].y) * ((((_3016 - _3017) * 2.0) - ((exp2(_2881 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)))) - exp2(_2881 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))))) * _3005)) - ((exp2(_2883 * _3016) - exp2(_2883 * _3017)) * _3005))) + (_2876 * cbSceneParam._m0[80u].z);
        }
        vec4 _3047 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3056 = exp2((_3045 * (-1.44269502162933349609375)) * (1.0 - _3047.w));
        float _3057 = log2(_3056);
        float _3073 = log2(_2793);
        _2885 = (exp2(_3073 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].x)) * _3047.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2887 = (exp2(_3073 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].y)) * _3047.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2889 = (exp2(_3073 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3057 * cbSceneParam._m0[78u].z)) * _3047.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2891 = _3056 * _2793;
    }
    else
    {
        _2885 = _2790;
        _2887 = _2791;
        _2889 = _2792;
        _2891 = _2793;
    }
    float _2903 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2904 = _2903 == 3.0;
    float _2905 = log2(_2891);
    float _2909 = exp2(_2905 * cbSceneParam._m0[78u].x);
    float _2910 = exp2(_2905 * cbSceneParam._m0[78u].y);
    float _2911 = exp2(_2905 * cbSceneParam._m0[78u].z);
    float _2912 = _2909 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)));
    float _2913 = _2910 * (isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0)));
    float _2914 = _2911 * (isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0)));
    float _2923 = (_2903 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2923 * (_2904 ? _2912 : (_2912 + (cbSceneParam._m0[72u].w * _2885)));
    SV_Target.y = _2923 * (_2904 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2887)));
    SV_Target.z = _2923 * (_2904 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2889)));
    SV_Target.w = cbInstanceData._m0[_2765].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2718) * _2764) * _2909) * _2923;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2724) * _2764) * _2910) * _2923;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2730) * _2764) * _2911) * _2923;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
}


