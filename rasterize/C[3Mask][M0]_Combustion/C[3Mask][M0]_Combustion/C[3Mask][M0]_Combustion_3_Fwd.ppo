#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1300;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _304 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _341 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _304.x) * 2.0) - _331)) + 1.0;
    float _3659 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _349 = (_342 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _350 = (_342 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _351 = (_342 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _370 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _383 = (((((1.0 - _304.y) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3670 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _391 = (((_370.x * cbMtdParam._m0[12u].x) - _349) * _384) + _349;
    float _392 = (_384 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _393 = (_384 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _411 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _424 = (((((1.0 - _304.z) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3681 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
    float _432 = (((_411.x * cbMtdParam._m0[13u].x) - _391) * _425) + _391;
    float _433 = (_425 * ((_411.y * cbMtdParam._m0[13u].y) - _392)) + _392;
    float _434 = (_425 * ((_411.z * cbMtdParam._m0[13u].z) - _393)) + _393;
    vec4 _461 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _480 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _483 = _480.x + 0.00999999977648258209228515625;
    float _490 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _483)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3692 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _491 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _498 = (_491 * ((_461.x * cbMtdParam._m0[16u].x) - _432)) + _432;
    float _499 = (_491 * ((_461.y * cbMtdParam._m0[16u].y) - _433)) + _433;
    float _500 = (_491 * ((_461.z * cbMtdParam._m0[16u].z) - _434)) + _434;
    vec4 _513 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    vec4 _550 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _561 = ((_550.x - _536) * _342) + _536;
    float _562 = ((_550.y - _537) * _342) + _537;
    float _563 = ((_550.z - _538) * _342) + _538;
    vec4 _576 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _587 = ((_576.x - _561) * _384) + _561;
    float _588 = ((_576.y - _562) * _384) + _562;
    float _589 = ((_576.z - _563) * _384) + _563;
    vec4 _602 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _615 = ((_602.z - _589) * _425) + _589;
    float _618 = ((((_602.x - _587) * _425) + _587) * 2.0) + (-1.0);
    float _619 = ((((_602.y - _588) * _425) + _588) * 2.0) + (-1.0);
    float _620 = dot(vec2(_618, _619), vec2(_618, _619));
    float _3703 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _625 = sqrt(1.0 - (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))));
    float _630 = (((_513.z - _615) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _615;
    vec4 _660 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _674 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3714 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _683 = (((_675 * _675) * (3.0 - (_675 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _691 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _699 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3725 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _700 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _704 = (_700 * _700) * (3.0 - (_700 * 2.0));
    float _705 = _704 * cbMtdParam._m0[22u].x;
    float _706 = _704 * cbMtdParam._m0[22u].y;
    float _707 = sin(_691);
    float _708 = cos(_691);
    float _709 = TEXCOORD.z - _705;
    float _710 = TEXCOORD.w - _706;
    vec4 _730 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_705 + fma(_710, (-0.0) - _707, _709 * _708))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_710, _708, _709 * _707) + _706)) + cbTextureTilingScale._m0[2u].w));
    float _736 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _730.x;
    float _738 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _730.y;
    float _740 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _730.z;
    float _756 = (TEXCOORD_5.x - ((_483 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3736 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _757 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _763 = ((((_513.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _618;
    float _764 = ((((_513.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _619;
    float _767 = fma(_625, _229 * NORMAL.x, fma(_764, _236 * TANGENT.x, (_222 * _214) * _763));
    float _770 = fma(_625, _229 * NORMAL.y, fma(_764, _236 * TANGENT.y, (_222 * _215) * _763));
    float _773 = fma(_625, _229 * NORMAL.z, fma(_764, _236 * TANGENT.z, (_222 * _216) * _763));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3747 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _781 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _3769 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _3780 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _800 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _850 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _840);
    float _851 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _840);
    float _852 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _840);
    float _856 = inversesqrt(dot(vec3(_850, _851, _852), vec3(_850, _851, _852)));
    float _857 = _850 * _856;
    float _858 = _851 * _856;
    float _859 = _852 * _856;
    float _865 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _866 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _888 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _891 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _904 = uint(roundEven(NORMAL.w)) * 13u;
    uint _905 = _904 + 9u;
    uint _906 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_906].z;
    float _3791 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    vec4 _926 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _865, cbSceneParam._m0[86u].y * _866));
    float _929 = _926.x * TEXCOORD_5.w;
    float _930 = dot(vec3(_778, _779, _780), vec3(_857, _858, _859));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _778) - _857;
    float _938 = (_933 * _779) - _858;
    float _939 = (_933 * _780) - _859;
    float _943 = abs(dot(vec3(_857, _858, _859), vec3(_778, _779, _780)));
    float _3824 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_781);
    float _957 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_997, cbModelParam._m0[26u].z, fma(_993, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _989));
        float _1028 = fma(_997, cbModelParam._m0[27u].z, fma(_993, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _989));
        float _1032 = fma(_997, cbModelParam._m0[28u].z, fma(_993, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _989));
        float _1057 = _989 + _778;
        float _1058 = _993 + _779;
        float _1059 = _997 + _780;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1024;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1028;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1032;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_778, _779, _780), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3872 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_778, _779, _780), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3905 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_778, _779, _780), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3938 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1340 = fma(_997, cbModelParam._m0[30u].z, fma(_993, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _989));
        float _1344 = fma(_997, cbModelParam._m0[31u].z, fma(_993, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _989));
        float _1348 = fma(_997, cbModelParam._m0[32u].z, fma(_993, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _989));
        float _1371 = _989 + _778;
        float _1372 = _993 + _779;
        float _1373 = _997 + _780;
        float _1383 = fma(_1373, cbModelParam._m0[30u].z, fma(_1372, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1371)) - _1340;
        float _1384 = fma(_1373, cbModelParam._m0[31u].z, fma(_1372, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1371)) - _1344;
        float _1385 = fma(_1373, cbModelParam._m0[32u].z, fma(_1372, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1371)) - _1348;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1340 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1344 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[35u].z) + ((((((_1348 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1439 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1406.x + (-0.5));
        float _1441 = _1439 * (_1406.y + (-0.5));
        float _1442 = _1439 * (_1406.z + (-0.5));
        float _1449 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1413.x + (-0.5));
        float _1451 = _1449 * (_1413.y + (-0.5));
        float _1452 = _1449 * (_1413.z + (-0.5));
        float _1459 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1420.x + (-0.5));
        float _1461 = _1459 * (_1420.y + (-0.5));
        float _1462 = _1459 * (_1420.z + (-0.5));
        float _1469 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1427.x + (-0.5));
        float _1471 = _1469 * (_1427.y + (-0.5));
        float _1472 = _1469 * (_1427.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_778, _779, _780), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4001 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1503 + 1.0))) + _1508) * _1473;
        float _1518 = _1441 * 0.5;
        float _1519 = _1451 * 0.5;
        float _1520 = _1461 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_778, _779, _780), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4034 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1545 + 1.0))) + _1550) * _1474;
        float _1560 = _1442 * 0.5;
        float _1561 = _1452 * 0.5;
        float _1562 = _1462 * 0.5;
        float _1563 = dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562));
        float _1568 = (_1563 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1563);
        float _1576 = (dot(vec3(_778, _779, _780), vec3(_1568 * _1560, _1568 * _1561, _1568 * _1562)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1585 = sqrt(((_1561 * _1561) + (_1560 * _1560)) + (_1562 * _1562)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1587 = _1586 * 2.0;
        float _1591 = (1.0 - _1586) / (_1586 + 1.0);
        float _4067 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1601 = ((((1.0 - _1592) * (_1587 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1587 + 1.0))) + _1592) * _1475;
        _1609 = _1442;
        _1610 = _1441;
        _1611 = _1440;
        _1612 = _1452;
        _1613 = _1451;
        _1614 = _1450;
        _1615 = _1462;
        _1616 = _1461;
        _1617 = _1460;
        _1618 = _1475;
        _1619 = _1474;
        _1620 = _1473;
        _1621 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)));
    }
    else
    {
        _1609 = _1300;
        _1610 = _1300;
        _1611 = _1300;
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = _1300;
        _1621 = 0.0;
        _1622 = 0.0;
        _1623 = 0.0;
    }
    float _1633 = (cbModelParam._m0[1u].x * (_1621 - _1312)) + _1312;
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1313)) + _1313;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1314)) + _1314;
    float _1656 = fma(_1635, cbSceneParam._m0[89u].z, fma(_1634, cbSceneParam._m0[89u].y, _1633 * cbSceneParam._m0[89u].x));
    float _1659 = fma(_1635, cbSceneParam._m0[90u].z, fma(_1634, cbSceneParam._m0[90u].y, _1633 * cbSceneParam._m0[90u].x));
    float _1662 = fma(_1635, cbSceneParam._m0[91u].z, fma(_1634, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1633));
    float _1677 = _937 * 0.5;
    float _1678 = _938 * 0.5;
    float _1679 = _939 * 0.5;
    float _1680 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1683 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1686 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1609, _1612, _1615, _1618));
    float _1720;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1693 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1697 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1701 = dot(vec4(_1677, _1678, _1679, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1708 = dot(vec4(cbModelParam._m0[39u]), vec4(_1677, _1678, _1679, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1731;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1722 = dot(vec4(cbModelParam._m0[40u]), vec4(_1677, _1678, _1679, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1735 = (_1731 * cbModelParam._m0[1u].x) + (_1720 * (1.0 - cbModelParam._m0[1u].x));
    float _1745 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1745 : min(cbModelParam._m0[25u].z, _1745));
    float _1826;
    float _1828;
    float _1830;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1793 = fma(_997, cbModelParam._m0[13u].z, fma(_993, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _989)) + cbModelParam._m0[13u].w;
        float _1797 = fma(_997, cbModelParam._m0[14u].z, fma(_993, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _989)) + cbModelParam._m0[14u].w;
        float _1801 = fma(_997, cbModelParam._m0[15u].z, fma(_993, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _989)) + cbModelParam._m0[15u].w;
        float _1804 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1807 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1810 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1838;
        if (_1804 > 0.0)
        {
            _1838 = abs((1.0 - _1793) / _1804);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1793 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1838 = frontier_phi_14_12_ladder;
        }
        float _2038;
        if (_1807 > 0.0)
        {
            _2038 = abs((1.0 - _1797) / _1807);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1797 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2038 = frontier_phi_23_19_ladder;
        }
        float _2281;
        if (_1810 > 0.0)
        {
            _2281 = abs((1.0 - _1801) / _1810);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1801 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2281 = frontier_phi_35_30_ladder;
        }
        float _2283 = isnan(_2038) ? _1838 : (isnan(_1838) ? _2038 : min(_1838, _2038));
        float _2284 = isnan(_2281) ? _2283 : (isnan(_2283) ? _2281 : min(_2283, _2281));
        float _2288 = (_2284 * _1804) + _1793;
        float _2289 = (_2284 * _1807) + _1797;
        float _2290 = (_2284 * _1810) + _1801;
        float _2291 = _2284 * 9.9999997473787516355514526367188e-05;
        float _2293 = (-1.0) - _2291;
        float _2295 = _2291 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2290 > _2295) || ((_2290 < _2293) || ((_2289 > _2295) || ((_2289 < _2293) || ((_2288 < _2293) || (_2288 > _2295))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2414 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2290, cbModelParam._m0[9u].z, fma(_2289, cbModelParam._m0[9u].y, _2288 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2290, cbModelParam._m0[10u].z, fma(_2289, cbModelParam._m0[10u].y, _2288 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2290, cbModelParam._m0[11u].z, fma(_2289, cbModelParam._m0[11u].y, _2288 * cbModelParam._m0[11u].x))), _1746);
            frontier_phi_13_35_ladder = _2414.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2414.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2414.x * cbModelParam._m0[1u].y;
        }
        _1826 = frontier_phi_13_35_ladder_2;
        _1828 = frontier_phi_13_35_ladder_1;
        _1830 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1814 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1746);
        _1826 = _1814.x * cbModelParam._m0[1u].y;
        _1828 = _1814.y * cbModelParam._m0[1u].y;
        _1830 = _1814.z * cbModelParam._m0[1u].y;
    }
    float _1834 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1834 : min(cbModelParam._m0[25u].w, _1834));
    float _1924;
    float _1926;
    float _1928;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1888 = fma(_997, cbModelParam._m0[21u].z, fma(_993, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _989)) + cbModelParam._m0[21u].w;
        float _1892 = fma(_997, cbModelParam._m0[22u].z, fma(_993, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _989)) + cbModelParam._m0[22u].w;
        float _1896 = fma(_997, cbModelParam._m0[23u].z, fma(_993, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _989)) + cbModelParam._m0[23u].w;
        float _1899 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1902 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1905 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2043;
        if (_1899 > 0.0)
        {
            _2043 = abs((1.0 - _1888) / _1899);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1888 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2043 = frontier_phi_25_21_ladder;
        }
        float _2308;
        if (_1902 > 0.0)
        {
            _2308 = abs((1.0 - _1892) / _1902);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1892 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2308 = frontier_phi_37_32_ladder;
        }
        float _2513;
        if (_1905 > 0.0)
        {
            _2513 = abs((1.0 - _1896) / _1905);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1896 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2513 = frontier_phi_46_43_ladder;
        }
        float _2515 = isnan(_2308) ? _2043 : (isnan(_2043) ? _2308 : min(_2043, _2308));
        float _2516 = isnan(_2513) ? _2515 : (isnan(_2515) ? _2513 : min(_2515, _2513));
        float _2520 = (_2516 * _1899) + _1888;
        float _2521 = (_2516 * _1902) + _1892;
        float _2522 = (_2516 * _1905) + _1896;
        float _2523 = _2516 * 9.9999997473787516355514526367188e-05;
        float _2524 = (-1.0) - _2523;
        float _2526 = _2523 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2522 > _2526) || ((_2522 < _2524) || ((_2521 > _2526) || ((_2521 < _2524) || ((_2520 < _2524) || (_2520 > _2526))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2522, cbModelParam._m0[17u].z, fma(_2521, cbModelParam._m0[17u].y, _2520 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2522, cbModelParam._m0[18u].z, fma(_2521, cbModelParam._m0[18u].y, _2520 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2522, cbModelParam._m0[19u].z, fma(_2521, cbModelParam._m0[19u].y, _2520 * cbModelParam._m0[19u].x))), _1835);
            frontier_phi_22_46_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1924 = frontier_phi_22_46_ladder_2;
        _1926 = frontier_phi_22_46_ladder_1;
        _1928 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1908 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1835);
        _1924 = _1908.x * cbModelParam._m0[1u].z;
        _1926 = _1908.y * cbModelParam._m0[1u].z;
        _1928 = _1908.z * cbModelParam._m0[1u].z;
    }
    float _1940 = ((((1.0 - _957) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_957 * _945)) * _929;
    float _1941 = _1940 * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1942 = _1940 * ((cbModelParam._m0[1u].w * (_1926 - _1828)) + _1828);
    float _1943 = _1940 * ((cbModelParam._m0[1u].w * (_1928 - _1830)) + _1830);
    float _1946 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1949 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1952 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1941 * cbSceneParam._m0[91u].x));
    uvec4 _1962 = floatBitsToUint(cbInstanceData._m0[_904 + 5u]);
    uint _1964 = _1962.x * 14u;
    uint _1965 = _1964 + 13u;
    float _1972 = _929 + (-1.0);
    float _1977 = (cbLight._m0[_1965].x * _1972) + 1.0;
    float _1978 = (cbLight._m0[_1965].y * _1972) + 1.0;
    float _1979 = (cbLight._m0[_1965].z * _1972) + 1.0;
    float _1980 = (cbLight._m0[_1965].w * _1972) + 1.0;
    uint _1981 = _1964 + 5u;
    float _1987 = isnan(1.0) ? _1978 : (isnan(_1978) ? 1.0 : min(_1978, 1.0));
    uint _1991 = _1964 + 4u;
    float _1997 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
    uint _2001 = _1964 | 1u;
    float _2012 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_778, _779, _780));
    float _2015 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_778, _779, _780));
    float _4203 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _4214 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2020 = (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.3183098733425140380859375;
    float _2022 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2029 = ((cbLight._m0[_1981].x * _1987) * _2022) + ((cbLight._m0[_1991].x * _1997) * _2020);
    float _2030 = ((_1987 * cbLight._m0[_1981].y) * _2022) + ((_1997 * cbLight._m0[_1991].y) * _2020);
    float _2031 = ((_1987 * cbLight._m0[_1981].z) * _2022) + ((_1997 * cbLight._m0[_1991].z) * _2020);
    uvec4 _2035 = floatBitsToUint(cbLight._m0[_1964 + 12u]);
    bool _2037 = _2035.x == 0u;
    float _2048;
    float _2050;
    float _2052;
    if (_2037)
    {
        _2048 = _2029;
        _2050 = _2030;
        _2052 = _2031;
    }
    else
    {
        uint _2056 = _1964 + 6u;
        float _2072 = (dot(vec3(cbLight._m0[_1964 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2073 = _2072 * _2072;
        float _4225 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
        float _2074 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _2075 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2048 = (((cbLight._m0[_2056].x * 0.3183098733425140380859375) * _2074) * _2075) + _2029;
        _2050 = (((cbLight._m0[_2056].y * 0.3183098733425140380859375) * _2074) * _2075) + _2030;
        _2052 = (((cbLight._m0[_2056].z * 0.3183098733425140380859375) * _2074) * _2075) + _2031;
    }
    bool _2055 = _2035.y == 0u;
    float _2093;
    float _2095;
    float _2097;
    if (_2055)
    {
        _2093 = _2048;
        _2095 = _2050;
        _2097 = _2052;
    }
    else
    {
        uint _2252 = _1964 + 7u;
        float _2268 = (dot(vec3(cbLight._m0[_1964 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4241 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2271 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2093 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2048;
        _2095 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2050;
        _2097 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2052;
    }
    uint _2100 = _1964 + 8u;
    float _2113 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1964].w)) * _781) * 0.949999988079071044921875);
    float _2114 = _2113 * _2113;
    float _2115 = cbLight._m0[_1964].x + _857;
    float _2116 = cbLight._m0[_1964].y + _858;
    float _2117 = cbLight._m0[_1964].z + _859;
    float _2121 = inversesqrt(dot(vec3(_2115, _2116, _2117), vec3(_2115, _2116, _2117)));
    float _2122 = _2121 * _2115;
    float _2123 = _2121 * _2116;
    float _2124 = _2121 * _2117;
    float _2125 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_1964].xyz));
    float _4257 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2128 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _4268 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2129 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2130 = dot(vec3(_778, _779, _780), vec3(_2122, _2123, _2124));
    float _4279 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
    float _2133 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2134 = dot(vec3(cbLight._m0[_1964].xyz), vec3(_2122, _2123, _2124));
    float _4290 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2138 = _2114 * _2114;
    float _2142 = ((_2133 * _2133) * (_2138 + (-1.0))) + 1.0;
    float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2154 = 1.0 - _2114;
    float _2165 = (0.5 / (((_2129 * ((_2128 * _2154) + _2114)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2154) + _2114) * _2128))) * _2128;
    float _4301 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2138 / ((_2142 * _2142) * 3.141590118408203125));
    uint _2178 = _1964 + 9u;
    float _2189 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2001].w)) * _781) * 0.949999988079071044921875);
    float _2190 = _2189 * _2189;
    float _2191 = cbLight._m0[_2001].x + _857;
    float _2192 = cbLight._m0[_2001].y + _858;
    float _2193 = cbLight._m0[_2001].z + _859;
    float _2197 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
    float _2198 = _2197 * _2191;
    float _2199 = _2197 * _2192;
    float _2200 = _2197 * _2193;
    float _2201 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2001].xyz));
    float _4312 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
    float _2205 = dot(vec3(_778, _779, _780), vec3(_2198, _2199, _2200));
    float _4323 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2209 = dot(vec3(cbLight._m0[_2001].xyz), vec3(_2198, _2199, _2200));
    float _4334 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2213 = _2190 * _2190;
    float _2217 = ((_2208 * _2208) * (_2213 + (-1.0))) + 1.0;
    float _2226 = (exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2227 = 1.0 - _2190;
    float _2237 = (0.5 / (((_2129 * ((_2204 * _2227) + _2190)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2227) + _2190) * _2204))) * _2204;
    float _4345 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2239 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2213 / ((_2217 * _2217) * 3.141590118408203125));
    float _2249 = (((_2226 * cbLight._m0[_2178].x) * _2239) * _1987) + (((_2153 * cbLight._m0[_2100].x) * _2167) * _1997);
    float _2250 = (((_2226 * cbLight._m0[_2178].y) * _2239) * _1987) + (((_2153 * cbLight._m0[_2100].y) * _2167) * _1997);
    float _2251 = (((_2226 * cbLight._m0[_2178].z) * _2239) * _1987) + (((_2153 * cbLight._m0[_2100].z) * _2167) * _1997);
    float _2313;
    float _2315;
    float _2317;
    if (_2037)
    {
        _2313 = _2249;
        _2315 = _2250;
        _2317 = _2251;
    }
    else
    {
        uint _2319 = _1964 + 2u;
        uint _2323 = _1964 + 10u;
        float _2337 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _781) * 0.949999988079071044921875);
        float _2338 = _2337 * _2337;
        float _2339 = cbLight._m0[_2319].x + _857;
        float _2340 = cbLight._m0[_2319].y + _858;
        float _2341 = cbLight._m0[_2319].z + _859;
        float _2345 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
        float _2346 = _2345 * _2339;
        float _2347 = _2345 * _2340;
        float _2348 = _2345 * _2341;
        float _2349 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2319].xyz));
        float _4356 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2352 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _2353 = dot(vec3(_778, _779, _780), vec3(_2346, _2347, _2348));
        float _4367 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2356 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2357 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2346, _2347, _2348));
        float _4378 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2361 = _2338 * _2338;
        float _2365 = ((_2356 * _2356) * (_2361 + (-1.0))) + 1.0;
        float _2374 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2375 = 1.0 - _2338;
        float _2385 = (0.5 / (((_2129 * ((_2352 * _2375) + _2338)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2375) + _2338) * _2352))) * _2352;
        float _4389 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2387 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2361 / ((_2365 * _2365) * 3.141590118408203125));
        float _2388 = isnan(1.0) ? _1979 : (isnan(_1979) ? 1.0 : min(_1979, 1.0));
        _2313 = (((_2374 * cbLight._m0[_2323].x) * _2387) * _2388) + _2249;
        _2315 = (((_2374 * cbLight._m0[_2323].y) * _2387) * _2388) + _2250;
        _2317 = (((_2374 * cbLight._m0[_2323].z) * _2387) * _2388) + _2251;
    }
    float _2423;
    float _2425;
    float _2427;
    if (_2055)
    {
        _2423 = _2313;
        _2425 = _2315;
        _2427 = _2317;
    }
    else
    {
        uint _2434 = _1964 + 3u;
        uint _2438 = _1964 + 11u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _781) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _857;
        float _2455 = cbLight._m0[_2434].y + _858;
        float _2456 = cbLight._m0[_2434].z + _859;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2434].xyz));
        float _4405 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _2468 = dot(vec3(_778, _779, _780), vec3(_2461, _2462, _2463));
        float _4416 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4427 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2489 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2490 = 1.0 - _2453;
        float _2500 = (0.5 / (((_2129 * ((_2467 * _2490) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2129 * _2490) + _2453) * _2467))) * _2467;
        float _4438 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
        float _2502 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2503 = isnan(1.0) ? _1980 : (isnan(_1980) ? 1.0 : min(_1980, 1.0));
        _2423 = (((_2489 * cbLight._m0[_2438].x) * _2502) * _2503) + _2313;
        _2425 = (((_2489 * cbLight._m0[_2438].y) * _2502) * _2503) + _2315;
        _2427 = (((_2489 * cbLight._m0[_2438].z) * _2502) * _2503) + _2317;
    }
    float _2638;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_1962.y == 0u)
    {
        float _2578 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2579 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2578;
        float _2580 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2578;
        float _2581 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2578;
        uvec4 _2593 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2594 = _2593.x;
        uint _2605 = uint((float(_2593.y) * floor(float(uint(cbSceneParam._m0[85u].y * _866) / _2594))) + floor(float(uint(cbSceneParam._m0[85u].x * _865) / _2594)));
        float _2615 = (log2(_2581 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2616 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        uint _2619 = uint(isnan(14.0) ? _2616 : (isnan(_2616) ? 14.0 : min(_2616, 14.0)));
        uvec4 _2624 = texelFetch(g_lightClusterGridBuffer, int(((_2619 << 2u) + (_2605 << 6u)) >> 2u));
        uint _2625 = _2624.x;
        uint _2626 = _2593.z;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        if (((((1u << ((_2626 >> 4u) & 15u)) + 4294967295u) & _2625) == 0u) || ((_2626 & 240u) == 0u))
        {
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
            _2781 = 0.0;
        }
        else
        {
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2782;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            uint _2930 = 0u;
            uint _2939;
            bool _2940;
            for (;;)
            {
                _2939 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_2930 << 2u)) >> 2u)).x;
                _2940 = _2939 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2940)
                {
                    frontier_phi_61_pred = _2924;
                    frontier_phi_61_pred_1 = _2929;
                    frontier_phi_61_pred_2 = _2928;
                    frontier_phi_61_pred_3 = _2927;
                    frontier_phi_61_pred_4 = _2926;
                    frontier_phi_61_pred_5 = _2925;
                }
                else
                {
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    uint _3054;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2939;
                    float _2980;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    for (;;)
                    {
                        uint _3058 = uint(findLSB(_3054)) + (_2930 << 5u);
                        uint _3055 = (_3054 + 4294967295u) & _3054;
                        uint _3060 = _3058 * 48u;
                        vec4 _3074 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 3u)).x));
                        uint _3080 = (_3058 * 48u) + 4u;
                        vec4 _3093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3080)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3080 + 3u)).x));
                        uint _3099 = (_3058 * 48u) + 8u;
                        vec3 _3110 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3099)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3099 + 2u)).x));
                        float _3114 = _3074.x - _2579;
                        float _3115 = _3074.y - _2580;
                        float _3116 = _3074.z - _2581;
                        float _3117 = dot(vec3(_3114, _3115, _3116), vec3(_3114, _3115, _3116));
                        float _3120 = inversesqrt(_3117);
                        float _3121 = _3120 * _3114;
                        float _3122 = _3120 * _3115;
                        float _3123 = _3120 * _3116;
                        float _3124 = dot(vec3(_885, _888, _891), vec3(_3121, _3122, _3123));
                        float _3129 = 1.0 - (_3117 * _3074.w);
                        float _4464 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
                        float _3130 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
                        float _3131 = sqrt(_3117) * _3093.w;
                        float _3134 = 1.39999997615814208984375 / (_3131 + 1.39999997615814208984375);
                        float _3135 = _3134 * _3134;
                        float _3138 = ((1.0 - _3135) * _3124) + _3135;
                        float _3141 = _3131 * _3131;
                        float _3145 = ((isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))) * _3130) / ((_3141 * 0.699999988079071044921875) + 1.0);
                        float _3149 = (-0.0) - _2579;
                        float _3150 = (-0.0) - _2580;
                        float _3151 = (-0.0) - _2581;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3166 = exp2(log2(1.0 / ((_3141 * 3.5) + 5.0)) * 0.25);
                        float _3167 = 1.0 - _945;
                        float _3174 = sqrt(1.0 - ((1.0 - (_3167 * _3167)) * (1.0 - (_3166 * _3166))));
                        float _3175 = _3174 * _3174;
                        float _3176 = _3175 * _3175;
                        float _3177 = _3156 + _3121;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3183 = inversesqrt(dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179)));
                        float _3187 = dot(vec3(_885, _888, _891), vec3(_3156, _3157, _3158));
                        float _4480 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3190 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                        float _3191 = dot(vec3(_885, _888, _891), vec3(_3183 * _3177, _3183 * _3178, _3183 * _3179));
                        float _4491 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3198 = ((_3194 * _3194) * (_3176 + (-1.0))) + 1.0;
                        float _3199 = _3134 * _3175;
                        float _3200 = _3199 * _3199;
                        float _3203 = ((1.0 - _3200) * _3124) + _3200;
                        float _4502 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3205 = 1.0 - _3175;
                        float _3215 = (0.5 / (((_3204 * ((_3190 * _3205) + _3175)) + 9.9999999392252902907785028219223e-09) + (((_3204 * _3205) + _3175) * _3190))) * _3204;
                        float _4513 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3226 = (((_3176 * 3.1415927410125732421875) * (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0)))) / ((_3198 * _3198) * ((_3141 * 2.1991131305694580078125) + 3.141590118408203125))) * _3130;
                        _2983 = (_3145 * _3093.x) + _3051;
                        _2984 = (_3145 * _3093.y) + _3052;
                        _2985 = (_3145 * _3093.z) + _3053;
                        _2980 = (_3226 * _3110.x) + _3048;
                        _2981 = (_3226 * _3110.y) + _3049;
                        _2982 = (_3226 * _3110.z) + _3050;
                        if (_3055 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _3055;
                        }
                    }
                    frontier_phi_61_pred = _2980;
                    frontier_phi_61_pred_1 = _2985;
                    frontier_phi_61_pred_2 = _2984;
                    frontier_phi_61_pred_3 = _2983;
                    frontier_phi_61_pred_4 = _2982;
                    frontier_phi_61_pred_5 = _2981;
                }
                _2772 = frontier_phi_61_pred;
                _2782 = frontier_phi_61_pred_1;
                _2780 = frontier_phi_61_pred_2;
                _2778 = frontier_phi_61_pred_3;
                _2776 = frontier_phi_61_pred_4;
                _2774 = frontier_phi_61_pred_5;
                uint _2931 = _2930 + 1u;
                if (_2931 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2924 = _2772;
                    _2925 = _2774;
                    _2926 = _2776;
                    _2927 = _2778;
                    _2928 = _2780;
                    _2929 = _2782;
                    _2930 = _2931;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
            _2781 = _2782;
        }
        uvec4 _2785 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2786 = _2785.z;
        uint _2788 = (_2786 >> 8u) & 15u;
        float _2892;
        float _2894;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        if (((4294967295u << _2788) & _2625) == 0u)
        {
            _2892 = _2771;
            _2894 = _2773;
            _2896 = _2775;
            _2898 = _2777;
            _2900 = _2779;
            _2902 = _2781;
        }
        else
        {
            float _2917 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
            float _2918 = _2917 * _2579;
            float _2919 = _2917 * _2580;
            float _2920 = _2917 * _2581;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2788 < ((_2786 >> 12u) & 15u))
            {
                float _2893;
                float _2895;
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _3031 = _2771;
                float _3032 = _2773;
                float _3033 = _2775;
                float _3034 = _2777;
                float _3035 = _2779;
                float _3036 = _2781;
                uint _3037 = _2788;
                uint _3046;
                bool _3047;
                for (;;)
                {
                    _3046 = texelFetch(g_lightClassification, int((((_2619 << 5u) + (_2605 << 9u)) + (_3037 << 2u)) >> 2u)).x;
                    _3047 = _3046 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3047)
                    {
                        frontier_phi_67_pred = _3034;
                        frontier_phi_67_pred_1 = _3035;
                        frontier_phi_67_pred_2 = _3036;
                        frontier_phi_67_pred_3 = _3033;
                        frontier_phi_67_pred_4 = _3032;
                        frontier_phi_67_pred_5 = _3031;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        uint _3250 = _3046;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3334;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3261 = ((_3037 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3261 * 40u) + 20u;
                            _3334 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 3u)).x));
                            uint _3337 = (_3261 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3261 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_2581, _3369.z, fma(_2580, _3369.y, _3369.x * _2579)) + _3369.w;
                            _3382 = !((fma(_2581, _3350.z, fma(_2580, _3350.y, _3350.x * _2579)) + _3350.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3276.x - _2579;
                                float _3410 = _3276.y - _2580;
                                float _3411 = _3276.z - _2581;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3277 * _3277));
                                float _4524 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
                                float _3427 = sqrt(_3412) * _3292.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_885, _888, _891))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_2581, _3319.z, fma(_2580, _3319.y, _3319.x * _2579)) + _3319.w) / _3381;
                                float _3441 = (fma(_2581, _3334.z, fma(_2580, _3334.y, _3334.x * _2579)) + _3334.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4540 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _945;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2918;
                                float _3471 = _3417 - _2919;
                                float _3472 = _3418 - _2920;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_885, _888, _891), vec3((-0.0) - _2918, (-0.0) - _2919, (-0.0) - _2920));
                                float _4551 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3484 = dot(vec3(_885, _888, _891), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4562 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_885, _888, _891), vec3(_3416, _3417, _3418))) + _3493;
                                float _4573 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4584 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3521 * _3304.x;
                                frontier_phi_73_pred_1 = _3521 * _3304.y;
                                frontier_phi_73_pred_2 = _3447 * _3292.z;
                                frontier_phi_73_pred_3 = _3447 * _3292.y;
                                frontier_phi_73_pred_4 = _3447 * _3292.x;
                                frontier_phi_73_pred_5 = _3521 * _3304.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3525 = frontier_phi_73_pred;
                            _3526 = frontier_phi_73_pred_1;
                            _3530 = frontier_phi_73_pred_2;
                            _3529 = frontier_phi_73_pred_3;
                            _3528 = frontier_phi_73_pred_4;
                            _3527 = frontier_phi_73_pred_5;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3234;
                        frontier_phi_67_pred_1 = _3235;
                        frontier_phi_67_pred_2 = _3236;
                        frontier_phi_67_pred_3 = _3233;
                        frontier_phi_67_pred_4 = _3232;
                        frontier_phi_67_pred_5 = _3231;
                    }
                    _2899 = frontier_phi_67_pred;
                    _2901 = frontier_phi_67_pred_1;
                    _2903 = frontier_phi_67_pred_2;
                    _2897 = frontier_phi_67_pred_3;
                    _2895 = frontier_phi_67_pred_4;
                    _2893 = frontier_phi_67_pred_5;
                    uint _3038 = _3037 + 1u;
                    if (_3038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3031 = _2893;
                        _3032 = _2895;
                        _3033 = _2897;
                        _3034 = _2899;
                        _3035 = _2901;
                        _3036 = _2903;
                        _3037 = _3038;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2901;
                frontier_phi_55_56_ladder_1 = _2903;
                frontier_phi_55_56_ladder_2 = _2899;
                frontier_phi_55_56_ladder_3 = _2897;
                frontier_phi_55_56_ladder_4 = _2895;
                frontier_phi_55_56_ladder_5 = _2893;
            }
            else
            {
                frontier_phi_55_56_ladder = _2779;
                frontier_phi_55_56_ladder_1 = _2781;
                frontier_phi_55_56_ladder_2 = _2777;
                frontier_phi_55_56_ladder_3 = _2775;
                frontier_phi_55_56_ladder_4 = _2773;
                frontier_phi_55_56_ladder_5 = _2771;
            }
            _2892 = frontier_phi_55_56_ladder_5;
            _2894 = frontier_phi_55_56_ladder_4;
            _2896 = frontier_phi_55_56_ladder_3;
            _2898 = frontier_phi_55_56_ladder_2;
            _2900 = frontier_phi_55_56_ladder;
            _2902 = frontier_phi_55_56_ladder_1;
        }
        float _2907 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2638 = (_2907 * _2898) + _2093;
        _2640 = (_2907 * _2900) + _2095;
        _2642 = (_2907 * _2902) + _2097;
        _2644 = ((_2892 * 0.039999999105930328369140625) * _2907) + _2423;
        _2646 = ((_2894 * 0.039999999105930328369140625) * _2907) + _2425;
        _2648 = ((_2896 * 0.039999999105930328369140625) * _2907) + _2427;
    }
    else
    {
        _2638 = _2093;
        _2640 = _2095;
        _2642 = _2097;
        _2644 = _2423;
        _2646 = _2425;
        _2648 = _2427;
    }
    uint _2654 = _905 + uint(cbMatDynParam._m0[0u].w);
    float _2660 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2666 = (((((_2660 * cbMtdParam._m0[14u].x) * _660.x) * _683) * _757) * (((1.0 - _736) * cbMtdParam._m0[20u].w) + _736)) * cbInstanceData._m0[_2654].x;
    float _2672 = (((((_2660 * cbMtdParam._m0[14u].y) * _660.y) * _683) * _757) * (((1.0 - _738) * cbMtdParam._m0[20u].w) + _738)) * cbInstanceData._m0[_2654].y;
    float _2678 = (((((_2660 * cbMtdParam._m0[14u].z) * _660.z) * _683) * _757) * (((1.0 - _740) * cbMtdParam._m0[20u].w) + _740)) * cbInstanceData._m0[_2654].z;
    float _4600 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4611 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _4622 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2695 = (((isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2638 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _929))) + ((_2644 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + _2666;
    float _2697 = (_2672 + ((_2646 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2640 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _929)));
    float _2699 = (_2678 + ((_2648 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1735)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2642 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _929)));
    float _4648 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2712 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
    uint _2713 = _904 + 6u;
    float _2721 = _865 / cbSceneParam._m0[86u].x;
    float _2722 = _866 / cbSceneParam._m0[86u].y;
    vec4 _2736 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, (log2((isnan(cbSceneParam._m0[77u].w) ? _800 : (isnan(_800) ? cbSceneParam._m0[77u].w : min(_800, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2738 = _2736.x;
    float _2739 = _2736.y;
    float _2740 = _2736.z;
    float _2741 = _2736.w;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_800 > cbSceneParam._m0[78u].w)
    {
        float _2796 = isnan(_800) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _800 : min(cbSceneParam._m0[80u].w, _800));
        float _2797 = _2796 / _800;
        float _2808 = _2797 * _850;
        float _2809 = _851 * _2797;
        float _2810 = (-0.0) - _2809;
        float _2811 = _2797 * _852;
        float _2813 = (cbSceneParam._m0[77u].w * _2810) / _2796;
        float _2814 = _2813 + cbSceneParam._m0[79u].w;
        float _2815 = cbSceneParam._m0[79u].w - _2809;
        float _2821 = sqrt(((_2808 * _2808) + (_2809 * _2809)) + (_2811 * _2811));
        float _2824 = (1.0 - (cbSceneParam._m0[77u].w / _2796)) * _2821;
        float _2829 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2831 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2993;
        if (abs((_2810 - _2813) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2993 = ((((_2814 > 0.0) ? exp2(_2829 * _2814) : (2.0 - exp2(_2831 * _2814))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2824;
        }
        else
        {
            float _2953 = 1.0 / cbSceneParam._m0[80u].x;
            float _2954 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : max(_2814, _2815));
            float _2955 = isnan(_2815) ? _2814 : (isnan(_2814) ? _2815 : min(_2814, _2815));
            float _2964 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : min(_2954, 0.0));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            _2993 = ((abs(_2821 / _2810) * cbSceneParam._m0[80u].y) * ((((_2964 - _2965) * 2.0) - ((exp2(_2829 * (isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0)))) - exp2(_2829 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0))))) * _2953)) - ((exp2(_2831 * _2964) - exp2(_2831 * _2965)) * _2953))) + (_2824 * cbSceneParam._m0[80u].z);
        }
        vec4 _2995 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2721, _2722, 1.0), 0.0);
        float _3004 = exp2((_2993 * (-1.44269502162933349609375)) * (1.0 - _2995.w));
        float _3005 = log2(_3004);
        float _3021 = log2(_2741);
        _2833 = (exp2(_3021 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].x)) * _2995.x) / cbSceneParam._m0[78u].x)) + _2738;
        _2835 = (exp2(_3021 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].y)) * _2995.y) / cbSceneParam._m0[78u].y)) + _2739;
        _2837 = (exp2(_3021 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3005 * cbSceneParam._m0[78u].z)) * _2995.z) / cbSceneParam._m0[78u].z)) + _2740;
        _2839 = _3004 * _2741;
    }
    else
    {
        _2833 = _2738;
        _2835 = _2739;
        _2837 = _2740;
        _2839 = _2741;
    }
    float _2851 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2852 = _2851 == 3.0;
    float _2853 = log2(_2839);
    float _2857 = exp2(_2853 * cbSceneParam._m0[78u].x);
    float _2858 = exp2(_2853 * cbSceneParam._m0[78u].y);
    float _2859 = exp2(_2853 * cbSceneParam._m0[78u].z);
    float _2860 = _2857 * (isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0)));
    float _2861 = _2858 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)));
    float _2862 = _2859 * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)));
    float _2871 = (_2851 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2871 * (_2852 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2833)));
    SV_Target.y = _2871 * (_2852 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2835)));
    SV_Target.z = _2871 * (_2852 ? _2862 : (_2862 + (cbSceneParam._m0[72u].w * _2837)));
    SV_Target.w = cbInstanceData._m0[_2713].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2666) * _2712) * _2857) * _2871;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2672) * _2712) * _2858) * _2871;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2678) * _2712) * _2859) * _2871;
    SV_Target_1.w = cbInstanceData._m0[_2713].w;
}


