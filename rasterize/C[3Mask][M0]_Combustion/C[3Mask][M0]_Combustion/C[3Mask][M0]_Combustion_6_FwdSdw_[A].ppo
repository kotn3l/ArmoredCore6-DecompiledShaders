#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1300;
float _3997;
float _3998;
float _3999;
float _4000;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _289 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _308 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _345 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _308.x) * 2.0) - _335)) + 1.0;
    float _4009 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _353 = (_346 * ((_289.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _354 = (_346 * ((_289.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _355 = (_346 * ((_289.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _374 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _387 = (((((1.0 - _308.y) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4020 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _395 = (((_374.x * cbMtdParam._m0[12u].x) - _353) * _388) + _353;
    float _396 = (_388 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _397 = (_388 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _415 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _428 = (((((1.0 - _308.z) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4031 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    vec4 _457 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _465 = ((((((_415.x * cbMtdParam._m0[13u].x) - _395) * _429) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _457.x;
    float _468 = ((((_429 * ((_415.y * cbMtdParam._m0[13u].y) - _396)) + _396) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _457.y;
    float _471 = ((((_429 * ((_415.z * cbMtdParam._m0[13u].z) - _397)) + _397) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _457.z;
    vec4 _484 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _498 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _500 = _498.x;
    float _501 = _498.y;
    float _502 = _498.z;
    vec4 _514 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _525 = ((_514.x - _500) * _346) + _500;
    float _526 = ((_514.y - _501) * _346) + _501;
    float _527 = ((_514.z - _502) * _346) + _502;
    vec4 _540 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = ((_540.x - _525) * _388) + _525;
    float _552 = ((_540.y - _526) * _388) + _526;
    float _553 = ((_540.z - _527) * _388) + _527;
    vec4 _566 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _579 = ((_566.z - _553) * _429) + _553;
    float _582 = ((((_566.x - _551) * _429) + _551) * 2.0) + (-1.0);
    float _584 = ((((_566.y - _552) * _429) + _552) * 2.0) + (-1.0);
    float _585 = dot(vec2(_582, _584), vec2(_582, _584));
    float _4042 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _590 = sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))));
    vec4 _623 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _637 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4053 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _638 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _646 = (((_638 * _638) * (3.0 - (_638 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _654 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _662 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4064 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _667 = (_663 * _663) * (3.0 - (_663 * 2.0));
    float _668 = _667 * cbMtdParam._m0[22u].x;
    float _669 = _667 * cbMtdParam._m0[22u].y;
    float _670 = sin(_654);
    float _671 = cos(_654);
    float _672 = TEXCOORD.z - _668;
    float _673 = TEXCOORD.w - _669;
    vec4 _693 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_668 + fma(_673, (-0.0) - _670, _672 * _671))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_673, _671, _672 * _670) + _669)) + cbTextureTilingScale._m0[2u].w));
    float _699 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _693.x;
    float _701 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _693.y;
    float _703 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _693.z;
    float _724 = (TEXCOORD_5.x - (((_484.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4075 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _725 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _728 = fma(_590, _233 * NORMAL.x, fma(_584, _240 * TANGENT.x, (_226 * _218) * _582));
    float _731 = fma(_590, _233 * NORMAL.y, fma(_584, _240 * TANGENT.y, (_226 * _219) * _582));
    float _734 = fma(_590, _233 * NORMAL.z, fma(_584, _240 * TANGENT.z, (_226 * _220) * _582));
    float _738 = inversesqrt(dot(vec3(_728, _731, _734), vec3(_728, _731, _734)));
    float _739 = _738 * _728;
    float _740 = _738 * _731;
    float _741 = _738 * _734;
    float _4086 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _742 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _4097 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4108 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _4119 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _761 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _811 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _801);
    float _812 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _801);
    float _813 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _801);
    float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
    float _818 = _811 * _817;
    float _819 = _812 * _817;
    float _820 = _813 * _817;
    vec4 _825 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _827 = _825.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _980 = sqrt(((_811 * _811) + (_812 * _812)) + (_813 * _813));
        float _986 = (cbMatDynParam._m0[5u].x * _980) + cbMatDynParam._m0[5u].y;
        float _4130 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _991 = (cbMatDynParam._m0[5u].z * _980) + cbMatDynParam._m0[5u].w;
        float _4141 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) - _987)) + _987) < ((_827 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _838 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _839 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _857 = fma(_741, cbSceneParam._m0[5u].z, fma(_740, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _739));
    float _860 = fma(_741, cbSceneParam._m0[6u].z, fma(_740, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _739));
    float _863 = fma(_741, cbSceneParam._m0[7u].z, fma(_740, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _739));
    uint _876 = uint(roundEven(NORMAL.w)) * 13u;
    uint _877 = _876 + 9u;
    uint _878 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_878].z;
    float _4152 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _838, cbSceneParam._m0[86u].y * _839));
    float _901 = _898.x * TEXCOORD_5.w;
    float _902 = dot(vec3(_739, _740, _741), vec3(_818, _819, _820));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _739) - _818;
    float _910 = (_905 * _740) - _819;
    float _911 = (_905 * _741) - _820;
    float _915 = abs(dot(vec3(_818, _819, _820), vec3(_739, _740, _741)));
    float _4185 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_742);
    float _929 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _965 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _969 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1299;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1024 = fma(_969, cbModelParam._m0[26u].z, fma(_965, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _961));
        float _1028 = fma(_969, cbModelParam._m0[27u].z, fma(_965, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _961));
        float _1032 = fma(_969, cbModelParam._m0[28u].z, fma(_965, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _961));
        float _1057 = _961 + _739;
        float _1058 = _965 + _740;
        float _1059 = _969 + _741;
        float _1069 = fma(_1059, cbModelParam._m0[26u].z, fma(_1058, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057)) - _1024;
        float _1070 = fma(_1059, cbModelParam._m0[27u].z, fma(_1058, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057)) - _1028;
        float _1071 = fma(_1059, cbModelParam._m0[28u].z, fma(_1058, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057)) - _1032;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1024 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1028 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[34u].z) + ((((((_1032 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1127 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1093.x + (-0.5));
        float _1129 = _1127 * (_1093.y + (-0.5));
        float _1130 = _1127 * (_1093.z + (-0.5));
        float _1137 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1100.x + (-0.5));
        float _1139 = _1137 * (_1100.y + (-0.5));
        float _1140 = _1137 * (_1100.z + (-0.5));
        float _1147 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1107.x + (-0.5));
        float _1149 = _1147 * (_1107.y + (-0.5));
        float _1150 = _1147 * (_1107.z + (-0.5));
        float _1157 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1114.x + (-0.5));
        float _1159 = _1157 * (_1114.y + (-0.5));
        float _1160 = _1157 * (_1114.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1181 = (dot(vec3(_739, _740, _741), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1191 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4233 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1193 + 1.0))) + _1198) * _1161;
        float _1208 = _1129 * 0.5;
        float _1209 = _1139 * 0.5;
        float _1210 = _1149 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_739, _740, _741), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _4266 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1235 + 1.0))) + _1240) * _1162;
        float _1250 = _1130 * 0.5;
        float _1251 = _1140 * 0.5;
        float _1252 = _1150 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_739, _740, _741), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _4299 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1277 + 1.0))) + _1282) * _1163;
        _1299 = _1130;
        _1301 = _1129;
        _1302 = _1128;
        _1303 = _1140;
        _1304 = _1139;
        _1305 = _1138;
        _1306 = _1150;
        _1307 = _1149;
        _1308 = _1148;
        _1309 = _1163;
        _1310 = _1162;
        _1311 = _1161;
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1313 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1314 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _1300;
        _1301 = _1300;
        _1302 = _1300;
        _1303 = _1300;
        _1304 = _1300;
        _1305 = _1300;
        _1306 = _1300;
        _1307 = _1300;
        _1308 = _1300;
        _1309 = _1300;
        _1310 = _1300;
        _1311 = _1300;
        _1312 = 0.0;
        _1313 = 0.0;
        _1314 = 0.0;
    }
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1343 = fma(_969, cbModelParam._m0[30u].z, fma(_965, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _961));
        float _1347 = fma(_969, cbModelParam._m0[31u].z, fma(_965, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _961));
        float _1351 = fma(_969, cbModelParam._m0[32u].z, fma(_965, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _961));
        float _1374 = _961 + _739;
        float _1375 = _965 + _740;
        float _1376 = _969 + _741;
        float _1386 = fma(_1376, cbModelParam._m0[30u].z, fma(_1375, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1374)) - _1343;
        float _1387 = fma(_1376, cbModelParam._m0[31u].z, fma(_1375, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1374)) - _1347;
        float _1388 = fma(_1376, cbModelParam._m0[32u].z, fma(_1375, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1374)) - _1351;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1405 = ((_1392 * _1386) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1343 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1387) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1347 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1392 * _1388) / cbModelParam._m0[35u].z) + ((((((_1351 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1405, _1406, _1407), 0.0);
        float _1442 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1409.x + (-0.5));
        float _1444 = _1442 * (_1409.y + (-0.5));
        float _1445 = _1442 * (_1409.z + (-0.5));
        float _1452 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1416.x + (-0.5));
        float _1454 = _1452 * (_1416.y + (-0.5));
        float _1455 = _1452 * (_1416.z + (-0.5));
        float _1462 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1423.x + (-0.5));
        float _1464 = _1462 * (_1423.y + (-0.5));
        float _1465 = _1462 * (_1423.z + (-0.5));
        float _1472 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1430.x + (-0.5));
        float _1474 = _1472 * (_1430.y + (-0.5));
        float _1475 = _1472 * (_1430.z + (-0.5));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = _1443 * 0.5;
        float _1480 = _1453 * 0.5;
        float _1481 = _1463 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_739, _740, _741), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4362 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1506 + 1.0))) + _1511) * _1476;
        float _1521 = _1444 * 0.5;
        float _1522 = _1454 * 0.5;
        float _1523 = _1464 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_739, _740, _741), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4395 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1548 + 1.0))) + _1553) * _1477;
        float _1563 = _1445 * 0.5;
        float _1564 = _1455 * 0.5;
        float _1565 = _1465 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_739, _740, _741), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4428 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1590 + 1.0))) + _1595) * _1478;
        _1612 = _1445;
        _1613 = _1444;
        _1614 = _1443;
        _1615 = _1455;
        _1616 = _1454;
        _1617 = _1453;
        _1618 = _1465;
        _1619 = _1464;
        _1620 = _1463;
        _1621 = _1478;
        _1622 = _1477;
        _1623 = _1476;
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1625 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
    }
    else
    {
        _1612 = _1300;
        _1613 = _1300;
        _1614 = _1300;
        _1615 = _1300;
        _1616 = _1300;
        _1617 = _1300;
        _1618 = _1300;
        _1619 = _1300;
        _1620 = _1300;
        _1621 = _1300;
        _1622 = _1300;
        _1623 = _1300;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1637 = (cbModelParam._m0[1u].x * (_1625 - _1313)) + _1313;
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1314)) + _1314;
    float _1659 = fma(_1638, cbSceneParam._m0[89u].z, fma(_1637, cbSceneParam._m0[89u].y, _1636 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1638, cbSceneParam._m0[90u].z, fma(_1637, cbSceneParam._m0[90u].y, _1636 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1638, cbSceneParam._m0[91u].z, fma(_1637, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1636));
    float _1680 = _909 * 0.5;
    float _1681 = _910 * 0.5;
    float _1682 = _911 * 0.5;
    float _1683 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1686 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1613, _1616, _1619, _1622));
    float _1689 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1723;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1696 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1299, _1303, _1306, _1309));
        float _1700 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1301, _1304, _1307, _1310));
        float _1704 = dot(vec4(_1680, _1681, _1682, 1.0), vec4(_1302, _1305, _1308, _1311));
        float _1711 = dot(vec4(cbModelParam._m0[39u]), vec4(_1680, _1681, _1682, 1.0));
        _1723 = dot(vec3(isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1723 = 1.0;
    }
    float _1734;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1725 = dot(vec4(cbModelParam._m0[40u]), vec4(_1680, _1681, _1682, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1725) ? 0.0 : (isnan(0.0) ? _1725 : max(0.0, _1725))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1738 = (_1734 * cbModelParam._m0[1u].x) + (_1723 * (1.0 - cbModelParam._m0[1u].x));
    float _1748 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _742);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1748 : min(cbModelParam._m0[25u].z, _1748));
    float _1829;
    float _1831;
    float _1833;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1796 = fma(_969, cbModelParam._m0[13u].z, fma(_965, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _961)) + cbModelParam._m0[13u].w;
        float _1800 = fma(_969, cbModelParam._m0[14u].z, fma(_965, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _961)) + cbModelParam._m0[14u].w;
        float _1804 = fma(_969, cbModelParam._m0[15u].z, fma(_965, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _961)) + cbModelParam._m0[15u].w;
        float _1807 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1810 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1813 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1841;
        if (_1807 > 0.0)
        {
            _1841 = abs((1.0 - _1796) / _1807);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1796 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1841 = frontier_phi_17_15_ladder;
        }
        float _2010;
        if (_1810 > 0.0)
        {
            _2010 = abs((1.0 - _1800) / _1810);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1800 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2010 = frontier_phi_26_22_ladder;
        }
        float _2306;
        if (_1813 > 0.0)
        {
            _2306 = abs((1.0 - _1804) / _1813);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1804 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2306 = frontier_phi_38_33_ladder;
        }
        float _2308 = isnan(_2010) ? _1841 : (isnan(_1841) ? _2010 : min(_1841, _2010));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1807) + _1796;
        float _2314 = (_2309 * _1810) + _1800;
        float _2315 = (_2309 * _1813) + _1804;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2318 = (-1.0) - _2316;
        float _2320 = _2316 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2315 > _2320) || ((_2315 < _2318) || ((_2314 > _2320) || ((_2314 < _2318) || ((_2313 < _2318) || (_2313 > _2320))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2315, cbModelParam._m0[9u].z, fma(_2314, cbModelParam._m0[9u].y, _2313 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2315, cbModelParam._m0[10u].z, fma(_2314, cbModelParam._m0[10u].y, _2313 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2315, cbModelParam._m0[11u].z, fma(_2314, cbModelParam._m0[11u].y, _2313 * cbModelParam._m0[11u].x))), _1749);
            frontier_phi_16_38_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1829 = frontier_phi_16_38_ladder_2;
        _1831 = frontier_phi_16_38_ladder_1;
        _1833 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1817 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1749);
        _1829 = _1817.x * cbModelParam._m0[1u].y;
        _1831 = _1817.y * cbModelParam._m0[1u].y;
        _1833 = _1817.z * cbModelParam._m0[1u].y;
    }
    float _1837 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _742);
    float _1838 = isnan(_1837) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1837 : min(cbModelParam._m0[25u].w, _1837));
    float _1927;
    float _1929;
    float _1931;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1891 = fma(_969, cbModelParam._m0[21u].z, fma(_965, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _961)) + cbModelParam._m0[21u].w;
        float _1895 = fma(_969, cbModelParam._m0[22u].z, fma(_965, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _961)) + cbModelParam._m0[22u].w;
        float _1899 = fma(_969, cbModelParam._m0[23u].z, fma(_965, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _961)) + cbModelParam._m0[23u].w;
        float _1902 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1905 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1908 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2015;
        if (_1902 > 0.0)
        {
            _2015 = abs((1.0 - _1891) / _1902);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1891 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2015 = frontier_phi_28_24_ladder;
        }
        float _2333;
        if (_1905 > 0.0)
        {
            _2333 = abs((1.0 - _1895) / _1905);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1905 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1895 + 1.0) / _1905);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2333 = frontier_phi_40_35_ladder;
        }
        float _2660;
        if (_1908 > 0.0)
        {
            _2660 = abs((1.0 - _1899) / _1908);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1899 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2660 = frontier_phi_50_47_ladder;
        }
        float _2662 = isnan(_2333) ? _2015 : (isnan(_2015) ? _2333 : min(_2015, _2333));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _1902) + _1891;
        float _2668 = (_2663 * _1905) + _1895;
        float _2669 = (_2663 * _1908) + _1899;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1838);
            frontier_phi_25_50_ladder = _2787.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2787.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2787.x * cbModelParam._m0[1u].z;
        }
        _1927 = frontier_phi_25_50_ladder_2;
        _1929 = frontier_phi_25_50_ladder_1;
        _1931 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1838);
        _1927 = _1911.x * cbModelParam._m0[1u].z;
        _1929 = _1911.y * cbModelParam._m0[1u].z;
        _1931 = _1911.z * cbModelParam._m0[1u].z;
    }
    float _1943 = ((((1.0 - _929) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_929 * _917)) * _901;
    float _1944 = _1943 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1945 = _1943 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1946 = _1943 * ((cbModelParam._m0[1u].w * (_1931 - _1833)) + _1833);
    float _1949 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1952 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1955 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, _1944 * cbSceneParam._m0[91u].x));
    float _1989 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1993 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2002 = _1989 / _2001;
    float _2003 = _1993 / _2001;
    float _2004 = _1997 / _2001;
    float _2151;
    float _2152;
    float _2153;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2031 = ((uint(_2004 > cbSceneParam._m0[59u].y) + uint(_2004 > cbSceneParam._m0[59u].x)) + uint(_2004 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2032 = _2031 + 43u;
        uint _2040 = _2031 + 44u;
        uint _2048 = _2031 + 45u;
        uint _2056 = _2031 + 46u;
        float _2067 = fma(_2001, cbSceneParam._m0[_2032].w, fma(_1997, cbSceneParam._m0[_2032].z, fma(_1993, cbSceneParam._m0[_2032].y, _1989 * cbSceneParam._m0[_2032].x)));
        float _2071 = fma(_2001, cbSceneParam._m0[_2040].w, fma(_1997, cbSceneParam._m0[_2040].z, fma(_1993, cbSceneParam._m0[_2040].y, _1989 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2001, cbSceneParam._m0[_2056].w, fma(_1997, cbSceneParam._m0[_2056].z, fma(_1993, cbSceneParam._m0[_2056].y, _1989 * cbSceneParam._m0[_2056].x)));
        float _2084 = cbSceneParam._m0[33u].z * _2079;
        float _2086 = cbSceneParam._m0[33u].w * _2079;
        float _2089 = fma(_2001, cbSceneParam._m0[_2048].w, fma(_1997, cbSceneParam._m0[_2048].z, fma(_1993, cbSceneParam._m0[_2048].y, _1989 * cbSceneParam._m0[_2048].x))) / _2079;
        float _2137 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
        float _4554 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2144 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2067) / _2079, (_2086 + _2071) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 + _2067) / _2079, (_2071 - _2084) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2084) / _2079, (_2071 - _2086) / _2079), _2089), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2067 - _2086) / _2079, (_2084 + _2071) / _2079), _2089), 0.0)).x), vec4(0.25)));
        _2151 = 1.0 - (_2144 * cbSceneParam._m0[34u].x);
        _2152 = 1.0 - (_2144 * cbSceneParam._m0[34u].y);
        _2153 = 1.0 - (_2144 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2151 = 1.0;
        _2152 = 1.0;
        _2153 = 1.0;
    }
    float _2217;
    float _2219;
    float _2221;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2205 = fma(_2001, cbSceneParam._m0[63u].w, fma(_1997, cbSceneParam._m0[63u].z, fma(_1993, cbSceneParam._m0[63u].y, _1989 * cbSceneParam._m0[63u].x)));
        float _2206 = fma(_2001, cbSceneParam._m0[60u].w, fma(_1997, cbSceneParam._m0[60u].z, fma(_1993, cbSceneParam._m0[60u].y, _1989 * cbSceneParam._m0[60u].x))) / _2205;
        float _2207 = fma(_2001, cbSceneParam._m0[61u].w, fma(_1997, cbSceneParam._m0[61u].z, fma(_1993, cbSceneParam._m0[61u].y, _1989 * cbSceneParam._m0[61u].x))) / _2205;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2206 >= cbSceneParam._m0[64u].x) && (_2207 >= cbSceneParam._m0[64u].y)) && (_2206 <= cbSceneParam._m0[64u].z)) && (_2207 <= cbSceneParam._m0[64u].w))
        {
            float _2346 = fma(_2001, cbSceneParam._m0[62u].w, fma(_1997, cbSceneParam._m0[62u].z, fma(_1993, cbSceneParam._m0[62u].y, _1989 * cbSceneParam._m0[62u].x))) / _2205;
            float _2350 = isnan(cbSceneParam._m0[41u].w) ? _2346 : (isnan(_2346) ? cbSceneParam._m0[41u].w : max(_2346, cbSceneParam._m0[41u].w));
            float _2393 = (cbSceneParam._m0[33u].x - sqrt(((_2003 * _2003) + (_2002 * _2002)) + (_2004 * _2004))) * cbSceneParam._m0[33u].y;
            float _4570 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
            float _2400 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2206, cbSceneParam._m0[33u].w + _2207), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2206, _2207 - cbSceneParam._m0[33u].z), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].z, _2207 - cbSceneParam._m0[33u].w), _2350), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2206 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2207), _2350), 0.0)).x), vec4(0.25)));
            float _2404 = 1.0 - (_2400 * cbSceneParam._m0[34u].x);
            float _2405 = 1.0 - (_2400 * cbSceneParam._m0[34u].y);
            float _2406 = 1.0 - (_2400 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2406) ? _2153 : (isnan(_2153) ? _2406 : min(_2153, _2406));
            frontier_phi_37_36_ladder_1 = isnan(_2405) ? _2152 : (isnan(_2152) ? _2405 : min(_2152, _2405));
            frontier_phi_37_36_ladder_2 = isnan(_2404) ? _2151 : (isnan(_2151) ? _2404 : min(_2151, _2404));
        }
        else
        {
            frontier_phi_37_36_ladder = _2153;
            frontier_phi_37_36_ladder_1 = _2152;
            frontier_phi_37_36_ladder_2 = _2151;
        }
        _2217 = frontier_phi_37_36_ladder_2;
        _2219 = frontier_phi_37_36_ladder_1;
        _2221 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2217 = _2151;
        _2219 = _2152;
        _2221 = _2153;
    }
    uvec4 _2226 = floatBitsToUint(cbInstanceData._m0[_876 + 5u]);
    uint _2228 = _2226.x * 14u;
    uint _2229 = _2228 + 13u;
    float _2236 = _901 + (-1.0);
    float _2241 = (cbLight._m0[_2229].x * _2236) + 1.0;
    float _2242 = (cbLight._m0[_2229].y * _2236) + 1.0;
    float _2243 = (cbLight._m0[_2229].z * _2236) + 1.0;
    float _2244 = (cbLight._m0[_2229].w * _2236) + 1.0;
    uint _2245 = _2228 + 5u;
    float _2251 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2255 = _2228 + 4u;
    float _2265 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
    uint _2269 = _2228 | 1u;
    float _2280 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_739, _740, _741));
    float _2283 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_739, _740, _741));
    float _4606 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _4617 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2288 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * 0.3183098733425140380859375;
    float _2290 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2297 = ((cbLight._m0[_2245].x * _2251) * _2290) + (((cbLight._m0[_2255].x * _2217) * _2265) * _2288);
    float _2298 = ((_2251 * cbLight._m0[_2245].y) * _2290) + (((cbLight._m0[_2255].y * _2219) * _2265) * _2288);
    float _2299 = ((_2251 * cbLight._m0[_2245].z) * _2290) + (((cbLight._m0[_2255].z * _2221) * _2265) * _2288);
    uvec4 _2303 = floatBitsToUint(cbLight._m0[_2228 + 12u]);
    bool _2305 = _2303.x == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2305)
    {
        _2407 = _2297;
        _2409 = _2298;
        _2411 = _2299;
    }
    else
    {
        uint _2415 = _2228 + 6u;
        float _2431 = (dot(vec3(cbLight._m0[_2228 + 2u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4628 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2434 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2407 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2297;
        _2409 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2298;
        _2411 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2299;
    }
    bool _2414 = _2303.y == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2414)
    {
        _2469 = _2407;
        _2471 = _2409;
        _2473 = _2411;
    }
    else
    {
        uint _2631 = _2228 + 7u;
        float _2647 = (dot(vec3(cbLight._m0[_2228 + 3u].xyz), vec3(_739, _740, _741)) * 0.5) + 0.5;
        float _2648 = _2647 * _2647;
        float _4644 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2649 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2650 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2469 = (((cbLight._m0[_2631].x * 0.3183098733425140380859375) * _2649) * _2650) + _2407;
        _2471 = (((cbLight._m0[_2631].y * 0.3183098733425140380859375) * _2649) * _2650) + _2409;
        _2473 = (((cbLight._m0[_2631].z * 0.3183098733425140380859375) * _2649) * _2650) + _2411;
    }
    uint _2476 = _2228 + 8u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2228].w)) * _742) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2228].x + _818;
    float _2492 = cbLight._m0[_2228].y + _819;
    float _2493 = cbLight._m0[_2228].z + _820;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2228].xyz));
    float _4660 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _4671 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2505 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2506 = dot(vec3(_739, _740, _741), vec3(_2498, _2499, _2500));
    float _4682 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2228].xyz), vec3(_2498, _2499, _2500));
    float _4693 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2490 * _2490;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2529 = (exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2530 = 1.0 - _2490;
    float _2541 = (0.5 / (((_2505 * ((_2504 * _2530) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2530) + _2490) * _2504))) * _2504;
    float _4704 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2543 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    uint _2557 = _2228 + 9u;
    float _2568 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2269].w)) * _742) * 0.949999988079071044921875);
    float _2569 = _2568 * _2568;
    float _2570 = cbLight._m0[_2269].x + _818;
    float _2571 = cbLight._m0[_2269].y + _819;
    float _2572 = cbLight._m0[_2269].z + _820;
    float _2576 = inversesqrt(dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572)));
    float _2577 = _2576 * _2570;
    float _2578 = _2576 * _2571;
    float _2579 = _2576 * _2572;
    float _2580 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2269].xyz));
    float _4715 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2584 = dot(vec3(_739, _740, _741), vec3(_2577, _2578, _2579));
    float _4726 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2269].xyz), vec3(_2577, _2578, _2579));
    float _4737 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2569 * _2569;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2605 = (exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2606 = 1.0 - _2569;
    float _2616 = (0.5 / (((_2505 * ((_2583 * _2606) + _2569)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2606) + _2569) * _2583))) * _2583;
    float _4748 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _2618 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    float _2628 = (((_2605 * cbLight._m0[_2557].x) * _2618) * _2251) + ((((cbLight._m0[_2476].x * _2217) * _2529) * _2543) * _2265);
    float _2629 = (((_2605 * cbLight._m0[_2557].y) * _2618) * _2251) + ((((cbLight._m0[_2476].y * _2219) * _2529) * _2543) * _2265);
    float _2630 = (((_2605 * cbLight._m0[_2557].z) * _2618) * _2251) + ((((cbLight._m0[_2476].z * _2221) * _2529) * _2543) * _2265);
    float _2686;
    float _2688;
    float _2690;
    if (_2305)
    {
        _2686 = _2628;
        _2688 = _2629;
        _2690 = _2630;
    }
    else
    {
        uint _2692 = _2228 + 2u;
        uint _2696 = _2228 + 10u;
        float _2710 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2692].w)) * _742) * 0.949999988079071044921875);
        float _2711 = _2710 * _2710;
        float _2712 = cbLight._m0[_2692].x + _818;
        float _2713 = cbLight._m0[_2692].y + _819;
        float _2714 = cbLight._m0[_2692].z + _820;
        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
        float _2719 = _2718 * _2712;
        float _2720 = _2718 * _2713;
        float _2721 = _2718 * _2714;
        float _2722 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2692].xyz));
        float _4759 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2726 = dot(vec3(_739, _740, _741), vec3(_2719, _2720, _2721));
        float _4770 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2729 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2730 = dot(vec3(cbLight._m0[_2692].xyz), vec3(_2719, _2720, _2721));
        float _4781 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2734 = _2711 * _2711;
        float _2738 = ((_2729 * _2729) * (_2734 + (-1.0))) + 1.0;
        float _2747 = (exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2748 = 1.0 - _2711;
        float _2758 = (0.5 / (((_2505 * ((_2725 * _2748) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2748) + _2711) * _2725))) * _2725;
        float _4792 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2734 / ((_2738 * _2738) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
        _2686 = (((_2747 * cbLight._m0[_2696].x) * _2760) * _2761) + _2628;
        _2688 = (((_2747 * cbLight._m0[_2696].y) * _2760) * _2761) + _2629;
        _2690 = (((_2747 * cbLight._m0[_2696].z) * _2760) * _2761) + _2630;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2414)
    {
        _2792 = _2686;
        _2794 = _2688;
        _2796 = _2690;
    }
    else
    {
        uint _2803 = _2228 + 3u;
        uint _2807 = _2228 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _742) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _818;
        float _2824 = cbLight._m0[_2803].y + _819;
        float _2825 = cbLight._m0[_2803].z + _820;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_739, _740, _741), vec3(cbLight._m0[_2803].xyz));
        float _4808 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2837 = dot(vec3(_739, _740, _741), vec3(_2830, _2831, _2832));
        float _4819 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4830 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2858 = (exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2859 = 1.0 - _2822;
        float _2869 = (0.5 / (((_2505 * ((_2836 * _2859) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2859) + _2822) * _2836))) * _2836;
        float _4841 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
        float _2871 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2872 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2792 = (((_2858 * cbLight._m0[_2807].x) * _2871) * _2872) + _2686;
        _2794 = (((_2858 * cbLight._m0[_2807].y) * _2871) * _2872) + _2688;
        _2796 = (((_2858 * cbLight._m0[_2807].z) * _2871) * _2872) + _2690;
    }
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    float _2946;
    float _2948;
    if (_2226.y == 0u)
    {
        uvec4 _2893 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2894 = _2893.x;
        uint _2905 = uint((float(_2893.y) * floor(float(uint(cbSceneParam._m0[85u].y * _839) / _2894))) + floor(float(uint(cbSceneParam._m0[85u].x * _838) / _2894)));
        float _2915 = (log2(_2004 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2916 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        uint _2919 = uint(isnan(14.0) ? _2916 : (isnan(_2916) ? 14.0 : min(_2916, 14.0)));
        uvec4 _2924 = texelFetch(g_lightClusterGridBuffer, int(((_2919 << 2u) + (_2905 << 6u)) >> 2u));
        uint _2925 = _2924.x;
        uint _2926 = _2893.z;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        if (((((1u << ((_2926 >> 4u) & 15u)) + 4294967295u) & _2925) == 0u) || ((_2926 & 240u) == 0u))
        {
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
        }
        else
        {
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3227)
                {
                    frontier_phi_71_pred = _3216;
                    frontier_phi_71_pred_1 = _3215;
                    frontier_phi_71_pred_2 = _3214;
                    frontier_phi_71_pred_3 = _3213;
                    frontier_phi_71_pred_4 = _3212;
                    frontier_phi_71_pred_5 = _3211;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3226;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3217 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2002;
                        float _3423 = _3382.y - _2003;
                        float _3424 = _3382.z - _2004;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_857, _860, _863), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4867 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2002;
                        float _3458 = (-0.0) - _2003;
                        float _3459 = (-0.0) - _2004;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3473 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _917;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_857, _860, _863), vec3(_3464, _3465, _3466));
                        float _4883 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3498 = dot(vec3(_857, _860, _863), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4894 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3442 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3432) + _3507;
                        float _4905 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4916 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3505 * _3505) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3286 = (_3453 * _3401.x) + _3359;
                        _3287 = (_3453 * _3401.y) + _3360;
                        _3288 = (_3453 * _3401.z) + _3361;
                        _3283 = (_3533 * _3418.x) + _3356;
                        _3284 = (_3533 * _3418.y) + _3357;
                        _3285 = (_3533 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_71_pred = _3288;
                    frontier_phi_71_pred_1 = _3287;
                    frontier_phi_71_pred_2 = _3286;
                    frontier_phi_71_pred_3 = _3285;
                    frontier_phi_71_pred_4 = _3284;
                    frontier_phi_71_pred_5 = _3283;
                }
                _3061 = frontier_phi_71_pred;
                _3059 = frontier_phi_71_pred_1;
                _3057 = frontier_phi_71_pred_2;
                _3055 = frontier_phi_71_pred_3;
                _3053 = frontier_phi_71_pred_4;
                _3051 = frontier_phi_71_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3051;
                    _3212 = _3053;
                    _3213 = _3055;
                    _3214 = _3057;
                    _3215 = _3059;
                    _3216 = _3061;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
        }
        uvec4 _3064 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3065 = _3064.z;
        uint _3067 = (_3065 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3067) & _2925) == 0u)
        {
            _3179 = _3050;
            _3181 = _3052;
            _3183 = _3054;
            _3185 = _3056;
            _3187 = _3058;
            _3189 = _3060;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
            float _3205 = _3204 * _2002;
            float _3206 = _3204 * _2003;
            float _3207 = _3204 * _2004;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3067 < ((_3065 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3339 = _3050;
                float _3340 = _3052;
                float _3341 = _3054;
                float _3342 = _3056;
                float _3343 = _3058;
                float _3344 = _3060;
                uint _3345 = _3067;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2919 << 5u) + (_2905 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3355)
                    {
                        frontier_phi_82_pred = _3344;
                        frontier_phi_82_pred_1 = _3343;
                        frontier_phi_82_pred_2 = _3342;
                        frontier_phi_82_pred_3 = _3341;
                        frontier_phi_82_pred_4 = _3340;
                        frontier_phi_82_pred_5 = _3339;
                    }
                    else
                    {
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        float _3565 = _3344;
                        uint _3566 = _3354;
                        uint _3567;
                        vec4 _3592;
                        float _3593;
                        vec4 _3608;
                        vec3 _3620;
                        vec4 _3635;
                        vec4 _3650;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3577 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3566));
                            _3567 = (_3566 + 4294967295u) & _3566;
                            uint _3579 = _3577 * 40u;
                            _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            _3593 = _3592.w;
                            uint _3595 = (_3577 * 40u) + 4u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3610 = (_3577 * 40u) + 8u;
                            _3620 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x));
                            uint _3622 = (_3577 * 40u) + 16u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3637 = (_3577 * 40u) + 20u;
                            _3650 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3637)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3637 + 3u)).x));
                            uint _3653 = (_3577 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3577 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2004, _3685.z, fma(_2003, _3685.y, _3685.x * _2002)) + _3685.w;
                            _3698 = !((fma(_2004, _3666.z, fma(_2003, _3666.y, _3666.x * _2002)) + _3666.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3592.x - _2002;
                                float _3726 = _3592.y - _2003;
                                float _3727 = _3592.z - _2004;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3593 * _3593));
                                float _4927 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3743 = sqrt(_3728) * _3608.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_857, _860, _863))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2004, _3635.z, fma(_2003, _3635.y, _3635.x * _2002)) + _3635.w) / _3697;
                                float _3757 = (fma(_2004, _3650.z, fma(_2003, _3650.y, _3650.x * _2002)) + _3650.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4943 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _917;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3205;
                                float _3787 = _3733 - _3206;
                                float _3788 = _3734 - _3207;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_857, _860, _863), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4954 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3800 = dot(vec3(_857, _860, _863), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4965 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_857, _860, _863), vec3(_3732, _3733, _3734))) + _3809;
                                float _4976 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _4987 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3763 * _3608.z;
                                frontier_phi_88_pred_1 = _3763 * _3608.y;
                                frontier_phi_88_pred_2 = _3763 * _3608.x;
                                frontier_phi_88_pred_3 = _3837 * _3620.z;
                                frontier_phi_88_pred_4 = _3837 * _3620.y;
                                frontier_phi_88_pred_5 = _3837 * _3620.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3846 = frontier_phi_88_pred;
                            _3845 = frontier_phi_88_pred_1;
                            _3844 = frontier_phi_88_pred_2;
                            _3843 = frontier_phi_88_pred_3;
                            _3842 = frontier_phi_88_pred_4;
                            _3841 = frontier_phi_88_pred_5;
                            _3550 = _3844 + _3563;
                            _3551 = _3845 + _3564;
                            _3552 = _3846 + _3565;
                            _3547 = _3841 + _3560;
                            _3548 = _3842 + _3561;
                            _3549 = _3843 + _3562;
                            if (_3567 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3567;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3552;
                        frontier_phi_82_pred_1 = _3551;
                        frontier_phi_82_pred_2 = _3550;
                        frontier_phi_82_pred_3 = _3549;
                        frontier_phi_82_pred_4 = _3548;
                        frontier_phi_82_pred_5 = _3547;
                    }
                    _3190 = frontier_phi_82_pred;
                    _3188 = frontier_phi_82_pred_1;
                    _3186 = frontier_phi_82_pred_2;
                    _3184 = frontier_phi_82_pred_3;
                    _3182 = frontier_phi_82_pred_4;
                    _3180 = frontier_phi_82_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3180;
                        _3340 = _3182;
                        _3341 = _3184;
                        _3342 = _3186;
                        _3343 = _3188;
                        _3344 = _3190;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3186;
                frontier_phi_63_64_ladder_1 = _3190;
                frontier_phi_63_64_ladder_2 = _3188;
                frontier_phi_63_64_ladder_3 = _3184;
                frontier_phi_63_64_ladder_4 = _3182;
                frontier_phi_63_64_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_63_64_ladder = _3056;
                frontier_phi_63_64_ladder_1 = _3060;
                frontier_phi_63_64_ladder_2 = _3058;
                frontier_phi_63_64_ladder_3 = _3054;
                frontier_phi_63_64_ladder_4 = _3052;
                frontier_phi_63_64_ladder_5 = _3050;
            }
            _3179 = frontier_phi_63_64_ladder_5;
            _3181 = frontier_phi_63_64_ladder_4;
            _3183 = frontier_phi_63_64_ladder_3;
            _3185 = frontier_phi_63_64_ladder;
            _3187 = frontier_phi_63_64_ladder_2;
            _3189 = frontier_phi_63_64_ladder_1;
        }
        float _3194 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2938 = (_3194 * _3185) + _2469;
        _2940 = (_3194 * _3187) + _2471;
        _2942 = (_3194 * _3189) + _2473;
        _2944 = ((_3179 * 0.039999999105930328369140625) * _3194) + _2792;
        _2946 = ((_3181 * 0.039999999105930328369140625) * _3194) + _2794;
        _2948 = ((_3183 * 0.039999999105930328369140625) * _3194) + _2796;
    }
    else
    {
        _2938 = _2469;
        _2940 = _2471;
        _2942 = _2473;
        _2944 = _2792;
        _2946 = _2794;
        _2948 = _2796;
    }
    uint _2954 = _877 + uint(cbMatDynParam._m0[0u].w);
    float _2960 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2966 = (((((_2960 * cbMtdParam._m0[14u].x) * _623.x) * _646) * _725) * (((1.0 - _699) * cbMtdParam._m0[20u].w) + _699)) * cbInstanceData._m0[_2954].x;
    float _2972 = (((((_2960 * cbMtdParam._m0[14u].y) * _623.y) * _646) * _725) * (((1.0 - _701) * cbMtdParam._m0[20u].w) + _701)) * cbInstanceData._m0[_2954].y;
    float _2978 = (((((_2960 * cbMtdParam._m0[14u].z) * _623.z) * _646) * _725) * (((1.0 - _703) * cbMtdParam._m0[20u].w) + _703)) * cbInstanceData._m0[_2954].z;
    float _5003 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _5014 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _5025 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2995 = (((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_2938 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _901))) + ((_2944 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + _2966;
    float _2997 = (_2972 + ((_2946 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_2940 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _901)));
    float _2999 = (_2978 + ((_2948 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1738)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2942 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _901)));
    float _3000 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
    float _3001 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
    float _3002 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
    float _3008 = cbMtdParam._m0[2u].x * _2966;
    float _3009 = cbMtdParam._m0[2u].y * _2972;
    float _3010 = cbMtdParam._m0[2u].z * _2978;
    float _5051 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3012 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
    uint _3013 = _876 + 6u;
    float _3021 = _838 / cbSceneParam._m0[86u].x;
    float _3022 = _839 / cbSceneParam._m0[86u].y;
    vec4 _3036 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3021, _3022, (log2((isnan(cbSceneParam._m0[77u].w) ? _761 : (isnan(_761) ? cbSceneParam._m0[77u].w : min(_761, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3038 = _3036.x;
    float _3039 = _3036.y;
    float _3040 = _3036.z;
    float _3041 = _3036.w;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_761 > cbSceneParam._m0[78u].w)
    {
        float _3075 = isnan(_761) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _761 : min(cbSceneParam._m0[80u].w, _761));
        float _3076 = _3075 / _761;
        float _3087 = _3076 * _811;
        float _3088 = _812 * _3076;
        float _3089 = (-0.0) - _3088;
        float _3090 = _3076 * _813;
        float _3092 = (cbSceneParam._m0[77u].w * _3089) / _3075;
        float _3093 = _3092 + cbSceneParam._m0[79u].w;
        float _3094 = cbSceneParam._m0[79u].w - _3088;
        float _3100 = sqrt(((_3087 * _3087) + (_3088 * _3088)) + (_3090 * _3090));
        float _3103 = (1.0 - (cbSceneParam._m0[77u].w / _3075)) * _3100;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3089 - _3092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3093 > 0.0) ? exp2(_3108 * _3093) : (2.0 - exp2(_3110 * _3093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3103;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : max(_3093, _3094));
            float _3242 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : min(_3093, _3094));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3296 = ((abs(_3100 / _3089) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3110 * _3251) - exp2(_3110 * _3252)) * _3240))) + (_3103 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3021, _3022, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_3041);
        _3112 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _3038;
        _3114 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _3039;
        _3116 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _3040;
        _3118 = _3307 * _3041;
    }
    else
    {
        _3112 = _3038;
        _3114 = _3039;
        _3116 = _3040;
        _3118 = _3041;
    }
    bool _3334;
    vec4 _3128;
    vec4 _3150;
    float _3152;
    float _3156;
    float _3157;
    float _3158;
    float _3161;
    float _3164;
    float _3167;
    float _3168;
    bool _3178;
    for (;;)
    {
        _3128 = cbMatDynParam._m0[0u];
        float _3130 = roundEven(_3128.y);
        bool _3131 = _3130 == 3.0;
        float _3132 = log2(_3118);
        float _3136 = exp2(_3132 * cbSceneParam._m0[78u].x);
        float _3137 = exp2(_3132 * cbSceneParam._m0[78u].y);
        float _3138 = exp2(_3132 * cbSceneParam._m0[78u].z);
        float _3139 = _3136 * _3000;
        float _3140 = _3137 * _3001;
        float _3141 = _3138 * _3002;
        float _3148 = _827 + (-0.5);
        _3150 = cbMtdParam._m0[1u];
        _3152 = _3150.y * _3148;
        float _3155 = (_3130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3156 = _3155 * (_3131 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3112)));
        _3157 = _3155 * (_3131 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3114)));
        _3158 = _3155 * (_3131 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3116)));
        _3161 = ((_3008 * _3012) * _3136) * _3155;
        _3164 = ((_3009 * _3012) * _3137) * _3155;
        _3167 = ((_3010 * _3012) * _3138) * _3155;
        _3168 = _3148 * 0.999000012874603271484375;
        _3178 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3178)
        {
            if ((cbInstanceData._m0[_876 + 7u].x + _3168) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3275 = _877 + uint(_3128.w);
        if ((cbInstanceData._m0[_3275].w < 1.0) && ((cbInstanceData._m0[_3275].w + _3168) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3152 + 1.0) < _3150.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3538;
    if (_3334)
    {
        discard_state = true;
        _3538 = 0.0;
    }
    else
    {
        _3538 = cbInstanceData._m0[_3013].w;
    }
    SV_Target.x = _3156;
    SV_Target.y = _3157;
    SV_Target.z = _3158;
    SV_Target.w = _3538;
    SV_Target_1.x = _3161;
    SV_Target_1.y = _3164;
    SV_Target_1.z = _3167;
    SV_Target_1.w = cbInstanceData._m0[_3013].w;
    discard_exit();
}


