#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1293;
float _3990;
float _3991;
float _3992;
float _3993;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _289 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _308 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _335 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _345 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _308.x) * 2.0) - _335)) + 1.0;
    float _4002 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _353 = (_346 * ((_289.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _354 = (_346 * ((_289.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _355 = (_346 * ((_289.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _374 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _387 = (((((1.0 - _308.y) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _4013 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _388 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _395 = (((_374.x * cbMtdParam._m0[12u].x) - _353) * _388) + _353;
    float _396 = (_388 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _397 = (_388 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _415 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _428 = (((((1.0 - _308.z) * 2.0) - _335) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _4024 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _436 = (((_415.x * cbMtdParam._m0[13u].x) - _395) * _429) + _395;
    float _437 = (_429 * ((_415.y * cbMtdParam._m0[13u].y) - _396)) + _396;
    float _438 = (_429 * ((_415.z * cbMtdParam._m0[13u].z) - _397)) + _397;
    vec4 _451 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _465 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    vec4 _481 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _492 = ((_481.x - _467) * _346) + _467;
    float _493 = ((_481.y - _468) * _346) + _468;
    float _494 = ((_481.z - _469) * _346) + _469;
    vec4 _507 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _518 = ((_507.x - _492) * _388) + _492;
    float _519 = ((_507.y - _493) * _388) + _493;
    float _520 = ((_507.z - _494) * _388) + _494;
    vec4 _533 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _546 = ((_533.z - _520) * _429) + _520;
    float _549 = ((((_533.x - _518) * _429) + _518) * 2.0) + (-1.0);
    float _551 = ((((_533.y - _519) * _429) + _519) * 2.0) + (-1.0);
    float _552 = dot(vec2(_549, _551), vec2(_549, _551));
    float _4035 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))));
    vec4 _590 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _604 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4046 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _613 = (((_605 * _605) * (3.0 - (_605 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _621 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _629 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _4057 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _634 = (_630 * _630) * (3.0 - (_630 * 2.0));
    float _635 = _634 * cbMtdParam._m0[22u].x;
    float _636 = _634 * cbMtdParam._m0[22u].y;
    float _637 = sin(_621);
    float _638 = cos(_621);
    float _639 = TEXCOORD.z - _635;
    float _640 = TEXCOORD.w - _636;
    vec4 _660 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_635 + fma(_640, (-0.0) - _637, _639 * _638))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_640, _638, _639 * _637) + _636)) + cbTextureTilingScale._m0[2u].w));
    float _666 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _660.x;
    float _668 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _660.y;
    float _670 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _660.z;
    float _691 = (TEXCOORD_5.x - (((_451.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _4068 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _692 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    vec4 _705 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _715 = (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _549;
    float _716 = (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _551;
    float _719 = fma(_557, _233 * NORMAL.x, fma(_716, _240 * TANGENT.x, (_226 * _218) * _715));
    float _722 = fma(_557, _233 * NORMAL.y, fma(_716, _240 * TANGENT.y, (_226 * _219) * _715));
    float _725 = fma(_557, _233 * NORMAL.z, fma(_716, _240 * TANGENT.z, (_226 * _220) * _715));
    float _729 = inversesqrt(dot(vec3(_719, _722, _725), vec3(_719, _722, _725)));
    float _730 = _729 * _719;
    float _731 = _729 * _722;
    float _732 = _729 * _725;
    float _4079 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _733 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4101 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4112 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _752 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _803 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _793);
    float _804 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _793);
    float _805 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _793);
    float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
    float _810 = _803 * _809;
    float _811 = _804 * _809;
    float _812 = _805 * _809;
    vec4 _817 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _819 = _817.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _973 = sqrt(((_803 * _803) + (_804 * _804)) + (_805 * _805));
        float _979 = (cbMatDynParam._m0[5u].x * _973) + cbMatDynParam._m0[5u].y;
        float _4123 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _984 = (cbMatDynParam._m0[5u].z * _973) + cbMatDynParam._m0[5u].w;
        float _4134 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) - _980)) + _980) < ((_819 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _830 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _831 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _850 = fma(_732, cbSceneParam._m0[5u].z, fma(_731, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _730));
    float _853 = fma(_732, cbSceneParam._m0[6u].z, fma(_731, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _730));
    float _856 = fma(_732, cbSceneParam._m0[7u].z, fma(_731, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _730));
    uint _869 = uint(roundEven(NORMAL.w)) * 13u;
    uint _870 = _869 + 9u;
    uint _871 = _870 + uint(cbMatDynParam._m0[0u].w);
    float _877 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0)))) * cbInstanceData._m0[_871].x;
    float _878 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)))) * cbInstanceData._m0[_871].y;
    float _879 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_871].z;
    float _4145 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _4156 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _881 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _4167 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _882 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    vec4 _891 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _830, cbSceneParam._m0[86u].y * _831));
    float _894 = _891.x * TEXCOORD_5.w;
    float _895 = dot(vec3(_730, _731, _732), vec3(_810, _811, _812));
    float _898 = _895 * 2.0;
    float _902 = (_898 * _730) - _810;
    float _903 = (_898 * _731) - _811;
    float _904 = (_898 * _732) - _812;
    float _908 = abs(dot(vec3(_810, _811, _812), vec3(_730, _731, _732)));
    float _4178 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _910 = sqrt(_733);
    float _922 = exp2((_910 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_910 * 3.0));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1292;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1017 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _1021 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _1025 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1050 = _954 + _730;
        float _1051 = _958 + _731;
        float _1052 = _962 + _732;
        float _1062 = fma(_1052, cbModelParam._m0[26u].z, fma(_1051, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050)) - _1017;
        float _1063 = fma(_1052, cbModelParam._m0[27u].z, fma(_1051, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050)) - _1021;
        float _1064 = fma(_1052, cbModelParam._m0[28u].z, fma(_1051, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050)) - _1025;
        float _1068 = inversesqrt(dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064)));
        float _1081 = ((_1068 * _1062) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1017 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1068 * _1063) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1021 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1068 * _1064) / cbModelParam._m0[34u].z) + ((((((_1025 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1081, _1082, _1083), 0.0);
        float _1120 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1086.x + (-0.5));
        float _1122 = _1120 * (_1086.y + (-0.5));
        float _1123 = _1120 * (_1086.z + (-0.5));
        float _1130 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1093.x + (-0.5));
        float _1132 = _1130 * (_1093.y + (-0.5));
        float _1133 = _1130 * (_1093.z + (-0.5));
        float _1140 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1100.x + (-0.5));
        float _1142 = _1140 * (_1100.y + (-0.5));
        float _1143 = _1140 * (_1100.z + (-0.5));
        float _1150 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1107.x + (-0.5));
        float _1152 = _1150 * (_1107.y + (-0.5));
        float _1153 = _1150 * (_1107.z + (-0.5));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = _1121 * 0.5;
        float _1158 = _1131 * 0.5;
        float _1159 = _1141 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1174 = (dot(vec3(_730, _731, _732), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1184 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1186 = _1185 * 2.0;
        float _1190 = (1.0 - _1185) / (_1185 + 1.0);
        float _4226 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1191 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1200 = ((((1.0 - _1191) * (_1186 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1186 + 1.0))) + _1191) * _1154;
        float _1201 = _1122 * 0.5;
        float _1202 = _1132 * 0.5;
        float _1203 = _1142 * 0.5;
        float _1204 = dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203));
        float _1209 = (_1204 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1204);
        float _1217 = (dot(vec3(_730, _731, _732), vec3(_1209 * _1201, _1209 * _1202, _1209 * _1203)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1226 = sqrt(((_1202 * _1202) + (_1201 * _1201)) + (_1203 * _1203)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1228 = _1227 * 2.0;
        float _1232 = (1.0 - _1227) / (_1227 + 1.0);
        float _4259 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1242 = ((((1.0 - _1233) * (_1228 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1228 + 1.0))) + _1233) * _1155;
        float _1243 = _1123 * 0.5;
        float _1244 = _1133 * 0.5;
        float _1245 = _1143 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_730, _731, _732), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4292 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1270 + 1.0))) + _1275) * _1156;
        _1292 = _1123;
        _1294 = _1122;
        _1295 = _1121;
        _1296 = _1133;
        _1297 = _1132;
        _1298 = _1131;
        _1299 = _1143;
        _1300 = _1142;
        _1301 = _1141;
        _1302 = _1156;
        _1303 = _1155;
        _1304 = _1154;
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
    }
    else
    {
        _1292 = _1293;
        _1294 = _1293;
        _1295 = _1293;
        _1296 = _1293;
        _1297 = _1293;
        _1298 = _1293;
        _1299 = _1293;
        _1300 = _1293;
        _1301 = _1293;
        _1302 = _1293;
        _1303 = _1293;
        _1304 = _1293;
        _1305 = 0.0;
        _1306 = 0.0;
        _1307 = 0.0;
    }
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1336 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1340 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1344 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1367 = _954 + _730;
        float _1368 = _958 + _731;
        float _1369 = _962 + _732;
        float _1379 = fma(_1369, cbModelParam._m0[30u].z, fma(_1368, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1367)) - _1336;
        float _1380 = fma(_1369, cbModelParam._m0[31u].z, fma(_1368, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1367)) - _1340;
        float _1381 = fma(_1369, cbModelParam._m0[32u].z, fma(_1368, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1367)) - _1344;
        float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
        float _1398 = ((_1385 * _1379) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1336 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1385 * _1380) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1340 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1385 * _1381) / cbModelParam._m0[35u].z) + ((((((_1344 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1398, _1399, _1400), 0.0);
        float _1435 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1402.x + (-0.5));
        float _1437 = _1435 * (_1402.y + (-0.5));
        float _1438 = _1435 * (_1402.z + (-0.5));
        float _1445 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1409.x + (-0.5));
        float _1447 = _1445 * (_1409.y + (-0.5));
        float _1448 = _1445 * (_1409.z + (-0.5));
        float _1455 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1416.x + (-0.5));
        float _1457 = _1455 * (_1416.y + (-0.5));
        float _1458 = _1455 * (_1416.z + (-0.5));
        float _1465 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1423.x + (-0.5));
        float _1467 = _1465 * (_1423.y + (-0.5));
        float _1468 = _1465 * (_1423.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_730, _731, _732), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4355 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1499 + 1.0))) + _1504) * _1469;
        float _1514 = _1437 * 0.5;
        float _1515 = _1447 * 0.5;
        float _1516 = _1457 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_730, _731, _732), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4388 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1541 + 1.0))) + _1546) * _1470;
        float _1556 = _1438 * 0.5;
        float _1557 = _1448 * 0.5;
        float _1558 = _1458 * 0.5;
        float _1559 = dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558));
        float _1564 = (_1559 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1559);
        float _1572 = (dot(vec3(_730, _731, _732), vec3(_1564 * _1556, _1564 * _1557, _1564 * _1558)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1581 = sqrt(((_1557 * _1557) + (_1556 * _1556)) + (_1558 * _1558)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1583 = _1582 * 2.0;
        float _1587 = (1.0 - _1582) / (_1582 + 1.0);
        float _4421 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1597 = ((((1.0 - _1588) * (_1583 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1583 + 1.0))) + _1588) * _1471;
        _1605 = _1438;
        _1606 = _1437;
        _1607 = _1436;
        _1608 = _1448;
        _1609 = _1447;
        _1610 = _1446;
        _1611 = _1458;
        _1612 = _1457;
        _1613 = _1456;
        _1614 = _1471;
        _1615 = _1470;
        _1616 = _1469;
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)));
    }
    else
    {
        _1605 = _1293;
        _1606 = _1293;
        _1607 = _1293;
        _1608 = _1293;
        _1609 = _1293;
        _1610 = _1293;
        _1611 = _1293;
        _1612 = _1293;
        _1613 = _1293;
        _1614 = _1293;
        _1615 = _1293;
        _1616 = _1293;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1652 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1630, cbSceneParam._m0[89u].y, _1629 * cbSceneParam._m0[89u].x));
    float _1655 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1630, cbSceneParam._m0[90u].y, _1629 * cbSceneParam._m0[90u].x));
    float _1658 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1630, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1629));
    float _1673 = _902 * 0.5;
    float _1674 = _903 * 0.5;
    float _1675 = _904 * 0.5;
    float _1676 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1679 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1682 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1716;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1689 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1292, _1296, _1299, _1302));
        float _1693 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1697 = dot(vec4(_1673, _1674, _1675, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1704 = dot(vec4(cbModelParam._m0[39u]), vec4(_1673, _1674, _1675, 1.0));
        _1716 = dot(vec3(isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1704) ? 0.0 : (isnan(0.0) ? _1704 : max(0.0, _1704))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1716 = 1.0;
    }
    float _1727;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1718 = dot(vec4(cbModelParam._m0[40u]), vec4(_1673, _1674, _1675, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1731 = (_1727 * cbModelParam._m0[1u].x) + (_1716 * (1.0 - cbModelParam._m0[1u].x));
    float _1741 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _733);
    float _1742 = isnan(_1741) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1741 : min(cbModelParam._m0[25u].z, _1741));
    float _1822;
    float _1824;
    float _1826;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1789 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1793 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1797 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1800 = fma(_904, cbModelParam._m0[13u].z, fma(_903, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _902));
        float _1803 = fma(_904, cbModelParam._m0[14u].z, fma(_903, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _902));
        float _1806 = fma(_904, cbModelParam._m0[15u].z, fma(_903, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _902));
        float _1834;
        if (_1800 > 0.0)
        {
            _1834 = abs((1.0 - _1789) / _1800);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1789 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1834 = frontier_phi_17_15_ladder;
        }
        float _2003;
        if (_1803 > 0.0)
        {
            _2003 = abs((1.0 - _1793) / _1803);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1793 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2003 = frontier_phi_26_22_ladder;
        }
        float _2299;
        if (_1806 > 0.0)
        {
            _2299 = abs((1.0 - _1797) / _1806);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1806 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1797 + 1.0) / _1806);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2299 = frontier_phi_38_33_ladder;
        }
        float _2301 = isnan(_2003) ? _1834 : (isnan(_1834) ? _2003 : min(_1834, _2003));
        float _2302 = isnan(_2299) ? _2301 : (isnan(_2301) ? _2299 : min(_2301, _2299));
        float _2306 = (_2302 * _1800) + _1789;
        float _2307 = (_2302 * _1803) + _1793;
        float _2308 = (_2302 * _1806) + _1797;
        float _2309 = _2302 * 9.9999997473787516355514526367188e-05;
        float _2311 = (-1.0) - _2309;
        float _2313 = _2309 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2308 > _2313) || ((_2308 < _2311) || ((_2307 > _2313) || ((_2307 < _2311) || ((_2306 < _2311) || (_2306 > _2313))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2308, cbModelParam._m0[9u].z, fma(_2307, cbModelParam._m0[9u].y, _2306 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2308, cbModelParam._m0[10u].z, fma(_2307, cbModelParam._m0[10u].y, _2306 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2308, cbModelParam._m0[11u].z, fma(_2307, cbModelParam._m0[11u].y, _2306 * cbModelParam._m0[11u].x))), _1742);
            frontier_phi_16_38_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1822 = frontier_phi_16_38_ladder_2;
        _1824 = frontier_phi_16_38_ladder_1;
        _1826 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1810 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_902, _903, _904), _1742);
        _1822 = _1810.x * cbModelParam._m0[1u].y;
        _1824 = _1810.y * cbModelParam._m0[1u].y;
        _1826 = _1810.z * cbModelParam._m0[1u].y;
    }
    float _1830 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _733);
    float _1831 = isnan(_1830) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1830 : min(cbModelParam._m0[25u].w, _1830));
    float _1920;
    float _1922;
    float _1924;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1884 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1888 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1892 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1895 = fma(_904, cbModelParam._m0[21u].z, fma(_903, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _902));
        float _1898 = fma(_904, cbModelParam._m0[22u].z, fma(_903, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _902));
        float _1901 = fma(_904, cbModelParam._m0[23u].z, fma(_903, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _902));
        float _2008;
        if (_1895 > 0.0)
        {
            _2008 = abs((1.0 - _1884) / _1895);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1884 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2008 = frontier_phi_28_24_ladder;
        }
        float _2326;
        if (_1898 > 0.0)
        {
            _2326 = abs((1.0 - _1888) / _1898);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1888 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2326 = frontier_phi_40_35_ladder;
        }
        float _2653;
        if (_1901 > 0.0)
        {
            _2653 = abs((1.0 - _1892) / _1901);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1892 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2653 = frontier_phi_50_47_ladder;
        }
        float _2655 = isnan(_2326) ? _2008 : (isnan(_2008) ? _2326 : min(_2008, _2326));
        float _2656 = isnan(_2653) ? _2655 : (isnan(_2655) ? _2653 : min(_2655, _2653));
        float _2660 = (_2656 * _1895) + _1884;
        float _2661 = (_2656 * _1898) + _1888;
        float _2662 = (_2656 * _1901) + _1892;
        float _2663 = _2656 * 9.9999997473787516355514526367188e-05;
        float _2664 = (-1.0) - _2663;
        float _2666 = _2663 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2662 > _2666) || ((_2662 < _2664) || ((_2661 > _2666) || ((_2661 < _2664) || ((_2660 < _2664) || (_2660 > _2666))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2780 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2662, cbModelParam._m0[17u].z, fma(_2661, cbModelParam._m0[17u].y, _2660 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2662, cbModelParam._m0[18u].z, fma(_2661, cbModelParam._m0[18u].y, _2660 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2662, cbModelParam._m0[19u].z, fma(_2661, cbModelParam._m0[19u].y, _2660 * cbModelParam._m0[19u].x))), _1831);
            frontier_phi_25_50_ladder = _2780.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2780.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2780.x * cbModelParam._m0[1u].z;
        }
        _1920 = frontier_phi_25_50_ladder_2;
        _1922 = frontier_phi_25_50_ladder_1;
        _1924 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_902, _903, _904), _1831);
        _1920 = _1904.x * cbModelParam._m0[1u].z;
        _1922 = _1904.y * cbModelParam._m0[1u].z;
        _1924 = _1904.z * cbModelParam._m0[1u].z;
    }
    float _1936 = ((((1.0 - _922) * ((_910 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_922 * _910)) * _894;
    float _1937 = _1936 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1938 = _1936 * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1939 = _1936 * ((cbModelParam._m0[1u].w * (_1924 - _1826)) + _1826);
    float _1942 = fma(_1939, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1937 * cbSceneParam._m0[89u].x));
    float _1945 = fma(_1939, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1937 * cbSceneParam._m0[90u].x));
    float _1948 = fma(_1939, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1937 * cbSceneParam._m0[91u].x));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1994 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1995 = _1982 / _1994;
    float _1996 = _1986 / _1994;
    float _1997 = _1990 / _1994;
    float _2144;
    float _2145;
    float _2146;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2024 = ((uint(_1997 > cbSceneParam._m0[59u].y) + uint(_1997 > cbSceneParam._m0[59u].x)) + uint(_1997 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2025 = _2024 + 43u;
        uint _2033 = _2024 + 44u;
        uint _2041 = _2024 + 45u;
        uint _2049 = _2024 + 46u;
        float _2060 = fma(_1994, cbSceneParam._m0[_2025].w, fma(_1990, cbSceneParam._m0[_2025].z, fma(_1986, cbSceneParam._m0[_2025].y, _1982 * cbSceneParam._m0[_2025].x)));
        float _2064 = fma(_1994, cbSceneParam._m0[_2033].w, fma(_1990, cbSceneParam._m0[_2033].z, fma(_1986, cbSceneParam._m0[_2033].y, _1982 * cbSceneParam._m0[_2033].x)));
        float _2072 = fma(_1994, cbSceneParam._m0[_2049].w, fma(_1990, cbSceneParam._m0[_2049].z, fma(_1986, cbSceneParam._m0[_2049].y, _1982 * cbSceneParam._m0[_2049].x)));
        float _2077 = cbSceneParam._m0[33u].z * _2072;
        float _2079 = cbSceneParam._m0[33u].w * _2072;
        float _2082 = fma(_1994, cbSceneParam._m0[_2041].w, fma(_1990, cbSceneParam._m0[_2041].z, fma(_1986, cbSceneParam._m0[_2041].y, _1982 * cbSceneParam._m0[_2041].x))) / _2072;
        float _2130 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
        float _4547 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2137 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2077 + _2060) / _2072, (_2079 + _2064) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2079 + _2060) / _2072, (_2064 - _2077) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2077) / _2072, (_2064 - _2079) / _2072), _2082), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2060 - _2079) / _2072, (_2077 + _2064) / _2072), _2082), 0.0)).x), vec4(0.25)));
        _2144 = 1.0 - (_2137 * cbSceneParam._m0[34u].x);
        _2145 = 1.0 - (_2137 * cbSceneParam._m0[34u].y);
        _2146 = 1.0 - (_2137 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2144 = 1.0;
        _2145 = 1.0;
        _2146 = 1.0;
    }
    float _2210;
    float _2212;
    float _2214;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2198 = fma(_1994, cbSceneParam._m0[63u].w, fma(_1990, cbSceneParam._m0[63u].z, fma(_1986, cbSceneParam._m0[63u].y, _1982 * cbSceneParam._m0[63u].x)));
        float _2199 = fma(_1994, cbSceneParam._m0[60u].w, fma(_1990, cbSceneParam._m0[60u].z, fma(_1986, cbSceneParam._m0[60u].y, _1982 * cbSceneParam._m0[60u].x))) / _2198;
        float _2200 = fma(_1994, cbSceneParam._m0[61u].w, fma(_1990, cbSceneParam._m0[61u].z, fma(_1986, cbSceneParam._m0[61u].y, _1982 * cbSceneParam._m0[61u].x))) / _2198;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2199 >= cbSceneParam._m0[64u].x) && (_2200 >= cbSceneParam._m0[64u].y)) && (_2199 <= cbSceneParam._m0[64u].z)) && (_2200 <= cbSceneParam._m0[64u].w))
        {
            float _2339 = fma(_1994, cbSceneParam._m0[62u].w, fma(_1990, cbSceneParam._m0[62u].z, fma(_1986, cbSceneParam._m0[62u].y, _1982 * cbSceneParam._m0[62u].x))) / _2198;
            float _2343 = isnan(cbSceneParam._m0[41u].w) ? _2339 : (isnan(_2339) ? cbSceneParam._m0[41u].w : max(_2339, cbSceneParam._m0[41u].w));
            float _2386 = (cbSceneParam._m0[33u].x - sqrt(((_1996 * _1996) + (_1995 * _1995)) + (_1997 * _1997))) * cbSceneParam._m0[33u].y;
            float _4563 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
            float _2393 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2199, cbSceneParam._m0[33u].w + _2200), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2199, _2200 - cbSceneParam._m0[33u].z), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].z, _2200 - cbSceneParam._m0[33u].w), _2343), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2199 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2200), _2343), 0.0)).x), vec4(0.25)));
            float _2397 = 1.0 - (_2393 * cbSceneParam._m0[34u].x);
            float _2398 = 1.0 - (_2393 * cbSceneParam._m0[34u].y);
            float _2399 = 1.0 - (_2393 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2399) ? _2146 : (isnan(_2146) ? _2399 : min(_2146, _2399));
            frontier_phi_37_36_ladder_1 = isnan(_2398) ? _2145 : (isnan(_2145) ? _2398 : min(_2145, _2398));
            frontier_phi_37_36_ladder_2 = isnan(_2397) ? _2144 : (isnan(_2144) ? _2397 : min(_2144, _2397));
        }
        else
        {
            frontier_phi_37_36_ladder = _2146;
            frontier_phi_37_36_ladder_1 = _2145;
            frontier_phi_37_36_ladder_2 = _2144;
        }
        _2210 = frontier_phi_37_36_ladder_2;
        _2212 = frontier_phi_37_36_ladder_1;
        _2214 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2210 = _2144;
        _2212 = _2145;
        _2214 = _2146;
    }
    uvec4 _2219 = floatBitsToUint(cbInstanceData._m0[_869 + 5u]);
    uint _2221 = _2219.x * 14u;
    uint _2222 = _2221 + 13u;
    float _2229 = _894 + (-1.0);
    float _2234 = (cbLight._m0[_2222].x * _2229) + 1.0;
    float _2235 = (cbLight._m0[_2222].y * _2229) + 1.0;
    float _2236 = (cbLight._m0[_2222].z * _2229) + 1.0;
    float _2237 = (cbLight._m0[_2222].w * _2229) + 1.0;
    uint _2238 = _2221 + 5u;
    float _2244 = isnan(1.0) ? _2235 : (isnan(_2235) ? 1.0 : min(_2235, 1.0));
    uint _2248 = _2221 + 4u;
    float _2258 = isnan(1.0) ? _2234 : (isnan(_2234) ? 1.0 : min(_2234, 1.0));
    uint _2262 = _2221 | 1u;
    float _2273 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_730, _731, _732));
    float _2276 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_730, _731, _732));
    float _4599 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _4610 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2281 = (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * 0.3183098733425140380859375;
    float _2283 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * 0.3183098733425140380859375;
    float _2290 = ((cbLight._m0[_2238].x * _2244) * _2283) + (((cbLight._m0[_2248].x * _2210) * _2258) * _2281);
    float _2291 = ((_2244 * cbLight._m0[_2238].y) * _2283) + (((cbLight._m0[_2248].y * _2212) * _2258) * _2281);
    float _2292 = ((_2244 * cbLight._m0[_2238].z) * _2283) + (((cbLight._m0[_2248].z * _2214) * _2258) * _2281);
    uvec4 _2296 = floatBitsToUint(cbLight._m0[_2221 + 12u]);
    bool _2298 = _2296.x == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2298)
    {
        _2400 = _2290;
        _2402 = _2291;
        _2404 = _2292;
    }
    else
    {
        uint _2408 = _2221 + 6u;
        float _2424 = (dot(vec3(cbLight._m0[_2221 + 2u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2425 = _2424 * _2424;
        float _4621 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2426 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2427 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2400 = (((cbLight._m0[_2408].x * 0.3183098733425140380859375) * _2426) * _2427) + _2290;
        _2402 = (((cbLight._m0[_2408].y * 0.3183098733425140380859375) * _2426) * _2427) + _2291;
        _2404 = (((cbLight._m0[_2408].z * 0.3183098733425140380859375) * _2426) * _2427) + _2292;
    }
    bool _2407 = _2296.y == 0u;
    float _2462;
    float _2464;
    float _2466;
    if (_2407)
    {
        _2462 = _2400;
        _2464 = _2402;
        _2466 = _2404;
    }
    else
    {
        uint _2624 = _2221 + 7u;
        float _2640 = (dot(vec3(cbLight._m0[_2221 + 3u].xyz), vec3(_730, _731, _732)) * 0.5) + 0.5;
        float _2641 = _2640 * _2640;
        float _4637 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2642 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2643 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2462 = (((cbLight._m0[_2624].x * 0.3183098733425140380859375) * _2642) * _2643) + _2400;
        _2464 = (((cbLight._m0[_2624].y * 0.3183098733425140380859375) * _2642) * _2643) + _2402;
        _2466 = (((cbLight._m0[_2624].z * 0.3183098733425140380859375) * _2642) * _2643) + _2404;
    }
    uint _2469 = _2221 + 8u;
    float _2482 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2221].w)) * _733) * 0.949999988079071044921875);
    float _2483 = _2482 * _2482;
    float _2484 = cbLight._m0[_2221].x + _810;
    float _2485 = cbLight._m0[_2221].y + _811;
    float _2486 = cbLight._m0[_2221].z + _812;
    float _2490 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
    float _2491 = _2490 * _2484;
    float _2492 = _2490 * _2485;
    float _2493 = _2490 * _2486;
    float _2494 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2221].xyz));
    float _4653 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _4664 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2498 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
    float _2499 = dot(vec3(_730, _731, _732), vec3(_2491, _2492, _2493));
    float _4675 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
    float _2503 = dot(vec3(cbLight._m0[_2221].xyz), vec3(_2491, _2492, _2493));
    float _4686 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2507 = _2483 * _2483;
    float _2511 = ((_2502 * _2502) * (_2507 + (-1.0))) + 1.0;
    float _2522 = (exp2(log2(1.0 - (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2523 = 1.0 - _2483;
    float _2534 = (0.5 / (((_2498 * ((_2497 * _2523) + _2483)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2523) + _2483) * _2497))) * _2497;
    float _4697 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * (_2507 / ((_2511 * _2511) * 3.141590118408203125));
    uint _2550 = _2221 + 9u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _733) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2262].x + _810;
    float _2564 = cbLight._m0[_2262].y + _811;
    float _2565 = cbLight._m0[_2262].z + _812;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2262].xyz));
    float _4708 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2577 = dot(vec3(_730, _731, _732), vec3(_2570, _2571, _2572));
    float _4719 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _2581 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2570, _2571, _2572));
    float _4730 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2585 = _2562 * _2562;
    float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
    float _2598 = (exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2599 = 1.0 - _2562;
    float _2609 = (0.5 / (((_2498 * ((_2576 * _2599) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2599) + _2562) * _2576))) * _2576;
    float _4741 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2611 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
    float _2621 = (((_2598 * cbLight._m0[_2550].x) * _2611) * _2244) + ((((cbLight._m0[_2469].x * _2210) * _2522) * _2536) * _2258);
    float _2622 = (((_2598 * cbLight._m0[_2550].y) * _2611) * _2244) + ((((cbLight._m0[_2469].y * _2212) * _2522) * _2536) * _2258);
    float _2623 = (((_2598 * cbLight._m0[_2550].z) * _2611) * _2244) + ((((cbLight._m0[_2469].z * _2214) * _2522) * _2536) * _2258);
    float _2679;
    float _2681;
    float _2683;
    if (_2298)
    {
        _2679 = _2621;
        _2681 = _2622;
        _2683 = _2623;
    }
    else
    {
        uint _2685 = _2221 + 2u;
        uint _2689 = _2221 + 10u;
        float _2703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2685].w)) * _733) * 0.949999988079071044921875);
        float _2704 = _2703 * _2703;
        float _2705 = cbLight._m0[_2685].x + _810;
        float _2706 = cbLight._m0[_2685].y + _811;
        float _2707 = cbLight._m0[_2685].z + _812;
        float _2711 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
        float _2712 = _2711 * _2705;
        float _2713 = _2711 * _2706;
        float _2714 = _2711 * _2707;
        float _2715 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2685].xyz));
        float _4752 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        float _2718 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
        float _2719 = dot(vec3(_730, _731, _732), vec3(_2712, _2713, _2714));
        float _4763 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
        float _2723 = dot(vec3(cbLight._m0[_2685].xyz), vec3(_2712, _2713, _2714));
        float _4774 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2727 = _2704 * _2704;
        float _2731 = ((_2722 * _2722) * (_2727 + (-1.0))) + 1.0;
        float _2740 = (exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2741 = 1.0 - _2704;
        float _2751 = (0.5 / (((_2498 * ((_2718 * _2741) + _2704)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2741) + _2704) * _2718))) * _2718;
        float _4785 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2753 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2727 / ((_2731 * _2731) * 3.141590118408203125));
        float _2754 = isnan(1.0) ? _2236 : (isnan(_2236) ? 1.0 : min(_2236, 1.0));
        _2679 = (((_2740 * cbLight._m0[_2689].x) * _2753) * _2754) + _2621;
        _2681 = (((_2740 * cbLight._m0[_2689].y) * _2753) * _2754) + _2622;
        _2683 = (((_2740 * cbLight._m0[_2689].z) * _2753) * _2754) + _2623;
    }
    float _2785;
    float _2787;
    float _2789;
    if (_2407)
    {
        _2785 = _2679;
        _2787 = _2681;
        _2789 = _2683;
    }
    else
    {
        uint _2796 = _2221 + 3u;
        uint _2800 = _2221 + 11u;
        float _2814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2796].w)) * _733) * 0.949999988079071044921875);
        float _2815 = _2814 * _2814;
        float _2816 = cbLight._m0[_2796].x + _810;
        float _2817 = cbLight._m0[_2796].y + _811;
        float _2818 = cbLight._m0[_2796].z + _812;
        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
        float _2823 = _2822 * _2816;
        float _2824 = _2822 * _2817;
        float _2825 = _2822 * _2818;
        float _2826 = dot(vec3(_730, _731, _732), vec3(cbLight._m0[_2796].xyz));
        float _4801 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
        float _2830 = dot(vec3(_730, _731, _732), vec3(_2823, _2824, _2825));
        float _4812 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2833 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2834 = dot(vec3(cbLight._m0[_2796].xyz), vec3(_2823, _2824, _2825));
        float _4823 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2838 = _2815 * _2815;
        float _2842 = ((_2833 * _2833) * (_2838 + (-1.0))) + 1.0;
        float _2851 = (exp2(log2(1.0 - (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2852 = 1.0 - _2815;
        float _2862 = (0.5 / (((_2498 * ((_2829 * _2852) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2498 * _2852) + _2815) * _2829))) * _2829;
        float _4834 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2864 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * (_2838 / ((_2842 * _2842) * 3.141590118408203125));
        float _2865 = isnan(1.0) ? _2237 : (isnan(_2237) ? 1.0 : min(_2237, 1.0));
        _2785 = (((_2851 * cbLight._m0[_2800].x) * _2864) * _2865) + _2679;
        _2787 = (((_2851 * cbLight._m0[_2800].y) * _2864) * _2865) + _2681;
        _2789 = (((_2851 * cbLight._m0[_2800].z) * _2864) * _2865) + _2683;
    }
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    float _2941;
    if (_2219.y == 0u)
    {
        uvec4 _2886 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2887 = _2886.x;
        uint _2898 = uint((float(_2886.y) * floor(float(uint(cbSceneParam._m0[85u].y * _831) / _2887))) + floor(float(uint(cbSceneParam._m0[85u].x * _830) / _2887)));
        float _2908 = (log2(_1997 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2909 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        uint _2912 = uint(isnan(14.0) ? _2909 : (isnan(_2909) ? 14.0 : min(_2909, 14.0)));
        uvec4 _2917 = texelFetch(g_lightClusterGridBuffer, int(((_2912 << 2u) + (_2898 << 6u)) >> 2u));
        uint _2918 = _2917.x;
        uint _2919 = _2886.z;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((((1u << ((_2919 >> 4u) & 15u)) + 4294967295u) & _2918) == 0u) || ((_2919 & 240u) == 0u))
        {
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
        }
        else
        {
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            float _3209 = 0.0;
            uint _3210 = 0u;
            uint _3219;
            bool _3220;
            for (;;)
            {
                _3219 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3210 << 2u)) >> 2u)).x;
                _3220 = _3219 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3220)
                {
                    frontier_phi_71_pred = _3209;
                    frontier_phi_71_pred_1 = _3208;
                    frontier_phi_71_pred_2 = _3207;
                    frontier_phi_71_pred_3 = _3206;
                    frontier_phi_71_pred_4 = _3205;
                    frontier_phi_71_pred_5 = _3204;
                }
                else
                {
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    uint _3355;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3209;
                    _3355 = _3219;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    for (;;)
                    {
                        uint _3359 = uint(findLSB(_3355)) + (_3210 << 5u);
                        uint _3356 = (_3355 + 4294967295u) & _3355;
                        uint _3361 = _3359 * 48u;
                        vec4 _3375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3381 = (_3359 * 48u) + 4u;
                        vec4 _3394 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3381)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3381 + 3u)).x));
                        uint _3400 = (_3359 * 48u) + 8u;
                        vec3 _3411 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x));
                        float _3415 = _3375.x - _1995;
                        float _3416 = _3375.y - _1996;
                        float _3417 = _3375.z - _1997;
                        float _3418 = dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417));
                        float _3421 = inversesqrt(_3418);
                        float _3422 = _3421 * _3415;
                        float _3423 = _3421 * _3416;
                        float _3424 = _3421 * _3417;
                        float _3425 = dot(vec3(_850, _853, _856), vec3(_3422, _3423, _3424));
                        float _3430 = 1.0 - (_3418 * _3375.w);
                        float _4860 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3431 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                        float _3432 = sqrt(_3418) * _3394.w;
                        float _3435 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                        float _3436 = _3435 * _3435;
                        float _3439 = ((1.0 - _3436) * _3425) + _3436;
                        float _3442 = _3432 * _3432;
                        float _3446 = ((isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))) * _3431) / ((_3442 * 0.699999988079071044921875) + 1.0);
                        float _3450 = (-0.0) - _1995;
                        float _3451 = (-0.0) - _1996;
                        float _3452 = (-0.0) - _1997;
                        float _3456 = inversesqrt(dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452)));
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3466 = exp2(log2(1.0 / ((_3442 * 3.5) + 5.0)) * 0.25);
                        float _3467 = 1.0 - _910;
                        float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                        float _3475 = _3474 * _3474;
                        float _3476 = _3475 * _3475;
                        float _3477 = _3457 + _3422;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3487 = dot(vec3(_850, _853, _856), vec3(_3457, _3458, _3459));
                        float _4876 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                        float _3491 = dot(vec3(_850, _853, _856), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                        float _4887 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                        float _3499 = _3435 * _3475;
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3425) + _3500;
                        float _4898 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
                        float _3505 = 1.0 - _3475;
                        float _3515 = (0.5 / (((_3504 * ((_3490 * _3505) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3504 * _3505) + _3475) * _3490))) * _3504;
                        float _4909 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3526 = (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0)))) / ((_3498 * _3498) * ((_3442 * 2.1991131305694580078125) + 3.141590118408203125))) * _3431;
                        _3279 = (_3446 * _3394.x) + _3352;
                        _3280 = (_3446 * _3394.y) + _3353;
                        _3281 = (_3446 * _3394.z) + _3354;
                        _3276 = (_3526 * _3411.x) + _3349;
                        _3277 = (_3526 * _3411.y) + _3350;
                        _3278 = (_3526 * _3411.z) + _3351;
                        if (_3356 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3281;
                            _3355 = _3356;
                        }
                    }
                    frontier_phi_71_pred = _3281;
                    frontier_phi_71_pred_1 = _3280;
                    frontier_phi_71_pred_2 = _3279;
                    frontier_phi_71_pred_3 = _3278;
                    frontier_phi_71_pred_4 = _3277;
                    frontier_phi_71_pred_5 = _3276;
                }
                _3054 = frontier_phi_71_pred;
                _3052 = frontier_phi_71_pred_1;
                _3050 = frontier_phi_71_pred_2;
                _3048 = frontier_phi_71_pred_3;
                _3046 = frontier_phi_71_pred_4;
                _3044 = frontier_phi_71_pred_5;
                uint _3211 = _3210 + 1u;
                if (_3211 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3204 = _3044;
                    _3205 = _3046;
                    _3206 = _3048;
                    _3207 = _3050;
                    _3208 = _3052;
                    _3209 = _3054;
                    _3210 = _3211;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
        }
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.z;
        uint _3060 = (_3058 >> 8u) & 15u;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        if (((4294967295u << _3060) & _2918) == 0u)
        {
            _3172 = _3043;
            _3174 = _3045;
            _3176 = _3047;
            _3178 = _3049;
            _3180 = _3051;
            _3182 = _3053;
        }
        else
        {
            float _3197 = inversesqrt(dot(vec3(_1995, _1996, _1997), vec3(_1995, _1996, _1997)));
            float _3198 = _3197 * _1995;
            float _3199 = _3197 * _1996;
            float _3200 = _3197 * _1997;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3060 < ((_3058 >> 12u) & 15u))
            {
                float _3173;
                float _3175;
                float _3177;
                float _3179;
                float _3181;
                float _3183;
                float _3332 = _3043;
                float _3333 = _3045;
                float _3334 = _3047;
                float _3335 = _3049;
                float _3336 = _3051;
                float _3337 = _3053;
                uint _3338 = _3060;
                uint _3347;
                bool _3348;
                for (;;)
                {
                    _3347 = texelFetch(g_lightClassification, int((((_2912 << 5u) + (_2898 << 9u)) + (_3338 << 2u)) >> 2u)).x;
                    _3348 = _3347 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3348)
                    {
                        frontier_phi_82_pred = _3337;
                        frontier_phi_82_pred_1 = _3336;
                        frontier_phi_82_pred_2 = _3335;
                        frontier_phi_82_pred_3 = _3334;
                        frontier_phi_82_pred_4 = _3333;
                        frontier_phi_82_pred_5 = _3332;
                    }
                    else
                    {
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3553 = _3332;
                        float _3554 = _3333;
                        float _3555 = _3334;
                        float _3556 = _3335;
                        float _3557 = _3336;
                        float _3558 = _3337;
                        uint _3559 = _3347;
                        uint _3560;
                        vec4 _3585;
                        float _3586;
                        vec4 _3601;
                        vec3 _3613;
                        vec4 _3628;
                        vec4 _3643;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3570 = ((_3338 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3559));
                            _3560 = (_3559 + 4294967295u) & _3559;
                            uint _3572 = _3570 * 40u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3586 = _3585.w;
                            uint _3588 = (_3570 * 40u) + 4u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3570 * 40u) + 8u;
                            _3613 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x));
                            uint _3615 = (_3570 * 40u) + 16u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3570 * 40u) + 20u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            uint _3646 = (_3570 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3570 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_1997, _3678.z, fma(_1996, _3678.y, _3678.x * _1995)) + _3678.w;
                            _3691 = !((fma(_1997, _3659.z, fma(_1996, _3659.y, _3659.x * _1995)) + _3659.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3585.x - _1995;
                                float _3719 = _3585.y - _1996;
                                float _3720 = _3585.z - _1997;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3586 * _3586));
                                float _4920 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                                float _3736 = sqrt(_3721) * _3601.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_850, _853, _856))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_1997, _3628.z, fma(_1996, _3628.y, _3628.x * _1995)) + _3628.w) / _3690;
                                float _3750 = (fma(_1997, _3643.z, fma(_1996, _3643.y, _3643.x * _1995)) + _3643.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4936 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _910;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3198;
                                float _3780 = _3726 - _3199;
                                float _3781 = _3727 - _3200;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_850, _853, _856), vec3((-0.0) - _3198, (-0.0) - _3199, (-0.0) - _3200));
                                float _4947 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3793 = dot(vec3(_850, _853, _856), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4958 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_850, _853, _856), vec3(_3725, _3726, _3727))) + _3802;
                                float _4969 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4980 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3756 * _3601.z;
                                frontier_phi_88_pred_1 = _3756 * _3601.y;
                                frontier_phi_88_pred_2 = _3756 * _3601.x;
                                frontier_phi_88_pred_3 = _3830 * _3613.z;
                                frontier_phi_88_pred_4 = _3830 * _3613.y;
                                frontier_phi_88_pred_5 = _3830 * _3613.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3839 = frontier_phi_88_pred;
                            _3838 = frontier_phi_88_pred_1;
                            _3837 = frontier_phi_88_pred_2;
                            _3836 = frontier_phi_88_pred_3;
                            _3835 = frontier_phi_88_pred_4;
                            _3834 = frontier_phi_88_pred_5;
                            _3543 = _3837 + _3556;
                            _3544 = _3838 + _3557;
                            _3545 = _3839 + _3558;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            _3542 = _3836 + _3555;
                            if (_3560 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3560;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3545;
                        frontier_phi_82_pred_1 = _3544;
                        frontier_phi_82_pred_2 = _3543;
                        frontier_phi_82_pred_3 = _3542;
                        frontier_phi_82_pred_4 = _3541;
                        frontier_phi_82_pred_5 = _3540;
                    }
                    _3183 = frontier_phi_82_pred;
                    _3181 = frontier_phi_82_pred_1;
                    _3179 = frontier_phi_82_pred_2;
                    _3177 = frontier_phi_82_pred_3;
                    _3175 = frontier_phi_82_pred_4;
                    _3173 = frontier_phi_82_pred_5;
                    uint _3339 = _3338 + 1u;
                    if (_3339 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3332 = _3173;
                        _3333 = _3175;
                        _3334 = _3177;
                        _3335 = _3179;
                        _3336 = _3181;
                        _3337 = _3183;
                        _3338 = _3339;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3179;
                frontier_phi_63_64_ladder_1 = _3183;
                frontier_phi_63_64_ladder_2 = _3181;
                frontier_phi_63_64_ladder_3 = _3177;
                frontier_phi_63_64_ladder_4 = _3175;
                frontier_phi_63_64_ladder_5 = _3173;
            }
            else
            {
                frontier_phi_63_64_ladder = _3049;
                frontier_phi_63_64_ladder_1 = _3053;
                frontier_phi_63_64_ladder_2 = _3051;
                frontier_phi_63_64_ladder_3 = _3047;
                frontier_phi_63_64_ladder_4 = _3045;
                frontier_phi_63_64_ladder_5 = _3043;
            }
            _3172 = frontier_phi_63_64_ladder_5;
            _3174 = frontier_phi_63_64_ladder_4;
            _3176 = frontier_phi_63_64_ladder_3;
            _3178 = frontier_phi_63_64_ladder;
            _3180 = frontier_phi_63_64_ladder_2;
            _3182 = frontier_phi_63_64_ladder_1;
        }
        float _3187 = isnan(1.0) ? _894 : (isnan(_894) ? 1.0 : min(_894, 1.0));
        _2931 = (_3187 * _3178) + _2462;
        _2933 = (_3187 * _3180) + _2464;
        _2935 = (_3187 * _3182) + _2466;
        _2937 = ((_3172 * 0.039999999105930328369140625) * _3187) + _2785;
        _2939 = ((_3174 * 0.039999999105930328369140625) * _3187) + _2787;
        _2941 = ((_3176 * 0.039999999105930328369140625) * _3187) + _2789;
    }
    else
    {
        _2931 = _2462;
        _2933 = _2464;
        _2935 = _2466;
        _2937 = _2785;
        _2939 = _2787;
        _2941 = _2789;
    }
    uint _2947 = _870 + uint(cbMatDynParam._m0[0u].w);
    float _2953 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2959 = (((((_2953 * cbMtdParam._m0[14u].x) * _590.x) * _613) * _692) * (((1.0 - _666) * cbMtdParam._m0[20u].w) + _666)) * cbInstanceData._m0[_2947].x;
    float _2965 = (((((_2953 * cbMtdParam._m0[14u].y) * _590.y) * _613) * _692) * (((1.0 - _668) * cbMtdParam._m0[20u].w) + _668)) * cbInstanceData._m0[_2947].y;
    float _2971 = (((((_2953 * cbMtdParam._m0[14u].z) * _590.z) * _613) * _692) * (((1.0 - _670) * cbMtdParam._m0[20u].w) + _670)) * cbInstanceData._m0[_2947].z;
    float _4996 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _5007 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _5018 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2988 = (((isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0))) * (_2931 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _894))) + ((_2937 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + _2959;
    float _2990 = (_2965 + ((_2939 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2933 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _894)));
    float _2992 = (_2971 + ((_2941 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1731)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0))) * (_2935 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _894)));
    float _2993 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
    float _2994 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
    float _2995 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
    float _3001 = cbMtdParam._m0[2u].x * _2959;
    float _3002 = cbMtdParam._m0[2u].y * _2965;
    float _3003 = cbMtdParam._m0[2u].z * _2971;
    float _5044 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3005 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
    uint _3006 = _869 + 6u;
    float _3014 = _830 / cbSceneParam._m0[86u].x;
    float _3015 = _831 / cbSceneParam._m0[86u].y;
    vec4 _3029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, (log2((isnan(cbSceneParam._m0[77u].w) ? _752 : (isnan(_752) ? cbSceneParam._m0[77u].w : min(_752, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3031 = _3029.x;
    float _3032 = _3029.y;
    float _3033 = _3029.z;
    float _3034 = _3029.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_752 > cbSceneParam._m0[78u].w)
    {
        float _3068 = isnan(_752) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _752 : min(cbSceneParam._m0[80u].w, _752));
        float _3069 = _3068 / _752;
        float _3080 = _3069 * _803;
        float _3081 = _804 * _3069;
        float _3082 = (-0.0) - _3081;
        float _3083 = _3069 * _805;
        float _3085 = (cbSceneParam._m0[77u].w * _3082) / _3068;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3081;
        float _3093 = sqrt(((_3080 * _3080) + (_3081 * _3081)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3068)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3289;
        if (abs((_3082 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3289 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3233 = 1.0 / cbSceneParam._m0[80u].x;
            float _3234 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3235 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            float _3245 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : min(_3235, 0.0));
            _3289 = ((abs(_3093 / _3082) * cbSceneParam._m0[80u].y) * ((((_3244 - _3245) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0))))) * _3233)) - ((exp2(_3103 * _3244) - exp2(_3103 * _3245)) * _3233))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3291 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, 1.0), 0.0);
        float _3300 = exp2((_3289 * (-1.44269502162933349609375)) * (1.0 - _3291.w));
        float _3301 = log2(_3300);
        float _3317 = log2(_3034);
        _3105 = (exp2(_3317 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].x)) * _3291.x) / cbSceneParam._m0[78u].x)) + _3031;
        _3107 = (exp2(_3317 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].y)) * _3291.y) / cbSceneParam._m0[78u].y)) + _3032;
        _3109 = (exp2(_3317 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3301 * cbSceneParam._m0[78u].z)) * _3291.z) / cbSceneParam._m0[78u].z)) + _3033;
        _3111 = _3300 * _3034;
    }
    else
    {
        _3105 = _3031;
        _3107 = _3032;
        _3109 = _3033;
        _3111 = _3034;
    }
    bool _3327;
    vec4 _3121;
    vec4 _3143;
    float _3145;
    float _3149;
    float _3150;
    float _3151;
    float _3154;
    float _3157;
    float _3160;
    float _3161;
    bool _3171;
    for (;;)
    {
        _3121 = cbMatDynParam._m0[0u];
        float _3123 = roundEven(_3121.y);
        bool _3124 = _3123 == 3.0;
        float _3125 = log2(_3111);
        float _3129 = exp2(_3125 * cbSceneParam._m0[78u].x);
        float _3130 = exp2(_3125 * cbSceneParam._m0[78u].y);
        float _3131 = exp2(_3125 * cbSceneParam._m0[78u].z);
        float _3132 = _3129 * _2993;
        float _3133 = _3130 * _2994;
        float _3134 = _3131 * _2995;
        float _3141 = _819 + (-0.5);
        _3143 = cbMtdParam._m0[1u];
        _3145 = _3143.y * _3141;
        float _3148 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3149 = _3148 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
        _3150 = _3148 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
        _3151 = _3148 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
        _3154 = ((_3001 * _3005) * _3129) * _3148;
        _3157 = ((_3002 * _3005) * _3130) * _3148;
        _3160 = ((_3003 * _3005) * _3131) * _3148;
        _3161 = _3141 * 0.999000012874603271484375;
        _3171 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3171)
        {
            if ((cbInstanceData._m0[_869 + 7u].x + _3161) < 0.5)
            {
                _3327 = true;
                break;
            }
        }
        uint _3268 = _870 + uint(_3121.w);
        if ((cbInstanceData._m0[_3268].w < 1.0) && ((cbInstanceData._m0[_3268].w + _3161) < 0.5))
        {
            _3327 = true;
            break;
        }
        if ((_3145 + 1.0) < _3143.x)
        {
            _3327 = true;
            break;
        }
        _3327 = false;
        break;
    }
    float _3531;
    if (_3327)
    {
        discard_state = true;
        _3531 = 0.0;
    }
    else
    {
        _3531 = cbInstanceData._m0[_3006].w;
    }
    SV_Target.x = _3149;
    SV_Target.y = _3150;
    SV_Target.z = _3151;
    SV_Target.w = _3531;
    SV_Target_1.x = _3154;
    SV_Target_1.y = _3157;
    SV_Target_1.z = _3160;
    SV_Target_1.w = cbInstanceData._m0[_3006].w;
    discard_exit();
}


