#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1291;
float _3729;
float _3730;
float _3731;
float _3732;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _306 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _343 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _306.x) * 2.0) - _333)) + 1.0;
    float _3741 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _351 = (_344 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _352 = (_344 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _353 = (_344 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _372 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _385 = (((((1.0 - _306.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3752 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _351) * _386) + _351;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _413 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _426 = (((((1.0 - _306.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3763 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _434 = (((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393;
    float _435 = (_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394;
    float _436 = (_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395;
    vec4 _449 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _463 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _465 = _463.x;
    float _466 = _463.y;
    float _467 = _463.z;
    vec4 _479 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _490 = ((_479.x - _465) * _344) + _465;
    float _491 = ((_479.y - _466) * _344) + _466;
    float _492 = ((_479.z - _467) * _344) + _467;
    vec4 _505 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _516 = ((_505.x - _490) * _386) + _490;
    float _517 = ((_505.y - _491) * _386) + _491;
    float _518 = ((_505.z - _492) * _386) + _492;
    vec4 _531 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _544 = ((_531.z - _518) * _427) + _518;
    float _547 = ((((_531.x - _516) * _427) + _516) * 2.0) + (-1.0);
    float _549 = ((((_531.y - _517) * _427) + _517) * 2.0) + (-1.0);
    float _550 = dot(vec2(_547, _549), vec2(_547, _549));
    float _3774 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _555 = sqrt(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))));
    vec4 _588 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _602 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3785 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _603 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _611 = (((_603 * _603) * (3.0 - (_603 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _619 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _627 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3796 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _632 = (_628 * _628) * (3.0 - (_628 * 2.0));
    float _633 = _632 * cbMtdParam._m0[22u].x;
    float _634 = _632 * cbMtdParam._m0[22u].y;
    float _635 = sin(_619);
    float _636 = cos(_619);
    float _637 = TEXCOORD.z - _633;
    float _638 = TEXCOORD.w - _634;
    vec4 _658 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_633 + fma(_638, (-0.0) - _635, _637 * _636))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_638, _636, _637 * _635) + _634)) + cbTextureTilingScale._m0[2u].w));
    float _664 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _658.x;
    float _666 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _658.y;
    float _668 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _658.z;
    float _689 = (TEXCOORD_5.x - (((_449.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3807 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _690 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    vec4 _703 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _713 = (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _547;
    float _714 = (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _549;
    float _717 = fma(_555, _231 * NORMAL.x, fma(_714, _238 * TANGENT.x, (_224 * _216) * _713));
    float _720 = fma(_555, _231 * NORMAL.y, fma(_714, _238 * TANGENT.y, (_224 * _217) * _713));
    float _723 = fma(_555, _231 * NORMAL.z, fma(_714, _238 * TANGENT.z, (_224 * _218) * _713));
    float _727 = inversesqrt(dot(vec3(_717, _720, _723), vec3(_717, _720, _723)));
    float _728 = _727 * _717;
    float _729 = _727 * _720;
    float _730 = _727 * _723;
    float _3818 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _731 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _3840 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _3851 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _750 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _801 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _791);
    float _802 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _791);
    float _803 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _791);
    float _807 = inversesqrt(dot(vec3(_801, _802, _803), vec3(_801, _802, _803)));
    float _808 = _801 * _807;
    float _809 = _802 * _807;
    float _810 = _803 * _807;
    vec4 _815 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _817 = _815.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _971 = sqrt(((_801 * _801) + (_802 * _802)) + (_803 * _803));
        float _977 = (cbMatDynParam._m0[5u].x * _971) + cbMatDynParam._m0[5u].y;
        float _3862 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _982 = (cbMatDynParam._m0[5u].z * _971) + cbMatDynParam._m0[5u].w;
        float _3873 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) - _978)) + _978) < ((_817 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _828 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _829 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _848 = fma(_730, cbSceneParam._m0[5u].z, fma(_729, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _728));
    float _851 = fma(_730, cbSceneParam._m0[6u].z, fma(_729, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _728));
    float _854 = fma(_730, cbSceneParam._m0[7u].z, fma(_729, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _728));
    uint _867 = uint(roundEven(NORMAL.w)) * 13u;
    uint _868 = _867 + 9u;
    uint _869 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_869].z;
    float _3884 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _828, cbSceneParam._m0[86u].y * _829));
    float _892 = _889.x * TEXCOORD_5.w;
    float _893 = dot(vec3(_728, _729, _730), vec3(_808, _809, _810));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _728) - _808;
    float _901 = (_896 * _729) - _809;
    float _902 = (_896 * _730) - _810;
    float _906 = abs(dot(vec3(_808, _809, _810), vec3(_728, _729, _730)));
    float _3917 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_731);
    float _920 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1290;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1015 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _1019 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _1023 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1048 = _952 + _728;
        float _1049 = _956 + _729;
        float _1050 = _960 + _730;
        float _1060 = fma(_1050, cbModelParam._m0[26u].z, fma(_1049, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1048)) - _1015;
        float _1061 = fma(_1050, cbModelParam._m0[27u].z, fma(_1049, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1048)) - _1019;
        float _1062 = fma(_1050, cbModelParam._m0[28u].z, fma(_1049, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1048)) - _1023;
        float _1066 = inversesqrt(dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062)));
        float _1079 = ((_1066 * _1060) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1015 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1066 * _1061) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1019 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1066 * _1062) / cbModelParam._m0[34u].z) + ((((((_1023 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1079, _1080, _1081), 0.0);
        float _1118 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1119 = _1118 * (_1084.x + (-0.5));
        float _1120 = _1118 * (_1084.y + (-0.5));
        float _1121 = _1118 * (_1084.z + (-0.5));
        float _1128 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1129 = _1128 * (_1091.x + (-0.5));
        float _1130 = _1128 * (_1091.y + (-0.5));
        float _1131 = _1128 * (_1091.z + (-0.5));
        float _1138 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1098.x + (-0.5));
        float _1140 = _1138 * (_1098.y + (-0.5));
        float _1141 = _1138 * (_1098.z + (-0.5));
        float _1148 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1105.x + (-0.5));
        float _1150 = _1148 * (_1105.y + (-0.5));
        float _1151 = _1148 * (_1105.z + (-0.5));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = _1119 * 0.5;
        float _1156 = _1129 * 0.5;
        float _1157 = _1139 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1172 = (dot(vec3(_728, _729, _730), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1182 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _3965 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1184 + 1.0))) + _1189) * _1152;
        float _1199 = _1120 * 0.5;
        float _1200 = _1130 * 0.5;
        float _1201 = _1140 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_728, _729, _730), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _3998 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1226 + 1.0))) + _1231) * _1153;
        float _1241 = _1121 * 0.5;
        float _1242 = _1131 * 0.5;
        float _1243 = _1141 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_728, _729, _730), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4031 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1268 + 1.0))) + _1273) * _1154;
        _1290 = _1121;
        _1292 = _1120;
        _1293 = _1119;
        _1294 = _1131;
        _1295 = _1130;
        _1296 = _1129;
        _1297 = _1141;
        _1298 = _1140;
        _1299 = _1139;
        _1300 = _1154;
        _1301 = _1153;
        _1302 = _1152;
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
    }
    else
    {
        _1290 = _1291;
        _1292 = _1291;
        _1293 = _1291;
        _1294 = _1291;
        _1295 = _1291;
        _1296 = _1291;
        _1297 = _1291;
        _1298 = _1291;
        _1299 = _1291;
        _1300 = _1291;
        _1301 = _1291;
        _1302 = _1291;
        _1303 = 0.0;
        _1304 = 0.0;
        _1305 = 0.0;
    }
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1334 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1338 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1342 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1365 = _952 + _728;
        float _1366 = _956 + _729;
        float _1367 = _960 + _730;
        float _1377 = fma(_1367, cbModelParam._m0[30u].z, fma(_1366, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365)) - _1334;
        float _1378 = fma(_1367, cbModelParam._m0[31u].z, fma(_1366, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365)) - _1338;
        float _1379 = fma(_1367, cbModelParam._m0[32u].z, fma(_1366, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365)) - _1342;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1334 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1338 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[35u].z) + ((((((_1342 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1400 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1433 = exp2((_1400.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1400.x + (-0.5));
        float _1435 = _1433 * (_1400.y + (-0.5));
        float _1436 = _1433 * (_1400.z + (-0.5));
        float _1443 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1407.x + (-0.5));
        float _1445 = _1443 * (_1407.y + (-0.5));
        float _1446 = _1443 * (_1407.z + (-0.5));
        float _1453 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1414.x + (-0.5));
        float _1455 = _1453 * (_1414.y + (-0.5));
        float _1456 = _1453 * (_1414.z + (-0.5));
        float _1463 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1421.x + (-0.5));
        float _1465 = _1463 * (_1421.y + (-0.5));
        float _1466 = _1463 * (_1421.z + (-0.5));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = _1434 * 0.5;
        float _1471 = _1444 * 0.5;
        float _1472 = _1454 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_728, _729, _730), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4094 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1497 + 1.0))) + _1502) * _1467;
        float _1512 = _1435 * 0.5;
        float _1513 = _1445 * 0.5;
        float _1514 = _1455 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_728, _729, _730), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4127 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1539 + 1.0))) + _1544) * _1468;
        float _1554 = _1436 * 0.5;
        float _1555 = _1446 * 0.5;
        float _1556 = _1456 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_728, _729, _730), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4160 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1581 + 1.0))) + _1586) * _1469;
        _1603 = _1436;
        _1604 = _1435;
        _1605 = _1434;
        _1606 = _1446;
        _1607 = _1445;
        _1608 = _1444;
        _1609 = _1456;
        _1610 = _1455;
        _1611 = _1454;
        _1612 = _1469;
        _1613 = _1468;
        _1614 = _1467;
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
    }
    else
    {
        _1603 = _1291;
        _1604 = _1291;
        _1605 = _1291;
        _1606 = _1291;
        _1607 = _1291;
        _1608 = _1291;
        _1609 = _1291;
        _1610 = _1291;
        _1611 = _1291;
        _1612 = _1291;
        _1613 = _1291;
        _1614 = _1291;
        _1615 = 0.0;
        _1616 = 0.0;
        _1617 = 0.0;
    }
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1650 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1628, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1628, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1628, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1627));
    float _1671 = _900 * 0.5;
    float _1672 = _901 * 0.5;
    float _1673 = _902 * 0.5;
    float _1674 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1677 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1680 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1714;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1687 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1290, _1294, _1297, _1300));
        float _1691 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1695 = dot(vec4(_1671, _1672, _1673, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1702 = dot(vec4(cbModelParam._m0[39u]), vec4(_1671, _1672, _1673, 1.0));
        _1714 = dot(vec3(isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1702) ? 0.0 : (isnan(0.0) ? _1702 : max(0.0, _1702))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1714 = 1.0;
    }
    float _1725;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1716 = dot(vec4(cbModelParam._m0[40u]), vec4(_1671, _1672, _1673, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)), isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1716) ? 0.0 : (isnan(0.0) ? _1716 : max(0.0, _1716))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1729 = (_1725 * cbModelParam._m0[1u].x) + (_1714 * (1.0 - cbModelParam._m0[1u].x));
    float _1739 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _731);
    float _1740 = isnan(_1739) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1739 : min(cbModelParam._m0[25u].z, _1739));
    float _1820;
    float _1822;
    float _1824;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1787 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1791 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1795 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1798 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1801 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1804 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1832;
        if (_1798 > 0.0)
        {
            _1832 = abs((1.0 - _1787) / _1798);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1787 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1832 = frontier_phi_17_15_ladder;
        }
        float _2054;
        if (_1801 > 0.0)
        {
            _2054 = abs((1.0 - _1791) / _1801);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1791 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2054 = frontier_phi_26_22_ladder;
        }
        float _2300;
        if (_1804 > 0.0)
        {
            _2300 = abs((1.0 - _1795) / _1804);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1795 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2300 = frontier_phi_38_33_ladder;
        }
        float _2302 = isnan(_2054) ? _1832 : (isnan(_1832) ? _2054 : min(_1832, _2054));
        float _2303 = isnan(_2300) ? _2302 : (isnan(_2302) ? _2300 : min(_2302, _2300));
        float _2307 = (_2303 * _1798) + _1787;
        float _2308 = (_2303 * _1801) + _1791;
        float _2309 = (_2303 * _1804) + _1795;
        float _2310 = _2303 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2310;
        float _2314 = _2310 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 > _2314) || ((_2308 < _2312) || ((_2307 < _2312) || (_2307 > _2314))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2309, cbModelParam._m0[9u].z, fma(_2308, cbModelParam._m0[9u].y, _2307 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2309, cbModelParam._m0[10u].z, fma(_2308, cbModelParam._m0[10u].y, _2307 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2309, cbModelParam._m0[11u].z, fma(_2308, cbModelParam._m0[11u].y, _2307 * cbModelParam._m0[11u].x))), _1740);
            frontier_phi_16_38_ladder = _2433.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2433.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2433.x * cbModelParam._m0[1u].y;
        }
        _1820 = frontier_phi_16_38_ladder_2;
        _1822 = frontier_phi_16_38_ladder_1;
        _1824 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1740);
        _1820 = _1808.x * cbModelParam._m0[1u].y;
        _1822 = _1808.y * cbModelParam._m0[1u].y;
        _1824 = _1808.z * cbModelParam._m0[1u].y;
    }
    float _1828 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _731);
    float _1829 = isnan(_1828) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1828 : min(cbModelParam._m0[25u].w, _1828));
    float _1918;
    float _1920;
    float _1922;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1882 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1886 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1890 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1893 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1896 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1899 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _2059;
        if (_1893 > 0.0)
        {
            _2059 = abs((1.0 - _1882) / _1893);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1882 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2059 = frontier_phi_28_24_ladder;
        }
        float _2327;
        if (_1896 > 0.0)
        {
            _2327 = abs((1.0 - _1886) / _1896);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1886 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2327 = frontier_phi_40_35_ladder;
        }
        float _2532;
        if (_1899 > 0.0)
        {
            _2532 = abs((1.0 - _1890) / _1899);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1890 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2532 = frontier_phi_49_46_ladder;
        }
        float _2534 = isnan(_2327) ? _2059 : (isnan(_2059) ? _2327 : min(_2059, _2327));
        float _2535 = isnan(_2532) ? _2534 : (isnan(_2534) ? _2532 : min(_2534, _2532));
        float _2539 = (_2535 * _1893) + _1882;
        float _2540 = (_2535 * _1896) + _1886;
        float _2541 = (_2535 * _1899) + _1890;
        float _2542 = _2535 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2542;
        float _2545 = _2542 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2541 > _2545) || ((_2541 < _2543) || ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 < _2543) || (_2539 > _2545))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2541, cbModelParam._m0[17u].z, fma(_2540, cbModelParam._m0[17u].y, _2539 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2541, cbModelParam._m0[18u].z, fma(_2540, cbModelParam._m0[18u].y, _2539 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2541, cbModelParam._m0[19u].z, fma(_2540, cbModelParam._m0[19u].y, _2539 * cbModelParam._m0[19u].x))), _1829);
            frontier_phi_25_49_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1918 = frontier_phi_25_49_ladder_2;
        _1920 = frontier_phi_25_49_ladder_1;
        _1922 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1902 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1829);
        _1918 = _1902.x * cbModelParam._m0[1u].z;
        _1920 = _1902.y * cbModelParam._m0[1u].z;
        _1922 = _1902.z * cbModelParam._m0[1u].z;
    }
    float _1934 = ((((1.0 - _920) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_920 * _908)) * _892;
    float _1935 = _1934 * ((cbModelParam._m0[1u].w * (_1918 - _1820)) + _1820);
    float _1936 = _1934 * ((cbModelParam._m0[1u].w * (_1920 - _1822)) + _1822);
    float _1937 = _1934 * ((cbModelParam._m0[1u].w * (_1922 - _1824)) + _1824);
    float _1940 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1943 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1946 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, _1935 * cbSceneParam._m0[91u].x));
    vec4 _1954 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_828, _829));
    float _1956 = _1954.w;
    float _1968 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1956);
    float _1969 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1956);
    float _1970 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1956);
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_867 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _892 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2013 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2017 = _1976 | 1u;
    float _2028 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_728, _729, _730));
    float _2031 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_728, _729, _730));
    float _4296 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _4307 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2036 = (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * 0.3183098733425140380859375;
    float _2038 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.3183098733425140380859375;
    float _2045 = ((cbLight._m0[_1993].x * _1999) * _2038) + (((cbLight._m0[_2003].x * _1968) * _2013) * _2036);
    float _2046 = ((_1999 * cbLight._m0[_1993].y) * _2038) + (((cbLight._m0[_2003].y * _1969) * _2013) * _2036);
    float _2047 = ((_1999 * cbLight._m0[_1993].z) * _2038) + (((cbLight._m0[_2003].z * _1970) * _2013) * _2036);
    uvec4 _2051 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2053 = _2051.x == 0u;
    float _2064;
    float _2066;
    float _2068;
    if (_2053)
    {
        _2064 = _2045;
        _2066 = _2046;
        _2068 = _2047;
    }
    else
    {
        uint _2072 = _1976 + 6u;
        float _2088 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_728, _729, _730)) * 0.5) + 0.5;
        float _2089 = _2088 * _2088;
        float _4318 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2090 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _2091 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2064 = (((cbLight._m0[_2072].x * 0.3183098733425140380859375) * _2090) * _2091) + _2045;
        _2066 = (((cbLight._m0[_2072].y * 0.3183098733425140380859375) * _2090) * _2091) + _2046;
        _2068 = (((cbLight._m0[_2072].z * 0.3183098733425140380859375) * _2090) * _2091) + _2047;
    }
    bool _2071 = _2051.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2071)
    {
        _2109 = _2064;
        _2111 = _2066;
        _2113 = _2068;
    }
    else
    {
        uint _2271 = _1976 + 7u;
        float _2287 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_728, _729, _730)) * 0.5) + 0.5;
        float _2288 = _2287 * _2287;
        float _4334 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2289 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _2290 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2109 = (((cbLight._m0[_2271].x * 0.3183098733425140380859375) * _2289) * _2290) + _2064;
        _2111 = (((cbLight._m0[_2271].y * 0.3183098733425140380859375) * _2289) * _2290) + _2066;
        _2113 = (((cbLight._m0[_2271].z * 0.3183098733425140380859375) * _2289) * _2290) + _2068;
    }
    uint _2116 = _1976 + 8u;
    float _2129 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _731) * 0.949999988079071044921875);
    float _2130 = _2129 * _2129;
    float _2131 = cbLight._m0[_1976].x + _808;
    float _2132 = cbLight._m0[_1976].y + _809;
    float _2133 = cbLight._m0[_1976].z + _810;
    float _2137 = inversesqrt(dot(vec3(_2131, _2132, _2133), vec3(_2131, _2132, _2133)));
    float _2138 = _2137 * _2131;
    float _2139 = _2137 * _2132;
    float _2140 = _2137 * _2133;
    float _2141 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_1976].xyz));
    float _4350 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _4361 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2145 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _2146 = dot(vec3(_728, _729, _730), vec3(_2138, _2139, _2140));
    float _4372 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _2150 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2138, _2139, _2140));
    float _4383 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2154 = _2130 * _2130;
    float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
    float _2169 = (exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2170 = 1.0 - _2130;
    float _2181 = (0.5 / (((_2145 * ((_2144 * _2170) + _2130)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2170) + _2130) * _2144))) * _2144;
    float _4394 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
    uint _2197 = _1976 + 9u;
    float _2208 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2017].w)) * _731) * 0.949999988079071044921875);
    float _2209 = _2208 * _2208;
    float _2210 = cbLight._m0[_2017].x + _808;
    float _2211 = cbLight._m0[_2017].y + _809;
    float _2212 = cbLight._m0[_2017].z + _810;
    float _2216 = inversesqrt(dot(vec3(_2210, _2211, _2212), vec3(_2210, _2211, _2212)));
    float _2217 = _2216 * _2210;
    float _2218 = _2216 * _2211;
    float _2219 = _2216 * _2212;
    float _2220 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2017].xyz));
    float _4405 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2224 = dot(vec3(_728, _729, _730), vec3(_2217, _2218, _2219));
    float _4416 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2017].xyz), vec3(_2217, _2218, _2219));
    float _4427 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2209 * _2209;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2245 = (exp2(log2(1.0 - (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2246 = 1.0 - _2209;
    float _2256 = (0.5 / (((_2145 * ((_2223 * _2246) + _2209)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2246) + _2209) * _2223))) * _2223;
    float _4438 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2258 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    float _2268 = (((_2245 * cbLight._m0[_2197].x) * _2258) * _1999) + ((((cbLight._m0[_2116].x * _1968) * _2169) * _2183) * _2013);
    float _2269 = (((_2245 * cbLight._m0[_2197].y) * _2258) * _1999) + ((((cbLight._m0[_2116].y * _1969) * _2169) * _2183) * _2013);
    float _2270 = (((_2245 * cbLight._m0[_2197].z) * _2258) * _1999) + ((((cbLight._m0[_2116].z * _1970) * _2169) * _2183) * _2013);
    float _2332;
    float _2334;
    float _2336;
    if (_2053)
    {
        _2332 = _2268;
        _2334 = _2269;
        _2336 = _2270;
    }
    else
    {
        uint _2338 = _1976 + 2u;
        uint _2342 = _1976 + 10u;
        float _2356 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2338].w)) * _731) * 0.949999988079071044921875);
        float _2357 = _2356 * _2356;
        float _2358 = cbLight._m0[_2338].x + _808;
        float _2359 = cbLight._m0[_2338].y + _809;
        float _2360 = cbLight._m0[_2338].z + _810;
        float _2364 = inversesqrt(dot(vec3(_2358, _2359, _2360), vec3(_2358, _2359, _2360)));
        float _2365 = _2364 * _2358;
        float _2366 = _2364 * _2359;
        float _2367 = _2364 * _2360;
        float _2368 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2338].xyz));
        float _4449 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2371 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _2372 = dot(vec3(_728, _729, _730), vec3(_2365, _2366, _2367));
        float _4460 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2375 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _2376 = dot(vec3(cbLight._m0[_2338].xyz), vec3(_2365, _2366, _2367));
        float _4471 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
        float _2380 = _2357 * _2357;
        float _2384 = ((_2375 * _2375) * (_2380 + (-1.0))) + 1.0;
        float _2393 = (exp2(log2(1.0 - (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2394 = 1.0 - _2357;
        float _2404 = (0.5 / (((_2145 * ((_2371 * _2394) + _2357)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2394) + _2357) * _2371))) * _2371;
        float _4482 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2406 = (isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_2380 / ((_2384 * _2384) * 3.141590118408203125));
        float _2407 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2332 = (((_2393 * cbLight._m0[_2342].x) * _2406) * _2407) + _2268;
        _2334 = (((_2393 * cbLight._m0[_2342].y) * _2406) * _2407) + _2269;
        _2336 = (((_2393 * cbLight._m0[_2342].z) * _2406) * _2407) + _2270;
    }
    float _2442;
    float _2444;
    float _2446;
    if (_2071)
    {
        _2442 = _2332;
        _2444 = _2334;
        _2446 = _2336;
    }
    else
    {
        uint _2453 = _1976 + 3u;
        uint _2457 = _1976 + 11u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _731) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _808;
        float _2474 = cbLight._m0[_2453].y + _809;
        float _2475 = cbLight._m0[_2453].z + _810;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_728, _729, _730), vec3(cbLight._m0[_2453].xyz));
        float _4498 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2487 = dot(vec3(_728, _729, _730), vec3(_2480, _2481, _2482));
        float _4509 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4520 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2508 = (exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2509 = 1.0 - _2472;
        float _2519 = (0.5 / (((_2145 * ((_2486 * _2509) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2145 * _2509) + _2472) * _2486))) * _2486;
        float _4531 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2521 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2522 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2442 = (((_2508 * cbLight._m0[_2457].x) * _2521) * _2522) + _2332;
        _2444 = (((_2508 * cbLight._m0[_2457].y) * _2521) * _2522) + _2334;
        _2446 = (((_2508 * cbLight._m0[_2457].z) * _2521) * _2522) + _2336;
    }
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    float _2667;
    if (_1974.y == 0u)
    {
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2598 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2597;
        float _2599 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2597;
        float _2600 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2597;
        uvec4 _2612 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2613 = _2612.x;
        uint _2624 = uint((float(_2612.y) * floor(float(uint(cbSceneParam._m0[85u].y * _829) / _2613))) + floor(float(uint(cbSceneParam._m0[85u].x * _828) / _2613)));
        float _2634 = (log2(_2600 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2635 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        uint _2638 = uint(isnan(14.0) ? _2635 : (isnan(_2635) ? 14.0 : min(_2635, 14.0)));
        uvec4 _2643 = texelFetch(g_lightClusterGridBuffer, int(((_2638 << 2u) + (_2624 << 6u)) >> 2u));
        uint _2644 = _2643.x;
        uint _2645 = _2612.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2645 >> 4u) & 15u)) + 4294967295u) & _2644) == 0u) || ((_2645 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2967)
                {
                    frontier_phi_66_pred = _2951;
                    frontier_phi_66_pred_1 = _2956;
                    frontier_phi_66_pred_2 = _2955;
                    frontier_phi_66_pred_3 = _2954;
                    frontier_phi_66_pred_4 = _2953;
                    frontier_phi_66_pred_5 = _2952;
                }
                else
                {
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    uint _3102;
                    _3096 = _2951;
                    _3097 = _2952;
                    _3098 = _2953;
                    _3099 = _2954;
                    _3100 = _2955;
                    _3101 = _2956;
                    _3102 = _2966;
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    for (;;)
                    {
                        uint _3106 = uint(findLSB(_3102)) + (_2957 << 5u);
                        uint _3103 = (_3102 + 4294967295u) & _3102;
                        uint _3108 = _3106 * 48u;
                        vec4 _3122 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3108)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3108 + 3u)).x));
                        uint _3128 = (_3106 * 48u) + 4u;
                        vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3128)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3128 + 3u)).x));
                        uint _3147 = (_3106 * 48u) + 8u;
                        vec3 _3158 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3147)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3147 + 2u)).x));
                        float _3162 = _3122.x - _2598;
                        float _3163 = _3122.y - _2599;
                        float _3164 = _3122.z - _2600;
                        float _3165 = dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164));
                        float _3168 = inversesqrt(_3165);
                        float _3169 = _3168 * _3162;
                        float _3170 = _3168 * _3163;
                        float _3171 = _3168 * _3164;
                        float _3172 = dot(vec3(_848, _851, _854), vec3(_3169, _3170, _3171));
                        float _3177 = 1.0 - (_3165 * _3122.w);
                        float _4557 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3178 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                        float _3179 = sqrt(_3165) * _3141.w;
                        float _3182 = 1.39999997615814208984375 / (_3179 + 1.39999997615814208984375);
                        float _3183 = _3182 * _3182;
                        float _3186 = ((1.0 - _3183) * _3172) + _3183;
                        float _3189 = _3179 * _3179;
                        float _3193 = ((isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))) * _3178) / ((_3189 * 0.699999988079071044921875) + 1.0);
                        float _3197 = (-0.0) - _2598;
                        float _3198 = (-0.0) - _2599;
                        float _3199 = (-0.0) - _2600;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3204 = _3203 * _3197;
                        float _3205 = _3203 * _3198;
                        float _3206 = _3203 * _3199;
                        float _3214 = exp2(log2(1.0 / ((_3189 * 3.5) + 5.0)) * 0.25);
                        float _3215 = 1.0 - _908;
                        float _3222 = sqrt(1.0 - ((1.0 - (_3215 * _3215)) * (1.0 - (_3214 * _3214))));
                        float _3223 = _3222 * _3222;
                        float _3224 = _3223 * _3223;
                        float _3225 = _3204 + _3169;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3235 = dot(vec3(_848, _851, _854), vec3(_3204, _3205, _3206));
                        float _4573 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3238 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                        float _3239 = dot(vec3(_848, _851, _854), vec3(_3231 * _3225, _3231 * _3226, _3231 * _3227));
                        float _4584 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3246 = ((_3242 * _3242) * (_3224 + (-1.0))) + 1.0;
                        float _3247 = _3182 * _3223;
                        float _3248 = _3247 * _3247;
                        float _3251 = ((1.0 - _3248) * _3172) + _3248;
                        float _4595 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
                        float _3253 = 1.0 - _3223;
                        float _3263 = (0.5 / (((_3252 * ((_3238 * _3253) + _3223)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3223) * _3238))) * _3252;
                        float _4606 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3274 = (((_3224 * 3.1415927410125732421875) * (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) / ((_3246 * _3246) * ((_3189 * 2.1991131305694580078125) + 3.141590118408203125))) * _3178;
                        _3026 = (_3193 * _3141.x) + _3099;
                        _3027 = (_3193 * _3141.y) + _3100;
                        _3028 = (_3193 * _3141.z) + _3101;
                        _3023 = (_3274 * _3158.x) + _3096;
                        _3024 = (_3274 * _3158.y) + _3097;
                        _3025 = (_3274 * _3158.z) + _3098;
                        if (_3103 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3096 = _3023;
                            _3097 = _3024;
                            _3098 = _3025;
                            _3099 = _3026;
                            _3100 = _3027;
                            _3101 = _3028;
                            _3102 = _3103;
                        }
                    }
                    frontier_phi_66_pred = _3023;
                    frontier_phi_66_pred_1 = _3028;
                    frontier_phi_66_pred_2 = _3027;
                    frontier_phi_66_pred_3 = _3026;
                    frontier_phi_66_pred_4 = _3025;
                    frontier_phi_66_pred_5 = _3024;
                }
                _2791 = frontier_phi_66_pred;
                _2801 = frontier_phi_66_pred_1;
                _2799 = frontier_phi_66_pred_2;
                _2797 = frontier_phi_66_pred_3;
                _2795 = frontier_phi_66_pred_4;
                _2793 = frontier_phi_66_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2791;
                    _2952 = _2793;
                    _2953 = _2795;
                    _2954 = _2797;
                    _2955 = _2799;
                    _2956 = _2801;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2807) & _2644) == 0u)
        {
            _2919 = _2790;
            _2921 = _2792;
            _2923 = _2794;
            _2925 = _2796;
            _2927 = _2798;
            _2929 = _2800;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
            float _2945 = _2944 * _2598;
            float _2946 = _2944 * _2599;
            float _2947 = _2944 * _2600;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3079 = _2790;
                float _3080 = _2792;
                float _3081 = _2794;
                float _3082 = _2796;
                float _3083 = _2798;
                float _3084 = _2800;
                uint _3085 = _2807;
                uint _3094;
                bool _3095;
                for (;;)
                {
                    _3094 = texelFetch(g_lightClassification, int((((_2638 << 5u) + (_2624 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                    _3095 = _3094 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3095)
                    {
                        frontier_phi_77_pred = _3084;
                        frontier_phi_77_pred_1 = _3083;
                        frontier_phi_77_pred_2 = _3082;
                        frontier_phi_77_pred_3 = _3081;
                        frontier_phi_77_pred_4 = _3080;
                        frontier_phi_77_pred_5 = _3079;
                    }
                    else
                    {
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3301 = _3079;
                        float _3302 = _3080;
                        float _3303 = _3081;
                        float _3304 = _3082;
                        float _3305 = _3083;
                        float _3306 = _3084;
                        uint _3307 = _3094;
                        uint _3308;
                        vec4 _3333;
                        float _3334;
                        vec4 _3349;
                        vec3 _3361;
                        vec4 _3376;
                        vec4 _3391;
                        float _3438;
                        bool _3439;
                        for (;;)
                        {
                            uint _3318 = ((_3085 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3307));
                            _3308 = (_3307 + 4294967295u) & _3307;
                            uint _3320 = _3318 * 40u;
                            _3333 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3320)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3320 + 3u)).x));
                            _3334 = _3333.w;
                            uint _3336 = (_3318 * 40u) + 4u;
                            _3349 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3336)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3336 + 3u)).x));
                            uint _3351 = (_3318 * 40u) + 8u;
                            _3361 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x));
                            uint _3363 = (_3318 * 40u) + 16u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3318 * 40u) + 20u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3394 = (_3318 * 40u) + 24u;
                            vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3394)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3394 + 3u)).x));
                            uint _3413 = (_3318 * 40u) + 28u;
                            vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            _3438 = fma(_2600, _3426.z, fma(_2599, _3426.y, _3426.x * _2598)) + _3426.w;
                            _3439 = !((fma(_2600, _3407.z, fma(_2599, _3407.y, _3407.x * _2598)) + _3407.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3439)
                            {
                                float _3466 = _3333.x - _2598;
                                float _3467 = _3333.y - _2599;
                                float _3468 = _3333.z - _2600;
                                float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                                float _3472 = inversesqrt(_3469);
                                float _3473 = _3472 * _3466;
                                float _3474 = _3472 * _3467;
                                float _3475 = _3472 * _3468;
                                float _3479 = 1.0 - (_3469 / (_3334 * _3334));
                                float _4617 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                                float _3484 = sqrt(_3469) * _3349.w;
                                float _3486 = 1.39999997615814208984375 / (_3484 + 1.39999997615814208984375);
                                float _3487 = _3486 * _3486;
                                float _3490 = ((1.0 - _3487) * dot(vec3(_3473, _3474, _3475), vec3(_848, _851, _854))) + _3487;
                                float _3493 = _3484 * _3484;
                                float _3497 = (fma(_2600, _3376.z, fma(_2599, _3376.y, _3376.x * _2598)) + _3376.w) / _3438;
                                float _3498 = (fma(_2600, _3391.z, fma(_2599, _3391.y, _3391.x * _2598)) + _3391.w) / _3438;
                                float _3502 = 1.0 - dot(vec2(_3497, _3498), vec2(_3497, _3498));
                                float _4633 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                                float _3503 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                                float _3504 = _3503 * (((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3480) / ((_3493 * 0.699999988079071044921875) + 1.0));
                                float _3516 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                                float _3517 = 1.0 - _908;
                                float _3524 = sqrt(1.0 - ((1.0 - (_3517 * _3517)) * (1.0 - (_3516 * _3516))));
                                float _3525 = _3524 * _3524;
                                float _3526 = _3525 * _3525;
                                float _3527 = _3473 - _2945;
                                float _3528 = _3474 - _2946;
                                float _3529 = _3475 - _2947;
                                float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                                float _3537 = dot(vec3(_848, _851, _854), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4644 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3541 = dot(vec3(_848, _851, _854), vec3(_3533 * _3527, _3533 * _3528, _3533 * _3529));
                                float _4655 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3544 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3548 = ((_3544 * _3544) * (_3526 + (-1.0))) + 1.0;
                                float _3549 = _3486 * _3525;
                                float _3550 = _3549 * _3549;
                                float _3556 = ((1.0 - _3550) * dot(vec3(_848, _851, _854), vec3(_3473, _3474, _3475))) + _3550;
                                float _4666 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3558 = 1.0 - _3525;
                                float _3568 = (0.5 / (((_3557 * ((_3540 * _3558) + _3525)) + 9.9999999392252902907785028219223e-09) + (((_3557 * _3558) + _3525) * _3540))) * _3557;
                                float _4677 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3578 = (_3503 * _3480) * (((_3526 * 3.1415927410125732421875) * (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) / ((_3548 * _3548) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3504 * _3349.y;
                                frontier_phi_83_pred_1 = _3504 * _3349.x;
                                frontier_phi_83_pred_2 = _3578 * _3361.z;
                                frontier_phi_83_pred_3 = _3578 * _3361.y;
                                frontier_phi_83_pred_4 = _3578 * _3361.x;
                                frontier_phi_83_pred_5 = _3504 * _3349.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3586 = frontier_phi_83_pred;
                            _3585 = frontier_phi_83_pred_1;
                            _3584 = frontier_phi_83_pred_2;
                            _3583 = frontier_phi_83_pred_3;
                            _3582 = frontier_phi_83_pred_4;
                            _3587 = frontier_phi_83_pred_5;
                            _3291 = _3585 + _3304;
                            _3292 = _3586 + _3305;
                            _3293 = _3587 + _3306;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            _3290 = _3584 + _3303;
                            if (_3308 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3308;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3293;
                        frontier_phi_77_pred_1 = _3292;
                        frontier_phi_77_pred_2 = _3291;
                        frontier_phi_77_pred_3 = _3290;
                        frontier_phi_77_pred_4 = _3289;
                        frontier_phi_77_pred_5 = _3288;
                    }
                    _2930 = frontier_phi_77_pred;
                    _2928 = frontier_phi_77_pred_1;
                    _2926 = frontier_phi_77_pred_2;
                    _2924 = frontier_phi_77_pred_3;
                    _2922 = frontier_phi_77_pred_4;
                    _2920 = frontier_phi_77_pred_5;
                    uint _3086 = _3085 + 1u;
                    if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3079 = _2920;
                        _3080 = _2922;
                        _3081 = _2924;
                        _3082 = _2926;
                        _3083 = _2928;
                        _3084 = _2930;
                        _3085 = _3086;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2924;
                frontier_phi_58_59_ladder_1 = _2930;
                frontier_phi_58_59_ladder_2 = _2928;
                frontier_phi_58_59_ladder_3 = _2926;
                frontier_phi_58_59_ladder_4 = _2922;
                frontier_phi_58_59_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_58_59_ladder = _2794;
                frontier_phi_58_59_ladder_1 = _2800;
                frontier_phi_58_59_ladder_2 = _2798;
                frontier_phi_58_59_ladder_3 = _2796;
                frontier_phi_58_59_ladder_4 = _2792;
                frontier_phi_58_59_ladder_5 = _2790;
            }
            _2919 = frontier_phi_58_59_ladder_5;
            _2921 = frontier_phi_58_59_ladder_4;
            _2923 = frontier_phi_58_59_ladder;
            _2925 = frontier_phi_58_59_ladder_3;
            _2927 = frontier_phi_58_59_ladder_2;
            _2929 = frontier_phi_58_59_ladder_1;
        }
        float _2934 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2657 = (_2934 * _2925) + _2109;
        _2659 = (_2934 * _2927) + _2111;
        _2661 = (_2934 * _2929) + _2113;
        _2663 = ((_2919 * 0.039999999105930328369140625) * _2934) + _2442;
        _2665 = ((_2921 * 0.039999999105930328369140625) * _2934) + _2444;
        _2667 = ((_2923 * 0.039999999105930328369140625) * _2934) + _2446;
    }
    else
    {
        _2657 = _2109;
        _2659 = _2111;
        _2661 = _2113;
        _2663 = _2442;
        _2665 = _2444;
        _2667 = _2446;
    }
    uint _2673 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _2679 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2685 = (((((_2679 * cbMtdParam._m0[14u].x) * _588.x) * _611) * _690) * (((1.0 - _664) * cbMtdParam._m0[20u].w) + _664)) * cbInstanceData._m0[_2673].x;
    float _2691 = (((((_2679 * cbMtdParam._m0[14u].y) * _588.y) * _611) * _690) * (((1.0 - _666) * cbMtdParam._m0[20u].w) + _666)) * cbInstanceData._m0[_2673].y;
    float _2697 = (((((_2679 * cbMtdParam._m0[14u].z) * _588.z) * _611) * _690) * (((1.0 - _668) * cbMtdParam._m0[20u].w) + _668)) * cbInstanceData._m0[_2673].z;
    float _4693 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4704 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4715 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2714 = (((isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2657 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _892))) + ((_2663 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + _2685;
    float _2716 = (_2691 + ((_2665 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2659 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _892)));
    float _2718 = (_2697 + ((_2667 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1729)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0))) * (_2661 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _892)));
    float _2719 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2720 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2721 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2727 = cbMtdParam._m0[2u].x * _2685;
    float _2728 = cbMtdParam._m0[2u].y * _2691;
    float _2729 = cbMtdParam._m0[2u].z * _2697;
    float _4741 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2731 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    uint _2732 = _867 + 6u;
    float _2740 = _828 / cbSceneParam._m0[86u].x;
    float _2741 = _829 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _750 : (isnan(_750) ? cbSceneParam._m0[77u].w : min(_750, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_750 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_750) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _750 : min(cbSceneParam._m0[80u].w, _750));
        float _2816 = _2815 / _750;
        float _2827 = _2816 * _801;
        float _2828 = _802 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2830 = _2816 * _803;
        float _2832 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2828;
        float _2840 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3036;
        if (abs((_2829 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3036 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2982 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3036 = ((abs(_2840 / _2829) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2850 * _2991) - exp2(_2850 * _2992)) * _2980))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3038 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3047 = exp2((_3036 * (-1.44269502162933349609375)) * (1.0 - _3038.w));
        float _3048 = log2(_3047);
        float _3064 = log2(_2760);
        _2852 = (exp2(_3064 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].x)) * _3038.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2854 = (exp2(_3064 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].y)) * _3038.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2856 = (exp2(_3064 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3048 * cbSceneParam._m0[78u].z)) * _3038.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2858 = _3047 * _2760;
    }
    else
    {
        _2852 = _2757;
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
    }
    bool _3074;
    vec4 _2868;
    vec4 _2890;
    float _2892;
    float _2896;
    float _2897;
    float _2898;
    float _2901;
    float _2904;
    float _2907;
    float _2908;
    bool _2918;
    for (;;)
    {
        _2868 = cbMatDynParam._m0[0u];
        float _2870 = roundEven(_2868.y);
        bool _2871 = _2870 == 3.0;
        float _2872 = log2(_2858);
        float _2876 = exp2(_2872 * cbSceneParam._m0[78u].x);
        float _2877 = exp2(_2872 * cbSceneParam._m0[78u].y);
        float _2878 = exp2(_2872 * cbSceneParam._m0[78u].z);
        float _2879 = _2876 * _2719;
        float _2880 = _2877 * _2720;
        float _2881 = _2878 * _2721;
        float _2888 = _817 + (-0.5);
        _2890 = cbMtdParam._m0[1u];
        _2892 = _2890.y * _2888;
        float _2895 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2896 = _2895 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
        _2897 = _2895 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
        _2898 = _2895 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
        _2901 = ((_2727 * _2731) * _2876) * _2895;
        _2904 = ((_2728 * _2731) * _2877) * _2895;
        _2907 = ((_2729 * _2731) * _2878) * _2895;
        _2908 = _2888 * 0.999000012874603271484375;
        _2918 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2918)
        {
            if ((cbInstanceData._m0[_867 + 7u].x + _2908) < 0.5)
            {
                _3074 = true;
                break;
            }
        }
        uint _3015 = _868 + uint(_2868.w);
        if ((cbInstanceData._m0[_3015].w < 1.0) && ((cbInstanceData._m0[_3015].w + _2908) < 0.5))
        {
            _3074 = true;
            break;
        }
        if ((_2892 + 1.0) < _2890.x)
        {
            _3074 = true;
            break;
        }
        _3074 = false;
        break;
    }
    float _3279;
    if (_3074)
    {
        discard_state = true;
        _3279 = 0.0;
    }
    else
    {
        _3279 = cbInstanceData._m0[_2732].w;
    }
    SV_Target.x = _2896;
    SV_Target.y = _2897;
    SV_Target.z = _2898;
    SV_Target.w = _3279;
    SV_Target_1.x = _2901;
    SV_Target_1.y = _2904;
    SV_Target_1.z = _2907;
    SV_Target_1.w = cbInstanceData._m0[_2732].w;
    discard_exit();
}


