#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _212 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _213 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _214 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _220 = inversesqrt(dot(vec3(_212, _213, _214), vec3(_212, _213, _214)));
    float _227 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _256 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _256.x * cbMtdParam._m0[10u].x;
    float _263 = _256.y * cbMtdParam._m0[10u].y;
    float _264 = _256.z * cbMtdParam._m0[10u].z;
    vec4 _283 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _302 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _339 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _302.x) * 2.0) - _329)) + 1.0;
    float _3631 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
    float _347 = (_340 * ((_283.x * cbMtdParam._m0[11u].x) - _262)) + _262;
    float _348 = (_340 * ((_283.y * cbMtdParam._m0[11u].y) - _263)) + _263;
    float _349 = (_340 * ((_283.z * cbMtdParam._m0[11u].z) - _264)) + _264;
    vec4 _368 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _381 = (((((1.0 - _302.y) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3642 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _389 = (((_368.x * cbMtdParam._m0[12u].x) - _347) * _382) + _347;
    float _390 = (_382 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _391 = (_382 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _409 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _422 = (((((1.0 - _302.z) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3653 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _430 = (((_409.x * cbMtdParam._m0[13u].x) - _389) * _423) + _389;
    float _431 = (_423 * ((_409.y * cbMtdParam._m0[13u].y) - _390)) + _390;
    float _432 = (_423 * ((_409.z * cbMtdParam._m0[13u].z) - _391)) + _391;
    vec4 _445 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _459 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _461 = _459.x;
    float _462 = _459.y;
    float _463 = _459.z;
    vec4 _475 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _486 = ((_475.x - _461) * _340) + _461;
    float _487 = ((_475.y - _462) * _340) + _462;
    float _488 = ((_475.z - _463) * _340) + _463;
    vec4 _501 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _512 = ((_501.x - _486) * _382) + _486;
    float _513 = ((_501.y - _487) * _382) + _487;
    float _514 = ((_501.z - _488) * _382) + _488;
    vec4 _527 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _540 = ((_527.z - _514) * _423) + _514;
    float _543 = ((((_527.x - _512) * _423) + _512) * 2.0) + (-1.0);
    float _545 = ((((_527.y - _513) * _423) + _513) * 2.0) + (-1.0);
    float _546 = dot(vec2(_543, _545), vec2(_543, _545));
    float _3664 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _551 = sqrt(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))));
    vec4 _584 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _598 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3675 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _607 = (((_599 * _599) * (3.0 - (_599 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _615 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _623 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3686 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _624 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _628 = (_624 * _624) * (3.0 - (_624 * 2.0));
    float _629 = _628 * cbMtdParam._m0[22u].x;
    float _630 = _628 * cbMtdParam._m0[22u].y;
    float _631 = sin(_615);
    float _632 = cos(_615);
    float _633 = TEXCOORD.z - _629;
    float _634 = TEXCOORD.w - _630;
    vec4 _654 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_629 + fma(_634, (-0.0) - _631, _633 * _632))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_634, _632, _633 * _631) + _630)) + cbTextureTilingScale._m0[2u].w));
    float _660 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _654.x;
    float _662 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _654.y;
    float _664 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _654.z;
    float _685 = (TEXCOORD_5.x - (((_445.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3697 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _686 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    vec4 _699 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _709 = (((_699.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _543;
    float _710 = (((_699.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _545;
    float _713 = fma(_551, _227 * NORMAL.x, fma(_710, _234 * TANGENT.x, (_220 * _212) * _709));
    float _716 = fma(_551, _227 * NORMAL.y, fma(_710, _234 * TANGENT.y, (_220 * _213) * _709));
    float _719 = fma(_551, _227 * NORMAL.z, fma(_710, _234 * TANGENT.z, (_220 * _214) * _709));
    float _723 = inversesqrt(dot(vec3(_713, _716, _719), vec3(_713, _716, _719)));
    float _724 = _723 * _713;
    float _725 = _723 * _716;
    float _726 = _723 * _719;
    float _3708 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _727 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _3719 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _3730 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _3741 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _746 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _797 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _787);
    float _798 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _787);
    float _799 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _787);
    float _803 = inversesqrt(dot(vec3(_797, _798, _799), vec3(_797, _798, _799)));
    float _804 = _797 * _803;
    float _805 = _798 * _803;
    float _806 = _799 * _803;
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _832 = fma(_726, cbSceneParam._m0[5u].z, fma(_725, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _724));
    float _835 = fma(_726, cbSceneParam._m0[6u].z, fma(_725, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _724));
    float _838 = fma(_726, cbSceneParam._m0[7u].z, fma(_725, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _724));
    uint _851 = uint(roundEven(NORMAL.w)) * 13u;
    uint _852 = _851 + 9u;
    uint _853 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _859 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) * cbInstanceData._m0[_853].x;
    float _860 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * cbInstanceData._m0[_853].y;
    float _861 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_853].z;
    float _3752 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _3763 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    vec4 _873 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _876 = _873.x * TEXCOORD_5.w;
    float _877 = dot(vec3(_724, _725, _726), vec3(_804, _805, _806));
    float _880 = _877 * 2.0;
    float _884 = (_880 * _724) - _804;
    float _885 = (_880 * _725) - _805;
    float _886 = (_880 * _726) - _806;
    float _890 = abs(dot(vec3(_804, _805, _806), vec3(_724, _725, _726)));
    float _3785 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _892 = sqrt(_727);
    float _904 = exp2((_892 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_892 * 3.0));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _975 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _979 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1004 = _936 + _724;
        float _1005 = _940 + _725;
        float _1006 = _944 + _726;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_724, _725, _726), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3811 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3822 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3833 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_724, _725, _726), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3866 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_724, _725, _726), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3899 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1287 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1291 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1295 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1318 = _936 + _724;
        float _1319 = _940 + _725;
        float _1320 = _944 + _726;
        float _1330 = fma(_1320, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1318)) - _1287;
        float _1331 = fma(_1320, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1318)) - _1291;
        float _1332 = fma(_1320, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1318)) - _1295;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1287 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1291 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[35u].z) + ((((((_1295 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1386 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1353.x + (-0.5));
        float _1388 = _1386 * (_1353.y + (-0.5));
        float _1389 = _1386 * (_1353.z + (-0.5));
        float _1396 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1360.x + (-0.5));
        float _1398 = _1396 * (_1360.y + (-0.5));
        float _1399 = _1396 * (_1360.z + (-0.5));
        float _1406 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1367.x + (-0.5));
        float _1408 = _1406 * (_1367.y + (-0.5));
        float _1409 = _1406 * (_1367.z + (-0.5));
        float _1416 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1374.x + (-0.5));
        float _1418 = _1416 * (_1374.y + (-0.5));
        float _1419 = _1416 * (_1374.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_724, _725, _726), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3940 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3951 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3962 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1450 + 1.0))) + _1455) * _1420;
        float _1465 = _1388 * 0.5;
        float _1466 = _1398 * 0.5;
        float _1467 = _1408 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_724, _725, _726), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3995 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1492 + 1.0))) + _1497) * _1421;
        float _1507 = _1389 * 0.5;
        float _1508 = _1399 * 0.5;
        float _1509 = _1409 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_724, _725, _726), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4028 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1534 + 1.0))) + _1539) * _1422;
        _1556 = _1389;
        _1557 = _1388;
        _1558 = _1387;
        _1559 = _1399;
        _1560 = _1398;
        _1561 = _1397;
        _1562 = _1409;
        _1563 = _1408;
        _1564 = _1407;
        _1565 = _1422;
        _1566 = _1421;
        _1567 = _1420;
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1603 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1580));
    float _1624 = _884 * 0.5;
    float _1625 = _885 * 0.5;
    float _1626 = _886 * 0.5;
    float _1627 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1630 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1633 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1667;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1640 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1644 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1648 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1655 = dot(vec4(cbModelParam._m0[39u]), vec4(_1624, _1625, _1626, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1678;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1669 = dot(vec4(cbModelParam._m0[40u]), vec4(_1624, _1625, _1626, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1682 = (_1678 * cbModelParam._m0[1u].x) + (_1667 * (1.0 - cbModelParam._m0[1u].x));
    float _1692 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _727);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1692 : min(cbModelParam._m0[25u].z, _1692));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_886, cbModelParam._m0[13u].z, fma(_885, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _884));
        float _1754 = fma(_886, cbModelParam._m0[14u].z, fma(_885, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _884));
        float _1757 = fma(_886, cbModelParam._m0[15u].z, fma(_885, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _884));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1785 = frontier_phi_14_12_ladder;
        }
        float _2007;
        if (_1754 > 0.0)
        {
            _2007 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2007 = frontier_phi_23_19_ladder;
        }
        float _2253;
        if (_1757 > 0.0)
        {
            _2253 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2253 = frontier_phi_35_30_ladder;
        }
        float _2255 = isnan(_2007) ? _1785 : (isnan(_1785) ? _2007 : min(_1785, _2007));
        float _2256 = isnan(_2253) ? _2255 : (isnan(_2255) ? _2253 : min(_2255, _2253));
        float _2260 = (_2256 * _1751) + _1740;
        float _2261 = (_2256 * _1754) + _1744;
        float _2262 = (_2256 * _1757) + _1748;
        float _2263 = _2256 * 9.9999997473787516355514526367188e-05;
        float _2265 = (-1.0) - _2263;
        float _2267 = _2263 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2262 > _2267) || ((_2262 < _2265) || ((_2261 > _2267) || ((_2261 < _2265) || ((_2260 < _2265) || (_2260 > _2267))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2386 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2262, cbModelParam._m0[9u].z, fma(_2261, cbModelParam._m0[9u].y, _2260 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2262, cbModelParam._m0[10u].z, fma(_2261, cbModelParam._m0[10u].y, _2260 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2262, cbModelParam._m0[11u].z, fma(_2261, cbModelParam._m0[11u].y, _2260 * cbModelParam._m0[11u].x))), _1693);
            frontier_phi_13_35_ladder = _2386.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2386.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2386.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_13_35_ladder_2;
        _1775 = frontier_phi_13_35_ladder_1;
        _1777 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_884, _885, _886), _1693);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _727);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1871;
    float _1873;
    float _1875;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1835 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1839 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1843 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1846 = fma(_886, cbModelParam._m0[21u].z, fma(_885, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _884));
        float _1849 = fma(_886, cbModelParam._m0[22u].z, fma(_885, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _884));
        float _1852 = fma(_886, cbModelParam._m0[23u].z, fma(_885, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _884));
        float _2012;
        if (_1846 > 0.0)
        {
            _2012 = abs((1.0 - _1835) / _1846);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1846 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1835 + 1.0) / _1846);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2012 = frontier_phi_25_21_ladder;
        }
        float _2280;
        if (_1849 > 0.0)
        {
            _2280 = abs((1.0 - _1839) / _1849);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1849 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1839 + 1.0) / _1849);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2280 = frontier_phi_37_32_ladder;
        }
        float _2485;
        if (_1852 > 0.0)
        {
            _2485 = abs((1.0 - _1843) / _1852);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1852 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1843 + 1.0) / _1852);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2485 = frontier_phi_46_43_ladder;
        }
        float _2487 = isnan(_2280) ? _2012 : (isnan(_2012) ? _2280 : min(_2012, _2280));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1846) + _1835;
        float _2493 = (_2488 * _1849) + _1839;
        float _2494 = (_2488 * _1852) + _1843;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2496 = (-1.0) - _2495;
        float _2498 = _2495 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2494 > _2498) || ((_2494 < _2496) || ((_2493 > _2498) || ((_2493 < _2496) || ((_2492 < _2496) || (_2492 > _2498))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2494, cbModelParam._m0[17u].z, fma(_2493, cbModelParam._m0[17u].y, _2492 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2494, cbModelParam._m0[18u].z, fma(_2493, cbModelParam._m0[18u].y, _2492 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2494, cbModelParam._m0[19u].z, fma(_2493, cbModelParam._m0[19u].y, _2492 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_22_46_ladder = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1871 = frontier_phi_22_46_ladder_2;
        _1873 = frontier_phi_22_46_ladder_1;
        _1875 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1855 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_884, _885, _886), _1782);
        _1871 = _1855.x * cbModelParam._m0[1u].z;
        _1873 = _1855.y * cbModelParam._m0[1u].z;
        _1875 = _1855.z * cbModelParam._m0[1u].z;
    }
    float _1887 = ((((1.0 - _904) * ((_892 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_904 * _892)) * _876;
    float _1888 = _1887 * ((cbModelParam._m0[1u].w * (_1871 - _1773)) + _1773);
    float _1889 = _1887 * ((cbModelParam._m0[1u].w * (_1873 - _1775)) + _1775);
    float _1890 = _1887 * ((cbModelParam._m0[1u].w * (_1875 - _1777)) + _1777);
    float _1893 = fma(_1890, cbSceneParam._m0[89u].z, fma(_1889, cbSceneParam._m0[89u].y, _1888 * cbSceneParam._m0[89u].x));
    float _1896 = fma(_1890, cbSceneParam._m0[90u].z, fma(_1889, cbSceneParam._m0[90u].y, _1888 * cbSceneParam._m0[90u].x));
    float _1899 = fma(_1890, cbSceneParam._m0[91u].z, fma(_1889, cbSceneParam._m0[91u].y, _1888 * cbSceneParam._m0[91u].x));
    vec4 _1907 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_812, _813));
    float _1909 = _1907.w;
    float _1921 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1909);
    float _1922 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1909);
    float _1923 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1909);
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_851 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1937 = _876 + (-1.0);
    float _1942 = (cbLight._m0[_1930].x * _1937) + 1.0;
    float _1943 = (cbLight._m0[_1930].y * _1937) + 1.0;
    float _1944 = (cbLight._m0[_1930].z * _1937) + 1.0;
    float _1945 = (cbLight._m0[_1930].w * _1937) + 1.0;
    uint _1946 = _1929 + 5u;
    float _1952 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1956 = _1929 + 4u;
    float _1966 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    uint _1970 = _1929 | 1u;
    float _1981 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_724, _725, _726));
    float _1984 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_724, _725, _726));
    float _4164 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _4175 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1989 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1991 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1998 = ((cbLight._m0[_1946].x * _1952) * _1991) + (((cbLight._m0[_1956].x * _1921) * _1966) * _1989);
    float _1999 = ((_1952 * cbLight._m0[_1946].y) * _1991) + (((cbLight._m0[_1956].y * _1922) * _1966) * _1989);
    float _2000 = ((_1952 * cbLight._m0[_1946].z) * _1991) + (((cbLight._m0[_1956].z * _1923) * _1966) * _1989);
    uvec4 _2004 = floatBitsToUint(cbLight._m0[_1929 + 12u]);
    bool _2006 = _2004.x == 0u;
    float _2017;
    float _2019;
    float _2021;
    if (_2006)
    {
        _2017 = _1998;
        _2019 = _1999;
        _2021 = _2000;
    }
    else
    {
        uint _2025 = _1929 + 6u;
        float _2041 = (dot(vec3(cbLight._m0[_1929 + 2u].xyz), vec3(_724, _725, _726)) * 0.5) + 0.5;
        float _2042 = _2041 * _2041;
        float _4186 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2043 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2044 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2017 = (((cbLight._m0[_2025].x * 0.3183098733425140380859375) * _2043) * _2044) + _1998;
        _2019 = (((cbLight._m0[_2025].y * 0.3183098733425140380859375) * _2043) * _2044) + _1999;
        _2021 = (((cbLight._m0[_2025].z * 0.3183098733425140380859375) * _2043) * _2044) + _2000;
    }
    bool _2024 = _2004.y == 0u;
    float _2062;
    float _2064;
    float _2066;
    if (_2024)
    {
        _2062 = _2017;
        _2064 = _2019;
        _2066 = _2021;
    }
    else
    {
        uint _2224 = _1929 + 7u;
        float _2240 = (dot(vec3(cbLight._m0[_1929 + 3u].xyz), vec3(_724, _725, _726)) * 0.5) + 0.5;
        float _2241 = _2240 * _2240;
        float _4202 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2242 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2243 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2062 = (((cbLight._m0[_2224].x * 0.3183098733425140380859375) * _2242) * _2243) + _2017;
        _2064 = (((cbLight._m0[_2224].y * 0.3183098733425140380859375) * _2242) * _2243) + _2019;
        _2066 = (((cbLight._m0[_2224].z * 0.3183098733425140380859375) * _2242) * _2243) + _2021;
    }
    uint _2069 = _1929 + 8u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _727) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1929].x + _804;
    float _2085 = cbLight._m0[_1929].y + _805;
    float _2086 = cbLight._m0[_1929].z + _806;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_724, _725, _726), vec3(cbLight._m0[_1929].xyz));
    float _4218 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _2098 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2099 = dot(vec3(_724, _725, _726), vec3(_2091, _2092, _2093));
    float _4240 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2103 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2091, _2092, _2093));
    float _4251 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2107 = _2083 * _2083;
    float _2111 = ((_2102 * _2102) * (_2107 + (-1.0))) + 1.0;
    float _2122 = (exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2123 = 1.0 - _2083;
    float _2134 = (0.5 / (((_2098 * ((_2097 * _2123) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2123) + _2083) * _2097))) * _2097;
    float _4262 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2107 / ((_2111 * _2111) * 3.141590118408203125));
    uint _2150 = _1929 + 9u;
    float _2161 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1970].w)) * _727) * 0.949999988079071044921875);
    float _2162 = _2161 * _2161;
    float _2163 = cbLight._m0[_1970].x + _804;
    float _2164 = cbLight._m0[_1970].y + _805;
    float _2165 = cbLight._m0[_1970].z + _806;
    float _2169 = inversesqrt(dot(vec3(_2163, _2164, _2165), vec3(_2163, _2164, _2165)));
    float _2170 = _2169 * _2163;
    float _2171 = _2169 * _2164;
    float _2172 = _2169 * _2165;
    float _2173 = dot(vec3(_724, _725, _726), vec3(cbLight._m0[_1970].xyz));
    float _4273 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2176 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2177 = dot(vec3(_724, _725, _726), vec3(_2170, _2171, _2172));
    float _4284 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_1970].xyz), vec3(_2170, _2171, _2172));
    float _4295 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2162 * _2162;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2198 = (exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2199 = 1.0 - _2162;
    float _2209 = (0.5 / (((_2098 * ((_2176 * _2199) + _2162)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2199) + _2162) * _2176))) * _2176;
    float _4306 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2211 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    float _2221 = (((_2198 * cbLight._m0[_2150].x) * _2211) * _1952) + ((((cbLight._m0[_2069].x * _1921) * _2122) * _2136) * _1966);
    float _2222 = (((_2198 * cbLight._m0[_2150].y) * _2211) * _1952) + ((((cbLight._m0[_2069].y * _1922) * _2122) * _2136) * _1966);
    float _2223 = (((_2198 * cbLight._m0[_2150].z) * _2211) * _1952) + ((((cbLight._m0[_2069].z * _1923) * _2122) * _2136) * _1966);
    float _2285;
    float _2287;
    float _2289;
    if (_2006)
    {
        _2285 = _2221;
        _2287 = _2222;
        _2289 = _2223;
    }
    else
    {
        uint _2291 = _1929 + 2u;
        uint _2295 = _1929 + 10u;
        float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _727) * 0.949999988079071044921875);
        float _2310 = _2309 * _2309;
        float _2311 = cbLight._m0[_2291].x + _804;
        float _2312 = cbLight._m0[_2291].y + _805;
        float _2313 = cbLight._m0[_2291].z + _806;
        float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
        float _2318 = _2317 * _2311;
        float _2319 = _2317 * _2312;
        float _2320 = _2317 * _2313;
        float _2321 = dot(vec3(_724, _725, _726), vec3(cbLight._m0[_2291].xyz));
        float _4317 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2324 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2325 = dot(vec3(_724, _725, _726), vec3(_2318, _2319, _2320));
        float _4328 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2328 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2329 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2318, _2319, _2320));
        float _4339 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2333 = _2310 * _2310;
        float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
        float _2346 = (exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2347 = 1.0 - _2310;
        float _2357 = (0.5 / (((_2098 * ((_2324 * _2347) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2347) + _2310) * _2324))) * _2324;
        float _4350 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2359 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
        float _2360 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
        _2285 = (((_2346 * cbLight._m0[_2295].x) * _2359) * _2360) + _2221;
        _2287 = (((_2346 * cbLight._m0[_2295].y) * _2359) * _2360) + _2222;
        _2289 = (((_2346 * cbLight._m0[_2295].z) * _2359) * _2360) + _2223;
    }
    float _2395;
    float _2397;
    float _2399;
    if (_2024)
    {
        _2395 = _2285;
        _2397 = _2287;
        _2399 = _2289;
    }
    else
    {
        uint _2406 = _1929 + 3u;
        uint _2410 = _1929 + 11u;
        float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _727) * 0.949999988079071044921875);
        float _2425 = _2424 * _2424;
        float _2426 = cbLight._m0[_2406].x + _804;
        float _2427 = cbLight._m0[_2406].y + _805;
        float _2428 = cbLight._m0[_2406].z + _806;
        float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
        float _2433 = _2432 * _2426;
        float _2434 = _2432 * _2427;
        float _2435 = _2432 * _2428;
        float _2436 = dot(vec3(_724, _725, _726), vec3(cbLight._m0[_2406].xyz));
        float _4366 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2439 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2440 = dot(vec3(_724, _725, _726), vec3(_2433, _2434, _2435));
        float _4377 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2444 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2433, _2434, _2435));
        float _4388 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2448 = _2425 * _2425;
        float _2452 = ((_2443 * _2443) * (_2448 + (-1.0))) + 1.0;
        float _2461 = (exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2462 = 1.0 - _2425;
        float _2472 = (0.5 / (((_2098 * ((_2439 * _2462) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2098 * _2462) + _2425) * _2439))) * _2439;
        float _4399 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2474 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2448 / ((_2452 * _2452) * 3.141590118408203125));
        float _2475 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2395 = (((_2461 * cbLight._m0[_2410].x) * _2474) * _2475) + _2285;
        _2397 = (((_2461 * cbLight._m0[_2410].y) * _2474) * _2475) + _2287;
        _2399 = (((_2461 * cbLight._m0[_2410].z) * _2474) * _2475) + _2289;
    }
    float _2610;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    if (_1927.y == 0u)
    {
        float _2550 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2551 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2550;
        float _2552 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2550;
        float _2553 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2550;
        uvec4 _2565 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2566 = _2565.x;
        uint _2577 = uint((float(_2565.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2566))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2566)));
        float _2587 = (log2(_2553 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2588 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        uint _2591 = uint(isnan(14.0) ? _2588 : (isnan(_2588) ? 14.0 : min(_2588, 14.0)));
        uvec4 _2596 = texelFetch(g_lightClusterGridBuffer, int(((_2591 << 2u) + (_2577 << 6u)) >> 2u));
        uint _2597 = _2596.x;
        uint _2598 = _2565.z;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        float _2753;
        if (((((1u << ((_2598 >> 4u) & 15u)) + 4294967295u) & _2597) == 0u) || ((_2598 & 240u) == 0u))
        {
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
            _2753 = 0.0;
        }
        else
        {
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2754;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            uint _2902 = 0u;
            uint _2911;
            bool _2912;
            for (;;)
            {
                _2911 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_2902 << 2u)) >> 2u)).x;
                _2912 = _2911 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2912)
                {
                    frontier_phi_61_pred = _2896;
                    frontier_phi_61_pred_1 = _2901;
                    frontier_phi_61_pred_2 = _2900;
                    frontier_phi_61_pred_3 = _2899;
                    frontier_phi_61_pred_4 = _2898;
                    frontier_phi_61_pred_5 = _2897;
                }
                else
                {
                    float _3020;
                    float _3021;
                    float _3022;
                    float _3023;
                    float _3024;
                    float _3025;
                    uint _3026;
                    _3020 = _2896;
                    _3021 = _2897;
                    _3022 = _2898;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2911;
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    for (;;)
                    {
                        uint _3030 = uint(findLSB(_3026)) + (_2902 << 5u);
                        uint _3027 = (_3026 + 4294967295u) & _3026;
                        uint _3032 = _3030 * 48u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 3u)).x));
                        uint _3052 = (_3030 * 48u) + 4u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3071 = (_3030 * 48u) + 8u;
                        vec3 _3082 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x));
                        float _3086 = _3046.x - _2551;
                        float _3087 = _3046.y - _2552;
                        float _3088 = _3046.z - _2553;
                        float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                        float _3092 = inversesqrt(_3089);
                        float _3093 = _3092 * _3086;
                        float _3094 = _3092 * _3087;
                        float _3095 = _3092 * _3088;
                        float _3096 = dot(vec3(_832, _835, _838), vec3(_3093, _3094, _3095));
                        float _3101 = 1.0 - (_3089 * _3046.w);
                        float _4425 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                        float _3102 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3103 = sqrt(_3089) * _3065.w;
                        float _3106 = 1.39999997615814208984375 / (_3103 + 1.39999997615814208984375);
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3096) + _3107;
                        float _3113 = _3103 * _3103;
                        float _3117 = ((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3102) / ((_3113 * 0.699999988079071044921875) + 1.0);
                        float _3121 = (-0.0) - _2551;
                        float _3122 = (-0.0) - _2552;
                        float _3123 = (-0.0) - _2553;
                        float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                        float _3128 = _3127 * _3121;
                        float _3129 = _3127 * _3122;
                        float _3130 = _3127 * _3123;
                        float _3138 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                        float _3139 = 1.0 - _892;
                        float _3146 = sqrt(1.0 - ((1.0 - (_3139 * _3139)) * (1.0 - (_3138 * _3138))));
                        float _3147 = _3146 * _3146;
                        float _3148 = _3147 * _3147;
                        float _3149 = _3128 + _3093;
                        float _3150 = _3129 + _3094;
                        float _3151 = _3130 + _3095;
                        float _3155 = inversesqrt(dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151)));
                        float _3159 = dot(vec3(_832, _835, _838), vec3(_3128, _3129, _3130));
                        float _4441 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3162 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3163 = dot(vec3(_832, _835, _838), vec3(_3155 * _3149, _3155 * _3150, _3155 * _3151));
                        float _4452 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3166 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3170 = ((_3166 * _3166) * (_3148 + (-1.0))) + 1.0;
                        float _3171 = _3106 * _3147;
                        float _3172 = _3171 * _3171;
                        float _3175 = ((1.0 - _3172) * _3096) + _3172;
                        float _4463 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3177 = 1.0 - _3147;
                        float _3187 = (0.5 / (((_3176 * ((_3162 * _3177) + _3147)) + 9.9999999392252902907785028219223e-09) + (((_3176 * _3177) + _3147) * _3162))) * _3176;
                        float _4474 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3198 = (((_3148 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3170 * _3170) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125))) * _3102;
                        _2955 = (_3117 * _3065.x) + _3023;
                        _2956 = (_3117 * _3065.y) + _3024;
                        _2957 = (_3117 * _3065.z) + _3025;
                        _2952 = (_3198 * _3082.x) + _3020;
                        _2953 = (_3198 * _3082.y) + _3021;
                        _2954 = (_3198 * _3082.z) + _3022;
                        if (_3027 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3020 = _2952;
                            _3021 = _2953;
                            _3022 = _2954;
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _3027;
                        }
                    }
                    frontier_phi_61_pred = _2952;
                    frontier_phi_61_pred_1 = _2957;
                    frontier_phi_61_pred_2 = _2956;
                    frontier_phi_61_pred_3 = _2955;
                    frontier_phi_61_pred_4 = _2954;
                    frontier_phi_61_pred_5 = _2953;
                }
                _2744 = frontier_phi_61_pred;
                _2754 = frontier_phi_61_pred_1;
                _2752 = frontier_phi_61_pred_2;
                _2750 = frontier_phi_61_pred_3;
                _2748 = frontier_phi_61_pred_4;
                _2746 = frontier_phi_61_pred_5;
                uint _2903 = _2902 + 1u;
                if (_2903 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2896 = _2744;
                    _2897 = _2746;
                    _2898 = _2748;
                    _2899 = _2750;
                    _2900 = _2752;
                    _2901 = _2754;
                    _2902 = _2903;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
            _2753 = _2754;
        }
        uvec4 _2757 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2758 = _2757.z;
        uint _2760 = (_2758 >> 8u) & 15u;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((4294967295u << _2760) & _2597) == 0u)
        {
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
            _2874 = _2753;
        }
        else
        {
            float _2889 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
            float _2890 = _2889 * _2551;
            float _2891 = _2889 * _2552;
            float _2892 = _2889 * _2553;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2760 < ((_2758 >> 12u) & 15u))
            {
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _2875;
                float _3003 = _2743;
                float _3004 = _2745;
                float _3005 = _2747;
                float _3006 = _2749;
                float _3007 = _2751;
                float _3008 = _2753;
                uint _3009 = _2760;
                uint _3018;
                bool _3019;
                for (;;)
                {
                    _3018 = texelFetch(g_lightClassification, int((((_2591 << 5u) + (_2577 << 9u)) + (_3009 << 2u)) >> 2u)).x;
                    _3019 = _3018 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3019)
                    {
                        frontier_phi_67_pred = _3006;
                        frontier_phi_67_pred_1 = _3007;
                        frontier_phi_67_pred_2 = _3008;
                        frontier_phi_67_pred_3 = _3005;
                        frontier_phi_67_pred_4 = _3004;
                        frontier_phi_67_pred_5 = _3003;
                    }
                    else
                    {
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3216 = _3003;
                        float _3217 = _3004;
                        float _3218 = _3005;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        uint _3222 = _3018;
                        uint _3223;
                        vec4 _3248;
                        float _3249;
                        vec4 _3264;
                        vec3 _3276;
                        vec4 _3291;
                        vec4 _3306;
                        float _3353;
                        bool _3354;
                        for (;;)
                        {
                            uint _3233 = ((_3009 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3222));
                            _3223 = (_3222 + 4294967295u) & _3222;
                            uint _3235 = _3233 * 40u;
                            _3248 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 3u)).x));
                            _3249 = _3248.w;
                            uint _3251 = (_3233 * 40u) + 4u;
                            _3264 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3251)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3251 + 3u)).x));
                            uint _3266 = (_3233 * 40u) + 8u;
                            _3276 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x));
                            uint _3278 = (_3233 * 40u) + 16u;
                            _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3293 = (_3233 * 40u) + 20u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            uint _3309 = (_3233 * 40u) + 24u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            uint _3328 = (_3233 * 40u) + 28u;
                            vec4 _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            _3353 = fma(_2553, _3341.z, fma(_2552, _3341.y, _3341.x * _2551)) + _3341.w;
                            _3354 = !((fma(_2553, _3322.z, fma(_2552, _3322.y, _3322.x * _2551)) + _3322.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3354)
                            {
                                float _3381 = _3248.x - _2551;
                                float _3382 = _3248.y - _2552;
                                float _3383 = _3248.z - _2553;
                                float _3384 = dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383));
                                float _3387 = inversesqrt(_3384);
                                float _3388 = _3387 * _3381;
                                float _3389 = _3387 * _3382;
                                float _3390 = _3387 * _3383;
                                float _3394 = 1.0 - (_3384 / (_3249 * _3249));
                                float _4485 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                                float _3395 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3399 = sqrt(_3384) * _3264.w;
                                float _3401 = 1.39999997615814208984375 / (_3399 + 1.39999997615814208984375);
                                float _3402 = _3401 * _3401;
                                float _3405 = ((1.0 - _3402) * dot(vec3(_3388, _3389, _3390), vec3(_832, _835, _838))) + _3402;
                                float _3408 = _3399 * _3399;
                                float _3412 = (fma(_2553, _3291.z, fma(_2552, _3291.y, _3291.x * _2551)) + _3291.w) / _3353;
                                float _3413 = (fma(_2553, _3306.z, fma(_2552, _3306.y, _3306.x * _2551)) + _3306.w) / _3353;
                                float _3417 = 1.0 - dot(vec2(_3412, _3413), vec2(_3412, _3413));
                                float _4501 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3419 = _3418 * (((isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0))) * _3395) / ((_3408 * 0.699999988079071044921875) + 1.0));
                                float _3431 = exp2(log2(1.0 / ((_3408 * 3.5) + 5.0)) * 0.25);
                                float _3432 = 1.0 - _892;
                                float _3439 = sqrt(1.0 - ((1.0 - (_3432 * _3432)) * (1.0 - (_3431 * _3431))));
                                float _3440 = _3439 * _3439;
                                float _3441 = _3440 * _3440;
                                float _3442 = _3388 - _2890;
                                float _3443 = _3389 - _2891;
                                float _3444 = _3390 - _2892;
                                float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                                float _3452 = dot(vec3(_832, _835, _838), vec3((-0.0) - _2890, (-0.0) - _2891, (-0.0) - _2892));
                                float _4512 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3455 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3456 = dot(vec3(_832, _835, _838), vec3(_3448 * _3442, _3448 * _3443, _3448 * _3444));
                                float _4523 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3459 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3463 = ((_3459 * _3459) * (_3441 + (-1.0))) + 1.0;
                                float _3464 = _3401 * _3440;
                                float _3465 = _3464 * _3464;
                                float _3471 = ((1.0 - _3465) * dot(vec3(_832, _835, _838), vec3(_3388, _3389, _3390))) + _3465;
                                float _4534 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3473 = 1.0 - _3440;
                                float _3483 = (0.5 / (((_3472 * ((_3455 * _3473) + _3440)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3440) * _3455))) * _3472;
                                float _4545 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                                float _3493 = (_3418 * _3395) * (((_3441 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3463 * _3463) * ((_3408 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3493 * _3276.x;
                                frontier_phi_73_pred_1 = _3493 * _3276.y;
                                frontier_phi_73_pred_2 = _3419 * _3264.z;
                                frontier_phi_73_pred_3 = _3419 * _3264.y;
                                frontier_phi_73_pred_4 = _3419 * _3264.x;
                                frontier_phi_73_pred_5 = _3493 * _3276.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3497 = frontier_phi_73_pred;
                            _3498 = frontier_phi_73_pred_1;
                            _3502 = frontier_phi_73_pred_2;
                            _3501 = frontier_phi_73_pred_3;
                            _3500 = frontier_phi_73_pred_4;
                            _3499 = frontier_phi_73_pred_5;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            _3203 = _3497 + _3216;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            if (_3223 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3223;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3206;
                        frontier_phi_67_pred_1 = _3207;
                        frontier_phi_67_pred_2 = _3208;
                        frontier_phi_67_pred_3 = _3205;
                        frontier_phi_67_pred_4 = _3204;
                        frontier_phi_67_pred_5 = _3203;
                    }
                    _2871 = frontier_phi_67_pred;
                    _2873 = frontier_phi_67_pred_1;
                    _2875 = frontier_phi_67_pred_2;
                    _2869 = frontier_phi_67_pred_3;
                    _2867 = frontier_phi_67_pred_4;
                    _2865 = frontier_phi_67_pred_5;
                    uint _3010 = _3009 + 1u;
                    if (_3010 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3003 = _2865;
                        _3004 = _2867;
                        _3005 = _2869;
                        _3006 = _2871;
                        _3007 = _2873;
                        _3008 = _2875;
                        _3009 = _3010;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2873;
                frontier_phi_55_56_ladder_1 = _2875;
                frontier_phi_55_56_ladder_2 = _2871;
                frontier_phi_55_56_ladder_3 = _2869;
                frontier_phi_55_56_ladder_4 = _2867;
                frontier_phi_55_56_ladder_5 = _2865;
            }
            else
            {
                frontier_phi_55_56_ladder = _2751;
                frontier_phi_55_56_ladder_1 = _2753;
                frontier_phi_55_56_ladder_2 = _2749;
                frontier_phi_55_56_ladder_3 = _2747;
                frontier_phi_55_56_ladder_4 = _2745;
                frontier_phi_55_56_ladder_5 = _2743;
            }
            _2864 = frontier_phi_55_56_ladder_5;
            _2866 = frontier_phi_55_56_ladder_4;
            _2868 = frontier_phi_55_56_ladder_3;
            _2870 = frontier_phi_55_56_ladder_2;
            _2872 = frontier_phi_55_56_ladder;
            _2874 = frontier_phi_55_56_ladder_1;
        }
        float _2879 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
        _2610 = (_2879 * _2870) + _2062;
        _2612 = (_2879 * _2872) + _2064;
        _2614 = (_2879 * _2874) + _2066;
        _2616 = ((_2864 * 0.039999999105930328369140625) * _2879) + _2395;
        _2618 = ((_2866 * 0.039999999105930328369140625) * _2879) + _2397;
        _2620 = ((_2868 * 0.039999999105930328369140625) * _2879) + _2399;
    }
    else
    {
        _2610 = _2062;
        _2612 = _2064;
        _2614 = _2066;
        _2616 = _2395;
        _2618 = _2397;
        _2620 = _2399;
    }
    uint _2626 = _852 + uint(cbMatDynParam._m0[0u].w);
    float _2632 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2638 = (((((_2632 * cbMtdParam._m0[14u].x) * _584.x) * _607) * _686) * (((1.0 - _660) * cbMtdParam._m0[20u].w) + _660)) * cbInstanceData._m0[_2626].x;
    float _2644 = (((((_2632 * cbMtdParam._m0[14u].y) * _584.y) * _607) * _686) * (((1.0 - _662) * cbMtdParam._m0[20u].w) + _662)) * cbInstanceData._m0[_2626].y;
    float _2650 = (((((_2632 * cbMtdParam._m0[14u].z) * _584.z) * _607) * _686) * (((1.0 - _664) * cbMtdParam._m0[20u].w) + _664)) * cbInstanceData._m0[_2626].z;
    float _4561 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4572 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4583 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _2667 = (((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2610 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _876))) + ((_2616 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1682)) * cbPerFrame._m0[3u].x)) + _2638;
    float _2669 = (_2644 + ((_2618 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1682)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2612 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _876)));
    float _2671 = (_2650 + ((_2620 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1682)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2614 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _876)));
    float _4609 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2684 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    uint _2685 = _851 + 6u;
    float _2693 = _812 / cbSceneParam._m0[86u].x;
    float _2694 = _813 / cbSceneParam._m0[86u].y;
    vec4 _2708 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, (log2((isnan(cbSceneParam._m0[77u].w) ? _746 : (isnan(_746) ? cbSceneParam._m0[77u].w : min(_746, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2710 = _2708.x;
    float _2711 = _2708.y;
    float _2712 = _2708.z;
    float _2713 = _2708.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_746 > cbSceneParam._m0[78u].w)
    {
        float _2768 = isnan(_746) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _746 : min(cbSceneParam._m0[80u].w, _746));
        float _2769 = _2768 / _746;
        float _2780 = _2769 * _797;
        float _2781 = _798 * _2769;
        float _2782 = (-0.0) - _2781;
        float _2783 = _2769 * _799;
        float _2785 = (cbSceneParam._m0[77u].w * _2782) / _2768;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2781;
        float _2793 = sqrt(((_2780 * _2780) + (_2781 * _2781)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2768)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2965;
        if (abs((_2782 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2965 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2925 = 1.0 / cbSceneParam._m0[80u].x;
            float _2926 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2927 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            float _2937 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : min(_2927, 0.0));
            _2965 = ((abs(_2793 / _2782) * cbSceneParam._m0[80u].y) * ((((_2936 - _2937) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))))) * _2925)) - ((exp2(_2803 * _2936) - exp2(_2803 * _2937)) * _2925))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2967 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2693, _2694, 1.0), 0.0);
        float _2976 = exp2((_2965 * (-1.44269502162933349609375)) * (1.0 - _2967.w));
        float _2977 = log2(_2976);
        float _2993 = log2(_2713);
        _2805 = (exp2(_2993 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].x)) * _2967.x) / cbSceneParam._m0[78u].x)) + _2710;
        _2807 = (exp2(_2993 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].y)) * _2967.y) / cbSceneParam._m0[78u].y)) + _2711;
        _2809 = (exp2(_2993 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2977 * cbSceneParam._m0[78u].z)) * _2967.z) / cbSceneParam._m0[78u].z)) + _2712;
        _2811 = _2976 * _2713;
    }
    else
    {
        _2805 = _2710;
        _2807 = _2711;
        _2809 = _2712;
        _2811 = _2713;
    }
    float _2823 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2824 = _2823 == 3.0;
    float _2825 = log2(_2811);
    float _2829 = exp2(_2825 * cbSceneParam._m0[78u].x);
    float _2830 = exp2(_2825 * cbSceneParam._m0[78u].y);
    float _2831 = exp2(_2825 * cbSceneParam._m0[78u].z);
    float _2832 = _2829 * (isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0)));
    float _2833 = _2830 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0)));
    float _2834 = _2831 * (isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0)));
    float _2843 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2843 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
    SV_Target.y = _2843 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
    SV_Target.z = _2843 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
    SV_Target.w = cbInstanceData._m0[_2685].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2638) * _2684) * _2829) * _2843;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2644) * _2684) * _2830) * _2843;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2650) * _2684) * _2831) * _2843;
    SV_Target_1.w = cbInstanceData._m0[_2685].w;
}


