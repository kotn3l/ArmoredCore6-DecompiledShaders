#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1298;
float _3736;
float _3737;
float _3738;
float _3739;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _287 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _306 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _343 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _306.x) * 2.0) - _333)) + 1.0;
    float _3748 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _344 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _351 = (_344 * ((_287.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _352 = (_344 * ((_287.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _353 = (_344 * ((_287.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _372 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _385 = (((((1.0 - _306.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3759 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _351) * _386) + _351;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _413 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _426 = (((((1.0 - _306.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3770 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    vec4 _455 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _463 = ((((((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _455.x;
    float _466 = ((((_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _455.y;
    float _469 = ((((_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _455.z;
    vec4 _482 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _496 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    vec4 _512 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _523 = ((_512.x - _498) * _344) + _498;
    float _524 = ((_512.y - _499) * _344) + _499;
    float _525 = ((_512.z - _500) * _344) + _500;
    vec4 _538 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _549 = ((_538.x - _523) * _386) + _523;
    float _550 = ((_538.y - _524) * _386) + _524;
    float _551 = ((_538.z - _525) * _386) + _525;
    vec4 _564 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _577 = ((_564.z - _551) * _427) + _551;
    float _580 = ((((_564.x - _549) * _427) + _549) * 2.0) + (-1.0);
    float _582 = ((((_564.y - _550) * _427) + _550) * 2.0) + (-1.0);
    float _583 = dot(vec2(_580, _582), vec2(_580, _582));
    float _3781 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0))));
    vec4 _621 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _635 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3792 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _636 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _644 = (((_636 * _636) * (3.0 - (_636 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _652 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _660 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3803 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _661 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _665 = (_661 * _661) * (3.0 - (_661 * 2.0));
    float _666 = _665 * cbMtdParam._m0[22u].x;
    float _667 = _665 * cbMtdParam._m0[22u].y;
    float _668 = sin(_652);
    float _669 = cos(_652);
    float _670 = TEXCOORD.z - _666;
    float _671 = TEXCOORD.w - _667;
    vec4 _691 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_666 + fma(_671, (-0.0) - _668, _670 * _669))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_671, _669, _670 * _668) + _667)) + cbTextureTilingScale._m0[2u].w));
    float _697 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _691.x;
    float _699 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _691.y;
    float _701 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _691.z;
    float _722 = (TEXCOORD_5.x - (((_482.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3814 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _723 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _726 = fma(_588, _231 * NORMAL.x, fma(_582, _238 * TANGENT.x, (_224 * _216) * _580));
    float _729 = fma(_588, _231 * NORMAL.y, fma(_582, _238 * TANGENT.y, (_224 * _217) * _580));
    float _732 = fma(_588, _231 * NORMAL.z, fma(_582, _238 * TANGENT.z, (_224 * _218) * _580));
    float _736 = inversesqrt(dot(vec3(_726, _729, _732), vec3(_726, _729, _732)));
    float _737 = _736 * _726;
    float _738 = _736 * _729;
    float _739 = _736 * _732;
    float _3825 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _740 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _3836 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3847 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _3858 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _759 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _809 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _799);
    float _810 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _799);
    float _811 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _799);
    float _815 = inversesqrt(dot(vec3(_809, _810, _811), vec3(_809, _810, _811)));
    float _816 = _809 * _815;
    float _817 = _810 * _815;
    float _818 = _811 * _815;
    vec4 _823 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _825 = _823.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _978 = sqrt(((_809 * _809) + (_810 * _810)) + (_811 * _811));
        float _984 = (cbMatDynParam._m0[5u].x * _978) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _989 = (cbMatDynParam._m0[5u].z * _978) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _985)) + _985) < ((_825 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _855 = fma(_739, cbSceneParam._m0[5u].z, fma(_738, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _737));
    float _858 = fma(_739, cbSceneParam._m0[6u].z, fma(_738, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _737));
    float _861 = fma(_739, cbSceneParam._m0[7u].z, fma(_738, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _737));
    uint _874 = uint(roundEven(NORMAL.w)) * 13u;
    uint _875 = _874 + 9u;
    uint _876 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3891 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _899 = _896.x * TEXCOORD_5.w;
    float _900 = dot(vec3(_737, _738, _739), vec3(_816, _817, _818));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _737) - _816;
    float _908 = (_903 * _738) - _817;
    float _909 = (_903 * _739) - _818;
    float _913 = abs(dot(vec3(_816, _817, _818), vec3(_737, _738, _739)));
    float _3924 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_740);
    float _927 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _963 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _967 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1297;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1022 = fma(_967, cbModelParam._m0[26u].z, fma(_963, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _959));
        float _1026 = fma(_967, cbModelParam._m0[27u].z, fma(_963, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _959));
        float _1030 = fma(_967, cbModelParam._m0[28u].z, fma(_963, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _959));
        float _1055 = _959 + _737;
        float _1056 = _963 + _738;
        float _1057 = _967 + _739;
        float _1067 = fma(_1057, cbModelParam._m0[26u].z, fma(_1056, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1055)) - _1022;
        float _1068 = fma(_1057, cbModelParam._m0[27u].z, fma(_1056, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1055)) - _1026;
        float _1069 = fma(_1057, cbModelParam._m0[28u].z, fma(_1056, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1055)) - _1030;
        float _1073 = inversesqrt(dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069)));
        float _1086 = ((_1073 * _1067) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1022 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1073 * _1068) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1026 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1088 = ((_1073 * _1069) / cbModelParam._m0[34u].z) + ((((((_1030 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1086, _1087, _1088), 0.0);
        float _1125 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1091.x + (-0.5));
        float _1127 = _1125 * (_1091.y + (-0.5));
        float _1128 = _1125 * (_1091.z + (-0.5));
        float _1135 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1098.x + (-0.5));
        float _1137 = _1135 * (_1098.y + (-0.5));
        float _1138 = _1135 * (_1098.z + (-0.5));
        float _1145 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1105.x + (-0.5));
        float _1147 = _1145 * (_1105.y + (-0.5));
        float _1148 = _1145 * (_1105.z + (-0.5));
        float _1155 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1112.x + (-0.5));
        float _1157 = _1155 * (_1112.y + (-0.5));
        float _1158 = _1155 * (_1112.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1179 = (dot(vec3(_737, _738, _739), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1189 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3972 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1191 + 1.0))) + _1196) * _1159;
        float _1206 = _1127 * 0.5;
        float _1207 = _1137 * 0.5;
        float _1208 = _1147 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_737, _738, _739), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4005 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1233 + 1.0))) + _1238) * _1160;
        float _1248 = _1128 * 0.5;
        float _1249 = _1138 * 0.5;
        float _1250 = _1148 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_737, _738, _739), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4038 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1275 + 1.0))) + _1280) * _1161;
        _1297 = _1128;
        _1299 = _1127;
        _1300 = _1126;
        _1301 = _1138;
        _1302 = _1137;
        _1303 = _1136;
        _1304 = _1148;
        _1305 = _1147;
        _1306 = _1146;
        _1307 = _1161;
        _1308 = _1160;
        _1309 = _1159;
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1312 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _1298;
        _1299 = _1298;
        _1300 = _1298;
        _1301 = _1298;
        _1302 = _1298;
        _1303 = _1298;
        _1304 = _1298;
        _1305 = _1298;
        _1306 = _1298;
        _1307 = _1298;
        _1308 = _1298;
        _1309 = _1298;
        _1310 = 0.0;
        _1311 = 0.0;
        _1312 = 0.0;
    }
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1341 = fma(_967, cbModelParam._m0[30u].z, fma(_963, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _959));
        float _1345 = fma(_967, cbModelParam._m0[31u].z, fma(_963, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _959));
        float _1349 = fma(_967, cbModelParam._m0[32u].z, fma(_963, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _959));
        float _1372 = _959 + _737;
        float _1373 = _963 + _738;
        float _1374 = _967 + _739;
        float _1384 = fma(_1374, cbModelParam._m0[30u].z, fma(_1373, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1372)) - _1341;
        float _1385 = fma(_1374, cbModelParam._m0[31u].z, fma(_1373, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1372)) - _1345;
        float _1386 = fma(_1374, cbModelParam._m0[32u].z, fma(_1373, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1372)) - _1349;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1403 = ((_1390 * _1384) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1341 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1385) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1345 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1390 * _1386) / cbModelParam._m0[35u].z) + ((((((_1349 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1403, _1404, _1405), 0.0);
        float _1440 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1407.x + (-0.5));
        float _1442 = _1440 * (_1407.y + (-0.5));
        float _1443 = _1440 * (_1407.z + (-0.5));
        float _1450 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1414.x + (-0.5));
        float _1452 = _1450 * (_1414.y + (-0.5));
        float _1453 = _1450 * (_1414.z + (-0.5));
        float _1460 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1421.x + (-0.5));
        float _1462 = _1460 * (_1421.y + (-0.5));
        float _1463 = _1460 * (_1421.z + (-0.5));
        float _1470 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1428.x + (-0.5));
        float _1472 = _1470 * (_1428.y + (-0.5));
        float _1473 = _1470 * (_1428.z + (-0.5));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = _1441 * 0.5;
        float _1478 = _1451 * 0.5;
        float _1479 = _1461 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_737, _738, _739), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4101 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1504 + 1.0))) + _1509) * _1474;
        float _1519 = _1442 * 0.5;
        float _1520 = _1452 * 0.5;
        float _1521 = _1462 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_737, _738, _739), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _4134 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1546 + 1.0))) + _1551) * _1475;
        float _1561 = _1443 * 0.5;
        float _1562 = _1453 * 0.5;
        float _1563 = _1463 * 0.5;
        float _1564 = dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563));
        float _1569 = (_1564 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1564);
        float _1577 = (dot(vec3(_737, _738, _739), vec3(_1569 * _1561, _1569 * _1562, _1569 * _1563)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1586 = sqrt(((_1562 * _1562) + (_1561 * _1561)) + (_1563 * _1563)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1588 = _1587 * 2.0;
        float _1592 = (1.0 - _1587) / (_1587 + 1.0);
        float _4167 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1602 = ((((1.0 - _1593) * (_1588 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1588 + 1.0))) + _1593) * _1476;
        _1610 = _1443;
        _1611 = _1442;
        _1612 = _1441;
        _1613 = _1453;
        _1614 = _1452;
        _1615 = _1451;
        _1616 = _1463;
        _1617 = _1462;
        _1618 = _1461;
        _1619 = _1476;
        _1620 = _1475;
        _1621 = _1474;
        _1622 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1623 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
        _1624 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0)));
    }
    else
    {
        _1610 = _1298;
        _1611 = _1298;
        _1612 = _1298;
        _1613 = _1298;
        _1614 = _1298;
        _1615 = _1298;
        _1616 = _1298;
        _1617 = _1298;
        _1618 = _1298;
        _1619 = _1298;
        _1620 = _1298;
        _1621 = _1298;
        _1622 = 0.0;
        _1623 = 0.0;
        _1624 = 0.0;
    }
    float _1634 = (cbModelParam._m0[1u].x * (_1622 - _1310)) + _1310;
    float _1635 = (cbModelParam._m0[1u].x * (_1623 - _1311)) + _1311;
    float _1636 = (cbModelParam._m0[1u].x * (_1624 - _1312)) + _1312;
    float _1657 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1634));
    float _1678 = _907 * 0.5;
    float _1679 = _908 * 0.5;
    float _1680 = _909 * 0.5;
    float _1681 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1612, _1615, _1618, _1621));
    float _1684 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1611, _1614, _1617, _1620));
    float _1687 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1610, _1613, _1616, _1619));
    float _1721;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1694 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1297, _1301, _1304, _1307));
        float _1698 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1702 = dot(vec4(_1678, _1679, _1680, 1.0), vec4(_1300, _1303, _1306, _1309));
        float _1709 = dot(vec4(cbModelParam._m0[39u]), vec4(_1678, _1679, _1680, 1.0));
        _1721 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1709) ? 0.0 : (isnan(0.0) ? _1709 : max(0.0, _1709))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1721 = 1.0;
    }
    float _1732;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1723 = dot(vec4(cbModelParam._m0[40u]), vec4(_1678, _1679, _1680, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0)), isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)), isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1723) ? 0.0 : (isnan(0.0) ? _1723 : max(0.0, _1723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1736 = (_1732 * cbModelParam._m0[1u].x) + (_1721 * (1.0 - cbModelParam._m0[1u].x));
    float _1746 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _740);
    float _1747 = isnan(_1746) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1746 : min(cbModelParam._m0[25u].z, _1746));
    float _1827;
    float _1829;
    float _1831;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1794 = fma(_967, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _959)) + cbModelParam._m0[13u].w;
        float _1798 = fma(_967, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _959)) + cbModelParam._m0[14u].w;
        float _1802 = fma(_967, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _959)) + cbModelParam._m0[15u].w;
        float _1805 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1808 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1811 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1839;
        if (_1805 > 0.0)
        {
            _1839 = abs((1.0 - _1794) / _1805);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1794 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1839 = frontier_phi_17_15_ladder;
        }
        float _2061;
        if (_1808 > 0.0)
        {
            _2061 = abs((1.0 - _1798) / _1808);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1808 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1798 + 1.0) / _1808);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2061 = frontier_phi_26_22_ladder;
        }
        float _2307;
        if (_1811 > 0.0)
        {
            _2307 = abs((1.0 - _1802) / _1811);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1811 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1802 + 1.0) / _1811);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2307 = frontier_phi_38_33_ladder;
        }
        float _2309 = isnan(_2061) ? _1839 : (isnan(_1839) ? _2061 : min(_1839, _2061));
        float _2310 = isnan(_2307) ? _2309 : (isnan(_2309) ? _2307 : min(_2309, _2307));
        float _2314 = (_2310 * _1805) + _1794;
        float _2315 = (_2310 * _1808) + _1798;
        float _2316 = (_2310 * _1811) + _1802;
        float _2317 = _2310 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2317;
        float _2321 = _2317 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 > _2321) || ((_2315 < _2319) || ((_2314 < _2319) || (_2314 > _2321))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2440 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2316, cbModelParam._m0[9u].z, fma(_2315, cbModelParam._m0[9u].y, _2314 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2316, cbModelParam._m0[10u].z, fma(_2315, cbModelParam._m0[10u].y, _2314 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2316, cbModelParam._m0[11u].z, fma(_2315, cbModelParam._m0[11u].y, _2314 * cbModelParam._m0[11u].x))), _1747);
            frontier_phi_16_38_ladder = _2440.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2440.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2440.x * cbModelParam._m0[1u].y;
        }
        _1827 = frontier_phi_16_38_ladder_2;
        _1829 = frontier_phi_16_38_ladder_1;
        _1831 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1815 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1747);
        _1827 = _1815.x * cbModelParam._m0[1u].y;
        _1829 = _1815.y * cbModelParam._m0[1u].y;
        _1831 = _1815.z * cbModelParam._m0[1u].y;
    }
    float _1835 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _740);
    float _1836 = isnan(_1835) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1835 : min(cbModelParam._m0[25u].w, _1835));
    float _1925;
    float _1927;
    float _1929;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1889 = fma(_967, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _959)) + cbModelParam._m0[21u].w;
        float _1893 = fma(_967, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _959)) + cbModelParam._m0[22u].w;
        float _1897 = fma(_967, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _959)) + cbModelParam._m0[23u].w;
        float _1900 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1903 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1906 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2066;
        if (_1900 > 0.0)
        {
            _2066 = abs((1.0 - _1889) / _1900);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1889 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2066 = frontier_phi_28_24_ladder;
        }
        float _2334;
        if (_1903 > 0.0)
        {
            _2334 = abs((1.0 - _1893) / _1903);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1903 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1893 + 1.0) / _1903);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2334 = frontier_phi_40_35_ladder;
        }
        float _2539;
        if (_1906 > 0.0)
        {
            _2539 = abs((1.0 - _1897) / _1906);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1897 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2539 = frontier_phi_49_46_ladder;
        }
        float _2541 = isnan(_2334) ? _2066 : (isnan(_2066) ? _2334 : min(_2066, _2334));
        float _2542 = isnan(_2539) ? _2541 : (isnan(_2541) ? _2539 : min(_2541, _2539));
        float _2546 = (_2542 * _1900) + _1889;
        float _2547 = (_2542 * _1903) + _1893;
        float _2548 = (_2542 * _1906) + _1897;
        float _2549 = _2542 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2549;
        float _2552 = _2549 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2548 > _2552) || ((_2548 < _2550) || ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 < _2550) || (_2546 > _2552))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2548, cbModelParam._m0[17u].z, fma(_2547, cbModelParam._m0[17u].y, _2546 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2548, cbModelParam._m0[18u].z, fma(_2547, cbModelParam._m0[18u].y, _2546 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2548, cbModelParam._m0[19u].z, fma(_2547, cbModelParam._m0[19u].y, _2546 * cbModelParam._m0[19u].x))), _1836);
            frontier_phi_25_49_ladder = _2792.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2792.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2792.x * cbModelParam._m0[1u].z;
        }
        _1925 = frontier_phi_25_49_ladder_2;
        _1927 = frontier_phi_25_49_ladder_1;
        _1929 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1909 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1836);
        _1925 = _1909.x * cbModelParam._m0[1u].z;
        _1927 = _1909.y * cbModelParam._m0[1u].z;
        _1929 = _1909.z * cbModelParam._m0[1u].z;
    }
    float _1941 = ((((1.0 - _927) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_927 * _915)) * _899;
    float _1942 = _1941 * ((cbModelParam._m0[1u].w * (_1925 - _1827)) + _1827);
    float _1943 = _1941 * ((cbModelParam._m0[1u].w * (_1927 - _1829)) + _1829);
    float _1944 = _1941 * ((cbModelParam._m0[1u].w * (_1929 - _1831)) + _1831);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, _1942 * cbSceneParam._m0[91u].x));
    vec4 _1961 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_836, _837));
    float _1963 = _1961.w;
    float _1975 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1963);
    float _1976 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1963);
    float _1977 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1963);
    uvec4 _1981 = floatBitsToUint(cbInstanceData._m0[_874 + 5u]);
    uint _1983 = _1981.x * 14u;
    uint _1984 = _1983 + 13u;
    float _1991 = _899 + (-1.0);
    float _1996 = (cbLight._m0[_1984].x * _1991) + 1.0;
    float _1997 = (cbLight._m0[_1984].y * _1991) + 1.0;
    float _1998 = (cbLight._m0[_1984].z * _1991) + 1.0;
    float _1999 = (cbLight._m0[_1984].w * _1991) + 1.0;
    uint _2000 = _1983 + 5u;
    float _2006 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2010 = _1983 + 4u;
    float _2020 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
    uint _2024 = _1983 | 1u;
    float _2035 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_737, _738, _739));
    float _2038 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_737, _738, _739));
    float _4303 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _4314 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2043 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2045 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2052 = ((cbLight._m0[_2000].x * _2006) * _2045) + (((cbLight._m0[_2010].x * _1975) * _2020) * _2043);
    float _2053 = ((_2006 * cbLight._m0[_2000].y) * _2045) + (((cbLight._m0[_2010].y * _1976) * _2020) * _2043);
    float _2054 = ((_2006 * cbLight._m0[_2000].z) * _2045) + (((cbLight._m0[_2010].z * _1977) * _2020) * _2043);
    uvec4 _2058 = floatBitsToUint(cbLight._m0[_1983 + 12u]);
    bool _2060 = _2058.x == 0u;
    float _2071;
    float _2073;
    float _2075;
    if (_2060)
    {
        _2071 = _2052;
        _2073 = _2053;
        _2075 = _2054;
    }
    else
    {
        uint _2079 = _1983 + 6u;
        float _2095 = (dot(vec3(cbLight._m0[_1983 + 2u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2096 = _2095 * _2095;
        float _4325 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2097 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2098 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2071 = (((cbLight._m0[_2079].x * 0.3183098733425140380859375) * _2097) * _2098) + _2052;
        _2073 = (((cbLight._m0[_2079].y * 0.3183098733425140380859375) * _2097) * _2098) + _2053;
        _2075 = (((cbLight._m0[_2079].z * 0.3183098733425140380859375) * _2097) * _2098) + _2054;
    }
    bool _2078 = _2058.y == 0u;
    float _2116;
    float _2118;
    float _2120;
    if (_2078)
    {
        _2116 = _2071;
        _2118 = _2073;
        _2120 = _2075;
    }
    else
    {
        uint _2278 = _1983 + 7u;
        float _2294 = (dot(vec3(cbLight._m0[_1983 + 3u].xyz), vec3(_737, _738, _739)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4341 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2297 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2116 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2071;
        _2118 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2073;
        _2120 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2075;
    }
    uint _2123 = _1983 + 8u;
    float _2136 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1983].w)) * _740) * 0.949999988079071044921875);
    float _2137 = _2136 * _2136;
    float _2138 = cbLight._m0[_1983].x + _816;
    float _2139 = cbLight._m0[_1983].y + _817;
    float _2140 = cbLight._m0[_1983].z + _818;
    float _2144 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
    float _2145 = _2144 * _2138;
    float _2146 = _2144 * _2139;
    float _2147 = _2144 * _2140;
    float _2148 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_1983].xyz));
    float _4357 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2152 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2153 = dot(vec3(_737, _738, _739), vec3(_2145, _2146, _2147));
    float _4379 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1983].xyz), vec3(_2145, _2146, _2147));
    float _4390 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2137 * _2137;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2176 = (exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2177 = 1.0 - _2137;
    float _2188 = (0.5 / (((_2152 * ((_2151 * _2177) + _2137)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2177) + _2137) * _2151))) * _2151;
    float _4401 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2190 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    uint _2204 = _1983 + 9u;
    float _2215 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _740) * 0.949999988079071044921875);
    float _2216 = _2215 * _2215;
    float _2217 = cbLight._m0[_2024].x + _816;
    float _2218 = cbLight._m0[_2024].y + _817;
    float _2219 = cbLight._m0[_2024].z + _818;
    float _2223 = inversesqrt(dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219)));
    float _2224 = _2223 * _2217;
    float _2225 = _2223 * _2218;
    float _2226 = _2223 * _2219;
    float _2227 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2024].xyz));
    float _4412 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2230 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2231 = dot(vec3(_737, _738, _739), vec3(_2224, _2225, _2226));
    float _4423 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2235 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2224, _2225, _2226));
    float _4434 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2239 = _2216 * _2216;
    float _2243 = ((_2234 * _2234) * (_2239 + (-1.0))) + 1.0;
    float _2252 = (exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2253 = 1.0 - _2216;
    float _2263 = (0.5 / (((_2152 * ((_2230 * _2253) + _2216)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2253) + _2216) * _2230))) * _2230;
    float _4445 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2265 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2239 / ((_2243 * _2243) * 3.141590118408203125));
    float _2275 = (((_2252 * cbLight._m0[_2204].x) * _2265) * _2006) + ((((cbLight._m0[_2123].x * _1975) * _2176) * _2190) * _2020);
    float _2276 = (((_2252 * cbLight._m0[_2204].y) * _2265) * _2006) + ((((cbLight._m0[_2123].y * _1976) * _2176) * _2190) * _2020);
    float _2277 = (((_2252 * cbLight._m0[_2204].z) * _2265) * _2006) + ((((cbLight._m0[_2123].z * _1977) * _2176) * _2190) * _2020);
    float _2339;
    float _2341;
    float _2343;
    if (_2060)
    {
        _2339 = _2275;
        _2341 = _2276;
        _2343 = _2277;
    }
    else
    {
        uint _2345 = _1983 + 2u;
        uint _2349 = _1983 + 10u;
        float _2363 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2345].w)) * _740) * 0.949999988079071044921875);
        float _2364 = _2363 * _2363;
        float _2365 = cbLight._m0[_2345].x + _816;
        float _2366 = cbLight._m0[_2345].y + _817;
        float _2367 = cbLight._m0[_2345].z + _818;
        float _2371 = inversesqrt(dot(vec3(_2365, _2366, _2367), vec3(_2365, _2366, _2367)));
        float _2372 = _2371 * _2365;
        float _2373 = _2371 * _2366;
        float _2374 = _2371 * _2367;
        float _2375 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2345].xyz));
        float _4456 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2378 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2379 = dot(vec3(_737, _738, _739), vec3(_2372, _2373, _2374));
        float _4467 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
        float _2382 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2383 = dot(vec3(cbLight._m0[_2345].xyz), vec3(_2372, _2373, _2374));
        float _4478 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2387 = _2364 * _2364;
        float _2391 = ((_2382 * _2382) * (_2387 + (-1.0))) + 1.0;
        float _2400 = (exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2401 = 1.0 - _2364;
        float _2411 = (0.5 / (((_2152 * ((_2378 * _2401) + _2364)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2401) + _2364) * _2378))) * _2378;
        float _4489 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
        float _2413 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2387 / ((_2391 * _2391) * 3.141590118408203125));
        float _2414 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
        _2339 = (((_2400 * cbLight._m0[_2349].x) * _2413) * _2414) + _2275;
        _2341 = (((_2400 * cbLight._m0[_2349].y) * _2413) * _2414) + _2276;
        _2343 = (((_2400 * cbLight._m0[_2349].z) * _2413) * _2414) + _2277;
    }
    float _2449;
    float _2451;
    float _2453;
    if (_2078)
    {
        _2449 = _2339;
        _2451 = _2341;
        _2453 = _2343;
    }
    else
    {
        uint _2460 = _1983 + 3u;
        uint _2464 = _1983 + 11u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _740) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _816;
        float _2481 = cbLight._m0[_2460].y + _817;
        float _2482 = cbLight._m0[_2460].z + _818;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_737, _738, _739), vec3(cbLight._m0[_2460].xyz));
        float _4505 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2494 = dot(vec3(_737, _738, _739), vec3(_2487, _2488, _2489));
        float _4516 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4527 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2515 = (exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2516 = 1.0 - _2479;
        float _2526 = (0.5 / (((_2152 * ((_2493 * _2516) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2152 * _2516) + _2479) * _2493))) * _2493;
        float _4538 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2528 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2529 = isnan(1.0) ? _1999 : (isnan(_1999) ? 1.0 : min(_1999, 1.0));
        _2449 = (((_2515 * cbLight._m0[_2464].x) * _2528) * _2529) + _2339;
        _2451 = (((_2515 * cbLight._m0[_2464].y) * _2528) * _2529) + _2341;
        _2453 = (((_2515 * cbLight._m0[_2464].z) * _2528) * _2529) + _2343;
    }
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_1981.y == 0u)
    {
        float _2604 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2604;
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2604;
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2604;
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.x;
        uint _2631 = uint((float(_2619.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2620))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2620)));
        float _2641 = (log2(_2607 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2642 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        uint _2645 = uint(isnan(14.0) ? _2642 : (isnan(_2642) ? 14.0 : min(_2642, 14.0)));
        uvec4 _2650 = texelFetch(g_lightClusterGridBuffer, int(((_2645 << 2u) + (_2631 << 6u)) >> 2u));
        uint _2651 = _2650.x;
        uint _2652 = _2619.z;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        if (((((1u << ((_2652 >> 4u) & 15u)) + 4294967295u) & _2651) == 0u) || ((_2652 & 240u) == 0u))
        {
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
            _2807 = 0.0;
        }
        else
        {
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2808;
            float _2958 = 0.0;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            uint _2964 = 0u;
            uint _2973;
            bool _2974;
            for (;;)
            {
                _2973 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_2964 << 2u)) >> 2u)).x;
                _2974 = _2973 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2974)
                {
                    frontier_phi_66_pred = _2958;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2958;
                    _3104 = _2959;
                    _3105 = _2960;
                    _3106 = _2961;
                    _3107 = _2962;
                    _3108 = _2963;
                    _3109 = _2973;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2964 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        float _3169 = _3129.x - _2605;
                        float _3170 = _3129.y - _2606;
                        float _3171 = _3129.z - _2607;
                        float _3172 = dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171));
                        float _3175 = inversesqrt(_3172);
                        float _3176 = _3175 * _3169;
                        float _3177 = _3175 * _3170;
                        float _3178 = _3175 * _3171;
                        float _3179 = dot(vec3(_855, _858, _861), vec3(_3176, _3177, _3178));
                        float _3184 = 1.0 - (_3172 * _3129.w);
                        float _4564 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3185 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3186 = sqrt(_3172) * _3148.w;
                        float _3189 = 1.39999997615814208984375 / (_3186 + 1.39999997615814208984375);
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3179) + _3190;
                        float _3196 = _3186 * _3186;
                        float _3200 = ((isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))) * _3185) / ((_3196 * 0.699999988079071044921875) + 1.0);
                        float _3204 = (-0.0) - _2605;
                        float _3205 = (-0.0) - _2606;
                        float _3206 = (-0.0) - _2607;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3211 = _3210 * _3204;
                        float _3212 = _3210 * _3205;
                        float _3213 = _3210 * _3206;
                        float _3221 = exp2(log2(1.0 / ((_3196 * 3.5) + 5.0)) * 0.25);
                        float _3222 = 1.0 - _915;
                        float _3229 = sqrt(1.0 - ((1.0 - (_3222 * _3222)) * (1.0 - (_3221 * _3221))));
                        float _3230 = _3229 * _3229;
                        float _3231 = _3230 * _3230;
                        float _3232 = _3211 + _3176;
                        float _3233 = _3212 + _3177;
                        float _3234 = _3213 + _3178;
                        float _3238 = inversesqrt(dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234)));
                        float _3242 = dot(vec3(_855, _858, _861), vec3(_3211, _3212, _3213));
                        float _4580 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3245 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3246 = dot(vec3(_855, _858, _861), vec3(_3238 * _3232, _3238 * _3233, _3238 * _3234));
                        float _4591 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3253 = ((_3249 * _3249) * (_3231 + (-1.0))) + 1.0;
                        float _3254 = _3189 * _3230;
                        float _3255 = _3254 * _3254;
                        float _3258 = ((1.0 - _3255) * _3179) + _3255;
                        float _4602 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3260 = 1.0 - _3230;
                        float _3270 = (0.5 / (((_3259 * ((_3245 * _3260) + _3230)) + 9.9999999392252902907785028219223e-09) + (((_3259 * _3260) + _3230) * _3245))) * _3259;
                        float _4613 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                        float _3281 = (((_3231 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3253 * _3253) * ((_3196 * 2.1991131305694580078125) + 3.141590118408203125))) * _3185;
                        _3033 = (_3200 * _3148.x) + _3106;
                        _3034 = (_3200 * _3148.y) + _3107;
                        _3035 = (_3200 * _3148.z) + _3108;
                        _3030 = (_3281 * _3165.x) + _3103;
                        _3031 = (_3281 * _3165.y) + _3104;
                        _3032 = (_3281 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3030;
                            _3104 = _3031;
                            _3105 = _3032;
                            _3106 = _3033;
                            _3107 = _3034;
                            _3108 = _3035;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_66_pred = _3030;
                    frontier_phi_66_pred_1 = _3035;
                    frontier_phi_66_pred_2 = _3034;
                    frontier_phi_66_pred_3 = _3033;
                    frontier_phi_66_pred_4 = _3032;
                    frontier_phi_66_pred_5 = _3031;
                }
                _2798 = frontier_phi_66_pred;
                _2808 = frontier_phi_66_pred_1;
                _2806 = frontier_phi_66_pred_2;
                _2804 = frontier_phi_66_pred_3;
                _2802 = frontier_phi_66_pred_4;
                _2800 = frontier_phi_66_pred_5;
                uint _2965 = _2964 + 1u;
                if (_2965 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2958 = _2798;
                    _2959 = _2800;
                    _2960 = _2802;
                    _2961 = _2804;
                    _2962 = _2806;
                    _2963 = _2808;
                    _2964 = _2965;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
            _2807 = _2808;
        }
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.z;
        uint _2814 = (_2812 >> 8u) & 15u;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((4294967295u << _2814) & _2651) == 0u)
        {
            _2926 = _2797;
            _2928 = _2799;
            _2930 = _2801;
            _2932 = _2803;
            _2934 = _2805;
            _2936 = _2807;
        }
        else
        {
            float _2951 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
            float _2952 = _2951 * _2605;
            float _2953 = _2951 * _2606;
            float _2954 = _2951 * _2607;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2814 < ((_2812 >> 12u) & 15u))
            {
                float _2927;
                float _2929;
                float _2931;
                float _2933;
                float _2935;
                float _2937;
                float _3086 = _2797;
                float _3087 = _2799;
                float _3088 = _2801;
                float _3089 = _2803;
                float _3090 = _2805;
                float _3091 = _2807;
                uint _3092 = _2814;
                uint _3101;
                bool _3102;
                for (;;)
                {
                    _3101 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_3092 << 2u)) >> 2u)).x;
                    _3102 = _3101 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3102)
                    {
                        frontier_phi_77_pred = _3091;
                        frontier_phi_77_pred_1 = _3090;
                        frontier_phi_77_pred_2 = _3089;
                        frontier_phi_77_pred_3 = _3088;
                        frontier_phi_77_pred_4 = _3087;
                        frontier_phi_77_pred_5 = _3086;
                    }
                    else
                    {
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3299;
                        float _3300;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3308 = _3086;
                        float _3309 = _3087;
                        float _3310 = _3088;
                        float _3311 = _3089;
                        float _3312 = _3090;
                        float _3313 = _3091;
                        uint _3314 = _3101;
                        uint _3315;
                        vec4 _3340;
                        float _3341;
                        vec4 _3356;
                        vec3 _3368;
                        vec4 _3383;
                        vec4 _3398;
                        float _3445;
                        bool _3446;
                        for (;;)
                        {
                            uint _3325 = ((_3092 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3314));
                            _3315 = (_3314 + 4294967295u) & _3314;
                            uint _3327 = _3325 * 40u;
                            _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            _3341 = _3340.w;
                            uint _3343 = (_3325 * 40u) + 4u;
                            _3356 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 3u)).x));
                            uint _3358 = (_3325 * 40u) + 8u;
                            _3368 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x));
                            uint _3370 = (_3325 * 40u) + 16u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3385 = (_3325 * 40u) + 20u;
                            _3398 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3385)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3385 + 3u)).x));
                            uint _3401 = (_3325 * 40u) + 24u;
                            vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            uint _3420 = (_3325 * 40u) + 28u;
                            vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            _3445 = fma(_2607, _3433.z, fma(_2606, _3433.y, _3433.x * _2605)) + _3433.w;
                            _3446 = !((fma(_2607, _3414.z, fma(_2606, _3414.y, _3414.x * _2605)) + _3414.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3446)
                            {
                                float _3473 = _3340.x - _2605;
                                float _3474 = _3340.y - _2606;
                                float _3475 = _3340.z - _2607;
                                float _3476 = dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475));
                                float _3479 = inversesqrt(_3476);
                                float _3480 = _3479 * _3473;
                                float _3481 = _3479 * _3474;
                                float _3482 = _3479 * _3475;
                                float _3486 = 1.0 - (_3476 / (_3341 * _3341));
                                float _4624 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3487 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3491 = sqrt(_3476) * _3356.w;
                                float _3493 = 1.39999997615814208984375 / (_3491 + 1.39999997615814208984375);
                                float _3494 = _3493 * _3493;
                                float _3497 = ((1.0 - _3494) * dot(vec3(_3480, _3481, _3482), vec3(_855, _858, _861))) + _3494;
                                float _3500 = _3491 * _3491;
                                float _3504 = (fma(_2607, _3383.z, fma(_2606, _3383.y, _3383.x * _2605)) + _3383.w) / _3445;
                                float _3505 = (fma(_2607, _3398.z, fma(_2606, _3398.y, _3398.x * _2605)) + _3398.w) / _3445;
                                float _3509 = 1.0 - dot(vec2(_3504, _3505), vec2(_3504, _3505));
                                float _4640 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                                float _3510 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3511 = _3510 * (((isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0))) * _3487) / ((_3500 * 0.699999988079071044921875) + 1.0));
                                float _3523 = exp2(log2(1.0 / ((_3500 * 3.5) + 5.0)) * 0.25);
                                float _3524 = 1.0 - _915;
                                float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                                float _3532 = _3531 * _3531;
                                float _3533 = _3532 * _3532;
                                float _3534 = _3480 - _2952;
                                float _3535 = _3481 - _2953;
                                float _3536 = _3482 - _2954;
                                float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                                float _3544 = dot(vec3(_855, _858, _861), vec3((-0.0) - _2952, (-0.0) - _2953, (-0.0) - _2954));
                                float _4651 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3548 = dot(vec3(_855, _858, _861), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                                float _4662 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                                float _3556 = _3493 * _3532;
                                float _3557 = _3556 * _3556;
                                float _3563 = ((1.0 - _3557) * dot(vec3(_855, _858, _861), vec3(_3480, _3481, _3482))) + _3557;
                                float _4673 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3565 = 1.0 - _3532;
                                float _3575 = (0.5 / (((_3564 * ((_3547 * _3565) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3532) * _3547))) * _3564;
                                float _4684 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3585 = (_3510 * _3487) * (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3555 * _3555) * ((_3500 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3511 * _3356.y;
                                frontier_phi_83_pred_1 = _3511 * _3356.x;
                                frontier_phi_83_pred_2 = _3585 * _3368.z;
                                frontier_phi_83_pred_3 = _3585 * _3368.y;
                                frontier_phi_83_pred_4 = _3585 * _3368.x;
                                frontier_phi_83_pred_5 = _3511 * _3356.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3593 = frontier_phi_83_pred;
                            _3592 = frontier_phi_83_pred_1;
                            _3591 = frontier_phi_83_pred_2;
                            _3590 = frontier_phi_83_pred_3;
                            _3589 = frontier_phi_83_pred_4;
                            _3594 = frontier_phi_83_pred_5;
                            _3298 = _3592 + _3311;
                            _3299 = _3593 + _3312;
                            _3300 = _3594 + _3313;
                            _3295 = _3589 + _3308;
                            _3296 = _3590 + _3309;
                            _3297 = _3591 + _3310;
                            if (_3315 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3308 = _3295;
                                _3309 = _3296;
                                _3310 = _3297;
                                _3311 = _3298;
                                _3312 = _3299;
                                _3313 = _3300;
                                _3314 = _3315;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3300;
                        frontier_phi_77_pred_1 = _3299;
                        frontier_phi_77_pred_2 = _3298;
                        frontier_phi_77_pred_3 = _3297;
                        frontier_phi_77_pred_4 = _3296;
                        frontier_phi_77_pred_5 = _3295;
                    }
                    _2937 = frontier_phi_77_pred;
                    _2935 = frontier_phi_77_pred_1;
                    _2933 = frontier_phi_77_pred_2;
                    _2931 = frontier_phi_77_pred_3;
                    _2929 = frontier_phi_77_pred_4;
                    _2927 = frontier_phi_77_pred_5;
                    uint _3093 = _3092 + 1u;
                    if (_3093 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3086 = _2927;
                        _3087 = _2929;
                        _3088 = _2931;
                        _3089 = _2933;
                        _3090 = _2935;
                        _3091 = _2937;
                        _3092 = _3093;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2931;
                frontier_phi_58_59_ladder_1 = _2937;
                frontier_phi_58_59_ladder_2 = _2935;
                frontier_phi_58_59_ladder_3 = _2933;
                frontier_phi_58_59_ladder_4 = _2929;
                frontier_phi_58_59_ladder_5 = _2927;
            }
            else
            {
                frontier_phi_58_59_ladder = _2801;
                frontier_phi_58_59_ladder_1 = _2807;
                frontier_phi_58_59_ladder_2 = _2805;
                frontier_phi_58_59_ladder_3 = _2803;
                frontier_phi_58_59_ladder_4 = _2799;
                frontier_phi_58_59_ladder_5 = _2797;
            }
            _2926 = frontier_phi_58_59_ladder_5;
            _2928 = frontier_phi_58_59_ladder_4;
            _2930 = frontier_phi_58_59_ladder;
            _2932 = frontier_phi_58_59_ladder_3;
            _2934 = frontier_phi_58_59_ladder_2;
            _2936 = frontier_phi_58_59_ladder_1;
        }
        float _2941 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2664 = (_2941 * _2932) + _2116;
        _2666 = (_2941 * _2934) + _2118;
        _2668 = (_2941 * _2936) + _2120;
        _2670 = ((_2926 * 0.039999999105930328369140625) * _2941) + _2449;
        _2672 = ((_2928 * 0.039999999105930328369140625) * _2941) + _2451;
        _2674 = ((_2930 * 0.039999999105930328369140625) * _2941) + _2453;
    }
    else
    {
        _2664 = _2116;
        _2666 = _2118;
        _2668 = _2120;
        _2670 = _2449;
        _2672 = _2451;
        _2674 = _2453;
    }
    uint _2680 = _875 + uint(cbMatDynParam._m0[0u].w);
    float _2686 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2692 = (((((_2686 * cbMtdParam._m0[14u].x) * _621.x) * _644) * _723) * (((1.0 - _697) * cbMtdParam._m0[20u].w) + _697)) * cbInstanceData._m0[_2680].x;
    float _2698 = (((((_2686 * cbMtdParam._m0[14u].y) * _621.y) * _644) * _723) * (((1.0 - _699) * cbMtdParam._m0[20u].w) + _699)) * cbInstanceData._m0[_2680].y;
    float _2704 = (((((_2686 * cbMtdParam._m0[14u].z) * _621.z) * _644) * _723) * (((1.0 - _701) * cbMtdParam._m0[20u].w) + _701)) * cbInstanceData._m0[_2680].z;
    float _4700 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4711 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4722 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2721 = (((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2664 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _899))) + ((_2670 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1736)) * cbPerFrame._m0[3u].x)) + _2692;
    float _2723 = (_2698 + ((_2672 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1736)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2666 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _899)));
    float _2725 = (_2704 + ((_2674 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1736)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2668 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _899)));
    float _2726 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2727 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _2728 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2734 = cbMtdParam._m0[2u].x * _2692;
    float _2735 = cbMtdParam._m0[2u].y * _2698;
    float _2736 = cbMtdParam._m0[2u].z * _2704;
    float _4748 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2738 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    uint _2739 = _874 + 6u;
    float _2747 = _836 / cbSceneParam._m0[86u].x;
    float _2748 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2762 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, (log2((isnan(cbSceneParam._m0[77u].w) ? _759 : (isnan(_759) ? cbSceneParam._m0[77u].w : min(_759, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2764 = _2762.x;
    float _2765 = _2762.y;
    float _2766 = _2762.z;
    float _2767 = _2762.w;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_759 > cbSceneParam._m0[78u].w)
    {
        float _2822 = isnan(_759) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _759 : min(cbSceneParam._m0[80u].w, _759));
        float _2823 = _2822 / _759;
        float _2834 = _2823 * _809;
        float _2835 = _810 * _2823;
        float _2836 = (-0.0) - _2835;
        float _2837 = _2823 * _811;
        float _2839 = (cbSceneParam._m0[77u].w * _2836) / _2822;
        float _2840 = _2839 + cbSceneParam._m0[79u].w;
        float _2841 = cbSceneParam._m0[79u].w - _2835;
        float _2847 = sqrt(((_2834 * _2834) + (_2835 * _2835)) + (_2837 * _2837));
        float _2850 = (1.0 - (cbSceneParam._m0[77u].w / _2822)) * _2847;
        float _2855 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2857 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3043;
        if (abs((_2836 - _2839) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3043 = ((((_2840 > 0.0) ? exp2(_2855 * _2840) : (2.0 - exp2(_2857 * _2840))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2850;
        }
        else
        {
            float _2987 = 1.0 / cbSceneParam._m0[80u].x;
            float _2988 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : max(_2840, _2841));
            float _2989 = isnan(_2841) ? _2840 : (isnan(_2840) ? _2841 : min(_2840, _2841));
            float _2998 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : min(_2988, 0.0));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            _3043 = ((abs(_2847 / _2836) * cbSceneParam._m0[80u].y) * ((((_2998 - _2999) * 2.0) - ((exp2(_2855 * (isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0)))) - exp2(_2855 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))))) * _2987)) - ((exp2(_2857 * _2998) - exp2(_2857 * _2999)) * _2987))) + (_2850 * cbSceneParam._m0[80u].z);
        }
        vec4 _3045 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, 1.0), 0.0);
        float _3054 = exp2((_3043 * (-1.44269502162933349609375)) * (1.0 - _3045.w));
        float _3055 = log2(_3054);
        float _3071 = log2(_2767);
        _2859 = (exp2(_3071 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].x)) * _3045.x) / cbSceneParam._m0[78u].x)) + _2764;
        _2861 = (exp2(_3071 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].y)) * _3045.y) / cbSceneParam._m0[78u].y)) + _2765;
        _2863 = (exp2(_3071 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3055 * cbSceneParam._m0[78u].z)) * _3045.z) / cbSceneParam._m0[78u].z)) + _2766;
        _2865 = _3054 * _2767;
    }
    else
    {
        _2859 = _2764;
        _2861 = _2765;
        _2863 = _2766;
        _2865 = _2767;
    }
    bool _3081;
    vec4 _2875;
    vec4 _2897;
    float _2899;
    float _2903;
    float _2904;
    float _2905;
    float _2908;
    float _2911;
    float _2914;
    float _2915;
    bool _2925;
    for (;;)
    {
        _2875 = cbMatDynParam._m0[0u];
        float _2877 = roundEven(_2875.y);
        bool _2878 = _2877 == 3.0;
        float _2879 = log2(_2865);
        float _2883 = exp2(_2879 * cbSceneParam._m0[78u].x);
        float _2884 = exp2(_2879 * cbSceneParam._m0[78u].y);
        float _2885 = exp2(_2879 * cbSceneParam._m0[78u].z);
        float _2886 = _2883 * _2726;
        float _2887 = _2884 * _2727;
        float _2888 = _2885 * _2728;
        float _2895 = _825 + (-0.5);
        _2897 = cbMtdParam._m0[1u];
        _2899 = _2897.y * _2895;
        float _2902 = (_2877 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2903 = _2902 * (_2878 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2859)));
        _2904 = _2902 * (_2878 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2861)));
        _2905 = _2902 * (_2878 ? _2888 : (_2888 + (cbSceneParam._m0[72u].w * _2863)));
        _2908 = ((_2734 * _2738) * _2883) * _2902;
        _2911 = ((_2735 * _2738) * _2884) * _2902;
        _2914 = ((_2736 * _2738) * _2885) * _2902;
        _2915 = _2895 * 0.999000012874603271484375;
        _2925 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2925)
        {
            if ((cbInstanceData._m0[_874 + 7u].x + _2915) < 0.5)
            {
                _3081 = true;
                break;
            }
        }
        uint _3022 = _875 + uint(_2875.w);
        if ((cbInstanceData._m0[_3022].w < 1.0) && ((cbInstanceData._m0[_3022].w + _2915) < 0.5))
        {
            _3081 = true;
            break;
        }
        if ((_2899 + 1.0) < _2897.x)
        {
            _3081 = true;
            break;
        }
        _3081 = false;
        break;
    }
    float _3286;
    if (_3081)
    {
        discard_state = true;
        _3286 = 0.0;
    }
    else
    {
        _3286 = cbInstanceData._m0[_2739].w;
    }
    SV_Target.x = _2903;
    SV_Target.y = _2904;
    SV_Target.z = _2905;
    SV_Target.w = _3286;
    SV_Target_1.x = _2908;
    SV_Target_1.y = _2911;
    SV_Target_1.z = _2914;
    SV_Target_1.w = cbInstanceData._m0[_2739].w;
    discard_exit();
}


