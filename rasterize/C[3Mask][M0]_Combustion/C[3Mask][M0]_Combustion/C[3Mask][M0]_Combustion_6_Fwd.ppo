#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1252;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _254.x * cbMtdParam._m0[10u].x;
    float _261 = _254.y * cbMtdParam._m0[10u].y;
    float _262 = _254.z * cbMtdParam._m0[10u].z;
    vec4 _281 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _300 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _337 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _300.x) * 2.0) - _327)) + 1.0;
    float _3612 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
    float _345 = (_338 * ((_281.x * cbMtdParam._m0[11u].x) - _260)) + _260;
    float _346 = (_338 * ((_281.y * cbMtdParam._m0[11u].y) - _261)) + _261;
    float _347 = (_338 * ((_281.z * cbMtdParam._m0[11u].z) - _262)) + _262;
    vec4 _366 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _379 = (((((1.0 - _300.y) * 2.0) - _327) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3623 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
    float _387 = (((_366.x * cbMtdParam._m0[12u].x) - _345) * _380) + _345;
    float _388 = (_380 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _389 = (_380 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _407 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _420 = (((((1.0 - _300.z) * 2.0) - _327) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3634 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    vec4 _449 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _457 = ((((((_407.x * cbMtdParam._m0[13u].x) - _387) * _421) + _387) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _449.x;
    float _460 = ((((_421 * ((_407.y * cbMtdParam._m0[13u].y) - _388)) + _388) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _449.y;
    float _463 = ((((_421 * ((_407.z * cbMtdParam._m0[13u].z) - _389)) + _389) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _449.z;
    vec4 _476 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _490 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _492 = _490.x;
    float _493 = _490.y;
    float _494 = _490.z;
    vec4 _506 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _517 = ((_506.x - _492) * _338) + _492;
    float _518 = ((_506.y - _493) * _338) + _493;
    float _519 = ((_506.z - _494) * _338) + _494;
    vec4 _532 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _543 = ((_532.x - _517) * _380) + _517;
    float _544 = ((_532.y - _518) * _380) + _518;
    float _545 = ((_532.z - _519) * _380) + _519;
    vec4 _558 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _571 = ((_558.z - _545) * _421) + _545;
    float _574 = ((((_558.x - _543) * _421) + _543) * 2.0) + (-1.0);
    float _576 = ((((_558.y - _544) * _421) + _544) * 2.0) + (-1.0);
    float _577 = dot(vec2(_574, _576), vec2(_574, _576));
    float _3645 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _582 = sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))));
    vec4 _615 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _629 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3656 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _630 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _638 = (((_630 * _630) * (3.0 - (_630 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _646 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _654 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3667 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
    float _655 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _659 = (_655 * _655) * (3.0 - (_655 * 2.0));
    float _660 = _659 * cbMtdParam._m0[22u].x;
    float _661 = _659 * cbMtdParam._m0[22u].y;
    float _662 = sin(_646);
    float _663 = cos(_646);
    float _664 = TEXCOORD.z - _660;
    float _665 = TEXCOORD.w - _661;
    vec4 _685 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_660 + fma(_665, (-0.0) - _662, _664 * _663))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_665, _663, _664 * _662) + _661)) + cbTextureTilingScale._m0[2u].w));
    float _691 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _685.x;
    float _693 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _685.y;
    float _695 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _685.z;
    float _716 = (TEXCOORD_5.x - (((_476.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3678 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _717 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _720 = fma(_582, _225 * NORMAL.x, fma(_576, _232 * TANGENT.x, (_218 * _210) * _574));
    float _723 = fma(_582, _225 * NORMAL.y, fma(_576, _232 * TANGENT.y, (_218 * _211) * _574));
    float _726 = fma(_582, _225 * NORMAL.z, fma(_576, _232 * TANGENT.z, (_218 * _212) * _574));
    float _730 = inversesqrt(dot(vec3(_720, _723, _726), vec3(_720, _723, _726)));
    float _731 = _730 * _720;
    float _732 = _730 * _723;
    float _733 = _730 * _726;
    float _3689 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _734 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3711 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3722 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _753 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _803 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _793);
    float _804 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _793);
    float _805 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _793);
    float _809 = inversesqrt(dot(vec3(_803, _804, _805), vec3(_803, _804, _805)));
    float _810 = _803 * _809;
    float _811 = _804 * _809;
    float _812 = _805 * _809;
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_733, cbSceneParam._m0[5u].z, fma(_732, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _731));
    float _840 = fma(_733, cbSceneParam._m0[6u].z, fma(_732, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _731));
    float _843 = fma(_733, cbSceneParam._m0[7u].z, fma(_732, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _731));
    uint _856 = uint(roundEven(NORMAL.w)) * 13u;
    uint _857 = _856 + 9u;
    uint _858 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _864 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0)))) * cbInstanceData._m0[_858].x;
    float _865 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * cbInstanceData._m0[_858].y;
    float _866 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * cbInstanceData._m0[_858].z;
    float _3733 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _3744 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _3755 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _869 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _881 = _878.x * TEXCOORD_5.w;
    float _882 = dot(vec3(_731, _732, _733), vec3(_810, _811, _812));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _731) - _810;
    float _890 = (_885 * _732) - _811;
    float _891 = (_885 * _733) - _812;
    float _895 = abs(dot(vec3(_810, _811, _812), vec3(_731, _732, _733)));
    float _3766 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_734);
    float _909 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _941 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1251;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _976 = fma(_949, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _941));
        float _980 = fma(_949, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _941));
        float _984 = fma(_949, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _941));
        float _1009 = _941 + _731;
        float _1010 = _945 + _732;
        float _1011 = _949 + _733;
        float _1021 = fma(_1011, cbModelParam._m0[26u].z, fma(_1010, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1009)) - _976;
        float _1022 = fma(_1011, cbModelParam._m0[27u].z, fma(_1010, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1009)) - _980;
        float _1023 = fma(_1011, cbModelParam._m0[28u].z, fma(_1010, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1009)) - _984;
        float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
        float _1040 = ((_1027 * _1021) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_976 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1041 = ((_1027 * _1022) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_980 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1042 = ((_1027 * _1023) / cbModelParam._m0[34u].z) + ((((((_984 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1040, _1041, _1042), 0.0);
        float _1079 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1045.x + (-0.5));
        float _1081 = _1079 * (_1045.y + (-0.5));
        float _1082 = _1079 * (_1045.z + (-0.5));
        float _1089 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1052.x + (-0.5));
        float _1091 = _1089 * (_1052.y + (-0.5));
        float _1092 = _1089 * (_1052.z + (-0.5));
        float _1099 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1059.x + (-0.5));
        float _1101 = _1099 * (_1059.y + (-0.5));
        float _1102 = _1099 * (_1059.z + (-0.5));
        float _1109 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1066.x + (-0.5));
        float _1111 = _1109 * (_1066.y + (-0.5));
        float _1112 = _1109 * (_1066.z + (-0.5));
        float _1113 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1114 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1115 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1116 = _1080 * 0.5;
        float _1117 = _1090 * 0.5;
        float _1118 = _1100 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1133 = (dot(vec3(_731, _732, _733), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1143 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1113 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1145 = _1144 * 2.0;
        float _1149 = (1.0 - _1144) / (_1144 + 1.0);
        float _3814 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1159 = ((((1.0 - _1150) * (_1145 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1145 + 1.0))) + _1150) * _1113;
        float _1160 = _1081 * 0.5;
        float _1161 = _1091 * 0.5;
        float _1162 = _1101 * 0.5;
        float _1163 = dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162));
        float _1168 = (_1163 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1163);
        float _1176 = (dot(vec3(_731, _732, _733), vec3(_1168 * _1160, _1168 * _1161, _1168 * _1162)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1185 = sqrt(((_1161 * _1161) + (_1160 * _1160)) + (_1162 * _1162)) / (_1114 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _3847 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1187 + 1.0))) + _1192) * _1114;
        float _1202 = _1082 * 0.5;
        float _1203 = _1092 * 0.5;
        float _1204 = _1102 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_731, _732, _733), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1115 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _3880 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1229 + 1.0))) + _1234) * _1115;
        _1251 = _1082;
        _1253 = _1081;
        _1254 = _1080;
        _1255 = _1092;
        _1256 = _1091;
        _1257 = _1090;
        _1258 = _1102;
        _1259 = _1101;
        _1260 = _1100;
        _1261 = _1115;
        _1262 = _1114;
        _1263 = _1113;
        _1264 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)));
        _1265 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1266 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
    }
    else
    {
        _1251 = _1252;
        _1253 = _1252;
        _1254 = _1252;
        _1255 = _1252;
        _1256 = _1252;
        _1257 = _1252;
        _1258 = _1252;
        _1259 = _1252;
        _1260 = _1252;
        _1261 = _1252;
        _1262 = _1252;
        _1263 = _1252;
        _1264 = 0.0;
        _1265 = 0.0;
        _1266 = 0.0;
    }
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1292 = fma(_949, cbModelParam._m0[30u].z, fma(_945, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _941));
        float _1296 = fma(_949, cbModelParam._m0[31u].z, fma(_945, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _941));
        float _1300 = fma(_949, cbModelParam._m0[32u].z, fma(_945, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _941));
        float _1323 = _941 + _731;
        float _1324 = _945 + _732;
        float _1325 = _949 + _733;
        float _1335 = fma(_1325, cbModelParam._m0[30u].z, fma(_1324, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323)) - _1292;
        float _1336 = fma(_1325, cbModelParam._m0[31u].z, fma(_1324, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323)) - _1296;
        float _1337 = fma(_1325, cbModelParam._m0[32u].z, fma(_1324, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323)) - _1300;
        float _1341 = inversesqrt(dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337)));
        float _1354 = ((_1341 * _1335) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1292 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1341 * _1336) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1296 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1341 * _1337) / cbModelParam._m0[35u].z) + ((((((_1300 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1358 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1391 = exp2((_1358.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1358.x + (-0.5));
        float _1393 = _1391 * (_1358.y + (-0.5));
        float _1394 = _1391 * (_1358.z + (-0.5));
        float _1401 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1365.x + (-0.5));
        float _1403 = _1401 * (_1365.y + (-0.5));
        float _1404 = _1401 * (_1365.z + (-0.5));
        float _1411 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1372.x + (-0.5));
        float _1413 = _1411 * (_1372.y + (-0.5));
        float _1414 = _1411 * (_1372.z + (-0.5));
        float _1421 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1379.x + (-0.5));
        float _1423 = _1421 * (_1379.y + (-0.5));
        float _1424 = _1421 * (_1379.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_731, _732, _733), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _3943 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1455 + 1.0))) + _1460) * _1425;
        float _1470 = _1393 * 0.5;
        float _1471 = _1403 * 0.5;
        float _1472 = _1413 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_731, _732, _733), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _3976 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1497 + 1.0))) + _1502) * _1426;
        float _1512 = _1394 * 0.5;
        float _1513 = _1404 * 0.5;
        float _1514 = _1414 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_731, _732, _733), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4009 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1539 + 1.0))) + _1544) * _1427;
        _1561 = _1394;
        _1562 = _1393;
        _1563 = _1392;
        _1564 = _1404;
        _1565 = _1403;
        _1566 = _1402;
        _1567 = _1414;
        _1568 = _1413;
        _1569 = _1412;
        _1570 = _1427;
        _1571 = _1426;
        _1572 = _1425;
        _1573 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1574 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1575 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1252;
        _1562 = _1252;
        _1563 = _1252;
        _1564 = _1252;
        _1565 = _1252;
        _1566 = _1252;
        _1567 = _1252;
        _1568 = _1252;
        _1569 = _1252;
        _1570 = _1252;
        _1571 = _1252;
        _1572 = _1252;
        _1573 = 0.0;
        _1574 = 0.0;
        _1575 = 0.0;
    }
    float _1585 = (cbModelParam._m0[1u].x * (_1573 - _1264)) + _1264;
    float _1586 = (cbModelParam._m0[1u].x * (_1574 - _1265)) + _1265;
    float _1587 = (cbModelParam._m0[1u].x * (_1575 - _1266)) + _1266;
    float _1608 = fma(_1587, cbSceneParam._m0[89u].z, fma(_1586, cbSceneParam._m0[89u].y, _1585 * cbSceneParam._m0[89u].x));
    float _1611 = fma(_1587, cbSceneParam._m0[90u].z, fma(_1586, cbSceneParam._m0[90u].y, _1585 * cbSceneParam._m0[90u].x));
    float _1614 = fma(_1587, cbSceneParam._m0[91u].z, fma(_1586, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1585));
    float _1629 = _889 * 0.5;
    float _1630 = _890 * 0.5;
    float _1631 = _891 * 0.5;
    float _1632 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1563, _1566, _1569, _1572));
    float _1635 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1562, _1565, _1568, _1571));
    float _1638 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1561, _1564, _1567, _1570));
    float _1672;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1645 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1251, _1255, _1258, _1261));
        float _1649 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1253, _1256, _1259, _1262));
        float _1653 = dot(vec4(_1629, _1630, _1631, 1.0), vec4(_1254, _1257, _1260, _1263));
        float _1660 = dot(vec4(cbModelParam._m0[39u]), vec4(_1629, _1630, _1631, 1.0));
        _1672 = dot(vec3(isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1660) ? 0.0 : (isnan(0.0) ? _1660 : max(0.0, _1660))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1672 = 1.0;
    }
    float _1683;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1674 = dot(vec4(cbModelParam._m0[40u]), vec4(_1629, _1630, _1631, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0)), isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1687 = (_1683 * cbModelParam._m0[1u].x) + (_1672 * (1.0 - cbModelParam._m0[1u].x));
    float _1697 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _734);
    float _1698 = isnan(_1697) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1697 : min(cbModelParam._m0[25u].z, _1697));
    float _1778;
    float _1780;
    float _1782;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1745 = fma(_949, cbModelParam._m0[13u].z, fma(_945, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _941)) + cbModelParam._m0[13u].w;
        float _1749 = fma(_949, cbModelParam._m0[14u].z, fma(_945, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _941)) + cbModelParam._m0[14u].w;
        float _1753 = fma(_949, cbModelParam._m0[15u].z, fma(_945, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _941)) + cbModelParam._m0[15u].w;
        float _1756 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1759 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1762 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1790;
        if (_1756 > 0.0)
        {
            _1790 = abs((1.0 - _1745) / _1756);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1745 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1790 = frontier_phi_14_12_ladder;
        }
        float _1991;
        if (_1759 > 0.0)
        {
            _1991 = abs((1.0 - _1749) / _1759);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1749 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1991 = frontier_phi_23_19_ladder;
        }
        float _2234;
        if (_1762 > 0.0)
        {
            _2234 = abs((1.0 - _1753) / _1762);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1753 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2234 = frontier_phi_35_30_ladder;
        }
        float _2236 = isnan(_1991) ? _1790 : (isnan(_1790) ? _1991 : min(_1790, _1991));
        float _2237 = isnan(_2234) ? _2236 : (isnan(_2236) ? _2234 : min(_2236, _2234));
        float _2241 = (_2237 * _1756) + _1745;
        float _2242 = (_2237 * _1759) + _1749;
        float _2243 = (_2237 * _1762) + _1753;
        float _2244 = _2237 * 9.9999997473787516355514526367188e-05;
        float _2246 = (-1.0) - _2244;
        float _2248 = _2244 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2243 > _2248) || ((_2243 < _2246) || ((_2242 > _2248) || ((_2242 < _2246) || ((_2241 < _2246) || (_2241 > _2248))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2243, cbModelParam._m0[9u].z, fma(_2242, cbModelParam._m0[9u].y, _2241 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2243, cbModelParam._m0[10u].z, fma(_2242, cbModelParam._m0[10u].y, _2241 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2243, cbModelParam._m0[11u].z, fma(_2242, cbModelParam._m0[11u].y, _2241 * cbModelParam._m0[11u].x))), _1698);
            frontier_phi_13_35_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1778 = frontier_phi_13_35_ladder_2;
        _1780 = frontier_phi_13_35_ladder_1;
        _1782 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1698);
        _1778 = _1766.x * cbModelParam._m0[1u].y;
        _1780 = _1766.y * cbModelParam._m0[1u].y;
        _1782 = _1766.z * cbModelParam._m0[1u].y;
    }
    float _1786 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _734);
    float _1787 = isnan(_1786) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1786 : min(cbModelParam._m0[25u].w, _1786));
    float _1876;
    float _1878;
    float _1880;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1840 = fma(_949, cbModelParam._m0[21u].z, fma(_945, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _941)) + cbModelParam._m0[21u].w;
        float _1844 = fma(_949, cbModelParam._m0[22u].z, fma(_945, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _941)) + cbModelParam._m0[22u].w;
        float _1848 = fma(_949, cbModelParam._m0[23u].z, fma(_945, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _941)) + cbModelParam._m0[23u].w;
        float _1851 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1854 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1857 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _1996;
        if (_1851 > 0.0)
        {
            _1996 = abs((1.0 - _1840) / _1851);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1840 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1996 = frontier_phi_25_21_ladder;
        }
        float _2261;
        if (_1854 > 0.0)
        {
            _2261 = abs((1.0 - _1844) / _1854);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1844 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2261 = frontier_phi_37_32_ladder;
        }
        float _2466;
        if (_1857 > 0.0)
        {
            _2466 = abs((1.0 - _1848) / _1857);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1848 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2466 = frontier_phi_46_43_ladder;
        }
        float _2468 = isnan(_2261) ? _1996 : (isnan(_1996) ? _2261 : min(_1996, _2261));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1851) + _1840;
        float _2474 = (_2469 * _1854) + _1844;
        float _2475 = (_2469 * _1857) + _1848;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2477 = (-1.0) - _2476;
        float _2479 = _2476 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2475 > _2479) || ((_2475 < _2477) || ((_2474 > _2479) || ((_2474 < _2477) || ((_2473 < _2477) || (_2473 > _2479))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2719 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2475, cbModelParam._m0[17u].z, fma(_2474, cbModelParam._m0[17u].y, _2473 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2475, cbModelParam._m0[18u].z, fma(_2474, cbModelParam._m0[18u].y, _2473 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2475, cbModelParam._m0[19u].z, fma(_2474, cbModelParam._m0[19u].y, _2473 * cbModelParam._m0[19u].x))), _1787);
            frontier_phi_22_46_ladder = _2719.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2719.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2719.x * cbModelParam._m0[1u].z;
        }
        _1876 = frontier_phi_22_46_ladder_2;
        _1878 = frontier_phi_22_46_ladder_1;
        _1880 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1860 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1787);
        _1876 = _1860.x * cbModelParam._m0[1u].z;
        _1878 = _1860.y * cbModelParam._m0[1u].z;
        _1880 = _1860.z * cbModelParam._m0[1u].z;
    }
    float _1892 = ((((1.0 - _909) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_909 * _897)) * _881;
    float _1893 = _1892 * ((cbModelParam._m0[1u].w * (_1876 - _1778)) + _1778);
    float _1894 = _1892 * ((cbModelParam._m0[1u].w * (_1878 - _1780)) + _1780);
    float _1895 = _1892 * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1898 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1901 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1904 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, _1893 * cbSceneParam._m0[91u].x));
    uvec4 _1914 = floatBitsToUint(cbInstanceData._m0[_856 + 5u]);
    uint _1916 = _1914.x * 14u;
    uint _1917 = _1916 + 13u;
    float _1924 = _881 + (-1.0);
    float _1929 = (cbLight._m0[_1917].x * _1924) + 1.0;
    float _1930 = (cbLight._m0[_1917].y * _1924) + 1.0;
    float _1931 = (cbLight._m0[_1917].z * _1924) + 1.0;
    float _1932 = (cbLight._m0[_1917].w * _1924) + 1.0;
    uint _1933 = _1916 + 5u;
    float _1939 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
    uint _1943 = _1916 + 4u;
    float _1950 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
    uint _1954 = _1916 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_731, _732, _733));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_731, _732, _733));
    float _4145 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _4156 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1933].x * _1939) * _1975) + ((cbLight._m0[_1943].x * _1950) * _1973);
    float _1983 = ((_1939 * cbLight._m0[_1933].y) * _1975) + ((_1950 * cbLight._m0[_1943].y) * _1973);
    float _1984 = ((_1939 * cbLight._m0[_1933].z) * _1975) + ((_1950 * cbLight._m0[_1943].z) * _1973);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1916 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2001;
    float _2003;
    float _2005;
    if (_1990)
    {
        _2001 = _1982;
        _2003 = _1983;
        _2005 = _1984;
    }
    else
    {
        uint _2009 = _1916 + 6u;
        float _2025 = (dot(vec3(cbLight._m0[_1916 + 2u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _4167 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _2028 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2001 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1982;
        _2003 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1983;
        _2005 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1984;
    }
    bool _2008 = _1988.y == 0u;
    float _2046;
    float _2048;
    float _2050;
    if (_2008)
    {
        _2046 = _2001;
        _2048 = _2003;
        _2050 = _2005;
    }
    else
    {
        uint _2205 = _1916 + 7u;
        float _2221 = (dot(vec3(cbLight._m0[_1916 + 3u].xyz), vec3(_731, _732, _733)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4183 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _2224 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2046 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2001;
        _2048 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2003;
        _2050 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2005;
    }
    uint _2053 = _1916 + 8u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1916].w)) * _734) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1916].x + _810;
    float _2069 = cbLight._m0[_1916].y + _811;
    float _2070 = cbLight._m0[_1916].z + _812;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1916].xyz));
    float _4199 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2082 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _2083 = dot(vec3(_731, _732, _733), vec3(_2075, _2076, _2077));
    float _4221 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2086 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _2087 = dot(vec3(cbLight._m0[_1916].xyz), vec3(_2075, _2076, _2077));
    float _4232 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2091 = _2067 * _2067;
    float _2095 = ((_2086 * _2086) * (_2091 + (-1.0))) + 1.0;
    float _2106 = (exp2(log2(1.0 - (isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2107 = 1.0 - _2067;
    float _2118 = (0.5 / (((_2082 * ((_2081 * _2107) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2107) + _2067) * _2081))) * _2081;
    float _4243 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2120 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2091 / ((_2095 * _2095) * 3.141590118408203125));
    uint _2131 = _1916 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _734) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1954].x + _810;
    float _2145 = cbLight._m0[_1954].y + _811;
    float _2146 = cbLight._m0[_1954].z + _812;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_1954].xyz));
    float _4254 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _2158 = dot(vec3(_731, _732, _733), vec3(_2151, _2152, _2153));
    float _4265 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2151, _2152, _2153));
    float _4276 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2180 = 1.0 - _2143;
    float _2190 = (0.5 / (((_2082 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2180) + _2143) * _2157))) * _2157;
    float _4287 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2202 = (((_2179 * cbLight._m0[_2131].x) * _2192) * _1939) + (((_2106 * cbLight._m0[_2053].x) * _2120) * _1950);
    float _2203 = (((_2179 * cbLight._m0[_2131].y) * _2192) * _1939) + (((_2106 * cbLight._m0[_2053].y) * _2120) * _1950);
    float _2204 = (((_2179 * cbLight._m0[_2131].z) * _2192) * _1939) + (((_2106 * cbLight._m0[_2053].z) * _2120) * _1950);
    float _2266;
    float _2268;
    float _2270;
    if (_1990)
    {
        _2266 = _2202;
        _2268 = _2203;
        _2270 = _2204;
    }
    else
    {
        uint _2272 = _1916 + 2u;
        uint _2276 = _1916 + 10u;
        float _2290 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2272].w)) * _734) * 0.949999988079071044921875);
        float _2291 = _2290 * _2290;
        float _2292 = cbLight._m0[_2272].x + _810;
        float _2293 = cbLight._m0[_2272].y + _811;
        float _2294 = cbLight._m0[_2272].z + _812;
        float _2298 = inversesqrt(dot(vec3(_2292, _2293, _2294), vec3(_2292, _2293, _2294)));
        float _2299 = _2298 * _2292;
        float _2300 = _2298 * _2293;
        float _2301 = _2298 * _2294;
        float _2302 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2272].xyz));
        float _4298 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _2306 = dot(vec3(_731, _732, _733), vec3(_2299, _2300, _2301));
        float _4309 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2309 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _2310 = dot(vec3(cbLight._m0[_2272].xyz), vec3(_2299, _2300, _2301));
        float _4320 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _2291 * _2291;
        float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
        float _2327 = (exp2(log2(1.0 - (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2328 = 1.0 - _2291;
        float _2338 = (0.5 / (((_2082 * ((_2305 * _2328) + _2291)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2328) + _2291) * _2305))) * _2305;
        float _4331 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1931 : (isnan(_1931) ? 1.0 : min(_1931, 1.0));
        _2266 = (((_2327 * cbLight._m0[_2276].x) * _2340) * _2341) + _2202;
        _2268 = (((_2327 * cbLight._m0[_2276].y) * _2340) * _2341) + _2203;
        _2270 = (((_2327 * cbLight._m0[_2276].z) * _2340) * _2341) + _2204;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_2008)
    {
        _2376 = _2266;
        _2378 = _2268;
        _2380 = _2270;
    }
    else
    {
        uint _2387 = _1916 + 3u;
        uint _2391 = _1916 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _734) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _810;
        float _2408 = cbLight._m0[_2387].y + _811;
        float _2409 = cbLight._m0[_2387].z + _812;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_731, _732, _733), vec3(cbLight._m0[_2387].xyz));
        float _4347 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _2421 = dot(vec3(_731, _732, _733), vec3(_2414, _2415, _2416));
        float _4358 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4369 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2443 = 1.0 - _2406;
        float _2453 = (0.5 / (((_2082 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2082 * _2443) + _2406) * _2420))) * _2420;
        float _4380 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2455 = (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2456 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
        _2376 = (((_2442 * cbLight._m0[_2391].x) * _2455) * _2456) + _2266;
        _2378 = (((_2442 * cbLight._m0[_2391].y) * _2455) * _2456) + _2268;
        _2380 = (((_2442 * cbLight._m0[_2391].z) * _2455) * _2456) + _2270;
    }
    float _2591;
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    if (_1914.y == 0u)
    {
        float _2531 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2532 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2531;
        float _2533 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2531;
        float _2534 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2531;
        uvec4 _2546 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2547 = _2546.x;
        uint _2558 = uint((float(_2546.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2547))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2547)));
        float _2568 = (log2(_2534 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2569 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        uint _2572 = uint(isnan(14.0) ? _2569 : (isnan(_2569) ? 14.0 : min(_2569, 14.0)));
        uvec4 _2577 = texelFetch(g_lightClusterGridBuffer, int(((_2572 << 2u) + (_2558 << 6u)) >> 2u));
        uint _2578 = _2577.x;
        uint _2579 = _2546.z;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        if (((((1u << ((_2579 >> 4u) & 15u)) + 4294967295u) & _2578) == 0u) || ((_2579 & 240u) == 0u))
        {
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
        }
        else
        {
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2733;
            float _2735;
            float _2877 = 0.0;
            float _2878 = 0.0;
            float _2879 = 0.0;
            float _2880 = 0.0;
            float _2881 = 0.0;
            float _2882 = 0.0;
            uint _2883 = 0u;
            uint _2892;
            bool _2893;
            for (;;)
            {
                _2892 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2883 << 2u)) >> 2u)).x;
                _2893 = _2892 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2893)
                {
                    frontier_phi_61_pred = _2877;
                    frontier_phi_61_pred_1 = _2882;
                    frontier_phi_61_pred_2 = _2881;
                    frontier_phi_61_pred_3 = _2880;
                    frontier_phi_61_pred_4 = _2879;
                    frontier_phi_61_pred_5 = _2878;
                }
                else
                {
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    uint _3007;
                    _3001 = _2877;
                    _3002 = _2878;
                    _3003 = _2879;
                    _3004 = _2880;
                    _3005 = _2881;
                    _3006 = _2882;
                    _3007 = _2892;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    for (;;)
                    {
                        uint _3011 = uint(findLSB(_3007)) + (_2883 << 5u);
                        uint _3008 = (_3007 + 4294967295u) & _3007;
                        uint _3013 = _3011 * 48u;
                        vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3033 = (_3011 * 48u) + 4u;
                        vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3033)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3033 + 3u)).x));
                        uint _3052 = (_3011 * 48u) + 8u;
                        vec3 _3063 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x));
                        float _3067 = _3027.x - _2532;
                        float _3068 = _3027.y - _2533;
                        float _3069 = _3027.z - _2534;
                        float _3070 = dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069));
                        float _3073 = inversesqrt(_3070);
                        float _3074 = _3073 * _3067;
                        float _3075 = _3073 * _3068;
                        float _3076 = _3073 * _3069;
                        float _3077 = dot(vec3(_837, _840, _843), vec3(_3074, _3075, _3076));
                        float _3082 = 1.0 - (_3070 * _3027.w);
                        float _4406 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                        float _3084 = sqrt(_3070) * _3046.w;
                        float _3087 = 1.39999997615814208984375 / (_3084 + 1.39999997615814208984375);
                        float _3088 = _3087 * _3087;
                        float _3091 = ((1.0 - _3088) * _3077) + _3088;
                        float _3094 = _3084 * _3084;
                        float _3098 = ((isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0))) * _3083) / ((_3094 * 0.699999988079071044921875) + 1.0);
                        float _3102 = (-0.0) - _2532;
                        float _3103 = (-0.0) - _2533;
                        float _3104 = (-0.0) - _2534;
                        float _3108 = inversesqrt(dot(vec3(_3102, _3103, _3104), vec3(_3102, _3103, _3104)));
                        float _3109 = _3108 * _3102;
                        float _3110 = _3108 * _3103;
                        float _3111 = _3108 * _3104;
                        float _3119 = exp2(log2(1.0 / ((_3094 * 3.5) + 5.0)) * 0.25);
                        float _3120 = 1.0 - _897;
                        float _3127 = sqrt(1.0 - ((1.0 - (_3120 * _3120)) * (1.0 - (_3119 * _3119))));
                        float _3128 = _3127 * _3127;
                        float _3129 = _3128 * _3128;
                        float _3130 = _3109 + _3074;
                        float _3131 = _3110 + _3075;
                        float _3132 = _3111 + _3076;
                        float _3136 = inversesqrt(dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132)));
                        float _3140 = dot(vec3(_837, _840, _843), vec3(_3109, _3110, _3111));
                        float _4422 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                        float _3143 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                        float _3144 = dot(vec3(_837, _840, _843), vec3(_3136 * _3130, _3136 * _3131, _3136 * _3132));
                        float _4433 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3147 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                        float _3151 = ((_3147 * _3147) * (_3129 + (-1.0))) + 1.0;
                        float _3152 = _3087 * _3128;
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3077) + _3153;
                        float _4444 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                        float _3158 = 1.0 - _3128;
                        float _3168 = (0.5 / (((_3157 * ((_3143 * _3158) + _3128)) + 9.9999999392252902907785028219223e-09) + (((_3157 * _3158) + _3128) * _3143))) * _3157;
                        float _4455 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                        float _3179 = (((_3129 * 3.1415927410125732421875) * (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) / ((_3151 * _3151) * ((_3094 * 2.1991131305694580078125) + 3.141590118408203125))) * _3083;
                        _2936 = (_3098 * _3046.x) + _3004;
                        _2937 = (_3098 * _3046.y) + _3005;
                        _2938 = (_3098 * _3046.z) + _3006;
                        _2933 = (_3179 * _3063.x) + _3001;
                        _2934 = (_3179 * _3063.y) + _3002;
                        _2935 = (_3179 * _3063.z) + _3003;
                        if (_3008 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _2935;
                            _3004 = _2936;
                            _3005 = _2937;
                            _3006 = _2938;
                            _3007 = _3008;
                        }
                    }
                    frontier_phi_61_pred = _2933;
                    frontier_phi_61_pred_1 = _2938;
                    frontier_phi_61_pred_2 = _2937;
                    frontier_phi_61_pred_3 = _2936;
                    frontier_phi_61_pred_4 = _2935;
                    frontier_phi_61_pred_5 = _2934;
                }
                _2725 = frontier_phi_61_pred;
                _2735 = frontier_phi_61_pred_1;
                _2733 = frontier_phi_61_pred_2;
                _2731 = frontier_phi_61_pred_3;
                _2729 = frontier_phi_61_pred_4;
                _2727 = frontier_phi_61_pred_5;
                uint _2884 = _2883 + 1u;
                if (_2884 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2877 = _2725;
                    _2878 = _2727;
                    _2879 = _2729;
                    _2880 = _2731;
                    _2881 = _2733;
                    _2882 = _2735;
                    _2883 = _2884;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
        }
        uvec4 _2738 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2739 = _2738.z;
        uint _2741 = (_2739 >> 8u) & 15u;
        float _2845;
        float _2847;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        if (((4294967295u << _2741) & _2578) == 0u)
        {
            _2845 = _2724;
            _2847 = _2726;
            _2849 = _2728;
            _2851 = _2730;
            _2853 = _2732;
            _2855 = _2734;
        }
        else
        {
            float _2870 = inversesqrt(dot(vec3(_2532, _2533, _2534), vec3(_2532, _2533, _2534)));
            float _2871 = _2870 * _2532;
            float _2872 = _2870 * _2533;
            float _2873 = _2870 * _2534;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2741 < ((_2739 >> 12u) & 15u))
            {
                float _2846;
                float _2848;
                float _2850;
                float _2852;
                float _2854;
                float _2856;
                float _2984 = _2724;
                float _2985 = _2726;
                float _2986 = _2728;
                float _2987 = _2730;
                float _2988 = _2732;
                float _2989 = _2734;
                uint _2990 = _2741;
                uint _2999;
                bool _3000;
                for (;;)
                {
                    _2999 = texelFetch(g_lightClassification, int((((_2572 << 5u) + (_2558 << 9u)) + (_2990 << 2u)) >> 2u)).x;
                    _3000 = _2999 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3000)
                    {
                        frontier_phi_67_pred = _2987;
                        frontier_phi_67_pred_1 = _2988;
                        frontier_phi_67_pred_2 = _2989;
                        frontier_phi_67_pred_3 = _2986;
                        frontier_phi_67_pred_4 = _2985;
                        frontier_phi_67_pred_5 = _2984;
                    }
                    else
                    {
                        float _3184;
                        float _3185;
                        float _3186;
                        float _3187;
                        float _3188;
                        float _3189;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3197 = _2984;
                        float _3198 = _2985;
                        float _3199 = _2986;
                        float _3200 = _2987;
                        float _3201 = _2988;
                        float _3202 = _2989;
                        uint _3203 = _2999;
                        uint _3204;
                        vec4 _3229;
                        float _3230;
                        vec4 _3245;
                        vec3 _3257;
                        vec4 _3272;
                        vec4 _3287;
                        float _3334;
                        bool _3335;
                        for (;;)
                        {
                            uint _3214 = ((_2990 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3203));
                            _3204 = (_3203 + 4294967295u) & _3203;
                            uint _3216 = _3214 * 40u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            _3230 = _3229.w;
                            uint _3232 = (_3214 * 40u) + 4u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3247 = (_3214 * 40u) + 8u;
                            _3257 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x));
                            uint _3259 = (_3214 * 40u) + 16u;
                            _3272 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 3u)).x));
                            uint _3274 = (_3214 * 40u) + 20u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3290 = (_3214 * 40u) + 24u;
                            vec4 _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3309 = (_3214 * 40u) + 28u;
                            vec4 _3322 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3309)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3309 + 3u)).x));
                            _3334 = fma(_2534, _3322.z, fma(_2533, _3322.y, _3322.x * _2532)) + _3322.w;
                            _3335 = !((fma(_2534, _3303.z, fma(_2533, _3303.y, _3303.x * _2532)) + _3303.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3335)
                            {
                                float _3362 = _3229.x - _2532;
                                float _3363 = _3229.y - _2533;
                                float _3364 = _3229.z - _2534;
                                float _3365 = dot(vec3(_3362, _3363, _3364), vec3(_3362, _3363, _3364));
                                float _3368 = inversesqrt(_3365);
                                float _3369 = _3368 * _3362;
                                float _3370 = _3368 * _3363;
                                float _3371 = _3368 * _3364;
                                float _3375 = 1.0 - (_3365 / (_3230 * _3230));
                                float _4466 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3376 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3380 = sqrt(_3365) * _3245.w;
                                float _3382 = 1.39999997615814208984375 / (_3380 + 1.39999997615814208984375);
                                float _3383 = _3382 * _3382;
                                float _3386 = ((1.0 - _3383) * dot(vec3(_3369, _3370, _3371), vec3(_837, _840, _843))) + _3383;
                                float _3389 = _3380 * _3380;
                                float _3393 = (fma(_2534, _3272.z, fma(_2533, _3272.y, _3272.x * _2532)) + _3272.w) / _3334;
                                float _3394 = (fma(_2534, _3287.z, fma(_2533, _3287.y, _3287.x * _2532)) + _3287.w) / _3334;
                                float _3398 = 1.0 - dot(vec2(_3393, _3394), vec2(_3393, _3394));
                                float _4482 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3399 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
                                float _3400 = _3399 * (((isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0))) * _3376) / ((_3389 * 0.699999988079071044921875) + 1.0));
                                float _3412 = exp2(log2(1.0 / ((_3389 * 3.5) + 5.0)) * 0.25);
                                float _3413 = 1.0 - _897;
                                float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                                float _3421 = _3420 * _3420;
                                float _3422 = _3421 * _3421;
                                float _3423 = _3369 - _2871;
                                float _3424 = _3370 - _2872;
                                float _3425 = _3371 - _2873;
                                float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                                float _3433 = dot(vec3(_837, _840, _843), vec3((-0.0) - _2871, (-0.0) - _2872, (-0.0) - _2873));
                                float _4493 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3436 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
                                float _3437 = dot(vec3(_837, _840, _843), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                                float _4504 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                                float _3440 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                                float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                                float _3445 = _3382 * _3421;
                                float _3446 = _3445 * _3445;
                                float _3452 = ((1.0 - _3446) * dot(vec3(_837, _840, _843), vec3(_3369, _3370, _3371))) + _3446;
                                float _4515 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3453 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
                                float _3454 = 1.0 - _3421;
                                float _3464 = (0.5 / (((_3453 * ((_3436 * _3454) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3453 * _3454) + _3421) * _3436))) * _3453;
                                float _4526 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                                float _3474 = (_3399 * _3376) * (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0)))) / ((_3444 * _3444) * ((_3389 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3474 * _3257.x;
                                frontier_phi_73_pred_1 = _3474 * _3257.y;
                                frontier_phi_73_pred_2 = _3400 * _3245.z;
                                frontier_phi_73_pred_3 = _3400 * _3245.y;
                                frontier_phi_73_pred_4 = _3400 * _3245.x;
                                frontier_phi_73_pred_5 = _3474 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3478 = frontier_phi_73_pred;
                            _3479 = frontier_phi_73_pred_1;
                            _3483 = frontier_phi_73_pred_2;
                            _3482 = frontier_phi_73_pred_3;
                            _3481 = frontier_phi_73_pred_4;
                            _3480 = frontier_phi_73_pred_5;
                            _3187 = _3481 + _3200;
                            _3188 = _3482 + _3201;
                            _3189 = _3483 + _3202;
                            _3184 = _3478 + _3197;
                            _3185 = _3479 + _3198;
                            _3186 = _3480 + _3199;
                            if (_3204 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3197 = _3184;
                                _3198 = _3185;
                                _3199 = _3186;
                                _3200 = _3187;
                                _3201 = _3188;
                                _3202 = _3189;
                                _3203 = _3204;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    _2852 = frontier_phi_67_pred;
                    _2854 = frontier_phi_67_pred_1;
                    _2856 = frontier_phi_67_pred_2;
                    _2850 = frontier_phi_67_pred_3;
                    _2848 = frontier_phi_67_pred_4;
                    _2846 = frontier_phi_67_pred_5;
                    uint _2991 = _2990 + 1u;
                    if (_2991 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2984 = _2846;
                        _2985 = _2848;
                        _2986 = _2850;
                        _2987 = _2852;
                        _2988 = _2854;
                        _2989 = _2856;
                        _2990 = _2991;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2854;
                frontier_phi_55_56_ladder_1 = _2856;
                frontier_phi_55_56_ladder_2 = _2852;
                frontier_phi_55_56_ladder_3 = _2850;
                frontier_phi_55_56_ladder_4 = _2848;
                frontier_phi_55_56_ladder_5 = _2846;
            }
            else
            {
                frontier_phi_55_56_ladder = _2732;
                frontier_phi_55_56_ladder_1 = _2734;
                frontier_phi_55_56_ladder_2 = _2730;
                frontier_phi_55_56_ladder_3 = _2728;
                frontier_phi_55_56_ladder_4 = _2726;
                frontier_phi_55_56_ladder_5 = _2724;
            }
            _2845 = frontier_phi_55_56_ladder_5;
            _2847 = frontier_phi_55_56_ladder_4;
            _2849 = frontier_phi_55_56_ladder_3;
            _2851 = frontier_phi_55_56_ladder_2;
            _2853 = frontier_phi_55_56_ladder;
            _2855 = frontier_phi_55_56_ladder_1;
        }
        float _2860 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2591 = (_2860 * _2851) + _2046;
        _2593 = (_2860 * _2853) + _2048;
        _2595 = (_2860 * _2855) + _2050;
        _2597 = ((_2845 * 0.039999999105930328369140625) * _2860) + _2376;
        _2599 = ((_2847 * 0.039999999105930328369140625) * _2860) + _2378;
        _2601 = ((_2849 * 0.039999999105930328369140625) * _2860) + _2380;
    }
    else
    {
        _2591 = _2046;
        _2593 = _2048;
        _2595 = _2050;
        _2597 = _2376;
        _2599 = _2378;
        _2601 = _2380;
    }
    uint _2607 = _857 + uint(cbMatDynParam._m0[0u].w);
    float _2613 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2619 = (((((_2613 * cbMtdParam._m0[14u].x) * _615.x) * _638) * _717) * (((1.0 - _691) * cbMtdParam._m0[20u].w) + _691)) * cbInstanceData._m0[_2607].x;
    float _2625 = (((((_2613 * cbMtdParam._m0[14u].y) * _615.y) * _638) * _717) * (((1.0 - _693) * cbMtdParam._m0[20u].w) + _693)) * cbInstanceData._m0[_2607].y;
    float _2631 = (((((_2613 * cbMtdParam._m0[14u].z) * _615.z) * _638) * _717) * (((1.0 - _695) * cbMtdParam._m0[20u].w) + _695)) * cbInstanceData._m0[_2607].z;
    float _4542 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4553 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4564 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _2648 = (((isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0))) * (_2591 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _881))) + ((_2597 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + _2619;
    float _2650 = (_2625 + ((_2599 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2593 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _881)));
    float _2652 = (_2631 + ((_2601 + ((isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))) * _1687)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2595 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _881)));
    float _4590 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2665 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    uint _2666 = _856 + 6u;
    float _2674 = _818 / cbSceneParam._m0[86u].x;
    float _2675 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2689 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, (log2((isnan(cbSceneParam._m0[77u].w) ? _753 : (isnan(_753) ? cbSceneParam._m0[77u].w : min(_753, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2691 = _2689.x;
    float _2692 = _2689.y;
    float _2693 = _2689.z;
    float _2694 = _2689.w;
    float _2786;
    float _2788;
    float _2790;
    float _2792;
    if (_753 > cbSceneParam._m0[78u].w)
    {
        float _2749 = isnan(_753) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _753 : min(cbSceneParam._m0[80u].w, _753));
        float _2750 = _2749 / _753;
        float _2761 = _2750 * _803;
        float _2762 = _804 * _2750;
        float _2763 = (-0.0) - _2762;
        float _2764 = _2750 * _805;
        float _2766 = (cbSceneParam._m0[77u].w * _2763) / _2749;
        float _2767 = _2766 + cbSceneParam._m0[79u].w;
        float _2768 = cbSceneParam._m0[79u].w - _2762;
        float _2774 = sqrt(((_2761 * _2761) + (_2762 * _2762)) + (_2764 * _2764));
        float _2777 = (1.0 - (cbSceneParam._m0[77u].w / _2749)) * _2774;
        float _2782 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2784 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2946;
        if (abs((_2763 - _2766) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2946 = ((((_2767 > 0.0) ? exp2(_2782 * _2767) : (2.0 - exp2(_2784 * _2767))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2777;
        }
        else
        {
            float _2906 = 1.0 / cbSceneParam._m0[80u].x;
            float _2907 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : max(_2767, _2768));
            float _2908 = isnan(_2768) ? _2767 : (isnan(_2767) ? _2768 : min(_2767, _2768));
            float _2917 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : min(_2907, 0.0));
            float _2918 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : min(_2908, 0.0));
            _2946 = ((abs(_2774 / _2763) * cbSceneParam._m0[80u].y) * ((((_2917 - _2918) * 2.0) - ((exp2(_2782 * (isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0)))) - exp2(_2782 * (isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0))))) * _2906)) - ((exp2(_2784 * _2917) - exp2(_2784 * _2918)) * _2906))) + (_2777 * cbSceneParam._m0[80u].z);
        }
        vec4 _2948 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2674, _2675, 1.0), 0.0);
        float _2957 = exp2((_2946 * (-1.44269502162933349609375)) * (1.0 - _2948.w));
        float _2958 = log2(_2957);
        float _2974 = log2(_2694);
        _2786 = (exp2(_2974 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].x)) * _2948.x) / cbSceneParam._m0[78u].x)) + _2691;
        _2788 = (exp2(_2974 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].y)) * _2948.y) / cbSceneParam._m0[78u].y)) + _2692;
        _2790 = (exp2(_2974 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2958 * cbSceneParam._m0[78u].z)) * _2948.z) / cbSceneParam._m0[78u].z)) + _2693;
        _2792 = _2957 * _2694;
    }
    else
    {
        _2786 = _2691;
        _2788 = _2692;
        _2790 = _2693;
        _2792 = _2694;
    }
    float _2804 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2805 = _2804 == 3.0;
    float _2806 = log2(_2792);
    float _2810 = exp2(_2806 * cbSceneParam._m0[78u].x);
    float _2811 = exp2(_2806 * cbSceneParam._m0[78u].y);
    float _2812 = exp2(_2806 * cbSceneParam._m0[78u].z);
    float _2813 = _2810 * (isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0)));
    float _2814 = _2811 * (isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0)));
    float _2815 = _2812 * (isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0)));
    float _2824 = (_2804 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2824 * (_2805 ? _2813 : (_2813 + (cbSceneParam._m0[72u].w * _2786)));
    SV_Target.y = _2824 * (_2805 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2788)));
    SV_Target.z = _2824 * (_2805 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2790)));
    SV_Target.w = cbInstanceData._m0[_2666].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2619) * _2665) * _2810) * _2824;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2625) * _2665) * _2811) * _2824;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2631) * _2665) * _2812) * _2824;
    SV_Target_1.w = cbInstanceData._m0[_2666].w;
}


