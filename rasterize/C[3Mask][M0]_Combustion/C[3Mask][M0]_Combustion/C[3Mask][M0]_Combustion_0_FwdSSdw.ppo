#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1361;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _220 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _221 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _222 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _228 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _235 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _242 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _291 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _310 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _337 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _347 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _310.x) * 2.0) - _337)) + 1.0;
    float _3744 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _355 = (_348 * ((_291.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _356 = (_348 * ((_291.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _357 = (_348 * ((_291.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _376 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _389 = (((((1.0 - _310.y) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3755 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _390 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _397 = (((_376.x * cbMtdParam._m0[12u].x) - _355) * _390) + _355;
    float _398 = (_390 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _399 = (_390 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _417 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _430 = (((((1.0 - _310.z) * 2.0) - _337) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3766 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    vec4 _459 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _467 = ((((((_417.x * cbMtdParam._m0[13u].x) - _397) * _431) + _397) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _459.x;
    float _470 = ((((_431 * ((_417.y * cbMtdParam._m0[13u].y) - _398)) + _398) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _459.y;
    float _473 = ((((_431 * ((_417.z * cbMtdParam._m0[13u].z) - _399)) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _459.z;
    vec4 _499 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.z) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.w) + cbTextureTilingScale._m0[9u].w));
    vec4 _518 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    float _521 = _518.x + 0.00999999977648258209228515625;
    float _528 = (TEXCOORD_8 - ((cbMtdParam._m0[20u].x * (1.0 - TEXCOORD_8)) * _521)) * (cbMtdParam._m0[19u].w + 1.0);
    float _3777 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _536 = (_529 * ((_499.x * cbMtdParam._m0[16u].x) - _467)) + _467;
    float _537 = (_529 * ((_499.y * cbMtdParam._m0[16u].y) - _470)) + _470;
    float _538 = (_529 * ((_499.z * cbMtdParam._m0[16u].z) - _473)) + _473;
    vec4 _551 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    vec4 _572 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _576 = _572.z;
    vec4 _588 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _599 = ((_588.x - _574) * _348) + _574;
    float _600 = ((_588.y - _575) * _348) + _575;
    float _601 = ((_588.z - _576) * _348) + _576;
    vec4 _614 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = ((_614.x - _599) * _390) + _599;
    float _626 = ((_614.y - _600) * _390) + _600;
    float _627 = ((_614.z - _601) * _390) + _601;
    vec4 _640 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _653 = ((_640.z - _627) * _431) + _627;
    float _656 = ((((_640.x - _625) * _431) + _625) * 2.0) + (-1.0);
    float _657 = ((((_640.y - _626) * _431) + _626) * 2.0) + (-1.0);
    float _658 = dot(vec2(_656, _657), vec2(_656, _657));
    float _3788 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _663 = sqrt(1.0 - (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))));
    float _668 = (((_551.z - _653) * TEXCOORD_8) * cbMtdParam._m0[20u].y) + _653;
    vec4 _698 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _712 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3799 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _713 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _721 = (((_713 * _713) * (3.0 - (_713 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _729 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _737 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3810 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _742 = (_738 * _738) * (3.0 - (_738 * 2.0));
    float _743 = _742 * cbMtdParam._m0[22u].x;
    float _744 = _742 * cbMtdParam._m0[22u].y;
    float _745 = sin(_729);
    float _746 = cos(_729);
    float _747 = TEXCOORD.z - _743;
    float _748 = TEXCOORD.w - _744;
    vec4 _768 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_743 + fma(_748, (-0.0) - _745, _747 * _746))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_748, _746, _747 * _745) + _744)) + cbTextureTilingScale._m0[2u].w));
    float _774 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _768.x;
    float _776 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _768.y;
    float _778 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _768.z;
    float _794 = (TEXCOORD_5.x - ((_521 * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3821 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _795 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    vec4 _808 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _824 = (((((_551.x * 2.0) + (-1.0)) * TEXCOORD_8) * cbMtdParam._m0[19u].y) + _656) + (((_808.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _826 = (((((_551.y * 2.0) + (-1.0)) * TEXCOORD_9) * cbMtdParam._m0[19u].y) + _657) + (((_808.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z);
    float _829 = fma(_663, _235 * NORMAL.x, fma(_826, _242 * TANGENT.x, (_228 * _220) * _824));
    float _832 = fma(_663, _235 * NORMAL.y, fma(_826, _242 * TANGENT.y, (_228 * _221) * _824));
    float _835 = fma(_663, _235 * NORMAL.z, fma(_826, _242 * TANGENT.z, (_228 * _222) * _824));
    float _839 = inversesqrt(dot(vec3(_829, _832, _835), vec3(_829, _832, _835)));
    float _840 = _839 * _829;
    float _841 = _839 * _832;
    float _842 = _839 * _835;
    float _3832 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _843 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _536 : (isnan(_536) ? 0.0 : max(_536, 0.0));
    float _3854 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _3865 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _862 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _912 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _902);
    float _913 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _902);
    float _914 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _902);
    float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
    float _919 = _912 * _918;
    float _920 = _913 * _918;
    float _921 = _914 * _918;
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _946 = fma(_842, cbSceneParam._m0[5u].z, fma(_841, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _840));
    float _949 = fma(_842, cbSceneParam._m0[6u].z, fma(_841, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _840));
    float _952 = fma(_842, cbSceneParam._m0[7u].z, fma(_841, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _840));
    uint _965 = uint(roundEven(NORMAL.w)) * 13u;
    uint _966 = _965 + 9u;
    uint _967 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _973 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_967].x;
    float _974 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_967].y;
    float _975 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * cbInstanceData._m0[_967].z;
    float _3876 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _3887 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _977 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _3898 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _978 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    vec4 _987 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _990 = _987.x * TEXCOORD_5.w;
    float _991 = dot(vec3(_840, _841, _842), vec3(_919, _920, _921));
    float _994 = _991 * 2.0;
    float _998 = (_994 * _840) - _919;
    float _999 = (_994 * _841) - _920;
    float _1000 = (_994 * _842) - _921;
    float _1004 = abs(dot(vec3(_919, _920, _921), vec3(_840, _841, _842)));
    float _3909 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1006 = sqrt(_843);
    float _1018 = exp2((_1006 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1006 * 3.0));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1360;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1085 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1089 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1093 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1118 = _1050 + _840;
        float _1119 = _1054 + _841;
        float _1120 = _1058 + _842;
        float _1130 = fma(_1120, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1118)) - _1085;
        float _1131 = fma(_1120, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1118)) - _1089;
        float _1132 = fma(_1120, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1118)) - _1093;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1085 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1089 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[34u].z) + ((((((_1093 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1188 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1154.x + (-0.5));
        float _1190 = _1188 * (_1154.y + (-0.5));
        float _1191 = _1188 * (_1154.z + (-0.5));
        float _1198 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1161.x + (-0.5));
        float _1200 = _1198 * (_1161.y + (-0.5));
        float _1201 = _1198 * (_1161.z + (-0.5));
        float _1208 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1168.x + (-0.5));
        float _1210 = _1208 * (_1168.y + (-0.5));
        float _1211 = _1208 * (_1168.z + (-0.5));
        float _1218 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1175.x + (-0.5));
        float _1220 = _1218 * (_1175.y + (-0.5));
        float _1221 = _1218 * (_1175.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1242 = (dot(vec3(_840, _841, _842), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1252 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3957 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1254 + 1.0))) + _1259) * _1222;
        float _1269 = _1190 * 0.5;
        float _1270 = _1200 * 0.5;
        float _1271 = _1210 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_840, _841, _842), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3990 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1296 + 1.0))) + _1301) * _1223;
        float _1311 = _1191 * 0.5;
        float _1312 = _1201 * 0.5;
        float _1313 = _1211 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_840, _841, _842), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _4023 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1338 + 1.0))) + _1343) * _1224;
        _1360 = _1191;
        _1362 = _1190;
        _1363 = _1189;
        _1364 = _1201;
        _1365 = _1200;
        _1366 = _1199;
        _1367 = _1211;
        _1368 = _1210;
        _1369 = _1209;
        _1370 = _1224;
        _1371 = _1223;
        _1372 = _1222;
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1374 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
    }
    else
    {
        _1360 = _1361;
        _1362 = _1361;
        _1363 = _1361;
        _1364 = _1361;
        _1365 = _1361;
        _1366 = _1361;
        _1367 = _1361;
        _1368 = _1361;
        _1369 = _1361;
        _1370 = _1361;
        _1371 = _1361;
        _1372 = _1361;
        _1373 = 0.0;
        _1374 = 0.0;
        _1375 = 0.0;
    }
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1401 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1405 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1409 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1432 = _1050 + _840;
        float _1433 = _1054 + _841;
        float _1434 = _1058 + _842;
        float _1444 = fma(_1434, cbModelParam._m0[30u].z, fma(_1433, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1432)) - _1401;
        float _1445 = fma(_1434, cbModelParam._m0[31u].z, fma(_1433, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1432)) - _1405;
        float _1446 = fma(_1434, cbModelParam._m0[32u].z, fma(_1433, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1432)) - _1409;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1401 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1405 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[35u].z) + ((((((_1409 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1500 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1467.x + (-0.5));
        float _1502 = _1500 * (_1467.y + (-0.5));
        float _1503 = _1500 * (_1467.z + (-0.5));
        float _1510 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1474.x + (-0.5));
        float _1512 = _1510 * (_1474.y + (-0.5));
        float _1513 = _1510 * (_1474.z + (-0.5));
        float _1520 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1481.x + (-0.5));
        float _1522 = _1520 * (_1481.y + (-0.5));
        float _1523 = _1520 * (_1481.z + (-0.5));
        float _1530 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1488.x + (-0.5));
        float _1532 = _1530 * (_1488.y + (-0.5));
        float _1533 = _1530 * (_1488.z + (-0.5));
        float _1534 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1535 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = _1501 * 0.5;
        float _1538 = _1511 * 0.5;
        float _1539 = _1521 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_840, _841, _842), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _4064 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1534 + 9.9999997473787516355514526367188e-06);
        float _4075 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4086 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_1564 + 1.0))) + _1569) * _1534;
        float _1579 = _1502 * 0.5;
        float _1580 = _1512 * 0.5;
        float _1581 = _1522 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_840, _841, _842), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1535 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4119 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1606 + 1.0))) + _1611) * _1535;
        float _1621 = _1503 * 0.5;
        float _1622 = _1513 * 0.5;
        float _1623 = _1523 * 0.5;
        float _1624 = dot(vec3(_1621, _1622, _1623), vec3(_1621, _1622, _1623));
        float _1629 = (_1624 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1624);
        float _1637 = (dot(vec3(_840, _841, _842), vec3(_1629 * _1621, _1629 * _1622, _1629 * _1623)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1646 = sqrt(((_1622 * _1622) + (_1621 * _1621)) + (_1623 * _1623)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1648 = _1647 * 2.0;
        float _1652 = (1.0 - _1647) / (_1647 + 1.0);
        float _4152 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1662 = ((((1.0 - _1653) * (_1648 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1648 + 1.0))) + _1653) * _1536;
        _1670 = _1503;
        _1671 = _1502;
        _1672 = _1501;
        _1673 = _1513;
        _1674 = _1512;
        _1675 = _1511;
        _1676 = _1523;
        _1677 = _1522;
        _1678 = _1521;
        _1679 = _1536;
        _1680 = _1535;
        _1681 = _1534;
        _1682 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1683 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
        _1684 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)));
    }
    else
    {
        _1670 = _1361;
        _1671 = _1361;
        _1672 = _1361;
        _1673 = _1361;
        _1674 = _1361;
        _1675 = _1361;
        _1676 = _1361;
        _1677 = _1361;
        _1678 = _1361;
        _1679 = _1361;
        _1680 = _1361;
        _1681 = _1361;
        _1682 = 0.0;
        _1683 = 0.0;
        _1684 = 0.0;
    }
    float _1694 = (cbModelParam._m0[1u].x * (_1682 - _1373)) + _1373;
    float _1695 = (cbModelParam._m0[1u].x * (_1683 - _1374)) + _1374;
    float _1696 = (cbModelParam._m0[1u].x * (_1684 - _1375)) + _1375;
    float _1717 = fma(_1696, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1694 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1696, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1694 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1696, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1694));
    float _1738 = _998 * 0.5;
    float _1739 = _999 * 0.5;
    float _1740 = _1000 * 0.5;
    float _1741 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1672, _1675, _1678, _1681));
    float _1744 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1671, _1674, _1677, _1680));
    float _1747 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1670, _1673, _1676, _1679));
    float _1781;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1754 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1360, _1364, _1367, _1370));
        float _1758 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1362, _1365, _1368, _1371));
        float _1762 = dot(vec4(_1738, _1739, _1740, 1.0), vec4(_1363, _1366, _1369, _1372));
        float _1769 = dot(vec4(cbModelParam._m0[39u]), vec4(_1738, _1739, _1740, 1.0));
        _1781 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1769) ? 0.0 : (isnan(0.0) ? _1769 : max(0.0, _1769))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1781 = 1.0;
    }
    float _1792;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1783 = dot(vec4(cbModelParam._m0[40u]), vec4(_1738, _1739, _1740, 1.0));
        _1792 = dot(vec3(isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)), isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1783) ? 0.0 : (isnan(0.0) ? _1783 : max(0.0, _1783))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1792 = 1.0;
    }
    float _1796 = (_1792 * cbModelParam._m0[1u].x) + (_1781 * (1.0 - cbModelParam._m0[1u].x));
    float _1806 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _843);
    float _1807 = isnan(_1806) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1806 : min(cbModelParam._m0[25u].z, _1806));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1854 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1858 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1862 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1865 = fma(_1000, cbModelParam._m0[13u].z, fma(_999, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998));
        float _1868 = fma(_1000, cbModelParam._m0[14u].z, fma(_999, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998));
        float _1871 = fma(_1000, cbModelParam._m0[15u].z, fma(_999, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998));
        float _1899;
        if (_1865 > 0.0)
        {
            _1899 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1899 = frontier_phi_14_12_ladder;
        }
        float _2120;
        if (_1868 > 0.0)
        {
            _2120 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2120 = frontier_phi_23_19_ladder;
        }
        float _2366;
        if (_1871 > 0.0)
        {
            _2366 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2366 = frontier_phi_35_30_ladder;
        }
        float _2368 = isnan(_2120) ? _1899 : (isnan(_1899) ? _2120 : min(_1899, _2120));
        float _2369 = isnan(_2366) ? _2368 : (isnan(_2368) ? _2366 : min(_2368, _2366));
        float _2373 = (_2369 * _1865) + _1854;
        float _2374 = (_2369 * _1868) + _1858;
        float _2375 = (_2369 * _1871) + _1862;
        float _2376 = _2369 * 9.9999997473787516355514526367188e-05;
        float _2378 = (-1.0) - _2376;
        float _2380 = _2376 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2375 > _2380) || ((_2375 < _2378) || ((_2374 > _2380) || ((_2374 < _2378) || ((_2373 < _2378) || (_2373 > _2380))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2375, cbModelParam._m0[9u].z, fma(_2374, cbModelParam._m0[9u].y, _2373 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2375, cbModelParam._m0[10u].z, fma(_2374, cbModelParam._m0[10u].y, _2373 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2375, cbModelParam._m0[11u].z, fma(_2374, cbModelParam._m0[11u].y, _2373 * cbModelParam._m0[11u].x))), _1807);
            frontier_phi_13_35_ladder = _2499.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2499.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2499.x * cbModelParam._m0[1u].y;
        }
        _1887 = frontier_phi_13_35_ladder_2;
        _1889 = frontier_phi_13_35_ladder_1;
        _1891 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_998, _999, _1000), _1807);
        _1887 = _1875.x * cbModelParam._m0[1u].y;
        _1889 = _1875.y * cbModelParam._m0[1u].y;
        _1891 = _1875.z * cbModelParam._m0[1u].y;
    }
    float _1895 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _843);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1895 : min(cbModelParam._m0[25u].w, _1895));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1949 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1953 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1957 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1960 = fma(_1000, cbModelParam._m0[21u].z, fma(_999, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998));
        float _1963 = fma(_1000, cbModelParam._m0[22u].z, fma(_999, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998));
        float _1966 = fma(_1000, cbModelParam._m0[23u].z, fma(_999, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998));
        float _2125;
        if (_1960 > 0.0)
        {
            _2125 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2125 = frontier_phi_25_21_ladder;
        }
        float _2393;
        if (_1963 > 0.0)
        {
            _2393 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2393 = frontier_phi_37_32_ladder;
        }
        float _2598;
        if (_1966 > 0.0)
        {
            _2598 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2598 = frontier_phi_46_43_ladder;
        }
        float _2600 = isnan(_2393) ? _2125 : (isnan(_2125) ? _2393 : min(_2125, _2393));
        float _2601 = isnan(_2598) ? _2600 : (isnan(_2600) ? _2598 : min(_2600, _2598));
        float _2605 = (_2601 * _1960) + _1949;
        float _2606 = (_2601 * _1963) + _1953;
        float _2607 = (_2601 * _1966) + _1957;
        float _2608 = _2601 * 9.9999997473787516355514526367188e-05;
        float _2609 = (-1.0) - _2608;
        float _2611 = _2608 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2607 > _2611) || ((_2607 < _2609) || ((_2606 > _2611) || ((_2606 < _2609) || ((_2605 < _2609) || (_2605 > _2611))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2851 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2607, cbModelParam._m0[17u].z, fma(_2606, cbModelParam._m0[17u].y, _2605 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2607, cbModelParam._m0[18u].z, fma(_2606, cbModelParam._m0[18u].y, _2605 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2607, cbModelParam._m0[19u].z, fma(_2606, cbModelParam._m0[19u].y, _2605 * cbModelParam._m0[19u].x))), _1896);
            frontier_phi_22_46_ladder = _2851.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2851.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2851.x * cbModelParam._m0[1u].z;
        }
        _1985 = frontier_phi_22_46_ladder_2;
        _1987 = frontier_phi_22_46_ladder_1;
        _1989 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_998, _999, _1000), _1896);
        _1985 = _1969.x * cbModelParam._m0[1u].z;
        _1987 = _1969.y * cbModelParam._m0[1u].z;
        _1989 = _1969.z * cbModelParam._m0[1u].z;
    }
    float _2001 = ((((1.0 - _1018) * ((_1006 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_1018 * _1006)) * _990;
    float _2002 = _2001 * ((cbModelParam._m0[1u].w * (_1985 - _1887)) + _1887);
    float _2003 = _2001 * ((cbModelParam._m0[1u].w * (_1987 - _1889)) + _1889);
    float _2004 = _2001 * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2003, cbSceneParam._m0[89u].y, _2002 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2003, cbSceneParam._m0[90u].y, _2002 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2003, cbSceneParam._m0[91u].y, _2002 * cbSceneParam._m0[91u].x));
    vec4 _2021 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_927, _928));
    float _2023 = _2021.w;
    float _2035 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2023);
    float _2036 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2023);
    float _2037 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2023);
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_965 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _990 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2079 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2083 = _2043 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_840, _841, _842));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_840, _841, _842));
    float _4288 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4299 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2060].x * _2066) * _2104) + (((cbLight._m0[_2070].x * _2035) * _2079) * _2102);
    float _2112 = ((_2066 * cbLight._m0[_2060].y) * _2104) + (((cbLight._m0[_2070].y * _2036) * _2079) * _2102);
    float _2113 = ((_2066 * cbLight._m0[_2060].z) * _2104) + (((cbLight._m0[_2070].z * _2037) * _2079) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2130;
    float _2132;
    float _2134;
    if (_2119)
    {
        _2130 = _2111;
        _2132 = _2112;
        _2134 = _2113;
    }
    else
    {
        uint _2138 = _2043 + 6u;
        float _2154 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_840, _841, _842)) * 0.5) + 0.5;
        float _2155 = _2154 * _2154;
        float _4310 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        float _2156 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _2157 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2130 = (((cbLight._m0[_2138].x * 0.3183098733425140380859375) * _2156) * _2157) + _2111;
        _2132 = (((cbLight._m0[_2138].y * 0.3183098733425140380859375) * _2156) * _2157) + _2112;
        _2134 = (((cbLight._m0[_2138].z * 0.3183098733425140380859375) * _2156) * _2157) + _2113;
    }
    bool _2137 = _2117.y == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2137)
    {
        _2175 = _2130;
        _2177 = _2132;
        _2179 = _2134;
    }
    else
    {
        uint _2337 = _2043 + 7u;
        float _2353 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_840, _841, _842)) * 0.5) + 0.5;
        float _2354 = _2353 * _2353;
        float _4326 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2355 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _2356 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2175 = (((cbLight._m0[_2337].x * 0.3183098733425140380859375) * _2355) * _2356) + _2130;
        _2177 = (((cbLight._m0[_2337].y * 0.3183098733425140380859375) * _2355) * _2356) + _2132;
        _2179 = (((cbLight._m0[_2337].z * 0.3183098733425140380859375) * _2355) * _2356) + _2134;
    }
    uint _2182 = _2043 + 8u;
    float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _843) * 0.949999988079071044921875);
    float _2196 = _2195 * _2195;
    float _2197 = cbLight._m0[_2043].x + _919;
    float _2198 = cbLight._m0[_2043].y + _920;
    float _2199 = cbLight._m0[_2043].z + _921;
    float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
    float _2204 = _2203 * _2197;
    float _2205 = _2203 * _2198;
    float _2206 = _2203 * _2199;
    float _2207 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2043].xyz));
    float _4342 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2210 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _2211 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2212 = dot(vec3(_840, _841, _842), vec3(_2204, _2205, _2206));
    float _4364 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2215 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2216 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2204, _2205, _2206));
    float _4375 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
    float _2220 = _2196 * _2196;
    float _2224 = ((_2215 * _2215) * (_2220 + (-1.0))) + 1.0;
    float _2235 = (exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2236 = 1.0 - _2196;
    float _2247 = (0.5 / (((_2211 * ((_2210 * _2236) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2236) + _2196) * _2210))) * _2210;
    float _4386 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2220 / ((_2224 * _2224) * 3.141590118408203125));
    uint _2263 = _2043 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _843) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2083].x + _919;
    float _2277 = cbLight._m0[_2083].y + _920;
    float _2278 = cbLight._m0[_2083].z + _921;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2083].xyz));
    float _4397 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _2290 = dot(vec3(_840, _841, _842), vec3(_2283, _2284, _2285));
    float _4408 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2283, _2284, _2285));
    float _4419 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2311 = (exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2312 = 1.0 - _2275;
    float _2322 = (0.5 / (((_2211 * ((_2289 * _2312) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2312) + _2275) * _2289))) * _2289;
    float _4430 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2324 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2334 = (((_2311 * cbLight._m0[_2263].x) * _2324) * _2066) + ((((cbLight._m0[_2182].x * _2035) * _2235) * _2249) * _2079);
    float _2335 = (((_2311 * cbLight._m0[_2263].y) * _2324) * _2066) + ((((cbLight._m0[_2182].y * _2036) * _2235) * _2249) * _2079);
    float _2336 = (((_2311 * cbLight._m0[_2263].z) * _2324) * _2066) + ((((cbLight._m0[_2182].z * _2037) * _2235) * _2249) * _2079);
    float _2398;
    float _2400;
    float _2402;
    if (_2119)
    {
        _2398 = _2334;
        _2400 = _2335;
        _2402 = _2336;
    }
    else
    {
        uint _2404 = _2043 + 2u;
        uint _2408 = _2043 + 10u;
        float _2422 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2404].w)) * _843) * 0.949999988079071044921875);
        float _2423 = _2422 * _2422;
        float _2424 = cbLight._m0[_2404].x + _919;
        float _2425 = cbLight._m0[_2404].y + _920;
        float _2426 = cbLight._m0[_2404].z + _921;
        float _2430 = inversesqrt(dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426)));
        float _2431 = _2430 * _2424;
        float _2432 = _2430 * _2425;
        float _2433 = _2430 * _2426;
        float _2434 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2404].xyz));
        float _4441 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2437 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2438 = dot(vec3(_840, _841, _842), vec3(_2431, _2432, _2433));
        float _4452 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2442 = dot(vec3(cbLight._m0[_2404].xyz), vec3(_2431, _2432, _2433));
        float _4463 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2446 = _2423 * _2423;
        float _2450 = ((_2441 * _2441) * (_2446 + (-1.0))) + 1.0;
        float _2459 = (exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2460 = 1.0 - _2423;
        float _2470 = (0.5 / (((_2211 * ((_2437 * _2460) + _2423)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2460) + _2423) * _2437))) * _2437;
        float _4474 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2472 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2446 / ((_2450 * _2450) * 3.141590118408203125));
        float _2473 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2398 = (((_2459 * cbLight._m0[_2408].x) * _2472) * _2473) + _2334;
        _2400 = (((_2459 * cbLight._m0[_2408].y) * _2472) * _2473) + _2335;
        _2402 = (((_2459 * cbLight._m0[_2408].z) * _2472) * _2473) + _2336;
    }
    float _2508;
    float _2510;
    float _2512;
    if (_2137)
    {
        _2508 = _2398;
        _2510 = _2400;
        _2512 = _2402;
    }
    else
    {
        uint _2519 = _2043 + 3u;
        uint _2523 = _2043 + 11u;
        float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2519].w)) * _843) * 0.949999988079071044921875);
        float _2538 = _2537 * _2537;
        float _2539 = cbLight._m0[_2519].x + _919;
        float _2540 = cbLight._m0[_2519].y + _920;
        float _2541 = cbLight._m0[_2519].z + _921;
        float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
        float _2546 = _2545 * _2539;
        float _2547 = _2545 * _2540;
        float _2548 = _2545 * _2541;
        float _2549 = dot(vec3(_840, _841, _842), vec3(cbLight._m0[_2519].xyz));
        float _4490 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2552 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2553 = dot(vec3(_840, _841, _842), vec3(_2546, _2547, _2548));
        float _4501 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
        float _2556 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _2557 = dot(vec3(cbLight._m0[_2519].xyz), vec3(_2546, _2547, _2548));
        float _4512 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2561 = _2538 * _2538;
        float _2565 = ((_2556 * _2556) * (_2561 + (-1.0))) + 1.0;
        float _2574 = (exp2(log2(1.0 - (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2575 = 1.0 - _2538;
        float _2585 = (0.5 / (((_2211 * ((_2552 * _2575) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2211 * _2575) + _2538) * _2552))) * _2552;
        float _4523 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2587 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * (_2561 / ((_2565 * _2565) * 3.141590118408203125));
        float _2588 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2508 = (((_2574 * cbLight._m0[_2523].x) * _2587) * _2588) + _2398;
        _2510 = (((_2574 * cbLight._m0[_2523].y) * _2587) * _2588) + _2400;
        _2512 = (((_2574 * cbLight._m0[_2523].z) * _2587) * _2588) + _2402;
    }
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    float _2731;
    float _2733;
    if (_2041.y == 0u)
    {
        float _2663 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2664 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2663;
        float _2665 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2663;
        float _2666 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2663;
        uvec4 _2678 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2679 = _2678.x;
        uint _2690 = uint((float(_2678.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _2679))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _2679)));
        float _2700 = (log2(_2666 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2701 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
        uint _2704 = uint(isnan(14.0) ? _2701 : (isnan(_2701) ? 14.0 : min(_2701, 14.0)));
        uvec4 _2709 = texelFetch(g_lightClusterGridBuffer, int(((_2704 << 2u) + (_2690 << 6u)) >> 2u));
        uint _2710 = _2709.x;
        uint _2711 = _2678.z;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((((1u << ((_2711 >> 4u) & 15u)) + 4294967295u) & _2710) == 0u) || ((_2711 & 240u) == 0u))
        {
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
            _2864 = 0.0;
            _2866 = 0.0;
        }
        else
        {
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _2865;
            float _2867;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            float _3014 = 0.0;
            uint _3015 = 0u;
            uint _3024;
            bool _3025;
            for (;;)
            {
                _3024 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3015 << 2u)) >> 2u)).x;
                _3025 = _3024 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3025)
                {
                    frontier_phi_61_pred = _3009;
                    frontier_phi_61_pred_1 = _3014;
                    frontier_phi_61_pred_2 = _3013;
                    frontier_phi_61_pred_3 = _3012;
                    frontier_phi_61_pred_4 = _3011;
                    frontier_phi_61_pred_5 = _3010;
                }
                else
                {
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    uint _3139;
                    _3133 = _3009;
                    _3134 = _3010;
                    _3135 = _3011;
                    _3136 = _3012;
                    _3137 = _3013;
                    _3138 = _3014;
                    _3139 = _3024;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    for (;;)
                    {
                        uint _3143 = uint(findLSB(_3139)) + (_3015 << 5u);
                        uint _3140 = (_3139 + 4294967295u) & _3139;
                        uint _3145 = _3143 * 48u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 3u)).x));
                        uint _3165 = (_3143 * 48u) + 4u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3184 = (_3143 * 48u) + 8u;
                        vec3 _3195 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x));
                        float _3199 = _3159.x - _2664;
                        float _3200 = _3159.y - _2665;
                        float _3201 = _3159.z - _2666;
                        float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                        float _3205 = inversesqrt(_3202);
                        float _3206 = _3205 * _3199;
                        float _3207 = _3205 * _3200;
                        float _3208 = _3205 * _3201;
                        float _3209 = dot(vec3(_946, _949, _952), vec3(_3206, _3207, _3208));
                        float _3214 = 1.0 - (_3202 * _3159.w);
                        float _4549 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3215 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                        float _3216 = sqrt(_3202) * _3178.w;
                        float _3219 = 1.39999997615814208984375 / (_3216 + 1.39999997615814208984375);
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3209) + _3220;
                        float _3226 = _3216 * _3216;
                        float _3230 = ((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3215) / ((_3226 * 0.699999988079071044921875) + 1.0);
                        float _3234 = (-0.0) - _2664;
                        float _3235 = (-0.0) - _2665;
                        float _3236 = (-0.0) - _2666;
                        float _3240 = inversesqrt(dot(vec3(_3234, _3235, _3236), vec3(_3234, _3235, _3236)));
                        float _3241 = _3240 * _3234;
                        float _3242 = _3240 * _3235;
                        float _3243 = _3240 * _3236;
                        float _3251 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                        float _3252 = 1.0 - _1006;
                        float _3259 = sqrt(1.0 - ((1.0 - (_3252 * _3252)) * (1.0 - (_3251 * _3251))));
                        float _3260 = _3259 * _3259;
                        float _3261 = _3260 * _3260;
                        float _3262 = _3241 + _3206;
                        float _3263 = _3242 + _3207;
                        float _3264 = _3243 + _3208;
                        float _3268 = inversesqrt(dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264)));
                        float _3272 = dot(vec3(_946, _949, _952), vec3(_3241, _3242, _3243));
                        float _4565 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0));
                        float _3275 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3276 = dot(vec3(_946, _949, _952), vec3(_3268 * _3262, _3268 * _3263, _3268 * _3264));
                        float _4576 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3279 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                        float _3283 = ((_3279 * _3279) * (_3261 + (-1.0))) + 1.0;
                        float _3284 = _3219 * _3260;
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3209) + _3285;
                        float _4587 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3289 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3290 = 1.0 - _3260;
                        float _3300 = (0.5 / (((_3289 * ((_3275 * _3290) + _3260)) + 9.9999999392252902907785028219223e-09) + (((_3289 * _3290) + _3260) * _3275))) * _3289;
                        float _4598 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3311 = (((_3261 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3283 * _3283) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125))) * _3215;
                        _3068 = (_3230 * _3178.x) + _3136;
                        _3069 = (_3230 * _3178.y) + _3137;
                        _3070 = (_3230 * _3178.z) + _3138;
                        _3065 = (_3311 * _3195.x) + _3133;
                        _3066 = (_3311 * _3195.y) + _3134;
                        _3067 = (_3311 * _3195.z) + _3135;
                        if (_3140 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3133 = _3065;
                            _3134 = _3066;
                            _3135 = _3067;
                            _3136 = _3068;
                            _3137 = _3069;
                            _3138 = _3070;
                            _3139 = _3140;
                        }
                    }
                    frontier_phi_61_pred = _3065;
                    frontier_phi_61_pred_1 = _3070;
                    frontier_phi_61_pred_2 = _3069;
                    frontier_phi_61_pred_3 = _3068;
                    frontier_phi_61_pred_4 = _3067;
                    frontier_phi_61_pred_5 = _3066;
                }
                _2857 = frontier_phi_61_pred;
                _2867 = frontier_phi_61_pred_1;
                _2865 = frontier_phi_61_pred_2;
                _2863 = frontier_phi_61_pred_3;
                _2861 = frontier_phi_61_pred_4;
                _2859 = frontier_phi_61_pred_5;
                uint _3016 = _3015 + 1u;
                if (_3016 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3009 = _2857;
                    _3010 = _2859;
                    _3011 = _2861;
                    _3012 = _2863;
                    _3013 = _2865;
                    _3014 = _2867;
                    _3015 = _3016;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
            _2864 = _2865;
            _2866 = _2867;
        }
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.z;
        uint _2873 = (_2871 >> 8u) & 15u;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        float _2985;
        float _2987;
        if (((4294967295u << _2873) & _2710) == 0u)
        {
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
            _2985 = _2864;
            _2987 = _2866;
        }
        else
        {
            float _3002 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
            float _3003 = _3002 * _2664;
            float _3004 = _3002 * _2665;
            float _3005 = _3002 * _2666;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2873 < ((_2871 >> 12u) & 15u))
            {
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _2986;
                float _2988;
                float _3116 = _2856;
                float _3117 = _2858;
                float _3118 = _2860;
                float _3119 = _2862;
                float _3120 = _2864;
                float _3121 = _2866;
                uint _3122 = _2873;
                uint _3131;
                bool _3132;
                for (;;)
                {
                    _3131 = texelFetch(g_lightClassification, int((((_2704 << 5u) + (_2690 << 9u)) + (_3122 << 2u)) >> 2u)).x;
                    _3132 = _3131 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3132)
                    {
                        frontier_phi_67_pred = _3119;
                        frontier_phi_67_pred_1 = _3120;
                        frontier_phi_67_pred_2 = _3121;
                        frontier_phi_67_pred_3 = _3118;
                        frontier_phi_67_pred_4 = _3117;
                        frontier_phi_67_pred_5 = _3116;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3329 = _3116;
                        float _3330 = _3117;
                        float _3331 = _3118;
                        float _3332 = _3119;
                        float _3333 = _3120;
                        float _3334 = _3121;
                        uint _3335 = _3131;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3466;
                        bool _3467;
                        for (;;)
                        {
                            uint _3346 = ((_3122 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3422 = (_3346 * 40u) + 24u;
                            vec4 _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3441 = (_3346 * 40u) + 28u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            _3466 = fma(_2666, _3454.z, fma(_2665, _3454.y, _3454.x * _2664)) + _3454.w;
                            _3467 = !((fma(_2666, _3435.z, fma(_2665, _3435.y, _3435.x * _2664)) + _3435.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3467)
                            {
                                float _3494 = _3361.x - _2664;
                                float _3495 = _3361.y - _2665;
                                float _3496 = _3361.z - _2666;
                                float _3497 = dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496));
                                float _3500 = inversesqrt(_3497);
                                float _3501 = _3500 * _3494;
                                float _3502 = _3500 * _3495;
                                float _3503 = _3500 * _3496;
                                float _3507 = 1.0 - (_3497 / (_3362 * _3362));
                                float _4609 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3508 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3512 = sqrt(_3497) * _3377.w;
                                float _3514 = 1.39999997615814208984375 / (_3512 + 1.39999997615814208984375);
                                float _3515 = _3514 * _3514;
                                float _3518 = ((1.0 - _3515) * dot(vec3(_3501, _3502, _3503), vec3(_946, _949, _952))) + _3515;
                                float _3521 = _3512 * _3512;
                                float _3525 = (fma(_2666, _3404.z, fma(_2665, _3404.y, _3404.x * _2664)) + _3404.w) / _3466;
                                float _3526 = (fma(_2666, _3419.z, fma(_2665, _3419.y, _3419.x * _2664)) + _3419.w) / _3466;
                                float _3530 = 1.0 - dot(vec2(_3525, _3526), vec2(_3525, _3526));
                                float _4625 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3532 = _3531 * (((isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0))) * _3508) / ((_3521 * 0.699999988079071044921875) + 1.0));
                                float _3544 = exp2(log2(1.0 / ((_3521 * 3.5) + 5.0)) * 0.25);
                                float _3545 = 1.0 - _1006;
                                float _3552 = sqrt(1.0 - ((1.0 - (_3545 * _3545)) * (1.0 - (_3544 * _3544))));
                                float _3553 = _3552 * _3552;
                                float _3554 = _3553 * _3553;
                                float _3555 = _3501 - _3003;
                                float _3556 = _3502 - _3004;
                                float _3557 = _3503 - _3005;
                                float _3561 = inversesqrt(dot(vec3(_3555, _3556, _3557), vec3(_3555, _3556, _3557)));
                                float _3565 = dot(vec3(_946, _949, _952), vec3((-0.0) - _3003, (-0.0) - _3004, (-0.0) - _3005));
                                float _4636 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3568 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3569 = dot(vec3(_946, _949, _952), vec3(_3561 * _3555, _3561 * _3556, _3561 * _3557));
                                float _4647 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3572 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3576 = ((_3572 * _3572) * (_3554 + (-1.0))) + 1.0;
                                float _3577 = _3514 * _3553;
                                float _3578 = _3577 * _3577;
                                float _3584 = ((1.0 - _3578) * dot(vec3(_946, _949, _952), vec3(_3501, _3502, _3503))) + _3578;
                                float _4658 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3586 = 1.0 - _3553;
                                float _3596 = (0.5 / (((_3585 * ((_3568 * _3586) + _3553)) + 9.9999999392252902907785028219223e-09) + (((_3585 * _3586) + _3553) * _3568))) * _3585;
                                float _4669 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                                float _3606 = (_3531 * _3508) * (((_3554 * 3.1415927410125732421875) * (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) / ((_3576 * _3576) * ((_3521 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3606 * _3389.x;
                                frontier_phi_73_pred_1 = _3606 * _3389.y;
                                frontier_phi_73_pred_2 = _3532 * _3377.z;
                                frontier_phi_73_pred_3 = _3532 * _3377.y;
                                frontier_phi_73_pred_4 = _3532 * _3377.x;
                                frontier_phi_73_pred_5 = _3606 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3610 = frontier_phi_73_pred;
                            _3611 = frontier_phi_73_pred_1;
                            _3615 = frontier_phi_73_pred_2;
                            _3614 = frontier_phi_73_pred_3;
                            _3613 = frontier_phi_73_pred_4;
                            _3612 = frontier_phi_73_pred_5;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3321 = _3615 + _3334;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3319;
                        frontier_phi_67_pred_1 = _3320;
                        frontier_phi_67_pred_2 = _3321;
                        frontier_phi_67_pred_3 = _3318;
                        frontier_phi_67_pred_4 = _3317;
                        frontier_phi_67_pred_5 = _3316;
                    }
                    _2984 = frontier_phi_67_pred;
                    _2986 = frontier_phi_67_pred_1;
                    _2988 = frontier_phi_67_pred_2;
                    _2982 = frontier_phi_67_pred_3;
                    _2980 = frontier_phi_67_pred_4;
                    _2978 = frontier_phi_67_pred_5;
                    uint _3123 = _3122 + 1u;
                    if (_3123 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3116 = _2978;
                        _3117 = _2980;
                        _3118 = _2982;
                        _3119 = _2984;
                        _3120 = _2986;
                        _3121 = _2988;
                        _3122 = _3123;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2986;
                frontier_phi_55_56_ladder_1 = _2988;
                frontier_phi_55_56_ladder_2 = _2984;
                frontier_phi_55_56_ladder_3 = _2982;
                frontier_phi_55_56_ladder_4 = _2980;
                frontier_phi_55_56_ladder_5 = _2978;
            }
            else
            {
                frontier_phi_55_56_ladder = _2864;
                frontier_phi_55_56_ladder_1 = _2866;
                frontier_phi_55_56_ladder_2 = _2862;
                frontier_phi_55_56_ladder_3 = _2860;
                frontier_phi_55_56_ladder_4 = _2858;
                frontier_phi_55_56_ladder_5 = _2856;
            }
            _2977 = frontier_phi_55_56_ladder_5;
            _2979 = frontier_phi_55_56_ladder_4;
            _2981 = frontier_phi_55_56_ladder_3;
            _2983 = frontier_phi_55_56_ladder_2;
            _2985 = frontier_phi_55_56_ladder;
            _2987 = frontier_phi_55_56_ladder_1;
        }
        float _2992 = isnan(1.0) ? _990 : (isnan(_990) ? 1.0 : min(_990, 1.0));
        _2723 = (_2992 * _2983) + _2175;
        _2725 = (_2992 * _2985) + _2177;
        _2727 = (_2992 * _2987) + _2179;
        _2729 = ((_2977 * 0.039999999105930328369140625) * _2992) + _2508;
        _2731 = ((_2979 * 0.039999999105930328369140625) * _2992) + _2510;
        _2733 = ((_2981 * 0.039999999105930328369140625) * _2992) + _2512;
    }
    else
    {
        _2723 = _2175;
        _2725 = _2177;
        _2727 = _2179;
        _2729 = _2508;
        _2731 = _2510;
        _2733 = _2512;
    }
    uint _2739 = _966 + uint(cbMatDynParam._m0[0u].w);
    float _2745 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2751 = (((((_2745 * cbMtdParam._m0[14u].x) * _698.x) * _721) * _795) * (((1.0 - _774) * cbMtdParam._m0[20u].w) + _774)) * cbInstanceData._m0[_2739].x;
    float _2757 = (((((_2745 * cbMtdParam._m0[14u].y) * _698.y) * _721) * _795) * (((1.0 - _776) * cbMtdParam._m0[20u].w) + _776)) * cbInstanceData._m0[_2739].y;
    float _2763 = (((((_2745 * cbMtdParam._m0[14u].z) * _698.z) * _721) * _795) * (((1.0 - _778) * cbMtdParam._m0[20u].w) + _778)) * cbInstanceData._m0[_2739].z;
    float _4685 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _4696 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _4707 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2780 = (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2723 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _990))) + ((_2729 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + _2751;
    float _2782 = (_2757 + ((_2731 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2725 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _990)));
    float _2784 = (_2763 + ((_2733 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1796)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2727 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _990)));
    float _4733 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2797 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
    uint _2798 = _965 + 6u;
    float _2806 = _927 / cbSceneParam._m0[86u].x;
    float _2807 = _928 / cbSceneParam._m0[86u].y;
    vec4 _2821 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, (log2((isnan(cbSceneParam._m0[77u].w) ? _862 : (isnan(_862) ? cbSceneParam._m0[77u].w : min(_862, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2823 = _2821.x;
    float _2824 = _2821.y;
    float _2825 = _2821.z;
    float _2826 = _2821.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_862 > cbSceneParam._m0[78u].w)
    {
        float _2881 = isnan(_862) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _862 : min(cbSceneParam._m0[80u].w, _862));
        float _2882 = _2881 / _862;
        float _2893 = _2882 * _912;
        float _2894 = _913 * _2882;
        float _2895 = (-0.0) - _2894;
        float _2896 = _2882 * _914;
        float _2898 = (cbSceneParam._m0[77u].w * _2895) / _2881;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2894;
        float _2906 = sqrt(((_2893 * _2893) + (_2894 * _2894)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2881)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3078;
        if (abs((_2895 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3078 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3038 = 1.0 / cbSceneParam._m0[80u].x;
            float _3039 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3040 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            float _3050 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : min(_3040, 0.0));
            _3078 = ((abs(_2906 / _2895) * cbSceneParam._m0[80u].y) * ((((_3049 - _3050) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0))))) * _3038)) - ((exp2(_2916 * _3049) - exp2(_2916 * _3050)) * _3038))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3080 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2806, _2807, 1.0), 0.0);
        float _3089 = exp2((_3078 * (-1.44269502162933349609375)) * (1.0 - _3080.w));
        float _3090 = log2(_3089);
        float _3106 = log2(_2826);
        _2918 = (exp2(_3106 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].x)) * _3080.x) / cbSceneParam._m0[78u].x)) + _2823;
        _2920 = (exp2(_3106 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].y)) * _3080.y) / cbSceneParam._m0[78u].y)) + _2824;
        _2922 = (exp2(_3106 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3090 * cbSceneParam._m0[78u].z)) * _3080.z) / cbSceneParam._m0[78u].z)) + _2825;
        _2924 = _3089 * _2826;
    }
    else
    {
        _2918 = _2823;
        _2920 = _2824;
        _2922 = _2825;
        _2924 = _2826;
    }
    float _2936 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2937 = _2936 == 3.0;
    float _2938 = log2(_2924);
    float _2942 = exp2(_2938 * cbSceneParam._m0[78u].x);
    float _2943 = exp2(_2938 * cbSceneParam._m0[78u].y);
    float _2944 = exp2(_2938 * cbSceneParam._m0[78u].z);
    float _2945 = _2942 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0)));
    float _2946 = _2943 * (isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0)));
    float _2947 = _2944 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)));
    float _2956 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2956 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
    SV_Target.y = _2956 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
    SV_Target.z = _2956 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
    SV_Target.w = cbInstanceData._m0[_2798].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2751) * _2797) * _2942) * _2956;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2757) * _2797) * _2943) * _2956;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2763) * _2797) * _2944) * _2956;
    SV_Target_1.w = cbInstanceData._m0[_2798].w;
}


