#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1256;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _304 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _341 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _304.x) * 2.0) - _331)) + 1.0;
    float _3899 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _349 = (_342 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _350 = (_342 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _351 = (_342 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _370 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _383 = (((((1.0 - _304.y) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3910 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _391 = (((_370.x * cbMtdParam._m0[12u].x) - _349) * _384) + _349;
    float _392 = (_384 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _393 = (_384 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _411 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _424 = (((((1.0 - _304.z) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3921 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    vec4 _453 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _461 = ((((((_411.x * cbMtdParam._m0[13u].x) - _391) * _425) + _391) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _453.x;
    float _464 = ((((_425 * ((_411.y * cbMtdParam._m0[13u].y) - _392)) + _392) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _453.y;
    float _467 = ((((_425 * ((_411.z * cbMtdParam._m0[13u].z) - _393)) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _453.z;
    vec4 _480 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _494 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    vec4 _510 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _521 = ((_510.x - _496) * _342) + _496;
    float _522 = ((_510.y - _497) * _342) + _497;
    float _523 = ((_510.z - _498) * _342) + _498;
    vec4 _536 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = ((_536.x - _521) * _384) + _521;
    float _548 = ((_536.y - _522) * _384) + _522;
    float _549 = ((_536.z - _523) * _384) + _523;
    vec4 _562 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _575 = ((_562.z - _549) * _425) + _549;
    float _578 = ((((_562.x - _547) * _425) + _547) * 2.0) + (-1.0);
    float _580 = ((((_562.y - _548) * _425) + _548) * 2.0) + (-1.0);
    float _581 = dot(vec2(_578, _580), vec2(_578, _580));
    float _3932 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))));
    vec4 _619 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _633 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3943 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _634 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _642 = (((_634 * _634) * (3.0 - (_634 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _650 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _658 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3954 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _663 = (_659 * _659) * (3.0 - (_659 * 2.0));
    float _664 = _663 * cbMtdParam._m0[22u].x;
    float _665 = _663 * cbMtdParam._m0[22u].y;
    float _666 = sin(_650);
    float _667 = cos(_650);
    float _668 = TEXCOORD.z - _664;
    float _669 = TEXCOORD.w - _665;
    vec4 _689 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_664 + fma(_669, (-0.0) - _666, _668 * _667))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_669, _667, _668 * _666) + _665)) + cbTextureTilingScale._m0[2u].w));
    float _695 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _689.x;
    float _697 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _689.y;
    float _699 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _689.z;
    float _720 = (TEXCOORD_5.x - (((_480.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3965 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _721 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _724 = fma(_586, _229 * NORMAL.x, fma(_580, _236 * TANGENT.x, (_222 * _214) * _578));
    float _727 = fma(_586, _229 * NORMAL.y, fma(_580, _236 * TANGENT.y, (_222 * _215) * _578));
    float _730 = fma(_586, _229 * NORMAL.z, fma(_580, _236 * TANGENT.z, (_222 * _216) * _578));
    float _734 = inversesqrt(dot(vec3(_724, _727, _730), vec3(_724, _727, _730)));
    float _735 = _734 * _724;
    float _736 = _734 * _727;
    float _737 = _734 * _730;
    float _3976 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _738 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3998 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4009 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _757 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _807 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _797);
    float _808 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _797);
    float _809 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _797);
    float _813 = inversesqrt(dot(vec3(_807, _808, _809), vec3(_807, _808, _809)));
    float _814 = _807 * _813;
    float _815 = _808 * _813;
    float _816 = _809 * _813;
    float _822 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _823 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _841 = fma(_737, cbSceneParam._m0[5u].z, fma(_736, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _735));
    float _844 = fma(_737, cbSceneParam._m0[6u].z, fma(_736, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _735));
    float _847 = fma(_737, cbSceneParam._m0[7u].z, fma(_736, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _735));
    uint _860 = uint(roundEven(NORMAL.w)) * 13u;
    uint _861 = _860 + 9u;
    uint _862 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _868 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_862].x;
    float _869 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_862].y;
    float _870 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * cbInstanceData._m0[_862].z;
    float _4020 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _871 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _872 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _873 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    vec4 _882 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _822, cbSceneParam._m0[86u].y * _823));
    float _885 = _882.x * TEXCOORD_5.w;
    float _886 = dot(vec3(_735, _736, _737), vec3(_814, _815, _816));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _735) - _814;
    float _894 = (_889 * _736) - _815;
    float _895 = (_889 * _737) - _816;
    float _899 = abs(dot(vec3(_814, _815, _816), vec3(_735, _736, _737)));
    float _4053 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_738);
    float _913 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1255;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _980 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _984 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _988 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1013 = _945 + _735;
        float _1014 = _949 + _736;
        float _1015 = _953 + _737;
        float _1025 = fma(_1015, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1013)) - _980;
        float _1026 = fma(_1015, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1013)) - _984;
        float _1027 = fma(_1015, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1013)) - _988;
        float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
        float _1044 = ((_1031 * _1025) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_980 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1045 = ((_1031 * _1026) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_984 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1046 = ((_1031 * _1027) / cbModelParam._m0[34u].z) + ((((((_988 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1044, _1045, _1046), 0.0);
        float _1083 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1049.x + (-0.5));
        float _1085 = _1083 * (_1049.y + (-0.5));
        float _1086 = _1083 * (_1049.z + (-0.5));
        float _1093 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1056.x + (-0.5));
        float _1095 = _1093 * (_1056.y + (-0.5));
        float _1096 = _1093 * (_1056.z + (-0.5));
        float _1103 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1063.x + (-0.5));
        float _1105 = _1103 * (_1063.y + (-0.5));
        float _1106 = _1103 * (_1063.z + (-0.5));
        float _1113 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1070.x + (-0.5));
        float _1115 = _1113 * (_1070.y + (-0.5));
        float _1116 = _1113 * (_1070.z + (-0.5));
        float _1117 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1118 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = _1084 * 0.5;
        float _1121 = _1094 * 0.5;
        float _1122 = _1104 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1137 = (dot(vec3(_735, _736, _737), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1147 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1117 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _4101 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1149 + 1.0))) + _1154) * _1117;
        float _1164 = _1085 * 0.5;
        float _1165 = _1095 * 0.5;
        float _1166 = _1105 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_735, _736, _737), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1118 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _4134 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1191 + 1.0))) + _1196) * _1118;
        float _1206 = _1086 * 0.5;
        float _1207 = _1096 * 0.5;
        float _1208 = _1106 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_735, _736, _737), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _4167 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1233 + 1.0))) + _1238) * _1119;
        _1255 = _1086;
        _1257 = _1085;
        _1258 = _1084;
        _1259 = _1096;
        _1260 = _1095;
        _1261 = _1094;
        _1262 = _1106;
        _1263 = _1105;
        _1264 = _1104;
        _1265 = _1119;
        _1266 = _1118;
        _1267 = _1117;
        _1268 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1269 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
    }
    else
    {
        _1255 = _1256;
        _1257 = _1256;
        _1258 = _1256;
        _1259 = _1256;
        _1260 = _1256;
        _1261 = _1256;
        _1262 = _1256;
        _1263 = _1256;
        _1264 = _1256;
        _1265 = _1256;
        _1266 = _1256;
        _1267 = _1256;
        _1268 = 0.0;
        _1269 = 0.0;
        _1270 = 0.0;
    }
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1296 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1300 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1304 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1327 = _945 + _735;
        float _1328 = _949 + _736;
        float _1329 = _953 + _737;
        float _1339 = fma(_1329, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327)) - _1296;
        float _1340 = fma(_1329, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327)) - _1300;
        float _1341 = fma(_1329, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327)) - _1304;
        float _1345 = inversesqrt(dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341)));
        float _1358 = ((_1345 * _1339) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1296 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1345 * _1340) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1300 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1345 * _1341) / cbModelParam._m0[35u].z) + ((((((_1304 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1395 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1362.x + (-0.5));
        float _1397 = _1395 * (_1362.y + (-0.5));
        float _1398 = _1395 * (_1362.z + (-0.5));
        float _1405 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1369.x + (-0.5));
        float _1407 = _1405 * (_1369.y + (-0.5));
        float _1408 = _1405 * (_1369.z + (-0.5));
        float _1415 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1376.x + (-0.5));
        float _1417 = _1415 * (_1376.y + (-0.5));
        float _1418 = _1415 * (_1376.z + (-0.5));
        float _1425 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1383.x + (-0.5));
        float _1427 = _1425 * (_1383.y + (-0.5));
        float _1428 = _1425 * (_1383.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_735, _736, _737), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4230 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1459 + 1.0))) + _1464) * _1429;
        float _1474 = _1397 * 0.5;
        float _1475 = _1407 * 0.5;
        float _1476 = _1417 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_735, _736, _737), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4263 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1501 + 1.0))) + _1506) * _1430;
        float _1516 = _1398 * 0.5;
        float _1517 = _1408 * 0.5;
        float _1518 = _1418 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_735, _736, _737), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4296 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1543 + 1.0))) + _1548) * _1431;
        _1565 = _1398;
        _1566 = _1397;
        _1567 = _1396;
        _1568 = _1408;
        _1569 = _1407;
        _1570 = _1406;
        _1571 = _1418;
        _1572 = _1417;
        _1573 = _1416;
        _1574 = _1431;
        _1575 = _1430;
        _1576 = _1429;
        _1577 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1578 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1579 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1256;
        _1566 = _1256;
        _1567 = _1256;
        _1568 = _1256;
        _1569 = _1256;
        _1570 = _1256;
        _1571 = _1256;
        _1572 = _1256;
        _1573 = _1256;
        _1574 = _1256;
        _1575 = _1256;
        _1576 = _1256;
        _1577 = 0.0;
        _1578 = 0.0;
        _1579 = 0.0;
    }
    float _1589 = (cbModelParam._m0[1u].x * (_1577 - _1268)) + _1268;
    float _1590 = (cbModelParam._m0[1u].x * (_1578 - _1269)) + _1269;
    float _1591 = (cbModelParam._m0[1u].x * (_1579 - _1270)) + _1270;
    float _1612 = fma(_1591, cbSceneParam._m0[89u].z, fma(_1590, cbSceneParam._m0[89u].y, _1589 * cbSceneParam._m0[89u].x));
    float _1615 = fma(_1591, cbSceneParam._m0[90u].z, fma(_1590, cbSceneParam._m0[90u].y, _1589 * cbSceneParam._m0[90u].x));
    float _1618 = fma(_1591, cbSceneParam._m0[91u].z, fma(_1590, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1589));
    float _1633 = _893 * 0.5;
    float _1634 = _894 * 0.5;
    float _1635 = _895 * 0.5;
    float _1636 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1567, _1570, _1573, _1576));
    float _1639 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1566, _1569, _1572, _1575));
    float _1642 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1565, _1568, _1571, _1574));
    float _1676;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1649 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1255, _1259, _1262, _1265));
        float _1653 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1257, _1260, _1263, _1266));
        float _1657 = dot(vec4(_1633, _1634, _1635, 1.0), vec4(_1258, _1261, _1264, _1267));
        float _1664 = dot(vec4(cbModelParam._m0[39u]), vec4(_1633, _1634, _1635, 1.0));
        _1676 = dot(vec3(isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1664) ? 0.0 : (isnan(0.0) ? _1664 : max(0.0, _1664))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1676 = 1.0;
    }
    float _1687;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1678 = dot(vec4(cbModelParam._m0[40u]), vec4(_1633, _1634, _1635, 1.0));
        _1687 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1687 = 1.0;
    }
    float _1691 = (_1687 * cbModelParam._m0[1u].x) + (_1676 * (1.0 - cbModelParam._m0[1u].x));
    float _1701 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _738);
    float _1702 = isnan(_1701) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1701 : min(cbModelParam._m0[25u].z, _1701));
    float _1782;
    float _1784;
    float _1786;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1749 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1753 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1757 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1760 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1763 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1766 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1794;
        if (_1760 > 0.0)
        {
            _1794 = abs((1.0 - _1749) / _1760);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1749 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1794 = frontier_phi_14_12_ladder;
        }
        float _1963;
        if (_1763 > 0.0)
        {
            _1963 = abs((1.0 - _1753) / _1763);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1753 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1963 = frontier_phi_23_19_ladder;
        }
        float _2259;
        if (_1766 > 0.0)
        {
            _2259 = abs((1.0 - _1757) / _1766);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1757 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2259 = frontier_phi_35_30_ladder;
        }
        float _2261 = isnan(_1963) ? _1794 : (isnan(_1794) ? _1963 : min(_1794, _1963));
        float _2262 = isnan(_2259) ? _2261 : (isnan(_2261) ? _2259 : min(_2261, _2259));
        float _2266 = (_2262 * _1760) + _1749;
        float _2267 = (_2262 * _1763) + _1753;
        float _2268 = (_2262 * _1766) + _1757;
        float _2269 = _2262 * 9.9999997473787516355514526367188e-05;
        float _2271 = (-1.0) - _2269;
        float _2273 = _2269 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2268 > _2273) || ((_2268 < _2271) || ((_2267 > _2273) || ((_2267 < _2271) || ((_2266 < _2271) || (_2266 > _2273))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2413 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2268, cbModelParam._m0[9u].z, fma(_2267, cbModelParam._m0[9u].y, _2266 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2268, cbModelParam._m0[10u].z, fma(_2267, cbModelParam._m0[10u].y, _2266 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2268, cbModelParam._m0[11u].z, fma(_2267, cbModelParam._m0[11u].y, _2266 * cbModelParam._m0[11u].x))), _1702);
            frontier_phi_13_35_ladder = _2413.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2413.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2413.x * cbModelParam._m0[1u].y;
        }
        _1782 = frontier_phi_13_35_ladder_2;
        _1784 = frontier_phi_13_35_ladder_1;
        _1786 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1702);
        _1782 = _1770.x * cbModelParam._m0[1u].y;
        _1784 = _1770.y * cbModelParam._m0[1u].y;
        _1786 = _1770.z * cbModelParam._m0[1u].y;
    }
    float _1790 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _738);
    float _1791 = isnan(_1790) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1790 : min(cbModelParam._m0[25u].w, _1790));
    float _1880;
    float _1882;
    float _1884;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1844 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1848 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1852 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1855 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1858 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1861 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _1968;
        if (_1855 > 0.0)
        {
            _1968 = abs((1.0 - _1844) / _1855);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1855 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1844 + 1.0) / _1855);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1968 = frontier_phi_25_21_ladder;
        }
        float _2286;
        if (_1858 > 0.0)
        {
            _2286 = abs((1.0 - _1848) / _1858);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1848 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2286 = frontier_phi_37_32_ladder;
        }
        float _2613;
        if (_1861 > 0.0)
        {
            _2613 = abs((1.0 - _1852) / _1861);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1852 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2613 = frontier_phi_47_44_ladder;
        }
        float _2615 = isnan(_2286) ? _1968 : (isnan(_1968) ? _2286 : min(_1968, _2286));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1855) + _1844;
        float _2621 = (_2616 * _1858) + _1848;
        float _2622 = (_2616 * _1861) + _1852;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1791);
            frontier_phi_22_47_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1880 = frontier_phi_22_47_ladder_2;
        _1882 = frontier_phi_22_47_ladder_1;
        _1884 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1864 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1791);
        _1880 = _1864.x * cbModelParam._m0[1u].z;
        _1882 = _1864.y * cbModelParam._m0[1u].z;
        _1884 = _1864.z * cbModelParam._m0[1u].z;
    }
    float _1896 = ((((1.0 - _913) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_913 * _901)) * _885;
    float _1897 = _1896 * ((cbModelParam._m0[1u].w * (_1880 - _1782)) + _1782);
    float _1898 = _1896 * ((cbModelParam._m0[1u].w * (_1882 - _1784)) + _1784);
    float _1899 = _1896 * ((cbModelParam._m0[1u].w * (_1884 - _1786)) + _1786);
    float _1902 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, _1897 * cbSceneParam._m0[91u].x));
    float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1946 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1950 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1955 = _1942 / _1954;
    float _1956 = _1946 / _1954;
    float _1957 = _1950 / _1954;
    float _2104;
    float _2105;
    float _2106;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1984 = ((uint(_1957 > cbSceneParam._m0[59u].y) + uint(_1957 > cbSceneParam._m0[59u].x)) + uint(_1957 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1985 = _1984 + 43u;
        uint _1993 = _1984 + 44u;
        uint _2001 = _1984 + 45u;
        uint _2009 = _1984 + 46u;
        float _2020 = fma(_1954, cbSceneParam._m0[_1985].w, fma(_1950, cbSceneParam._m0[_1985].z, fma(_1946, cbSceneParam._m0[_1985].y, _1942 * cbSceneParam._m0[_1985].x)));
        float _2024 = fma(_1954, cbSceneParam._m0[_1993].w, fma(_1950, cbSceneParam._m0[_1993].z, fma(_1946, cbSceneParam._m0[_1993].y, _1942 * cbSceneParam._m0[_1993].x)));
        float _2032 = fma(_1954, cbSceneParam._m0[_2009].w, fma(_1950, cbSceneParam._m0[_2009].z, fma(_1946, cbSceneParam._m0[_2009].y, _1942 * cbSceneParam._m0[_2009].x)));
        float _2037 = cbSceneParam._m0[33u].z * _2032;
        float _2039 = cbSceneParam._m0[33u].w * _2032;
        float _2042 = fma(_1954, cbSceneParam._m0[_2001].w, fma(_1950, cbSceneParam._m0[_2001].z, fma(_1946, cbSceneParam._m0[_2001].y, _1942 * cbSceneParam._m0[_2001].x))) / _2032;
        float _2090 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
        float _4422 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
        float _2097 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2037 + _2020) / _2032, (_2039 + _2024) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 + _2020) / _2032, (_2024 - _2037) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2037) / _2032, (_2024 - _2039) / _2032), _2042), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2020 - _2039) / _2032, (_2037 + _2024) / _2032), _2042), 0.0)).x), vec4(0.25)));
        _2104 = 1.0 - (_2097 * cbSceneParam._m0[34u].x);
        _2105 = 1.0 - (_2097 * cbSceneParam._m0[34u].y);
        _2106 = 1.0 - (_2097 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2104 = 1.0;
        _2105 = 1.0;
        _2106 = 1.0;
    }
    float _2170;
    float _2172;
    float _2174;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2158 = fma(_1954, cbSceneParam._m0[63u].w, fma(_1950, cbSceneParam._m0[63u].z, fma(_1946, cbSceneParam._m0[63u].y, _1942 * cbSceneParam._m0[63u].x)));
        float _2159 = fma(_1954, cbSceneParam._m0[60u].w, fma(_1950, cbSceneParam._m0[60u].z, fma(_1946, cbSceneParam._m0[60u].y, _1942 * cbSceneParam._m0[60u].x))) / _2158;
        float _2160 = fma(_1954, cbSceneParam._m0[61u].w, fma(_1950, cbSceneParam._m0[61u].z, fma(_1946, cbSceneParam._m0[61u].y, _1942 * cbSceneParam._m0[61u].x))) / _2158;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2159 >= cbSceneParam._m0[64u].x) && (_2160 >= cbSceneParam._m0[64u].y)) && (_2159 <= cbSceneParam._m0[64u].z)) && (_2160 <= cbSceneParam._m0[64u].w))
        {
            float _2299 = fma(_1954, cbSceneParam._m0[62u].w, fma(_1950, cbSceneParam._m0[62u].z, fma(_1946, cbSceneParam._m0[62u].y, _1942 * cbSceneParam._m0[62u].x))) / _2158;
            float _2303 = isnan(cbSceneParam._m0[41u].w) ? _2299 : (isnan(_2299) ? cbSceneParam._m0[41u].w : max(_2299, cbSceneParam._m0[41u].w));
            float _2346 = (cbSceneParam._m0[33u].x - sqrt(((_1956 * _1956) + (_1955 * _1955)) + (_1957 * _1957))) * cbSceneParam._m0[33u].y;
            float _4438 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
            float _2353 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2159, cbSceneParam._m0[33u].w + _2160), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2159, _2160 - cbSceneParam._m0[33u].z), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].z, _2160 - cbSceneParam._m0[33u].w), _2303), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2159 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2160), _2303), 0.0)).x), vec4(0.25)));
            float _2357 = 1.0 - (_2353 * cbSceneParam._m0[34u].x);
            float _2358 = 1.0 - (_2353 * cbSceneParam._m0[34u].y);
            float _2359 = 1.0 - (_2353 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2359) ? _2106 : (isnan(_2106) ? _2359 : min(_2106, _2359));
            frontier_phi_34_33_ladder_1 = isnan(_2358) ? _2105 : (isnan(_2105) ? _2358 : min(_2105, _2358));
            frontier_phi_34_33_ladder_2 = isnan(_2357) ? _2104 : (isnan(_2104) ? _2357 : min(_2104, _2357));
        }
        else
        {
            frontier_phi_34_33_ladder = _2106;
            frontier_phi_34_33_ladder_1 = _2105;
            frontier_phi_34_33_ladder_2 = _2104;
        }
        _2170 = frontier_phi_34_33_ladder_2;
        _2172 = frontier_phi_34_33_ladder_1;
        _2174 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2170 = _2104;
        _2172 = _2105;
        _2174 = _2106;
    }
    uvec4 _2179 = floatBitsToUint(cbInstanceData._m0[_860 + 5u]);
    uint _2181 = _2179.x * 14u;
    uint _2182 = _2181 + 13u;
    float _2189 = _885 + (-1.0);
    float _2194 = (cbLight._m0[_2182].x * _2189) + 1.0;
    float _2195 = (cbLight._m0[_2182].y * _2189) + 1.0;
    float _2196 = (cbLight._m0[_2182].z * _2189) + 1.0;
    float _2197 = (cbLight._m0[_2182].w * _2189) + 1.0;
    uint _2198 = _2181 + 5u;
    float _2204 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2208 = _2181 + 4u;
    float _2218 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2222 = _2181 | 1u;
    float _2233 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_735, _736, _737));
    float _2236 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_735, _736, _737));
    float _4474 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _4485 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2241 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2243 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2250 = ((cbLight._m0[_2198].x * _2204) * _2243) + (((cbLight._m0[_2208].x * _2170) * _2218) * _2241);
    float _2251 = ((_2204 * cbLight._m0[_2198].y) * _2243) + (((cbLight._m0[_2208].y * _2172) * _2218) * _2241);
    float _2252 = ((_2204 * cbLight._m0[_2198].z) * _2243) + (((cbLight._m0[_2208].z * _2174) * _2218) * _2241);
    uvec4 _2256 = floatBitsToUint(cbLight._m0[_2181 + 12u]);
    bool _2258 = _2256.x == 0u;
    float _2360;
    float _2362;
    float _2364;
    if (_2258)
    {
        _2360 = _2250;
        _2362 = _2251;
        _2364 = _2252;
    }
    else
    {
        uint _2368 = _2181 + 6u;
        float _2384 = (dot(vec3(cbLight._m0[_2181 + 2u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2385 = _2384 * _2384;
        float _4496 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
        float _2386 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2387 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2360 = (((cbLight._m0[_2368].x * 0.3183098733425140380859375) * _2386) * _2387) + _2250;
        _2362 = (((cbLight._m0[_2368].y * 0.3183098733425140380859375) * _2386) * _2387) + _2251;
        _2364 = (((cbLight._m0[_2368].z * 0.3183098733425140380859375) * _2386) * _2387) + _2252;
    }
    bool _2367 = _2256.y == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2367)
    {
        _2422 = _2360;
        _2424 = _2362;
        _2426 = _2364;
    }
    else
    {
        uint _2584 = _2181 + 7u;
        float _2600 = (dot(vec3(cbLight._m0[_2181 + 3u].xyz), vec3(_735, _736, _737)) * 0.5) + 0.5;
        float _2601 = _2600 * _2600;
        float _4512 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2602 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2603 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2422 = (((cbLight._m0[_2584].x * 0.3183098733425140380859375) * _2602) * _2603) + _2360;
        _2424 = (((cbLight._m0[_2584].y * 0.3183098733425140380859375) * _2602) * _2603) + _2362;
        _2426 = (((cbLight._m0[_2584].z * 0.3183098733425140380859375) * _2602) * _2603) + _2364;
    }
    uint _2429 = _2181 + 8u;
    float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _738) * 0.949999988079071044921875);
    float _2443 = _2442 * _2442;
    float _2444 = cbLight._m0[_2181].x + _814;
    float _2445 = cbLight._m0[_2181].y + _815;
    float _2446 = cbLight._m0[_2181].z + _816;
    float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
    float _2451 = _2450 * _2444;
    float _2452 = _2450 * _2445;
    float _2453 = _2450 * _2446;
    float _2454 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2181].xyz));
    float _4528 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2457 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2458 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2459 = dot(vec3(_735, _736, _737), vec3(_2451, _2452, _2453));
    float _4550 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2463 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2451, _2452, _2453));
    float _4561 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
    float _2467 = _2443 * _2443;
    float _2471 = ((_2462 * _2462) * (_2467 + (-1.0))) + 1.0;
    float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2483 = 1.0 - _2443;
    float _2494 = (0.5 / (((_2458 * ((_2457 * _2483) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2483) + _2443) * _2457))) * _2457;
    float _4572 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2496 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2467 / ((_2471 * _2471) * 3.141590118408203125));
    uint _2510 = _2181 + 9u;
    float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _738) * 0.949999988079071044921875);
    float _2522 = _2521 * _2521;
    float _2523 = cbLight._m0[_2222].x + _814;
    float _2524 = cbLight._m0[_2222].y + _815;
    float _2525 = cbLight._m0[_2222].z + _816;
    float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
    float _2530 = _2529 * _2523;
    float _2531 = _2529 * _2524;
    float _2532 = _2529 * _2525;
    float _2533 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2222].xyz));
    float _4583 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2537 = dot(vec3(_735, _736, _737), vec3(_2530, _2531, _2532));
    float _4594 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2540 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2541 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2530, _2531, _2532));
    float _4605 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2545 = _2522 * _2522;
    float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
    float _2558 = (exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2559 = 1.0 - _2522;
    float _2569 = (0.5 / (((_2458 * ((_2536 * _2559) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2559) + _2522) * _2536))) * _2536;
    float _4616 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
    float _2581 = (((_2558 * cbLight._m0[_2510].x) * _2571) * _2204) + ((((cbLight._m0[_2429].x * _2170) * _2482) * _2496) * _2218);
    float _2582 = (((_2558 * cbLight._m0[_2510].y) * _2571) * _2204) + ((((cbLight._m0[_2429].y * _2172) * _2482) * _2496) * _2218);
    float _2583 = (((_2558 * cbLight._m0[_2510].z) * _2571) * _2204) + ((((cbLight._m0[_2429].z * _2174) * _2482) * _2496) * _2218);
    float _2639;
    float _2641;
    float _2643;
    if (_2258)
    {
        _2639 = _2581;
        _2641 = _2582;
        _2643 = _2583;
    }
    else
    {
        uint _2645 = _2181 + 2u;
        uint _2649 = _2181 + 10u;
        float _2663 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2645].w)) * _738) * 0.949999988079071044921875);
        float _2664 = _2663 * _2663;
        float _2665 = cbLight._m0[_2645].x + _814;
        float _2666 = cbLight._m0[_2645].y + _815;
        float _2667 = cbLight._m0[_2645].z + _816;
        float _2671 = inversesqrt(dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667)));
        float _2672 = _2671 * _2665;
        float _2673 = _2671 * _2666;
        float _2674 = _2671 * _2667;
        float _2675 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2645].xyz));
        float _4627 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2679 = dot(vec3(_735, _736, _737), vec3(_2672, _2673, _2674));
        float _4638 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2683 = dot(vec3(cbLight._m0[_2645].xyz), vec3(_2672, _2673, _2674));
        float _4649 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2687 = _2664 * _2664;
        float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
        float _2700 = (exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2701 = 1.0 - _2664;
        float _2711 = (0.5 / (((_2458 * ((_2678 * _2701) + _2664)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2701) + _2664) * _2678))) * _2678;
        float _4660 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2639 = (((_2700 * cbLight._m0[_2649].x) * _2713) * _2714) + _2581;
        _2641 = (((_2700 * cbLight._m0[_2649].y) * _2713) * _2714) + _2582;
        _2643 = (((_2700 * cbLight._m0[_2649].z) * _2713) * _2714) + _2583;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2367)
    {
        _2745 = _2639;
        _2747 = _2641;
        _2749 = _2643;
    }
    else
    {
        uint _2756 = _2181 + 3u;
        uint _2760 = _2181 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _738) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _814;
        float _2777 = cbLight._m0[_2756].y + _815;
        float _2778 = cbLight._m0[_2756].z + _816;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_735, _736, _737), vec3(cbLight._m0[_2756].xyz));
        float _4676 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2790 = dot(vec3(_735, _736, _737), vec3(_2783, _2784, _2785));
        float _4687 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4698 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2811 = (exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2812 = 1.0 - _2775;
        float _2822 = (0.5 / (((_2458 * ((_2789 * _2812) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2458 * _2812) + _2775) * _2789))) * _2789;
        float _4709 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2824 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2825 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2745 = (((_2811 * cbLight._m0[_2760].x) * _2824) * _2825) + _2639;
        _2747 = (((_2811 * cbLight._m0[_2760].y) * _2824) * _2825) + _2641;
        _2749 = (((_2811 * cbLight._m0[_2760].z) * _2824) * _2825) + _2643;
    }
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_2179.y == 0u)
    {
        uvec4 _2846 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2847 = _2846.x;
        uint _2858 = uint((float(_2846.y) * floor(float(uint(cbSceneParam._m0[85u].y * _823) / _2847))) + floor(float(uint(cbSceneParam._m0[85u].x * _822) / _2847)));
        float _2868 = (log2(_1957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2869 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        uint _2872 = uint(isnan(14.0) ? _2869 : (isnan(_2869) ? 14.0 : min(_2869, 14.0)));
        uvec4 _2877 = texelFetch(g_lightClusterGridBuffer, int(((_2872 << 2u) + (_2858 << 6u)) >> 2u));
        uint _2878 = _2877.x;
        uint _2879 = _2846.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2879 >> 4u) & 15u)) + 4294967295u) & _2878) == 0u) || ((_2879 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            uint _3162 = 0u;
            uint _3171;
            bool _3172;
            for (;;)
            {
                _3171 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                _3172 = _3171 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3172)
                {
                    frontier_phi_66_pred = _3161;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3156;
                    _3281 = _3157;
                    _3282 = _3158;
                    _3283 = _3159;
                    _3284 = _3160;
                    _3285 = _3161;
                    _3286 = _3171;
                    float _3212;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3162 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _1955;
                        float _3347 = _3306.y - _1956;
                        float _3348 = _3306.z - _1957;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_841, _844, _847), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4735 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _1955;
                        float _3382 = (-0.0) - _1956;
                        float _3383 = (-0.0) - _1957;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3397 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _901;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3388 + _3353;
                        float _3409 = _3389 + _3354;
                        float _3410 = _3390 + _3355;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_841, _844, _847), vec3(_3388, _3389, _3390));
                        float _4751 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3422 = dot(vec3(_841, _844, _847), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4762 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3366 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3356) + _3431;
                        float _4773 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4784 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3429 * _3429) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3215 = (_3377 * _3325.x) + _3283;
                        _3216 = (_3377 * _3325.y) + _3284;
                        _3217 = (_3377 * _3325.z) + _3285;
                        _3212 = (_3457 * _3342.x) + _3280;
                        _3213 = (_3457 * _3342.y) + _3281;
                        _3214 = (_3457 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3212;
                            _3281 = _3213;
                            _3282 = _3214;
                            _3283 = _3215;
                            _3284 = _3216;
                            _3285 = _3217;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3217;
                    frontier_phi_66_pred_1 = _3216;
                    frontier_phi_66_pred_2 = _3215;
                    frontier_phi_66_pred_3 = _3214;
                    frontier_phi_66_pred_4 = _3213;
                    frontier_phi_66_pred_5 = _3212;
                }
                _3014 = frontier_phi_66_pred;
                _3012 = frontier_phi_66_pred_1;
                _3010 = frontier_phi_66_pred_2;
                _3008 = frontier_phi_66_pred_3;
                _3006 = frontier_phi_66_pred_4;
                _3004 = frontier_phi_66_pred_5;
                uint _3163 = _3162 + 1u;
                if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3156 = _3004;
                    _3157 = _3006;
                    _3158 = _3008;
                    _3159 = _3010;
                    _3160 = _3012;
                    _3161 = _3014;
                    _3162 = _3163;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        if (((4294967295u << _3020) & _2878) == 0u)
        {
            _3124 = _3003;
            _3126 = _3005;
            _3128 = _3007;
            _3130 = _3009;
            _3132 = _3011;
            _3134 = _3013;
        }
        else
        {
            float _3149 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
            float _3150 = _3149 * _1955;
            float _3151 = _3149 * _1956;
            float _3152 = _3149 * _1957;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3125;
                float _3127;
                float _3129;
                float _3131;
                float _3133;
                float _3135;
                float _3263 = _3003;
                float _3264 = _3005;
                float _3265 = _3007;
                float _3266 = _3009;
                float _3267 = _3011;
                float _3268 = _3013;
                uint _3269 = _3020;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2872 << 5u) + (_2858 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3279)
                    {
                        frontier_phi_72_pred = _3268;
                        frontier_phi_72_pred_1 = _3267;
                        frontier_phi_72_pred_2 = _3266;
                        frontier_phi_72_pred_3 = _3265;
                        frontier_phi_72_pred_4 = _3264;
                        frontier_phi_72_pred_5 = _3263;
                    }
                    else
                    {
                        float _3462;
                        float _3463;
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3756;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3475 = _3263;
                        float _3476 = _3264;
                        float _3477 = _3265;
                        float _3478 = _3266;
                        float _3479 = _3267;
                        float _3480 = _3268;
                        uint _3481 = _3278;
                        uint _3482;
                        vec4 _3507;
                        float _3508;
                        vec4 _3523;
                        vec3 _3535;
                        vec4 _3550;
                        vec4 _3565;
                        float _3612;
                        bool _3613;
                        for (;;)
                        {
                            uint _3492 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3481));
                            _3482 = (_3481 + 4294967295u) & _3481;
                            uint _3494 = _3492 * 40u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            _3508 = _3507.w;
                            uint _3510 = (_3492 * 40u) + 4u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3492 * 40u) + 8u;
                            _3535 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x));
                            uint _3537 = (_3492 * 40u) + 16u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3492 * 40u) + 20u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3568 = (_3492 * 40u) + 24u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3587 = (_3492 * 40u) + 28u;
                            vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            _3612 = fma(_1957, _3600.z, fma(_1956, _3600.y, _3600.x * _1955)) + _3600.w;
                            _3613 = !((fma(_1957, _3581.z, fma(_1956, _3581.y, _3581.x * _1955)) + _3581.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3613)
                            {
                                float _3640 = _3507.x - _1955;
                                float _3641 = _3507.y - _1956;
                                float _3642 = _3507.z - _1957;
                                float _3643 = dot(vec3(_3640, _3641, _3642), vec3(_3640, _3641, _3642));
                                float _3646 = inversesqrt(_3643);
                                float _3647 = _3646 * _3640;
                                float _3648 = _3646 * _3641;
                                float _3649 = _3646 * _3642;
                                float _3653 = 1.0 - (_3643 / (_3508 * _3508));
                                float _4795 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3658 = sqrt(_3643) * _3523.w;
                                float _3660 = 1.39999997615814208984375 / (_3658 + 1.39999997615814208984375);
                                float _3661 = _3660 * _3660;
                                float _3664 = ((1.0 - _3661) * dot(vec3(_3647, _3648, _3649), vec3(_841, _844, _847))) + _3661;
                                float _3667 = _3658 * _3658;
                                float _3671 = (fma(_1957, _3550.z, fma(_1956, _3550.y, _3550.x * _1955)) + _3550.w) / _3612;
                                float _3672 = (fma(_1957, _3565.z, fma(_1956, _3565.y, _3565.x * _1955)) + _3565.w) / _3612;
                                float _3676 = 1.0 - dot(vec2(_3671, _3672), vec2(_3671, _3672));
                                float _4811 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                                float _3677 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3678 = _3677 * (((isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0))) * _3654) / ((_3667 * 0.699999988079071044921875) + 1.0));
                                float _3690 = exp2(log2(1.0 / ((_3667 * 3.5) + 5.0)) * 0.25);
                                float _3691 = 1.0 - _901;
                                float _3698 = sqrt(1.0 - ((1.0 - (_3691 * _3691)) * (1.0 - (_3690 * _3690))));
                                float _3699 = _3698 * _3698;
                                float _3700 = _3699 * _3699;
                                float _3701 = _3647 - _3150;
                                float _3702 = _3648 - _3151;
                                float _3703 = _3649 - _3152;
                                float _3707 = inversesqrt(dot(vec3(_3701, _3702, _3703), vec3(_3701, _3702, _3703)));
                                float _3711 = dot(vec3(_841, _844, _847), vec3((-0.0) - _3150, (-0.0) - _3151, (-0.0) - _3152));
                                float _4822 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3714 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3715 = dot(vec3(_841, _844, _847), vec3(_3707 * _3701, _3707 * _3702, _3707 * _3703));
                                float _4833 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3718 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3722 = ((_3718 * _3718) * (_3700 + (-1.0))) + 1.0;
                                float _3723 = _3660 * _3699;
                                float _3724 = _3723 * _3723;
                                float _3730 = ((1.0 - _3724) * dot(vec3(_841, _844, _847), vec3(_3647, _3648, _3649))) + _3724;
                                float _4844 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3731 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3732 = 1.0 - _3699;
                                float _3742 = (0.5 / (((_3731 * ((_3714 * _3732) + _3699)) + 9.9999999392252902907785028219223e-09) + (((_3731 * _3732) + _3699) * _3714))) * _3731;
                                float _4855 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3752 = (_3677 * _3654) * (((_3700 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3722 * _3722) * ((_3667 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3678 * _3523.y;
                                frontier_phi_78_pred_1 = _3678 * _3523.x;
                                frontier_phi_78_pred_2 = _3752 * _3535.z;
                                frontier_phi_78_pred_3 = _3752 * _3535.y;
                                frontier_phi_78_pred_4 = _3752 * _3535.x;
                                frontier_phi_78_pred_5 = _3678 * _3523.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3760 = frontier_phi_78_pred;
                            _3759 = frontier_phi_78_pred_1;
                            _3758 = frontier_phi_78_pred_2;
                            _3757 = frontier_phi_78_pred_3;
                            _3756 = frontier_phi_78_pred_4;
                            _3761 = frontier_phi_78_pred_5;
                            _3465 = _3759 + _3478;
                            _3466 = _3760 + _3479;
                            _3467 = _3761 + _3480;
                            _3462 = _3756 + _3475;
                            _3463 = _3757 + _3476;
                            _3464 = _3758 + _3477;
                            if (_3482 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3475 = _3462;
                                _3476 = _3463;
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3482;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3467;
                        frontier_phi_72_pred_1 = _3466;
                        frontier_phi_72_pred_2 = _3465;
                        frontier_phi_72_pred_3 = _3464;
                        frontier_phi_72_pred_4 = _3463;
                        frontier_phi_72_pred_5 = _3462;
                    }
                    _3135 = frontier_phi_72_pred;
                    _3133 = frontier_phi_72_pred_1;
                    _3131 = frontier_phi_72_pred_2;
                    _3129 = frontier_phi_72_pred_3;
                    _3127 = frontier_phi_72_pred_4;
                    _3125 = frontier_phi_72_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3125;
                        _3264 = _3127;
                        _3265 = _3129;
                        _3266 = _3131;
                        _3267 = _3133;
                        _3268 = _3135;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3135;
                frontier_phi_60_61_ladder_1 = _3133;
                frontier_phi_60_61_ladder_2 = _3129;
                frontier_phi_60_61_ladder_3 = _3127;
                frontier_phi_60_61_ladder_4 = _3125;
                frontier_phi_60_61_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_60_61_ladder = _3013;
                frontier_phi_60_61_ladder_1 = _3011;
                frontier_phi_60_61_ladder_2 = _3007;
                frontier_phi_60_61_ladder_3 = _3005;
                frontier_phi_60_61_ladder_4 = _3003;
                frontier_phi_60_61_ladder_5 = _3009;
            }
            _3124 = frontier_phi_60_61_ladder_4;
            _3126 = frontier_phi_60_61_ladder_3;
            _3128 = frontier_phi_60_61_ladder_2;
            _3130 = frontier_phi_60_61_ladder_5;
            _3132 = frontier_phi_60_61_ladder_1;
            _3134 = frontier_phi_60_61_ladder;
        }
        float _3139 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2891 = (_3139 * _3130) + _2422;
        _2893 = (_3139 * _3132) + _2424;
        _2895 = (_3139 * _3134) + _2426;
        _2897 = ((_3124 * 0.039999999105930328369140625) * _3139) + _2745;
        _2899 = ((_3126 * 0.039999999105930328369140625) * _3139) + _2747;
        _2901 = ((_3128 * 0.039999999105930328369140625) * _3139) + _2749;
    }
    else
    {
        _2891 = _2422;
        _2893 = _2424;
        _2895 = _2426;
        _2897 = _2745;
        _2899 = _2747;
        _2901 = _2749;
    }
    uint _2907 = _861 + uint(cbMatDynParam._m0[0u].w);
    float _2913 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2919 = (((((_2913 * cbMtdParam._m0[14u].x) * _619.x) * _642) * _721) * (((1.0 - _695) * cbMtdParam._m0[20u].w) + _695)) * cbInstanceData._m0[_2907].x;
    float _2925 = (((((_2913 * cbMtdParam._m0[14u].y) * _619.y) * _642) * _721) * (((1.0 - _697) * cbMtdParam._m0[20u].w) + _697)) * cbInstanceData._m0[_2907].y;
    float _2931 = (((((_2913 * cbMtdParam._m0[14u].z) * _619.z) * _642) * _721) * (((1.0 - _699) * cbMtdParam._m0[20u].w) + _699)) * cbInstanceData._m0[_2907].z;
    float _4871 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4882 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _4893 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2948 = (((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2891 + ((isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0))) * _885))) + ((_2897 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + _2919;
    float _2950 = (_2925 + ((_2899 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2893 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _885)));
    float _2952 = (_2931 + ((_2901 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1691)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2895 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _885)));
    float _4919 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2965 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
    uint _2966 = _860 + 6u;
    float _2974 = _822 / cbSceneParam._m0[86u].x;
    float _2975 = _823 / cbSceneParam._m0[86u].y;
    vec4 _2989 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, (log2((isnan(cbSceneParam._m0[77u].w) ? _757 : (isnan(_757) ? cbSceneParam._m0[77u].w : min(_757, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2991 = _2989.x;
    float _2992 = _2989.y;
    float _2993 = _2989.z;
    float _2994 = _2989.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_757 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_757) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _757 : min(cbSceneParam._m0[80u].w, _757));
        float _3029 = _3028 / _757;
        float _3040 = _3029 * _807;
        float _3041 = _808 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3043 = _3029 * _809;
        float _3045 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3041;
        float _3053 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3225;
        if (abs((_3042 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3225 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3185 = 1.0 / cbSceneParam._m0[80u].x;
            float _3186 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3187 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            _3225 = ((abs(_3053 / _3042) * cbSceneParam._m0[80u].y) * ((((_3196 - _3197) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))))) * _3185)) - ((exp2(_3063 * _3196) - exp2(_3063 * _3197)) * _3185))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3227 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2974, _2975, 1.0), 0.0);
        float _3236 = exp2((_3225 * (-1.44269502162933349609375)) * (1.0 - _3227.w));
        float _3237 = log2(_3236);
        float _3253 = log2(_2994);
        _3065 = (exp2(_3253 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].x)) * _3227.x) / cbSceneParam._m0[78u].x)) + _2991;
        _3067 = (exp2(_3253 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].y)) * _3227.y) / cbSceneParam._m0[78u].y)) + _2992;
        _3069 = (exp2(_3253 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3237 * cbSceneParam._m0[78u].z)) * _3227.z) / cbSceneParam._m0[78u].z)) + _2993;
        _3071 = _3236 * _2994;
    }
    else
    {
        _3065 = _2991;
        _3067 = _2992;
        _3069 = _2993;
        _3071 = _2994;
    }
    float _3083 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3084 = _3083 == 3.0;
    float _3085 = log2(_3071);
    float _3089 = exp2(_3085 * cbSceneParam._m0[78u].x);
    float _3090 = exp2(_3085 * cbSceneParam._m0[78u].y);
    float _3091 = exp2(_3085 * cbSceneParam._m0[78u].z);
    float _3092 = _3089 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)));
    float _3093 = _3090 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0)));
    float _3094 = _3091 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0)));
    float _3103 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3103 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
    SV_Target.y = _3103 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
    SV_Target.z = _3103 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
    SV_Target.w = cbInstanceData._m0[_2966].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2919) * _2965) * _3089) * _3103;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2925) * _2965) * _3090) * _3103;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2931) * _2965) * _3091) * _3103;
    SV_Target_1.w = cbInstanceData._m0[_2966].w;
}


