#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1249;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _304 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _341 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _304.x) * 2.0) - _331)) + 1.0;
    float _3892 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _349 = (_342 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _350 = (_342 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _351 = (_342 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _370 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _383 = (((((1.0 - _304.y) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3903 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _391 = (((_370.x * cbMtdParam._m0[12u].x) - _349) * _384) + _349;
    float _392 = (_384 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _393 = (_384 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _411 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _424 = (((((1.0 - _304.z) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3914 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _432 = (((_411.x * cbMtdParam._m0[13u].x) - _391) * _425) + _391;
    float _433 = (_425 * ((_411.y * cbMtdParam._m0[13u].y) - _392)) + _392;
    float _434 = (_425 * ((_411.z * cbMtdParam._m0[13u].z) - _393)) + _393;
    vec4 _447 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _461 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    vec4 _477 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _488 = ((_477.x - _463) * _342) + _463;
    float _489 = ((_477.y - _464) * _342) + _464;
    float _490 = ((_477.z - _465) * _342) + _465;
    vec4 _503 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = ((_503.x - _488) * _384) + _488;
    float _515 = ((_503.y - _489) * _384) + _489;
    float _516 = ((_503.z - _490) * _384) + _490;
    vec4 _529 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _542 = ((_529.z - _516) * _425) + _516;
    float _545 = ((((_529.x - _514) * _425) + _514) * 2.0) + (-1.0);
    float _547 = ((((_529.y - _515) * _425) + _515) * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _3925 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))));
    vec4 _586 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _600 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3936 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _609 = (((_601 * _601) * (3.0 - (_601 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _617 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _625 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3947 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _630 = (_626 * _626) * (3.0 - (_626 * 2.0));
    float _631 = _630 * cbMtdParam._m0[22u].x;
    float _632 = _630 * cbMtdParam._m0[22u].y;
    float _633 = sin(_617);
    float _634 = cos(_617);
    float _635 = TEXCOORD.z - _631;
    float _636 = TEXCOORD.w - _632;
    vec4 _656 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_631 + fma(_636, (-0.0) - _633, _635 * _634))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_636, _634, _635 * _633) + _632)) + cbTextureTilingScale._m0[2u].w));
    float _662 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _656.x;
    float _664 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _656.y;
    float _666 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _656.z;
    float _687 = (TEXCOORD_5.x - (((_447.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3958 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    vec4 _701 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _711 = (((_701.x * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _545;
    float _712 = (((_701.y * 2.0) + (-1.0)) * cbMtdParam._m0[20u].z) + _547;
    float _715 = fma(_553, _229 * NORMAL.x, fma(_712, _236 * TANGENT.x, (_222 * _214) * _711));
    float _718 = fma(_553, _229 * NORMAL.y, fma(_712, _236 * TANGENT.y, (_222 * _215) * _711));
    float _721 = fma(_553, _229 * NORMAL.z, fma(_712, _236 * TANGENT.z, (_222 * _216) * _711));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _3969 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _729 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _3980 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3991 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4002 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    float _814 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _815 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _834 = fma(_728, cbSceneParam._m0[5u].z, fma(_727, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _726));
    float _837 = fma(_728, cbSceneParam._m0[6u].z, fma(_727, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _726));
    float _840 = fma(_728, cbSceneParam._m0[7u].z, fma(_727, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _726));
    uint _853 = uint(roundEven(NORMAL.w)) * 13u;
    uint _854 = _853 + 9u;
    uint _855 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _861 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0)))) * cbInstanceData._m0[_855].x;
    float _862 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * cbInstanceData._m0[_855].y;
    float _863 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_855].z;
    float _4013 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _864 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _4024 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _865 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    vec4 _875 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _814, cbSceneParam._m0[86u].y * _815));
    float _878 = _875.x * TEXCOORD_5.w;
    float _879 = dot(vec3(_726, _727, _728), vec3(_806, _807, _808));
    float _882 = _879 * 2.0;
    float _886 = (_882 * _726) - _806;
    float _887 = (_882 * _727) - _807;
    float _888 = (_882 * _728) - _808;
    float _892 = abs(dot(vec3(_806, _807, _808), vec3(_726, _727, _728)));
    float _4046 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _894 = sqrt(_729);
    float _906 = exp2((_894 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_894 * 3.0));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _977 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _981 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1006 = _938 + _726;
        float _1007 = _942 + _727;
        float _1008 = _946 + _728;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_726, _727, _728), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _4094 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_726, _727, _728), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4127 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_726, _727, _728), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4160 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1293 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1297 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1320 = _938 + _726;
        float _1321 = _942 + _727;
        float _1322 = _946 + _728;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_726, _727, _728), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4223 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_726, _727, _728), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4256 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_726, _727, _728), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4289 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1249;
        _1559 = _1249;
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = _1249;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1263)) + _1263;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _886 * 0.5;
    float _1627 = _887 * 0.5;
    float _1628 = _888 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _729);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_888, cbModelParam._m0[13u].z, fma(_887, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _886));
        float _1756 = fma(_888, cbModelParam._m0[14u].z, fma(_887, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _886));
        float _1759 = fma(_888, cbModelParam._m0[15u].z, fma(_887, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _886));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1787 = frontier_phi_14_12_ladder;
        }
        float _1956;
        if (_1756 > 0.0)
        {
            _1956 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1956 = frontier_phi_23_19_ladder;
        }
        float _2252;
        if (_1759 > 0.0)
        {
            _2252 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2252 = frontier_phi_35_30_ladder;
        }
        float _2254 = isnan(_1956) ? _1787 : (isnan(_1787) ? _1956 : min(_1787, _1956));
        float _2255 = isnan(_2252) ? _2254 : (isnan(_2254) ? _2252 : min(_2254, _2252));
        float _2259 = (_2255 * _1753) + _1742;
        float _2260 = (_2255 * _1756) + _1746;
        float _2261 = (_2255 * _1759) + _1750;
        float _2262 = _2255 * 9.9999997473787516355514526367188e-05;
        float _2264 = (-1.0) - _2262;
        float _2266 = _2262 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2261 > _2266) || ((_2261 < _2264) || ((_2260 > _2266) || ((_2260 < _2264) || ((_2259 < _2264) || (_2259 > _2266))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2406 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2261, cbModelParam._m0[9u].z, fma(_2260, cbModelParam._m0[9u].y, _2259 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2261, cbModelParam._m0[10u].z, fma(_2260, cbModelParam._m0[10u].y, _2259 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2261, cbModelParam._m0[11u].z, fma(_2260, cbModelParam._m0[11u].y, _2259 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_13_35_ladder = _2406.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2406.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2406.x * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_13_35_ladder_2;
        _1777 = frontier_phi_13_35_ladder_1;
        _1779 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_886, _887, _888), _1695);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _729);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1837 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1841 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1845 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1848 = fma(_888, cbModelParam._m0[21u].z, fma(_887, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _886));
        float _1851 = fma(_888, cbModelParam._m0[22u].z, fma(_887, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _886));
        float _1854 = fma(_888, cbModelParam._m0[23u].z, fma(_887, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _886));
        float _1961;
        if (_1848 > 0.0)
        {
            _1961 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1961 = frontier_phi_25_21_ladder;
        }
        float _2279;
        if (_1851 > 0.0)
        {
            _2279 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2279 = frontier_phi_37_32_ladder;
        }
        float _2606;
        if (_1854 > 0.0)
        {
            _2606 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2606 = frontier_phi_47_44_ladder;
        }
        float _2608 = isnan(_2279) ? _1961 : (isnan(_1961) ? _2279 : min(_1961, _2279));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1848) + _1837;
        float _2614 = (_2609 * _1851) + _1841;
        float _2615 = (_2609 * _1854) + _1845;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_22_47_ladder = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1873 = frontier_phi_22_47_ladder_2;
        _1875 = frontier_phi_22_47_ladder_1;
        _1877 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_886, _887, _888), _1784);
        _1873 = _1857.x * cbModelParam._m0[1u].z;
        _1875 = _1857.y * cbModelParam._m0[1u].z;
        _1877 = _1857.z * cbModelParam._m0[1u].z;
    }
    float _1889 = ((((1.0 - _906) * ((_894 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_906 * _894)) * _878;
    float _1890 = _1889 * ((cbModelParam._m0[1u].w * (_1873 - _1775)) + _1775);
    float _1891 = _1889 * ((cbModelParam._m0[1u].w * (_1875 - _1777)) + _1777);
    float _1892 = _1889 * ((cbModelParam._m0[1u].w * (_1877 - _1779)) + _1779);
    float _1895 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1898 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1901 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, _1890 * cbSceneParam._m0[91u].x));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1948 = _1935 / _1947;
    float _1949 = _1939 / _1947;
    float _1950 = _1943 / _1947;
    float _2097;
    float _2098;
    float _2099;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1977 = ((uint(_1950 > cbSceneParam._m0[59u].y) + uint(_1950 > cbSceneParam._m0[59u].x)) + uint(_1950 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1978 = _1977 + 43u;
        uint _1986 = _1977 + 44u;
        uint _1994 = _1977 + 45u;
        uint _2002 = _1977 + 46u;
        float _2013 = fma(_1947, cbSceneParam._m0[_1978].w, fma(_1943, cbSceneParam._m0[_1978].z, fma(_1939, cbSceneParam._m0[_1978].y, _1935 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1947, cbSceneParam._m0[_1986].w, fma(_1943, cbSceneParam._m0[_1986].z, fma(_1939, cbSceneParam._m0[_1986].y, _1935 * cbSceneParam._m0[_1986].x)));
        float _2025 = fma(_1947, cbSceneParam._m0[_2002].w, fma(_1943, cbSceneParam._m0[_2002].z, fma(_1939, cbSceneParam._m0[_2002].y, _1935 * cbSceneParam._m0[_2002].x)));
        float _2030 = cbSceneParam._m0[33u].z * _2025;
        float _2032 = cbSceneParam._m0[33u].w * _2025;
        float _2035 = fma(_1947, cbSceneParam._m0[_1994].w, fma(_1943, cbSceneParam._m0[_1994].z, fma(_1939, cbSceneParam._m0[_1994].y, _1935 * cbSceneParam._m0[_1994].x))) / _2025;
        float _2083 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
        float _4415 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2090 = (isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2030 + _2013) / _2025, (_2032 + _2017) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2032 + _2013) / _2025, (_2017 - _2030) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2030) / _2025, (_2017 - _2032) / _2025), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2013 - _2032) / _2025, (_2030 + _2017) / _2025), _2035), 0.0)).x), vec4(0.25)));
        _2097 = 1.0 - (_2090 * cbSceneParam._m0[34u].x);
        _2098 = 1.0 - (_2090 * cbSceneParam._m0[34u].y);
        _2099 = 1.0 - (_2090 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2097 = 1.0;
        _2098 = 1.0;
        _2099 = 1.0;
    }
    float _2163;
    float _2165;
    float _2167;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2151 = fma(_1947, cbSceneParam._m0[63u].w, fma(_1943, cbSceneParam._m0[63u].z, fma(_1939, cbSceneParam._m0[63u].y, _1935 * cbSceneParam._m0[63u].x)));
        float _2152 = fma(_1947, cbSceneParam._m0[60u].w, fma(_1943, cbSceneParam._m0[60u].z, fma(_1939, cbSceneParam._m0[60u].y, _1935 * cbSceneParam._m0[60u].x))) / _2151;
        float _2153 = fma(_1947, cbSceneParam._m0[61u].w, fma(_1943, cbSceneParam._m0[61u].z, fma(_1939, cbSceneParam._m0[61u].y, _1935 * cbSceneParam._m0[61u].x))) / _2151;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2152 >= cbSceneParam._m0[64u].x) && (_2153 >= cbSceneParam._m0[64u].y)) && (_2152 <= cbSceneParam._m0[64u].z)) && (_2153 <= cbSceneParam._m0[64u].w))
        {
            float _2292 = fma(_1947, cbSceneParam._m0[62u].w, fma(_1943, cbSceneParam._m0[62u].z, fma(_1939, cbSceneParam._m0[62u].y, _1935 * cbSceneParam._m0[62u].x))) / _2151;
            float _2296 = isnan(cbSceneParam._m0[41u].w) ? _2292 : (isnan(_2292) ? cbSceneParam._m0[41u].w : max(_2292, cbSceneParam._m0[41u].w));
            float _2339 = (cbSceneParam._m0[33u].x - sqrt(((_1949 * _1949) + (_1948 * _1948)) + (_1950 * _1950))) * cbSceneParam._m0[33u].y;
            float _4431 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
            float _2346 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2152, cbSceneParam._m0[33u].w + _2153), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2152, _2153 - cbSceneParam._m0[33u].z), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].z, _2153 - cbSceneParam._m0[33u].w), _2296), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2152 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2153), _2296), 0.0)).x), vec4(0.25)));
            float _2350 = 1.0 - (_2346 * cbSceneParam._m0[34u].x);
            float _2351 = 1.0 - (_2346 * cbSceneParam._m0[34u].y);
            float _2352 = 1.0 - (_2346 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2352) ? _2099 : (isnan(_2099) ? _2352 : min(_2099, _2352));
            frontier_phi_34_33_ladder_1 = isnan(_2351) ? _2098 : (isnan(_2098) ? _2351 : min(_2098, _2351));
            frontier_phi_34_33_ladder_2 = isnan(_2350) ? _2097 : (isnan(_2097) ? _2350 : min(_2097, _2350));
        }
        else
        {
            frontier_phi_34_33_ladder = _2099;
            frontier_phi_34_33_ladder_1 = _2098;
            frontier_phi_34_33_ladder_2 = _2097;
        }
        _2163 = frontier_phi_34_33_ladder_2;
        _2165 = frontier_phi_34_33_ladder_1;
        _2167 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2163 = _2097;
        _2165 = _2098;
        _2167 = _2099;
    }
    uvec4 _2172 = floatBitsToUint(cbInstanceData._m0[_853 + 5u]);
    uint _2174 = _2172.x * 14u;
    uint _2175 = _2174 + 13u;
    float _2182 = _878 + (-1.0);
    float _2187 = (cbLight._m0[_2175].x * _2182) + 1.0;
    float _2188 = (cbLight._m0[_2175].y * _2182) + 1.0;
    float _2189 = (cbLight._m0[_2175].z * _2182) + 1.0;
    float _2190 = (cbLight._m0[_2175].w * _2182) + 1.0;
    uint _2191 = _2174 + 5u;
    float _2197 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
    uint _2201 = _2174 + 4u;
    float _2211 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2215 = _2174 | 1u;
    float _2226 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_726, _727, _728));
    float _2229 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_726, _727, _728));
    float _4467 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
    float _4478 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2234 = (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * 0.3183098733425140380859375;
    float _2236 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * 0.3183098733425140380859375;
    float _2243 = ((cbLight._m0[_2191].x * _2197) * _2236) + (((cbLight._m0[_2201].x * _2163) * _2211) * _2234);
    float _2244 = ((_2197 * cbLight._m0[_2191].y) * _2236) + (((cbLight._m0[_2201].y * _2165) * _2211) * _2234);
    float _2245 = ((_2197 * cbLight._m0[_2191].z) * _2236) + (((cbLight._m0[_2201].z * _2167) * _2211) * _2234);
    uvec4 _2249 = floatBitsToUint(cbLight._m0[_2174 + 12u]);
    bool _2251 = _2249.x == 0u;
    float _2353;
    float _2355;
    float _2357;
    if (_2251)
    {
        _2353 = _2243;
        _2355 = _2244;
        _2357 = _2245;
    }
    else
    {
        uint _2361 = _2174 + 6u;
        float _2377 = (dot(vec3(cbLight._m0[_2174 + 2u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2378 = _2377 * _2377;
        float _4489 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2379 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2380 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2353 = (((cbLight._m0[_2361].x * 0.3183098733425140380859375) * _2379) * _2380) + _2243;
        _2355 = (((cbLight._m0[_2361].y * 0.3183098733425140380859375) * _2379) * _2380) + _2244;
        _2357 = (((cbLight._m0[_2361].z * 0.3183098733425140380859375) * _2379) * _2380) + _2245;
    }
    bool _2360 = _2249.y == 0u;
    float _2415;
    float _2417;
    float _2419;
    if (_2360)
    {
        _2415 = _2353;
        _2417 = _2355;
        _2419 = _2357;
    }
    else
    {
        uint _2577 = _2174 + 7u;
        float _2593 = (dot(vec3(cbLight._m0[_2174 + 3u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2594 = _2593 * _2593;
        float _4505 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2595 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2596 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2415 = (((cbLight._m0[_2577].x * 0.3183098733425140380859375) * _2595) * _2596) + _2353;
        _2417 = (((cbLight._m0[_2577].y * 0.3183098733425140380859375) * _2595) * _2596) + _2355;
        _2419 = (((cbLight._m0[_2577].z * 0.3183098733425140380859375) * _2595) * _2596) + _2357;
    }
    uint _2422 = _2174 + 8u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _729) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2174].x + _806;
    float _2438 = cbLight._m0[_2174].y + _807;
    float _2439 = cbLight._m0[_2174].z + _808;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2174].xyz));
    float _4521 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
    float _4532 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _2451 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
    float _2452 = dot(vec3(_726, _727, _728), vec3(_2444, _2445, _2446));
    float _4543 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
    float _2456 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2444, _2445, _2446));
    float _4554 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2460 = _2436 * _2436;
    float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
    float _2475 = (exp2(log2(1.0 - (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2476 = 1.0 - _2436;
    float _2487 = (0.5 / (((_2451 * ((_2450 * _2476) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2476) + _2436) * _2450))) * _2450;
    float _4565 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
    uint _2503 = _2174 + 9u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _729) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2215].x + _806;
    float _2517 = cbLight._m0[_2215].y + _807;
    float _2518 = cbLight._m0[_2215].z + _808;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2215].xyz));
    float _4576 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2530 = dot(vec3(_726, _727, _728), vec3(_2523, _2524, _2525));
    float _4587 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2523, _2524, _2525));
    float _4598 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2515 * _2515;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2551 = (exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2552 = 1.0 - _2515;
    float _2562 = (0.5 / (((_2451 * ((_2529 * _2552) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2552) + _2515) * _2529))) * _2529;
    float _4609 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2564 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    float _2574 = (((_2551 * cbLight._m0[_2503].x) * _2564) * _2197) + ((((cbLight._m0[_2422].x * _2163) * _2475) * _2489) * _2211);
    float _2575 = (((_2551 * cbLight._m0[_2503].y) * _2564) * _2197) + ((((cbLight._m0[_2422].y * _2165) * _2475) * _2489) * _2211);
    float _2576 = (((_2551 * cbLight._m0[_2503].z) * _2564) * _2197) + ((((cbLight._m0[_2422].z * _2167) * _2475) * _2489) * _2211);
    float _2632;
    float _2634;
    float _2636;
    if (_2251)
    {
        _2632 = _2574;
        _2634 = _2575;
        _2636 = _2576;
    }
    else
    {
        uint _2638 = _2174 + 2u;
        uint _2642 = _2174 + 10u;
        float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2638].w)) * _729) * 0.949999988079071044921875);
        float _2657 = _2656 * _2656;
        float _2658 = cbLight._m0[_2638].x + _806;
        float _2659 = cbLight._m0[_2638].y + _807;
        float _2660 = cbLight._m0[_2638].z + _808;
        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
        float _2665 = _2664 * _2658;
        float _2666 = _2664 * _2659;
        float _2667 = _2664 * _2660;
        float _2668 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2638].xyz));
        float _4620 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2672 = dot(vec3(_726, _727, _728), vec3(_2665, _2666, _2667));
        float _4631 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2675 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2676 = dot(vec3(cbLight._m0[_2638].xyz), vec3(_2665, _2666, _2667));
        float _4642 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2680 = _2657 * _2657;
        float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
        float _2693 = (exp2(log2(1.0 - (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2694 = 1.0 - _2657;
        float _2704 = (0.5 / (((_2451 * ((_2671 * _2694) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2694) + _2657) * _2671))) * _2671;
        float _4653 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2632 = (((_2693 * cbLight._m0[_2642].x) * _2706) * _2707) + _2574;
        _2634 = (((_2693 * cbLight._m0[_2642].y) * _2706) * _2707) + _2575;
        _2636 = (((_2693 * cbLight._m0[_2642].z) * _2706) * _2707) + _2576;
    }
    float _2738;
    float _2740;
    float _2742;
    if (_2360)
    {
        _2738 = _2632;
        _2740 = _2634;
        _2742 = _2636;
    }
    else
    {
        uint _2749 = _2174 + 3u;
        uint _2753 = _2174 + 11u;
        float _2767 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2749].w)) * _729) * 0.949999988079071044921875);
        float _2768 = _2767 * _2767;
        float _2769 = cbLight._m0[_2749].x + _806;
        float _2770 = cbLight._m0[_2749].y + _807;
        float _2771 = cbLight._m0[_2749].z + _808;
        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
        float _2776 = _2775 * _2769;
        float _2777 = _2775 * _2770;
        float _2778 = _2775 * _2771;
        float _2779 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2749].xyz));
        float _4669 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2782 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2783 = dot(vec3(_726, _727, _728), vec3(_2776, _2777, _2778));
        float _4680 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2787 = dot(vec3(cbLight._m0[_2749].xyz), vec3(_2776, _2777, _2778));
        float _4691 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2791 = _2768 * _2768;
        float _2795 = ((_2786 * _2786) * (_2791 + (-1.0))) + 1.0;
        float _2804 = (exp2(log2(1.0 - (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2805 = 1.0 - _2768;
        float _2815 = (0.5 / (((_2451 * ((_2782 * _2805) + _2768)) + 9.9999999392252902907785028219223e-09) + (((_2451 * _2805) + _2768) * _2782))) * _2782;
        float _4702 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2817 = (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0))) * (_2791 / ((_2795 * _2795) * 3.141590118408203125));
        float _2818 = isnan(1.0) ? _2190 : (isnan(_2190) ? 1.0 : min(_2190, 1.0));
        _2738 = (((_2804 * cbLight._m0[_2753].x) * _2817) * _2818) + _2632;
        _2740 = (((_2804 * cbLight._m0[_2753].y) * _2817) * _2818) + _2634;
        _2742 = (((_2804 * cbLight._m0[_2753].z) * _2817) * _2818) + _2636;
    }
    float _2884;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_2172.y == 0u)
    {
        uvec4 _2839 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2840 = _2839.x;
        uint _2851 = uint((float(_2839.y) * floor(float(uint(cbSceneParam._m0[85u].y * _815) / _2840))) + floor(float(uint(cbSceneParam._m0[85u].x * _814) / _2840)));
        float _2861 = (log2(_1950 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2862 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
        uint _2865 = uint(isnan(14.0) ? _2862 : (isnan(_2862) ? 14.0 : min(_2862, 14.0)));
        uvec4 _2870 = texelFetch(g_lightClusterGridBuffer, int(((_2865 << 2u) + (_2851 << 6u)) >> 2u));
        uint _2871 = _2870.x;
        uint _2872 = _2839.z;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((((1u << ((_2872 >> 4u) & 15u)) + 4294967295u) & _2871) == 0u) || ((_2872 & 240u) == 0u))
        {
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
        }
        else
        {
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            float _3154 = 0.0;
            uint _3155 = 0u;
            uint _3164;
            bool _3165;
            for (;;)
            {
                _3164 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                _3165 = _3164 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3165)
                {
                    frontier_phi_66_pred = _3154;
                    frontier_phi_66_pred_1 = _3153;
                    frontier_phi_66_pred_2 = _3152;
                    frontier_phi_66_pred_3 = _3151;
                    frontier_phi_66_pred_4 = _3150;
                    frontier_phi_66_pred_5 = _3149;
                }
                else
                {
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    uint _3279;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3154;
                    _3279 = _3164;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3283 = uint(findLSB(_3279)) + (_3155 << 5u);
                        uint _3280 = (_3279 + 4294967295u) & _3279;
                        uint _3285 = _3283 * 48u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3285)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3285 + 3u)).x));
                        uint _3305 = (_3283 * 48u) + 4u;
                        vec4 _3318 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3324 = (_3283 * 48u) + 8u;
                        vec3 _3335 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3324)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3324 + 2u)).x));
                        float _3339 = _3299.x - _1948;
                        float _3340 = _3299.y - _1949;
                        float _3341 = _3299.z - _1950;
                        float _3342 = dot(vec3(_3339, _3340, _3341), vec3(_3339, _3340, _3341));
                        float _3345 = inversesqrt(_3342);
                        float _3346 = _3345 * _3339;
                        float _3347 = _3345 * _3340;
                        float _3348 = _3345 * _3341;
                        float _3349 = dot(vec3(_834, _837, _840), vec3(_3346, _3347, _3348));
                        float _3354 = 1.0 - (_3342 * _3299.w);
                        float _4728 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
                        float _3355 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
                        float _3356 = sqrt(_3342) * _3318.w;
                        float _3359 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                        float _3360 = _3359 * _3359;
                        float _3363 = ((1.0 - _3360) * _3349) + _3360;
                        float _3366 = _3356 * _3356;
                        float _3370 = ((isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0))) * _3355) / ((_3366 * 0.699999988079071044921875) + 1.0);
                        float _3374 = (-0.0) - _1948;
                        float _3375 = (-0.0) - _1949;
                        float _3376 = (-0.0) - _1950;
                        float _3380 = inversesqrt(dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376)));
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3390 = exp2(log2(1.0 / ((_3366 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _894;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3381 + _3346;
                        float _3402 = _3382 + _3347;
                        float _3403 = _3383 + _3348;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_834, _837, _840), vec3(_3381, _3382, _3383));
                        float _4744 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                        float _3415 = dot(vec3(_834, _837, _840), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4755 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3359 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3349) + _3424;
                        float _4766 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4777 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) / ((_3422 * _3422) * ((_3366 * 2.1991131305694580078125) + 3.141590118408203125))) * _3355;
                        _3208 = (_3370 * _3318.x) + _3276;
                        _3209 = (_3370 * _3318.y) + _3277;
                        _3210 = (_3370 * _3318.z) + _3278;
                        _3205 = (_3450 * _3335.x) + _3273;
                        _3206 = (_3450 * _3335.y) + _3274;
                        _3207 = (_3450 * _3335.z) + _3275;
                        if (_3280 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3210;
                            _3279 = _3280;
                        }
                    }
                    frontier_phi_66_pred = _3210;
                    frontier_phi_66_pred_1 = _3209;
                    frontier_phi_66_pred_2 = _3208;
                    frontier_phi_66_pred_3 = _3207;
                    frontier_phi_66_pred_4 = _3206;
                    frontier_phi_66_pred_5 = _3205;
                }
                _3007 = frontier_phi_66_pred;
                _3005 = frontier_phi_66_pred_1;
                _3003 = frontier_phi_66_pred_2;
                _3001 = frontier_phi_66_pred_3;
                _2999 = frontier_phi_66_pred_4;
                _2997 = frontier_phi_66_pred_5;
                uint _3156 = _3155 + 1u;
                if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3149 = _2997;
                    _3150 = _2999;
                    _3151 = _3001;
                    _3152 = _3003;
                    _3153 = _3005;
                    _3154 = _3007;
                    _3155 = _3156;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
        }
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.z;
        uint _3013 = (_3011 >> 8u) & 15u;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        float _3125;
        float _3127;
        if (((4294967295u << _3013) & _2871) == 0u)
        {
            _3117 = _2996;
            _3119 = _2998;
            _3121 = _3000;
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
        }
        else
        {
            float _3142 = inversesqrt(dot(vec3(_1948, _1949, _1950), vec3(_1948, _1949, _1950)));
            float _3143 = _3142 * _1948;
            float _3144 = _3142 * _1949;
            float _3145 = _3142 * _1950;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3013 < ((_3011 >> 12u) & 15u))
            {
                float _3118;
                float _3120;
                float _3122;
                float _3124;
                float _3126;
                float _3128;
                float _3256 = _2996;
                float _3257 = _2998;
                float _3258 = _3000;
                float _3259 = _3002;
                float _3260 = _3004;
                float _3261 = _3006;
                uint _3262 = _3013;
                uint _3271;
                bool _3272;
                for (;;)
                {
                    _3271 = texelFetch(g_lightClassification, int((((_2865 << 5u) + (_2851 << 9u)) + (_3262 << 2u)) >> 2u)).x;
                    _3272 = _3271 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3272)
                    {
                        frontier_phi_72_pred = _3261;
                        frontier_phi_72_pred_1 = _3260;
                        frontier_phi_72_pred_2 = _3259;
                        frontier_phi_72_pred_3 = _3258;
                        frontier_phi_72_pred_4 = _3257;
                        frontier_phi_72_pred_5 = _3256;
                    }
                    else
                    {
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3468 = _3256;
                        float _3469 = _3257;
                        float _3470 = _3258;
                        float _3471 = _3259;
                        float _3472 = _3260;
                        float _3473 = _3261;
                        uint _3474 = _3271;
                        uint _3475;
                        vec4 _3500;
                        float _3501;
                        vec4 _3516;
                        vec3 _3528;
                        vec4 _3543;
                        vec4 _3558;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3485 = ((_3262 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3474));
                            _3475 = (_3474 + 4294967295u) & _3474;
                            uint _3487 = _3485 * 40u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3501 = _3500.w;
                            uint _3503 = (_3485 * 40u) + 4u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3485 * 40u) + 8u;
                            _3528 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x));
                            uint _3530 = (_3485 * 40u) + 16u;
                            _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3545 = (_3485 * 40u) + 20u;
                            _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            uint _3561 = (_3485 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3485 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_1950, _3593.z, fma(_1949, _3593.y, _3593.x * _1948)) + _3593.w;
                            _3606 = !((fma(_1950, _3574.z, fma(_1949, _3574.y, _3574.x * _1948)) + _3574.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3500.x - _1948;
                                float _3634 = _3500.y - _1949;
                                float _3635 = _3500.z - _1950;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3501 * _3501));
                                float _4788 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                                float _3651 = sqrt(_3636) * _3516.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_834, _837, _840))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_1950, _3543.z, fma(_1949, _3543.y, _3543.x * _1948)) + _3543.w) / _3605;
                                float _3665 = (fma(_1950, _3558.z, fma(_1949, _3558.y, _3558.x * _1948)) + _3558.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4804 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _894;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3143;
                                float _3695 = _3641 - _3144;
                                float _3696 = _3642 - _3145;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_834, _837, _840), vec3((-0.0) - _3143, (-0.0) - _3144, (-0.0) - _3145));
                                float _4815 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3708 = dot(vec3(_834, _837, _840), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4826 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_834, _837, _840), vec3(_3640, _3641, _3642))) + _3717;
                                float _4837 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4848 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3671 * _3516.y;
                                frontier_phi_78_pred_1 = _3671 * _3516.x;
                                frontier_phi_78_pred_2 = _3745 * _3528.z;
                                frontier_phi_78_pred_3 = _3745 * _3528.y;
                                frontier_phi_78_pred_4 = _3745 * _3528.x;
                                frontier_phi_78_pred_5 = _3671 * _3516.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3753 = frontier_phi_78_pred;
                            _3752 = frontier_phi_78_pred_1;
                            _3751 = frontier_phi_78_pred_2;
                            _3750 = frontier_phi_78_pred_3;
                            _3749 = frontier_phi_78_pred_4;
                            _3754 = frontier_phi_78_pred_5;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            _3460 = _3754 + _3473;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            _3457 = _3751 + _3470;
                            if (_3475 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3475;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3460;
                        frontier_phi_72_pred_1 = _3459;
                        frontier_phi_72_pred_2 = _3458;
                        frontier_phi_72_pred_3 = _3457;
                        frontier_phi_72_pred_4 = _3456;
                        frontier_phi_72_pred_5 = _3455;
                    }
                    _3128 = frontier_phi_72_pred;
                    _3126 = frontier_phi_72_pred_1;
                    _3124 = frontier_phi_72_pred_2;
                    _3122 = frontier_phi_72_pred_3;
                    _3120 = frontier_phi_72_pred_4;
                    _3118 = frontier_phi_72_pred_5;
                    uint _3263 = _3262 + 1u;
                    if (_3263 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3256 = _3118;
                        _3257 = _3120;
                        _3258 = _3122;
                        _3259 = _3124;
                        _3260 = _3126;
                        _3261 = _3128;
                        _3262 = _3263;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3128;
                frontier_phi_60_61_ladder_1 = _3126;
                frontier_phi_60_61_ladder_2 = _3122;
                frontier_phi_60_61_ladder_3 = _3120;
                frontier_phi_60_61_ladder_4 = _3118;
                frontier_phi_60_61_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_60_61_ladder = _3006;
                frontier_phi_60_61_ladder_1 = _3004;
                frontier_phi_60_61_ladder_2 = _3000;
                frontier_phi_60_61_ladder_3 = _2998;
                frontier_phi_60_61_ladder_4 = _2996;
                frontier_phi_60_61_ladder_5 = _3002;
            }
            _3117 = frontier_phi_60_61_ladder_4;
            _3119 = frontier_phi_60_61_ladder_3;
            _3121 = frontier_phi_60_61_ladder_2;
            _3123 = frontier_phi_60_61_ladder_5;
            _3125 = frontier_phi_60_61_ladder_1;
            _3127 = frontier_phi_60_61_ladder;
        }
        float _3132 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
        _2884 = (_3132 * _3123) + _2415;
        _2886 = (_3132 * _3125) + _2417;
        _2888 = (_3132 * _3127) + _2419;
        _2890 = ((_3117 * 0.039999999105930328369140625) * _3132) + _2738;
        _2892 = ((_3119 * 0.039999999105930328369140625) * _3132) + _2740;
        _2894 = ((_3121 * 0.039999999105930328369140625) * _3132) + _2742;
    }
    else
    {
        _2884 = _2415;
        _2886 = _2417;
        _2888 = _2419;
        _2890 = _2738;
        _2892 = _2740;
        _2894 = _2742;
    }
    uint _2900 = _854 + uint(cbMatDynParam._m0[0u].w);
    float _2906 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2912 = (((((_2906 * cbMtdParam._m0[14u].x) * _586.x) * _609) * _688) * (((1.0 - _662) * cbMtdParam._m0[20u].w) + _662)) * cbInstanceData._m0[_2900].x;
    float _2918 = (((((_2906 * cbMtdParam._m0[14u].y) * _586.y) * _609) * _688) * (((1.0 - _664) * cbMtdParam._m0[20u].w) + _664)) * cbInstanceData._m0[_2900].y;
    float _2924 = (((((_2906 * cbMtdParam._m0[14u].z) * _586.z) * _609) * _688) * (((1.0 - _666) * cbMtdParam._m0[20u].w) + _666)) * cbInstanceData._m0[_2900].z;
    float _4864 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4875 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4886 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _2941 = (((isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0))) * (_2884 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _878))) + ((_2890 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + _2912;
    float _2943 = (_2918 + ((_2892 + ((isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2886 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _878)));
    float _2945 = (_2924 + ((_2894 + ((isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))) * _1684)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (_2888 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _878)));
    float _4912 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2958 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
    uint _2959 = _853 + 6u;
    float _2967 = _814 / cbSceneParam._m0[86u].x;
    float _2968 = _815 / cbSceneParam._m0[86u].y;
    vec4 _2982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2984 = _2982.x;
    float _2985 = _2982.y;
    float _2986 = _2982.z;
    float _2987 = _2982.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _3021 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _3022 = _3021 / _748;
        float _3033 = _3022 * _799;
        float _3034 = _800 * _3022;
        float _3035 = (-0.0) - _3034;
        float _3036 = _3022 * _801;
        float _3038 = (cbSceneParam._m0[77u].w * _3035) / _3021;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3034;
        float _3046 = sqrt(((_3033 * _3033) + (_3034 * _3034)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3021)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3035 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3178 = 1.0 / cbSceneParam._m0[80u].x;
            float _3179 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3180 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            float _3190 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : min(_3180, 0.0));
            _3218 = ((abs(_3046 / _3035) * cbSceneParam._m0[80u].y) * ((((_3189 - _3190) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))))) * _3178)) - ((exp2(_3056 * _3189) - exp2(_3056 * _3190)) * _3178))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2987);
        _3058 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2984;
        _3060 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2985;
        _3062 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2986;
        _3064 = _3229 * _2987;
    }
    else
    {
        _3058 = _2984;
        _3060 = _2985;
        _3062 = _2986;
        _3064 = _2987;
    }
    float _3076 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3077 = _3076 == 3.0;
    float _3078 = log2(_3064);
    float _3082 = exp2(_3078 * cbSceneParam._m0[78u].x);
    float _3083 = exp2(_3078 * cbSceneParam._m0[78u].y);
    float _3084 = exp2(_3078 * cbSceneParam._m0[78u].z);
    float _3085 = _3082 * (isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0)));
    float _3086 = _3083 * (isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0)));
    float _3087 = _3084 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0)));
    float _3096 = (_3076 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3096 * (_3077 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.y = _3096 * (_3077 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.z = _3096 * (_3077 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.w = cbInstanceData._m0[_2959].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2912) * _2958) * _3082) * _3096;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2918) * _2958) * _3083) * _3096;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2924) * _2958) * _3084) * _3096;
    SV_Target_1.w = cbInstanceData._m0[_2959].w;
}


