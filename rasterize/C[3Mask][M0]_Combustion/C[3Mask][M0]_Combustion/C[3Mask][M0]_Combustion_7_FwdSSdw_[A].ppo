#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[23];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_3;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_5;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_6;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_8;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_11;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_M0_Combustion_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1265;
float _3703;
float _3704;
float _3705;
float _3706;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _214 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _215 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _216 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _222 = inversesqrt(dot(vec3(_214, _215, _216), vec3(_214, _215, _216)));
    float _229 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _236 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _285 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _304 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[21u].z * texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x;
    float _341 = ((cbMtdParam._m0[17u].x * (-1.39999997615814208984375)) * (((1.0 - _304.x) * 2.0) - _331)) + 1.0;
    float _3715 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _349 = (_342 * ((_285.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _350 = (_342 * ((_285.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _351 = (_342 * ((_285.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _370 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _383 = (((((1.0 - _304.y) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].x) + 1.0;
    float _3726 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _391 = (((_370.x * cbMtdParam._m0[12u].x) - _349) * _384) + _349;
    float _392 = (_384 * ((_370.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _393 = (_384 * ((_370.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _411 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _424 = (((((1.0 - _304.z) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[21u].y) + 1.0;
    float _3737 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _432 = (((_411.x * cbMtdParam._m0[13u].x) - _391) * _425) + _391;
    float _433 = (_425 * ((_411.y * cbMtdParam._m0[13u].y) - _392)) + _392;
    float _434 = (_425 * ((_411.z * cbMtdParam._m0[13u].z) - _393)) + _393;
    vec4 _447 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.z) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.w) + cbTextureTilingScale._m0[16u].w));
    vec4 _461 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _463 = _461.x;
    float _464 = _461.y;
    float _465 = _461.z;
    vec4 _477 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _488 = ((_477.x - _463) * _342) + _463;
    float _489 = ((_477.y - _464) * _342) + _464;
    float _490 = ((_477.z - _465) * _342) + _465;
    vec4 _503 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _514 = ((_503.x - _488) * _384) + _488;
    float _515 = ((_503.y - _489) * _384) + _489;
    float _516 = ((_503.z - _490) * _384) + _490;
    vec4 _529 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _542 = ((_529.z - _516) * _425) + _516;
    float _545 = ((((_529.x - _514) * _425) + _514) * 2.0) + (-1.0);
    float _547 = ((((_529.y - _515) * _425) + _515) * 2.0) + (-1.0);
    float _548 = dot(vec2(_545, _547), vec2(_545, _547));
    float _3748 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _553 = sqrt(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))));
    vec4 _586 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((((cbMtdParam._m0[22u].z * cbPerFrame._m0[22u].x) + TEXCOORD.z) * cbTextureTilingScale._m0[11u].x) + cbTextureTilingScale._m0[11u].z, (((cbMtdParam._m0[22u].w * cbPerFrame._m0[22u].x) + TEXCOORD.w) * cbTextureTilingScale._m0[11u].y) + cbTextureTilingScale._m0[11u].w));
    float _600 = abs((fract(cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3759 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _601 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _609 = (((_601 * _601) * (3.0 - (_601 * 2.0))) * cbMtdParam._m0[18u].y) - cbMtdParam._m0[18u].z;
    float _617 = cbMtdParam._m0[18u].w * cbPerFrame._m0[22u].x;
    float _625 = abs((fract(cbMtdParam._m0[19u].x * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3770 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _626 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _630 = (_626 * _626) * (3.0 - (_626 * 2.0));
    float _631 = _630 * cbMtdParam._m0[22u].x;
    float _632 = _630 * cbMtdParam._m0[22u].y;
    float _633 = sin(_617);
    float _634 = cos(_617);
    float _635 = TEXCOORD.z - _631;
    float _636 = TEXCOORD.w - _632;
    vec4 _656 = texture(sampler2D(C_3Mask_M0_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * (_631 + fma(_636, (-0.0) - _633, _635 * _634))) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * (fma(_636, _634, _635 * _633) + _632)) + cbTextureTilingScale._m0[2u].w));
    float _662 = (cbMtdParam._m0[15u].x * cbMtdParam._m0[18u].x) * _656.x;
    float _664 = (cbMtdParam._m0[15u].y * cbMtdParam._m0[18u].x) * _656.y;
    float _666 = (cbMtdParam._m0[15u].z * cbMtdParam._m0[18u].x) * _656.z;
    float _687 = (TEXCOORD_5.x - (((_447.x + 0.00999999977648258209228515625) * (1.0 - TEXCOORD_5.x)) * cbMtdParam._m0[21u].w)) * (cbMtdParam._m0[17u].y + 1.0);
    float _3781 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _691 = fma(_553, _229 * NORMAL.x, fma(_547, _236 * TANGENT.x, (_222 * _214) * _545));
    float _694 = fma(_553, _229 * NORMAL.y, fma(_547, _236 * TANGENT.y, (_222 * _215) * _545));
    float _697 = fma(_553, _229 * NORMAL.z, fma(_547, _236 * TANGENT.z, (_222 * _216) * _545));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _3792 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _705 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _3814 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _3825 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _724 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _765 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _775 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _765);
    float _776 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _765);
    float _777 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _765);
    float _781 = inversesqrt(dot(vec3(_775, _776, _777), vec3(_775, _776, _777)));
    float _782 = _775 * _781;
    float _783 = _776 * _781;
    float _784 = _777 * _781;
    vec4 _789 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _791 = _789.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _945 = sqrt(((_775 * _775) + (_776 * _776)) + (_777 * _777));
        float _951 = (cbMatDynParam._m0[5u].x * _945) + cbMatDynParam._m0[5u].y;
        float _3836 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _952 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _956 = (cbMatDynParam._m0[5u].z * _945) + cbMatDynParam._m0[5u].w;
        float _3847 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) - _952)) + _952) < ((_791 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _802 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _803 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _822 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _825 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _828 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    uint _841 = uint(roundEven(NORMAL.w)) * 13u;
    uint _842 = _841 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_843].z;
    float _3858 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _3869 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    vec4 _863 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _802, cbSceneParam._m0[86u].y * _803));
    float _866 = _863.x * TEXCOORD_5.w;
    float _867 = dot(vec3(_702, _703, _704), vec3(_782, _783, _784));
    float _870 = _867 * 2.0;
    float _874 = (_870 * _702) - _782;
    float _875 = (_870 * _703) - _783;
    float _876 = (_870 * _704) - _784;
    float _880 = abs(dot(vec3(_782, _783, _784), vec3(_702, _703, _704)));
    float _3891 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _882 = sqrt(_705);
    float _894 = exp2((_882 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_882 * 3.0));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1264;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _993 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _997 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _1022 = _926 + _702;
        float _1023 = _930 + _703;
        float _1024 = _934 + _704;
        float _1034 = fma(_1024, cbModelParam._m0[26u].z, fma(_1023, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1022)) - _989;
        float _1035 = fma(_1024, cbModelParam._m0[27u].z, fma(_1023, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1022)) - _993;
        float _1036 = fma(_1024, cbModelParam._m0[28u].z, fma(_1023, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1022)) - _997;
        float _1040 = inversesqrt(dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036)));
        float _1053 = ((_1040 * _1034) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1054 = ((_1040 * _1035) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1040 * _1036) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1053, _1054, _1055), 0.0);
        float _1092 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1093 = _1092 * (_1058.x + (-0.5));
        float _1094 = _1092 * (_1058.y + (-0.5));
        float _1095 = _1092 * (_1058.z + (-0.5));
        float _1102 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1103 = _1102 * (_1065.x + (-0.5));
        float _1104 = _1102 * (_1065.y + (-0.5));
        float _1105 = _1102 * (_1065.z + (-0.5));
        float _1112 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1113 = _1112 * (_1072.x + (-0.5));
        float _1114 = _1112 * (_1072.y + (-0.5));
        float _1115 = _1112 * (_1072.z + (-0.5));
        float _1122 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1123 = _1122 * (_1079.x + (-0.5));
        float _1124 = _1122 * (_1079.y + (-0.5));
        float _1125 = _1122 * (_1079.z + (-0.5));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = _1093 * 0.5;
        float _1130 = _1103 * 0.5;
        float _1131 = _1113 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1146 = (dot(vec3(_702, _703, _704), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1156 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3939 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1158 + 1.0))) + _1163) * _1126;
        float _1173 = _1094 * 0.5;
        float _1174 = _1104 * 0.5;
        float _1175 = _1114 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_702, _703, _704), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3972 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1200 + 1.0))) + _1205) * _1127;
        float _1215 = _1095 * 0.5;
        float _1216 = _1105 * 0.5;
        float _1217 = _1115 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_702, _703, _704), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4005 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1242 + 1.0))) + _1247) * _1128;
        _1264 = _1095;
        _1266 = _1094;
        _1267 = _1093;
        _1268 = _1105;
        _1269 = _1104;
        _1270 = _1103;
        _1271 = _1115;
        _1272 = _1114;
        _1273 = _1113;
        _1274 = _1128;
        _1275 = _1127;
        _1276 = _1126;
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
    }
    else
    {
        _1264 = _1265;
        _1266 = _1265;
        _1267 = _1265;
        _1268 = _1265;
        _1269 = _1265;
        _1270 = _1265;
        _1271 = _1265;
        _1272 = _1265;
        _1273 = _1265;
        _1274 = _1265;
        _1275 = _1265;
        _1276 = _1265;
        _1277 = 0.0;
        _1278 = 0.0;
        _1279 = 0.0;
    }
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1308 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1312 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1316 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1339 = _926 + _702;
        float _1340 = _930 + _703;
        float _1341 = _934 + _704;
        float _1351 = fma(_1341, cbModelParam._m0[30u].z, fma(_1340, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339)) - _1308;
        float _1352 = fma(_1341, cbModelParam._m0[31u].z, fma(_1340, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339)) - _1312;
        float _1353 = fma(_1341, cbModelParam._m0[32u].z, fma(_1340, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339)) - _1316;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1308 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1312 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[35u].z) + ((((((_1316 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1407 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1374.x + (-0.5));
        float _1409 = _1407 * (_1374.y + (-0.5));
        float _1410 = _1407 * (_1374.z + (-0.5));
        float _1417 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1381.x + (-0.5));
        float _1419 = _1417 * (_1381.y + (-0.5));
        float _1420 = _1417 * (_1381.z + (-0.5));
        float _1427 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1388.x + (-0.5));
        float _1429 = _1427 * (_1388.y + (-0.5));
        float _1430 = _1427 * (_1388.z + (-0.5));
        float _1437 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1395.x + (-0.5));
        float _1439 = _1437 * (_1395.y + (-0.5));
        float _1440 = _1437 * (_1395.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_702, _703, _704), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4068 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1471 + 1.0))) + _1476) * _1441;
        float _1486 = _1409 * 0.5;
        float _1487 = _1419 * 0.5;
        float _1488 = _1429 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_702, _703, _704), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4101 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1513 + 1.0))) + _1518) * _1442;
        float _1528 = _1410 * 0.5;
        float _1529 = _1420 * 0.5;
        float _1530 = _1430 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_702, _703, _704), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4134 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1555 + 1.0))) + _1560) * _1443;
        _1577 = _1410;
        _1578 = _1409;
        _1579 = _1408;
        _1580 = _1420;
        _1581 = _1419;
        _1582 = _1418;
        _1583 = _1430;
        _1584 = _1429;
        _1585 = _1428;
        _1586 = _1443;
        _1587 = _1442;
        _1588 = _1441;
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1265;
        _1578 = _1265;
        _1579 = _1265;
        _1580 = _1265;
        _1581 = _1265;
        _1582 = _1265;
        _1583 = _1265;
        _1584 = _1265;
        _1585 = _1265;
        _1586 = _1265;
        _1587 = _1265;
        _1588 = _1265;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1278)) + _1278;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1279)) + _1279;
    float _1624 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1601));
    float _1645 = _874 * 0.5;
    float _1646 = _875 * 0.5;
    float _1647 = _876 * 0.5;
    float _1648 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1651 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1654 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1688;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1661 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1264, _1268, _1271, _1274));
        float _1665 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1266, _1269, _1272, _1275));
        float _1669 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1676 = dot(vec4(cbModelParam._m0[39u]), vec4(_1645, _1646, _1647, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1699;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1690 = dot(vec4(cbModelParam._m0[40u]), vec4(_1645, _1646, _1647, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1703 = (_1699 * cbModelParam._m0[1u].x) + (_1688 * (1.0 - cbModelParam._m0[1u].x));
    float _1713 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _705);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1713 : min(cbModelParam._m0[25u].z, _1713));
    float _1794;
    float _1796;
    float _1798;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1761 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1765 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1769 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1772 = fma(_876, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _874));
        float _1775 = fma(_876, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _874));
        float _1778 = fma(_876, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _874));
        float _1806;
        if (_1772 > 0.0)
        {
            _1806 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1806 = frontier_phi_17_15_ladder;
        }
        float _2028;
        if (_1775 > 0.0)
        {
            _2028 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2028 = frontier_phi_26_22_ladder;
        }
        float _2274;
        if (_1778 > 0.0)
        {
            _2274 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2274 = frontier_phi_38_33_ladder;
        }
        float _2276 = isnan(_2028) ? _1806 : (isnan(_1806) ? _2028 : min(_1806, _2028));
        float _2277 = isnan(_2274) ? _2276 : (isnan(_2276) ? _2274 : min(_2276, _2274));
        float _2281 = (_2277 * _1772) + _1761;
        float _2282 = (_2277 * _1775) + _1765;
        float _2283 = (_2277 * _1778) + _1769;
        float _2284 = _2277 * 9.9999997473787516355514526367188e-05;
        float _2286 = (-1.0) - _2284;
        float _2288 = _2284 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2283 > _2288) || ((_2283 < _2286) || ((_2282 > _2288) || ((_2282 < _2286) || ((_2281 < _2286) || (_2281 > _2288))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2283, cbModelParam._m0[9u].z, fma(_2282, cbModelParam._m0[9u].y, _2281 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2283, cbModelParam._m0[10u].z, fma(_2282, cbModelParam._m0[10u].y, _2281 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2283, cbModelParam._m0[11u].z, fma(_2282, cbModelParam._m0[11u].y, _2281 * cbModelParam._m0[11u].x))), _1714);
            frontier_phi_16_38_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1794 = frontier_phi_16_38_ladder_2;
        _1796 = frontier_phi_16_38_ladder_1;
        _1798 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_874, _875, _876), _1714);
        _1794 = _1782.x * cbModelParam._m0[1u].y;
        _1796 = _1782.y * cbModelParam._m0[1u].y;
        _1798 = _1782.z * cbModelParam._m0[1u].y;
    }
    float _1802 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _705);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1802 : min(cbModelParam._m0[25u].w, _1802));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_876, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _874));
        float _1870 = fma(_876, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _874));
        float _1873 = fma(_876, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _874));
        float _2033;
        if (_1867 > 0.0)
        {
            _2033 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2033 = frontier_phi_28_24_ladder;
        }
        float _2301;
        if (_1870 > 0.0)
        {
            _2301 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2301 = frontier_phi_40_35_ladder;
        }
        float _2506;
        if (_1873 > 0.0)
        {
            _2506 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2506 = frontier_phi_49_46_ladder;
        }
        float _2508 = isnan(_2301) ? _2033 : (isnan(_2033) ? _2301 : min(_2033, _2301));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _1867) + _1856;
        float _2514 = (_2509 * _1870) + _1860;
        float _2515 = (_2509 * _1873) + _1864;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2517 = (-1.0) - _2516;
        float _2519 = _2516 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2515 > _2519) || ((_2515 < _2517) || ((_2514 > _2519) || ((_2514 < _2517) || ((_2513 < _2517) || (_2513 > _2519))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2515, cbModelParam._m0[17u].z, fma(_2514, cbModelParam._m0[17u].y, _2513 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2515, cbModelParam._m0[18u].z, fma(_2514, cbModelParam._m0[18u].y, _2513 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2515, cbModelParam._m0[19u].z, fma(_2514, cbModelParam._m0[19u].y, _2513 * cbModelParam._m0[19u].x))), _1803);
            frontier_phi_25_49_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_25_49_ladder_2;
        _1894 = frontier_phi_25_49_ladder_1;
        _1896 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_874, _875, _876), _1803);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1908 = ((((1.0 - _894) * ((_882 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_894 * _882)) * _866;
    float _1909 = _1908 * ((cbModelParam._m0[1u].w * (_1892 - _1794)) + _1794);
    float _1910 = _1908 * ((cbModelParam._m0[1u].w * (_1894 - _1796)) + _1796);
    float _1911 = _1908 * ((cbModelParam._m0[1u].w * (_1896 - _1798)) + _1798);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    vec4 _1928 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_802, _803));
    float _1930 = _1928.w;
    float _1942 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1930);
    float _1943 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1930);
    float _1944 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1930);
    uvec4 _1948 = floatBitsToUint(cbInstanceData._m0[_841 + 5u]);
    uint _1950 = _1948.x * 14u;
    uint _1951 = _1950 + 13u;
    float _1958 = _866 + (-1.0);
    float _1963 = (cbLight._m0[_1951].x * _1958) + 1.0;
    float _1964 = (cbLight._m0[_1951].y * _1958) + 1.0;
    float _1965 = (cbLight._m0[_1951].z * _1958) + 1.0;
    float _1966 = (cbLight._m0[_1951].w * _1958) + 1.0;
    uint _1967 = _1950 + 5u;
    float _1973 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1977 = _1950 + 4u;
    float _1987 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1991 = _1950 | 1u;
    float _2002 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_702, _703, _704));
    float _2005 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_702, _703, _704));
    float _4270 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _4281 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2010 = (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * 0.3183098733425140380859375;
    float _2012 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.3183098733425140380859375;
    float _2019 = ((cbLight._m0[_1967].x * _1973) * _2012) + (((cbLight._m0[_1977].x * _1942) * _1987) * _2010);
    float _2020 = ((_1973 * cbLight._m0[_1967].y) * _2012) + (((cbLight._m0[_1977].y * _1943) * _1987) * _2010);
    float _2021 = ((_1973 * cbLight._m0[_1967].z) * _2012) + (((cbLight._m0[_1977].z * _1944) * _1987) * _2010);
    uvec4 _2025 = floatBitsToUint(cbLight._m0[_1950 + 12u]);
    bool _2027 = _2025.x == 0u;
    float _2038;
    float _2040;
    float _2042;
    if (_2027)
    {
        _2038 = _2019;
        _2040 = _2020;
        _2042 = _2021;
    }
    else
    {
        uint _2046 = _1950 + 6u;
        float _2062 = (dot(vec3(cbLight._m0[_1950 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2063 = _2062 * _2062;
        float _4292 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2064 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2065 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2038 = (((cbLight._m0[_2046].x * 0.3183098733425140380859375) * _2064) * _2065) + _2019;
        _2040 = (((cbLight._m0[_2046].y * 0.3183098733425140380859375) * _2064) * _2065) + _2020;
        _2042 = (((cbLight._m0[_2046].z * 0.3183098733425140380859375) * _2064) * _2065) + _2021;
    }
    bool _2045 = _2025.y == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2045)
    {
        _2083 = _2038;
        _2085 = _2040;
        _2087 = _2042;
    }
    else
    {
        uint _2245 = _1950 + 7u;
        float _2261 = (dot(vec3(cbLight._m0[_1950 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2262 = _2261 * _2261;
        float _4308 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2263 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2264 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2083 = (((cbLight._m0[_2245].x * 0.3183098733425140380859375) * _2263) * _2264) + _2038;
        _2085 = (((cbLight._m0[_2245].y * 0.3183098733425140380859375) * _2263) * _2264) + _2040;
        _2087 = (((cbLight._m0[_2245].z * 0.3183098733425140380859375) * _2263) * _2264) + _2042;
    }
    uint _2090 = _1950 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _705) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_1950].x + _782;
    float _2106 = cbLight._m0[_1950].y + _783;
    float _2107 = cbLight._m0[_1950].z + _784;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1950].xyz));
    float _4324 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2119 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2120 = dot(vec3(_702, _703, _704), vec3(_2112, _2113, _2114));
    float _4346 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_2112, _2113, _2114));
    float _4357 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = 1.0 - _2104;
    float _2155 = (0.5 / (((_2119 * ((_2118 * _2144) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2144) + _2104) * _2118))) * _2118;
    float _4368 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2171 = _1950 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _705) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_1991].x + _782;
    float _2185 = cbLight._m0[_1991].y + _783;
    float _2186 = cbLight._m0[_1991].z + _784;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_1991].xyz));
    float _4379 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2198 = dot(vec3(_702, _703, _704), vec3(_2191, _2192, _2193));
    float _4390 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2191, _2192, _2193));
    float _4401 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2220 = 1.0 - _2183;
    float _2230 = (0.5 / (((_2119 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2220) + _2183) * _2197))) * _2197;
    float _4412 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2242 = (((_2219 * cbLight._m0[_2171].x) * _2232) * _1973) + ((((cbLight._m0[_2090].x * _1942) * _2143) * _2157) * _1987);
    float _2243 = (((_2219 * cbLight._m0[_2171].y) * _2232) * _1973) + ((((cbLight._m0[_2090].y * _1943) * _2143) * _2157) * _1987);
    float _2244 = (((_2219 * cbLight._m0[_2171].z) * _2232) * _1973) + ((((cbLight._m0[_2090].z * _1944) * _2143) * _2157) * _1987);
    float _2306;
    float _2308;
    float _2310;
    if (_2027)
    {
        _2306 = _2242;
        _2308 = _2243;
        _2310 = _2244;
    }
    else
    {
        uint _2312 = _1950 + 2u;
        uint _2316 = _1950 + 10u;
        float _2330 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _705) * 0.949999988079071044921875);
        float _2331 = _2330 * _2330;
        float _2332 = cbLight._m0[_2312].x + _782;
        float _2333 = cbLight._m0[_2312].y + _783;
        float _2334 = cbLight._m0[_2312].z + _784;
        float _2338 = inversesqrt(dot(vec3(_2332, _2333, _2334), vec3(_2332, _2333, _2334)));
        float _2339 = _2338 * _2332;
        float _2340 = _2338 * _2333;
        float _2341 = _2338 * _2334;
        float _2342 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2312].xyz));
        float _4423 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2345 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
        float _2346 = dot(vec3(_702, _703, _704), vec3(_2339, _2340, _2341));
        float _4434 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
        float _2349 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _2350 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2339, _2340, _2341));
        float _4445 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2354 = _2331 * _2331;
        float _2358 = ((_2349 * _2349) * (_2354 + (-1.0))) + 1.0;
        float _2367 = (exp2(log2(1.0 - (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2368 = 1.0 - _2331;
        float _2378 = (0.5 / (((_2119 * ((_2345 * _2368) + _2331)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2368) + _2331) * _2345))) * _2345;
        float _4456 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2380 = (isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2354 / ((_2358 * _2358) * 3.141590118408203125));
        float _2381 = isnan(1.0) ? _1965 : (isnan(_1965) ? 1.0 : min(_1965, 1.0));
        _2306 = (((_2367 * cbLight._m0[_2316].x) * _2380) * _2381) + _2242;
        _2308 = (((_2367 * cbLight._m0[_2316].y) * _2380) * _2381) + _2243;
        _2310 = (((_2367 * cbLight._m0[_2316].z) * _2380) * _2381) + _2244;
    }
    float _2416;
    float _2418;
    float _2420;
    if (_2045)
    {
        _2416 = _2306;
        _2418 = _2308;
        _2420 = _2310;
    }
    else
    {
        uint _2427 = _1950 + 3u;
        uint _2431 = _1950 + 11u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _705) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _782;
        float _2448 = cbLight._m0[_2427].y + _783;
        float _2449 = cbLight._m0[_2427].z + _784;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2427].xyz));
        float _4472 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2461 = dot(vec3(_702, _703, _704), vec3(_2454, _2455, _2456));
        float _4483 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4494 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2483 = 1.0 - _2446;
        float _2493 = (0.5 / (((_2119 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2483) + _2446) * _2460))) * _2460;
        float _4505 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _1966 : (isnan(_1966) ? 1.0 : min(_1966, 1.0));
        _2416 = (((_2482 * cbLight._m0[_2431].x) * _2495) * _2496) + _2306;
        _2418 = (((_2482 * cbLight._m0[_2431].y) * _2495) * _2496) + _2308;
        _2420 = (((_2482 * cbLight._m0[_2431].z) * _2495) * _2496) + _2310;
    }
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_1948.y == 0u)
    {
        float _2571 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2571;
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2571;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2571;
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.x;
        uint _2598 = uint((float(_2586.y) * floor(float(uint(cbSceneParam._m0[85u].y * _803) / _2587))) + floor(float(uint(cbSceneParam._m0[85u].x * _802) / _2587)));
        float _2608 = (log2(_2574 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2609 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        uint _2612 = uint(isnan(14.0) ? _2609 : (isnan(_2609) ? 14.0 : min(_2609, 14.0)));
        uvec4 _2617 = texelFetch(g_lightClusterGridBuffer, int(((_2612 << 2u) + (_2598 << 6u)) >> 2u));
        uint _2618 = _2617.x;
        uint _2619 = _2586.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2619 >> 4u) & 15u)) + 4294967295u) & _2618) == 0u) || ((_2619 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2941)
                {
                    frontier_phi_66_pred = _2925;
                    frontier_phi_66_pred_1 = _2930;
                    frontier_phi_66_pred_2 = _2929;
                    frontier_phi_66_pred_3 = _2928;
                    frontier_phi_66_pred_4 = _2927;
                    frontier_phi_66_pred_5 = _2926;
                }
                else
                {
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    uint _3076;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2927;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2940;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    for (;;)
                    {
                        uint _3080 = uint(findLSB(_3076)) + (_2931 << 5u);
                        uint _3077 = (_3076 + 4294967295u) & _3076;
                        uint _3082 = _3080 * 48u;
                        vec4 _3096 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3082)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3082 + 3u)).x));
                        uint _3102 = (_3080 * 48u) + 4u;
                        vec4 _3115 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3102)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3102 + 3u)).x));
                        uint _3121 = (_3080 * 48u) + 8u;
                        vec3 _3132 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3121)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3121 + 2u)).x));
                        float _3136 = _3096.x - _2572;
                        float _3137 = _3096.y - _2573;
                        float _3138 = _3096.z - _2574;
                        float _3139 = dot(vec3(_3136, _3137, _3138), vec3(_3136, _3137, _3138));
                        float _3142 = inversesqrt(_3139);
                        float _3143 = _3142 * _3136;
                        float _3144 = _3142 * _3137;
                        float _3145 = _3142 * _3138;
                        float _3146 = dot(vec3(_822, _825, _828), vec3(_3143, _3144, _3145));
                        float _3151 = 1.0 - (_3139 * _3096.w);
                        float _4531 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3153 = sqrt(_3139) * _3115.w;
                        float _3156 = 1.39999997615814208984375 / (_3153 + 1.39999997615814208984375);
                        float _3157 = _3156 * _3156;
                        float _3160 = ((1.0 - _3157) * _3146) + _3157;
                        float _3163 = _3153 * _3153;
                        float _3167 = ((isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))) * _3152) / ((_3163 * 0.699999988079071044921875) + 1.0);
                        float _3171 = (-0.0) - _2572;
                        float _3172 = (-0.0) - _2573;
                        float _3173 = (-0.0) - _2574;
                        float _3177 = inversesqrt(dot(vec3(_3171, _3172, _3173), vec3(_3171, _3172, _3173)));
                        float _3178 = _3177 * _3171;
                        float _3179 = _3177 * _3172;
                        float _3180 = _3177 * _3173;
                        float _3188 = exp2(log2(1.0 / ((_3163 * 3.5) + 5.0)) * 0.25);
                        float _3189 = 1.0 - _882;
                        float _3196 = sqrt(1.0 - ((1.0 - (_3189 * _3189)) * (1.0 - (_3188 * _3188))));
                        float _3197 = _3196 * _3196;
                        float _3198 = _3197 * _3197;
                        float _3199 = _3178 + _3143;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3205 = inversesqrt(dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201)));
                        float _3209 = dot(vec3(_822, _825, _828), vec3(_3178, _3179, _3180));
                        float _4547 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                        float _3213 = dot(vec3(_822, _825, _828), vec3(_3205 * _3199, _3205 * _3200, _3205 * _3201));
                        float _4558 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3216 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                        float _3220 = ((_3216 * _3216) * (_3198 + (-1.0))) + 1.0;
                        float _3221 = _3156 * _3197;
                        float _3222 = _3221 * _3221;
                        float _3225 = ((1.0 - _3222) * _3146) + _3222;
                        float _4569 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3226 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
                        float _3227 = 1.0 - _3197;
                        float _3237 = (0.5 / (((_3226 * ((_3212 * _3227) + _3197)) + 9.9999999392252902907785028219223e-09) + (((_3226 * _3227) + _3197) * _3212))) * _3226;
                        float _4580 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3248 = (((_3198 * 3.1415927410125732421875) * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) / ((_3220 * _3220) * ((_3163 * 2.1991131305694580078125) + 3.141590118408203125))) * _3152;
                        _3000 = (_3167 * _3115.x) + _3073;
                        _3001 = (_3167 * _3115.y) + _3074;
                        _3002 = (_3167 * _3115.z) + _3075;
                        _2997 = (_3248 * _3132.x) + _3070;
                        _2998 = (_3248 * _3132.y) + _3071;
                        _2999 = (_3248 * _3132.z) + _3072;
                        if (_3077 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3077;
                        }
                    }
                    frontier_phi_66_pred = _2997;
                    frontier_phi_66_pred_1 = _3002;
                    frontier_phi_66_pred_2 = _3001;
                    frontier_phi_66_pred_3 = _3000;
                    frontier_phi_66_pred_4 = _2999;
                    frontier_phi_66_pred_5 = _2998;
                }
                _2765 = frontier_phi_66_pred;
                _2775 = frontier_phi_66_pred_1;
                _2773 = frontier_phi_66_pred_2;
                _2771 = frontier_phi_66_pred_3;
                _2769 = frontier_phi_66_pred_4;
                _2767 = frontier_phi_66_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2765;
                    _2926 = _2767;
                    _2927 = _2769;
                    _2928 = _2771;
                    _2929 = _2773;
                    _2930 = _2775;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2781) & _2618) == 0u)
        {
            _2893 = _2764;
            _2895 = _2766;
            _2897 = _2768;
            _2899 = _2770;
            _2901 = _2772;
            _2903 = _2774;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
            float _2919 = _2918 * _2572;
            float _2920 = _2918 * _2573;
            float _2921 = _2918 * _2574;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3053 = _2764;
                float _3054 = _2766;
                float _3055 = _2768;
                float _3056 = _2770;
                float _3057 = _2772;
                float _3058 = _2774;
                uint _3059 = _2781;
                uint _3068;
                bool _3069;
                for (;;)
                {
                    _3068 = texelFetch(g_lightClassification, int((((_2612 << 5u) + (_2598 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                    _3069 = _3068 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3069)
                    {
                        frontier_phi_77_pred = _3058;
                        frontier_phi_77_pred_1 = _3057;
                        frontier_phi_77_pred_2 = _3056;
                        frontier_phi_77_pred_3 = _3055;
                        frontier_phi_77_pred_4 = _3054;
                        frontier_phi_77_pred_5 = _3053;
                    }
                    else
                    {
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        float _3277 = _3055;
                        float _3278 = _3056;
                        float _3279 = _3057;
                        float _3280 = _3058;
                        uint _3281 = _3068;
                        uint _3282;
                        vec4 _3307;
                        float _3308;
                        vec4 _3323;
                        vec3 _3335;
                        vec4 _3350;
                        vec4 _3365;
                        float _3412;
                        bool _3413;
                        for (;;)
                        {
                            uint _3292 = ((_3059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3281));
                            _3282 = (_3281 + 4294967295u) & _3281;
                            uint _3294 = _3292 * 40u;
                            _3307 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 3u)).x));
                            _3308 = _3307.w;
                            uint _3310 = (_3292 * 40u) + 4u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3325 = (_3292 * 40u) + 8u;
                            _3335 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3325)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3325 + 2u)).x));
                            uint _3337 = (_3292 * 40u) + 16u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3352 = (_3292 * 40u) + 20u;
                            _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            uint _3368 = (_3292 * 40u) + 24u;
                            vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3368)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3368 + 3u)).x));
                            uint _3387 = (_3292 * 40u) + 28u;
                            vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            _3412 = fma(_2574, _3400.z, fma(_2573, _3400.y, _3400.x * _2572)) + _3400.w;
                            _3413 = !((fma(_2574, _3381.z, fma(_2573, _3381.y, _3381.x * _2572)) + _3381.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3413)
                            {
                                float _3440 = _3307.x - _2572;
                                float _3441 = _3307.y - _2573;
                                float _3442 = _3307.z - _2574;
                                float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                                float _3446 = inversesqrt(_3443);
                                float _3447 = _3446 * _3440;
                                float _3448 = _3446 * _3441;
                                float _3449 = _3446 * _3442;
                                float _3453 = 1.0 - (_3443 / (_3308 * _3308));
                                float _4591 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3454 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3458 = sqrt(_3443) * _3323.w;
                                float _3460 = 1.39999997615814208984375 / (_3458 + 1.39999997615814208984375);
                                float _3461 = _3460 * _3460;
                                float _3464 = ((1.0 - _3461) * dot(vec3(_3447, _3448, _3449), vec3(_822, _825, _828))) + _3461;
                                float _3467 = _3458 * _3458;
                                float _3471 = (fma(_2574, _3350.z, fma(_2573, _3350.y, _3350.x * _2572)) + _3350.w) / _3412;
                                float _3472 = (fma(_2574, _3365.z, fma(_2573, _3365.y, _3365.x * _2572)) + _3365.w) / _3412;
                                float _3476 = 1.0 - dot(vec2(_3471, _3472), vec2(_3471, _3472));
                                float _4607 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
                                float _3478 = _3477 * (((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3454) / ((_3467 * 0.699999988079071044921875) + 1.0));
                                float _3490 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                                float _3491 = 1.0 - _882;
                                float _3498 = sqrt(1.0 - ((1.0 - (_3491 * _3491)) * (1.0 - (_3490 * _3490))));
                                float _3499 = _3498 * _3498;
                                float _3500 = _3499 * _3499;
                                float _3501 = _3447 - _2919;
                                float _3502 = _3448 - _2920;
                                float _3503 = _3449 - _2921;
                                float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                                float _3511 = dot(vec3(_822, _825, _828), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4618 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
                                float _3515 = dot(vec3(_822, _825, _828), vec3(_3507 * _3501, _3507 * _3502, _3507 * _3503));
                                float _4629 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                                float _3522 = ((_3518 * _3518) * (_3500 + (-1.0))) + 1.0;
                                float _3523 = _3460 * _3499;
                                float _3524 = _3523 * _3523;
                                float _3530 = ((1.0 - _3524) * dot(vec3(_822, _825, _828), vec3(_3447, _3448, _3449))) + _3524;
                                float _4640 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3532 = 1.0 - _3499;
                                float _3542 = (0.5 / (((_3531 * ((_3514 * _3532) + _3499)) + 9.9999999392252902907785028219223e-09) + (((_3531 * _3532) + _3499) * _3514))) * _3531;
                                float _4651 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3552 = (_3477 * _3454) * (((_3500 * 3.1415927410125732421875) * (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) / ((_3522 * _3522) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3478 * _3323.y;
                                frontier_phi_83_pred_1 = _3478 * _3323.x;
                                frontier_phi_83_pred_2 = _3552 * _3335.z;
                                frontier_phi_83_pred_3 = _3552 * _3335.y;
                                frontier_phi_83_pred_4 = _3552 * _3335.x;
                                frontier_phi_83_pred_5 = _3478 * _3323.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3560 = frontier_phi_83_pred;
                            _3559 = frontier_phi_83_pred_1;
                            _3558 = frontier_phi_83_pred_2;
                            _3557 = frontier_phi_83_pred_3;
                            _3556 = frontier_phi_83_pred_4;
                            _3561 = frontier_phi_83_pred_5;
                            _3265 = _3559 + _3278;
                            _3266 = _3560 + _3279;
                            _3267 = _3561 + _3280;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3264 = _3558 + _3277;
                            if (_3282 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3282;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3267;
                        frontier_phi_77_pred_1 = _3266;
                        frontier_phi_77_pred_2 = _3265;
                        frontier_phi_77_pred_3 = _3264;
                        frontier_phi_77_pred_4 = _3263;
                        frontier_phi_77_pred_5 = _3262;
                    }
                    _2904 = frontier_phi_77_pred;
                    _2902 = frontier_phi_77_pred_1;
                    _2900 = frontier_phi_77_pred_2;
                    _2898 = frontier_phi_77_pred_3;
                    _2896 = frontier_phi_77_pred_4;
                    _2894 = frontier_phi_77_pred_5;
                    uint _3060 = _3059 + 1u;
                    if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3053 = _2894;
                        _3054 = _2896;
                        _3055 = _2898;
                        _3056 = _2900;
                        _3057 = _2902;
                        _3058 = _2904;
                        _3059 = _3060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2898;
                frontier_phi_58_59_ladder_1 = _2904;
                frontier_phi_58_59_ladder_2 = _2902;
                frontier_phi_58_59_ladder_3 = _2900;
                frontier_phi_58_59_ladder_4 = _2896;
                frontier_phi_58_59_ladder_5 = _2894;
            }
            else
            {
                frontier_phi_58_59_ladder = _2768;
                frontier_phi_58_59_ladder_1 = _2774;
                frontier_phi_58_59_ladder_2 = _2772;
                frontier_phi_58_59_ladder_3 = _2770;
                frontier_phi_58_59_ladder_4 = _2766;
                frontier_phi_58_59_ladder_5 = _2764;
            }
            _2893 = frontier_phi_58_59_ladder_5;
            _2895 = frontier_phi_58_59_ladder_4;
            _2897 = frontier_phi_58_59_ladder;
            _2899 = frontier_phi_58_59_ladder_3;
            _2901 = frontier_phi_58_59_ladder_2;
            _2903 = frontier_phi_58_59_ladder_1;
        }
        float _2908 = isnan(1.0) ? _866 : (isnan(_866) ? 1.0 : min(_866, 1.0));
        _2631 = (_2908 * _2899) + _2083;
        _2633 = (_2908 * _2901) + _2085;
        _2635 = (_2908 * _2903) + _2087;
        _2637 = ((_2893 * 0.039999999105930328369140625) * _2908) + _2416;
        _2639 = ((_2895 * 0.039999999105930328369140625) * _2908) + _2418;
        _2641 = ((_2897 * 0.039999999105930328369140625) * _2908) + _2420;
    }
    else
    {
        _2631 = _2083;
        _2633 = _2085;
        _2635 = _2087;
        _2637 = _2416;
        _2639 = _2418;
        _2641 = _2420;
    }
    uint _2647 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _2653 = cbMtdParam._m0[17u].z * cbMtdParam._m0[19u].z;
    float _2659 = (((((_2653 * cbMtdParam._m0[14u].x) * _586.x) * _609) * _688) * (((1.0 - _662) * cbMtdParam._m0[20u].w) + _662)) * cbInstanceData._m0[_2647].x;
    float _2665 = (((((_2653 * cbMtdParam._m0[14u].y) * _586.y) * _609) * _688) * (((1.0 - _664) * cbMtdParam._m0[20u].w) + _664)) * cbInstanceData._m0[_2647].y;
    float _2671 = (((((_2653 * cbMtdParam._m0[14u].z) * _586.z) * _609) * _688) * (((1.0 - _666) * cbMtdParam._m0[20u].w) + _666)) * cbInstanceData._m0[_2647].z;
    float _4667 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _4678 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _4689 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _2688 = (((isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * (_2631 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _866))) + ((_2637 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + _2659;
    float _2690 = (_2665 + ((_2639 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2633 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _866)));
    float _2692 = (_2671 + ((_2641 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1703)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2635 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _866)));
    float _2693 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2694 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2695 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2701 = cbMtdParam._m0[2u].x * _2659;
    float _2702 = cbMtdParam._m0[2u].y * _2665;
    float _2703 = cbMtdParam._m0[2u].z * _2671;
    float _4715 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2705 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    uint _2706 = _841 + 6u;
    float _2714 = _802 / cbSceneParam._m0[86u].x;
    float _2715 = _803 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _724 : (isnan(_724) ? cbSceneParam._m0[77u].w : min(_724, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_724 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_724) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _724 : min(cbSceneParam._m0[80u].w, _724));
        float _2790 = _2789 / _724;
        float _2801 = _2790 * _775;
        float _2802 = _776 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2804 = _2790 * _777;
        float _2806 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2807 = _2806 + cbSceneParam._m0[79u].w;
        float _2808 = cbSceneParam._m0[79u].w - _2802;
        float _2814 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2804 * _2804));
        float _2817 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2814;
        float _2822 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2824 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3010;
        if (abs((_2803 - _2806) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3010 = ((((_2807 > 0.0) ? exp2(_2822 * _2807) : (2.0 - exp2(_2824 * _2807))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2817;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : max(_2807, _2808));
            float _2956 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : min(_2807, _2808));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _3010 = ((abs(_2814 / _2803) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2822 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2822 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2824 * _2965) - exp2(_2824 * _2966)) * _2954))) + (_2817 * cbSceneParam._m0[80u].z);
        }
        vec4 _3012 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _3021 = exp2((_3010 * (-1.44269502162933349609375)) * (1.0 - _3012.w));
        float _3022 = log2(_3021);
        float _3038 = log2(_2734);
        _2826 = (exp2(_3038 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].x)) * _3012.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2828 = (exp2(_3038 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].y)) * _3012.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2830 = (exp2(_3038 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3022 * cbSceneParam._m0[78u].z)) * _3012.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2832 = _3021 * _2734;
    }
    else
    {
        _2826 = _2731;
        _2828 = _2732;
        _2830 = _2733;
        _2832 = _2734;
    }
    bool _3048;
    vec4 _2842;
    vec4 _2864;
    float _2866;
    float _2870;
    float _2871;
    float _2872;
    float _2875;
    float _2878;
    float _2881;
    float _2882;
    bool _2892;
    for (;;)
    {
        _2842 = cbMatDynParam._m0[0u];
        float _2844 = roundEven(_2842.y);
        bool _2845 = _2844 == 3.0;
        float _2846 = log2(_2832);
        float _2850 = exp2(_2846 * cbSceneParam._m0[78u].x);
        float _2851 = exp2(_2846 * cbSceneParam._m0[78u].y);
        float _2852 = exp2(_2846 * cbSceneParam._m0[78u].z);
        float _2853 = _2850 * _2693;
        float _2854 = _2851 * _2694;
        float _2855 = _2852 * _2695;
        float _2862 = _791 + (-0.5);
        _2864 = cbMtdParam._m0[1u];
        _2866 = _2864.y * _2862;
        float _2869 = (_2844 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2870 = _2869 * (_2845 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2826)));
        _2871 = _2869 * (_2845 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2828)));
        _2872 = _2869 * (_2845 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2830)));
        _2875 = ((_2701 * _2705) * _2850) * _2869;
        _2878 = ((_2702 * _2705) * _2851) * _2869;
        _2881 = ((_2703 * _2705) * _2852) * _2869;
        _2882 = _2862 * 0.999000012874603271484375;
        _2892 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2892)
        {
            if ((cbInstanceData._m0[_841 + 7u].x + _2882) < 0.5)
            {
                _3048 = true;
                break;
            }
        }
        uint _2989 = _842 + uint(_2842.w);
        if ((cbInstanceData._m0[_2989].w < 1.0) && ((cbInstanceData._m0[_2989].w + _2882) < 0.5))
        {
            _3048 = true;
            break;
        }
        if ((_2866 + 1.0) < _2864.x)
        {
            _3048 = true;
            break;
        }
        _3048 = false;
        break;
    }
    float _3253;
    if (_3048)
    {
        discard_state = true;
        _3253 = 0.0;
    }
    else
    {
        _3253 = cbInstanceData._m0[_2706].w;
    }
    SV_Target.x = _2870;
    SV_Target.y = _2871;
    SV_Target.z = _2872;
    SV_Target.w = _3253;
    SV_Target_1.x = _2875;
    SV_Target_1.y = _2878;
    SV_Target_1.z = _2881;
    SV_Target_1.w = cbInstanceData._m0[_2706].w;
    discard_exit();
}


