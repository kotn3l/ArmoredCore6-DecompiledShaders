#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 TANGENT_2;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TANGENT_2_1;
layout(location = 4) out vec4 TEXCOORD_1;
layout(location = 5) out float TEXCOORD_4;
layout(location = 5, component = 1) out float TEXCOORD_10;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TANGENT_2_1.x = 0.0;
    TANGENT_2_1.y = 0.0;
    TANGENT_2_1.z = 0.0;
    TANGENT_2_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4 = 0.0;
    TEXCOORD_10 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _194 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _196 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _197 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _206 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _207 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _208 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _218 = (float(TANGENT_2.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _219 = (float(TANGENT_2.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _220 = (float(TANGENT_2.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _230 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _232 = texelFetch(g_InstanceIndexBuffer, int(_230));
    uint _233 = _232.x;
    precise float _234 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _239 = isnan(_234) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _234 : max(0.001000000047497451305389404296875, _234));
    precise float _241 = BLENDWEIGHT.x / _239;
    precise float _242 = BLENDWEIGHT.y / _239;
    precise float _243 = BLENDWEIGHT.z / _239;
    precise float _244 = BLENDWEIGHT.w / _239;
    uint _246 = _233 * 13u;
    uvec4 _251 = floatBitsToUint(cbInstanceData._m0[_246 + 4u]);
    uint _252 = _251.x;
    uint _254 = (_252 + uint(float(BLENDINDICES.x))) * 3u;
    uint _261 = _254 + 1u;
    uint _268 = _254 + 2u;
    precise float _275 = _241 * cbObjMatrix._m0[_254].x;
    precise float _276 = _241 * cbObjMatrix._m0[_261].x;
    precise float _277 = _241 * cbObjMatrix._m0[_268].x;
    precise float _278 = _241 * cbObjMatrix._m0[_254].y;
    precise float _279 = _241 * cbObjMatrix._m0[_261].y;
    precise float _280 = _241 * cbObjMatrix._m0[_268].y;
    precise float _281 = _241 * cbObjMatrix._m0[_254].z;
    precise float _282 = _241 * cbObjMatrix._m0[_261].z;
    precise float _283 = _241 * cbObjMatrix._m0[_268].z;
    precise float _284 = _241 * cbObjMatrix._m0[_254].w;
    precise float _285 = _241 * cbObjMatrix._m0[_261].w;
    precise float _286 = _241 * cbObjMatrix._m0[_268].w;
    uint _289 = (_252 + uint(float(BLENDINDICES.y))) * 3u;
    uint _296 = _289 + 1u;
    uint _303 = _289 + 2u;
    precise float _310 = _242 * cbObjMatrix._m0[_289].x;
    precise float _311 = _242 * cbObjMatrix._m0[_296].x;
    precise float _312 = _242 * cbObjMatrix._m0[_303].x;
    precise float _313 = _242 * cbObjMatrix._m0[_289].y;
    precise float _314 = _242 * cbObjMatrix._m0[_296].y;
    precise float _315 = _242 * cbObjMatrix._m0[_303].y;
    precise float _316 = _242 * cbObjMatrix._m0[_289].z;
    precise float _317 = _242 * cbObjMatrix._m0[_296].z;
    precise float _318 = _242 * cbObjMatrix._m0[_303].z;
    precise float _319 = _242 * cbObjMatrix._m0[_289].w;
    precise float _320 = _242 * cbObjMatrix._m0[_296].w;
    precise float _321 = _242 * cbObjMatrix._m0[_303].w;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    precise float _329 = _282 + _317;
    precise float _330 = _283 + _318;
    precise float _331 = _284 + _319;
    precise float _332 = _285 + _320;
    precise float _333 = _286 + _321;
    uint _336 = (_252 + uint(float(BLENDINDICES.z))) * 3u;
    uint _343 = _336 + 1u;
    uint _350 = _336 + 2u;
    precise float _357 = _243 * cbObjMatrix._m0[_336].x;
    precise float _358 = _243 * cbObjMatrix._m0[_343].x;
    precise float _359 = _243 * cbObjMatrix._m0[_350].x;
    precise float _360 = _243 * cbObjMatrix._m0[_336].y;
    precise float _361 = _243 * cbObjMatrix._m0[_343].y;
    precise float _362 = _243 * cbObjMatrix._m0[_350].y;
    precise float _363 = _243 * cbObjMatrix._m0[_336].z;
    precise float _364 = _243 * cbObjMatrix._m0[_343].z;
    precise float _365 = _243 * cbObjMatrix._m0[_350].z;
    precise float _366 = _243 * cbObjMatrix._m0[_336].w;
    precise float _367 = _243 * cbObjMatrix._m0[_343].w;
    precise float _368 = _243 * cbObjMatrix._m0[_350].w;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    precise float _376 = _329 + _364;
    precise float _377 = _330 + _365;
    precise float _378 = _331 + _366;
    precise float _379 = _332 + _367;
    precise float _380 = _333 + _368;
    uint _383 = (_252 + uint(float(BLENDINDICES.w))) * 3u;
    uint _390 = _383 + 1u;
    uint _397 = _383 + 2u;
    precise float _404 = _244 * cbObjMatrix._m0[_383].x;
    precise float _405 = _244 * cbObjMatrix._m0[_390].x;
    precise float _406 = _244 * cbObjMatrix._m0[_397].x;
    precise float _407 = _244 * cbObjMatrix._m0[_383].y;
    precise float _408 = _244 * cbObjMatrix._m0[_390].y;
    precise float _409 = _244 * cbObjMatrix._m0[_397].y;
    precise float _410 = _244 * cbObjMatrix._m0[_383].z;
    precise float _411 = _244 * cbObjMatrix._m0[_390].z;
    precise float _412 = _244 * cbObjMatrix._m0[_397].z;
    precise float _413 = _244 * cbObjMatrix._m0[_383].w;
    precise float _414 = _244 * cbObjMatrix._m0[_390].w;
    precise float _415 = _244 * cbObjMatrix._m0[_397].w;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = _376 + _411;
    precise float _424 = _377 + _412;
    precise float _425 = _378 + _413;
    precise float _426 = _379 + _414;
    precise float _427 = _380 + _415;
    precise float _428 = POSITION.x * _416;
    precise float _429 = POSITION.y * _419;
    precise float _430 = _429 + _428;
    precise float _431 = POSITION.z * _422;
    precise float _432 = _431 + _430;
    precise float _433 = 1.0 * _425;
    precise float _434 = _433 + _432;
    precise float _435 = POSITION.x * _417;
    precise float _436 = POSITION.y * _420;
    precise float _437 = _436 + _435;
    precise float _438 = POSITION.z * _423;
    precise float _439 = _438 + _437;
    precise float _440 = 1.0 * _426;
    precise float _441 = _440 + _439;
    precise float _442 = POSITION.x * _418;
    precise float _443 = POSITION.y * _421;
    precise float _444 = _443 + _442;
    precise float _445 = POSITION.z * _424;
    precise float _446 = _445 + _444;
    precise float _447 = 1.0 * _427;
    precise float _448 = _447 + _446;
    float _454 = cbSceneParam._m0[3u].x - _434;
    float _455 = cbSceneParam._m0[3u].y - _441;
    float _456 = cbSceneParam._m0[3u].z - _448;
    precise float _491 = _434 - cbSceneParam._m0[3u].x;
    precise float _492 = _441 - cbSceneParam._m0[3u].y;
    precise float _493 = _448 - cbSceneParam._m0[3u].z;
    precise float _521 = _491 * cbSceneParam._m0[24u].x;
    precise float _522 = _492 * cbSceneParam._m0[24u].y;
    precise float _523 = _522 + _521;
    precise float _524 = _493 * cbSceneParam._m0[24u].z;
    precise float _525 = _524 + _523;
    precise float _526 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _527 = _526 + _525;
    precise float _528 = _491 * cbSceneParam._m0[25u].x;
    precise float _529 = _492 * cbSceneParam._m0[25u].y;
    precise float _530 = _529 + _528;
    precise float _531 = _493 * cbSceneParam._m0[25u].z;
    precise float _532 = _531 + _530;
    precise float _533 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _534 = _533 + _532;
    precise float _535 = _491 * cbSceneParam._m0[26u].x;
    precise float _536 = _492 * cbSceneParam._m0[26u].y;
    precise float _537 = _536 + _535;
    precise float _538 = _493 * cbSceneParam._m0[26u].z;
    precise float _539 = _538 + _537;
    precise float _540 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _541 = _540 + _539;
    precise float _542 = _491 * cbSceneParam._m0[27u].x;
    precise float _543 = _492 * cbSceneParam._m0[27u].y;
    precise float _544 = _543 + _542;
    precise float _545 = _493 * cbSceneParam._m0[27u].z;
    precise float _546 = _545 + _544;
    precise float _547 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _548 = _547 + _546;
    gl_Position.x = _527;
    gl_Position.y = _534;
    gl_Position.z = _541;
    gl_Position.w = _548;
    NORMAL_1.x = fma(_197, _422, fma(_196, _419, _416 * _194));
    NORMAL_1.y = fma(_197, _423, fma(_196, _420, _417 * _194));
    NORMAL_1.z = fma(_197, _424, fma(_196, _421, _418 * _194));
    NORMAL_1.w = float(_233);
    TANGENT_1.x = fma(_208, _422, fma(_207, _419, _416 * _206));
    TANGENT_1.y = fma(_208, _423, fma(_207, _420, _417 * _206));
    TANGENT_1.z = fma(_208, _424, fma(_207, _421, _418 * _206));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TANGENT_2_1.x = fma(_220, _422, fma(_219, _419, _416 * _218));
    TANGENT_2_1.y = fma(_220, _423, fma(_219, _420, _417 * _218));
    TANGENT_2_1.z = fma(_220, _424, fma(_219, _421, _418 * _218));
    TANGENT_2_1.w = (float(TANGENT_2.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_1.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4 = COLOR_1.x;
    TEXCOORD_10 = sqrt(((_454 * _454) + (_455 * _455)) + (_456 * _456));
    gl_ClipDistance[0u] = dot(vec4(_527, _534, _541, _548), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_527, _534, _541, _548), vec4(cbInstanceData._m0[_246 + 3u]));
}


