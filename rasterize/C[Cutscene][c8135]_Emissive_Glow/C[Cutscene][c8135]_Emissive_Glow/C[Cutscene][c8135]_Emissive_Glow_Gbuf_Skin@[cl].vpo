#version 460

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uvec4 TANGENT_2;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR_1;
layout(location = 7) in ivec4 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TANGENT_2_1;
layout(location = 4) out vec4 TEXCOORD_1;
layout(location = 5) out float TEXCOORD_4;
layout(location = 5, component = 1) out float TEXCOORD_10;

void main()
{
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TANGENT_2_1.x = 0.0;
    TANGENT_2_1.y = 0.0;
    TANGENT_2_1.z = 0.0;
    TANGENT_2_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4 = 0.0;
    TEXCOORD_10 = 0.0;
    float _189 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _191 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _192 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _201 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _202 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _213 = (float(TANGENT_2.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _214 = (float(TANGENT_2.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _215 = (float(TANGENT_2.z) + (-127.0)) * 0.0078740157186985015869140625;
    uint _225 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + (uint(gl_InstanceIndex) - uint(gl_BaseInstance));
    uvec4 _227 = texelFetch(g_InstanceIndexBuffer, int(_225));
    uint _228 = _227.x;
    precise float _229 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
    float _234 = isnan(_229) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _229 : max(0.001000000047497451305389404296875, _229));
    precise float _236 = BLENDWEIGHT.x / _234;
    precise float _237 = BLENDWEIGHT.y / _234;
    precise float _238 = BLENDWEIGHT.z / _234;
    precise float _239 = BLENDWEIGHT.w / _234;
    uvec4 _246 = floatBitsToUint(cbInstanceData._m0[(_228 * 13u) + 4u]);
    uint _247 = _246.x;
    uint _249 = (_247 + uint(float(BLENDINDICES.x))) * 3u;
    uint _256 = _249 + 1u;
    uint _263 = _249 + 2u;
    precise float _270 = _236 * cbObjMatrix._m0[_249].x;
    precise float _271 = _236 * cbObjMatrix._m0[_256].x;
    precise float _272 = _236 * cbObjMatrix._m0[_263].x;
    precise float _273 = _236 * cbObjMatrix._m0[_249].y;
    precise float _274 = _236 * cbObjMatrix._m0[_256].y;
    precise float _275 = _236 * cbObjMatrix._m0[_263].y;
    precise float _276 = _236 * cbObjMatrix._m0[_249].z;
    precise float _277 = _236 * cbObjMatrix._m0[_256].z;
    precise float _278 = _236 * cbObjMatrix._m0[_263].z;
    precise float _279 = _236 * cbObjMatrix._m0[_249].w;
    precise float _280 = _236 * cbObjMatrix._m0[_256].w;
    precise float _281 = _236 * cbObjMatrix._m0[_263].w;
    uint _284 = (_247 + uint(float(BLENDINDICES.y))) * 3u;
    uint _291 = _284 + 1u;
    uint _298 = _284 + 2u;
    precise float _305 = _237 * cbObjMatrix._m0[_284].x;
    precise float _306 = _237 * cbObjMatrix._m0[_291].x;
    precise float _307 = _237 * cbObjMatrix._m0[_298].x;
    precise float _308 = _237 * cbObjMatrix._m0[_284].y;
    precise float _309 = _237 * cbObjMatrix._m0[_291].y;
    precise float _310 = _237 * cbObjMatrix._m0[_298].y;
    precise float _311 = _237 * cbObjMatrix._m0[_284].z;
    precise float _312 = _237 * cbObjMatrix._m0[_291].z;
    precise float _313 = _237 * cbObjMatrix._m0[_298].z;
    precise float _314 = _237 * cbObjMatrix._m0[_284].w;
    precise float _315 = _237 * cbObjMatrix._m0[_291].w;
    precise float _316 = _237 * cbObjMatrix._m0[_298].w;
    precise float _317 = _270 + _305;
    precise float _318 = _271 + _306;
    precise float _319 = _272 + _307;
    precise float _320 = _273 + _308;
    precise float _321 = _274 + _309;
    precise float _322 = _275 + _310;
    precise float _323 = _276 + _311;
    precise float _324 = _277 + _312;
    precise float _325 = _278 + _313;
    precise float _326 = _279 + _314;
    precise float _327 = _280 + _315;
    precise float _328 = _281 + _316;
    uint _331 = (_247 + uint(float(BLENDINDICES.z))) * 3u;
    uint _338 = _331 + 1u;
    uint _345 = _331 + 2u;
    precise float _352 = _238 * cbObjMatrix._m0[_331].x;
    precise float _353 = _238 * cbObjMatrix._m0[_338].x;
    precise float _354 = _238 * cbObjMatrix._m0[_345].x;
    precise float _355 = _238 * cbObjMatrix._m0[_331].y;
    precise float _356 = _238 * cbObjMatrix._m0[_338].y;
    precise float _357 = _238 * cbObjMatrix._m0[_345].y;
    precise float _358 = _238 * cbObjMatrix._m0[_331].z;
    precise float _359 = _238 * cbObjMatrix._m0[_338].z;
    precise float _360 = _238 * cbObjMatrix._m0[_345].z;
    precise float _361 = _238 * cbObjMatrix._m0[_331].w;
    precise float _362 = _238 * cbObjMatrix._m0[_338].w;
    precise float _363 = _238 * cbObjMatrix._m0[_345].w;
    precise float _364 = _317 + _352;
    precise float _365 = _318 + _353;
    precise float _366 = _319 + _354;
    precise float _367 = _320 + _355;
    precise float _368 = _321 + _356;
    precise float _369 = _322 + _357;
    precise float _370 = _323 + _358;
    precise float _371 = _324 + _359;
    precise float _372 = _325 + _360;
    precise float _373 = _326 + _361;
    precise float _374 = _327 + _362;
    precise float _375 = _328 + _363;
    uint _378 = (_247 + uint(float(BLENDINDICES.w))) * 3u;
    uint _385 = _378 + 1u;
    uint _392 = _378 + 2u;
    precise float _399 = _239 * cbObjMatrix._m0[_378].x;
    precise float _400 = _239 * cbObjMatrix._m0[_385].x;
    precise float _401 = _239 * cbObjMatrix._m0[_392].x;
    precise float _402 = _239 * cbObjMatrix._m0[_378].y;
    precise float _403 = _239 * cbObjMatrix._m0[_385].y;
    precise float _404 = _239 * cbObjMatrix._m0[_392].y;
    precise float _405 = _239 * cbObjMatrix._m0[_378].z;
    precise float _406 = _239 * cbObjMatrix._m0[_385].z;
    precise float _407 = _239 * cbObjMatrix._m0[_392].z;
    precise float _408 = _239 * cbObjMatrix._m0[_378].w;
    precise float _409 = _239 * cbObjMatrix._m0[_385].w;
    precise float _410 = _239 * cbObjMatrix._m0[_392].w;
    precise float _411 = _364 + _399;
    precise float _412 = _365 + _400;
    precise float _413 = _366 + _401;
    precise float _414 = _367 + _402;
    precise float _415 = _368 + _403;
    precise float _416 = _369 + _404;
    precise float _417 = _370 + _405;
    precise float _418 = _371 + _406;
    precise float _419 = _372 + _407;
    precise float _420 = _373 + _408;
    precise float _421 = _374 + _409;
    precise float _422 = _375 + _410;
    precise float _423 = POSITION.x * _411;
    precise float _424 = POSITION.y * _414;
    precise float _425 = _424 + _423;
    precise float _426 = POSITION.z * _417;
    precise float _427 = _426 + _425;
    precise float _428 = 1.0 * _420;
    precise float _429 = _428 + _427;
    precise float _430 = POSITION.x * _412;
    precise float _431 = POSITION.y * _415;
    precise float _432 = _431 + _430;
    precise float _433 = POSITION.z * _418;
    precise float _434 = _433 + _432;
    precise float _435 = 1.0 * _421;
    precise float _436 = _435 + _434;
    precise float _437 = POSITION.x * _413;
    precise float _438 = POSITION.y * _416;
    precise float _439 = _438 + _437;
    precise float _440 = POSITION.z * _419;
    precise float _441 = _440 + _439;
    precise float _442 = 1.0 * _422;
    precise float _443 = _442 + _441;
    float _449 = cbSceneParam._m0[3u].x - _429;
    float _450 = cbSceneParam._m0[3u].y - _436;
    float _451 = cbSceneParam._m0[3u].z - _443;
    precise float _486 = _429 - cbSceneParam._m0[3u].x;
    precise float _487 = _436 - cbSceneParam._m0[3u].y;
    precise float _488 = _443 - cbSceneParam._m0[3u].z;
    precise float _516 = _486 * cbSceneParam._m0[24u].x;
    precise float _517 = _487 * cbSceneParam._m0[24u].y;
    precise float _518 = _517 + _516;
    precise float _519 = _488 * cbSceneParam._m0[24u].z;
    precise float _520 = _519 + _518;
    precise float _521 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _522 = _521 + _520;
    precise float _523 = _486 * cbSceneParam._m0[25u].x;
    precise float _524 = _487 * cbSceneParam._m0[25u].y;
    precise float _525 = _524 + _523;
    precise float _526 = _488 * cbSceneParam._m0[25u].z;
    precise float _527 = _526 + _525;
    precise float _528 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _529 = _528 + _527;
    precise float _530 = _486 * cbSceneParam._m0[26u].x;
    precise float _531 = _487 * cbSceneParam._m0[26u].y;
    precise float _532 = _531 + _530;
    precise float _533 = _488 * cbSceneParam._m0[26u].z;
    precise float _534 = _533 + _532;
    precise float _535 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _536 = _535 + _534;
    precise float _537 = _486 * cbSceneParam._m0[27u].x;
    precise float _538 = _487 * cbSceneParam._m0[27u].y;
    precise float _539 = _538 + _537;
    precise float _540 = _488 * cbSceneParam._m0[27u].z;
    precise float _541 = _540 + _539;
    precise float _542 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _543 = _542 + _541;
    gl_Position.x = _522;
    gl_Position.y = _529;
    gl_Position.z = _536;
    gl_Position.w = _543;
    NORMAL_1.x = fma(_192, _417, fma(_191, _414, _411 * _189));
    NORMAL_1.y = fma(_192, _418, fma(_191, _415, _412 * _189));
    NORMAL_1.z = fma(_192, _419, fma(_191, _416, _413 * _189));
    NORMAL_1.w = float(_228);
    TANGENT_1.x = fma(_203, _417, fma(_202, _414, _411 * _201));
    TANGENT_1.y = fma(_203, _418, fma(_202, _415, _412 * _201));
    TANGENT_1.z = fma(_203, _419, fma(_202, _416, _413 * _201));
    TANGENT_1.w = (float(TANGENT.w) + (-127.0)) * 0.0078740157186985015869140625;
    TANGENT_2_1.x = fma(_215, _417, fma(_214, _414, _411 * _213));
    TANGENT_2_1.y = fma(_215, _418, fma(_214, _415, _412 * _213));
    TANGENT_2_1.z = fma(_215, _419, fma(_214, _416, _413 * _213));
    TANGENT_2_1.w = (float(TANGENT_2.w) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_1.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_1.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[1u].x) + cbTexScroll._m0[1u].z;
    TEXCOORD_1.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[1u].y) + cbTexScroll._m0[1u].w;
    TEXCOORD_4 = COLOR_1.x;
    TEXCOORD_10 = sqrt(((_449 * _449) + (_450 * _450)) + (_451 * _451));
}


